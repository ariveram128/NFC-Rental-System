
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
   0:	00 84 00 20 81 5d 01 00 9d ba 02 00 55 5d 01 00     ... .]......U]..
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
  10:	55 5d 01 00 55 5d 01 00 55 5d 01 00 00 00 00 00     U]..U]..U]......
	...
		LOG_ERR("Unexpected conn object. Aborting.");
  2c:	45 55 01 00 55 5d 01 00 00 00 00 00 f1 54 01 00     EU..U].......T..
		discovery_complete_error(&bt_gatt_dm_inst, -EINVAL);

		break;
	}

	return BT_GATT_ITER_STOP;
  3c:	55 5d 01 00                                         U]..

00000040 <_irq_vector_table>:
	switch (params->type) {
  40:	f5 55 01 00 5d eb 02 00 f5 55 01 00 f5 55 01 00     .U..]....U...U..
		discovery_complete_error(&bt_gatt_dm_inst, -EINVAL);
  50:	f5 55 01 00 f5 55 01 00 f5 55 01 00 f5 55 01 00     .U...U...U...U..
		if (dm->cur_attr_id > 1) {
  60:	0b eb 02 00 f5 55 01 00 f5 55 01 00 43 eb 02 00     .....U...U..C...
			dm->discover_params.type =
  70:	f5 55 01 00 f5 55 01 00 f5 55 01 00 f5 55 01 00     .U...U...U...U..
				LOG_ERR("Characteristic discover failed,"
  80:	f5 55 01 00 f5 55 01 00 f5 55 01 00 f5 55 01 00     .U...U...U...U..
  90:	f5 55 01 00 f5 55 01 00 f5 55 01 00 f5 55 01 00     .U...U...U...U..
	if (!attr) {
  a0:	f5 55 01 00 f5 55 01 00 f5 55 01 00 f5 55 01 00     .U...U...U...U..
		attr_store(dm, attr, sizeof(*service_val));
  b0:	f5 55 01 00 f5 55 01 00 f5 55 01 00 f5 55 01 00     .U...U...U...U..
		LOG_ERR("Not enough memory for service attribute.");
  c0:	f5 55 01 00 f5 55 01 00 f5 55 01 00 f5 55 01 00     .U...U...U...U..
		LOG_ERR("Not enough memory for service attribute data.");
  d0:	f5 55 01 00 f5 55 01 00 f5 55 01 00 f5 55 01 00     .U...U...U...U..
		discovery_complete_error(dm, -ENOMEM);
  e0:	f5 55 01 00 f5 55 01 00 f5 55 01 00 f5 55 01 00     .U...U...U...U..
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
  f0:	f5 55 01 00 f5 55 01 00 f5 55 01 00 f5 55 01 00     .U...U...U...U..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
		LOG_ERR("Not enough memory for service attribute data.");
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
	dm->discover_params.end_handle = cur_service_val->end_handle;
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
	if (cur_attr->handle == cur_service_val->end_handle) {
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
		discovery_complete(dm);
     110:	f04f 30ff 	movne.w	r0, #4294967295
	dm->discover_params.uuid         = NULL;
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
     118:	f1ad 0c08 	sub.w	ip, sp, #8
	dm->discover_params.start_handle = cur_attr->handle + 1;
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f00c fdb4 	bl	cc8c <__udivmoddi4>
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	if (err) {
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
		LOG_ERR("Descriptor discover failed, error: %d.", err);
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <ocrypto_bigint_add256>:
     134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     13c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
		LOG_ERR("Not enough memory for next attribute descriptor"
     140:	185b      	adds	r3, r3, r1
     142:	eb54 040c 	adcs.w	r4, r4, ip
     146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     14a:	414d      	adcs	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
     14c:	eb56 060c 	adcs.w	r6, r6, ip
     150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     154:	414f      	adcs	r7, r1
     156:	eb58 080c 	adcs.w	r8, r8, ip
     15a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     15e:	eb59 0901 	adcs.w	r9, r9, r1
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
     162:	eb5a 0a0c 	adcs.w	sl, sl, ip
     166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
		struct bt_gatt_chrc *cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
     16a:	4180      	sbcs	r0, r0
     16c:	3001      	adds	r0, #1
		cur_gatt_chrc->uuid = cur_attr->uuid;
     16e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
	return BT_GATT_ITER_CONTINUE;
     172:	4770      	bx	lr

00000174 <ocrypto_bigint_sub256>:
}
     174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
		cur_attr = attr_store(dm, attr, 0);
     17c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     180:	1a5b      	subs	r3, r3, r1
     182:	eb74 040c 	sbcs.w	r4, r4, ip
	if (!cur_attr) {
     186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
		LOG_ERR("Not enough memory for next attribute descriptor"
     18a:	418d      	sbcs	r5, r1
     18c:	eb76 060c 	sbcs.w	r6, r6, ip
     190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     194:	418f      	sbcs	r7, r1
     196:	eb78 080c 	sbcs.w	r8, r8, ip
     19a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
	if (!attr) {
     19e:	eb79 0901 	sbcs.w	r9, r9, r1
	cur_attr = attr_find_by_handle(dm, attr->handle);
     1a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     1a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
		discovery_complete_error(dm, -ESRCH);
     1aa:	4180      	sbcs	r0, r0
     1ac:	4240      	negs	r0, r0
     1ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
     1b2:	4770      	bx	lr

000001b4 <ocrypto_bigint_cadd256>:
     1b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
     1b8:	4252      	negs	r2, r2
     1ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
     1c2:	4017      	ands	r7, r2
     1c4:	19db      	adds	r3, r3, r7
     1c6:	ea18 0802 	ands.w	r8, r8, r2
	if (!cur_gatt_chrc->uuid) {
     1ca:	eb54 0408 	adcs.w	r4, r4, r8
     1ce:	ea19 0902 	ands.w	r9, r9, r2
     1d2:	eb55 0509 	adcs.w	r5, r5, r9
     1d6:	ea1a 0a02 	ands.w	sl, sl, r2
     1da:	eb56 060a 	adcs.w	r6, r6, sl
     1de:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1e8:	4017      	ands	r7, r2
     1ea:	417b      	adcs	r3, r7
     1ec:	ea18 0802 	ands.w	r8, r8, r2
     1f0:	eb54 0408 	adcs.w	r4, r4, r8
     1f4:	ea19 0902 	ands.w	r9, r9, r2
     1f8:	eb55 0509 	adcs.w	r5, r5, r9
     1fc:	ea1a 0a02 	ands.w	sl, sl, r2
     200:	eb56 060a 	adcs.w	r6, r6, sl
     204:	c078      	stmia	r0!, {r3, r4, r5, r6}
     206:	4180      	sbcs	r0, r0
     208:	3001      	adds	r0, #1
     20a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     20e:	4770      	bx	lr

00000210 <ocrypto_bigint_csub256>:
     210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     214:	4252      	negs	r2, r2
     216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     21a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     21e:	4017      	ands	r7, r2
     220:	1bdb      	subs	r3, r3, r7
     222:	ea18 0802 	ands.w	r8, r8, r2
     226:	eb74 0408 	sbcs.w	r4, r4, r8
     22a:	ea19 0902 	ands.w	r9, r9, r2
     22e:	eb75 0509 	sbcs.w	r5, r5, r9
     232:	ea1a 0a02 	ands.w	sl, sl, r2
     236:	eb76 060a 	sbcs.w	r6, r6, sl
     23a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     23c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     244:	4017      	ands	r7, r2
     246:	41bb      	sbcs	r3, r7
     248:	ea18 0802 	ands.w	r8, r8, r2
     24c:	eb74 0408 	sbcs.w	r4, r4, r8
     250:	ea19 0902 	ands.w	r9, r9, r2
     254:	eb75 0509 	sbcs.w	r5, r5, r9
     258:	ea1a 0a02 	ands.w	sl, sl, r2
     25c:	eb76 060a 	sbcs.w	r6, r6, sl
     260:	c078      	stmia	r0!, {r3, r4, r5, r6}
     262:	4180      	sbcs	r0, r0
     264:	4240      	negs	r0, r0
     266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     26a:	4770      	bx	lr

0000026c <ocrypto_bigint_cswap256>:
     26c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     270:	4252      	negs	r2, r2
     272:	f04f 0804 	mov.w	r8, #4

00000276 <cswap256_loop>:
     276:	e890 0030 	ldmia.w	r0, {r4, r5}
     27a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     27e:	1ba3      	subs	r3, r4, r6
     280:	4013      	ands	r3, r2
     282:	1ae4      	subs	r4, r4, r3
     284:	18f6      	adds	r6, r6, r3
     286:	1beb      	subs	r3, r5, r7
     288:	4013      	ands	r3, r2
     28a:	1aed      	subs	r5, r5, r3
     28c:	18ff      	adds	r7, r7, r3
     28e:	c030      	stmia	r0!, {r4, r5}
     290:	c1c0      	stmia	r1!, {r6, r7}
     292:	f1b8 0801 	subs.w	r8, r8, #1
     296:	d1ee      	bne.n	276 <cswap256_loop>
     298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     29c:	4770      	bx	lr
     29e:	bf00      	nop

000002a0 <ocrypto_mul256_noframe>:
     2a0:	b500      	push	{lr}
     2a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     2a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     2aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     2ae:	b402      	push	{r1}
     2b0:	fba7 5102 	umull	r5, r1, r7, r2
     2b4:	950a      	str	r5, [sp, #40]	; 0x28
     2b6:	fba8 0b02 	umull	r0, fp, r8, r2
     2ba:	fbe7 1063 	umaal	r1, r0, r7, r3
     2be:	fbe9 b062 	umaal	fp, r0, r9, r2
     2c2:	910b      	str	r1, [sp, #44]	; 0x2c
     2c4:	fba8 5103 	umull	r5, r1, r8, r3
     2c8:	fbea 0162 	umaal	r0, r1, sl, r2
     2cc:	fbe7 b564 	umaal	fp, r5, r7, r4
     2d0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2d4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     2dc:	fba9 b603 	umull	fp, r6, r9, r3
     2e0:	fbea 1663 	umaal	r1, r6, sl, r3
     2e4:	fbec 5663 	umaal	r5, r6, ip, r3
     2e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2f0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2f4:	fbec 6b64 	umaal	r6, fp, ip, r4
     2f8:	900d      	str	r0, [sp, #52]	; 0x34
     2fa:	fbac 3002 	umull	r3, r0, ip, r2
     2fe:	9c05      	ldr	r4, [sp, #20]
     300:	fbee 5062 	umaal	r5, r0, lr, r2
     304:	fbe9 6064 	umaal	r6, r0, r9, r4
     308:	fbea b064 	umaal	fp, r0, sl, r4
     30c:	fbe7 3164 	umaal	r3, r1, r7, r4
     310:	fbe8 5164 	umaal	r5, r1, r8, r4
     314:	9c06      	ldr	r4, [sp, #24]
     316:	fbe8 6164 	umaal	r6, r1, r8, r4
     31a:	fbe9 b164 	umaal	fp, r1, r9, r4
     31e:	fbea 0164 	umaal	r0, r1, sl, r4
     322:	930e      	str	r3, [sp, #56]	; 0x38
     324:	fba7 3204 	umull	r3, r2, r7, r4
     328:	9c07      	ldr	r4, [sp, #28]
     32a:	fbe7 6264 	umaal	r6, r2, r7, r4
     32e:	fbe8 b264 	umaal	fp, r2, r8, r4
     332:	fbe9 0264 	umaal	r0, r2, r9, r4
     336:	fbea 1264 	umaal	r1, r2, sl, r4
     33a:	9c04      	ldr	r4, [sp, #16]
     33c:	fbe9 5364 	umaal	r5, r3, r9, r4
     340:	fbea 6364 	umaal	r6, r3, sl, r4
     344:	9c08      	ldr	r4, [sp, #32]
     346:	fbe7 b364 	umaal	fp, r3, r7, r4
     34a:	fbe8 0364 	umaal	r0, r3, r8, r4
     34e:	fbe9 1364 	umaal	r1, r3, r9, r4
     352:	fbea 2364 	umaal	r2, r3, sl, r4
     356:	950f      	str	r5, [sp, #60]	; 0x3c
     358:	f85d 9b04 	ldr.w	r9, [sp], #4
     35c:	e899 0600 	ldmia.w	r9, {r9, sl}
     360:	f8dd 8000 	ldr.w	r8, [sp]
     364:	fba9 5408 	umull	r5, r4, r9, r8
     368:	fbea b468 	umaal	fp, r4, sl, r8
     36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
     370:	fbec 0468 	umaal	r0, r4, ip, r8
     374:	fbee 1468 	umaal	r1, r4, lr, r8
     378:	fbe9 2468 	umaal	r2, r4, r9, r8
     37c:	fbea 3468 	umaal	r3, r4, sl, r8
     380:	f8dd 8004 	ldr.w	r8, [sp, #4]
     384:	fbee 6568 	umaal	r6, r5, lr, r8
     388:	fbe9 b568 	umaal	fp, r5, r9, r8
     38c:	fbea 0568 	umaal	r0, r5, sl, r8
     390:	f8dd 8014 	ldr.w	r8, [sp, #20]
     394:	fbec 1568 	umaal	r1, r5, ip, r8
     398:	fbee 2568 	umaal	r2, r5, lr, r8
     39c:	fbe9 3568 	umaal	r3, r5, r9, r8
     3a0:	fbea 4568 	umaal	r4, r5, sl, r8
     3a4:	960f      	str	r6, [sp, #60]	; 0x3c
     3a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
     3aa:	fbae 7608 	umull	r7, r6, lr, r8
     3ae:	fbe9 0668 	umaal	r0, r6, r9, r8
     3b2:	fbea 1668 	umaal	r1, r6, sl, r8
     3b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
     3ba:	fbec 2668 	umaal	r2, r6, ip, r8
     3be:	fbee 3668 	umaal	r3, r6, lr, r8
     3c2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3c6:	fbea 5668 	umaal	r5, r6, sl, r8
     3ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
     3ce:	fbec b768 	umaal	fp, r7, ip, r8
     3d2:	fbee 0768 	umaal	r0, r7, lr, r8
     3d6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3da:	fbea 2768 	umaal	r2, r7, sl, r8
     3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3e2:	fbec 3768 	umaal	r3, r7, ip, r8
     3e6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ea:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ee:	fbea 6768 	umaal	r6, r7, sl, r8
     3f2:	b008      	add	sp, #32
     3f4:	bd00      	pop	{pc}
     3f6:	bf00      	nop

000003f8 <ocrypto_bigint_mul256>:
     3f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3fc:	b087      	sub	sp, #28
     3fe:	f7ff ff4f 	bl	2a0 <ocrypto_mul256_noframe>
     402:	f8dd 801c 	ldr.w	r8, [sp, #28]
     406:	f108 0820 	add.w	r8, r8, #32
     40a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     40e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000418 <ocrypto_sqr256_noframe>:
     418:	b500      	push	{lr}
     41a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     41e:	fba3 5203 	umull	r5, r2, r3, r3
     422:	9501      	str	r5, [sp, #4]
     424:	fba3 0104 	umull	r0, r1, r3, r4
     428:	fbe3 2064 	umaal	r2, r0, r3, r4
     42c:	fbe3 1067 	umaal	r1, r0, r3, r7
     430:	9202      	str	r2, [sp, #8]
     432:	fba3 5207 	umull	r5, r2, r3, r7
     436:	fbe3 0268 	umaal	r0, r2, r3, r8
     43a:	fbe4 1564 	umaal	r1, r5, r4, r4
     43e:	fbe3 0568 	umaal	r0, r5, r3, r8
     442:	fbe3 2569 	umaal	r2, r5, r3, r9
     446:	9103      	str	r1, [sp, #12]
     448:	fba4 b607 	umull	fp, r6, r4, r7
     44c:	fbe3 2669 	umaal	r2, r6, r3, r9
     450:	fbe3 566a 	umaal	r5, r6, r3, sl
     454:	fbe4 0b67 	umaal	r0, fp, r4, r7
     458:	fbe4 2b68 	umaal	r2, fp, r4, r8
     45c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     464:	9004      	str	r0, [sp, #16]
     466:	fba4 1008 	umull	r1, r0, r4, r8
     46a:	fbe4 5069 	umaal	r5, r0, r4, r9
     46e:	fbe3 606c 	umaal	r6, r0, r3, ip
     472:	fbe3 b06e 	umaal	fp, r0, r3, lr
     476:	fbe7 2167 	umaal	r2, r1, r7, r7
     47a:	fbe4 5169 	umaal	r5, r1, r4, r9
     47e:	fbe4 616a 	umaal	r6, r1, r4, sl
     482:	fbe3 b16e 	umaal	fp, r1, r3, lr
     486:	fbe4 016e 	umaal	r0, r1, r4, lr
     48a:	9205      	str	r2, [sp, #20]
     48c:	fba7 3208 	umull	r3, r2, r7, r8
     490:	fbe4 626a 	umaal	r6, r2, r4, sl
     494:	fbe4 b26c 	umaal	fp, r2, r4, ip
     498:	fbe4 026e 	umaal	r0, r2, r4, lr
     49c:	fbe7 126e 	umaal	r1, r2, r7, lr
     4a0:	fbe7 5368 	umaal	r5, r3, r7, r8
     4a4:	fbe7 6369 	umaal	r6, r3, r7, r9
     4a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
     4ac:	fbe7 036c 	umaal	r0, r3, r7, ip
     4b0:	fbe7 136e 	umaal	r1, r3, r7, lr
     4b4:	fbe8 236e 	umaal	r2, r3, r8, lr
     4b8:	9506      	str	r5, [sp, #24]
     4ba:	fba7 5409 	umull	r5, r4, r7, r9
     4be:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4c2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4c6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4ca:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ce:	fbe9 346e 	umaal	r3, r4, r9, lr
     4d2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4da:	fbe8 056a 	umaal	r0, r5, r8, sl
     4de:	fbe8 156c 	umaal	r1, r5, r8, ip
     4e2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4e6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ea:	fbea 456e 	umaal	r4, r5, sl, lr
     4ee:	9607      	str	r6, [sp, #28]
     4f0:	fba8 7609 	umull	r7, r6, r8, r9
     4f4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4f8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4fc:	fbe9 266c 	umaal	r2, r6, r9, ip
     500:	fbea 366c 	umaal	r3, r6, sl, ip
     504:	fbea 466e 	umaal	r4, r6, sl, lr
     508:	fbec 566e 	umaal	r5, r6, ip, lr
     50c:	fbe8 b769 	umaal	fp, r7, r8, r9
     510:	fbe9 0769 	umaal	r0, r7, r9, r9
     514:	fbe9 176a 	umaal	r1, r7, r9, sl
     518:	fbea 276a 	umaal	r2, r7, sl, sl
     51c:	fbea 376c 	umaal	r3, r7, sl, ip
     520:	fbec 476c 	umaal	r4, r7, ip, ip
     524:	fbec 576e 	umaal	r5, r7, ip, lr
     528:	fbee 676e 	umaal	r6, r7, lr, lr
     52c:	bd00      	pop	{pc}
     52e:	bf00      	nop

00000530 <ocrypto_bigint_sqr256>:
     530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	b087      	sub	sp, #28
     536:	f7ff ff6f 	bl	418 <ocrypto_sqr256_noframe>
     53a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     53e:	f108 0820 	add.w	r8, r8, #32
     542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000550 <ocrypto_constant_time_equal>:
     550:	b430      	push	{r4, r5}
     552:	f04f 0300 	mov.w	r3, #0

00000556 <constant_time_equal_loop>:
     556:	f810 4b01 	ldrb.w	r4, [r0], #1
     55a:	f811 5b01 	ldrb.w	r5, [r1], #1
     55e:	3a01      	subs	r2, #1
     560:	ea84 0405 	eor.w	r4, r4, r5
     564:	ea43 0304 	orr.w	r3, r3, r4
     568:	d1f5      	bne.n	556 <constant_time_equal_loop>
     56a:	f1a3 0301 	sub.w	r3, r3, #1
     56e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     572:	bc30      	pop	{r4, r5}
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <ocrypto_constant_time_is_zero>:
     578:	f04f 0300 	mov.w	r3, #0

0000057c <constant_time_is_zero_loop>:
     57c:	f810 2b01 	ldrb.w	r2, [r0], #1
     580:	3901      	subs	r1, #1
     582:	ea43 0302 	orr.w	r3, r3, r2
     586:	d1f9      	bne.n	57c <constant_time_is_zero_loop>
     588:	f1a3 0301 	sub.w	r3, r3, #1
     58c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     590:	4770      	bx	lr
     592:	bf00      	nop

00000594 <ocrypto_constant_time_xor>:
     594:	b430      	push	{r4, r5}

00000596 <constant_time_xor_loop>:
     596:	f811 4b01 	ldrb.w	r4, [r1], #1
     59a:	f812 5b01 	ldrb.w	r5, [r2], #1
     59e:	406c      	eors	r4, r5
     5a0:	f800 4b01 	strb.w	r4, [r0], #1
     5a4:	3b01      	subs	r3, #1
     5a6:	d1f6      	bne.n	596 <constant_time_xor_loop>
     5a8:	bc30      	pop	{r4, r5}
     5aa:	4770      	bx	lr

000005ac <ocrypto_mod_p256_add>:
     5ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b8:	185b      	adds	r3, r3, r1
     5ba:	eb54 040c 	adcs.w	r4, r4, ip
     5be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5c2:	414d      	adcs	r5, r1
     5c4:	eb56 060c 	adcs.w	r6, r6, ip
     5c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5cc:	414f      	adcs	r7, r1
     5ce:	eb58 080c 	adcs.w	r8, r8, ip
     5d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5d6:	eb59 0901 	adcs.w	r9, r9, r1
     5da:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5de:	4189      	sbcs	r1, r1
     5e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     5e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     5e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     5ec:	f176 0600 	sbcs.w	r6, r6, #0
     5f0:	f177 0700 	sbcs.w	r7, r7, #0
     5f4:	f178 0800 	sbcs.w	r8, r8, #0
     5f8:	f179 0901 	sbcs.w	r9, r9, #1
     5fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     600:	f151 0100 	adcs.w	r1, r1, #0
     604:	185b      	adds	r3, r3, r1
     606:	414c      	adcs	r4, r1
     608:	414d      	adcs	r5, r1
     60a:	f156 0600 	adcs.w	r6, r6, #0
     60e:	f157 0700 	adcs.w	r7, r7, #0
     612:	f158 0800 	adcs.w	r8, r8, #0
     616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     61a:	eb5a 0a01 	adcs.w	sl, sl, r1
     61e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     626:	4770      	bx	lr

00000628 <ocrypto_mod_p256_sub>:
     628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     62c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     634:	1a5b      	subs	r3, r3, r1
     636:	eb74 040c 	sbcs.w	r4, r4, ip
     63a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     63e:	418d      	sbcs	r5, r1
     640:	eb76 060c 	sbcs.w	r6, r6, ip
     644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     648:	418f      	sbcs	r7, r1
     64a:	eb78 080c 	sbcs.w	r8, r8, ip
     64e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     652:	eb79 0901 	sbcs.w	r9, r9, r1
     656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     65a:	4189      	sbcs	r1, r1
     65c:	185b      	adds	r3, r3, r1
     65e:	414c      	adcs	r4, r1
     660:	414d      	adcs	r5, r1
     662:	f156 0600 	adcs.w	r6, r6, #0
     666:	f157 0700 	adcs.w	r7, r7, #0
     66a:	f158 0800 	adcs.w	r8, r8, #0
     66e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     672:	eb5a 0a01 	adcs.w	sl, sl, r1
     676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     67a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     67e:	4770      	bx	lr

00000680 <mul_reduce>:
     680:	eb18 0804 	adds.w	r8, r8, r4
     684:	eb59 0905 	adcs.w	r9, r9, r5
     688:	eb5a 0a06 	adcs.w	sl, sl, r6
     68c:	eb5b 0b07 	adcs.w	fp, fp, r7
     690:	f05f 0c00 	movs.w	ip, #0
     694:	f14c 0c00 	adc.w	ip, ip, #0
     698:	eb18 0805 	adds.w	r8, r8, r5
     69c:	eb59 0906 	adcs.w	r9, r9, r6
     6a0:	eb5a 0a07 	adcs.w	sl, sl, r7
     6a4:	eb5b 0b07 	adcs.w	fp, fp, r7
     6a8:	eb50 000c 	adcs.w	r0, r0, ip
     6ac:	f05f 0c00 	movs.w	ip, #0
     6b0:	eb51 010c 	adcs.w	r1, r1, ip
     6b4:	eb52 020c 	adcs.w	r2, r2, ip
     6b8:	4163      	adcs	r3, r4
     6ba:	f14c 0c00 	adc.w	ip, ip, #0
     6be:	ebb8 0807 	subs.w	r8, r8, r7
     6c2:	f179 0900 	sbcs.w	r9, r9, #0
     6c6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ce:	41a8      	sbcs	r0, r5
     6d0:	41b1      	sbcs	r1, r6
     6d2:	41a2      	sbcs	r2, r4
     6d4:	41b3      	sbcs	r3, r6
     6d6:	f16c 0c00 	sbc.w	ip, ip, #0
     6da:	ebbb 0b05 	subs.w	fp, fp, r5
     6de:	41b0      	sbcs	r0, r6
     6e0:	41b9      	sbcs	r1, r7
     6e2:	41aa      	sbcs	r2, r5
     6e4:	41bb      	sbcs	r3, r7
     6e6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ea:	f04c 0601 	orr.w	r6, ip, #1
     6ee:	f08c 0702 	eor.w	r7, ip, #2
     6f2:	eb18 0806 	adds.w	r8, r8, r6
     6f6:	eb59 096c 	adcs.w	r9, r9, ip, asr #1
     6fa:	eb5a 0a6c 	adcs.w	sl, sl, ip, asr #1
     6fe:	eb7b 0b6c 	sbcs.w	fp, fp, ip, asr #1
     702:	eb70 046c 	sbcs.w	r4, r0, ip, asr #1
     706:	eb71 056c 	sbcs.w	r5, r1, ip, asr #1
     70a:	eb72 0667 	sbcs.w	r6, r2, r7, asr #1
     70e:	eb53 076c 	adcs.w	r7, r3, ip, asr #1
     712:	eb6c 0c6c 	sbc.w	ip, ip, ip, asr #1
     716:	eb18 000c 	adds.w	r0, r8, ip
     71a:	eb59 010c 	adcs.w	r1, r9, ip
     71e:	eb5a 020c 	adcs.w	r2, sl, ip
     722:	f15b 0300 	adcs.w	r3, fp, #0
     726:	f154 0400 	adcs.w	r4, r4, #0
     72a:	f155 0500 	adcs.w	r5, r5, #0
     72e:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     732:	eb57 070c 	adcs.w	r7, r7, ip
     736:	4770      	bx	lr

00000738 <ocrypto_mod_p256_mul>:
     738:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     73c:	b087      	sub	sp, #28
     73e:	f7ff fdaf 	bl	2a0 <ocrypto_mul256_noframe>
     742:	f8dd 8010 	ldr.w	r8, [sp, #16]
     746:	f8dd 9014 	ldr.w	r9, [sp, #20]
     74a:	f8dd a018 	ldr.w	sl, [sp, #24]
     74e:	f7ff ff97 	bl	680 <mul_reduce>
     752:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     756:	f7ff ff93 	bl	680 <mul_reduce>
     75a:	b003      	add	sp, #12
     75c:	f85d 8b04 	ldr.w	r8, [sp], #4
     760:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000768 <ocrypto_mod_p256_sqr>:
     768:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     76c:	b087      	sub	sp, #28
     76e:	f7ff fe53 	bl	418 <ocrypto_sqr256_noframe>
     772:	f8dd 8010 	ldr.w	r8, [sp, #16]
     776:	f8dd 9014 	ldr.w	r9, [sp, #20]
     77a:	f8dd a018 	ldr.w	sl, [sp, #24]
     77e:	f7ff ff7f 	bl	680 <mul_reduce>
     782:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     786:	f7ff ff7b 	bl	680 <mul_reduce>
     78a:	b003      	add	sp, #12
     78c:	f85d 8b04 	ldr.w	r8, [sp], #4
     790:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     79a:	4c14      	ldr	r4, [pc, #80]	; (7ec <ocrypto_mod_p256_sqr+0x84>)
     79c:	7a20      	ldrb	r0, [r4, #8]
     79e:	f88d 0001 	strb.w	r0, [sp, #1]
     7a2:	79e0      	ldrb	r0, [r4, #7]
     7a4:	f88d 0000 	strb.w	r0, [sp]
     7a8:	79a0      	ldrb	r0, [r4, #6]
     7aa:	f8ad 0004 	strh.w	r0, [sp, #4]
     7ae:	7960      	ldrb	r0, [r4, #5]
     7b0:	f8ad 0002 	strh.w	r0, [sp, #2]
     7b4:	4668      	mov	r0, sp
     7b6:	f006 fd91 	bl	72dc <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     7ba:	b108      	cbz	r0, 7c0 <ocrypto_mod_p256_sqr+0x58>
     7bc:	21ad      	movs	r1, #173	; 0xad
     7be:	e010      	b.n	7e2 <ocrypto_mod_p256_sqr+0x7a>
     7c0:	68e0      	ldr	r0, [r4, #12]
     7c2:	9002      	str	r0, [sp, #8]
     7c4:	a802      	add	r0, sp, #8
     7c6:	f006 fd9f 	bl	7308 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     7ca:	b108      	cbz	r0, 7d0 <ocrypto_mod_p256_sqr+0x68>
     7cc:	21b1      	movs	r1, #177	; 0xb1
     7ce:	e008      	b.n	7e2 <ocrypto_mod_p256_sqr+0x7a>
     7d0:	4807      	ldr	r0, [pc, #28]	; (7f0 <ocrypto_mod_p256_sqr+0x88>)
     7d2:	6800      	ldr	r0, [r0, #0]
     7d4:	9003      	str	r0, [sp, #12]
     7d6:	a803      	add	r0, sp, #12
     7d8:	f00f fca6 	bl	10128 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     7dc:	2800      	cmp	r0, #0
     7de:	d003      	beq.n	7e8 <ocrypto_mod_p256_sqr+0x80>
     7e0:	21b5      	movs	r1, #181	; 0xb5
     7e2:	2003      	movs	r0, #3
     7e4:	f000 f91a 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     7e8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     7ea:	0000      	.short	0x0000
     7ec:	20001118 	.word	0x20001118
     7f0:	00000b08 	.word	0x00000b08
     7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     7f8:	4f16      	ldr	r7, [pc, #88]	; (854 <__z_interrupt_stack_SIZEOF+0x14>)
     7fa:	4604      	mov	r4, r0
     7fc:	4616      	mov	r6, r2
     7fe:	78f8      	ldrb	r0, [r7, #3]
     800:	460d      	mov	r5, r1
     802:	b178      	cbz	r0, 824 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x24>
     804:	7c28      	ldrb	r0, [r5, #16]
     806:	b168      	cbz	r0, 824 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x24>
     808:	6820      	ldr	r0, [r4, #0]
     80a:	2225      	movs	r2, #37	; 0x25
     80c:	1cc0      	adds	r0, r0, #3
     80e:	f020 0003 	bic.w	r0, r0, #3
     812:	6020      	str	r0, [r4, #0]
     814:	7c29      	ldrb	r1, [r5, #16]
     816:	b106      	cbz	r6, 81a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1a>
     818:	2000      	movs	r0, #0
     81a:	f000 fd9d 	bl	1358 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
     81e:	6821      	ldr	r1, [r4, #0]
     820:	4408      	add	r0, r1
     822:	6020      	str	r0, [r4, #0]
     824:	7d28      	ldrb	r0, [r5, #20]
     826:	2800      	cmp	r0, #0
     828:	d012      	beq.n	850 <__z_interrupt_stack_SIZEOF+0x10>
     82a:	78f8      	ldrb	r0, [r7, #3]
     82c:	2800      	cmp	r0, #0
     82e:	d00f      	beq.n	850 <__z_interrupt_stack_SIZEOF+0x10>
     830:	7c28      	ldrb	r0, [r5, #16]
     832:	2800      	cmp	r0, #0
     834:	d00c      	beq.n	850 <__z_interrupt_stack_SIZEOF+0x10>
     836:	6820      	ldr	r0, [r4, #0]
     838:	1dc0      	adds	r0, r0, #7
     83a:	f020 0007 	bic.w	r0, r0, #7
     83e:	6020      	str	r0, [r4, #0]
     840:	7d29      	ldrb	r1, [r5, #20]
     842:	b106      	cbz	r6, 846 <__z_interrupt_stack_SIZEOF+0x6>
     844:	2000      	movs	r0, #0
     846:	f002 fdbb 	bl	33c0 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
     84a:	6821      	ldr	r1, [r4, #0]
     84c:	4408      	add	r0, r1
     84e:	6020      	str	r0, [r4, #0]
     850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     854:	20000040 	.word	0x20000040

00000858 <sdc_build_revision_get>:
     858:	b510      	push	{r4, lr}
     85a:	b128      	cbz	r0, 868 <sdc_build_revision_get+0x10>
     85c:	2214      	movs	r2, #20
     85e:	4904      	ldr	r1, [pc, #16]	; (870 <sdc_build_revision_get+0x18>)
     860:	f010 fbcd 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     864:	2000      	movs	r0, #0
     866:	bd10      	pop	{r4, pc}
     868:	f06f 0015 	mvn.w	r0, #21
     86c:	bd10      	pop	{r4, pc}
     86e:	0000      	.short	0x0000
     870:	00000b30 	.word	0x00000b30

00000874 <sdc_cfg_set>:
     874:	b570      	push	{r4, r5, r6, lr}
     876:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     87a:	bb88      	cbnz	r0, 8e0 <CONFIG_BT_RX_STACK_SIZE+0x48>
     87c:	4c23      	ldr	r4, [pc, #140]	; (90c <CONFIG_BT_RX_STACK_SIZE+0x74>)
     87e:	7860      	ldrb	r0, [r4, #1]
     880:	b108      	cbz	r0, 886 <sdc_cfg_set+0x12>
     882:	11a8      	asrs	r0, r5, #6
     884:	bd70      	pop	{r4, r5, r6, pc}
     886:	b1f9      	cbz	r1, 8c8 <CONFIG_BT_RX_STACK_SIZE+0x30>
     888:	f06f 0015 	mvn.w	r0, #21
     88c:	2a00      	cmp	r2, #0
     88e:	d0f9      	beq.n	884 <sdc_cfg_set+0x10>
     890:	4b1f      	ldr	r3, [pc, #124]	; (910 <CONFIG_BT_RX_STACK_SIZE+0x78>)
     892:	2909      	cmp	r1, #9
     894:	d234      	bcs.n	900 <CONFIG_BT_RX_STACK_SIZE+0x68>
     896:	e8df f001 	tbb	[pc, r1]
     89a:	0533      	.short	0x0533
     89c:	33180833 	.word	0x33180833
     8a0:	0024331b 	.word	0x0024331b
     8a4:	7810      	ldrb	r0, [r2, #0]
     8a6:	7018      	strb	r0, [r3, #0]
     8a8:	e01f      	b.n	8ea <CONFIG_BT_RX_STACK_SIZE+0x52>
     8aa:	7891      	ldrb	r1, [r2, #2]
     8ac:	2900      	cmp	r1, #0
     8ae:	d0e9      	beq.n	884 <sdc_cfg_set+0x10>
     8b0:	78d1      	ldrb	r1, [r2, #3]
     8b2:	2900      	cmp	r1, #0
     8b4:	d0e6      	beq.n	884 <sdc_cfg_set+0x10>
     8b6:	7811      	ldrb	r1, [r2, #0]
     8b8:	291b      	cmp	r1, #27
     8ba:	d3e3      	bcc.n	884 <sdc_cfg_set+0x10>
     8bc:	7851      	ldrb	r1, [r2, #1]
     8be:	291b      	cmp	r1, #27
     8c0:	d3e0      	bcc.n	884 <sdc_cfg_set+0x10>
     8c2:	6810      	ldr	r0, [r2, #0]
     8c4:	f8c3 0005 	str.w	r0, [r3, #5]
     8c8:	e00f      	b.n	8ea <CONFIG_BT_RX_STACK_SIZE+0x52>
     8ca:	6810      	ldr	r0, [r2, #0]
     8cc:	60d8      	str	r0, [r3, #12]
     8ce:	e00c      	b.n	8ea <CONFIG_BT_RX_STACK_SIZE+0x52>
     8d0:	78e1      	ldrb	r1, [r4, #3]
     8d2:	b111      	cbz	r1, 8da <CONFIG_BT_RX_STACK_SIZE+0x42>
     8d4:	7811      	ldrb	r1, [r2, #0]
     8d6:	2902      	cmp	r1, #2
     8d8:	d3d4      	bcc.n	884 <sdc_cfg_set+0x10>
     8da:	7810      	ldrb	r0, [r2, #0]
     8dc:	7418      	strb	r0, [r3, #16]
     8de:	e004      	b.n	8ea <CONFIG_BT_RX_STACK_SIZE+0x52>
     8e0:	e00e      	b.n	900 <CONFIG_BT_RX_STACK_SIZE+0x68>
     8e2:	8811      	ldrh	r1, [r2, #0]
     8e4:	29ff      	cmp	r1, #255	; 0xff
     8e6:	d8cd      	bhi.n	884 <sdc_cfg_set+0x10>
     8e8:	7519      	strb	r1, [r3, #20]
     8ea:	2201      	movs	r2, #1
     8ec:	4908      	ldr	r1, [pc, #32]	; (910 <CONFIG_BT_RX_STACK_SIZE+0x78>)
     8ee:	2000      	movs	r0, #0
     8f0:	f00c fb1c 	bl	cf2c <__udivmoddi4+0x2a0>
     8f4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     8f8:	db04      	blt.n	904 <CONFIG_BT_RX_STACK_SIZE+0x6c>
     8fa:	f06f 000b 	mvn.w	r0, #11
     8fe:	bd70      	pop	{r4, r5, r6, pc}
     900:	4628      	mov	r0, r5
     902:	bd70      	pop	{r4, r5, r6, pc}
     904:	2101      	movs	r1, #1
     906:	70a1      	strb	r1, [r4, #2]
     908:	bd70      	pop	{r4, r5, r6, pc}
     90a:	0000      	.short	0x0000
     90c:	20000040 	.word	0x20000040
     910:	20001118 	.word	0x20001118

00000914 <sdc_disable>:
     914:	b510      	push	{r4, lr}
     916:	4c07      	ldr	r4, [pc, #28]	; (934 <sdc_disable+0x20>)
     918:	7860      	ldrb	r0, [r4, #1]
     91a:	b120      	cbz	r0, 926 <sdc_disable+0x12>
     91c:	f006 ffee 	bl	78fc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     920:	7820      	ldrb	r0, [r4, #0]
     922:	f00c f8d3 	bl	cacc <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     926:	f000 fd63 	bl	13f0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     92a:	f000 fe3b 	bl	15a4 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     92e:	2000      	movs	r0, #0
     930:	7060      	strb	r0, [r4, #1]
     932:	bd10      	pop	{r4, pc}
     934:	20000040 	.word	0x20000040

00000938 <sdc_enable>:
     938:	b570      	push	{r4, r5, r6, lr}
     93a:	460c      	mov	r4, r1
     93c:	0005      	movs	r5, r0
     93e:	d002      	beq.n	946 <sdc_enable+0xe>
     940:	b10c      	cbz	r4, 946 <sdc_enable+0xe>
     942:	0760      	lsls	r0, r4, #29
     944:	d002      	beq.n	94c <sdc_enable+0x14>
     946:	f06f 0015 	mvn.w	r0, #21
     94a:	bd70      	pop	{r4, r5, r6, pc}
     94c:	f000 f916 	bl	b7c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     950:	b1a8      	cbz	r0, 97e <sdc_enable+0x46>
     952:	4628      	mov	r0, r5
     954:	f00c f880 	bl	ca58 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     958:	4d0a      	ldr	r5, [pc, #40]	; (984 <sdc_enable+0x4c>)
     95a:	2200      	movs	r2, #0
     95c:	490a      	ldr	r1, [pc, #40]	; (988 <sdc_enable+0x50>)
     95e:	7028      	strb	r0, [r5, #0]
     960:	4620      	mov	r0, r4
     962:	f00c fae3 	bl	cf2c <__udivmoddi4+0x2a0>
     966:	f00f ffc6 	bl	108f6 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     96a:	2100      	movs	r1, #0
     96c:	7828      	ldrb	r0, [r5, #0]
     96e:	f006 ffad 	bl	78cc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     972:	f7ff ff11 	bl	798 <ocrypto_mod_p256_sqr+0x30>
     976:	2001      	movs	r0, #1
     978:	7068      	strb	r0, [r5, #1]
     97a:	2000      	movs	r0, #0
     97c:	bd70      	pop	{r4, r5, r6, pc}
     97e:	f04f 30ff 	mov.w	r0, #4294967295
     982:	bd70      	pop	{r4, r5, r6, pc}
     984:	20000040 	.word	0x20000040
     988:	20001118 	.word	0x20001118

0000098c <sdc_init>:
     98c:	b530      	push	{r4, r5, lr}
     98e:	b089      	sub	sp, #36	; 0x24
     990:	0005      	movs	r5, r0
     992:	d00c      	beq.n	9ae <sdc_init+0x22>
     994:	f00c f808 	bl	c9a8 <mpsl_is_initialized>
     998:	f04f 34ff 	mov.w	r4, #4294967295
     99c:	b120      	cbz	r0, 9a8 <sdc_init+0x1c>
     99e:	f00b feb9 	bl	c714 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     9a2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     9a6:	d905      	bls.n	9b4 <sdc_init+0x28>
     9a8:	4620      	mov	r0, r4
     9aa:	b009      	add	sp, #36	; 0x24
     9ac:	bd30      	pop	{r4, r5, pc}
     9ae:	f06f 0015 	mvn.w	r0, #21
     9b2:	e7fa      	b.n	9aa <sdc_init+0x1e>
     9b4:	4c14      	ldr	r4, [pc, #80]	; (a08 <sdc_init+0x7c>)
     9b6:	4815      	ldr	r0, [pc, #84]	; (a0c <sdc_init+0x80>)
     9b8:	6065      	str	r5, [r4, #4]
     9ba:	f000 f9f5 	bl	da8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     9be:	2000      	movs	r0, #0
     9c0:	7060      	strb	r0, [r4, #1]
     9c2:	70a0      	strb	r0, [r4, #2]
     9c4:	70e0      	strb	r0, [r4, #3]
     9c6:	4601      	mov	r1, r0
     9c8:	2224      	movs	r2, #36	; 0x24
     9ca:	4668      	mov	r0, sp
     9cc:	f010 fb91 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     9d0:	2224      	movs	r2, #36	; 0x24
     9d2:	490f      	ldr	r1, [pc, #60]	; (a10 <sdc_init+0x84>)
     9d4:	4668      	mov	r0, sp
     9d6:	f010 fb12 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     9da:	2224      	movs	r2, #36	; 0x24
     9dc:	4669      	mov	r1, sp
     9de:	480d      	ldr	r0, [pc, #52]	; (a14 <sdc_init+0x88>)
     9e0:	f010 fb0d 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     9e4:	f3ef 8410 	mrs	r4, PRIMASK
     9e8:	b672      	cpsid	i
     9ea:	f000 fd0f 	bl	140c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     9ee:	480a      	ldr	r0, [pc, #40]	; (a18 <sdc_init+0x8c>)
     9f0:	f000 fde4 	bl	15bc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     9f4:	b118      	cbz	r0, 9fe <sdc_init+0x72>
     9f6:	21cb      	movs	r1, #203	; 0xcb
     9f8:	2003      	movs	r0, #3
     9fa:	f000 f80f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     9fe:	b904      	cbnz	r4, a02 <sdc_init+0x76>
     a00:	b662      	cpsie	i
     a02:	2000      	movs	r0, #0
     a04:	e7d1      	b.n	9aa <sdc_init+0x1e>
     a06:	0000      	.short	0x0000
     a08:	20000040 	.word	0x20000040
     a0c:	00000799 	.word	0x00000799
     a10:	00000b0c 	.word	0x00000b0c
     a14:	20001118 	.word	0x20001118
     a18:	00000ba9 	.word	0x00000ba9

00000a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     a1c:	b50e      	push	{r1, r2, r3, lr}
     a1e:	b672      	cpsid	i
     a20:	4a15      	ldr	r2, [pc, #84]	; (a78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     a22:	6855      	ldr	r5, [r2, #4]
     a24:	b1dd      	cbz	r5, a5e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     a26:	2200      	movs	r2, #0
     a28:	4603      	mov	r3, r0
     a2a:	466e      	mov	r6, sp
     a2c:	240a      	movs	r4, #10
     a2e:	e003      	b.n	a38 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     a30:	fbb0 f0f4 	udiv	r0, r0, r4
     a34:	1c52      	adds	r2, r2, #1
     a36:	b2d2      	uxtb	r2, r2
     a38:	2800      	cmp	r0, #0
     a3a:	d1f9      	bne.n	a30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     a3c:	54b0      	strb	r0, [r6, r2]
     a3e:	e00a      	b.n	a56 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     a40:	b2d8      	uxtb	r0, r3
     a42:	fbb0 f7f4 	udiv	r7, r0, r4
     a46:	fbb3 f3f4 	udiv	r3, r3, r4
     a4a:	fb04 0017 	mls	r0, r4, r7, r0
     a4e:	1e52      	subs	r2, r2, #1
     a50:	b2d2      	uxtb	r2, r2
     a52:	3030      	adds	r0, #48	; 0x30
     a54:	54b0      	strb	r0, [r6, r2]
     a56:	2a00      	cmp	r2, #0
     a58:	d1f2      	bne.n	a40 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     a5a:	4630      	mov	r0, r6
     a5c:	47a8      	blx	r5
     a5e:	f3bf 8f4f 	dsb	sy
     a62:	4806      	ldr	r0, [pc, #24]	; (a7c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     a64:	6801      	ldr	r1, [r0, #0]
     a66:	4a06      	ldr	r2, [pc, #24]	; (a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     a68:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     a6c:	4311      	orrs	r1, r2
     a6e:	6001      	str	r1, [r0, #0]
     a70:	f3bf 8f4f 	dsb	sy
     a74:	bf00      	nop
     a76:	e7fd      	b.n	a74 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     a78:	20000040 	.word	0x20000040
     a7c:	e000ed0c 	.word	0xe000ed0c
     a80:	05fa0004 	.word	0x05fa0004

00000a84 <sdc_support_central>:
     a84:	b510      	push	{r4, lr}
     a86:	4c07      	ldr	r4, [pc, #28]	; (aa4 <sdc_support_central+0x20>)
     a88:	78a0      	ldrb	r0, [r4, #2]
     a8a:	7861      	ldrb	r1, [r4, #1]
     a8c:	4308      	orrs	r0, r1
     a8e:	d002      	beq.n	a96 <sdc_support_central+0x12>
     a90:	f04f 30ff 	mov.w	r0, #4294967295
     a94:	bd10      	pop	{r4, pc}
     a96:	f006 ff41 	bl	791c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
     a9a:	2001      	movs	r0, #1
     a9c:	70e0      	strb	r0, [r4, #3]
     a9e:	2000      	movs	r0, #0
     aa0:	bd10      	pop	{r4, pc}
     aa2:	0000      	.short	0x0000
     aa4:	20000040 	.word	0x20000040

00000aa8 <sdc_support_dle_central>:
     aa8:	4806      	ldr	r0, [pc, #24]	; (ac4 <sdc_support_dle_central+0x1c>)
     aaa:	b510      	push	{r4, lr}
     aac:	7881      	ldrb	r1, [r0, #2]
     aae:	7840      	ldrb	r0, [r0, #1]
     ab0:	4301      	orrs	r1, r0
     ab2:	d002      	beq.n	aba <sdc_support_dle_central+0x12>
     ab4:	f04f 30ff 	mov.w	r0, #4294967295
     ab8:	bd10      	pop	{r4, pc}
     aba:	f006 fd1d 	bl	74f8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>
     abe:	2000      	movs	r0, #0
     ac0:	bd10      	pop	{r4, pc}
     ac2:	0000      	.short	0x0000
     ac4:	20000040 	.word	0x20000040

00000ac8 <sdc_support_le_2m_phy>:
     ac8:	4806      	ldr	r0, [pc, #24]	; (ae4 <sdc_support_le_2m_phy+0x1c>)
     aca:	b510      	push	{r4, lr}
     acc:	7881      	ldrb	r1, [r0, #2]
     ace:	7840      	ldrb	r0, [r0, #1]
     ad0:	4301      	orrs	r1, r0
     ad2:	d002      	beq.n	ada <sdc_support_le_2m_phy+0x12>
     ad4:	f04f 30ff 	mov.w	r0, #4294967295
     ad8:	bd10      	pop	{r4, pc}
     ada:	f00f fc0e 	bl	102fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
     ade:	2000      	movs	r0, #0
     ae0:	bd10      	pop	{r4, pc}
     ae2:	0000      	.short	0x0000
     ae4:	20000040 	.word	0x20000040

00000ae8 <sdc_support_phy_update_central>:
     ae8:	4806      	ldr	r0, [pc, #24]	; (b04 <sdc_support_phy_update_central+0x1c>)
     aea:	b510      	push	{r4, lr}
     aec:	7881      	ldrb	r1, [r0, #2]
     aee:	7840      	ldrb	r0, [r0, #1]
     af0:	4301      	orrs	r1, r0
     af2:	d002      	beq.n	afa <sdc_support_phy_update_central+0x12>
     af4:	f04f 30ff 	mov.w	r0, #4294967295
     af8:	bd10      	pop	{r4, pc}
     afa:	f00f fc22 	bl	10342 <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>
     afe:	2000      	movs	r0, #0
     b00:	bd10      	pop	{r4, pc}
     b02:	0000      	.short	0x0000
     b04:	20000040 	.word	0x20000040
     b08:	00000001 	.word	0x00000001
     b0c:	00000001 	.word	0x00000001
     b10:	031b1b00 	.word	0x031b1b00
     b14:	00000002 	.word	0x00000002
     b18:	00001d4c 	.word	0x00001d4c
     b1c:	00000003 	.word	0x00000003
     b20:	00000008 	.word	0x00000008
	...
     b30:	2f771a98 	.word	0x2f771a98
     b34:	32fb041b 	.word	0x32fb041b
     b38:	d5437f56 	.word	0xd5437f56
     b3c:	c651ac07 	.word	0xc651ac07
     b40:	af2f22fa 	.word	0xaf2f22fa

00000b44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     b44:	4a05      	ldr	r2, [pc, #20]	; (b5c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     b46:	b510      	push	{r4, lr}
     b48:	6852      	ldr	r2, [r2, #4]
     b4a:	b112      	cbz	r2, b52 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b50:	4710      	bx	r2
     b52:	2192      	movs	r1, #146	; 0x92
     b54:	2004      	movs	r0, #4
     b56:	f7ff ff61 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b5a:	0000      	.short	0x0000
     b5c:	2000113c 	.word	0x2000113c

00000b60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     b60:	4a05      	ldr	r2, [pc, #20]	; (b78 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     b62:	b510      	push	{r4, lr}
     b64:	6892      	ldr	r2, [r2, #8]
     b66:	b112      	cbz	r2, b6e <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b6c:	4710      	bx	r2
     b6e:	2198      	movs	r1, #152	; 0x98
     b70:	2004      	movs	r0, #4
     b72:	f7ff ff53 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b76:	0000      	.short	0x0000
     b78:	2000113c 	.word	0x2000113c

00000b7c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     b7c:	4805      	ldr	r0, [pc, #20]	; (b94 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     b7e:	6801      	ldr	r1, [r0, #0]
     b80:	b129      	cbz	r1, b8e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b82:	6841      	ldr	r1, [r0, #4]
     b84:	b119      	cbz	r1, b8e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b86:	6880      	ldr	r0, [r0, #8]
     b88:	b108      	cbz	r0, b8e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b8a:	2001      	movs	r0, #1
     b8c:	4770      	bx	lr
     b8e:	2000      	movs	r0, #0
     b90:	4770      	bx	lr
     b92:	0000      	.short	0x0000
     b94:	2000113c 	.word	0x2000113c

00000b98 <sdc_rand_source_register>:
     b98:	4902      	ldr	r1, [pc, #8]	; (ba4 <sdc_rand_source_register+0xc>)
     b9a:	c80d      	ldmia	r0, {r0, r2, r3}
     b9c:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     ba0:	2000      	movs	r0, #0
     ba2:	4770      	bx	lr
     ba4:	2000113c 	.word	0x2000113c

00000ba8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     baa:	4c12      	ldr	r4, [pc, #72]	; (bf4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     bac:	2600      	movs	r6, #0
     bae:	6825      	ldr	r5, [r4, #0]
     bb0:	e011      	b.n	bd6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     bb2:	9800      	ldr	r0, [sp, #0]
     bb4:	2802      	cmp	r0, #2
     bb6:	d002      	beq.n	bbe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     bb8:	2803      	cmp	r0, #3
     bba:	d10c      	bne.n	bd6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     bbc:	e006      	b.n	bcc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     bbe:	6820      	ldr	r0, [r4, #0]
     bc0:	b110      	cbz	r0, bc8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     bc2:	2000      	movs	r0, #0
     bc4:	6026      	str	r6, [r4, #0]
     bc6:	e005      	b.n	bd4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     bc8:	2128      	movs	r1, #40	; 0x28
     bca:	e00c      	b.n	be6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     bcc:	6820      	ldr	r0, [r4, #0]
     bce:	b168      	cbz	r0, bec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     bd0:	2001      	movs	r0, #1
     bd2:	6026      	str	r6, [r4, #0]
     bd4:	47a8      	blx	r5
     bd6:	4668      	mov	r0, sp
     bd8:	f000 fcb6 	bl	1548 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     bdc:	2800      	cmp	r0, #0
     bde:	d0e8      	beq.n	bb2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     be0:	2805      	cmp	r0, #5
     be2:	d005      	beq.n	bf0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     be4:	2135      	movs	r1, #53	; 0x35
     be6:	2004      	movs	r0, #4
     be8:	f7ff ff18 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     bec:	212d      	movs	r1, #45	; 0x2d
     bee:	e7fa      	b.n	be6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bf2:	0000      	.short	0x0000
     bf4:	20000048 	.word	0x20000048

00000bf8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     bfc:	4605      	mov	r5, r0
     bfe:	4925      	ldr	r1, [pc, #148]	; (c94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     c00:	1d00      	adds	r0, r0, #4
     c02:	f501 7784 	add.w	r7, r1, #264	; 0x108
     c06:	2600      	movs	r6, #0
     c08:	6008      	str	r0, [r1, #0]
     c0a:	7838      	ldrb	r0, [r7, #0]
     c0c:	b150      	cbz	r0, c24 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     c0e:	78ba      	ldrb	r2, [r7, #2]
     c10:	463c      	mov	r4, r7
     c12:	1c79      	adds	r1, r7, #1
     c14:	4628      	mov	r0, r5
     c16:	1c92      	adds	r2, r2, #2
     c18:	f010 f9f1 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     c1c:	7026      	strb	r6, [r4, #0]
     c1e:	2004      	movs	r0, #4
     c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c24:	481b      	ldr	r0, [pc, #108]	; (c94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     c26:	f001 fed9 	bl	29dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     c2a:	4604      	mov	r4, r0
     c2c:	2802      	cmp	r0, #2
     c2e:	d004      	beq.n	c3a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     c30:	2c04      	cmp	r4, #4
     c32:	d007      	beq.n	c44 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     c34:	2c08      	cmp	r4, #8
     c36:	d027      	beq.n	c88 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
     c38:	e02a      	b.n	c90 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     c3a:	4916      	ldr	r1, [pc, #88]	; (c94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     c3c:	4628      	mov	r0, r5
     c3e:	f00c f9fa 	bl	d036 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     c42:	e025      	b.n	c90 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     c44:	4913      	ldr	r1, [pc, #76]	; (c94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     c46:	4628      	mov	r0, r5
     c48:	f00c fa5a 	bl	d100 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     c4c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
     c50:	d303      	bcc.n	c5a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x62>
     c52:	21c8      	movs	r1, #200	; 0xc8
     c54:	2008      	movs	r0, #8
     c56:	f7ff fee1 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c5a:	2800      	cmp	r0, #0
     c5c:	d0d5      	beq.n	c0a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     c5e:	f895 9000 	ldrb.w	r9, [r5]
     c62:	f895 8002 	ldrb.w	r8, [r5, #2]
     c66:	4648      	mov	r0, r9
     c68:	f000 f844 	bl	cf4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
     c6c:	2800      	cmp	r0, #0
     c6e:	d0cc      	beq.n	c0a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     c70:	f1b9 0f3e 	cmp.w	r9, #62	; 0x3e
     c74:	d10c      	bne.n	c90 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     c76:	4640      	mov	r0, r8
     c78:	f1b8 0f12 	cmp.w	r8, #18
     c7c:	d0c5      	beq.n	c0a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     c7e:	f000 f84b 	bl	d18 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
     c82:	2800      	cmp	r0, #0
     c84:	d0c1      	beq.n	c0a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     c86:	e003      	b.n	c90 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     c88:	4902      	ldr	r1, [pc, #8]	; (c94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     c8a:	4628      	mov	r0, r5
     c8c:	f00c fa01 	bl	d092 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     c90:	4620      	mov	r0, r4
     c92:	e7c5      	b.n	c20 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     c94:	20001148 	.word	0x20001148
     c98:	b570      	push	{r4, r5, r6, lr}
     c9a:	780a      	ldrb	r2, [r1, #0]
     c9c:	7082      	strb	r2, [r0, #2]
     c9e:	b33a      	cbz	r2, cf0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf8>
     ca0:	2a01      	cmp	r2, #1
     ca2:	d825      	bhi.n	cf0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf8>
     ca4:	2313      	movs	r3, #19
     ca6:	7003      	strb	r3, [r0, #0]
     ca8:	2300      	movs	r3, #0
     caa:	e00a      	b.n	cc2 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xca>
     cac:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     cb0:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     cb4:	78a6      	ldrb	r6, [r4, #2]
     cb6:	70ee      	strb	r6, [r5, #3]
     cb8:	8864      	ldrh	r4, [r4, #2]
     cba:	0a24      	lsrs	r4, r4, #8
     cbc:	1c5b      	adds	r3, r3, #1
     cbe:	712c      	strb	r4, [r5, #4]
     cc0:	b2db      	uxtb	r3, r3
     cc2:	4293      	cmp	r3, r2
     cc4:	d3f2      	bcc.n	cac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb4>
     cc6:	2300      	movs	r3, #0
     cc8:	e00b      	b.n	ce2 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xea>
     cca:	bf00      	nop
     ccc:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     cd0:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     cd4:	792e      	ldrb	r6, [r5, #4]
     cd6:	7166      	strb	r6, [r4, #5]
     cd8:	88ad      	ldrh	r5, [r5, #4]
     cda:	0a2d      	lsrs	r5, r5, #8
     cdc:	1c5b      	adds	r3, r3, #1
     cde:	71a5      	strb	r5, [r4, #6]
     ce0:	b2db      	uxtb	r3, r3
     ce2:	4293      	cmp	r3, r2
     ce4:	d3f2      	bcc.n	ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd4>
     ce6:	2101      	movs	r1, #1
     ce8:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     cec:	b2c0      	uxtb	r0, r0
     cee:	bd70      	pop	{r4, r5, r6, pc}
     cf0:	2000      	movs	r0, #0
     cf2:	bd70      	pop	{r4, r5, r6, pc}

00000cf4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     cf4:	2840      	cmp	r0, #64	; 0x40
     cf6:	d203      	bcs.n	d00 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     cf8:	1e40      	subs	r0, r0, #1
     cfa:	b2c1      	uxtb	r1, r0
     cfc:	4805      	ldr	r0, [pc, #20]	; (d14 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     cfe:	e005      	b.n	d0c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     d00:	28ff      	cmp	r0, #255	; 0xff
     d02:	d005      	beq.n	d10 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     d04:	3840      	subs	r0, #64	; 0x40
     d06:	b2c1      	uxtb	r1, r0
     d08:	4802      	ldr	r0, [pc, #8]	; (d14 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d0a:	3008      	adds	r0, #8
     d0c:	f00c bc8a 	b.w	d624 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d10:	2001      	movs	r0, #1
     d12:	4770      	bx	lr
     d14:	2000004c 	.word	0x2000004c

00000d18 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     d18:	1e40      	subs	r0, r0, #1
     d1a:	b2c1      	uxtb	r1, r0
     d1c:	4801      	ldr	r0, [pc, #4]	; (d24 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     d1e:	f00c bc81 	b.w	d624 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d22:	0000      	.short	0x0000
     d24:	2000005c 	.word	0x2000005c

00000d28 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     d28:	4902      	ldr	r1, [pc, #8]	; (d34 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
     d2a:	6802      	ldr	r2, [r0, #0]
     d2c:	610a      	str	r2, [r1, #16]
     d2e:	6840      	ldr	r0, [r0, #4]
     d30:	6148      	str	r0, [r1, #20]
     d32:	4770      	bx	lr
     d34:	2000004c 	.word	0x2000004c

00000d38 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     d38:	4905      	ldr	r1, [pc, #20]	; (d50 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
     d3a:	6802      	ldr	r2, [r0, #0]
     d3c:	600a      	str	r2, [r1, #0]
     d3e:	6840      	ldr	r0, [r0, #4]
     d40:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
     d44:	600a      	str	r2, [r1, #0]
     d46:	4a03      	ldr	r2, [pc, #12]	; (d54 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     d48:	4310      	orrs	r0, r2
     d4a:	6048      	str	r0, [r1, #4]
     d4c:	4770      	bx	lr
     d4e:	0000      	.short	0x0000
     d50:	2000004c 	.word	0x2000004c
     d54:	024007f8 	.word	0x024007f8

00000d58 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
     d58:	4902      	ldr	r1, [pc, #8]	; (d64 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
     d5a:	6802      	ldr	r2, [r0, #0]
     d5c:	608a      	str	r2, [r1, #8]
     d5e:	6840      	ldr	r0, [r0, #4]
     d60:	60c8      	str	r0, [r1, #12]
     d62:	4770      	bx	lr
     d64:	2000004c 	.word	0x2000004c

00000d68 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     d68:	4807      	ldr	r0, [pc, #28]	; (d88 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     d6a:	f04f 31ff 	mov.w	r1, #4294967295
     d6e:	2200      	movs	r2, #0
     d70:	6001      	str	r1, [r0, #0]
     d72:	0cc9      	lsrs	r1, r1, #19
     d74:	6041      	str	r1, [r0, #4]
     d76:	f100 0108 	add.w	r1, r0, #8
     d7a:	201f      	movs	r0, #31
     d7c:	600a      	str	r2, [r1, #0]
     d7e:	604a      	str	r2, [r1, #4]
     d80:	3108      	adds	r1, #8
     d82:	e9c1 0200 	strd	r0, r2, [r1]
     d86:	4770      	bx	lr
     d88:	2000004c 	.word	0x2000004c

00000d8c <sdc_hci_cmd_cb_reset>:
     d8c:	b510      	push	{r4, lr}
     d8e:	f7ff ffeb 	bl	d68 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     d92:	f00f fa26 	bl	101e2 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     d96:	4604      	mov	r4, r0
     d98:	4802      	ldr	r0, [pc, #8]	; (da4 <sdc_hci_cmd_cb_reset+0x18>)
     d9a:	6800      	ldr	r0, [r0, #0]
     d9c:	b100      	cbz	r0, da0 <sdc_hci_cmd_cb_reset+0x14>
     d9e:	4780      	blx	r0
     da0:	4620      	mov	r0, r4
     da2:	bd10      	pop	{r4, pc}
     da4:	20000064 	.word	0x20000064

00000da8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     da8:	4901      	ldr	r1, [pc, #4]	; (db0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     daa:	6008      	str	r0, [r1, #0]
     dac:	4770      	bx	lr
     dae:	0000      	.short	0x0000
     db0:	20000064 	.word	0x20000064

00000db4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
     db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     db8:	4604      	mov	r4, r0
     dba:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     dbe:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
     dc2:	4d1f      	ldr	r5, [pc, #124]	; (e40 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     dc4:	4e1e      	ldr	r6, [pc, #120]	; (e40 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     dc6:	3d10      	subs	r5, #16
     dc8:	2210      	movs	r2, #16
     dca:	2100      	movs	r1, #0
     dcc:	4620      	mov	r0, r4
     dce:	f010 f990 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     dd2:	2210      	movs	r2, #16
     dd4:	2100      	movs	r1, #0
     dd6:	f104 0010 	add.w	r0, r4, #16
     dda:	f010 f98a 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     dde:	6828      	ldr	r0, [r5, #0]
     de0:	1c40      	adds	r0, r0, #1
     de2:	d108      	bne.n	df6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     de4:	6868      	ldr	r0, [r5, #4]
     de6:	1c40      	adds	r0, r0, #1
     de8:	d105      	bne.n	df6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     dea:	68a8      	ldr	r0, [r5, #8]
     dec:	1c40      	adds	r0, r0, #1
     dee:	d102      	bne.n	df6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     df0:	68e8      	ldr	r0, [r5, #12]
     df2:	1c40      	adds	r0, r0, #1
     df4:	d007      	beq.n	e06 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
     df6:	6828      	ldr	r0, [r5, #0]
     df8:	686a      	ldr	r2, [r5, #4]
     dfa:	68a9      	ldr	r1, [r5, #8]
     dfc:	68eb      	ldr	r3, [r5, #12]
     dfe:	6120      	str	r0, [r4, #16]
     e00:	6162      	str	r2, [r4, #20]
     e02:	61a1      	str	r1, [r4, #24]
     e04:	61e3      	str	r3, [r4, #28]
     e06:	2000      	movs	r0, #0
     e08:	f000 fcac 	bl	1764 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     e0c:	4387      	bics	r7, r0
     e0e:	07f8      	lsls	r0, r7, #31
     e10:	d113      	bne.n	e3a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     e12:	6830      	ldr	r0, [r6, #0]
     e14:	1c40      	adds	r0, r0, #1
     e16:	d108      	bne.n	e2a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     e18:	6870      	ldr	r0, [r6, #4]
     e1a:	1c40      	adds	r0, r0, #1
     e1c:	d105      	bne.n	e2a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     e1e:	68b0      	ldr	r0, [r6, #8]
     e20:	1c40      	adds	r0, r0, #1
     e22:	d102      	bne.n	e2a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     e24:	68f0      	ldr	r0, [r6, #12]
     e26:	1c40      	adds	r0, r0, #1
     e28:	d007      	beq.n	e3a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     e2a:	6832      	ldr	r2, [r6, #0]
     e2c:	6870      	ldr	r0, [r6, #4]
     e2e:	68b1      	ldr	r1, [r6, #8]
     e30:	68f3      	ldr	r3, [r6, #12]
     e32:	6022      	str	r2, [r4, #0]
     e34:	6060      	str	r0, [r4, #4]
     e36:	60a1      	str	r1, [r4, #8]
     e38:	60e3      	str	r3, [r4, #12]
     e3a:	2000      	movs	r0, #0
     e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e40:	10000090 	.word	0x10000090

00000e44 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
     e44:	b538      	push	{r3, r4, r5, lr}
     e46:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     e4a:	4604      	mov	r4, r0
     e4c:	4822      	ldr	r0, [pc, #136]	; (ed8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     e4e:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
     e52:	4d21      	ldr	r5, [pc, #132]	; (ed8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     e54:	6802      	ldr	r2, [r0, #0]
     e56:	3d14      	subs	r5, #20
     e58:	1c52      	adds	r2, r2, #1
     e5a:	d104      	bne.n	e66 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
     e5c:	6842      	ldr	r2, [r0, #4]
     e5e:	43d2      	mvns	r2, r2
     e60:	0412      	lsls	r2, r2, #16
     e62:	0c12      	lsrs	r2, r2, #16
     e64:	d035      	beq.n	ed2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     e66:	07c9      	lsls	r1, r1, #31
     e68:	d033      	beq.n	ed2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     e6a:	6801      	ldr	r1, [r0, #0]
     e6c:	6840      	ldr	r0, [r0, #4]
     e6e:	f8ad 0000 	strh.w	r0, [sp]
     e72:	f8c4 1001 	str.w	r1, [r4, #1]
     e76:	f8bd 0000 	ldrh.w	r0, [sp]
     e7a:	f8a4 0005 	strh.w	r0, [r4, #5]
     e7e:	79a0      	ldrb	r0, [r4, #6]
     e80:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
     e84:	71a0      	strb	r0, [r4, #6]
     e86:	6828      	ldr	r0, [r5, #0]
     e88:	1c40      	adds	r0, r0, #1
     e8a:	d00c      	beq.n	ea6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e8c:	6868      	ldr	r0, [r5, #4]
     e8e:	1c40      	adds	r0, r0, #1
     e90:	d009      	beq.n	ea6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e92:	68a8      	ldr	r0, [r5, #8]
     e94:	1c40      	adds	r0, r0, #1
     e96:	d006      	beq.n	ea6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e98:	68e8      	ldr	r0, [r5, #12]
     e9a:	1c40      	adds	r0, r0, #1
     e9c:	d003      	beq.n	ea6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e9e:	2000      	movs	r0, #0
     ea0:	f000 fc60 	bl	1764 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     ea4:	b140      	cbz	r0, eb8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
     ea6:	2210      	movs	r2, #16
     ea8:	2100      	movs	r1, #0
     eaa:	1de0      	adds	r0, r4, #7
     eac:	f010 f921 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     eb0:	2001      	movs	r0, #1
     eb2:	7020      	strb	r0, [r4, #0]
     eb4:	2000      	movs	r0, #0
     eb6:	bd38      	pop	{r3, r4, r5, pc}
     eb8:	682a      	ldr	r2, [r5, #0]
     eba:	6869      	ldr	r1, [r5, #4]
     ebc:	68a8      	ldr	r0, [r5, #8]
     ebe:	68eb      	ldr	r3, [r5, #12]
     ec0:	f8c4 2007 	str.w	r2, [r4, #7]
     ec4:	f8c4 100b 	str.w	r1, [r4, #11]
     ec8:	f8c4 000f 	str.w	r0, [r4, #15]
     ecc:	f8c4 3013 	str.w	r3, [r4, #19]
     ed0:	e7ee      	b.n	eb0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
     ed2:	2000      	movs	r0, #0
     ed4:	e7ed      	b.n	eb2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
     ed6:	0000      	.short	0x0000
     ed8:	100000a4 	.word	0x100000a4

00000edc <sdc_hci_cmd_vs_zephyr_read_version_info>:
     edc:	2102      	movs	r1, #2
     ede:	8001      	strh	r1, [r0, #0]
     ee0:	8041      	strh	r1, [r0, #2]
     ee2:	2100      	movs	r1, #0
     ee4:	7101      	strb	r1, [r0, #4]
     ee6:	2198      	movs	r1, #152	; 0x98
     ee8:	7141      	strb	r1, [r0, #5]
     eea:	f247 711a 	movw	r1, #30490	; 0x771a
     eee:	80c1      	strh	r1, [r0, #6]
     ef0:	4901      	ldr	r1, [pc, #4]	; (ef8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     ef2:	6081      	str	r1, [r0, #8]
     ef4:	2000      	movs	r0, #0
     ef6:	4770      	bx	lr
     ef8:	fb041b2f 	.word	0xfb041b2f
     efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f00:	798c      	ldrb	r4, [r1, #6]
     f02:	f8dd e018 	ldr.w	lr, [sp, #24]
     f06:	2c08      	cmp	r4, #8
     f08:	d901      	bls.n	f0e <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
     f0a:	21db      	movs	r1, #219	; 0xdb
     f0c:	e02c      	b.n	f68 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
     f0e:	f8df c0a4 	ldr.w	ip, [pc, #164]	; fb4 <sdc_hci_cmd_vs_zephyr_read_version_info+0xd8>
     f12:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
     f16:	b10d      	cbz	r5, f1c <sdc_hci_cmd_vs_zephyr_read_version_info+0x40>
     f18:	21dc      	movs	r1, #220	; 0xdc
     f1a:	e025      	b.n	f68 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
     f1c:	79cd      	ldrb	r5, [r1, #7]
     f1e:	2d00      	cmp	r5, #0
     f20:	d045      	beq.n	fae <sdc_hci_cmd_vs_zephyr_read_version_info+0xd2>
     f22:	006f      	lsls	r7, r5, #1
     f24:	370a      	adds	r7, #10
     f26:	681d      	ldr	r5, [r3, #0]
     f28:	2c02      	cmp	r4, #2
     f2a:	443d      	add	r5, r7
     f2c:	d901      	bls.n	f32 <sdc_hci_cmd_vs_zephyr_read_version_info+0x56>
     f2e:	4626      	mov	r6, r4
     f30:	e001      	b.n	f36 <sdc_hci_cmd_vs_zephyr_read_version_info+0x5a>
     f32:	f04f 0602 	mov.w	r6, #2
     f36:	442e      	add	r6, r5
     f38:	f1a6 0601 	sub.w	r6, r6, #1
     f3c:	d901      	bls.n	f42 <sdc_hci_cmd_vs_zephyr_read_version_info+0x66>
     f3e:	4625      	mov	r5, r4
     f40:	e001      	b.n	f46 <sdc_hci_cmd_vs_zephyr_read_version_info+0x6a>
     f42:	f04f 0502 	mov.w	r5, #2
     f46:	f1a5 0501 	sub.w	r5, r5, #1
     f4a:	ea26 0605 	bic.w	r6, r6, r5
     f4e:	888d      	ldrh	r5, [r1, #4]
     f50:	4425      	add	r5, r4
     f52:	f1a4 0401 	sub.w	r4, r4, #1
     f56:	f1a5 0501 	sub.w	r5, r5, #1
     f5a:	ea25 0504 	bic.w	r5, r5, r4
     f5e:	f64f 74ff 	movw	r4, #65535	; 0xffff
     f62:	42a5      	cmp	r5, r4
     f64:	d303      	bcc.n	f6e <sdc_hci_cmd_vs_zephyr_read_version_info+0x92>
     f66:	21e7      	movs	r1, #231	; 0xe7
     f68:	2017      	movs	r0, #23
     f6a:	f7ff fd57 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     f6e:	f1be 0f00 	cmp.w	lr, #0
     f72:	d118      	bne.n	fa6 <sdc_hci_cmd_vs_zephyr_read_version_info+0xca>
     f74:	1bf4      	subs	r4, r6, r7
     f76:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
     f7a:	8025      	strh	r5, [r4, #0]
     f7c:	79c8      	ldrb	r0, [r1, #7]
     f7e:	70a0      	strb	r0, [r4, #2]
     f80:	2001      	movs	r0, #1
     f82:	70e0      	strb	r0, [r4, #3]
     f84:	7122      	strb	r2, [r4, #4]
     f86:	6808      	ldr	r0, [r1, #0]
     f88:	f64f 72f0 	movw	r2, #65520	; 0xfff0
     f8c:	0c00      	lsrs	r0, r0, #16
     f8e:	80e0      	strh	r0, [r4, #6]
     f90:	8808      	ldrh	r0, [r1, #0]
     f92:	8120      	strh	r0, [r4, #8]
     f94:	2000      	movs	r0, #0
     f96:	e003      	b.n	fa0 <sdc_hci_cmd_vs_zephyr_read_version_info+0xc4>
     f98:	eb04 0740 	add.w	r7, r4, r0, lsl #1
     f9c:	1c40      	adds	r0, r0, #1
     f9e:	817a      	strh	r2, [r7, #10]
     fa0:	79cf      	ldrb	r7, [r1, #7]
     fa2:	4287      	cmp	r7, r0
     fa4:	d8f8      	bhi.n	f98 <sdc_hci_cmd_vs_zephyr_read_version_info+0xbc>
     fa6:	79c8      	ldrb	r0, [r1, #7]
     fa8:	fb00 6005 	mla	r0, r0, r5, r6
     fac:	6018      	str	r0, [r3, #0]
     fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fb2:	0000      	.short	0x0000
     fb4:	20000068 	.word	0x20000068
     fb8:	b530      	push	{r4, r5, lr}
     fba:	4603      	mov	r3, r0
     fbc:	ea4f 0002 	mov.w	r0, r2
     fc0:	eb03 0440 	add.w	r4, r3, r0, lsl #1
     fc4:	8964      	ldrh	r4, [r4, #10]
     fc6:	428c      	cmp	r4, r1
     fc8:	d009      	beq.n	fde <sdc_hci_cmd_vs_zephyr_read_version_info+0x102>
     fca:	789c      	ldrb	r4, [r3, #2]
     fcc:	1c40      	adds	r0, r0, #1
     fce:	fbb0 f5f4 	udiv	r5, r0, r4
     fd2:	fb04 0015 	mls	r0, r4, r5, r0
     fd6:	b2c0      	uxtb	r0, r0
     fd8:	4290      	cmp	r0, r2
     fda:	d1f1      	bne.n	fc0 <sdc_hci_cmd_vs_zephyr_read_version_info+0xe4>
     fdc:	20ff      	movs	r0, #255	; 0xff
     fde:	bd30      	pop	{r4, r5, pc}

00000fe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
     fe0:	4a08      	ldr	r2, [pc, #32]	; (1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
     fe2:	b510      	push	{r4, lr}
     fe4:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
     fe8:	4601      	mov	r1, r0
     fea:	4620      	mov	r0, r4
     fec:	f00c fe6b 	bl	dcc6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
     ff0:	4601      	mov	r1, r0
     ff2:	28ff      	cmp	r0, #255	; 0xff
     ff4:	d004      	beq.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
     ff6:	4620      	mov	r0, r4
     ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     ffc:	f00c be77 	b.w	dcee <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    1000:	2000      	movs	r0, #0
    1002:	bd10      	pop	{r4, pc}
    1004:	20000068 	.word	0x20000068

00001008 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    1008:	b570      	push	{r4, r5, r6, lr}
    100a:	4604      	mov	r4, r0
    100c:	7808      	ldrb	r0, [r1, #0]
    100e:	784a      	ldrb	r2, [r1, #1]
    1010:	b086      	sub	sp, #24
    1012:	4290      	cmp	r0, r2
    1014:	d902      	bls.n	101c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    1016:	f44f 7184 	mov.w	r1, #264	; 0x108
    101a:	e006      	b.n	102a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
    101c:	9401      	str	r4, [sp, #4]
    101e:	b13c      	cbz	r4, 1030 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    1020:	2300      	movs	r3, #0
    1022:	0760      	lsls	r0, r4, #29
    1024:	d006      	beq.n	1034 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
    1026:	f240 1119 	movw	r1, #281	; 0x119
    102a:	2017      	movs	r0, #23
    102c:	f7ff fcf6 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1030:	2301      	movs	r3, #1
    1032:	e7f6      	b.n	1022 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1a>
    1034:	480b      	ldr	r0, [pc, #44]	; (1064 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>)
    1036:	2200      	movs	r2, #0
    1038:	4e0b      	ldr	r6, [pc, #44]	; (1068 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>)
    103a:	6002      	str	r2, [r0, #0]
    103c:	7849      	ldrb	r1, [r1, #1]
    103e:	e9d6 5000 	ldrd	r5, r0, [r6]
    1042:	68b6      	ldr	r6, [r6, #8]
    1044:	f361 601f 	bfi	r0, r1, #24, #8
    1048:	e9cd 5002 	strd	r5, r0, [sp, #8]
    104c:	9300      	str	r3, [sp, #0]
    104e:	9604      	str	r6, [sp, #16]
    1050:	ab01      	add	r3, sp, #4
    1052:	a902      	add	r1, sp, #8
    1054:	4610      	mov	r0, r2
    1056:	f7ff ff51 	bl	efc <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    105a:	9801      	ldr	r0, [sp, #4]
    105c:	b006      	add	sp, #24
    105e:	1b00      	subs	r0, r0, r4
    1060:	bd70      	pop	{r4, r5, r6, pc}
    1062:	0000      	.short	0x0000
    1064:	20000068 	.word	0x20000068
    1068:	00001158 	.word	0x00001158

0000106c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    106c:	b510      	push	{r4, lr}
    106e:	4604      	mov	r4, r0
    1070:	7980      	ldrb	r0, [r0, #6]
    1072:	490e      	ldr	r1, [pc, #56]	; (10ac <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
    1074:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    1078:	b1a8      	cbz	r0, 10a6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    107a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    107e:	79e1      	ldrb	r1, [r4, #7]
    1080:	7882      	ldrb	r2, [r0, #2]
    1082:	4291      	cmp	r1, r2
    1084:	d20f      	bcs.n	10a6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    1086:	1c4a      	adds	r2, r1, #1
    1088:	71e2      	strb	r2, [r4, #7]
    108a:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    108e:	8952      	ldrh	r2, [r2, #10]
    1090:	429a      	cmp	r2, r3
    1092:	d0f4      	beq.n	107e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
    1094:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    1098:	8952      	ldrh	r2, [r2, #10]
    109a:	80a2      	strh	r2, [r4, #4]
    109c:	f00c fe27 	bl	dcee <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    10a0:	6020      	str	r0, [r4, #0]
    10a2:	2000      	movs	r0, #0
    10a4:	bd10      	pop	{r4, pc}
    10a6:	2005      	movs	r0, #5
    10a8:	bd10      	pop	{r4, pc}
    10aa:	0000      	.short	0x0000
    10ac:	20000068 	.word	0x20000068

000010b0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    10b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    10b4:	4607      	mov	r7, r0
    10b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    10ba:	8038      	strh	r0, [r7, #0]
    10bc:	4812      	ldr	r0, [pc, #72]	; (1108 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x58>)
    10be:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    10c2:	b1ec      	cbz	r4, 1100 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    10c4:	78a5      	ldrb	r5, [r4, #2]
    10c6:	7920      	ldrb	r0, [r4, #4]
    10c8:	fbb0 f1f5 	udiv	r1, r0, r5
    10cc:	fb05 0611 	mls	r6, r5, r1, r0
    10d0:	4632      	mov	r2, r6
    10d2:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    10d6:	4620      	mov	r0, r4
    10d8:	f7ff ff6e 	bl	fb8 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    10dc:	4602      	mov	r2, r0
    10de:	28ff      	cmp	r0, #255	; 0xff
    10e0:	d00e      	beq.n	1100 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    10e2:	1ba8      	subs	r0, r5, r6
    10e4:	4410      	add	r0, r2
    10e6:	fbb0 f1f5 	udiv	r1, r0, r5
    10ea:	fb05 0011 	mls	r0, r5, r1, r0
    10ee:	7921      	ldrb	r1, [r4, #4]
    10f0:	4408      	add	r0, r1
    10f2:	b281      	uxth	r1, r0
    10f4:	8039      	strh	r1, [r7, #0]
    10f6:	4620      	mov	r0, r4
    10f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    10fc:	f00c bddd 	b.w	dcba <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    1100:	2000      	movs	r0, #0
    1102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1106:	0000      	.short	0x0000
    1108:	20000068 	.word	0x20000068

0000110c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    110c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1110:	4606      	mov	r6, r0
    1112:	4810      	ldr	r0, [pc, #64]	; (1154 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
    1114:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    1118:	4631      	mov	r1, r6
    111a:	4628      	mov	r0, r5
    111c:	f00c fdd3 	bl	dcc6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    1120:	4604      	mov	r4, r0
    1122:	28ff      	cmp	r0, #255	; 0xff
    1124:	d012      	beq.n	114c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
    1126:	f8d5 0006 	ldr.w	r0, [r5, #6]
    112a:	4621      	mov	r1, r4
    112c:	ea4f 4730 	mov.w	r7, r0, ror #16
    1130:	4628      	mov	r0, r5
    1132:	f00c fddc 	bl	dcee <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    1136:	4601      	mov	r1, r0
    1138:	4630      	mov	r0, r6
    113a:	47b8      	blx	r7
    113c:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    1140:	f64f 70f0 	movw	r0, #65520	; 0xfff0
    1144:	8148      	strh	r0, [r1, #10]
    1146:	2000      	movs	r0, #0
    1148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    114c:	f243 0002 	movw	r0, #12290	; 0x3002
    1150:	e7fa      	b.n	1148 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
    1152:	0000      	.short	0x0000
    1154:	20000068 	.word	0x20000068
    1158:	0000f59b 	.word	0x0000f59b
    115c:	000802a8 	.word	0x000802a8
    1160:	00000000 	.word	0x00000000

00001164 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    1164:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1168:	4c24      	ldr	r4, [pc, #144]	; (11fc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    116a:	4606      	mov	r6, r0
    116c:	b081      	sub	sp, #4
    116e:	6820      	ldr	r0, [r4, #0]
    1170:	469a      	mov	sl, r3
    1172:	4693      	mov	fp, r2
    1174:	b158      	cbz	r0, 118e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    1176:	7a01      	ldrb	r1, [r0, #8]
    1178:	42b1      	cmp	r1, r6
    117a:	d903      	bls.n	1184 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    117c:	6840      	ldr	r0, [r0, #4]
    117e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    1182:	b140      	cbz	r0, 1196 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    1184:	f243 0002 	movw	r0, #12290	; 0x3002
    1188:	b005      	add	sp, #20
    118a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    118e:	21a5      	movs	r1, #165	; 0xa5
    1190:	2018      	movs	r0, #24
    1192:	f7ff fc43 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1196:	4619      	mov	r1, r3
    1198:	9802      	ldr	r0, [sp, #8]
    119a:	f00c fde3 	bl	dd64 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    119e:	4680      	mov	r8, r0
    11a0:	4658      	mov	r0, fp
    11a2:	990e      	ldr	r1, [sp, #56]	; 0x38
    11a4:	f00c fdd4 	bl	dd50 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    11a8:	4605      	mov	r5, r0
    11aa:	eb08 0005 	add.w	r0, r8, r5
    11ae:	1d00      	adds	r0, r0, #4
    11b0:	b287      	uxth	r7, r0
    11b2:	6820      	ldr	r0, [r4, #0]
    11b4:	46a1      	mov	r9, r4
    11b6:	4639      	mov	r1, r7
    11b8:	6800      	ldr	r0, [r0, #0]
    11ba:	f00c fd19 	bl	dbf0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    11be:	0004      	movs	r4, r0
    11c0:	d01a      	beq.n	11f8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    11c2:	8067      	strh	r7, [r4, #2]
    11c4:	8025      	strh	r5, [r4, #0]
    11c6:	4629      	mov	r1, r5
    11c8:	1d20      	adds	r0, r4, #4
    11ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    11cc:	4607      	mov	r7, r0
    11ce:	465a      	mov	r2, fp
    11d0:	2309      	movs	r3, #9
    11d2:	9500      	str	r5, [sp, #0]
    11d4:	f00c fc86 	bl	dae4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    11d8:	8820      	ldrh	r0, [r4, #0]
    11da:	4641      	mov	r1, r8
    11dc:	4438      	add	r0, r7
    11de:	230a      	movs	r3, #10
    11e0:	9a02      	ldr	r2, [sp, #8]
    11e2:	f8cd a000 	str.w	sl, [sp]
    11e6:	f00c fc7d 	bl	dae4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    11ea:	f8d9 0000 	ldr.w	r0, [r9]
    11ee:	6840      	ldr	r0, [r0, #4]
    11f0:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    11f4:	2000      	movs	r0, #0
    11f6:	e7c7      	b.n	1188 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    11f8:	2004      	movs	r0, #4
    11fa:	e7c5      	b.n	1188 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    11fc:	2000006c 	.word	0x2000006c

00001200 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1200:	b570      	push	{r4, r5, r6, lr}
    1202:	4c14      	ldr	r4, [pc, #80]	; (1254 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    1204:	6823      	ldr	r3, [r4, #0]
    1206:	b18b      	cbz	r3, 122c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1208:	7a19      	ldrb	r1, [r3, #8]
    120a:	4281      	cmp	r1, r0
    120c:	d912      	bls.n	1234 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    120e:	685a      	ldr	r2, [r3, #4]
    1210:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1214:	b171      	cbz	r1, 1234 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1216:	2500      	movs	r5, #0
    1218:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    121c:	884a      	ldrh	r2, [r1, #2]
    121e:	6818      	ldr	r0, [r3, #0]
    1220:	f00c fd3e 	bl	dca0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1224:	6821      	ldr	r1, [r4, #0]
    1226:	2000      	movs	r0, #0
    1228:	7a0a      	ldrb	r2, [r1, #8]
    122a:	e00c      	b.n	1246 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    122c:	21c6      	movs	r1, #198	; 0xc6
    122e:	2018      	movs	r0, #24
    1230:	f7ff fbf4 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1234:	f243 0002 	movw	r0, #12290	; 0x3002
    1238:	bd70      	pop	{r4, r5, r6, pc}
    123a:	684b      	ldr	r3, [r1, #4]
    123c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1240:	b933      	cbnz	r3, 1250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    1242:	1c40      	adds	r0, r0, #1
    1244:	b2c0      	uxtb	r0, r0
    1246:	4282      	cmp	r2, r0
    1248:	d8f7      	bhi.n	123a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    124a:	6808      	ldr	r0, [r1, #0]
    124c:	f00c fd1d 	bl	dc8a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1250:	2000      	movs	r0, #0
    1252:	bd70      	pop	{r4, r5, r6, pc}
    1254:	2000006c 	.word	0x2000006c

00001258 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    125c:	460d      	mov	r5, r1
    125e:	0004      	movs	r4, r0
    1260:	4690      	mov	r8, r2
    1262:	f04f 0600 	mov.w	r6, #0
    1266:	d006      	beq.n	1276 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1268:	2700      	movs	r7, #0
    126a:	07a0      	lsls	r0, r4, #30
    126c:	d005      	beq.n	127a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    126e:	2186      	movs	r1, #134	; 0x86
    1270:	2018      	movs	r0, #24
    1272:	f7ff fbd3 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1276:	2701      	movs	r7, #1
    1278:	e7f7      	b.n	126a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    127a:	b1cd      	cbz	r5, 12b0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    127c:	4611      	mov	r1, r2
    127e:	2000      	movs	r0, #0
    1280:	f00c fce7 	bl	dc52 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1284:	300c      	adds	r0, #12
    1286:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    128a:	b98f      	cbnz	r7, 12b0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    128c:	4f0a      	ldr	r7, [pc, #40]	; (12b8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    128e:	f104 000c 	add.w	r0, r4, #12
    1292:	00aa      	lsls	r2, r5, #2
    1294:	603c      	str	r4, [r7, #0]
    1296:	7225      	strb	r5, [r4, #8]
    1298:	6060      	str	r0, [r4, #4]
    129a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    129e:	6020      	str	r0, [r4, #0]
    12a0:	2100      	movs	r1, #0
    12a2:	6860      	ldr	r0, [r4, #4]
    12a4:	f00f ff25 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    12a8:	4641      	mov	r1, r8
    12aa:	6838      	ldr	r0, [r7, #0]
    12ac:	f00c fcd1 	bl	dc52 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    12b0:	4630      	mov	r0, r6
    12b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    12b6:	0000      	.short	0x0000
    12b8:	2000006c 	.word	0x2000006c

000012bc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    12bc:	b570      	push	{r4, r5, r6, lr}
    12be:	4d08      	ldr	r5, [pc, #32]	; (12e0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    12c0:	6828      	ldr	r0, [r5, #0]
    12c2:	2800      	cmp	r0, #0
    12c4:	d00a      	beq.n	12dc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    12c6:	2400      	movs	r4, #0
    12c8:	e004      	b.n	12d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    12ca:	4620      	mov	r0, r4
    12cc:	f7ff ff98 	bl	1200 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    12d0:	1c64      	adds	r4, r4, #1
    12d2:	b2e4      	uxtb	r4, r4
    12d4:	6828      	ldr	r0, [r5, #0]
    12d6:	7a00      	ldrb	r0, [r0, #8]
    12d8:	42a0      	cmp	r0, r4
    12da:	d8f6      	bhi.n	12ca <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    12dc:	bd70      	pop	{r4, r5, r6, pc}
    12de:	0000      	.short	0x0000
    12e0:	2000006c 	.word	0x2000006c

000012e4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    12e4:	4909      	ldr	r1, [pc, #36]	; (130c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    12e6:	b510      	push	{r4, lr}
    12e8:	4602      	mov	r2, r0
    12ea:	6809      	ldr	r1, [r1, #0]
    12ec:	2000      	movs	r0, #0
    12ee:	b149      	cbz	r1, 1304 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    12f0:	7a0b      	ldrb	r3, [r1, #8]
    12f2:	4293      	cmp	r3, r2
    12f4:	d905      	bls.n	1302 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    12f6:	6849      	ldr	r1, [r1, #4]
    12f8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    12fc:	2900      	cmp	r1, #0
    12fe:	d000      	beq.n	1302 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1300:	1d08      	adds	r0, r1, #4
    1302:	bd10      	pop	{r4, pc}
    1304:	21ec      	movs	r1, #236	; 0xec
    1306:	2018      	movs	r0, #24
    1308:	f7ff fb88 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    130c:	2000006c 	.word	0x2000006c

00001310 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1310:	490a      	ldr	r1, [pc, #40]	; (133c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    1312:	b510      	push	{r4, lr}
    1314:	4602      	mov	r2, r0
    1316:	6809      	ldr	r1, [r1, #0]
    1318:	2000      	movs	r0, #0
    131a:	b159      	cbz	r1, 1334 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    131c:	7a0b      	ldrb	r3, [r1, #8]
    131e:	4293      	cmp	r3, r2
    1320:	d907      	bls.n	1332 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1322:	6849      	ldr	r1, [r1, #4]
    1324:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1328:	2900      	cmp	r1, #0
    132a:	d002      	beq.n	1332 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    132c:	f831 0b04 	ldrh.w	r0, [r1], #4
    1330:	4408      	add	r0, r1
    1332:	bd10      	pop	{r4, pc}
    1334:	21fa      	movs	r1, #250	; 0xfa
    1336:	2018      	movs	r0, #24
    1338:	f7ff fb70 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    133c:	2000006c 	.word	0x2000006c

00001340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    1340:	4801      	ldr	r0, [pc, #4]	; (1348 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    1342:	7840      	ldrb	r0, [r0, #1]
    1344:	4770      	bx	lr
    1346:	0000      	.short	0x0000
    1348:	20000070 	.word	0x20000070

0000134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    134c:	4801      	ldr	r0, [pc, #4]	; (1354 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    134e:	6840      	ldr	r0, [r0, #4]
    1350:	4770      	bx	lr
    1352:	0000      	.short	0x0000
    1354:	20000070 	.word	0x20000070

00001358 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    1358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    135c:	460c      	mov	r4, r1
    135e:	4607      	mov	r7, r0
    1360:	4616      	mov	r6, r2
    1362:	2125      	movs	r1, #37	; 0x25
    1364:	4610      	mov	r0, r2
    1366:	460d      	mov	r5, r1
    1368:	4622      	mov	r2, r4
    136a:	f00c fc00 	bl	db6e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    136e:	4680      	mov	r8, r0
    1370:	b157      	cbz	r7, 1388 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT>
    1372:	4638      	mov	r0, r7
    1374:	4641      	mov	r1, r8
    1376:	4632      	mov	r2, r6
    1378:	462b      	mov	r3, r5
    137a:	9400      	str	r4, [sp, #0]
    137c:	f00c fbb2 	bl	dae4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1380:	4803      	ldr	r0, [pc, #12]	; (1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>)
    1382:	6047      	str	r7, [r0, #4]
    1384:	7004      	strb	r4, [r0, #0]
    1386:	7046      	strb	r6, [r0, #1]
    1388:	4640      	mov	r0, r8
    138a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    138e:	0000      	.short	0x0000
    1390:	20000070 	.word	0x20000070

00001394 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    1394:	4802      	ldr	r0, [pc, #8]	; (13a0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    1396:	7842      	ldrb	r2, [r0, #1]
    1398:	7801      	ldrb	r1, [r0, #0]
    139a:	6840      	ldr	r0, [r0, #4]
    139c:	f7ff bfdc 	b.w	1358 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    13a0:	20000070 	.word	0x20000070
    13a4:	b530      	push	{r4, r5, lr}
    13a6:	490d      	ldr	r1, [pc, #52]	; (13dc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>)
    13a8:	2001      	movs	r0, #1
    13aa:	6048      	str	r0, [r1, #4]
    13ac:	1e82      	subs	r2, r0, #2
    13ae:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    13b2:	490b      	ldr	r1, [pc, #44]	; (13e0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x4c>)
    13b4:	6088      	str	r0, [r1, #8]
    13b6:	2300      	movs	r3, #0
    13b8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    13bc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    13c0:	4c08      	ldr	r4, [pc, #32]	; (13e4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x50>)
    13c2:	6023      	str	r3, [r4, #0]
    13c4:	1d25      	adds	r5, r4, #4
    13c6:	6028      	str	r0, [r5, #0]
    13c8:	6088      	str	r0, [r1, #8]
    13ca:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    13ce:	6023      	str	r3, [r4, #0]
    13d0:	6028      	str	r0, [r5, #0]
    13d2:	4906      	ldr	r1, [pc, #24]	; (13ec <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x58>)
    13d4:	4804      	ldr	r0, [pc, #16]	; (13e8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x54>)
    13d6:	6008      	str	r0, [r1, #0]
    13d8:	bd30      	pop	{r4, r5, pc}
    13da:	0000      	.short	0x0000
    13dc:	4000e000 	.word	0x4000e000
    13e0:	4000f000 	.word	0x4000f000
    13e4:	4000f500 	.word	0x4000f500
    13e8:	3ff60000 	.word	0x3ff60000
    13ec:	4001f508 	.word	0x4001f508

000013f0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    13f0:	b510      	push	{r4, lr}
    13f2:	f7ff ffd7 	bl	13a4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    13f6:	f00c fcdd 	bl	ddb4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    13fa:	4903      	ldr	r1, [pc, #12]	; (1408 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    13fc:	4801      	ldr	r0, [pc, #4]	; (1404 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    13fe:	6008      	str	r0, [r1, #0]
    1400:	bd10      	pop	{r4, pc}
    1402:	0000      	.short	0x0000
    1404:	3ff60000 	.word	0x3ff60000
    1408:	4001f508 	.word	0x4001f508

0000140c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    140c:	b510      	push	{r4, lr}
    140e:	f7ff ffc9 	bl	13a4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    1412:	f00c fccf 	bl	ddb4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    1416:	f000 f887 	bl	1528 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    141a:	4905      	ldr	r1, [pc, #20]	; (1430 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    141c:	4803      	ldr	r0, [pc, #12]	; (142c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    141e:	6008      	str	r0, [r1, #0]
    1420:	f000 f8b8 	bl	1594 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    1424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1428:	f000 b8dc 	b.w	15e4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    142c:	3ff60000 	.word	0x3ff60000
    1430:	4001f508 	.word	0x4001f508
    1434:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1438:	4682      	mov	sl, r0
    143a:	4838      	ldr	r0, [pc, #224]	; (151c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    143c:	f00f fcdc 	bl	10df8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1440:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 151c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    1444:	b128      	cbz	r0, 1452 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    1446:	2601      	movs	r6, #1
    1448:	f10b 0001 	add.w	r0, fp, #1
    144c:	21ff      	movs	r1, #255	; 0xff
    144e:	7001      	strb	r1, [r0, #0]
    1450:	e000      	b.n	1454 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    1452:	2600      	movs	r6, #0
    1454:	f44f 7580 	mov.w	r5, #256	; 0x100
    1458:	4c31      	ldr	r4, [pc, #196]	; (1520 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    145a:	f04f 0800 	mov.w	r8, #0
    145e:	1d2f      	adds	r7, r5, #4
    1460:	2101      	movs	r1, #1
    1462:	6061      	str	r1, [r4, #4]
    1464:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1468:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    146c:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1470:	6021      	str	r1, [r4, #0]
    1472:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1524 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    1476:	e01c      	b.n	14b2 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1478:	f8d9 0000 	ldr.w	r0, [r9]
    147c:	06c0      	lsls	r0, r0, #27
    147e:	d518      	bpl.n	14b2 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1480:	200e      	movs	r0, #14
    1482:	f00c fca6 	bl	ddd2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    1486:	f3ef 8010 	mrs	r0, PRIMASK
    148a:	9000      	str	r0, [sp, #0]
    148c:	b672      	cpsid	i
    148e:	2103      	movs	r1, #3
    1490:	4620      	mov	r0, r4
    1492:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    1496:	4629      	mov	r1, r5
    1498:	f00c fca8 	bl	ddec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    149c:	b930      	cbnz	r0, 14ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    149e:	4639      	mov	r1, r7
    14a0:	4620      	mov	r0, r4
    14a2:	f00c fca3 	bl	ddec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    14a6:	b908      	cbnz	r0, 14ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    14a8:	f00f fd3d 	bl	10f26 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    14ac:	9800      	ldr	r0, [sp, #0]
    14ae:	b900      	cbnz	r0, 14b2 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    14b0:	b662      	cpsie	i
    14b2:	4629      	mov	r1, r5
    14b4:	4620      	mov	r0, r4
    14b6:	f00c fc99 	bl	ddec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    14ba:	b928      	cbnz	r0, 14c8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    14bc:	4639      	mov	r1, r7
    14be:	4620      	mov	r0, r4
    14c0:	f00c fc94 	bl	ddec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    14c4:	2800      	cmp	r0, #0
    14c6:	d0d7      	beq.n	1478 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    14c8:	4639      	mov	r1, r7
    14ca:	4620      	mov	r0, r4
    14cc:	f00c fc8e 	bl	ddec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    14d0:	2800      	cmp	r0, #0
    14d2:	d1c5      	bne.n	1460 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    14d4:	bb06      	cbnz	r6, 1518 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    14d6:	f89b 1001 	ldrb.w	r1, [fp, #1]
    14da:	f88d 1000 	strb.w	r1, [sp]
    14de:	9900      	ldr	r1, [sp, #0]
    14e0:	9100      	str	r1, [sp, #0]
    14e2:	f89d 1000 	ldrb.w	r1, [sp]
    14e6:	b109      	cbz	r1, 14ec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    14e8:	2501      	movs	r5, #1
    14ea:	e000      	b.n	14ee <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    14ec:	2500      	movs	r5, #0
    14ee:	f10b 0001 	add.w	r0, fp, #1
    14f2:	f880 8000 	strb.w	r8, [r0]
    14f6:	2003      	movs	r0, #3
    14f8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    14fc:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1500:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1504:	200e      	movs	r0, #14
    1506:	f00c fc64 	bl	ddd2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    150a:	4804      	ldr	r0, [pc, #16]	; (151c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    150c:	f00f fc8b 	bl	10e26 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1510:	b115      	cbz	r5, 1518 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    1512:	2011      	movs	r0, #17
    1514:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1518:	2000      	movs	r0, #0
    151a:	e7fb      	b.n	1514 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    151c:	20000354 	.word	0x20000354
    1520:	4000e000 	.word	0x4000e000
    1524:	e000ed10 	.word	0xe000ed10

00001528 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1528:	b510      	push	{r4, lr}
    152a:	4806      	ldr	r0, [pc, #24]	; (1544 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    152c:	f00f fc77 	bl	10e1e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1530:	b118      	cbz	r0, 153a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    1532:	2130      	movs	r1, #48	; 0x30
    1534:	201d      	movs	r0, #29
    1536:	f7ff fa71 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    153a:	4802      	ldr	r0, [pc, #8]	; (1544 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    153c:	2100      	movs	r1, #0
    153e:	7041      	strb	r1, [r0, #1]
    1540:	bd10      	pop	{r4, pc}
    1542:	0000      	.short	0x0000
    1544:	20000354 	.word	0x20000354

00001548 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1548:	b570      	push	{r4, r5, r6, lr}
    154a:	4911      	ldr	r1, [pc, #68]	; (1590 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    154c:	680a      	ldr	r2, [r1, #0]
    154e:	b1ea      	cbz	r2, 158c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1550:	2300      	movs	r3, #0
    1552:	461d      	mov	r5, r3
    1554:	2401      	movs	r4, #1
    1556:	684a      	ldr	r2, [r1, #4]
    1558:	1c52      	adds	r2, r2, #1
    155a:	604a      	str	r2, [r1, #4]
    155c:	2a09      	cmp	r2, #9
    155e:	d300      	bcc.n	1562 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1560:	604d      	str	r5, [r1, #4]
    1562:	790e      	ldrb	r6, [r1, #4]
    1564:	fa04 f206 	lsl.w	r2, r4, r6
    1568:	680e      	ldr	r6, [r1, #0]
    156a:	4216      	tst	r6, r2
    156c:	d00b      	beq.n	1586 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    156e:	f3ef 8310 	mrs	r3, PRIMASK
    1572:	b672      	cpsid	i
    1574:	680c      	ldr	r4, [r1, #0]
    1576:	4394      	bics	r4, r2
    1578:	600c      	str	r4, [r1, #0]
    157a:	b903      	cbnz	r3, 157e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    157c:	b662      	cpsie	i
    157e:	6849      	ldr	r1, [r1, #4]
    1580:	6001      	str	r1, [r0, #0]
    1582:	2000      	movs	r0, #0
    1584:	bd70      	pop	{r4, r5, r6, pc}
    1586:	1c5b      	adds	r3, r3, #1
    1588:	2b09      	cmp	r3, #9
    158a:	d3e4      	bcc.n	1556 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    158c:	2005      	movs	r0, #5
    158e:	bd70      	pop	{r4, r5, r6, pc}
    1590:	20000078 	.word	0x20000078

00001594 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    1594:	4802      	ldr	r0, [pc, #8]	; (15a0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    1596:	2100      	movs	r1, #0
    1598:	6001      	str	r1, [r0, #0]
    159a:	6041      	str	r1, [r0, #4]
    159c:	4770      	bx	lr
    159e:	0000      	.short	0x0000
    15a0:	20000078 	.word	0x20000078

000015a4 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    15a4:	b510      	push	{r4, lr}
    15a6:	4c04      	ldr	r4, [pc, #16]	; (15b8 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    15a8:	7820      	ldrb	r0, [r4, #0]
    15aa:	28ff      	cmp	r0, #255	; 0xff
    15ac:	d003      	beq.n	15b6 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    15ae:	f00b fa8d 	bl	cacc <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    15b2:	20ff      	movs	r0, #255	; 0xff
    15b4:	7020      	strb	r0, [r4, #0]
    15b6:	bd10      	pop	{r4, pc}
    15b8:	20000000 	.word	0x20000000

000015bc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    15bc:	b510      	push	{r4, lr}
    15be:	4c08      	ldr	r4, [pc, #32]	; (15e0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    15c0:	7861      	ldrb	r1, [r4, #1]
    15c2:	b109      	cbz	r1, 15c8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    15c4:	200f      	movs	r0, #15
    15c6:	bd10      	pop	{r4, pc}
    15c8:	f00b fa46 	bl	ca58 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    15cc:	7020      	strb	r0, [r4, #0]
    15ce:	28ff      	cmp	r0, #255	; 0xff
    15d0:	d001      	beq.n	15d6 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    15d2:	2000      	movs	r0, #0
    15d4:	bd10      	pop	{r4, pc}
    15d6:	2173      	movs	r1, #115	; 0x73
    15d8:	201f      	movs	r0, #31
    15da:	f7ff fa1f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    15de:	0000      	.short	0x0000
    15e0:	20000000 	.word	0x20000000

000015e4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    15e4:	4901      	ldr	r1, [pc, #4]	; (15ec <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    15e6:	2000      	movs	r0, #0
    15e8:	7048      	strb	r0, [r1, #1]
    15ea:	4770      	bx	lr
    15ec:	20000000 	.word	0x20000000

000015f0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    15f0:	4806      	ldr	r0, [pc, #24]	; (160c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    15f2:	4a07      	ldr	r2, [pc, #28]	; (1610 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    15f4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    15f6:	8852      	ldrh	r2, [r2, #2]
    15f8:	4291      	cmp	r1, r2
    15fa:	d104      	bne.n	1606 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    15fc:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1600:	b108      	cbz	r0, 1606 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1602:	2000      	movs	r0, #0
    1604:	4770      	bx	lr
    1606:	2001      	movs	r0, #1
    1608:	4770      	bx	lr
    160a:	0000      	.short	0x0000
    160c:	20001414 	.word	0x20001414
    1610:	20000348 	.word	0x20000348

00001614 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    1614:	4901      	ldr	r1, [pc, #4]	; (161c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    1616:	8048      	strh	r0, [r1, #2]
    1618:	4770      	bx	lr
    161a:	0000      	.short	0x0000
    161c:	20000348 	.word	0x20000348

00001620 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1620:	4808      	ldr	r0, [pc, #32]	; (1644 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    1622:	4a09      	ldr	r2, [pc, #36]	; (1648 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    1624:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1626:	8852      	ldrh	r2, [r2, #2]
    1628:	4291      	cmp	r1, r2
    162a:	d109      	bne.n	1640 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    162c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1630:	8481      	strh	r1, [r0, #36]	; 0x24
    1632:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    1636:	b119      	cbz	r1, 1640 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1638:	2100      	movs	r1, #0
    163a:	7001      	strb	r1, [r0, #0]
    163c:	2001      	movs	r0, #1
    163e:	4770      	bx	lr
    1640:	2000      	movs	r0, #0
    1642:	4770      	bx	lr
    1644:	20001414 	.word	0x20001414
    1648:	20000348 	.word	0x20000348

0000164c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    164c:	4807      	ldr	r0, [pc, #28]	; (166c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    164e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    1652:	2901      	cmp	r1, #1
    1654:	d007      	beq.n	1666 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    1656:	2101      	movs	r1, #1
    1658:	7001      	strb	r1, [r0, #0]
    165a:	4805      	ldr	r0, [pc, #20]	; (1670 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    165c:	4903      	ldr	r1, [pc, #12]	; (166c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    165e:	8800      	ldrh	r0, [r0, #0]
    1660:	8488      	strh	r0, [r1, #36]	; 0x24
    1662:	2001      	movs	r0, #1
    1664:	4770      	bx	lr
    1666:	2000      	movs	r0, #0
    1668:	4770      	bx	lr
    166a:	0000      	.short	0x0000
    166c:	20001414 	.word	0x20001414
    1670:	20000348 	.word	0x20000348

00001674 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    1674:	4906      	ldr	r1, [pc, #24]	; (1690 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    1676:	4b07      	ldr	r3, [pc, #28]	; (1694 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    1678:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    167a:	885b      	ldrh	r3, [r3, #2]
    167c:	429a      	cmp	r2, r3
    167e:	d105      	bne.n	168c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1680:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1684:	b112      	cbz	r2, 168c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1686:	6001      	str	r1, [r0, #0]
    1688:	2001      	movs	r0, #1
    168a:	4770      	bx	lr
    168c:	2000      	movs	r0, #0
    168e:	4770      	bx	lr
    1690:	20001414 	.word	0x20001414
    1694:	20000348 	.word	0x20000348

00001698 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    1698:	4909      	ldr	r1, [pc, #36]	; (16c0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    169a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    169c:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    16a0:	3bff      	subs	r3, #255	; 0xff
    16a2:	d002      	beq.n	16aa <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    16a4:	2100      	movs	r1, #0
    16a6:	6001      	str	r1, [r0, #0]
    16a8:	e007      	b.n	16ba <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    16aa:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    16ae:	4904      	ldr	r1, [pc, #16]	; (16c0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    16b0:	2a01      	cmp	r2, #1
    16b2:	d002      	beq.n	16ba <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    16b4:	6001      	str	r1, [r0, #0]
    16b6:	2001      	movs	r0, #1
    16b8:	4770      	bx	lr
    16ba:	2000      	movs	r0, #0
    16bc:	4770      	bx	lr
    16be:	0000      	.short	0x0000
    16c0:	20001414 	.word	0x20001414

000016c4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    16c4:	4901      	ldr	r1, [pc, #4]	; (16cc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    16c6:	8008      	strh	r0, [r1, #0]
    16c8:	4770      	bx	lr
    16ca:	0000      	.short	0x0000
    16cc:	20000348 	.word	0x20000348

000016d0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    16d0:	4905      	ldr	r1, [pc, #20]	; (16e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    16d2:	2000      	movs	r0, #0
    16d4:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    16d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    16dc:	8488      	strh	r0, [r1, #36]	; 0x24
    16de:	4903      	ldr	r1, [pc, #12]	; (16ec <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    16e0:	8008      	strh	r0, [r1, #0]
    16e2:	8048      	strh	r0, [r1, #2]
    16e4:	4770      	bx	lr
    16e6:	0000      	.short	0x0000
    16e8:	20001414 	.word	0x20001414
    16ec:	20000348 	.word	0x20000348
    16f0:	4905      	ldr	r1, [pc, #20]	; (1708 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    16f2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    16f4:	4282      	cmp	r2, r0
    16f6:	d105      	bne.n	1704 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    16f8:	2000      	movs	r0, #0
    16fa:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    16fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1702:	8488      	strh	r0, [r1, #36]	; 0x24
    1704:	4770      	bx	lr
    1706:	0000      	.short	0x0000
    1708:	20001414 	.word	0x20001414

0000170c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    170c:	4a0a      	ldr	r2, [pc, #40]	; (1738 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    170e:	b110      	cbz	r0, 1716 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    1710:	2801      	cmp	r0, #1
    1712:	d007      	beq.n	1724 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    1714:	e00e      	b.n	1734 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1716:	7850      	ldrb	r0, [r2, #1]
    1718:	b160      	cbz	r0, 1734 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    171a:	f8d2 0002 	ldr.w	r0, [r2, #2]
    171e:	6008      	str	r0, [r1, #0]
    1720:	88d0      	ldrh	r0, [r2, #6]
    1722:	e004      	b.n	172e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    1724:	7810      	ldrb	r0, [r2, #0]
    1726:	b128      	cbz	r0, 1734 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1728:	6890      	ldr	r0, [r2, #8]
    172a:	6008      	str	r0, [r1, #0]
    172c:	8990      	ldrh	r0, [r2, #12]
    172e:	8088      	strh	r0, [r1, #4]
    1730:	2001      	movs	r0, #1
    1732:	4770      	bx	lr
    1734:	2000      	movs	r0, #0
    1736:	4770      	bx	lr
    1738:	20000356 	.word	0x20000356

0000173c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    173c:	4a08      	ldr	r2, [pc, #32]	; (1760 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    173e:	2301      	movs	r3, #1
    1740:	b138      	cbz	r0, 1752 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    1742:	2801      	cmp	r0, #1
    1744:	d104      	bne.n	1750 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    1746:	7013      	strb	r3, [r2, #0]
    1748:	6808      	ldr	r0, [r1, #0]
    174a:	6090      	str	r0, [r2, #8]
    174c:	8888      	ldrh	r0, [r1, #4]
    174e:	8190      	strh	r0, [r2, #12]
    1750:	4770      	bx	lr
    1752:	7053      	strb	r3, [r2, #1]
    1754:	6808      	ldr	r0, [r1, #0]
    1756:	f8c2 0002 	str.w	r0, [r2, #2]
    175a:	8888      	ldrh	r0, [r1, #4]
    175c:	80d0      	strh	r0, [r2, #6]
    175e:	4770      	bx	lr
    1760:	20000356 	.word	0x20000356

00001764 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    1764:	4906      	ldr	r1, [pc, #24]	; (1780 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    1766:	b110      	cbz	r0, 176e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    1768:	2801      	cmp	r0, #1
    176a:	d002      	beq.n	1772 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    176c:	e005      	b.n	177a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    176e:	7848      	ldrb	r0, [r1, #1]
    1770:	e000      	b.n	1774 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    1772:	7808      	ldrb	r0, [r1, #0]
    1774:	b108      	cbz	r0, 177a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    1776:	2001      	movs	r0, #1
    1778:	4770      	bx	lr
    177a:	2000      	movs	r0, #0
    177c:	4770      	bx	lr
    177e:	0000      	.short	0x0000
    1780:	20000356 	.word	0x20000356

00001784 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
    1784:	4901      	ldr	r1, [pc, #4]	; (178c <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
    1786:	7708      	strb	r0, [r1, #28]
    1788:	4770      	bx	lr
    178a:	0000      	.short	0x0000
    178c:	20000b22 	.word	0x20000b22

00001790 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>:
    1790:	b570      	push	{r4, r5, r6, lr}
    1792:	460c      	mov	r4, r1
    1794:	4605      	mov	r5, r0
    1796:	f000 f92b 	bl	19f0 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
    179a:	b118      	cbz	r0, 17a4 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x14>
    179c:	21d0      	movs	r1, #208	; 0xd0
    179e:	2027      	movs	r0, #39	; 0x27
    17a0:	f7ff f93c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    17a4:	4803      	ldr	r0, [pc, #12]	; (17b4 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x24>)
    17a6:	2101      	movs	r1, #1
    17a8:	f00c ff57 	bl	e65a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    17ac:	4802      	ldr	r0, [pc, #8]	; (17b8 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x28>)
    17ae:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    17b2:	bd70      	pop	{r4, r5, r6, pc}
    17b4:	20000b00 	.word	0x20000b00
    17b8:	20000080 	.word	0x20000080

000017bc <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>:
    17bc:	4901      	ldr	r1, [pc, #4]	; (17c4 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q+0x8>)
    17be:	2001      	movs	r0, #1
    17c0:	7148      	strb	r0, [r1, #5]
    17c2:	4770      	bx	lr
    17c4:	20000080 	.word	0x20000080

000017c8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>:
    17c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17cc:	4e65      	ldr	r6, [pc, #404]	; (1964 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x19c>)
    17ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    17d0:	7835      	ldrb	r5, [r6, #0]
    17d2:	bbed      	cbnz	r5, 1850 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x88>
    17d4:	b3e2      	cbz	r2, 1850 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x88>
    17d6:	b3db      	cbz	r3, 1850 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x88>
    17d8:	b3d4      	cbz	r4, 1850 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x88>
    17da:	f106 0514 	add.w	r5, r6, #20
    17de:	e9c6 010f 	strd	r0, r1, [r6, #60]	; 0x3c
    17e2:	e885 001c 	stmia.w	r5, {r2, r3, r4}
    17e6:	2700      	movs	r7, #0
    17e8:	7177      	strb	r7, [r6, #5]
    17ea:	7137      	strb	r7, [r6, #4]
    17ec:	70b7      	strb	r7, [r6, #2]
    17ee:	7077      	strb	r7, [r6, #1]
    17f0:	70f7      	strb	r7, [r6, #3]
    17f2:	81b7      	strh	r7, [r6, #12]
    17f4:	81f7      	strh	r7, [r6, #14]
    17f6:	f000 f94b 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    17fa:	4605      	mov	r5, r0
    17fc:	f000 f942 	bl	1a84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1800:	4604      	mov	r4, r0
    1802:	f006 fd0b 	bl	821c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    1806:	f006 faa5 	bl	7d54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    180a:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    180e:	f006 fd89 	bl	8324 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    1812:	69e0      	ldr	r0, [r4, #28]
    1814:	f006 fe6c 	bl	84f0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    1818:	6960      	ldr	r0, [r4, #20]
    181a:	f006 fe5f 	bl	84dc <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    181e:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    1822:	f006 fe95 	bl	8550 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    1826:	f04f 0b01 	mov.w	fp, #1
    182a:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    182e:	2000      	movs	r0, #0
    1830:	f006 fbf4 	bl	801c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    1834:	2800      	cmp	r0, #0
    1836:	d07d      	beq.n	1934 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16c>
    1838:	484b      	ldr	r0, [pc, #300]	; (1968 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x1a0>)
    183a:	f006 fc53 	bl	80e4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    183e:	8820      	ldrh	r0, [r4, #0]
    1840:	f7ff fd66 	bl	1310 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    1844:	6370      	str	r0, [r6, #52]	; 0x34
    1846:	8820      	ldrh	r0, [r4, #0]
    1848:	f7ff fd4c 	bl	12e4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    184c:	63b0      	str	r0, [r6, #56]	; 0x38
    184e:	e000      	b.n	1852 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x8a>
    1850:	e009      	b.n	1866 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x9e>
    1852:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    1856:	f88d 0000 	strb.w	r0, [sp]
    185a:	9800      	ldr	r0, [sp, #0]
    185c:	9000      	str	r0, [sp, #0]
    185e:	f89d 0000 	ldrb.w	r0, [sp]
    1862:	b9a8      	cbnz	r0, 1890 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xc8>
    1864:	e002      	b.n	186c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xa4>
    1866:	f240 1145 	movw	r1, #325	; 0x145
    186a:	e077      	b.n	195c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x194>
    186c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    186e:	b178      	cbz	r0, 1890 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xc8>
    1870:	f8b5 004a 	ldrh.w	r0, [r5, #74]	; 0x4a
    1874:	8aa9      	ldrh	r1, [r5, #20]
    1876:	4288      	cmp	r0, r1
    1878:	d10a      	bne.n	1890 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xc8>
    187a:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    187e:	2201      	movs	r2, #1
    1880:	4408      	add	r0, r1
    1882:	f8a5 004a 	strh.w	r0, [r5, #74]	; 0x4a
    1886:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    188a:	6f21      	ldr	r1, [r4, #112]	; 0x70
    188c:	f009 ff04 	bl	b698 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    1890:	f105 0288 	add.w	r2, r5, #136	; 0x88
    1894:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 196c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x1a4>
    1898:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    189c:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    18a0:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
    18a4:	f8c9 2019 	str.w	r2, [r9, #25]
    18a8:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
    18ac:	f8c9 101d 	str.w	r1, [r9, #29]
    18b0:	f000 f922 	bl	1af8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xec>
    18b4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    18b6:	4601      	mov	r1, r0
    18b8:	4610      	mov	r0, r2
    18ba:	f00c fc5a 	bl	e172 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    18be:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    18c0:	4281      	cmp	r1, r0
    18c2:	d200      	bcs.n	18c6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xfe>
    18c4:	4608      	mov	r0, r1
    18c6:	71b0      	strb	r0, [r6, #6]
    18c8:	46b0      	mov	r8, r6
    18ca:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    18ce:	46ba      	mov	sl, r7
    18d0:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    18d2:	f895 7023 	ldrb.w	r7, [r5, #35]	; 0x23
    18d6:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    18d8:	2908      	cmp	r1, #8
    18da:	d100      	bne.n	18de <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x116>
    18dc:	2104      	movs	r1, #4
    18de:	f00c fc48 	bl	e172 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    18e2:	b90f      	cbnz	r7, 18e8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x120>
    18e4:	1d00      	adds	r0, r0, #4
    18e6:	b280      	uxth	r0, r0
    18e8:	4286      	cmp	r6, r0
    18ea:	d200      	bcs.n	18ee <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x126>
    18ec:	4630      	mov	r0, r6
    18ee:	f888 0007 	strb.w	r0, [r8, #7]
    18f2:	f888 0008 	strb.w	r0, [r8, #8]
    18f6:	f895 0022 	ldrb.w	r0, [r5, #34]	; 0x22
    18fa:	b188      	cbz	r0, 1920 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x158>
    18fc:	f889 b018 	strb.w	fp, [r9, #24]
    1900:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    1904:	e9c9 1204 	strd	r1, r2, [r9, #16]
    1908:	4656      	mov	r6, sl
    190a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    190e:	f00c fb1d 	bl	df4c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x4>
    1912:	4603      	mov	r3, r0
    1914:	22fb      	movs	r2, #251	; 0xfb
    1916:	4915      	ldr	r1, [pc, #84]	; (196c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x1a4>)
    1918:	4630      	mov	r0, r6
    191a:	9600      	str	r6, [sp, #0]
    191c:	f006 f986 	bl	7c2c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1920:	2001      	movs	r0, #1
    1922:	f000 fb63 	bl	1fec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a0>
    1926:	4812      	ldr	r0, [pc, #72]	; (1970 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x1a8>)
    1928:	6800      	ldr	r0, [r0, #0]
    192a:	2803      	cmp	r0, #3
    192c:	d014      	beq.n	1958 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x190>
    192e:	280b      	cmp	r0, #11
    1930:	d012      	beq.n	1958 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x190>
    1932:	e000      	b.n	1936 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16e>
    1934:	e00e      	b.n	1954 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x18c>
    1936:	480d      	ldr	r0, [pc, #52]	; (196c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x1a4>)
    1938:	220e      	movs	r2, #14
    193a:	2100      	movs	r1, #0
    193c:	304a      	adds	r0, #74	; 0x4a
    193e:	f00f fbd8 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1942:	480a      	ldr	r0, [pc, #40]	; (196c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x1a4>)
    1944:	8aa9      	ldrh	r1, [r5, #20]
    1946:	304a      	adds	r0, #74	; 0x4a
    1948:	8041      	strh	r1, [r0, #2]
    194a:	8821      	ldrh	r1, [r4, #0]
    194c:	8001      	strh	r1, [r0, #0]
    194e:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
    1952:	7101      	strb	r1, [r0, #4]
    1954:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1958:	f240 2102 	movw	r1, #514	; 0x202
    195c:	2027      	movs	r0, #39	; 0x27
    195e:	f7ff f85d 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1962:	0000      	.short	0x0000
    1964:	20000080 	.word	0x20000080
    1968:	00002174 	.word	0x00002174
    196c:	20000ad8 	.word	0x20000ad8
    1970:	40001550 	.word	0x40001550

00001974 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>:
    1974:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1978:	4688      	mov	r8, r1
    197a:	4607      	mov	r7, r0
    197c:	f000 f888 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1980:	4c1a      	ldr	r4, [pc, #104]	; (19ec <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x78>)
    1982:	4605      	mov	r5, r0
    1984:	07b8      	lsls	r0, r7, #30
    1986:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1988:	784e      	ldrb	r6, [r1, #1]
    198a:	d516      	bpl.n	19ba <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x46>
    198c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    198e:	b330      	cbz	r0, 19de <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x6a>
    1990:	8962      	ldrh	r2, [r4, #10]
    1992:	1cd2      	adds	r2, r2, #3
    1994:	f00f fb33 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1998:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    199a:	6260      	str	r0, [r4, #36]	; 0x24
    199c:	4669      	mov	r1, sp
    199e:	aa01      	add	r2, sp, #4
    19a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    19a2:	f00c f81c 	bl	d9de <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    19a6:	9800      	ldr	r0, [sp, #0]
    19a8:	f00b ffb6 	bl	d918 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    19ac:	f8c8 0000 	str.w	r0, [r8]
    19b0:	4631      	mov	r1, r6
    19b2:	2201      	movs	r2, #1
    19b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    19b6:	f00b ff66 	bl	d886 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    19ba:	07f8      	lsls	r0, r7, #31
    19bc:	d00d      	beq.n	19da <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x66>
    19be:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    19c2:	3518      	adds	r5, #24
    19c4:	1c40      	adds	r0, r0, #1
    19c6:	f141 0100 	adc.w	r1, r1, #0
    19ca:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    19ce:	f815 0918 	ldrb.w	r0, [r5], #-24
    19d2:	2801      	cmp	r0, #1
    19d4:	d008      	beq.n	19e8 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x74>
    19d6:	2001      	movs	r0, #1
    19d8:	7628      	strb	r0, [r5, #24]
    19da:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    19de:	f240 415c 	movw	r1, #1116	; 0x45c
    19e2:	2027      	movs	r0, #39	; 0x27
    19e4:	f7ff f81a 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    19e8:	2000      	movs	r0, #0
    19ea:	e7f5      	b.n	19d8 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x64>
    19ec:	20000080 	.word	0x20000080

000019f0 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>:
    19f0:	4804      	ldr	r0, [pc, #16]	; (1a04 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x14>)
    19f2:	7800      	ldrb	r0, [r0, #0]
    19f4:	b108      	cbz	r0, 19fa <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0xa>
    19f6:	200c      	movs	r0, #12
    19f8:	4770      	bx	lr
    19fa:	4903      	ldr	r1, [pc, #12]	; (1a08 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x18>)
    19fc:	2000      	movs	r0, #0
    19fe:	7708      	strb	r0, [r1, #28]
    1a00:	4770      	bx	lr
    1a02:	0000      	.short	0x0000
    1a04:	20000080 	.word	0x20000080
    1a08:	20000b22 	.word	0x20000b22

00001a0c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>:
    1a0c:	4812      	ldr	r0, [pc, #72]	; (1a58 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c>)
    1a0e:	b508      	push	{r3, lr}
    1a10:	7801      	ldrb	r1, [r0, #0]
    1a12:	b139      	cbz	r1, 1a24 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x18>
    1a14:	7800      	ldrb	r0, [r0, #0]
    1a16:	2801      	cmp	r0, #1
    1a18:	d006      	beq.n	1a28 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1c>
    1a1a:	f240 211a 	movw	r1, #538	; 0x21a
    1a1e:	2027      	movs	r0, #39	; 0x27
    1a20:	f7fe fffc 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a24:	f000 f9bc 	bl	1da0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>
    1a28:	f000 f82c 	bl	1a84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1a2c:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    1a30:	f88d 1000 	strb.w	r1, [sp]
    1a34:	9900      	ldr	r1, [sp, #0]
    1a36:	9100      	str	r1, [sp, #0]
    1a38:	f89d 1000 	ldrb.w	r1, [sp]
    1a3c:	2900      	cmp	r1, #0
    1a3e:	d10a      	bne.n	1a56 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4a>
    1a40:	6f01      	ldr	r1, [r0, #112]	; 0x70
    1a42:	2900      	cmp	r1, #0
    1a44:	d007      	beq.n	1a56 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4a>
    1a46:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    1a4a:	2200      	movs	r2, #0
    1a4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1a50:	4611      	mov	r1, r2
    1a52:	f009 be21 	b.w	b698 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    1a56:	bd08      	pop	{r3, pc}
    1a58:	20000080 	.word	0x20000080
    1a5c:	4608      	mov	r0, r1
    1a5e:	2100      	movs	r1, #0
    1a60:	7041      	strb	r1, [r0, #1]
    1a62:	2122      	movs	r1, #34	; 0x22
    1a64:	f800 1b04 	strb.w	r1, [r0], #4
    1a68:	220e      	movs	r2, #14
    1a6a:	4901      	ldr	r1, [pc, #4]	; (1a70 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x64>)
    1a6c:	f00f bac7 	b.w	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1a70:	20000b30 	.word	0x20000b30
    1a74:	4a02      	ldr	r2, [pc, #8]	; (1a80 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x74>)
    1a76:	8993      	ldrh	r3, [r2, #12]
    1a78:	4303      	orrs	r3, r0
    1a7a:	8193      	strh	r3, [r2, #12]
    1a7c:	6952      	ldr	r2, [r2, #20]
    1a7e:	4710      	bx	r2
    1a80:	20000080 	.word	0x20000080
    1a84:	4801      	ldr	r0, [pc, #4]	; (1a8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x80>)
    1a86:	6840      	ldr	r0, [r0, #4]
    1a88:	4770      	bx	lr
    1a8a:	0000      	.short	0x0000
    1a8c:	200000bc 	.word	0x200000bc
    1a90:	4801      	ldr	r0, [pc, #4]	; (1a98 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x8c>)
    1a92:	6840      	ldr	r0, [r0, #4]
    1a94:	3088      	adds	r0, #136	; 0x88
    1a96:	4770      	bx	lr
    1a98:	200000bc 	.word	0x200000bc
    1a9c:	4a01      	ldr	r2, [pc, #4]	; (1aa4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x98>)
    1a9e:	2100      	movs	r1, #0
    1aa0:	6952      	ldr	r2, [r2, #20]
    1aa2:	4710      	bx	r2
    1aa4:	20000080 	.word	0x20000080
    1aa8:	b570      	push	{r4, r5, r6, lr}
    1aaa:	4605      	mov	r5, r0
    1aac:	2901      	cmp	r1, #1
    1aae:	d81c      	bhi.n	1aea <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xde>
    1ab0:	4c10      	ldr	r4, [pc, #64]	; (1af4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xe8>)
    1ab2:	69a1      	ldr	r1, [r4, #24]
    1ab4:	4788      	blx	r1
    1ab6:	b1c0      	cbz	r0, 1aea <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xde>
    1ab8:	7920      	ldrb	r0, [r4, #4]
    1aba:	b9b0      	cbnz	r0, 1aea <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xde>
    1abc:	2d01      	cmp	r5, #1
    1abe:	d116      	bne.n	1aee <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xe2>
    1ac0:	f104 0010 	add.w	r0, r4, #16
    1ac4:	7800      	ldrb	r0, [r0, #0]
    1ac6:	06c1      	lsls	r1, r0, #27
    1ac8:	d405      	bmi.n	1ad6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xca>
    1aca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1acc:	7809      	ldrb	r1, [r1, #0]
    1ace:	06c9      	lsls	r1, r1, #27
    1ad0:	d401      	bmi.n	1ad6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xca>
    1ad2:	2101      	movs	r1, #1
    1ad4:	e000      	b.n	1ad8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xcc>
    1ad6:	2100      	movs	r1, #0
    1ad8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1ada:	b91a      	cbnz	r2, 1ae4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd8>
    1adc:	8962      	ldrh	r2, [r4, #10]
    1ade:	b10a      	cbz	r2, 1ae4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd8>
    1ae0:	06c0      	lsls	r0, r0, #27
    1ae2:	d502      	bpl.n	1aea <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xde>
    1ae4:	89a0      	ldrh	r0, [r4, #12]
    1ae6:	4301      	orrs	r1, r0
    1ae8:	d001      	beq.n	1aee <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xe2>
    1aea:	2001      	movs	r0, #1
    1aec:	bd70      	pop	{r4, r5, r6, pc}
    1aee:	2000      	movs	r0, #0
    1af0:	bd70      	pop	{r4, r5, r6, pc}
    1af2:	0000      	.short	0x0000
    1af4:	20000080 	.word	0x20000080
    1af8:	b510      	push	{r4, lr}
    1afa:	f7ff ffc3 	bl	1a84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1afe:	4604      	mov	r4, r0
    1b00:	f7ff ffc6 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1b04:	4601      	mov	r1, r0
    1b06:	7f40      	ldrb	r0, [r0, #29]
    1b08:	4a0b      	ldr	r2, [pc, #44]	; (1b38 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x12c>)
    1b0a:	2825      	cmp	r0, #37	; 0x25
    1b0c:	d00a      	beq.n	1b24 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x118>
    1b0e:	2826      	cmp	r0, #38	; 0x26
    1b10:	d008      	beq.n	1b24 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x118>
    1b12:	7f89      	ldrb	r1, [r1, #30]
    1b14:	2925      	cmp	r1, #37	; 0x25
    1b16:	d005      	beq.n	1b24 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x118>
    1b18:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1b1c:	2804      	cmp	r0, #4
    1b1e:	d100      	bne.n	1b22 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x116>
    1b20:	2008      	movs	r0, #8
    1b22:	bd10      	pop	{r4, pc}
    1b24:	6850      	ldr	r0, [r2, #4]
    1b26:	f890 1262 	ldrb.w	r1, [r0, #610]	; 0x262
    1b2a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b32:	f00c ba19 	b.w	df68 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x20>
    1b36:	0000      	.short	0x0000
    1b38:	200000bc 	.word	0x200000bc
    1b3c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1b40:	468b      	mov	fp, r1
    1b42:	4681      	mov	r9, r0
    1b44:	f7ff ffa4 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1b48:	2700      	movs	r7, #0
    1b4a:	4c64      	ldr	r4, [pc, #400]	; (1cdc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d0>)
    1b4c:	4606      	mov	r6, r0
    1b4e:	f88d 7008 	strb.w	r7, [sp, #8]
    1b52:	9703      	str	r7, [sp, #12]
    1b54:	9701      	str	r7, [sp, #4]
    1b56:	7820      	ldrb	r0, [r4, #0]
    1b58:	463d      	mov	r5, r7
    1b5a:	2802      	cmp	r0, #2
    1b5c:	d004      	beq.n	1b68 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x15c>
    1b5e:	f240 41df 	movw	r1, #1247	; 0x4df
    1b62:	2027      	movs	r0, #39	; 0x27
    1b64:	f7fe ff5a 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b68:	7ba0      	ldrb	r0, [r4, #14]
    1b6a:	0640      	lsls	r0, r0, #25
    1b6c:	d406      	bmi.n	1b7c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x170>
    1b6e:	2040      	movs	r0, #64	; 0x40
    1b70:	f7ff ff94 	bl	1a9c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x90>
    1b74:	89e0      	ldrh	r0, [r4, #14]
    1b76:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1b7a:	81e0      	strh	r0, [r4, #14]
    1b7c:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    1b80:	f04f 0801 	mov.w	r8, #1
    1b84:	f1b9 0f00 	cmp.w	r9, #0
    1b88:	d03a      	beq.n	1c00 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1f4>
    1b8a:	b180      	cbz	r0, 1bae <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1a2>
    1b8c:	f006 f91c 	bl	7dc8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    1b90:	f006 f8f6 	bl	7d80 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    1b94:	b958      	cbnz	r0, 1bae <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1a2>
    1b96:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b98:	7841      	ldrb	r1, [r0, #1]
    1b9a:	b141      	cbz	r1, 1bae <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1a2>
    1b9c:	7800      	ldrb	r0, [r0, #0]
    1b9e:	7e31      	ldrb	r1, [r6, #24]
    1ba0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1ba4:	4288      	cmp	r0, r1
    1ba6:	d102      	bne.n	1bae <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1a2>
    1ba8:	f884 8001 	strb.w	r8, [r4, #1]
    1bac:	e092      	b.n	1cd4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2c8>
    1bae:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1bb0:	7841      	ldrb	r1, [r0, #1]
    1bb2:	8161      	strh	r1, [r4, #10]
    1bb4:	b121      	cbz	r1, 1bc0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1b4>
    1bb6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1bb8:	f00b ffe7 	bl	db8a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    1bbc:	62a0      	str	r0, [r4, #40]	; 0x28
    1bbe:	e000      	b.n	1bc2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1b6>
    1bc0:	62a5      	str	r5, [r4, #40]	; 0x28
    1bc2:	89e0      	ldrh	r0, [r4, #14]
    1bc4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1bc8:	81e0      	strh	r0, [r4, #14]
    1bca:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1bcc:	7df1      	ldrb	r1, [r6, #23]
    1bce:	7800      	ldrb	r0, [r0, #0]
    1bd0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1bd4:	4288      	cmp	r0, r1
    1bd6:	d007      	beq.n	1be8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1dc>
    1bd8:	a803      	add	r0, sp, #12
    1bda:	f000 f985 	bl	1ee8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19c>
    1bde:	89e0      	ldrh	r0, [r4, #14]
    1be0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    1be4:	81e0      	strh	r0, [r4, #14]
    1be6:	e000      	b.n	1bea <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1de>
    1be8:	2701      	movs	r7, #1
    1bea:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1bec:	7e31      	ldrb	r1, [r6, #24]
    1bee:	7800      	ldrb	r0, [r0, #0]
    1bf0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1bf4:	4288      	cmp	r0, r1
    1bf6:	d10d      	bne.n	1c14 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x208>
    1bf8:	a802      	add	r0, sp, #8
    1bfa:	f000 f92b 	bl	1e54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x108>
    1bfe:	e009      	b.n	1c14 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x208>
    1c00:	b108      	cbz	r0, 1c06 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1fa>
    1c02:	f006 f8db 	bl	7dbc <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    1c06:	78a0      	ldrb	r0, [r4, #2]
    1c08:	1c40      	adds	r0, r0, #1
    1c0a:	70a0      	strb	r0, [r4, #2]
    1c0c:	89e0      	ldrh	r0, [r4, #14]
    1c0e:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    1c12:	81e0      	strh	r0, [r4, #14]
    1c14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1cdc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d0>
    1c18:	f896 0022 	ldrb.w	r0, [r6, #34]	; 0x22
    1c1c:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    1c20:	b198      	cbz	r0, 1c4a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x23e>
    1c22:	f7ff ff2f 	bl	1a84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1c26:	492e      	ldr	r1, [pc, #184]	; (1ce0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d4>)
    1c28:	f881 8018 	strb.w	r8, [r1, #24]
    1c2c:	e9d6 231e 	ldrd	r2, r3, [r6, #120]	; 0x78
    1c30:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1c34:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    1c38:	f00c f988 	bl	df4c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x4>
    1c3c:	4603      	mov	r3, r0
    1c3e:	22fb      	movs	r2, #251	; 0xfb
    1c40:	4927      	ldr	r1, [pc, #156]	; (1ce0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d4>)
    1c42:	4628      	mov	r0, r5
    1c44:	9500      	str	r5, [sp, #0]
    1c46:	f005 fff1 	bl	7c2c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1c4a:	f04f 0800 	mov.w	r8, #0
    1c4e:	f1bb 0f00 	cmp.w	fp, #0
    1c52:	d104      	bne.n	1c5e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x252>
    1c54:	78a1      	ldrb	r1, [r4, #2]
    1c56:	2001      	movs	r0, #1
    1c58:	f7ff ff26 	bl	1aa8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x9c>
    1c5c:	b120      	cbz	r0, 1c68 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x25c>
    1c5e:	f006 fc29 	bl	84b4 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    1c62:	f04f 0801 	mov.w	r8, #1
    1c66:	e002      	b.n	1c6e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x262>
    1c68:	2000      	movs	r0, #0
    1c6a:	f000 f9bf 	bl	1fec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a0>
    1c6e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1c72:	b118      	cbz	r0, 1c7c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x270>
    1c74:	a901      	add	r1, sp, #4
    1c76:	2002      	movs	r0, #2
    1c78:	f7ff fe7c 	bl	1974 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    1c7c:	4818      	ldr	r0, [pc, #96]	; (1ce0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d4>)
    1c7e:	304a      	adds	r0, #74	; 0x4a
    1c80:	b117      	cbz	r7, 1c88 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x27c>
    1c82:	8942      	ldrh	r2, [r0, #10]
    1c84:	1c52      	adds	r2, r2, #1
    1c86:	8142      	strh	r2, [r0, #10]
    1c88:	f1b9 0f00 	cmp.w	r9, #0
    1c8c:	d004      	beq.n	1c98 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x28c>
    1c8e:	88c1      	ldrh	r1, [r0, #6]
    1c90:	1c49      	adds	r1, r1, #1
    1c92:	80c1      	strh	r1, [r0, #6]
    1c94:	70a5      	strb	r5, [r4, #2]
    1c96:	e002      	b.n	1c9e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x292>
    1c98:	8901      	ldrh	r1, [r0, #8]
    1c9a:	1c49      	adds	r1, r1, #1
    1c9c:	8101      	strh	r1, [r0, #8]
    1c9e:	480f      	ldr	r0, [pc, #60]	; (1cdc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d0>)
    1ca0:	303c      	adds	r0, #60	; 0x3c
    1ca2:	f001 fa89 	bl	31b8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    1ca6:	9803      	ldr	r0, [sp, #12]
    1ca8:	b140      	cbz	r0, 1cbc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2b0>
    1caa:	f00b fe35 	bl	d918 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1cae:	f8da 1004 	ldr.w	r1, [sl, #4]
    1cb2:	1c40      	adds	r0, r0, #1
    1cb4:	7205      	strb	r5, [r0, #8]
    1cb6:	2208      	movs	r2, #8
    1cb8:	f00c fd0b 	bl	e6d2 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1cbc:	9801      	ldr	r0, [sp, #4]
    1cbe:	b130      	cbz	r0, 1cce <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2c2>
    1cc0:	f8da 1004 	ldr.w	r1, [sl, #4]
    1cc4:	7205      	strb	r5, [r0, #8]
    1cc6:	2210      	movs	r2, #16
    1cc8:	9801      	ldr	r0, [sp, #4]
    1cca:	f00c fd02 	bl	e6d2 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1cce:	f1b8 0f00 	cmp.w	r8, #0
    1cd2:	d001      	beq.n	1cd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2cc>
    1cd4:	f000 f864 	bl	1da0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>
    1cd8:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1cdc:	20000080 	.word	0x20000080
    1ce0:	20000ad8 	.word	0x20000ad8
    1ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1ce8:	4688      	mov	r8, r1
    1cea:	4681      	mov	r9, r0
    1cec:	f7ff fed0 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1cf0:	4d29      	ldr	r5, [pc, #164]	; (1d98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>)
    1cf2:	4604      	mov	r4, r0
    1cf4:	7828      	ldrb	r0, [r5, #0]
    1cf6:	2801      	cmp	r0, #1
    1cf8:	d004      	beq.n	1d04 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>
    1cfa:	f240 416b 	movw	r1, #1131	; 0x46b
    1cfe:	2027      	movs	r0, #39	; 0x27
    1d00:	f7fe fe8c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1d04:	7c20      	ldrb	r0, [r4, #16]
    1d06:	2600      	movs	r6, #0
    1d08:	2701      	movs	r7, #1
    1d0a:	b120      	cbz	r0, 1d16 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x30a>
    1d0c:	7426      	strb	r6, [r4, #16]
    1d0e:	2100      	movs	r1, #0
    1d10:	2004      	movs	r0, #4
    1d12:	f7ff feaf 	bl	1a74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>
    1d16:	6a29      	ldr	r1, [r5, #32]
    1d18:	7808      	ldrb	r0, [r1, #0]
    1d1a:	43c0      	mvns	r0, r0
    1d1c:	0780      	lsls	r0, r0, #30
    1d1e:	d109      	bne.n	1d34 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x328>
    1d20:	7da0      	ldrb	r0, [r4, #22]
    1d22:	bb88      	cbnz	r0, 1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1d24:	2002      	movs	r0, #2
    1d26:	f7ff fea5 	bl	1a74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>
    1d2a:	6a28      	ldr	r0, [r5, #32]
    1d2c:	7800      	ldrb	r0, [r0, #0]
    1d2e:	43c0      	mvns	r0, r0
    1d30:	0780      	lsls	r0, r0, #30
    1d32:	d029      	beq.n	1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1d34:	6a28      	ldr	r0, [r5, #32]
    1d36:	7840      	ldrb	r0, [r0, #1]
    1d38:	b110      	cbz	r0, 1d40 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x334>
    1d3a:	2002      	movs	r0, #2
    1d3c:	75a0      	strb	r0, [r4, #22]
    1d3e:	e000      	b.n	1d42 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x336>
    1d40:	75a7      	strb	r7, [r4, #22]
    1d42:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    1d46:	b198      	cbz	r0, 1d70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24>
    1d48:	f7ff fe9c 	bl	1a84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1d4c:	4913      	ldr	r1, [pc, #76]	; (1d9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>)
    1d4e:	7a2d      	ldrb	r5, [r5, #8]
    1d50:	760e      	strb	r6, [r1, #24]
    1d52:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    1d56:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1d5a:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    1d5e:	f00c f8f5 	bl	df4c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x4>
    1d62:	4603      	mov	r3, r0
    1d64:	462a      	mov	r2, r5
    1d66:	490d      	ldr	r1, [pc, #52]	; (1d9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>)
    1d68:	4638      	mov	r0, r7
    1d6a:	9600      	str	r6, [sp, #0]
    1d6c:	f005 ff5e 	bl	7c2c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1d70:	ea38 0009 	bics.w	r0, r8, r9
    1d74:	d004      	beq.n	1d80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>
    1d76:	2100      	movs	r1, #0
    1d78:	4608      	mov	r0, r1
    1d7a:	f7ff fe95 	bl	1aa8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x9c>
    1d7e:	b128      	cbz	r0, 1d8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40>
    1d80:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1d84:	f000 b80c 	b.w	1da0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>
    1d88:	2003      	movs	r0, #3
    1d8a:	e7d7      	b.n	1d3c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x330>
    1d8c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1d90:	2000      	movs	r0, #0
    1d92:	f000 b8ef 	b.w	1f74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x228>
    1d96:	0000      	.short	0x0000
    1d98:	20000080 	.word	0x20000080
    1d9c:	20000ad8 	.word	0x20000ad8
    1da0:	b510      	push	{r4, lr}
    1da2:	f006 f8b1 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1da6:	f005 ffd5 	bl	7d54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1daa:	4c0d      	ldr	r4, [pc, #52]	; (1de0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>)
    1dac:	89e0      	ldrh	r0, [r4, #14]
    1dae:	f7ff fe75 	bl	1a9c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x90>
    1db2:	480c      	ldr	r0, [pc, #48]	; (1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>)
    1db4:	7f00      	ldrb	r0, [r0, #28]
    1db6:	b158      	cbz	r0, 1dd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>
    1db8:	490a      	ldr	r1, [pc, #40]	; (1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>)
    1dba:	220e      	movs	r2, #14
    1dbc:	f101 000e 	add.w	r0, r1, #14
    1dc0:	f00f f91d 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1dc4:	4807      	ldr	r0, [pc, #28]	; (1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>)
    1dc6:	2202      	movs	r2, #2
    1dc8:	4907      	ldr	r1, [pc, #28]	; (1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>)
    1dca:	301d      	adds	r0, #29
    1dcc:	f00c fc95 	bl	e6fa <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    1dd0:	69e2      	ldr	r2, [r4, #28]
    1dd2:	7921      	ldrb	r1, [r4, #4]
    1dd4:	7860      	ldrb	r0, [r4, #1]
    1dd6:	4790      	blx	r2
    1dd8:	2000      	movs	r0, #0
    1dda:	7020      	strb	r0, [r4, #0]
    1ddc:	bd10      	pop	{r4, pc}
    1dde:	0000      	.short	0x0000
    1de0:	20000080 	.word	0x20000080
    1de4:	20000b22 	.word	0x20000b22
    1de8:	00001a5d 	.word	0x00001a5d
    1dec:	4808      	ldr	r0, [pc, #32]	; (1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>)
    1dee:	b510      	push	{r4, lr}
    1df0:	7800      	ldrb	r0, [r0, #0]
    1df2:	2802      	cmp	r0, #2
    1df4:	d004      	beq.n	1e00 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb4>
    1df6:	f240 2149 	movw	r1, #585	; 0x249
    1dfa:	2027      	movs	r0, #39	; 0x27
    1dfc:	f7fe fe0e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e00:	4904      	ldr	r1, [pc, #16]	; (1e14 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc8>)
    1e02:	2001      	movs	r0, #1
    1e04:	7308      	strb	r0, [r1, #12]
    1e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e0a:	f7ff bfc9 	b.w	1da0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>
    1e0e:	0000      	.short	0x0000
    1e10:	20000080 	.word	0x20000080
    1e14:	20000b22 	.word	0x20000b22
    1e18:	b430      	push	{r4, r5}
    1e1a:	4604      	mov	r4, r0
    1e1c:	480c      	ldr	r0, [pc, #48]	; (1e50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>)
    1e1e:	7a00      	ldrb	r0, [r0, #8]
    1e20:	b10b      	cbz	r3, 1e26 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xda>
    1e22:	1d00      	adds	r0, r0, #4
    1e24:	b2c0      	uxtb	r0, r0
    1e26:	b93a      	cbnz	r2, 1e38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xec>
    1e28:	28ff      	cmp	r0, #255	; 0xff
    1e2a:	d105      	bne.n	1e38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xec>
    1e2c:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    1e30:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1e34:	429a      	cmp	r2, r3
    1e36:	d009      	beq.n	1e4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>
    1e38:	b121      	cbz	r1, 1e44 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>
    1e3a:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1e3e:	bc30      	pop	{r4, r5}
    1e40:	f006 bb5c 	b.w	84fc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1e44:	20ff      	movs	r0, #255	; 0xff
    1e46:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1e4a:	e7f8      	b.n	1e3e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf2>
    1e4c:	bc30      	pop	{r4, r5}
    1e4e:	4770      	bx	lr
    1e50:	20000080 	.word	0x20000080
    1e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e58:	4607      	mov	r7, r0
    1e5a:	f7ff fe19 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1e5e:	4c21      	ldr	r4, [pc, #132]	; (1ee4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>)
    1e60:	4605      	mov	r5, r0
    1e62:	2601      	movs	r6, #1
    1e64:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1e66:	7808      	ldrb	r0, [r1, #0]
    1e68:	f000 0003 	and.w	r0, r0, #3
    1e6c:	2801      	cmp	r0, #1
    1e6e:	d00c      	beq.n	1e8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13e>
    1e70:	2802      	cmp	r0, #2
    1e72:	d00a      	beq.n	1e8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13e>
    1e74:	2803      	cmp	r0, #3
    1e76:	d11b      	bne.n	1eb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>
    1e78:	742e      	strb	r6, [r5, #16]
    1e7a:	89e0      	ldrh	r0, [r4, #14]
    1e7c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    1e80:	81e0      	strh	r0, [r4, #14]
    1e82:	2001      	movs	r0, #1
    1e84:	f7ff fdf6 	bl	1a74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>
    1e88:	e012      	b.n	1eb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>
    1e8a:	7848      	ldrb	r0, [r1, #1]
    1e8c:	b180      	cbz	r0, 1eb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>
    1e8e:	89e1      	ldrh	r1, [r4, #14]
    1e90:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    1e94:	81e1      	strh	r1, [r4, #14]
    1e96:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1e98:	2900      	cmp	r1, #0
    1e9a:	d018      	beq.n	1ece <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x182>
    1e9c:	28fb      	cmp	r0, #251	; 0xfb
    1e9e:	d818      	bhi.n	1ed2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x186>
    1ea0:	7960      	ldrb	r0, [r4, #5]
    1ea2:	b120      	cbz	r0, 1eae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x162>
    1ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1ea8:	2020      	movs	r0, #32
    1eaa:	f7ff bdf7 	b.w	1a9c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x90>
    1eae:	703e      	strb	r6, [r7, #0]
    1eb0:	7e28      	ldrb	r0, [r5, #24]
    1eb2:	2801      	cmp	r0, #1
    1eb4:	d012      	beq.n	1edc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x190>
    1eb6:	762e      	strb	r6, [r5, #24]
    1eb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1eba:	7840      	ldrb	r0, [r0, #1]
    1ebc:	2800      	cmp	r0, #0
    1ebe:	d006      	beq.n	1ece <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x182>
    1ec0:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    1ec4:	1c40      	adds	r0, r0, #1
    1ec6:	f141 0100 	adc.w	r1, r1, #0
    1eca:	e9c5 0100 	strd	r0, r1, [r5]
    1ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1ed2:	7920      	ldrb	r0, [r4, #4]
    1ed4:	f040 0010 	orr.w	r0, r0, #16
    1ed8:	7120      	strb	r0, [r4, #4]
    1eda:	e7f8      	b.n	1ece <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x182>
    1edc:	2000      	movs	r0, #0
    1ede:	7628      	strb	r0, [r5, #24]
    1ee0:	e7ea      	b.n	1eb8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16c>
    1ee2:	0000      	.short	0x0000
    1ee4:	20000080 	.word	0x20000080
    1ee8:	b570      	push	{r4, r5, r6, lr}
    1eea:	4605      	mov	r5, r0
    1eec:	f7ff fdd0 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1ef0:	4604      	mov	r4, r0
    1ef2:	7d80      	ldrb	r0, [r0, #22]
    1ef4:	2800      	cmp	r0, #0
    1ef6:	d026      	beq.n	1f46 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1fa>
    1ef8:	2802      	cmp	r0, #2
    1efa:	d10c      	bne.n	1f16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ca>
    1efc:	4817      	ldr	r0, [pc, #92]	; (1f5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x210>)
    1efe:	4629      	mov	r1, r5
    1f00:	6b40      	ldr	r0, [r0, #52]	; 0x34
    1f02:	f00b fc98 	bl	d836 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    1f06:	b1f8      	cbz	r0, 1f48 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1fc>
    1f08:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1f0c:	1c40      	adds	r0, r0, #1
    1f0e:	f141 0100 	adc.w	r1, r1, #0
    1f12:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1f16:	2500      	movs	r5, #0
    1f18:	75a5      	strb	r5, [r4, #22]
    1f1a:	7c60      	ldrb	r0, [r4, #17]
    1f1c:	2601      	movs	r6, #1
    1f1e:	b170      	cbz	r0, 1f3e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f2>
    1f20:	7465      	strb	r5, [r4, #17]
    1f22:	f7ff fb7d 	bl	1620 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    1f26:	b190      	cbz	r0, 1f4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x202>
    1f28:	2100      	movs	r1, #0
    1f2a:	2008      	movs	r0, #8
    1f2c:	f7ff fda2 	bl	1a74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>
    1f30:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1f34:	1c40      	adds	r0, r0, #1
    1f36:	f141 0100 	adc.w	r1, r1, #0
    1f3a:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1f3e:	7de0      	ldrb	r0, [r4, #23]
    1f40:	2801      	cmp	r0, #1
    1f42:	d009      	beq.n	1f58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20c>
    1f44:	75e6      	strb	r6, [r4, #23]
    1f46:	bd70      	pop	{r4, r5, r6, pc}
    1f48:	f240 31da 	movw	r1, #986	; 0x3da
    1f4c:	e001      	b.n	1f52 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x206>
    1f4e:	f240 31f1 	movw	r1, #1009	; 0x3f1
    1f52:	2027      	movs	r0, #39	; 0x27
    1f54:	f7fe fd62 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f58:	75e5      	strb	r5, [r4, #23]
    1f5a:	bd70      	pop	{r4, r5, r6, pc}
    1f5c:	20000080 	.word	0x20000080
    1f60:	4803      	ldr	r0, [pc, #12]	; (1f70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x224>)
    1f62:	7800      	ldrb	r0, [r0, #0]
    1f64:	2800      	cmp	r0, #0
    1f66:	d001      	beq.n	1f6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x220>
    1f68:	f7ff bf1a 	b.w	1da0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>
    1f6c:	4770      	bx	lr
    1f6e:	0000      	.short	0x0000
    1f70:	20000080 	.word	0x20000080
    1f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f78:	4607      	mov	r7, r0
    1f7a:	f7ff fd83 	bl	1a84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1f7e:	4680      	mov	r8, r0
    1f80:	f7ff fd86 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1f84:	4c17      	ldr	r4, [pc, #92]	; (1fe4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>)
    1f86:	4605      	mov	r5, r0
    1f88:	463a      	mov	r2, r7
    1f8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1f8c:	6260      	str	r0, [r4, #36]	; 0x24
    1f8e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1f92:	2101      	movs	r1, #1
    1f94:	4640      	mov	r0, r8
    1f96:	f7ff ff3f 	bl	1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    1f9a:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    1f9e:	2600      	movs	r6, #0
    1fa0:	b168      	cbz	r0, 1fbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x272>
    1fa2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1fa4:	f006 f9e0 	bl	8368 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1fa8:	480f      	ldr	r0, [pc, #60]	; (1fe8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x29c>)
    1faa:	7606      	strb	r6, [r0, #24]
    1fac:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    1fb0:	e9c0 1204 	strd	r1, r2, [r0, #16]
    1fb4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1fb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1fb8:	f005 fe8a 	bl	7cd0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    1fbc:	e004      	b.n	1fc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27c>
    1fbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1fc0:	f006 f9d2 	bl	8368 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1fc4:	f005 fec6 	bl	7d54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1fc8:	b917      	cbnz	r7, 1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>
    1fca:	4630      	mov	r0, r6
    1fcc:	f006 f892 	bl	80f4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    1fd0:	2100      	movs	r1, #0
    1fd2:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    1fd6:	4608      	mov	r0, r1
    1fd8:	f006 fa4e 	bl	8478 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    1fdc:	2002      	movs	r0, #2
    1fde:	7020      	strb	r0, [r4, #0]
    1fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fe4:	20000080 	.word	0x20000080
    1fe8:	20000ad8 	.word	0x20000ad8
    1fec:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1ff0:	4604      	mov	r4, r0
    1ff2:	f7ff fd4d 	bl	1a90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1ff6:	4605      	mov	r5, r0
    1ff8:	f7ff fd44 	bl	1a84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1ffc:	f04f 0800 	mov.w	r8, #0
    2000:	f88d 8000 	strb.w	r8, [sp]
    2004:	4606      	mov	r6, r0
    2006:	f8df 9164 	ldr.w	r9, [pc, #356]	; 216c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16c>
    200a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    200e:	4622      	mov	r2, r4
    2010:	4641      	mov	r1, r8
    2012:	f7ff ff01 	bl	1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    2016:	7da8      	ldrb	r0, [r5, #22]
    2018:	2701      	movs	r7, #1
    201a:	f1a9 0420 	sub.w	r4, r9, #32
    201e:	b140      	cbz	r0, 2032 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x32>
    2020:	2801      	cmp	r0, #1
    2022:	d01f      	beq.n	2064 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x64>
    2024:	2802      	cmp	r0, #2
    2026:	d030      	beq.n	208a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8a>
    2028:	2803      	cmp	r0, #3
    202a:	d03c      	beq.n	20a6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa6>
    202c:	f240 21fb 	movw	r1, #763	; 0x2fb
    2030:	e058      	b.n	20e4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe4>
    2032:	79a0      	ldrb	r0, [r4, #6]
    2034:	2150      	movs	r1, #80	; 0x50
    2036:	f8ad 0004 	strh.w	r0, [sp, #4]
    203a:	5388      	strh	r0, [r1, r6]
    203c:	4648      	mov	r0, r9
    203e:	f7ff fb19 	bl	1674 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    2042:	b128      	cbz	r0, 2050 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x50>
    2044:	2080      	movs	r0, #128	; 0x80
    2046:	6a21      	ldr	r1, [r4, #32]
    2048:	f7ff fd14 	bl	1a74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>
    204c:	746f      	strb	r7, [r5, #17]
    204e:	e02e      	b.n	20ae <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xae>
    2050:	466a      	mov	r2, sp
    2052:	a901      	add	r1, sp, #4
    2054:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2056:	f00b ff91 	bl	df7c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x34>
    205a:	6220      	str	r0, [r4, #32]
    205c:	b110      	cbz	r0, 2064 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x64>
    205e:	f895 105d 	ldrb.w	r1, [r5, #93]	; 0x5d
    2062:	b111      	cbz	r1, 206a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6a>
    2064:	4842      	ldr	r0, [pc, #264]	; (2170 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x170>)
    2066:	6220      	str	r0, [r4, #32]
    2068:	e021      	b.n	20ae <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xae>
    206a:	f89d 1000 	ldrb.w	r1, [sp]
    206e:	b931      	cbnz	r1, 207e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7e>
    2070:	f8a0 8000 	strh.w	r8, [r0]
    2074:	f880 8002 	strb.w	r8, [r0, #2]
    2078:	2101      	movs	r1, #1
    207a:	f00c faee 	bl	e65a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    207e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2082:	6a20      	ldr	r0, [r4, #32]
    2084:	f00c fa83 	bl	e58e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    2088:	e011      	b.n	20ae <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xae>
    208a:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    208e:	f8ad 0004 	strh.w	r0, [sp, #4]
    2092:	466a      	mov	r2, sp
    2094:	a901      	add	r1, sp, #4
    2096:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2098:	f00b ff70 	bl	df7c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x34>
    209c:	6220      	str	r0, [r4, #32]
    209e:	b930      	cbnz	r0, 20ae <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xae>
    20a0:	f240 21e5 	movw	r1, #741	; 0x2e5
    20a4:	e01e      	b.n	20e4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe4>
    20a6:	4648      	mov	r0, r9
    20a8:	f7ff fae4 	bl	1674 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    20ac:	b1c0      	cbz	r0, 20e0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe0>
    20ae:	6a20      	ldr	r0, [r4, #32]
    20b0:	2308      	movs	r3, #8
    20b2:	7801      	ldrb	r1, [r0, #0]
    20b4:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    20b8:	7001      	strb	r1, [r0, #0]
    20ba:	7dea      	ldrb	r2, [r5, #23]
    20bc:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    20c0:	4311      	orrs	r1, r2
    20c2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    20c6:	7001      	strb	r1, [r0, #0]
    20c8:	7e2a      	ldrb	r2, [r5, #24]
    20ca:	2304      	movs	r3, #4
    20cc:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    20d0:	4311      	orrs	r1, r2
    20d2:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    20d6:	7001      	strb	r1, [r0, #0]
    20d8:	43c9      	mvns	r1, r1
    20da:	0789      	lsls	r1, r1, #30
    20dc:	d005      	beq.n	20ea <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xea>
    20de:	e007      	b.n	20f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf0>
    20e0:	f240 21ee 	movw	r1, #750	; 0x2ee
    20e4:	2027      	movs	r0, #39	; 0x27
    20e6:	f7fe fc99 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20ea:	78c0      	ldrb	r0, [r0, #3]
    20ec:	2802      	cmp	r0, #2
    20ee:	d00f      	beq.n	2110 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x110>
    20f0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    20f2:	f00b fcb7 	bl	da64 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    20f6:	b108      	cbz	r0, 20fc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xfc>
    20f8:	2101      	movs	r1, #1
    20fa:	e00a      	b.n	2112 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x112>
    20fc:	6a20      	ldr	r0, [r4, #32]
    20fe:	7800      	ldrb	r0, [r0, #0]
    2100:	43c0      	mvns	r0, r0
    2102:	0780      	lsls	r0, r0, #30
    2104:	d004      	beq.n	2110 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x110>
    2106:	f7ff fa73 	bl	15f0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    210a:	f080 0101 	eor.w	r1, r0, #1
    210e:	e000      	b.n	2112 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x112>
    2110:	2100      	movs	r1, #0
    2112:	6a20      	ldr	r0, [r4, #32]
    2114:	7802      	ldrb	r2, [r0, #0]
    2116:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    211a:	7001      	strb	r1, [r0, #0]
    211c:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    2120:	b181      	cbz	r1, 2144 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x144>
    2122:	7841      	ldrb	r1, [r0, #1]
    2124:	b171      	cbz	r1, 2144 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x144>
    2126:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2128:	f006 f91e 	bl	8368 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    212c:	4810      	ldr	r0, [pc, #64]	; (2170 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x170>)
    212e:	3828      	subs	r0, #40	; 0x28
    2130:	7607      	strb	r7, [r0, #24]
    2132:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    2136:	e9c0 1204 	strd	r1, r2, [r0, #16]
    213a:	6a21      	ldr	r1, [r4, #32]
    213c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    213e:	f005 fdc7 	bl	7cd0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2142:	e003      	b.n	214c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14c>
    2144:	f006 f910 	bl	8368 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2148:	f005 fe04 	bl	7d54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    214c:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    2150:	2101      	movs	r1, #1
    2152:	2000      	movs	r0, #0
    2154:	f006 f990 	bl	8478 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2158:	70e7      	strb	r7, [r4, #3]
    215a:	6a20      	ldr	r0, [r4, #32]
    215c:	8801      	ldrh	r1, [r0, #0]
    215e:	8221      	strh	r1, [r4, #16]
    2160:	7880      	ldrb	r0, [r0, #2]
    2162:	74a0      	strb	r0, [r4, #18]
    2164:	7027      	strb	r7, [r4, #0]
    2166:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    216a:	0000      	.short	0x0000
    216c:	200000a0 	.word	0x200000a0
    2170:	20000b00 	.word	0x20000b00
    2174:	00001ded 	.word	0x00001ded
    2178:	00001b3d 	.word	0x00001b3d
    217c:	00001ce5 	.word	0x00001ce5
    2180:	00001f61 	.word	0x00001f61

00002184 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    2184:	4800      	ldr	r0, [pc, #0]	; (2188 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    2186:	4770      	bx	lr
    2188:	200015c4 	.word	0x200015c4

0000218c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    218c:	4904      	ldr	r1, [pc, #16]	; (21a0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    218e:	784a      	ldrb	r2, [r1, #1]
    2190:	4282      	cmp	r2, r0
    2192:	d903      	bls.n	219c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2194:	4408      	add	r0, r1
    2196:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    219a:	4770      	bx	lr
    219c:	2000      	movs	r0, #0
    219e:	4770      	bx	lr
    21a0:	2000143a 	.word	0x2000143a

000021a4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    21a4:	4904      	ldr	r1, [pc, #16]	; (21b8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    21a6:	784a      	ldrb	r2, [r1, #1]
    21a8:	4282      	cmp	r2, r0
    21aa:	d903      	bls.n	21b4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    21ac:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    21b0:	3082      	adds	r0, #130	; 0x82
    21b2:	4770      	bx	lr
    21b4:	2000      	movs	r0, #0
    21b6:	4770      	bx	lr
    21b8:	2000143a 	.word	0x2000143a

000021bc <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    21bc:	4a05      	ldr	r2, [pc, #20]	; (21d4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    21be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    21c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    21c6:	6802      	ldr	r2, [r0, #0]
    21c8:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
    21cc:	8880      	ldrh	r0, [r0, #4]
    21ce:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
    21d2:	4770      	bx	lr
    21d4:	2000143a 	.word	0x2000143a

000021d8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    21d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21dc:	4607      	mov	r7, r0
    21de:	2400      	movs	r4, #0
    21e0:	4d10      	ldr	r5, [pc, #64]	; (2224 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    21e2:	e019      	b.n	2218 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    21e4:	4620      	mov	r0, r4
    21e6:	f7ff ffdd 	bl	21a4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    21ea:	0003      	movs	r3, r0
    21ec:	d012      	beq.n	2214 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    21ee:	1928      	adds	r0, r5, r4
    21f0:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    21f4:	b970      	cbnz	r0, 2214 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    21f6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    21fa:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    21fe:	f506 7685 	add.w	r6, r6, #266	; 0x10a
    2202:	463a      	mov	r2, r7
    2204:	4631      	mov	r1, r6
    2206:	4618      	mov	r0, r3
    2208:	f00b fe3b 	bl	de82 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    220c:	4630      	mov	r0, r6
    220e:	4621      	mov	r1, r4
    2210:	f7ff ffd4 	bl	21bc <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    2214:	1c64      	adds	r4, r4, #1
    2216:	b2e4      	uxtb	r4, r4
    2218:	7868      	ldrb	r0, [r5, #1]
    221a:	42a0      	cmp	r0, r4
    221c:	d8e2      	bhi.n	21e4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    221e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2222:	0000      	.short	0x0000
    2224:	2000143a 	.word	0x2000143a

00002228 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    2228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    222c:	460e      	mov	r6, r1
    222e:	4607      	mov	r7, r0
    2230:	4615      	mov	r5, r2
    2232:	2106      	movs	r1, #6
    2234:	4630      	mov	r0, r6
    2236:	f00c f893 	bl	e360 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    223a:	4c0d      	ldr	r4, [pc, #52]	; (2270 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    223c:	b160      	cbz	r0, 2258 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    223e:	2000      	movs	r0, #0
    2240:	e004      	b.n	224c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    2242:	1821      	adds	r1, r4, r0
    2244:	1c40      	adds	r0, r0, #1
    2246:	f881 513a 	strb.w	r5, [r1, #314]	; 0x13a
    224a:	b2c0      	uxtb	r0, r0
    224c:	7861      	ldrb	r1, [r4, #1]
    224e:	4281      	cmp	r1, r0
    2250:	d8f7      	bhi.n	2242 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    2252:	2001      	movs	r0, #1
    2254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2258:	4631      	mov	r1, r6
    225a:	4638      	mov	r0, r7
    225c:	f00b fe9d 	bl	df9a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    2260:	2808      	cmp	r0, #8
    2262:	d003      	beq.n	226c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    2264:	4420      	add	r0, r4
    2266:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    226a:	e7f2      	b.n	2252 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    226c:	2000      	movs	r0, #0
    226e:	e7f1      	b.n	2254 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    2270:	2000143a 	.word	0x2000143a

00002274 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    2274:	4904      	ldr	r1, [pc, #16]	; (2288 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    2276:	784a      	ldrb	r2, [r1, #1]
    2278:	4282      	cmp	r2, r0
    227a:	d903      	bls.n	2284 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    227c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2280:	1c80      	adds	r0, r0, #2
    2282:	4770      	bx	lr
    2284:	2000      	movs	r0, #0
    2286:	4770      	bx	lr
    2288:	2000143a 	.word	0x2000143a

0000228c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    228c:	4908      	ldr	r1, [pc, #32]	; (22b0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    228e:	784a      	ldrb	r2, [r1, #1]
    2290:	4282      	cmp	r2, r0
    2292:	d903      	bls.n	229c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    2294:	180a      	adds	r2, r1, r0
    2296:	f892 2142 	ldrb.w	r2, [r2, #322]	; 0x142
    229a:	b10a      	cbz	r2, 22a0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    229c:	2000      	movs	r0, #0
    229e:	4770      	bx	lr
    22a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    22a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    22a8:	f500 7085 	add.w	r0, r0, #266	; 0x10a
    22ac:	4770      	bx	lr
    22ae:	0000      	.short	0x0000
    22b0:	2000143a 	.word	0x2000143a

000022b4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    22b4:	b510      	push	{r4, lr}
    22b6:	f44f 72c5 	mov.w	r2, #394	; 0x18a
    22ba:	2100      	movs	r1, #0
    22bc:	4805      	ldr	r0, [pc, #20]	; (22d4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
    22be:	f00e ff18 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    22c2:	4805      	ldr	r0, [pc, #20]	; (22d8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
    22c4:	2100      	movs	r1, #0
    22c6:	7001      	strb	r1, [r0, #0]
    22c8:	7041      	strb	r1, [r0, #1]
    22ca:	f44f 7161 	mov.w	r1, #900	; 0x384
    22ce:	8041      	strh	r1, [r0, #2]
    22d0:	bd10      	pop	{r4, pc}
    22d2:	0000      	.short	0x0000
    22d4:	2000143a 	.word	0x2000143a
    22d8:	2000034c 	.word	0x2000034c

000022dc <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    22dc:	4901      	ldr	r1, [pc, #4]	; (22e4 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    22de:	7008      	strb	r0, [r1, #0]
    22e0:	4770      	bx	lr
    22e2:	0000      	.short	0x0000
    22e4:	2000034c 	.word	0x2000034c

000022e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    22e8:	4801      	ldr	r0, [pc, #4]	; (22f0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    22ea:	7800      	ldrb	r0, [r0, #0]
    22ec:	4770      	bx	lr
    22ee:	0000      	.short	0x0000
    22f0:	2000034c 	.word	0x2000034c

000022f4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    22f4:	4b0b      	ldr	r3, [pc, #44]	; (2324 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    22f6:	b510      	push	{r4, lr}
    22f8:	785c      	ldrb	r4, [r3, #1]
    22fa:	4284      	cmp	r4, r0
    22fc:	d910      	bls.n	2320 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
    22fe:	4418      	add	r0, r3
    2300:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
    2304:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2308:	4418      	add	r0, r3
    230a:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    230e:	700b      	strb	r3, [r1, #0]
    2310:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
    2314:	6011      	str	r1, [r2, #0]
    2316:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
    231a:	8090      	strh	r0, [r2, #4]
    231c:	2001      	movs	r0, #1
    231e:	bd10      	pop	{r4, pc}
    2320:	2000      	movs	r0, #0
    2322:	bd10      	pop	{r4, pc}
    2324:	2000143a 	.word	0x2000143a

00002328 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    2328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    232c:	4698      	mov	r8, r3
    232e:	4691      	mov	r9, r2
    2330:	460f      	mov	r7, r1
    2332:	4606      	mov	r6, r0
    2334:	f000 f8cc 	bl	24d0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    2338:	4604      	mov	r4, r0
    233a:	2808      	cmp	r0, #8
    233c:	d006      	beq.n	234c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    233e:	f000 f8b3 	bl	24a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    2342:	2808      	cmp	r0, #8
    2344:	d002      	beq.n	234c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    2346:	2012      	movs	r0, #18
    2348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    234c:	4d1f      	ldr	r5, [pc, #124]	; (23cc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xa4>)
    234e:	7868      	ldrb	r0, [r5, #1]
    2350:	2808      	cmp	r0, #8
    2352:	d238      	bcs.n	23c6 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x9e>
    2354:	2c08      	cmp	r4, #8
    2356:	d113      	bne.n	2380 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x58>
    2358:	782c      	ldrb	r4, [r5, #0]
    235a:	1c60      	adds	r0, r4, #1
    235c:	7028      	strb	r0, [r5, #0]
    235e:	2c08      	cmp	r4, #8
    2360:	d303      	bcc.n	236a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x42>
    2362:	2144      	movs	r1, #68	; 0x44
    2364:	2028      	movs	r0, #40	; 0x28
    2366:	f7fe fb59 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    236a:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    236e:	4428      	add	r0, r5
    2370:	6839      	ldr	r1, [r7, #0]
    2372:	f8c0 1153 	str.w	r1, [r0, #339]	; 0x153
    2376:	88b9      	ldrh	r1, [r7, #4]
    2378:	f8a0 1157 	strh.w	r1, [r0, #343]	; 0x157
    237c:	f880 6152 	strb.w	r6, [r0, #338]	; 0x152
    2380:	786e      	ldrb	r6, [r5, #1]
    2382:	2210      	movs	r2, #16
    2384:	1c70      	adds	r0, r6, #1
    2386:	7068      	strb	r0, [r5, #1]
    2388:	eb05 1706 	add.w	r7, r5, r6, lsl #4
    238c:	1cb8      	adds	r0, r7, #2
    238e:	4649      	mov	r1, r9
    2390:	f00b ffae 	bl	e2f0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    2394:	f107 0082 	add.w	r0, r7, #130	; 0x82
    2398:	2210      	movs	r2, #16
    239a:	4641      	mov	r1, r8
    239c:	f00b ffa8 	bl	e2f0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    23a0:	2110      	movs	r1, #16
    23a2:	4640      	mov	r0, r8
    23a4:	f00b ffdc 	bl	e360 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    23a8:	4435      	add	r5, r6
    23aa:	2110      	movs	r1, #16
    23ac:	f885 0142 	strb.w	r0, [r5, #322]	; 0x142
    23b0:	4648      	mov	r0, r9
    23b2:	f205 152b 	addw	r5, r5, #299	; 0x12b
    23b6:	f00b ffd3 	bl	e360 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    23ba:	77e8      	strb	r0, [r5, #31]
    23bc:	f805 4c29 	strb.w	r4, [r5, #-41]
    23c0:	2000      	movs	r0, #0
    23c2:	73e8      	strb	r0, [r5, #15]
    23c4:	e7c0      	b.n	2348 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    23c6:	2007      	movs	r0, #7
    23c8:	e7be      	b.n	2348 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    23ca:	0000      	.short	0x0000
    23cc:	2000143a 	.word	0x2000143a

000023d0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    23d0:	4806      	ldr	r0, [pc, #24]	; (23ec <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    23d2:	b510      	push	{r4, lr}
    23d4:	7840      	ldrb	r0, [r0, #1]
    23d6:	1e40      	subs	r0, r0, #1
    23d8:	b244      	sxtb	r4, r0
    23da:	e004      	b.n	23e6 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    23dc:	b2e0      	uxtb	r0, r4
    23de:	f000 f8d9 	bl	2594 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x128>
    23e2:	1e64      	subs	r4, r4, #1
    23e4:	b264      	sxtb	r4, r4
    23e6:	2c00      	cmp	r4, #0
    23e8:	daf8      	bge.n	23dc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    23ea:	bd10      	pop	{r4, pc}
    23ec:	2000143a 	.word	0x2000143a

000023f0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    23f0:	4801      	ldr	r0, [pc, #4]	; (23f8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    23f2:	8840      	ldrh	r0, [r0, #2]
    23f4:	4770      	bx	lr
    23f6:	0000      	.short	0x0000
    23f8:	2000034c 	.word	0x2000034c

000023fc <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    23fc:	b138      	cbz	r0, 240e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    23fe:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    2402:	4288      	cmp	r0, r1
    2404:	d803      	bhi.n	240e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    2406:	4903      	ldr	r1, [pc, #12]	; (2414 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    2408:	8048      	strh	r0, [r1, #2]
    240a:	2001      	movs	r0, #1
    240c:	4770      	bx	lr
    240e:	2000      	movs	r0, #0
    2410:	4770      	bx	lr
    2412:	0000      	.short	0x0000
    2414:	2000034c 	.word	0x2000034c

00002418 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    2418:	b570      	push	{r4, r5, r6, lr}
    241a:	2401      	movs	r4, #1
    241c:	4616      	mov	r6, r2
    241e:	4625      	mov	r5, r4
    2420:	f000 f856 	bl	24d0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    2424:	2808      	cmp	r0, #8
    2426:	d019      	beq.n	245c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x44>
    2428:	f000 f83e 	bl	24a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    242c:	4603      	mov	r3, r0
    242e:	2808      	cmp	r0, #8
    2430:	d014      	beq.n	245c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x44>
    2432:	b106      	cbz	r6, 2436 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x1e>
    2434:	7033      	strb	r3, [r6, #0]
    2436:	4618      	mov	r0, r3
    2438:	f7ff ff1c 	bl	2274 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    243c:	b170      	cbz	r0, 245c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x44>
    243e:	480a      	ldr	r0, [pc, #40]	; (2468 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x50>)
    2440:	7841      	ldrb	r1, [r0, #1]
    2442:	4299      	cmp	r1, r3
    2444:	d903      	bls.n	244e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x36>
    2446:	18c1      	adds	r1, r0, r3
    2448:	f891 514a 	ldrb.w	r5, [r1, #330]	; 0x14a
    244c:	e000      	b.n	2450 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    244e:	2500      	movs	r5, #0
    2450:	4418      	add	r0, r3
    2452:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    2456:	2801      	cmp	r0, #1
    2458:	d003      	beq.n	2462 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x4a>
    245a:	2400      	movs	r4, #0
    245c:	ea44 0005 	orr.w	r0, r4, r5
    2460:	bd70      	pop	{r4, r5, r6, pc}
    2462:	2401      	movs	r4, #1
    2464:	e7fa      	b.n	245c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x44>
    2466:	0000      	.short	0x0000
    2468:	2000143a 	.word	0x2000143a

0000246c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    246c:	4901      	ldr	r1, [pc, #4]	; (2474 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    246e:	7048      	strb	r0, [r1, #1]
    2470:	4770      	bx	lr
    2472:	0000      	.short	0x0000
    2474:	2000034c 	.word	0x2000034c
    2478:	4602      	mov	r2, r0
    247a:	4809      	ldr	r0, [pc, #36]	; (24a0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    247c:	b510      	push	{r4, lr}
    247e:	7800      	ldrb	r0, [r0, #0]
    2480:	460b      	mov	r3, r1
    2482:	b158      	cbz	r0, 249c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    2484:	4807      	ldr	r0, [pc, #28]	; (24a4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    2486:	7841      	ldrb	r1, [r0, #1]
    2488:	b141      	cbz	r1, 249c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    248a:	b10b      	cbz	r3, 2490 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    248c:	1c80      	adds	r0, r0, #2
    248e:	e001      	b.n	2494 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    2490:	4804      	ldr	r0, [pc, #16]	; (24a4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    2492:	3082      	adds	r0, #130	; 0x82
    2494:	f005 fb24 	bl	7ae0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    2498:	2001      	movs	r0, #1
    249a:	bd10      	pop	{r4, pc}
    249c:	2000      	movs	r0, #0
    249e:	bd10      	pop	{r4, pc}
    24a0:	2000034c 	.word	0x2000034c
    24a4:	2000143a 	.word	0x2000143a
    24a8:	4908      	ldr	r1, [pc, #32]	; (24cc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    24aa:	b510      	push	{r4, lr}
    24ac:	4603      	mov	r3, r0
    24ae:	2000      	movs	r0, #0
    24b0:	784a      	ldrb	r2, [r1, #1]
    24b2:	e006      	b.n	24c2 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    24b4:	180c      	adds	r4, r1, r0
    24b6:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    24ba:	429c      	cmp	r4, r3
    24bc:	d004      	beq.n	24c8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    24be:	1c40      	adds	r0, r0, #1
    24c0:	b2c0      	uxtb	r0, r0
    24c2:	4282      	cmp	r2, r0
    24c4:	d8f6      	bhi.n	24b4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    24c6:	2008      	movs	r0, #8
    24c8:	bd10      	pop	{r4, pc}
    24ca:	0000      	.short	0x0000
    24cc:	2000143a 	.word	0x2000143a
    24d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24d2:	4c1a      	ldr	r4, [pc, #104]	; (253c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    24d4:	4603      	mov	r3, r0
    24d6:	2000      	movs	r0, #0
    24d8:	7825      	ldrb	r5, [r4, #0]
    24da:	e02b      	b.n	2534 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    24dc:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    24e0:	4422      	add	r2, r4
    24e2:	780f      	ldrb	r7, [r1, #0]
    24e4:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    24e8:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    24ec:	ea87 070c 	eor.w	r7, r7, ip
    24f0:	405e      	eors	r6, r3
    24f2:	443e      	add	r6, r7
    24f4:	784f      	ldrb	r7, [r1, #1]
    24f6:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    24fa:	ea87 070c 	eor.w	r7, r7, ip
    24fe:	443e      	add	r6, r7
    2500:	788f      	ldrb	r7, [r1, #2]
    2502:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    2506:	ea87 070c 	eor.w	r7, r7, ip
    250a:	443e      	add	r6, r7
    250c:	78cf      	ldrb	r7, [r1, #3]
    250e:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    2512:	ea87 070c 	eor.w	r7, r7, ip
    2516:	443e      	add	r6, r7
    2518:	790f      	ldrb	r7, [r1, #4]
    251a:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    251e:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    2522:	ea87 070c 	eor.w	r7, r7, ip
    2526:	443e      	add	r6, r7
    2528:	794f      	ldrb	r7, [r1, #5]
    252a:	4057      	eors	r7, r2
    252c:	42f7      	cmn	r7, r6
    252e:	d004      	beq.n	253a <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    2530:	1c40      	adds	r0, r0, #1
    2532:	b2c0      	uxtb	r0, r0
    2534:	4285      	cmp	r5, r0
    2536:	d8d1      	bhi.n	24dc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    2538:	2008      	movs	r0, #8
    253a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    253c:	2000143a 	.word	0x2000143a
    2540:	b570      	push	{r4, r5, r6, lr}
    2542:	4605      	mov	r5, r0
    2544:	f7ff ffb0 	bl	24a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    2548:	2808      	cmp	r0, #8
    254a:	d120      	bne.n	258e <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    254c:	4c10      	ldr	r4, [pc, #64]	; (2590 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x124>)
    254e:	7820      	ldrb	r0, [r4, #0]
    2550:	1e40      	subs	r0, r0, #1
    2552:	b2c0      	uxtb	r0, r0
    2554:	7020      	strb	r0, [r4, #0]
    2556:	42a8      	cmp	r0, r5
    2558:	d019      	beq.n	258e <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    255a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    255e:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
    2562:	4420      	add	r0, r4
    2564:	4421      	add	r1, r4
    2566:	f500 72ab 	add.w	r2, r0, #342	; 0x156
    256a:	f8d0 0152 	ldr.w	r0, [r0, #338]	; 0x152
    256e:	f8c1 0152 	str.w	r0, [r1, #338]	; 0x152
    2572:	8810      	ldrh	r0, [r2, #0]
    2574:	f8a1 0156 	strh.w	r0, [r1, #342]	; 0x156
    2578:	7890      	ldrb	r0, [r2, #2]
    257a:	f881 0158 	strb.w	r0, [r1, #344]	; 0x158
    257e:	7820      	ldrb	r0, [r4, #0]
    2580:	f7ff ff92 	bl	24a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    2584:	2808      	cmp	r0, #8
    2586:	d002      	beq.n	258e <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    2588:	4420      	add	r0, r4
    258a:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
    258e:	bd70      	pop	{r4, r5, r6, pc}
    2590:	2000143a 	.word	0x2000143a
    2594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2598:	4c1d      	ldr	r4, [pc, #116]	; (2610 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x1a4>)
    259a:	4606      	mov	r6, r0
    259c:	19a7      	adds	r7, r4, r6
    259e:	7860      	ldrb	r0, [r4, #1]
    25a0:	1e40      	subs	r0, r0, #1
    25a2:	b2c5      	uxtb	r5, r0
    25a4:	7065      	strb	r5, [r4, #1]
    25a6:	f897 a102 	ldrb.w	sl, [r7, #258]	; 0x102
    25aa:	42ae      	cmp	r6, r5
    25ac:	d02a      	beq.n	2604 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x198>
    25ae:	eb04 1905 	add.w	r9, r4, r5, lsl #4
    25b2:	eb04 1806 	add.w	r8, r4, r6, lsl #4
    25b6:	f109 0102 	add.w	r1, r9, #2
    25ba:	f108 0002 	add.w	r0, r8, #2
    25be:	2210      	movs	r2, #16
    25c0:	f00e fd1d 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    25c4:	f109 0182 	add.w	r1, r9, #130	; 0x82
    25c8:	f108 0082 	add.w	r0, r8, #130	; 0x82
    25cc:	2210      	movs	r2, #16
    25ce:	f00e fd16 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    25d2:	1960      	adds	r0, r4, r5
    25d4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    25d8:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    25dc:	f887 1102 	strb.w	r1, [r7, #258]	; 0x102
    25e0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    25e4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    25e8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    25ec:	f8d2 310a 	ldr.w	r3, [r2, #266]	; 0x10a
    25f0:	f8c1 310a 	str.w	r3, [r1, #266]	; 0x10a
    25f4:	f8b2 210e 	ldrh.w	r2, [r2, #270]	; 0x10e
    25f8:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    25fc:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    2600:	f887 013a 	strb.w	r0, [r7, #314]	; 0x13a
    2604:	4650      	mov	r0, sl
    2606:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    260a:	f7ff bf99 	b.w	2540 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd4>
    260e:	0000      	.short	0x0000
    2610:	2000143a 	.word	0x2000143a

00002614 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    2614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2618:	4604      	mov	r4, r0
    261a:	f100 0788 	add.w	r7, r0, #136	; 0x88
    261e:	b171      	cbz	r1, 263e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    2620:	f104 06ae 	add.w	r6, r4, #174	; 0xae
    2624:	1e75      	subs	r5, r6, #1
    2626:	2901      	cmp	r1, #1
    2628:	d016      	beq.n	2658 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    262a:	2902      	cmp	r1, #2
    262c:	d025      	beq.n	267a <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    262e:	2903      	cmp	r1, #3
    2630:	d110      	bne.n	2654 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    2632:	4631      	mov	r1, r6
    2634:	4628      	mov	r0, r5
    2636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    263a:	f00b bf01 	b.w	e440 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    263e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
    2642:	2100      	movs	r1, #0
    2644:	f00e fd55 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2648:	4638      	mov	r0, r7
    264a:	f000 f84d 	bl	26e8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd4>
    264e:	2020      	movs	r0, #32
    2650:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    2654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2658:	6921      	ldr	r1, [r4, #16]
    265a:	480d      	ldr	r0, [pc, #52]	; (2690 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    265c:	460a      	mov	r2, r1
    265e:	4408      	add	r0, r1
    2660:	fbb0 f0f1 	udiv	r0, r0, r1
    2664:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    2668:	f640 30b8 	movw	r0, #3000	; 0xbb8
    266c:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    2670:	8b63      	ldrh	r3, [r4, #26]
    2672:	4638      	mov	r0, r7
    2674:	f000 f80e 	bl	2694 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    2678:	e7db      	b.n	2632 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    267a:	6901      	ldr	r1, [r0, #16]
    267c:	f8b4 3276 	ldrh.w	r3, [r4, #630]	; 0x276
    2680:	f8d4 2270 	ldr.w	r2, [r4, #624]	; 0x270
    2684:	4638      	mov	r0, r7
    2686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    268a:	f000 b803 	b.w	2694 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    268e:	0000      	.short	0x0000
    2690:	01c9c37f 	.word	0x01c9c37f
    2694:	b510      	push	{r4, lr}
    2696:	2400      	movs	r4, #0
    2698:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    269c:	f830 4f52 	ldrh.w	r4, [r0, #82]!
    26a0:	434c      	muls	r4, r1
    26a2:	fbb4 f4f2 	udiv	r4, r4, r2
    26a6:	f820 4912 	strh.w	r4, [r0], #-18
    26aa:	f240 2471 	movw	r4, #625	; 0x271
    26ae:	4363      	muls	r3, r4
    26b0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    26b4:	1e5b      	subs	r3, r3, #1
    26b6:	fbb3 f3f2 	udiv	r3, r3, r2
    26ba:	8203      	strh	r3, [r0, #16]
    26bc:	4b09      	ldr	r3, [pc, #36]	; (26e4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd0>)
    26be:	fbb3 f3f2 	udiv	r3, r3, r2
    26c2:	1c5b      	adds	r3, r3, #1
    26c4:	82c3      	strh	r3, [r0, #22]
    26c6:	8903      	ldrh	r3, [r0, #8]
    26c8:	4363      	muls	r3, r4
    26ca:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    26ce:	1e5b      	subs	r3, r3, #1
    26d0:	fbb3 f3f2 	udiv	r3, r3, r2
    26d4:	6043      	str	r3, [r0, #4]
    26d6:	6803      	ldr	r3, [r0, #0]
    26d8:	434b      	muls	r3, r1
    26da:	fbb3 f1f2 	udiv	r1, r3, r2
    26de:	6001      	str	r1, [r0, #0]
    26e0:	bd10      	pop	{r4, pc}
    26e2:	0000      	.short	0x0000
    26e4:	02625a00 	.word	0x02625a00
    26e8:	2101      	movs	r1, #1
    26ea:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    26ee:	490b      	ldr	r1, [pc, #44]	; (271c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x108>)
    26f0:	f8c0 106e 	str.w	r1, [r0, #110]	; 0x6e
    26f4:	2107      	movs	r1, #7
    26f6:	f8c0 1072 	str.w	r1, [r0, #114]	; 0x72
    26fa:	f100 016e 	add.w	r1, r0, #110	; 0x6e
    26fe:	780a      	ldrb	r2, [r1, #0]
    2700:	f022 0204 	bic.w	r2, r2, #4
    2704:	700a      	strb	r2, [r1, #0]
    2706:	21fe      	movs	r1, #254	; 0xfe
    2708:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    270c:	217f      	movs	r1, #127	; 0x7f
    270e:	7641      	strb	r1, [r0, #25]
    2710:	4903      	ldr	r1, [pc, #12]	; (2720 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x10c>)
    2712:	6081      	str	r1, [r0, #8]
    2714:	2100      	movs	r1, #0
    2716:	e9c0 1100 	strd	r1, r1, [r0]
    271a:	4770      	bx	lr
    271c:	c404492f 	.word	0xc404492f
    2720:	fffce000 	.word	0xfffce000

00002724 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    2724:	4902      	ldr	r1, [pc, #8]	; (2730 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    2726:	f991 1000 	ldrsb.w	r1, [r1]
    272a:	f00b be3a 	b.w	e3a2 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    272e:	0000      	.short	0x0000
    2730:	20000364 	.word	0x20000364

00002734 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    2734:	b508      	push	{r3, lr}
    2736:	207f      	movs	r0, #127	; 0x7f
    2738:	f88d 0000 	strb.w	r0, [sp]
    273c:	4668      	mov	r0, sp
    273e:	f005 fec1 	bl	84c4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    2742:	b140      	cbz	r0, 2756 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    2744:	4805      	ldr	r0, [pc, #20]	; (275c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    2746:	7840      	ldrb	r0, [r0, #1]
    2748:	4240      	negs	r0, r0
    274a:	b241      	sxtb	r1, r0
    274c:	f99d 0000 	ldrsb.w	r0, [sp]
    2750:	f00b fe27 	bl	e3a2 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2754:	bd08      	pop	{r3, pc}
    2756:	f99d 0000 	ldrsb.w	r0, [sp]
    275a:	bd08      	pop	{r3, pc}
    275c:	20000364 	.word	0x20000364

00002760 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    2760:	4a01      	ldr	r2, [pc, #4]	; (2768 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    2762:	7010      	strb	r0, [r2, #0]
    2764:	7051      	strb	r1, [r2, #1]
    2766:	4770      	bx	lr
    2768:	20000364 	.word	0x20000364

0000276c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    276c:	4909      	ldr	r1, [pc, #36]	; (2794 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    276e:	b508      	push	{r3, lr}
    2770:	7809      	ldrb	r1, [r1, #0]
    2772:	f88d 1000 	strb.w	r1, [sp]
    2776:	9900      	ldr	r1, [sp, #0]
    2778:	9100      	str	r1, [sp, #0]
    277a:	f89d 1000 	ldrb.w	r1, [sp]
    277e:	b109      	cbz	r1, 2784 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    2780:	2000      	movs	r0, #0
    2782:	bd08      	pop	{r3, pc}
    2784:	4903      	ldr	r1, [pc, #12]	; (2794 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    2786:	f8d1 2001 	ldr.w	r2, [r1, #1]
    278a:	6002      	str	r2, [r0, #0]
    278c:	7949      	ldrb	r1, [r1, #5]
    278e:	7101      	strb	r1, [r0, #4]
    2790:	2001      	movs	r0, #1
    2792:	bd08      	pop	{r3, pc}
    2794:	20000366 	.word	0x20000366

00002798 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    2798:	4905      	ldr	r1, [pc, #20]	; (27b0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    279a:	22ff      	movs	r2, #255	; 0xff
    279c:	700a      	strb	r2, [r1, #0]
    279e:	460a      	mov	r2, r1
    27a0:	6803      	ldr	r3, [r0, #0]
    27a2:	f8c2 3001 	str.w	r3, [r2, #1]
    27a6:	7900      	ldrb	r0, [r0, #4]
    27a8:	7150      	strb	r0, [r2, #5]
    27aa:	2000      	movs	r0, #0
    27ac:	7008      	strb	r0, [r1, #0]
    27ae:	4770      	bx	lr
    27b0:	20000366 	.word	0x20000366
    27b4:	b570      	push	{r4, r5, r6, lr}
    27b6:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    27ba:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    27be:	2401      	movs	r4, #1
    27c0:	fb03 2101 	mla	r1, r3, r1, r2
    27c4:	2225      	movs	r2, #37	; 0x25
    27c6:	fbb1 f3f2 	udiv	r3, r1, r2
    27ca:	fb02 1113 	mls	r1, r2, r3, r1
    27ce:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    27d2:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    27d6:	f001 0307 	and.w	r3, r1, #7
    27da:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    27de:	fa04 f303 	lsl.w	r3, r4, r3
    27e2:	421a      	tst	r2, r3
    27e4:	d004      	beq.n	27f0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x58>
    27e6:	bf00      	nop
    27e8:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    27ec:	2000      	movs	r0, #0
    27ee:	bd70      	pop	{r4, r5, r6, pc}
    27f0:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    27f4:	fbb1 f3f2 	udiv	r3, r1, r2
    27f8:	fb02 1113 	mls	r1, r2, r3, r1
    27fc:	1c49      	adds	r1, r1, #1
    27fe:	b2c9      	uxtb	r1, r1
    2800:	2300      	movs	r3, #0
    2802:	18c5      	adds	r5, r0, r3
    2804:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    2808:	428a      	cmp	r2, r1
    280a:	d312      	bcc.n	2832 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9a>
    280c:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    2810:	2200      	movs	r2, #0
    2812:	bf00      	nop
    2814:	fa04 f602 	lsl.w	r6, r4, r2
    2818:	4235      	tst	r5, r6
    281a:	d001      	beq.n	2820 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x88>
    281c:	1e49      	subs	r1, r1, #1
    281e:	b2c9      	uxtb	r1, r1
    2820:	b121      	cbz	r1, 282c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x94>
    2822:	1c52      	adds	r2, r2, #1
    2824:	b2d2      	uxtb	r2, r2
    2826:	2a08      	cmp	r2, #8
    2828:	d3f4      	bcc.n	2814 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x7c>
    282a:	e004      	b.n	2836 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9e>
    282c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    2830:	e7da      	b.n	27e8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x50>
    2832:	1a89      	subs	r1, r1, r2
    2834:	b2c9      	uxtb	r1, r1
    2836:	1c5b      	adds	r3, r3, #1
    2838:	b2db      	uxtb	r3, r3
    283a:	2b05      	cmp	r3, #5
    283c:	d3e1      	bcc.n	2802 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x6a>
    283e:	201f      	movs	r0, #31
    2840:	bd70      	pop	{r4, r5, r6, pc}
    2842:	0000      	movs	r0, r0
    2844:	b570      	push	{r4, r5, r6, lr}
    2846:	1c49      	adds	r1, r1, #1
    2848:	2300      	movs	r3, #0
    284a:	b2c9      	uxtb	r1, r1
    284c:	2401      	movs	r4, #1
    284e:	18c5      	adds	r5, r0, r3
    2850:	79aa      	ldrb	r2, [r5, #6]
    2852:	428a      	cmp	r2, r1
    2854:	d312      	bcc.n	287c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe4>
    2856:	f895 5001 	ldrb.w	r5, [r5, #1]
    285a:	2200      	movs	r2, #0
    285c:	fa04 f602 	lsl.w	r6, r4, r2
    2860:	4235      	tst	r5, r6
    2862:	d001      	beq.n	2868 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xd0>
    2864:	1e49      	subs	r1, r1, #1
    2866:	b2c9      	uxtb	r1, r1
    2868:	b121      	cbz	r1, 2874 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xdc>
    286a:	1c52      	adds	r2, r2, #1
    286c:	b2d2      	uxtb	r2, r2
    286e:	2a08      	cmp	r2, #8
    2870:	d3f4      	bcc.n	285c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xc4>
    2872:	e005      	b.n	2880 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe8>
    2874:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    2878:	b2c0      	uxtb	r0, r0
    287a:	bd70      	pop	{r4, r5, r6, pc}
    287c:	1a89      	subs	r1, r1, r2
    287e:	b2c9      	uxtb	r1, r1
    2880:	1c5b      	adds	r3, r3, #1
    2882:	b2db      	uxtb	r3, r3
    2884:	2b05      	cmp	r3, #5
    2886:	d3e2      	bcc.n	284e <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xb6>
    2888:	219d      	movs	r1, #157	; 0x9d
    288a:	2046      	movs	r0, #70	; 0x46
    288c:	f7fe f8c6 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00002890 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    2890:	7841      	ldrb	r1, [r0, #1]
    2892:	b141      	cbz	r1, 28a6 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2894:	78c0      	ldrb	r0, [r0, #3]
    2896:	282b      	cmp	r0, #43	; 0x2b
    2898:	d203      	bcs.n	28a2 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    289a:	4a04      	ldr	r2, [pc, #16]	; (28ac <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    289c:	5c10      	ldrb	r0, [r2, r0]
    289e:	4288      	cmp	r0, r1
    28a0:	d101      	bne.n	28a6 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    28a2:	2001      	movs	r0, #1
    28a4:	4770      	bx	lr
    28a6:	2000      	movs	r0, #0
    28a8:	4770      	bx	lr
    28aa:	0000      	.short	0x0000
    28ac:	0001123c 	.word	0x0001123c

000028b0 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    28b0:	b510      	push	{r4, lr}
    28b2:	2201      	movs	r2, #1
    28b4:	70c1      	strb	r1, [r0, #3]
    28b6:	292b      	cmp	r1, #43	; 0x2b
    28b8:	d202      	bcs.n	28c0 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    28ba:	4a06      	ldr	r2, [pc, #24]	; (28d4 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    28bc:	5c52      	ldrb	r2, [r2, r1]
    28be:	e006      	b.n	28ce <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    28c0:	29ff      	cmp	r1, #255	; 0xff
    28c2:	d004      	beq.n	28ce <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    28c4:	f240 4174 	movw	r1, #1140	; 0x474
    28c8:	202a      	movs	r0, #42	; 0x2a
    28ca:	f7fe f8a7 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    28ce:	7042      	strb	r2, [r0, #1]
    28d0:	bd10      	pop	{r4, pc}
    28d2:	0000      	.short	0x0000
    28d4:	0001123c 	.word	0x0001123c

000028d8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    28d8:	4904      	ldr	r1, [pc, #16]	; (28ec <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    28da:	7c89      	ldrb	r1, [r1, #18]
    28dc:	0749      	lsls	r1, r1, #29
    28de:	d400      	bmi.n	28e2 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    28e0:	b108      	cbz	r0, 28e6 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    28e2:	2000      	movs	r0, #0
    28e4:	4770      	bx	lr
    28e6:	2001      	movs	r0, #1
    28e8:	4770      	bx	lr
    28ea:	0000      	.short	0x0000
    28ec:	20001354 	.word	0x20001354

000028f0 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    28f0:	4803      	ldr	r0, [pc, #12]	; (2900 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    28f2:	7c80      	ldrb	r0, [r0, #18]
    28f4:	0780      	lsls	r0, r0, #30
    28f6:	d401      	bmi.n	28fc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    28f8:	2001      	movs	r0, #1
    28fa:	4770      	bx	lr
    28fc:	2000      	movs	r0, #0
    28fe:	4770      	bx	lr
    2900:	20001354 	.word	0x20001354

00002904 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    2904:	4803      	ldr	r0, [pc, #12]	; (2914 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    2906:	7c80      	ldrb	r0, [r0, #18]
    2908:	07c0      	lsls	r0, r0, #31
    290a:	d001      	beq.n	2910 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    290c:	2000      	movs	r0, #0
    290e:	4770      	bx	lr
    2910:	2001      	movs	r0, #1
    2912:	4770      	bx	lr
    2914:	20001354 	.word	0x20001354
    2918:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    291c:	4688      	mov	r8, r1
    291e:	4699      	mov	r9, r3
    2920:	4615      	mov	r5, r2
    2922:	4604      	mov	r4, r0
    2924:	a901      	add	r1, sp, #4
    2926:	f00b fb8d 	bl	e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    292a:	bbb0      	cbnz	r0, 299a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    292c:	9e02      	ldr	r6, [sp, #8]
    292e:	2001      	movs	r0, #1
    2930:	3688      	adds	r6, #136	; 0x88
    2932:	b17d      	cbz	r5, 2954 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    2934:	4620      	mov	r0, r4
    2936:	f7fe fceb 	bl	1310 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    293a:	0004      	movs	r4, r0
    293c:	d00d      	beq.n	295a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x56>
    293e:	4629      	mov	r1, r5
    2940:	f00b f862 	bl	da08 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    2944:	b118      	cbz	r0, 294e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    2946:	4918      	ldr	r1, [pc, #96]	; (29a8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa4>)
    2948:	8849      	ldrh	r1, [r1, #2]
    294a:	42a9      	cmp	r1, r5
    294c:	d207      	bcs.n	295e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5a>
    294e:	2000      	movs	r0, #0
    2950:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    2954:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    2958:	e01f      	b.n	299a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    295a:	2167      	movs	r1, #103	; 0x67
    295c:	e020      	b.n	29a0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    295e:	4601      	mov	r1, r0
    2960:	466a      	mov	r2, sp
    2962:	4620      	mov	r0, r4
    2964:	f00b f849 	bl	d9fa <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2968:	9800      	ldr	r0, [sp, #0]
    296a:	2700      	movs	r7, #0
    296c:	8007      	strh	r7, [r0, #0]
    296e:	7087      	strb	r7, [r0, #2]
    2970:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    2974:	b109      	cbz	r1, 297a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    2976:	f04f 0802 	mov.w	r8, #2
    297a:	4641      	mov	r1, r8
    297c:	f00b fe6d 	bl	e65a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2980:	9800      	ldr	r0, [sp, #0]
    2982:	462a      	mov	r2, r5
    2984:	4649      	mov	r1, r9
    2986:	1cc0      	adds	r0, r0, #3
    2988:	f00e fb39 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    298c:	4620      	mov	r0, r4
    298e:	4629      	mov	r1, r5
    2990:	f00a fff1 	bl	d976 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    2994:	b118      	cbz	r0, 299e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9a>
    2996:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    299a:	2001      	movs	r0, #1
    299c:	e7d8      	b.n	2950 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    299e:	217c      	movs	r1, #124	; 0x7c
    29a0:	202b      	movs	r0, #43	; 0x2b
    29a2:	f7fe f83b 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    29a6:	0000      	.short	0x0000
    29a8:	20001354 	.word	0x20001354

000029ac <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    29ac:	4809      	ldr	r0, [pc, #36]	; (29d4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    29ae:	b082      	sub	sp, #8
    29b0:	7a00      	ldrb	r0, [r0, #8]
    29b2:	f88d 0000 	strb.w	r0, [sp]
    29b6:	9800      	ldr	r0, [sp, #0]
    29b8:	9000      	str	r0, [sp, #0]
    29ba:	f89d 0000 	ldrb.w	r0, [sp]
    29be:	2800      	cmp	r0, #0
    29c0:	d105      	bne.n	29ce <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    29c2:	2202      	movs	r2, #2
    29c4:	4904      	ldr	r1, [pc, #16]	; (29d8 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    29c6:	4803      	ldr	r0, [pc, #12]	; (29d4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    29c8:	b002      	add	sp, #8
    29ca:	f00b be82 	b.w	e6d2 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    29ce:	b002      	add	sp, #8
    29d0:	4770      	bx	lr
    29d2:	0000      	.short	0x0000
    29d4:	2000136c 	.word	0x2000136c
    29d8:	0000e719 	.word	0x0000e719

000029dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    29dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29e0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 2b88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1ac>
    29e4:	4f69      	ldr	r7, [pc, #420]	; (2b8c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>)
    29e6:	4683      	mov	fp, r0
    29e8:	f04f 0a01 	mov.w	sl, #1
    29ec:	2600      	movs	r6, #0
    29ee:	6878      	ldr	r0, [r7, #4]
    29f0:	4635      	mov	r5, r6
    29f2:	7a00      	ldrb	r0, [r0, #8]
    29f4:	f88d 0000 	strb.w	r0, [sp]
    29f8:	9800      	ldr	r0, [sp, #0]
    29fa:	9000      	str	r0, [sp, #0]
    29fc:	f89d 1000 	ldrb.w	r1, [sp]
    2a00:	2910      	cmp	r1, #16
    2a02:	d106      	bne.n	2a12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    2a04:	f899 1013 	ldrb.w	r1, [r9, #19]
    2a08:	b119      	cbz	r1, 2a12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    2a0a:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    2a0e:	2800      	cmp	r0, #0
    2a10:	d077      	beq.n	2b02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    2a12:	f88d 6000 	strb.w	r6, [sp]
    2a16:	4668      	mov	r0, sp
    2a18:	f000 f92c 	bl	2c74 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xd4>
    2a1c:	f89d 1000 	ldrb.w	r1, [sp]
    2a20:	2900      	cmp	r1, #0
    2a22:	d1f8      	bne.n	2a16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    2a24:	2800      	cmp	r0, #0
    2a26:	d06c      	beq.n	2b02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    2a28:	4604      	mov	r4, r0
    2a2a:	7a00      	ldrb	r0, [r0, #8]
    2a2c:	f88d 0000 	strb.w	r0, [sp]
    2a30:	9800      	ldr	r0, [sp, #0]
    2a32:	9000      	str	r0, [sp, #0]
    2a34:	f89d 8000 	ldrb.w	r8, [sp]
    2a38:	f104 0008 	add.w	r0, r4, #8
    2a3c:	2105      	movs	r1, #5
    2a3e:	9000      	str	r0, [sp, #0]
    2a40:	7001      	strb	r1, [r0, #0]
    2a42:	4640      	mov	r0, r8
    2a44:	f1b8 0f06 	cmp.w	r8, #6
    2a48:	d030      	beq.n	2aac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd0>
    2a4a:	dc07      	bgt.n	2a5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    2a4c:	2802      	cmp	r0, #2
    2a4e:	d00f      	beq.n	2a70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    2a50:	2803      	cmp	r0, #3
    2a52:	d019      	beq.n	2a88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    2a54:	f1b8 0f04 	cmp.w	r8, #4
    2a58:	d107      	bne.n	2a6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8e>
    2a5a:	e01f      	b.n	2a9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    2a5c:	2808      	cmp	r0, #8
    2a5e:	d035      	beq.n	2acc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    2a60:	280f      	cmp	r0, #15
    2a62:	d052      	beq.n	2b0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12e>
    2a64:	f1b8 0f10 	cmp.w	r8, #16
    2a68:	d059      	beq.n	2b1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x142>
    2a6a:	f240 2151 	movw	r1, #593	; 0x251
    2a6e:	e064      	b.n	2b3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    2a70:	6862      	ldr	r2, [r4, #4]
    2a72:	b132      	cbz	r2, 2a82 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa6>
    2a74:	4659      	mov	r1, fp
    2a76:	4620      	mov	r0, r4
    2a78:	4790      	blx	r2
    2a7a:	2004      	movs	r0, #4
    2a7c:	f360 0507 	bfi	r5, r0, #0, #8
    2a80:	e05e      	b.n	2b40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    2a82:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    2a86:	e058      	b.n	2b3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    2a88:	6862      	ldr	r2, [r4, #4]
    2a8a:	b122      	cbz	r2, 2a96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xba>
    2a8c:	4659      	mov	r1, fp
    2a8e:	4620      	mov	r0, r4
    2a90:	4790      	blx	r2
    2a92:	4605      	mov	r5, r0
    2a94:	e054      	b.n	2b40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    2a96:	f240 11d3 	movw	r1, #467	; 0x1d3
    2a9a:	e04e      	b.n	2b3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    2a9c:	6861      	ldr	r1, [r4, #4]
    2a9e:	b111      	cbz	r1, 2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    2aa0:	4620      	mov	r0, r4
    2aa2:	4788      	blx	r1
    2aa4:	e04c      	b.n	2b40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    2aa6:	f240 11dd 	movw	r1, #477	; 0x1dd
    2aaa:	e046      	b.n	2b3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    2aac:	6862      	ldr	r2, [r4, #4]
    2aae:	b132      	cbz	r2, 2abe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe2>
    2ab0:	4659      	mov	r1, fp
    2ab2:	4620      	mov	r0, r4
    2ab4:	4790      	blx	r2
    2ab6:	f002 f879 	bl	4bac <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    2aba:	b118      	cbz	r0, 2ac4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe8>
    2abc:	e01f      	b.n	2afe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    2abe:	f44f 7106 	mov.w	r1, #536	; 0x218
    2ac2:	e03a      	b.n	2b3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    2ac4:	f000 fecc 	bl	3860 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    2ac8:	b3a0      	cbz	r0, 2b34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    2aca:	e018      	b.n	2afe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    2acc:	4601      	mov	r1, r0
    2ace:	6860      	ldr	r0, [r4, #4]
    2ad0:	465d      	mov	r5, fp
    2ad2:	b118      	cbz	r0, 2adc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
    2ad4:	8804      	ldrh	r4, [r0, #0]
    2ad6:	2908      	cmp	r1, #8
    2ad8:	d111      	bne.n	2afe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    2ada:	e001      	b.n	2ae0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x104>
    2adc:	21e5      	movs	r1, #229	; 0xe5
    2ade:	e02c      	b.n	2b3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    2ae0:	4620      	mov	r0, r4
    2ae2:	f7fe fc15 	bl	1310 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2ae6:	b170      	cbz	r0, 2b06 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    2ae8:	706e      	strb	r6, [r5, #1]
    2aea:	220f      	movs	r2, #15
    2aec:	702a      	strb	r2, [r5, #0]
    2aee:	80ec      	strh	r4, [r5, #6]
    2af0:	f8a5 a008 	strh.w	sl, [r5, #8]
    2af4:	4631      	mov	r1, r6
    2af6:	f885 a004 	strb.w	sl, [r5, #4]
    2afa:	f00b f81c 	bl	db36 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2afe:	2004      	movs	r0, #4
    2b00:	613e      	str	r6, [r7, #16]
    2b02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b06:	21c5      	movs	r1, #197	; 0xc5
    2b08:	e017      	b.n	2b3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    2b0a:	f88b 6001 	strb.w	r6, [fp, #1]
    2b0e:	211a      	movs	r1, #26
    2b10:	f88b 1000 	strb.w	r1, [fp]
    2b14:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2b18:	f8cb 1004 	str.w	r1, [fp, #4]
    2b1c:	e7ad      	b.n	2a7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    2b1e:	481c      	ldr	r0, [pc, #112]	; (2b90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>)
    2b20:	6802      	ldr	r2, [r0, #0]
    2b22:	b122      	cbz	r2, 2b2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x152>
    2b24:	6860      	ldr	r0, [r4, #4]
    2b26:	b130      	cbz	r0, 2b36 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15a>
    2b28:	8800      	ldrh	r0, [r0, #0]
    2b2a:	4659      	mov	r1, fp
    2b2c:	4790      	blx	r2
    2b2e:	2002      	movs	r0, #2
    2b30:	613e      	str	r6, [r7, #16]
    2b32:	e7e6      	b.n	2b02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    2b34:	e004      	b.n	2b40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    2b36:	f240 2147 	movw	r1, #583	; 0x247
    2b3a:	2010      	movs	r0, #16
    2b3c:	f7fd ff6e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2b40:	f3c5 2007 	ubfx	r0, r5, #8, #8
    2b44:	2801      	cmp	r0, #1
    2b46:	d010      	beq.n	2b6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    2b48:	f3ef 8010 	mrs	r0, PRIMASK
    2b4c:	b672      	cpsid	i
    2b4e:	7a21      	ldrb	r1, [r4, #8]
    2b50:	f88d 1000 	strb.w	r1, [sp]
    2b54:	9900      	ldr	r1, [sp, #0]
    2b56:	9100      	str	r1, [sp, #0]
    2b58:	f89d 1000 	ldrb.w	r1, [sp]
    2b5c:	2905      	cmp	r1, #5
    2b5e:	d008      	beq.n	2b72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x196>
    2b60:	b139      	cbz	r1, 2b72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x196>
    2b62:	f366 0507 	bfi	r5, r6, #0, #8
    2b66:	b138      	cbz	r0, 2b78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19c>
    2b68:	e007      	b.n	2b7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    2b6a:	9800      	ldr	r0, [sp, #0]
    2b6c:	4641      	mov	r1, r8
    2b6e:	7001      	strb	r1, [r0, #0]
    2b70:	e003      	b.n	2b7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    2b72:	7226      	strb	r6, [r4, #8]
    2b74:	613e      	str	r6, [r7, #16]
    2b76:	e7f6      	b.n	2b66 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18a>
    2b78:	b662      	cpsie	i
    2b7a:	f015 0fff 	tst.w	r5, #255	; 0xff
    2b7e:	f43f af36 	beq.w	29ee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    2b82:	b2e8      	uxtb	r0, r5
    2b84:	e7bd      	b.n	2b02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    2b86:	0000      	.short	0x0000
    2b88:	20001354 	.word	0x20001354
    2b8c:	20001380 	.word	0x20001380
    2b90:	200000c4 	.word	0x200000c4

00002b94 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    2b94:	4901      	ldr	r1, [pc, #4]	; (2b9c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    2b96:	7008      	strb	r0, [r1, #0]
    2b98:	f000 b8ce 	b.w	2d38 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x198>
    2b9c:	2000036c 	.word	0x2000036c

00002ba0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
    2ba0:	4902      	ldr	r1, [pc, #8]	; (2bac <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xc>)
    2ba2:	4801      	ldr	r0, [pc, #4]	; (2ba8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x8>)
    2ba4:	6008      	str	r0, [r1, #0]
    2ba6:	4770      	bx	lr
    2ba8:	00002bb1 	.word	0x00002bb1
    2bac:	200000c4 	.word	0x200000c4
    2bb0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    2bb2:	000d      	movs	r5, r1
    2bb4:	4606      	mov	r6, r0
    2bb6:	d015      	beq.n	2be4 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x44>
    2bb8:	80ae      	strh	r6, [r5, #4]
    2bba:	2000      	movs	r0, #0
    2bbc:	7268      	strb	r0, [r5, #9]
    2bbe:	4630      	mov	r0, r6
    2bc0:	f7fe fb90 	bl	12e4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2bc4:	4604      	mov	r4, r0
    2bc6:	f00a fefa 	bl	d9be <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    2bca:	b170      	cbz	r0, 2bea <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x4a>
    2bcc:	4601      	mov	r1, r0
    2bce:	466a      	mov	r2, sp
    2bd0:	4620      	mov	r0, r4
    2bd2:	f00a ff12 	bl	d9fa <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2bd6:	80e8      	strh	r0, [r5, #6]
    2bd8:	b150      	cbz	r0, 2bf0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x50>
    2bda:	28fb      	cmp	r0, #251	; 0xfb
    2bdc:	d90b      	bls.n	2bf6 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x56>
    2bde:	f240 1123 	movw	r1, #291	; 0x123
    2be2:	e031      	b.n	2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa8>
    2be4:	f240 1113 	movw	r1, #275	; 0x113
    2be8:	e02e      	b.n	2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa8>
    2bea:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2bee:	e02b      	b.n	2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa8>
    2bf0:	f240 1121 	movw	r1, #289	; 0x121
    2bf4:	e028      	b.n	2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa8>
    2bf6:	9800      	ldr	r0, [sp, #0]
    2bf8:	f00b fced 	bl	e5d6 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    2bfc:	2801      	cmp	r0, #1
    2bfe:	d004      	beq.n	2c0a <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x6a>
    2c00:	2802      	cmp	r0, #2
    2c02:	d002      	beq.n	2c0a <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x6a>
    2c04:	f240 1133 	movw	r1, #307	; 0x133
    2c08:	e01e      	b.n	2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa8>
    2c0a:	7228      	strb	r0, [r5, #8]
    2c0c:	6828      	ldr	r0, [r5, #0]
    2c0e:	b1f0      	cbz	r0, 2c4e <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xae>
    2c10:	9900      	ldr	r1, [sp, #0]
    2c12:	88ea      	ldrh	r2, [r5, #6]
    2c14:	1cc9      	adds	r1, r1, #3
    2c16:	f00e f9f2 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2c1a:	4620      	mov	r0, r4
    2c1c:	f00a fe97 	bl	d94e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    2c20:	b1c0      	cbz	r0, 2c54 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xb4>
    2c22:	4620      	mov	r0, r4
    2c24:	2100      	movs	r1, #0
    2c26:	f00a ff86 	bl	db36 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2c2a:	b1b0      	cbz	r0, 2c5a <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xba>
    2c2c:	4810      	ldr	r0, [pc, #64]	; (2c70 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xd0>)
    2c2e:	7cc1      	ldrb	r1, [r0, #19]
    2c30:	2900      	cmp	r1, #0
    2c32:	d01b      	beq.n	2c6c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xcc>
    2c34:	8a81      	ldrh	r1, [r0, #20]
    2c36:	1e49      	subs	r1, r1, #1
    2c38:	8281      	strh	r1, [r0, #20]
    2c3a:	a901      	add	r1, sp, #4
    2c3c:	4630      	mov	r0, r6
    2c3e:	f00b fa01 	bl	e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    2c42:	b168      	cbz	r0, 2c60 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xc0>
    2c44:	f240 114d 	movw	r1, #333	; 0x14d
    2c48:	2010      	movs	r0, #16
    2c4a:	f7fd fee7 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2c4e:	f44f 719d 	mov.w	r1, #314	; 0x13a
    2c52:	e7f9      	b.n	2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa8>
    2c54:	f240 113f 	movw	r1, #319	; 0x13f
    2c58:	e7f6      	b.n	2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa8>
    2c5a:	f44f 71a2 	mov.w	r1, #324	; 0x144
    2c5e:	e7f3      	b.n	2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa8>
    2c60:	9802      	ldr	r0, [sp, #8]
    2c62:	f8b0 10bc 	ldrh.w	r1, [r0, #188]	; 0xbc
    2c66:	1c49      	adds	r1, r1, #1
    2c68:	f8a0 10bc 	strh.w	r1, [r0, #188]	; 0xbc
    2c6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2c6e:	0000      	.short	0x0000
    2c70:	20001354 	.word	0x20001354
    2c74:	b538      	push	{r3, r4, r5, lr}
    2c76:	4603      	mov	r3, r0
    2c78:	4917      	ldr	r1, [pc, #92]	; (2cd8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x138>)
    2c7a:	2000      	movs	r0, #0
    2c7c:	7018      	strb	r0, [r3, #0]
    2c7e:	6908      	ldr	r0, [r1, #16]
    2c80:	2401      	movs	r4, #1
    2c82:	b140      	cbz	r0, 2c96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xf6>
    2c84:	7a02      	ldrb	r2, [r0, #8]
    2c86:	f88d 2000 	strb.w	r2, [sp]
    2c8a:	9a00      	ldr	r2, [sp, #0]
    2c8c:	9200      	str	r2, [sp, #0]
    2c8e:	f89d 5000 	ldrb.w	r5, [sp]
    2c92:	2d00      	cmp	r5, #0
    2c94:	d111      	bne.n	2cba <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x11a>
    2c96:	6848      	ldr	r0, [r1, #4]
    2c98:	7a02      	ldrb	r2, [r0, #8]
    2c9a:	f88d 2000 	strb.w	r2, [sp]
    2c9e:	9a00      	ldr	r2, [sp, #0]
    2ca0:	9200      	str	r2, [sp, #0]
    2ca2:	f89d 5000 	ldrb.w	r5, [sp]
    2ca6:	2d01      	cmp	r5, #1
    2ca8:	d006      	beq.n	2cb8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x118>
    2caa:	f3ef 8210 	mrs	r2, PRIMASK
    2cae:	b672      	cpsid	i
    2cb0:	6805      	ldr	r5, [r0, #0]
    2cb2:	604d      	str	r5, [r1, #4]
    2cb4:	b112      	cbz	r2, 2cbc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x11c>
    2cb6:	e002      	b.n	2cbe <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x11e>
    2cb8:	2000      	movs	r0, #0
    2cba:	bd38      	pop	{r3, r4, r5, pc}
    2cbc:	b662      	cpsie	i
    2cbe:	7a02      	ldrb	r2, [r0, #8]
    2cc0:	f88d 2000 	strb.w	r2, [sp]
    2cc4:	9a00      	ldr	r2, [sp, #0]
    2cc6:	9200      	str	r2, [sp, #0]
    2cc8:	f89d 5000 	ldrb.w	r5, [sp]
    2ccc:	b10d      	cbz	r5, 2cd2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x132>
    2cce:	6108      	str	r0, [r1, #16]
    2cd0:	bd38      	pop	{r3, r4, r5, pc}
    2cd2:	701c      	strb	r4, [r3, #0]
    2cd4:	bd38      	pop	{r3, r4, r5, pc}
    2cd6:	0000      	.short	0x0000
    2cd8:	20001380 	.word	0x20001380
    2cdc:	b538      	push	{r3, r4, r5, lr}
    2cde:	b1d0      	cbz	r0, 2d16 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x176>
    2ce0:	6041      	str	r1, [r0, #4]
    2ce2:	f100 0108 	add.w	r1, r0, #8
    2ce6:	700a      	strb	r2, [r1, #0]
    2ce8:	f3ef 8310 	mrs	r3, PRIMASK
    2cec:	b672      	cpsid	i
    2cee:	4c10      	ldr	r4, [pc, #64]	; (2d30 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x190>)
    2cf0:	6004      	str	r4, [r0, #0]
    2cf2:	1f21      	subs	r1, r4, #4
    2cf4:	684a      	ldr	r2, [r1, #4]
    2cf6:	b14a      	cbz	r2, 2d0c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x16c>
    2cf8:	7a12      	ldrb	r2, [r2, #8]
    2cfa:	f88d 2000 	strb.w	r2, [sp]
    2cfe:	9a00      	ldr	r2, [sp, #0]
    2d00:	9200      	str	r2, [sp, #0]
    2d02:	f89d 5000 	ldrb.w	r5, [sp]
    2d06:	2d01      	cmp	r5, #1
    2d08:	d100      	bne.n	2d0c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x16c>
    2d0a:	600c      	str	r4, [r1, #0]
    2d0c:	680a      	ldr	r2, [r1, #0]
    2d0e:	6010      	str	r0, [r2, #0]
    2d10:	6008      	str	r0, [r1, #0]
    2d12:	b12b      	cbz	r3, 2d20 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x180>
    2d14:	e005      	b.n	2d22 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x182>
    2d16:	f44f 711f 	mov.w	r1, #636	; 0x27c
    2d1a:	2010      	movs	r0, #16
    2d1c:	f7fd fe7e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2d20:	b662      	cpsie	i
    2d22:	4804      	ldr	r0, [pc, #16]	; (2d34 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x194>)
    2d24:	7800      	ldrb	r0, [r0, #0]
    2d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2d2a:	f009 beb3 	b.w	ca94 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2d2e:	0000      	.short	0x0000
    2d30:	20001384 	.word	0x20001384
    2d34:	2000036c 	.word	0x2000036c
    2d38:	b510      	push	{r4, lr}
    2d3a:	2214      	movs	r2, #20
    2d3c:	2100      	movs	r1, #0
    2d3e:	4808      	ldr	r0, [pc, #32]	; (2d60 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x1c0>)
    2d40:	f00e f9d7 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2d44:	4806      	ldr	r0, [pc, #24]	; (2d60 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x1c0>)
    2d46:	2212      	movs	r2, #18
    2d48:	2100      	movs	r1, #0
    2d4a:	3814      	subs	r0, #20
    2d4c:	f00e f9d1 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2d50:	4803      	ldr	r0, [pc, #12]	; (2d60 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x1c0>)
    2d52:	2101      	movs	r1, #1
    2d54:	7301      	strb	r1, [r0, #12]
    2d56:	1d01      	adds	r1, r0, #4
    2d58:	6041      	str	r1, [r0, #4]
    2d5a:	6001      	str	r1, [r0, #0]
    2d5c:	bd10      	pop	{r4, pc}
    2d5e:	0000      	.short	0x0000
    2d60:	20001380 	.word	0x20001380

00002d64 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    2d64:	b4f0      	push	{r4, r5, r6, r7}
    2d66:	8150      	strh	r0, [r2, #10]
    2d68:	890c      	ldrh	r4, [r1, #8]
    2d6a:	8194      	strh	r4, [r2, #12]
    2d6c:	898b      	ldrh	r3, [r1, #12]
    2d6e:	81d3      	strh	r3, [r2, #14]
    2d70:	8948      	ldrh	r0, [r1, #10]
    2d72:	8210      	strh	r0, [r2, #16]
    2d74:	89cd      	ldrh	r5, [r1, #14]
    2d76:	8255      	strh	r5, [r2, #18]
    2d78:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    2d7a:	42ae      	cmp	r6, r5
    2d7c:	d108      	bne.n	2d90 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2d7e:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    2d80:	4285      	cmp	r5, r0
    2d82:	d105      	bne.n	2d90 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2d84:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    2d86:	429d      	cmp	r5, r3
    2d88:	d102      	bne.n	2d90 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2d8a:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    2d8c:	42a3      	cmp	r3, r4
    2d8e:	d001      	beq.n	2d94 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    2d90:	2301      	movs	r3, #1
    2d92:	e000      	b.n	2d96 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    2d94:	2300      	movs	r3, #0
    2d96:	7513      	strb	r3, [r2, #20]
    2d98:	8548      	strh	r0, [r1, #42]	; 0x2a
    2d9a:	8a50      	ldrh	r0, [r2, #18]
    2d9c:	85c8      	strh	r0, [r1, #46]	; 0x2e
    2d9e:	8990      	ldrh	r0, [r2, #12]
    2da0:	8588      	strh	r0, [r1, #44]	; 0x2c
    2da2:	89d0      	ldrh	r0, [r2, #14]
    2da4:	8608      	strh	r0, [r1, #48]	; 0x30
    2da6:	bcf0      	pop	{r4, r5, r6, r7}
    2da8:	4901      	ldr	r1, [pc, #4]	; (2db0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x4c>)
    2daa:	4610      	mov	r0, r2
    2dac:	f00b bc8b 	b.w	e6c6 <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>
    2db0:	00002dd5 	.word	0x00002dd5

00002db4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    2db4:	8150      	strh	r0, [r2, #10]
    2db6:	8a88      	ldrh	r0, [r1, #20]
    2db8:	8190      	strh	r0, [r2, #12]
    2dba:	8ac8      	ldrh	r0, [r1, #22]
    2dbc:	81d0      	strh	r0, [r2, #14]
    2dbe:	8b08      	ldrh	r0, [r1, #24]
    2dc0:	8210      	strh	r0, [r2, #16]
    2dc2:	8b48      	ldrh	r0, [r1, #26]
    2dc4:	8250      	strh	r0, [r2, #18]
    2dc6:	4902      	ldr	r1, [pc, #8]	; (2dd0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1c>)
    2dc8:	4610      	mov	r0, r2
    2dca:	f00b bc79 	b.w	e6c0 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    2dce:	0000      	.short	0x0000
    2dd0:	00002e15 	.word	0x00002e15
    2dd4:	b538      	push	{r3, r4, r5, lr}
    2dd6:	f1a0 0418 	sub.w	r4, r0, #24
    2dda:	7d00      	ldrb	r0, [r0, #20]
    2ddc:	460d      	mov	r5, r1
    2dde:	f000 0001 	and.w	r0, r0, #1
    2de2:	f7ff fd79 	bl	28d8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    2de6:	2100      	movs	r1, #0
    2de8:	b108      	cbz	r0, 2dee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    2dea:	9100      	str	r1, [sp, #0]
    2dec:	e00c      	b.n	2e08 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    2dee:	7069      	strb	r1, [r5, #1]
    2df0:	2016      	movs	r0, #22
    2df2:	7028      	strb	r0, [r5, #0]
    2df4:	f854 0f22 	ldr.w	r0, [r4, #34]!
    2df8:	6068      	str	r0, [r5, #4]
    2dfa:	6860      	ldr	r0, [r4, #4]
    2dfc:	60a8      	str	r0, [r5, #8]
    2dfe:	68a0      	ldr	r0, [r4, #8]
    2e00:	60e8      	str	r0, [r5, #12]
    2e02:	4803      	ldr	r0, [pc, #12]	; (2e10 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>)
    2e04:	6840      	ldr	r0, [r0, #4]
    2e06:	9000      	str	r0, [sp, #0]
    2e08:	f8bd 0000 	ldrh.w	r0, [sp]
    2e0c:	bd38      	pop	{r3, r4, r5, pc}
    2e0e:	0000      	.short	0x0000
    2e10:	00002e9c 	.word	0x00002e9c
    2e14:	b570      	push	{r4, r5, r6, lr}
    2e16:	b086      	sub	sp, #24
    2e18:	460e      	mov	r6, r1
    2e1a:	4604      	mov	r4, r0
    2e1c:	f7ff fd68 	bl	28f0 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    2e20:	2500      	movs	r5, #0
    2e22:	b358      	cbz	r0, 2e7c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    2e24:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
    2e28:	7225      	strb	r5, [r4, #8]
    2e2a:	8804      	ldrh	r4, [r0, #0]
    2e2c:	a903      	add	r1, sp, #12
    2e2e:	4620      	mov	r0, r4
    2e30:	f00d f95b 	bl	100ea <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    2e34:	b108      	cbz	r0, 2e3a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    2e36:	21fe      	movs	r1, #254	; 0xfe
    2e38:	e017      	b.n	2e6a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    2e3a:	f8ad 4000 	strh.w	r4, [sp]
    2e3e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2e42:	f8ad 0002 	strh.w	r0, [sp, #2]
    2e46:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    2e4a:	f8ad 0004 	strh.w	r0, [sp, #4]
    2e4e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    2e52:	f8ad 0006 	strh.w	r0, [sp, #6]
    2e56:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    2e5a:	f8ad 0008 	strh.w	r0, [sp, #8]
    2e5e:	4668      	mov	r0, sp
    2e60:	f00d f96a 	bl	10138 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    2e64:	b120      	cbz	r0, 2e70 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xbc>
    2e66:	f240 1107 	movw	r1, #263	; 0x107
    2e6a:	202c      	movs	r0, #44	; 0x2c
    2e6c:	f7fd fdd6 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2e70:	f8cd 5000 	str.w	r5, [sp]
    2e74:	f8bd 0000 	ldrh.w	r0, [sp]
    2e78:	b006      	add	sp, #24
    2e7a:	bd70      	pop	{r4, r5, r6, pc}
    2e7c:	201f      	movs	r0, #31
    2e7e:	7030      	strb	r0, [r6, #0]
    2e80:	7075      	strb	r5, [r6, #1]
    2e82:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    2e86:	6070      	str	r0, [r6, #4]
    2e88:	6860      	ldr	r0, [r4, #4]
    2e8a:	60b0      	str	r0, [r6, #8]
    2e8c:	8920      	ldrh	r0, [r4, #8]
    2e8e:	81b0      	strh	r0, [r6, #12]
    2e90:	4801      	ldr	r0, [pc, #4]	; (2e98 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe4>)
    2e92:	6800      	ldr	r0, [r0, #0]
    2e94:	9000      	str	r0, [sp, #0]
    2e96:	e7ed      	b.n	2e74 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc0>
    2e98:	00002e9c 	.word	0x00002e9c
    2e9c:	00000004 	.word	0x00000004
    2ea0:	00000004 	.word	0x00000004

00002ea4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    2ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ea6:	f06f 021f 	mvn.w	r2, #31
    2eaa:	0c01      	lsrs	r1, r0, #16
    2eac:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    2eb0:	251f      	movs	r5, #31
    2eb2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2eb6:	3854      	subs	r0, #84	; 0x54
    2eb8:	d00d      	beq.n	2ed6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2eba:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2ebe:	3855      	subs	r0, #85	; 0x55
    2ec0:	d009      	beq.n	2ed6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2ec2:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    2ec6:	38aa      	subs	r0, #170	; 0xaa
    2ec8:	d005      	beq.n	2ed6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2eca:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    2ece:	38aa      	subs	r0, #170	; 0xaa
    2ed0:	d001      	beq.n	2ed6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2ed2:	2001      	movs	r0, #1
    2ed4:	e000      	b.n	2ed8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    2ed6:	2000      	movs	r0, #0
    2ed8:	2200      	movs	r2, #0
    2eda:	4613      	mov	r3, r2
    2edc:	ea4f 0402 	mov.w	r4, r2
    2ee0:	ea82 0701 	eor.w	r7, r2, r1
    2ee4:	43ff      	mvns	r7, r7
    2ee6:	431f      	orrs	r7, r3
    2ee8:	1c7f      	adds	r7, r7, #1
    2eea:	d00f      	beq.n	2f0c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    2eec:	f006 0701 	and.w	r7, r6, #1
    2ef0:	0852      	lsrs	r2, r2, #1
    2ef2:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    2ef6:	f005 0701 	and.w	r7, r5, #1
    2efa:	085b      	lsrs	r3, r3, #1
    2efc:	0876      	lsrs	r6, r6, #1
    2efe:	086d      	lsrs	r5, r5, #1
    2f00:	1c64      	adds	r4, r4, #1
    2f02:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    2f06:	2c16      	cmp	r4, #22
    2f08:	d3ea      	bcc.n	2ee0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    2f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f0c:	2000      	movs	r0, #0
    2f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002f10 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
    2f10:	b510      	push	{r4, lr}
    2f12:	4604      	mov	r4, r0
    2f14:	f00b fd24 	bl	e960 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2f18:	b308      	cbz	r0, 2f5e <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f1a:	43e0      	mvns	r0, r4
    2f1c:	f00b fd20 	bl	e960 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2f20:	b1e8      	cbz	r0, 2f5e <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f22:	16a0      	asrs	r0, r4, #26
    2f24:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    2f28:	1e41      	subs	r1, r0, #1
    2f2a:	4208      	tst	r0, r1
    2f2c:	d017      	beq.n	2f5e <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f2e:	4620      	mov	r0, r4
    2f30:	f00b fd65 	bl	e9fe <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>
    2f34:	2818      	cmp	r0, #24
    2f36:	d812      	bhi.n	2f5e <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f38:	b2a0      	uxth	r0, r4
    2f3a:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
    2f3e:	d107      	bne.n	2f50 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x40>
    2f40:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    2f44:	ea01 2114 	and.w	r1, r1, r4, lsr #8
    2f48:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
    2f4c:	4281      	cmp	r1, r0
    2f4e:	d006      	beq.n	2f5e <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f50:	4804      	ldr	r0, [pc, #16]	; (2f64 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
    2f52:	4044      	eors	r4, r0
    2f54:	1e60      	subs	r0, r4, #1
    2f56:	4204      	tst	r4, r0
    2f58:	d001      	beq.n	2f5e <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f5a:	2001      	movs	r0, #1
    2f5c:	bd10      	pop	{r4, pc}
    2f5e:	2000      	movs	r0, #0
    2f60:	bd10      	pop	{r4, pc}
    2f62:	0000      	.short	0x0000
    2f64:	8e89bed6 	.word	0x8e89bed6

00002f68 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    2f68:	b510      	push	{r4, lr}
    2f6a:	4804      	ldr	r0, [pc, #16]	; (2f7c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2f6c:	f00b fd09 	bl	e982 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2f70:	4802      	ldr	r0, [pc, #8]	; (2f7c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f76:	3008      	adds	r0, #8
    2f78:	f00b bd03 	b.w	e982 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2f7c:	200000c8 	.word	0x200000c8

00002f80 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    2f80:	4801      	ldr	r0, [pc, #4]	; (2f88 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    2f82:	f000 b803 	b.w	2f8c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2f86:	0000      	.short	0x0000
    2f88:	200000d0 	.word	0x200000d0
    2f8c:	b510      	push	{r4, lr}
    2f8e:	e9d0 2100 	ldrd	r2, r1, [r0]
    2f92:	4b09      	ldr	r3, [pc, #36]	; (2fb8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    2f94:	4c09      	ldr	r4, [pc, #36]	; (2fbc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    2f96:	4353      	muls	r3, r2
    2f98:	4354      	muls	r4, r2
    2f9a:	4051      	eors	r1, r2
    2f9c:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    2fa0:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    2fa4:	ea4f 41f1 	mov.w	r1, r1, ror #19
    2fa8:	e9c0 2100 	strd	r2, r1, [r0]
    2fac:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    2fb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2fb4:	4618      	mov	r0, r3
    2fb6:	bd10      	pop	{r4, pc}
    2fb8:	c6ef3760 	.word	0xc6ef3760
    2fbc:	9e3779bb 	.word	0x9e3779bb

00002fc0 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    2fc0:	b570      	push	{r4, r5, r6, lr}
    2fc2:	6845      	ldr	r5, [r0, #4]
    2fc4:	1d0c      	adds	r4, r1, #4
    2fc6:	2300      	movs	r3, #0
    2fc8:	f895 20a6 	ldrb.w	r2, [r5, #166]	; 0xa6
    2fcc:	3588      	adds	r5, #136	; 0x88
    2fce:	2601      	movs	r6, #1
    2fd0:	4619      	mov	r1, r3
    2fd2:	4628      	mov	r0, r5
    2fd4:	f00b f84c 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2fd8:	b1c0      	cbz	r0, 300c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x4c>
    2fda:	6820      	ldr	r0, [r4, #0]
    2fdc:	4b0c      	ldr	r3, [pc, #48]	; (3010 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x50>)
    2fde:	6861      	ldr	r1, [r4, #4]
    2fe0:	4018      	ands	r0, r3
    2fe2:	f641 0207 	movw	r2, #6151	; 0x1807
    2fe6:	f8c5 006e 	str.w	r0, [r5, #110]	; 0x6e
    2fea:	4011      	ands	r1, r2
    2fec:	f8c5 1072 	str.w	r1, [r5, #114]	; 0x72
    2ff0:	211b      	movs	r1, #27
    2ff2:	f105 006e 	add.w	r0, r5, #110	; 0x6e
    2ff6:	f00b fdf4 	bl	ebe2 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI+0x16>
    2ffa:	2000      	movs	r0, #0
    2ffc:	f8a5 005a 	strh.w	r0, [r5, #90]	; 0x5a
    3000:	f885 605c 	strb.w	r6, [r5, #92]	; 0x5c
    3004:	2004      	movs	r0, #4
    3006:	77a8      	strb	r0, [r5, #30]
    3008:	2000      	movs	r0, #0
    300a:	bd70      	pop	{r4, r5, r6, pc}
    300c:	2001      	movs	r0, #1
    300e:	bd70      	pop	{r4, r5, r6, pc}
    3010:	f704492f 	.word	0xf704492f

00003014 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    3014:	b510      	push	{r4, lr}
    3016:	1d04      	adds	r4, r0, #4
    3018:	f004 fcd0 	bl	79bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    301c:	4b03      	ldr	r3, [pc, #12]	; (302c <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    301e:	f641 0207 	movw	r2, #6151	; 0x1807
    3022:	4018      	ands	r0, r3
    3024:	4011      	ands	r1, r2
    3026:	6020      	str	r0, [r4, #0]
    3028:	6061      	str	r1, [r4, #4]
    302a:	bd10      	pop	{r4, pc}
    302c:	f704492f 	.word	0xf704492f

00003030 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    3030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3034:	4605      	mov	r5, r0
    3036:	7803      	ldrb	r3, [r0, #0]
    3038:	6840      	ldr	r0, [r0, #4]
    303a:	1d0f      	adds	r7, r1, #4
    303c:	f100 0688 	add.w	r6, r0, #136	; 0x88
    3040:	f500 74a9 	add.w	r4, r0, #338	; 0x152
    3044:	4680      	mov	r8, r0
    3046:	7f72      	ldrb	r2, [r6, #29]
    3048:	2107      	movs	r1, #7
    304a:	4630      	mov	r0, r6
    304c:	f00b f810 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3050:	b300      	cbz	r0, 3094 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
    3052:	6839      	ldr	r1, [r7, #0]
    3054:	4b1a      	ldr	r3, [pc, #104]	; (30c0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x90>)
    3056:	6878      	ldr	r0, [r7, #4]
    3058:	4019      	ands	r1, r3
    305a:	f641 0207 	movw	r2, #6151	; 0x1807
    305e:	f8c6 106e 	str.w	r1, [r6, #110]	; 0x6e
    3062:	4010      	ands	r0, r2
    3064:	f8c6 0072 	str.w	r0, [r6, #114]	; 0x72
    3068:	211b      	movs	r1, #27
    306a:	f106 006e 	add.w	r0, r6, #110	; 0x6e
    306e:	f00b fdb8 	bl	ebe2 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI+0x16>
    3072:	2000      	movs	r0, #0
    3074:	f886 0058 	strb.w	r0, [r6, #88]	; 0x58
    3078:	7770      	strb	r0, [r6, #29]
    307a:	6869      	ldr	r1, [r5, #4]
    307c:	f881 014b 	strb.w	r0, [r1, #331]	; 0x14b
    3080:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    3084:	f88d 1000 	strb.w	r1, [sp]
    3088:	9900      	ldr	r1, [sp, #0]
    308a:	9100      	str	r1, [sp, #0]
    308c:	f89d 1000 	ldrb.w	r1, [sp]
    3090:	b999      	cbnz	r1, 30ba <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x8a>
    3092:	e002      	b.n	309a <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x6a>
    3094:	2001      	movs	r0, #1
    3096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    309a:	f8b8 1000 	ldrh.w	r1, [r8]
    309e:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    30a2:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    30a6:	6839      	ldr	r1, [r7, #0]
    30a8:	66e1      	str	r1, [r4, #108]	; 0x6c
    30aa:	6879      	ldr	r1, [r7, #4]
    30ac:	6721      	str	r1, [r4, #112]	; 0x70
    30ae:	2202      	movs	r2, #2
    30b0:	4904      	ldr	r1, [pc, #16]	; (30c4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x94>)
    30b2:	f104 0060 	add.w	r0, r4, #96	; 0x60
    30b6:	f00b fb0c 	bl	e6d2 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    30ba:	2000      	movs	r0, #0
    30bc:	e7eb      	b.n	3096 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x66>
    30be:	0000      	.short	0x0000
    30c0:	f704492f 	.word	0xf704492f
    30c4:	0000ec43 	.word	0x0000ec43

000030c8 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    30c8:	b570      	push	{r4, r5, r6, lr}
    30ca:	1d0d      	adds	r5, r1, #4
    30cc:	6844      	ldr	r4, [r0, #4]
    30ce:	f004 fc75 	bl	79bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    30d2:	f641 0207 	movw	r2, #6151	; 0x1807
    30d6:	4b05      	ldr	r3, [pc, #20]	; (30ec <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    30d8:	4011      	ands	r1, r2
    30da:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    30de:	4018      	ands	r0, r3
    30e0:	4002      	ands	r2, r0
    30e2:	f362 0007 	bfi	r0, r2, #0, #8
    30e6:	6028      	str	r0, [r5, #0]
    30e8:	6069      	str	r1, [r5, #4]
    30ea:	bd70      	pop	{r4, r5, r6, pc}
    30ec:	f704492f 	.word	0xf704492f

000030f0 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    30f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30f4:	6844      	ldr	r4, [r0, #4]
    30f6:	460d      	mov	r5, r1
    30f8:	7803      	ldrb	r3, [r0, #0]
    30fa:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    30fe:	3488      	adds	r4, #136	; 0x88
    3100:	2701      	movs	r7, #1
    3102:	2108      	movs	r1, #8
    3104:	4620      	mov	r0, r4
    3106:	f00a ffb3 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    310a:	b930      	cbnz	r0, 311a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x2a>
    310c:	2300      	movs	r3, #0
    310e:	7fa2      	ldrb	r2, [r4, #30]
    3110:	4619      	mov	r1, r3
    3112:	4620      	mov	r0, r4
    3114:	f00a ffac 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3118:	b320      	cbz	r0, 3164 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x74>
    311a:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    311e:	f04f 0600 	mov.w	r6, #0
    3122:	0780      	lsls	r0, r0, #30
    3124:	d419      	bmi.n	315a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x6a>
    3126:	4628      	mov	r0, r5
    3128:	f00b fab1 	bl	e68e <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    312c:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3130:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    3134:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    3138:	8868      	ldrh	r0, [r5, #2]
    313a:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    313e:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    3142:	f040 0002 	orr.w	r0, r0, #2
    3146:	f884 005f 	strb.w	r0, [r4, #95]	; 0x5f
    314a:	07c0      	lsls	r0, r0, #31
    314c:	d00d      	beq.n	316a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    314e:	2202      	movs	r2, #2
    3150:	4912      	ldr	r1, [pc, #72]	; (319c <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xac>)
    3152:	f104 0060 	add.w	r0, r4, #96	; 0x60
    3156:	f00b fad0 	bl	e6fa <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    315a:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    315e:	07c0      	lsls	r0, r0, #31
    3160:	d003      	beq.n	316a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    3162:	e00e      	b.n	3182 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x92>
    3164:	2001      	movs	r0, #1
    3166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    316a:	2300      	movs	r3, #0
    316c:	7fa2      	ldrb	r2, [r4, #30]
    316e:	4619      	mov	r1, r3
    3170:	4620      	mov	r0, r4
    3172:	f00a ff7d 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3176:	b140      	cbz	r0, 318a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9a>
    3178:	77a7      	strb	r7, [r4, #30]
    317a:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
    317e:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    3182:	7f60      	ldrb	r0, [r4, #29]
    3184:	2801      	cmp	r0, #1
    3186:	d004      	beq.n	3192 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa2>
    3188:	e006      	b.n	3198 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa8>
    318a:	2148      	movs	r1, #72	; 0x48
    318c:	2040      	movs	r0, #64	; 0x40
    318e:	f7fd fc45 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3192:	7766      	strb	r6, [r4, #29]
    3194:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
    3198:	2000      	movs	r0, #0
    319a:	e7e4      	b.n	3166 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    319c:	0000ecf7 	.word	0x0000ecf7

000031a0 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    31a0:	4a04      	ldr	r2, [pc, #16]	; (31b4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    31a2:	6892      	ldr	r2, [r2, #8]
    31a4:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    31a8:	434b      	muls	r3, r1
    31aa:	4342      	muls	r2, r0
    31ac:	eb03 3022 	add.w	r0, r3, r2, asr #12
    31b0:	4770      	bx	lr
    31b2:	0000      	.short	0x0000
    31b4:	200000d8 	.word	0x200000d8

000031b8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    31b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31ba:	6844      	ldr	r4, [r0, #4]
    31bc:	4606      	mov	r6, r0
    31be:	f104 0588 	add.w	r5, r4, #136	; 0x88
    31c2:	f000 f87b 	bl	32bc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>
    31c6:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    31ca:	2901      	cmp	r1, #1
    31cc:	d11a      	bne.n	3204 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    31ce:	2800      	cmp	r0, #0
    31d0:	d018      	beq.n	3204 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    31d2:	6870      	ldr	r0, [r6, #4]
    31d4:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    31d8:	f88d 1000 	strb.w	r1, [sp]
    31dc:	9900      	ldr	r1, [sp, #0]
    31de:	9100      	str	r1, [sp, #0]
    31e0:	f89d 1000 	ldrb.w	r1, [sp]
    31e4:	f500 70a9 	add.w	r0, r0, #338	; 0x152
    31e8:	2900      	cmp	r1, #0
    31ea:	d10b      	bne.n	3204 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    31ec:	8821      	ldrh	r1, [r4, #0]
    31ee:	8141      	strh	r1, [r0, #10]
    31f0:	7e69      	ldrb	r1, [r5, #25]
    31f2:	7301      	strb	r1, [r0, #12]
    31f4:	7ea9      	ldrb	r1, [r5, #26]
    31f6:	7341      	strb	r1, [r0, #13]
    31f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    31fc:	2202      	movs	r2, #2
    31fe:	4902      	ldr	r1, [pc, #8]	; (3208 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    3200:	f00b ba67 	b.w	e6d2 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3206:	0000      	.short	0x0000
    3208:	0000ed75 	.word	0x0000ed75
    320c:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    3210:	4a0d      	ldr	r2, [pc, #52]	; (3248 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    3212:	b510      	push	{r4, lr}
    3214:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3218:	1309      	asrs	r1, r1, #12
    321a:	1300      	asrs	r0, r0, #12
    321c:	b24b      	sxtb	r3, r1
    321e:	f992 4000 	ldrsb.w	r4, [r2]
    3222:	4240      	negs	r0, r0
    3224:	2100      	movs	r1, #0
    3226:	b240      	sxtb	r0, r0
    3228:	42a3      	cmp	r3, r4
    322a:	da02      	bge.n	3232 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    322c:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3230:	e005      	b.n	323e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    3232:	f992 4001 	ldrsb.w	r4, [r2, #1]
    3236:	42a3      	cmp	r3, r4
    3238:	dd04      	ble.n	3244 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    323a:	f992 1003 	ldrsb.w	r1, [r2, #3]
    323e:	4408      	add	r0, r1
    3240:	f300 0107 	ssat	r1, #8, r0
    3244:	4608      	mov	r0, r1
    3246:	bd10      	pop	{r4, pc}
    3248:	200000d8 	.word	0x200000d8
    324c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3250:	f5a0 75fe 	sub.w	r5, r0, #508	; 0x1fc
    3254:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    3258:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    325c:	f00c fb68 	bl	f930 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    3260:	4606      	mov	r6, r0
    3262:	68a0      	ldr	r0, [r4, #8]
    3264:	f7ff ffd2 	bl	320c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3268:	0007      	movs	r7, r0
    326a:	d021      	beq.n	32b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    326c:	4620      	mov	r0, r4
    326e:	f00b fd89 	bl	ed84 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    3272:	2800      	cmp	r0, #0
    3274:	d01c      	beq.n	32b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    3276:	8828      	ldrh	r0, [r5, #0]
    3278:	4669      	mov	r1, sp
    327a:	f00a fee3 	bl	e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    327e:	b118      	cbz	r0, 3288 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd0>
    3280:	2185      	movs	r1, #133	; 0x85
    3282:	207a      	movs	r0, #122	; 0x7a
    3284:	f7fd fbca 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3288:	1c76      	adds	r6, r6, #1
    328a:	b2f1      	uxtb	r1, r6
    328c:	2302      	movs	r3, #2
    328e:	463a      	mov	r2, r7
    3290:	4668      	mov	r0, sp
    3292:	f00c fb6c 	bl	f96e <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    3296:	2800      	cmp	r0, #0
    3298:	d10a      	bne.n	32b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    329a:	4806      	ldr	r0, [pc, #24]	; (32b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfc>)
    329c:	4906      	ldr	r1, [pc, #24]	; (32b8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x100>)
    329e:	7900      	ldrb	r0, [r0, #4]
    32a0:	fba0 6501 	umull	r6, r5, r0, r1
    32a4:	f00d fd07 	bl	10cb6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    32a8:	1980      	adds	r0, r0, r6
    32aa:	4169      	adcs	r1, r5
    32ac:	e9c4 0100 	strd	r0, r1, [r4]
    32b0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    32b4:	200000d8 	.word	0x200000d8
    32b8:	000f4240 	.word	0x000f4240
    32bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32c0:	4607      	mov	r7, r0
    32c2:	f7ff fa37 	bl	2734 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    32c6:	687c      	ldr	r4, [r7, #4]
    32c8:	4605      	mov	r5, r0
    32ca:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    32ce:	3488      	adds	r4, #136	; 0x88
    32d0:	287f      	cmp	r0, #127	; 0x7f
    32d2:	d042      	beq.n	335a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a2>
    32d4:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    32d8:	687e      	ldr	r6, [r7, #4]
    32da:	76a0      	strb	r0, [r4, #26]
    32dc:	4629      	mov	r1, r5
    32de:	68a0      	ldr	r0, [r4, #8]
    32e0:	f7ff ff5e 	bl	31a0 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    32e4:	60a0      	str	r0, [r4, #8]
    32e6:	481e      	ldr	r0, [pc, #120]	; (3360 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    32e8:	7940      	ldrb	r0, [r0, #5]
    32ea:	b1c0      	cbz	r0, 331e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    32ec:	6878      	ldr	r0, [r7, #4]
    32ee:	f100 0888 	add.w	r8, r0, #136	; 0x88
    32f2:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    32f6:	f7ff ff89 	bl	320c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    32fa:	b180      	cbz	r0, 331e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    32fc:	4640      	mov	r0, r8
    32fe:	f00b fd41 	bl	ed84 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    3302:	b160      	cbz	r0, 331e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    3304:	6878      	ldr	r0, [r7, #4]
    3306:	f500 78a9 	add.w	r8, r0, #338	; 0x152
    330a:	4607      	mov	r7, r0
    330c:	f004 ff4c 	bl	81a8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    3310:	f887 006b 	strb.w	r0, [r7, #107]	; 0x6b
    3314:	4913      	ldr	r1, [pc, #76]	; (3364 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1ac>)
    3316:	f108 00aa 	add.w	r0, r8, #170	; 0xaa
    331a:	f00b f9d7 	bl	e6cc <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>
    331e:	f994 001b 	ldrsb.w	r0, [r4, #27]
    3322:	2100      	movs	r1, #0
    3324:	1a28      	subs	r0, r5, r0
    3326:	d500      	bpl.n	332a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x172>
    3328:	4240      	negs	r0, r0
    332a:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    332e:	4282      	cmp	r2, r0
    3330:	dc10      	bgt.n	3354 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3332:	2aff      	cmp	r2, #255	; 0xff
    3334:	d00e      	beq.n	3354 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3336:	7f20      	ldrb	r0, [r4, #28]
    3338:	1c40      	adds	r0, r0, #1
    333a:	b2c0      	uxtb	r0, r0
    333c:	7720      	strb	r0, [r4, #28]
    333e:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    3342:	4290      	cmp	r0, r2
    3344:	d802      	bhi.n	334c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x194>
    3346:	7ee0      	ldrb	r0, [r4, #27]
    3348:	287f      	cmp	r0, #127	; 0x7f
    334a:	d103      	bne.n	3354 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    334c:	2000      	movs	r0, #0
    334e:	76e5      	strb	r5, [r4, #27]
    3350:	7720      	strb	r0, [r4, #28]
    3352:	2101      	movs	r1, #1
    3354:	4608      	mov	r0, r1
    3356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    335a:	2000      	movs	r0, #0
    335c:	e7fb      	b.n	3356 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    335e:	0000      	.short	0x0000
    3360:	200000d8 	.word	0x200000d8
    3364:	0000324d 	.word	0x0000324d

00003368 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    3368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    336a:	f00b fd27 	bl	edbc <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    336e:	4604      	mov	r4, r0
    3370:	460d      	mov	r5, r1
    3372:	466a      	mov	r2, sp
    3374:	f000 f862 	bl	343c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    3378:	b108      	cbz	r0, 337e <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    337a:	2001      	movs	r0, #1
    337c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    337e:	480f      	ldr	r0, [pc, #60]	; (33bc <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    3380:	7803      	ldrb	r3, [r0, #0]
    3382:	7841      	ldrb	r1, [r0, #1]
    3384:	428b      	cmp	r3, r1
    3386:	d101      	bne.n	338c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    3388:	2000      	movs	r0, #0
    338a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    338c:	461a      	mov	r2, r3
    338e:	6841      	ldr	r1, [r0, #4]
    3390:	e008      	b.n	33a4 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    3392:	bf00      	nop
    3394:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    3398:	1e52      	subs	r2, r2, #1
    339a:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    339e:	e9c6 7c00 	strd	r7, ip, [r6]
    33a2:	b2d2      	uxtb	r2, r2
    33a4:	f89d 6000 	ldrb.w	r6, [sp]
    33a8:	42b2      	cmp	r2, r6
    33aa:	d8f3      	bhi.n	3394 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    33ac:	b2f2      	uxtb	r2, r6
    33ae:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    33b2:	1c5b      	adds	r3, r3, #1
    33b4:	e9c1 4500 	strd	r4, r5, [r1]
    33b8:	7003      	strb	r3, [r0, #0]
    33ba:	e7de      	b.n	337a <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    33bc:	200000e4 	.word	0x200000e4

000033c0 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    33c0:	b510      	push	{r4, lr}
    33c2:	0742      	lsls	r2, r0, #29
    33c4:	d003      	beq.n	33ce <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    33c6:	2163      	movs	r1, #99	; 0x63
    33c8:	2048      	movs	r0, #72	; 0x48
    33ca:	f7fd fb27 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    33ce:	b120      	cbz	r0, 33da <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    33d0:	4a03      	ldr	r2, [pc, #12]	; (33e0 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    33d2:	7051      	strb	r1, [r2, #1]
    33d4:	6050      	str	r0, [r2, #4]
    33d6:	2000      	movs	r0, #0
    33d8:	7010      	strb	r0, [r2, #0]
    33da:	00c8      	lsls	r0, r1, #3
    33dc:	bd10      	pop	{r4, pc}
    33de:	0000      	.short	0x0000
    33e0:	200000e4 	.word	0x200000e4

000033e4 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    33e4:	b538      	push	{r3, r4, r5, lr}
    33e6:	f00b fce9 	bl	edbc <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    33ea:	466a      	mov	r2, sp
    33ec:	f000 f826 	bl	343c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    33f0:	2800      	cmp	r0, #0
    33f2:	d014      	beq.n	341e <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    33f4:	4a0a      	ldr	r2, [pc, #40]	; (3420 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    33f6:	7810      	ldrb	r0, [r2, #0]
    33f8:	1e40      	subs	r0, r0, #1
    33fa:	b2c1      	uxtb	r1, r0
    33fc:	7011      	strb	r1, [r2, #0]
    33fe:	f89d 0000 	ldrb.w	r0, [sp]
    3402:	6852      	ldr	r2, [r2, #4]
    3404:	e008      	b.n	3418 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    3406:	bf00      	nop
    3408:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    340c:	1c40      	adds	r0, r0, #1
    340e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    3412:	e9c3 4500 	strd	r4, r5, [r3]
    3416:	b2c0      	uxtb	r0, r0
    3418:	4288      	cmp	r0, r1
    341a:	d3f5      	bcc.n	3408 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    341c:	2001      	movs	r0, #1
    341e:	bd38      	pop	{r3, r4, r5, pc}
    3420:	200000e4 	.word	0x200000e4

00003424 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    3424:	4901      	ldr	r1, [pc, #4]	; (342c <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    3426:	2000      	movs	r0, #0
    3428:	7008      	strb	r0, [r1, #0]
    342a:	4770      	bx	lr
    342c:	200000e4 	.word	0x200000e4

00003430 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    3430:	4801      	ldr	r0, [pc, #4]	; (3438 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    3432:	7840      	ldrb	r0, [r0, #1]
    3434:	4770      	bx	lr
    3436:	0000      	.short	0x0000
    3438:	200000e4 	.word	0x200000e4
    343c:	b5f0      	push	{r4, r5, r6, r7, lr}
    343e:	4d20      	ldr	r5, [pc, #128]	; (34c0 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    3440:	2300      	movs	r3, #0
    3442:	7013      	strb	r3, [r2, #0]
    3444:	782b      	ldrb	r3, [r5, #0]
    3446:	b323      	cbz	r3, 3492 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    3448:	2400      	movs	r4, #0
    344a:	1e5b      	subs	r3, r3, #1
    344c:	b2db      	uxtb	r3, r3
    344e:	f8d5 c004 	ldr.w	ip, [r5, #4]
    3452:	e00b      	b.n	346c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    3454:	18e5      	adds	r5, r4, r3
    3456:	086d      	lsrs	r5, r5, #1
    3458:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    345c:	e9d6 7600 	ldrd	r7, r6, [r6]
    3460:	1a3f      	subs	r7, r7, r0
    3462:	418e      	sbcs	r6, r1
    3464:	d201      	bcs.n	346a <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    3466:	462c      	mov	r4, r5
    3468:	e000      	b.n	346c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    346a:	462b      	mov	r3, r5
    346c:	1b1d      	subs	r5, r3, r4
    346e:	2d01      	cmp	r5, #1
    3470:	dcf0      	bgt.n	3454 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    3472:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    3476:	e9d6 5600 	ldrd	r5, r6, [r6]
    347a:	ea80 0705 	eor.w	r7, r0, r5
    347e:	ea81 0e06 	eor.w	lr, r1, r6
    3482:	ea57 070e 	orrs.w	r7, r7, lr
    3486:	d005      	beq.n	3494 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    3488:	1b45      	subs	r5, r0, r5
    348a:	eb71 0506 	sbcs.w	r5, r1, r6
    348e:	d203      	bcs.n	3498 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    3490:	7014      	strb	r4, [r2, #0]
    3492:	e010      	b.n	34b6 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    3494:	7014      	strb	r4, [r2, #0]
    3496:	e011      	b.n	34bc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    3498:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    349c:	e9d5 4500 	ldrd	r4, r5, [r5]
    34a0:	ea80 0604 	eor.w	r6, r0, r4
    34a4:	ea81 0705 	eor.w	r7, r1, r5
    34a8:	433e      	orrs	r6, r7
    34aa:	d006      	beq.n	34ba <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    34ac:	1b00      	subs	r0, r0, r4
    34ae:	41a9      	sbcs	r1, r5
    34b0:	d300      	bcc.n	34b4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    34b2:	1c5b      	adds	r3, r3, #1
    34b4:	7013      	strb	r3, [r2, #0]
    34b6:	2000      	movs	r0, #0
    34b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34ba:	7013      	strb	r3, [r2, #0]
    34bc:	2001      	movs	r0, #1
    34be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34c0:	200000e4 	.word	0x200000e4

000034c4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    34c4:	4801      	ldr	r0, [pc, #4]	; (34cc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    34c6:	6840      	ldr	r0, [r0, #4]
    34c8:	30a0      	adds	r0, #160	; 0xa0
    34ca:	4770      	bx	lr
    34cc:	200000ec 	.word	0x200000ec

000034d0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    34d0:	b510      	push	{r4, lr}
    34d2:	4c21      	ldr	r4, [pc, #132]	; (3558 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x88>)
    34d4:	6860      	ldr	r0, [r4, #4]
    34d6:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    34da:	f00b fc9f 	bl	ee1c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    34de:	6861      	ldr	r1, [r4, #4]
    34e0:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    34e4:	314a      	adds	r1, #74	; 0x4a
    34e6:	f7fe f911 	bl	170c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    34ea:	6860      	ldr	r0, [r4, #4]
    34ec:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    34f0:	f00b fc9b 	bl	ee2a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7c>
    34f4:	6861      	ldr	r1, [r4, #4]
    34f6:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    34fa:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    34fe:	314a      	adds	r1, #74	; 0x4a
    3500:	f00b fc78 	bl	edf4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    3504:	b930      	cbnz	r0, 3514 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    3506:	6861      	ldr	r1, [r4, #4]
    3508:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    350c:	314a      	adds	r1, #74	; 0x4a
    350e:	f00b fc7a 	bl	ee06 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3512:	b108      	cbz	r0, 3518 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    3514:	2101      	movs	r1, #1
    3516:	e000      	b.n	351a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    3518:	2100      	movs	r1, #0
    351a:	6860      	ldr	r0, [r4, #4]
    351c:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    3520:	b919      	cbnz	r1, 352a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    3522:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3526:	2800      	cmp	r0, #0
    3528:	d014      	beq.n	3554 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x84>
    352a:	f7fe ff61 	bl	23f0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    352e:	490b      	ldr	r1, [pc, #44]	; (355c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x8c>)
    3530:	fba0 2301 	umull	r2, r3, r0, r1
    3534:	6860      	ldr	r0, [r4, #4]
    3536:	3090      	adds	r0, #144	; 0x90
    3538:	f00b fcd5 	bl	eee6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa8>
    353c:	6860      	ldr	r0, [r4, #4]
    353e:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3542:	b110      	cbz	r0, 354a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7a>
    3544:	2000      	movs	r0, #0
    3546:	f7fe fe47 	bl	21d8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    354a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    354e:	2000      	movs	r0, #0
    3550:	f000 be3a 	b.w	41c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c8>
    3554:	bd10      	pop	{r4, pc}
    3556:	0000      	.short	0x0000
    3558:	200000ec 	.word	0x200000ec
    355c:	000f4240 	.word	0x000f4240

00003560 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    3560:	4a04      	ldr	r2, [pc, #16]	; (3574 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x14>)
    3562:	2803      	cmp	r0, #3
    3564:	6852      	ldr	r2, [r2, #4]
    3566:	d100      	bne.n	356a <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0xa>
    3568:	6551      	str	r1, [r2, #84]	; 0x54
    356a:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    356e:	2000      	movs	r0, #0
    3570:	4770      	bx	lr
    3572:	0000      	.short	0x0000
    3574:	200000ec 	.word	0x200000ec

00003578 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>:
    3578:	4806      	ldr	r0, [pc, #24]	; (3594 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1c>)
    357a:	b508      	push	{r3, lr}
    357c:	6840      	ldr	r0, [r0, #4]
    357e:	7a00      	ldrb	r0, [r0, #8]
    3580:	f88d 0000 	strb.w	r0, [sp]
    3584:	9800      	ldr	r0, [sp, #0]
    3586:	9000      	str	r0, [sp, #0]
    3588:	f89d 0000 	ldrb.w	r0, [sp]
    358c:	2800      	cmp	r0, #0
    358e:	d000      	beq.n	3592 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1a>
    3590:	2001      	movs	r0, #1
    3592:	bd08      	pop	{r3, pc}
    3594:	200000ec 	.word	0x200000ec

00003598 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    3598:	4902      	ldr	r1, [pc, #8]	; (35a4 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    359a:	6849      	ldr	r1, [r1, #4]
    359c:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    35a0:	2000      	movs	r0, #0
    35a2:	4770      	bx	lr
    35a4:	200000ec 	.word	0x200000ec

000035a8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    35a8:	480a      	ldr	r0, [pc, #40]	; (35d4 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    35aa:	6841      	ldr	r1, [r0, #4]
    35ac:	6e88      	ldr	r0, [r1, #104]	; 0x68
    35ae:	b170      	cbz	r0, 35ce <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x26>
    35b0:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    35b4:	22ff      	movs	r2, #255	; 0xff
    35b6:	7002      	strb	r2, [r0, #0]
    35b8:	2200      	movs	r2, #0
    35ba:	668a      	str	r2, [r1, #104]	; 0x68
    35bc:	7002      	strb	r2, [r0, #0]
    35be:	f891 106c 	ldrb.w	r1, [r1, #108]	; 0x6c
    35c2:	2001      	movs	r0, #1
    35c4:	4088      	lsls	r0, r1
    35c6:	4904      	ldr	r1, [pc, #16]	; (35d8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    35c8:	6008      	str	r0, [r1, #0]
    35ca:	2000      	movs	r0, #0
    35cc:	4770      	bx	lr
    35ce:	200c      	movs	r0, #12
    35d0:	4770      	bx	lr
    35d2:	0000      	.short	0x0000
    35d4:	200000ec 	.word	0x200000ec
    35d8:	4001f508 	.word	0x4001f508

000035dc <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    35dc:	4602      	mov	r2, r0
    35de:	480c      	ldr	r0, [pc, #48]	; (3610 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x34>)
    35e0:	b510      	push	{r4, lr}
    35e2:	6082      	str	r2, [r0, #8]
    35e4:	68c0      	ldr	r0, [r0, #12]
    35e6:	460c      	mov	r4, r1
    35e8:	b168      	cbz	r0, 3606 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x2a>
    35ea:	f000 ffdd 	bl	45a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a8>
    35ee:	f00b fd60 	bl	f0b2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    35f2:	4620      	mov	r0, r4
    35f4:	f000 f8b8 	bl	3768 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    35f8:	2800      	cmp	r0, #0
    35fa:	d007      	beq.n	360c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x30>
    35fc:	f640 11bb 	movw	r1, #2491	; 0x9bb
    3600:	2032      	movs	r0, #50	; 0x32
    3602:	f7fd fa0b 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3606:	f640 11b5 	movw	r1, #2485	; 0x9b5
    360a:	e7f9      	b.n	3600 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x24>
    360c:	bd10      	pop	{r4, pc}
    360e:	0000      	.short	0x0000
    3610:	200000ec 	.word	0x200000ec

00003614 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    3614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3618:	4c0f      	ldr	r4, [pc, #60]	; (3658 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    361a:	4605      	mov	r5, r0
    361c:	4616      	mov	r6, r2
    361e:	6860      	ldr	r0, [r4, #4]
    3620:	460f      	mov	r7, r1
    3622:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    3626:	f00b fc00 	bl	ee2a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7c>
    362a:	b158      	cbz	r0, 3644 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    362c:	b955      	cbnz	r5, 3644 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    362e:	4638      	mov	r0, r7
    3630:	f00b fbf4 	bl	ee1c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    3634:	4631      	mov	r1, r6
    3636:	f00a fcb0 	bl	df9a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    363a:	2808      	cmp	r0, #8
    363c:	d002      	beq.n	3644 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    363e:	2001      	movs	r0, #1
    3640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3644:	6860      	ldr	r0, [r4, #4]
    3646:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    364a:	f00b fbe7 	bl	ee1c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    364e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3652:	f7fe b887 	b.w	1764 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    3656:	0000      	.short	0x0000
    3658:	200000ec 	.word	0x200000ec

0000365c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>:
    365c:	b510      	push	{r4, lr}
    365e:	4c0a      	ldr	r4, [pc, #40]	; (3688 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x2c>)
    3660:	6860      	ldr	r0, [r4, #4]
    3662:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3664:	b151      	cbz	r1, 367c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x20>
    3666:	2202      	movs	r2, #2
    3668:	7242      	strb	r2, [r0, #9]
    366a:	8809      	ldrh	r1, [r1, #0]
    366c:	8141      	strh	r1, [r0, #10]
    366e:	4907      	ldr	r1, [pc, #28]	; (368c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x30>)
    3670:	f00b f82f 	bl	e6d2 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3674:	6861      	ldr	r1, [r4, #4]
    3676:	2000      	movs	r0, #0
    3678:	6548      	str	r0, [r1, #84]	; 0x54
    367a:	bd10      	pop	{r4, pc}
    367c:	f240 4127 	movw	r1, #1063	; 0x427
    3680:	2032      	movs	r0, #50	; 0x32
    3682:	f7fd f9cb 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3686:	0000      	.short	0x0000
    3688:	200000ec 	.word	0x200000ec
    368c:	0000399d 	.word	0x0000399d

00003690 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    3690:	b570      	push	{r4, r5, r6, lr}
    3692:	4615      	mov	r5, r2
    3694:	4c0e      	ldr	r4, [pc, #56]	; (36d0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>)
    3696:	460a      	mov	r2, r1
    3698:	2800      	cmp	r0, #0
    369a:	d015      	beq.n	36c8 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x38>
    369c:	f04f 0300 	mov.w	r3, #0
    36a0:	6861      	ldr	r1, [r4, #4]
    36a2:	f801 3f51 	strb.w	r3, [r1, #81]!
    36a6:	7248      	strb	r0, [r1, #9]
    36a8:	f04f 0008 	mov.w	r0, #8
    36ac:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    36b0:	d108      	bne.n	36c4 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x34>
    36b2:	4610      	mov	r0, r2
    36b4:	f00b fbb2 	bl	ee1c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    36b8:	4629      	mov	r1, r5
    36ba:	f00a fc6e 	bl	df9a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    36be:	6861      	ldr	r1, [r4, #4]
    36c0:	f881 007b 	strb.w	r0, [r1, #123]	; 0x7b
    36c4:	2000      	movs	r0, #0
    36c6:	bd70      	pop	{r4, r5, r6, pc}
    36c8:	f04f 0301 	mov.w	r3, #1
    36cc:	e7e8      	b.n	36a0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    36ce:	0000      	.short	0x0000
    36d0:	200000ec 	.word	0x200000ec

000036d4 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>:
    36d4:	b510      	push	{r4, lr}
    36d6:	b1b1      	cbz	r1, 3706 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x32>
    36d8:	4a0d      	ldr	r2, [pc, #52]	; (3710 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x3c>)
    36da:	6852      	ldr	r2, [r2, #4]
    36dc:	f882 005f 	strb.w	r0, [r2, #95]	; 0x5f
    36e0:	6808      	ldr	r0, [r1, #0]
    36e2:	6610      	str	r0, [r2, #96]	; 0x60
    36e4:	8888      	ldrh	r0, [r1, #4]
    36e6:	f8a2 0064 	strh.w	r0, [r2, #100]	; 0x64
    36ea:	f892 0049 	ldrb.w	r0, [r2, #73]	; 0x49
    36ee:	f852 1f54 	ldr.w	r1, [r2, #84]!
    36f2:	7248      	strb	r0, [r1, #9]
    36f4:	f852 0908 	ldr.w	r0, [r2], #-8
    36f8:	f852 1c02 	ldr.w	r1, [r2, #-2]
    36fc:	f8c0 100a 	str.w	r1, [r0, #10]
    3700:	8851      	ldrh	r1, [r2, #2]
    3702:	81c1      	strh	r1, [r0, #14]
    3704:	bd10      	pop	{r4, pc}
    3706:	f640 31aa 	movw	r1, #2986	; 0xbaa
    370a:	2032      	movs	r0, #50	; 0x32
    370c:	f7fd f986 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3710:	200000ec 	.word	0x200000ec

00003714 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>:
    3714:	4902      	ldr	r1, [pc, #8]	; (3720 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0xc>)
    3716:	4801      	ldr	r0, [pc, #4]	; (371c <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0x8>)
    3718:	60c8      	str	r0, [r1, #12]
    371a:	4770      	bx	lr
    371c:	000047e4 	.word	0x000047e4
    3720:	200000ec 	.word	0x200000ec

00003724 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    3724:	4902      	ldr	r1, [pc, #8]	; (3730 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    3726:	6849      	ldr	r1, [r1, #4]
    3728:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    372c:	4770      	bx	lr
    372e:	0000      	.short	0x0000
    3730:	200000ec 	.word	0x200000ec

00003734 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    3734:	b570      	push	{r4, r5, r6, lr}
    3736:	4605      	mov	r5, r0
    3738:	f7fd fe02 	bl	1340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    373c:	4604      	mov	r4, r0
    373e:	f7fd fe05 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    3742:	4621      	mov	r1, r4
    3744:	f00b fbcd 	bl	eee2 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    3748:	0001      	movs	r1, r0
    374a:	d006      	beq.n	375a <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    374c:	4805      	ldr	r0, [pc, #20]	; (3764 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    374e:	68c0      	ldr	r0, [r0, #12]
    3750:	6802      	ldr	r2, [r0, #0]
    3752:	4628      	mov	r0, r5
    3754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3758:	4710      	bx	r2
    375a:	f640 21b1 	movw	r1, #2737	; 0xab1
    375e:	2032      	movs	r0, #50	; 0x32
    3760:	f7fd f95c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3764:	200000ec 	.word	0x200000ec

00003768 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    3768:	b570      	push	{r4, r5, r6, lr}
    376a:	4d19      	ldr	r5, [pc, #100]	; (37d0 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    376c:	4604      	mov	r4, r0
    376e:	6868      	ldr	r0, [r5, #4]
    3770:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    3774:	2901      	cmp	r1, #1
    3776:	d004      	beq.n	3782 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    3778:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    377c:	b108      	cbz	r0, 3782 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    377e:	200c      	movs	r0, #12
    3780:	bd70      	pop	{r4, r5, r6, pc}
    3782:	f7fd fe07 	bl	1394 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    3786:	f00b fc94 	bl	f0b2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    378a:	f000 f8c1 	bl	3910 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    378e:	2246      	movs	r2, #70	; 0x46
    3790:	2100      	movs	r1, #0
    3792:	6868      	ldr	r0, [r5, #4]
    3794:	f00d fcad 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3798:	6869      	ldr	r1, [r5, #4]
    379a:	2200      	movs	r2, #0
    379c:	2001      	movs	r0, #1
    379e:	f881 205d 	strb.w	r2, [r1, #93]	; 0x5d
    37a2:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    37a6:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    37aa:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    37ae:	f881 405e 	strb.w	r4, [r1, #94]	; 0x5e
    37b2:	f881 2098 	strb.w	r2, [r1, #152]	; 0x98
    37b6:	2007      	movs	r0, #7
    37b8:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    37bc:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    37c0:	23ff      	movs	r3, #255	; 0xff
    37c2:	7003      	strb	r3, [r0, #0]
    37c4:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    37c8:	668a      	str	r2, [r1, #104]	; 0x68
    37ca:	7002      	strb	r2, [r0, #0]
    37cc:	2000      	movs	r0, #0
    37ce:	bd70      	pop	{r4, r5, r6, pc}
    37d0:	200000ec 	.word	0x200000ec

000037d4 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    37d4:	4805      	ldr	r0, [pc, #20]	; (37ec <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    37d6:	b510      	push	{r4, lr}
    37d8:	6840      	ldr	r0, [r0, #4]
    37da:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    37de:	f00b fb1d 	bl	ee1c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    37e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    37e6:	f7fd bfbd 	b.w	1764 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    37ea:	0000      	.short	0x0000
    37ec:	200000ec 	.word	0x200000ec

000037f0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    37f0:	b140      	cbz	r0, 3804 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    37f2:	2802      	cmp	r0, #2
    37f4:	d006      	beq.n	3804 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    37f6:	2200      	movs	r2, #0
    37f8:	4903      	ldr	r1, [pc, #12]	; (3808 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    37fa:	6849      	ldr	r1, [r1, #4]
    37fc:	f801 2f51 	strb.w	r2, [r1, #81]!
    3800:	7208      	strb	r0, [r1, #8]
    3802:	4770      	bx	lr
    3804:	2201      	movs	r2, #1
    3806:	e7f7      	b.n	37f8 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    3808:	200000ec 	.word	0x200000ec

0000380c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    380c:	4902      	ldr	r1, [pc, #8]	; (3818 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    380e:	6849      	ldr	r1, [r1, #4]
    3810:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    3814:	4770      	bx	lr
    3816:	0000      	.short	0x0000
    3818:	200000ec 	.word	0x200000ec

0000381c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    381c:	b510      	push	{r4, lr}
    381e:	4603      	mov	r3, r0
    3820:	7800      	ldrb	r0, [r0, #0]
    3822:	07c0      	lsls	r0, r0, #31
    3824:	d005      	beq.n	3832 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x16>
    3826:	7858      	ldrb	r0, [r3, #1]
    3828:	2100      	movs	r1, #0
    382a:	f7ff fe99 	bl	3560 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    382e:	2800      	cmp	r0, #0
    3830:	d10c      	bne.n	384c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x30>
    3832:	4c07      	ldr	r4, [pc, #28]	; (3850 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>)
    3834:	7898      	ldrb	r0, [r3, #2]
    3836:	6861      	ldr	r1, [r4, #4]
    3838:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    383c:	78d8      	ldrb	r0, [r3, #3]
    383e:	f7ff ffd7 	bl	37f0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    3842:	6861      	ldr	r1, [r4, #4]
    3844:	7918      	ldrb	r0, [r3, #4]
    3846:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    384a:	2000      	movs	r0, #0
    384c:	bd10      	pop	{r4, pc}
    384e:	0000      	.short	0x0000
    3850:	200000ec 	.word	0x200000ec

00003854 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    3854:	4801      	ldr	r0, [pc, #4]	; (385c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    3856:	68c0      	ldr	r0, [r0, #12]
    3858:	6840      	ldr	r0, [r0, #4]
    385a:	4700      	bx	r0
    385c:	200000ec 	.word	0x200000ec

00003860 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>:
    3860:	4807      	ldr	r0, [pc, #28]	; (3880 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x20>)
    3862:	b508      	push	{r3, lr}
    3864:	6840      	ldr	r0, [r0, #4]
    3866:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    386a:	f88d 0000 	strb.w	r0, [sp]
    386e:	9800      	ldr	r0, [sp, #0]
    3870:	9000      	str	r0, [sp, #0]
    3872:	f89d 0000 	ldrb.w	r0, [sp]
    3876:	2800      	cmp	r0, #0
    3878:	d000      	beq.n	387c <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x1c>
    387a:	2001      	movs	r0, #1
    387c:	bd08      	pop	{r3, pc}
    387e:	0000      	.short	0x0000
    3880:	200000ec 	.word	0x200000ec

00003884 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    3884:	b510      	push	{r4, lr}
    3886:	f000 f947 	bl	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
    388a:	4b0c      	ldr	r3, [pc, #48]	; (38bc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x38>)
    388c:	b140      	cbz	r0, 38a0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1c>
    388e:	6858      	ldr	r0, [r3, #4]
    3890:	2101      	movs	r1, #1
    3892:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    3896:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3898:	8809      	ldrh	r1, [r1, #0]
    389a:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    389e:	e004      	b.n	38aa <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x26>
    38a0:	6859      	ldr	r1, [r3, #4]
    38a2:	2000      	movs	r0, #0
    38a4:	f801 0f42 	strb.w	r0, [r1, #66]!
    38a8:	8048      	strh	r0, [r1, #2]
    38aa:	6858      	ldr	r0, [r3, #4]
    38ac:	2202      	movs	r2, #2
    38ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38b2:	4903      	ldr	r1, [pc, #12]	; (38c0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x3c>)
    38b4:	3038      	adds	r0, #56	; 0x38
    38b6:	f00a bf0c 	b.w	e6d2 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    38ba:	0000      	.short	0x0000
    38bc:	200000ec 	.word	0x200000ec
    38c0:	00004541 	.word	0x00004541

000038c4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    38c4:	4802      	ldr	r0, [pc, #8]	; (38d0 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    38c6:	6840      	ldr	r0, [r0, #4]
    38c8:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    38cc:	4770      	bx	lr
    38ce:	0000      	.short	0x0000
    38d0:	200000ec 	.word	0x200000ec

000038d4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    38d4:	b510      	push	{r4, lr}
    38d6:	f000 f91f 	bl	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
    38da:	490c      	ldr	r1, [pc, #48]	; (390c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    38dc:	b128      	cbz	r0, 38ea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    38de:	6848      	ldr	r0, [r1, #4]
    38e0:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
    38e4:	2801      	cmp	r0, #1
    38e6:	d00e      	beq.n	3906 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    38e8:	e00c      	b.n	3904 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    38ea:	6849      	ldr	r1, [r1, #4]
    38ec:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    38f0:	2801      	cmp	r0, #1
    38f2:	d001      	beq.n	38f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    38f4:	2802      	cmp	r0, #2
    38f6:	d105      	bne.n	3904 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    38f8:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    38fc:	2801      	cmp	r0, #1
    38fe:	d003      	beq.n	3908 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    3900:	2803      	cmp	r0, #3
    3902:	d001      	beq.n	3908 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    3904:	2000      	movs	r0, #0
    3906:	bd10      	pop	{r4, pc}
    3908:	2001      	movs	r0, #1
    390a:	bd10      	pop	{r4, pc}
    390c:	200000ec 	.word	0x200000ec
    3910:	b510      	push	{r4, lr}
    3912:	4c07      	ldr	r4, [pc, #28]	; (3930 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    3914:	6860      	ldr	r0, [r4, #4]
    3916:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    391a:	2800      	cmp	r0, #0
    391c:	d007      	beq.n	392e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    391e:	f004 fad1 	bl	7ec4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3922:	f004 f8f5 	bl	7b10 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3926:	6861      	ldr	r1, [r4, #4]
    3928:	2000      	movs	r0, #0
    392a:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    392e:	bd10      	pop	{r4, pc}
    3930:	200000ec 	.word	0x200000ec
    3934:	2000      	movs	r0, #0
    3936:	7048      	strb	r0, [r1, #1]
    3938:	2007      	movs	r0, #7
    393a:	7008      	strb	r0, [r1, #0]
    393c:	4802      	ldr	r0, [pc, #8]	; (3948 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x74>)
    393e:	6840      	ldr	r0, [r0, #4]
    3940:	6b40      	ldr	r0, [r0, #52]	; 0x34
    3942:	6048      	str	r0, [r1, #4]
    3944:	4770      	bx	lr
    3946:	0000      	.short	0x0000
    3948:	200000ec 	.word	0x200000ec
    394c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3950:	4d10      	ldr	r5, [pc, #64]	; (3994 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc0>)
    3952:	4606      	mov	r6, r0
    3954:	460f      	mov	r7, r1
    3956:	6868      	ldr	r0, [r5, #4]
    3958:	490f      	ldr	r1, [pc, #60]	; (3998 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc4>)
    395a:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    395e:	5c0c      	ldrb	r4, [r1, r0]
    3960:	4620      	mov	r0, r4
    3962:	f004 fdf5 	bl	8550 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    3966:	6868      	ldr	r0, [r5, #4]
    3968:	2101      	movs	r1, #1
    396a:	f880 4089 	strb.w	r4, [r0, #137]	; 0x89
    396e:	2025      	movs	r0, #37	; 0x25
    3970:	f004 fdc4 	bl	84fc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    3974:	4638      	mov	r0, r7
    3976:	f004 fcf7 	bl	8368 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    397a:	f04f 0101 	mov.w	r1, #1
    397e:	4608      	mov	r0, r1
    3980:	b126      	cbz	r6, 398c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb8>
    3982:	f004 fb4b 	bl	801c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    3986:	b918      	cbnz	r0, 3990 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbc>
    3988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    398c:	f004 fb0c 	bl	7fa8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    3990:	2001      	movs	r0, #1
    3992:	e7f9      	b.n	3988 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb4>
    3994:	200000ec 	.word	0x200000ec
    3998:	00011267 	.word	0x00011267
    399c:	b570      	push	{r4, r5, r6, lr}
    399e:	4e1a      	ldr	r6, [pc, #104]	; (3a08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
    39a0:	460c      	mov	r4, r1
    39a2:	6870      	ldr	r0, [r6, #4]
    39a4:	7a41      	ldrb	r1, [r0, #9]
    39a6:	b191      	cbz	r1, 39ce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xfa>
    39a8:	8940      	ldrh	r0, [r0, #10]
    39aa:	2100      	movs	r1, #0
    39ac:	f7fd fb18 	bl	fe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    39b0:	0005      	movs	r5, r0
    39b2:	d025      	beq.n	3a00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
    39b4:	8828      	ldrh	r0, [r5, #0]
    39b6:	f00a fa30 	bl	de1a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    39ba:	8828      	ldrh	r0, [r5, #0]
    39bc:	2100      	movs	r1, #0
    39be:	f7fd fba5 	bl	110c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    39c2:	b188      	cbz	r0, 39e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x114>
    39c4:	f240 31f7 	movw	r1, #1015	; 0x3f7
    39c8:	2032      	movs	r0, #50	; 0x32
    39ca:	f7fd f827 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    39ce:	6d41      	ldr	r1, [r0, #84]	; 0x54
    39d0:	f8d0 200e 	ldr.w	r2, [r0, #14]
    39d4:	f841 2f03 	str.w	r2, [r1, #3]!
    39d8:	8a42      	ldrh	r2, [r0, #18]
    39da:	808a      	strh	r2, [r1, #4]
    39dc:	7b40      	ldrb	r0, [r0, #13]
    39de:	f00b fa1d 	bl	ee1c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    39e2:	6871      	ldr	r1, [r6, #4]
    39e4:	6d49      	ldr	r1, [r1, #84]	; 0x54
    39e6:	7088      	strb	r0, [r1, #2]
    39e8:	2500      	movs	r5, #0
    39ea:	7065      	strb	r5, [r4, #1]
    39ec:	2015      	movs	r0, #21
    39ee:	7020      	strb	r0, [r4, #0]
    39f0:	6871      	ldr	r1, [r6, #4]
    39f2:	2221      	movs	r2, #33	; 0x21
    39f4:	1d20      	adds	r0, r4, #4
    39f6:	3109      	adds	r1, #9
    39f8:	f00d fb01 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    39fc:	71e5      	strb	r5, [r4, #7]
    39fe:	bd70      	pop	{r4, r5, r6, pc}
    3a00:	f240 31f3 	movw	r1, #1011	; 0x3f3
    3a04:	e7e0      	b.n	39c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf4>
    3a06:	0000      	.short	0x0000
    3a08:	200000ec 	.word	0x200000ec
    3a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a0e:	2600      	movs	r6, #0
    3a10:	460f      	mov	r7, r1
    3a12:	4605      	mov	r5, r0
    3a14:	f88d 6000 	strb.w	r6, [sp]
    3a18:	466b      	mov	r3, sp
    3a1a:	f000 f895 	bl	3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>
    3a1e:	0001      	movs	r1, r0
    3a20:	4810      	ldr	r0, [pc, #64]	; (3a64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x190>)
    3a22:	d003      	beq.n	3a2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x158>
    3a24:	6840      	ldr	r0, [r0, #4]
    3a26:	f880 6081 	strb.w	r6, [r0, #129]	; 0x81
    3a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a2c:	6840      	ldr	r0, [r0, #4]
    3a2e:	f89d 1000 	ldrb.w	r1, [sp]
    3a32:	2f07      	cmp	r7, #7
    3a34:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    3a38:	d301      	bcc.n	3a3e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16a>
    3a3a:	4634      	mov	r4, r6
    3a3c:	e002      	b.n	3a44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x170>
    3a3e:	0022      	movs	r2, r4
    3a40:	d100      	bne.n	3a44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x170>
    3a42:	460c      	mov	r4, r1
    3a44:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
    3a48:	6869      	ldr	r1, [r5, #4]
    3a4a:	2900      	cmp	r1, #0
    3a4c:	d0ed      	beq.n	3a2a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x156>
    3a4e:	7c69      	ldrb	r1, [r5, #17]
    3a50:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    3a54:	6869      	ldr	r1, [r5, #4]
    3a56:	680a      	ldr	r2, [r1, #0]
    3a58:	f840 2f83 	str.w	r2, [r0, #131]!
    3a5c:	8889      	ldrh	r1, [r1, #4]
    3a5e:	8081      	strh	r1, [r0, #4]
    3a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a62:	0000      	.short	0x0000
    3a64:	200000ec 	.word	0x200000ec
    3a68:	b510      	push	{r4, lr}
    3a6a:	4915      	ldr	r1, [pc, #84]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3a6c:	6842      	ldr	r2, [r0, #4]
    3a6e:	6849      	ldr	r1, [r1, #4]
    3a70:	7813      	ldrb	r3, [r2, #0]
    3a72:	f891 4083 	ldrb.w	r4, [r1, #131]	; 0x83
    3a76:	42a3      	cmp	r3, r4
    3a78:	d11f      	bne.n	3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
    3a7a:	7853      	ldrb	r3, [r2, #1]
    3a7c:	f891 4084 	ldrb.w	r4, [r1, #132]	; 0x84
    3a80:	42a3      	cmp	r3, r4
    3a82:	d11a      	bne.n	3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
    3a84:	7893      	ldrb	r3, [r2, #2]
    3a86:	f891 4085 	ldrb.w	r4, [r1, #133]	; 0x85
    3a8a:	42a3      	cmp	r3, r4
    3a8c:	d115      	bne.n	3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
    3a8e:	78d3      	ldrb	r3, [r2, #3]
    3a90:	f891 4086 	ldrb.w	r4, [r1, #134]	; 0x86
    3a94:	42a3      	cmp	r3, r4
    3a96:	d110      	bne.n	3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
    3a98:	7913      	ldrb	r3, [r2, #4]
    3a9a:	f891 4087 	ldrb.w	r4, [r1, #135]	; 0x87
    3a9e:	42a3      	cmp	r3, r4
    3aa0:	d10b      	bne.n	3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
    3aa2:	7952      	ldrb	r2, [r2, #5]
    3aa4:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
    3aa8:	429a      	cmp	r2, r3
    3aaa:	d106      	bne.n	3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
    3aac:	7c40      	ldrb	r0, [r0, #17]
    3aae:	f891 108a 	ldrb.w	r1, [r1, #138]	; 0x8a
    3ab2:	4288      	cmp	r0, r1
    3ab4:	d101      	bne.n	3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
    3ab6:	2001      	movs	r0, #1
    3ab8:	bd10      	pop	{r4, pc}
    3aba:	2000      	movs	r0, #0
    3abc:	bd10      	pop	{r4, pc}
    3abe:	0000      	.short	0x0000
    3ac0:	200000ec 	.word	0x200000ec
    3ac4:	b510      	push	{r4, lr}
    3ac6:	7801      	ldrb	r1, [r0, #0]
    3ac8:	b08c      	sub	sp, #48	; 0x30
    3aca:	f001 040f 	and.w	r4, r1, #15
    3ace:	4622      	mov	r2, r4
    3ad0:	a901      	add	r1, sp, #4
    3ad2:	f000 ff15 	bl	4900 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    3ad6:	f004 fa17 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3ada:	f000 fbb5 	bl	4248 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x248>
    3ade:	2c04      	cmp	r4, #4
    3ae0:	d114      	bne.n	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
    3ae2:	a801      	add	r0, sp, #4
    3ae4:	f7ff ffc0 	bl	3a68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x194>
    3ae8:	b180      	cbz	r0, 3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
    3aea:	a80b      	add	r0, sp, #44	; 0x2c
    3aec:	f000 fbb4 	bl	4258 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x258>
    3af0:	f99d 002c 	ldrsb.w	r0, [sp, #44]	; 0x2c
    3af4:	9000      	str	r0, [sp, #0]
    3af6:	4807      	ldr	r0, [pc, #28]	; (3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>)
    3af8:	6840      	ldr	r0, [r0, #4]
    3afa:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    3afe:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
    3b02:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    3b06:	a801      	add	r0, sp, #4
    3b08:	f00b fa88 	bl	f01c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    3b0c:	b00c      	add	sp, #48	; 0x30
    3b0e:	2005      	movs	r0, #5
    3b10:	bd10      	pop	{r4, pc}
    3b12:	0000      	.short	0x0000
    3b14:	200000ec 	.word	0x200000ec
    3b18:	4804      	ldr	r0, [pc, #16]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
    3b1a:	6840      	ldr	r0, [r0, #4]
    3b1c:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3b20:	2803      	cmp	r0, #3
    3b22:	d001      	beq.n	3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>
    3b24:	2000      	movs	r0, #0
    3b26:	4770      	bx	lr
    3b28:	2001      	movs	r0, #1
    3b2a:	4770      	bx	lr
    3b2c:	200000ec 	.word	0x200000ec
    3b30:	7c82      	ldrb	r2, [r0, #18]
    3b32:	6883      	ldr	r3, [r0, #8]
    3b34:	4803      	ldr	r0, [pc, #12]	; (3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>)
    3b36:	6841      	ldr	r1, [r0, #4]
    3b38:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3b3c:	314a      	adds	r1, #74	; 0x4a
    3b3e:	f00a b970 	b.w	de22 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3b42:	0000      	.short	0x0000
    3b44:	200000ec 	.word	0x200000ec
    3b48:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    3b4a:	6841      	ldr	r1, [r0, #4]
    3b4c:	461e      	mov	r6, r3
    3b4e:	4604      	mov	r4, r0
    3b50:	b301      	cbz	r1, 3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>
    3b52:	7c60      	ldrb	r0, [r4, #17]
    3b54:	f00b f957 	bl	ee06 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3b58:	4d19      	ldr	r5, [pc, #100]	; (3bc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x128>)
    3b5a:	6869      	ldr	r1, [r5, #4]
    3b5c:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
    3b60:	b141      	cbz	r1, 3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
    3b62:	b138      	cbz	r0, 3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
    3b64:	f00a fa0f 	bl	df86 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    3b68:	6869      	ldr	r1, [r5, #4]
    3b6a:	f801 0f78 	strb.w	r0, [r1, #120]!
    3b6e:	7048      	strb	r0, [r1, #1]
    3b70:	2001      	movs	r0, #1
    3b72:	71c8      	strb	r0, [r1, #7]
    3b74:	6868      	ldr	r0, [r5, #4]
    3b76:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3b7a:	28ff      	cmp	r0, #255	; 0xff
    3b7c:	d00c      	beq.n	3b98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x100>
    3b7e:	466a      	mov	r2, sp
    3b80:	a902      	add	r1, sp, #8
    3b82:	f7fe fbb7 	bl	22f4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3b86:	b1a8      	cbz	r0, 3bb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11c>
    3b88:	4669      	mov	r1, sp
    3b8a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3b8e:	f00b f90e 	bl	edae <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    3b92:	7030      	strb	r0, [r6, #0]
    3b94:	2000      	movs	r0, #0
    3b96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3b98:	7c60      	ldrb	r0, [r4, #17]
    3b9a:	6861      	ldr	r1, [r4, #4]
    3b9c:	f00b f907 	bl	edae <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    3ba0:	7030      	strb	r0, [r6, #0]
    3ba2:	686a      	ldr	r2, [r5, #4]
    3ba4:	7c60      	ldrb	r0, [r4, #17]
    3ba6:	6861      	ldr	r1, [r4, #4]
    3ba8:	3278      	adds	r2, #120	; 0x78
    3baa:	f7fe fc35 	bl	2418 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    3bae:	f080 0001 	eor.w	r0, r0, #1
    3bb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3bb4:	f640 5135 	movw	r1, #3381	; 0xd35
    3bb8:	2032      	movs	r0, #50	; 0x32
    3bba:	f7fc ff2f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3bbe:	0000      	.short	0x0000
    3bc0:	200000ec 	.word	0x200000ec
    3bc4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3bc8:	4c41      	ldr	r4, [pc, #260]	; (3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>)
    3bca:	2500      	movs	r5, #0
    3bcc:	466f      	mov	r7, sp
    3bce:	6860      	ldr	r0, [r4, #4]
    3bd0:	7245      	strb	r5, [r0, #9]
    3bd2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3bd4:	880a      	ldrh	r2, [r1, #0]
    3bd6:	8142      	strh	r2, [r0, #10]
    3bd8:	6908      	ldr	r0, [r1, #16]
    3bda:	f00a fa43 	bl	e064 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3bde:	6861      	ldr	r1, [r4, #4]
    3be0:	f821 0f20 	strh.w	r0, [r1, #32]!
    3be4:	6b48      	ldr	r0, [r1, #52]	; 0x34
    3be6:	8b02      	ldrh	r2, [r0, #24]
    3be8:	804a      	strh	r2, [r1, #2]
    3bea:	8b40      	ldrh	r0, [r0, #26]
    3bec:	8088      	strh	r0, [r1, #4]
    3bee:	718d      	strb	r5, [r1, #6]
    3bf0:	20ff      	movs	r0, #255	; 0xff
    3bf2:	71c8      	strb	r0, [r1, #7]
    3bf4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3bf8:	8108      	strh	r0, [r1, #8]
    3bfa:	4669      	mov	r1, sp
    3bfc:	68a0      	ldr	r0, [r4, #8]
    3bfe:	f00a fc6f 	bl	e4e0 <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>
    3c02:	68a0      	ldr	r0, [r4, #8]
    3c04:	7800      	ldrb	r0, [r0, #0]
    3c06:	f3c0 1680 	ubfx	r6, r0, #6, #1
    3c0a:	6860      	ldr	r0, [r4, #4]
    3c0c:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3c10:	b120      	cbz	r0, 3c1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x184>
    3c12:	4639      	mov	r1, r7
    3c14:	4630      	mov	r0, r6
    3c16:	f00b f8f6 	bl	ee06 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3c1a:	b940      	cbnz	r0, 3c2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x196>
    3c1c:	6860      	ldr	r0, [r4, #4]
    3c1e:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
    3c22:	b158      	cbz	r0, 3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>
    3c24:	4639      	mov	r1, r7
    3c26:	4630      	mov	r0, r6
    3c28:	f00b f8e4 	bl	edf4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    3c2c:	b130      	cbz	r0, 3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>
    3c2e:	6860      	ldr	r0, [r4, #4]
    3c30:	9900      	ldr	r1, [sp, #0]
    3c32:	6141      	str	r1, [r0, #20]
    3c34:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3c38:	8301      	strh	r1, [r0, #24]
    3c3a:	e002      	b.n	3c42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1aa>
    3c3c:	6860      	ldr	r0, [r4, #4]
    3c3e:	6145      	str	r5, [r0, #20]
    3c40:	8305      	strh	r5, [r0, #24]
    3c42:	6861      	ldr	r1, [r4, #4]
    3c44:	f891 0079 	ldrb.w	r0, [r1, #121]	; 0x79
    3c48:	28ff      	cmp	r0, #255	; 0xff
    3c4a:	d017      	beq.n	3c7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e4>
    3c4c:	f101 020e 	add.w	r2, r1, #14
    3c50:	310d      	adds	r1, #13
    3c52:	f7fe fb4f 	bl	22f4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3c56:	b160      	cbz	r0, 3c72 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1da>
    3c58:	6860      	ldr	r0, [r4, #4]
    3c5a:	7b41      	ldrb	r1, [r0, #13]
    3c5c:	f041 0102 	orr.w	r1, r1, #2
    3c60:	7341      	strb	r1, [r0, #13]
    3c62:	f8d0 1083 	ldr.w	r1, [r0, #131]	; 0x83
    3c66:	f8c0 101a 	str.w	r1, [r0, #26]
    3c6a:	f8b0 1087 	ldrh.w	r1, [r0, #135]	; 0x87
    3c6e:	83c1      	strh	r1, [r0, #30]
    3c70:	e011      	b.n	3c96 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fe>
    3c72:	f241 51ad 	movw	r1, #5549	; 0x15ad
    3c76:	2032      	movs	r0, #50	; 0x32
    3c78:	f7fc fed0 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c7c:	f891 008a 	ldrb.w	r0, [r1, #138]	; 0x8a
    3c80:	7348      	strb	r0, [r1, #13]
    3c82:	f8d1 0083 	ldr.w	r0, [r1, #131]	; 0x83
    3c86:	f8c1 000e 	str.w	r0, [r1, #14]
    3c8a:	f8b1 0087 	ldrh.w	r0, [r1, #135]	; 0x87
    3c8e:	8248      	strh	r0, [r1, #18]
    3c90:	f8c1 501a 	str.w	r5, [r1, #26]
    3c94:	83cd      	strh	r5, [r1, #30]
    3c96:	6860      	ldr	r0, [r4, #4]
    3c98:	f990 105e 	ldrsb.w	r1, [r0, #94]	; 0x5e
    3c9c:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3c9e:	f00a faa2 	bl	e1e6 <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>
    3ca2:	2202      	movs	r2, #2
    3ca4:	490b      	ldr	r1, [pc, #44]	; (3cd4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x23c>)
    3ca6:	6860      	ldr	r0, [r4, #4]
    3ca8:	f00a fd13 	bl	e6d2 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3cac:	6860      	ldr	r0, [r4, #4]
    3cae:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3cb0:	302a      	adds	r0, #42	; 0x2a
    3cb2:	880a      	ldrh	r2, [r1, #0]
    3cb4:	4908      	ldr	r1, [pc, #32]	; (3cd8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x240>)
    3cb6:	868a      	strh	r2, [r1, #52]	; 0x34
    3cb8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    3cba:	f892 20ad 	ldrb.w	r2, [r2, #173]	; 0xad
    3cbe:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
    3cc2:	2202      	movs	r2, #2
    3cc4:	4905      	ldr	r1, [pc, #20]	; (3cdc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x244>)
    3cc6:	f00a fd18 	bl	e6fa <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    3cca:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    3cce:	0000      	.short	0x0000
    3cd0:	200000ec 	.word	0x200000ec
    3cd4:	0000399d 	.word	0x0000399d
    3cd8:	20000b48 	.word	0x20000b48
    3cdc:	00003935 	.word	0x00003935
    3ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ce4:	4c4c      	ldr	r4, [pc, #304]	; (3e18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x380>)
    3ce6:	4606      	mov	r6, r0
    3ce8:	2100      	movs	r1, #0
    3cea:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
    3cee:	3570      	adds	r5, #112	; 0x70
    3cf0:	8001      	strh	r1, [r0, #0]
    3cf2:	2e03      	cmp	r6, #3
    3cf4:	d002      	beq.n	3cfc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x264>
    3cf6:	2e05      	cmp	r6, #5
    3cf8:	d004      	beq.n	3d04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26c>
    3cfa:	e051      	b.n	3da0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x308>
    3cfc:	2103      	movs	r1, #3
    3cfe:	f00a fc06 	bl	e50e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3d02:	e04d      	b.n	3da0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x308>
    3d04:	2105      	movs	r1, #5
    3d06:	f00a fc02 	bl	e50e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3d0a:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3d0e:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3d10:	6949      	ldr	r1, [r1, #20]
    3d12:	f8c7 100f 	str.w	r1, [r7, #15]
    3d16:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3d18:	69c9      	ldr	r1, [r1, #28]
    3d1a:	74f9      	strb	r1, [r7, #19]
    3d1c:	0a0a      	lsrs	r2, r1, #8
    3d1e:	753a      	strb	r2, [r7, #20]
    3d20:	0c09      	lsrs	r1, r1, #16
    3d22:	7579      	strb	r1, [r7, #21]
    3d24:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3d26:	6901      	ldr	r1, [r0, #16]
    3d28:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    3d2a:	f00a fb13 	bl	e354 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    3d2e:	75b8      	strb	r0, [r7, #22]
    3d30:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3d34:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3d36:	6901      	ldr	r1, [r0, #16]
    3d38:	6a00      	ldr	r0, [r0, #32]
    3d3a:	f00a faf4 	bl	e326 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    3d3e:	75f8      	strb	r0, [r7, #23]
    3d40:	0a00      	lsrs	r0, r0, #8
    3d42:	7638      	strb	r0, [r7, #24]
    3d44:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3d48:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3d4a:	6900      	ldr	r0, [r0, #16]
    3d4c:	f00a f98a 	bl	e064 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3d50:	7678      	strb	r0, [r7, #25]
    3d52:	0a00      	lsrs	r0, r0, #8
    3d54:	76b8      	strb	r0, [r7, #26]
    3d56:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3d5a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3d5c:	8b09      	ldrh	r1, [r1, #24]
    3d5e:	f807 1f1b 	strb.w	r1, [r7, #27]!
    3d62:	0a09      	lsrs	r1, r1, #8
    3d64:	7079      	strb	r1, [r7, #1]
    3d66:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3d68:	8b49      	ldrh	r1, [r1, #26]
    3d6a:	70b9      	strb	r1, [r7, #2]
    3d6c:	0a09      	lsrs	r1, r1, #8
    3d6e:	70f9      	strb	r1, [r7, #3]
    3d70:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3d72:	f851 2fae 	ldr.w	r2, [r1, #174]!
    3d76:	607a      	str	r2, [r7, #4]
    3d78:	7909      	ldrb	r1, [r1, #4]
    3d7a:	7239      	strb	r1, [r7, #8]
    3d7c:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3d7e:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
    3d82:	7a78      	ldrb	r0, [r7, #9]
    3d84:	f001 011f 	and.w	r1, r1, #31
    3d88:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    3d8c:	4308      	orrs	r0, r1
    3d8e:	7278      	strb	r0, [r7, #9]
    3d90:	f003 fe44 	bl	7a1c <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    3d94:	7a79      	ldrb	r1, [r7, #9]
    3d96:	f001 011f 	and.w	r1, r1, #31
    3d9a:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    3d9e:	7279      	strb	r1, [r7, #9]
    3da0:	f105 0113 	add.w	r1, r5, #19
    3da4:	68a0      	ldr	r0, [r4, #8]
    3da6:	f00a fbcd 	bl	e544 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3daa:	7ea9      	ldrb	r1, [r5, #26]
    3dac:	68a0      	ldr	r0, [r4, #8]
    3dae:	f00a fbcf 	bl	e550 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3db2:	6860      	ldr	r0, [r4, #4]
    3db4:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    3db8:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3dbc:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3dc0:	b188      	cbz	r0, 3de6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34e>
    3dc2:	f7ff fea9 	bl	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
    3dc6:	b130      	cbz	r0, 3dd6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x33e>
    3dc8:	6860      	ldr	r0, [r4, #4]
    3dca:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3dce:	b111      	cbz	r1, 3dd6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x33e>
    3dd0:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3dd4:	e002      	b.n	3ddc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x344>
    3dd6:	6860      	ldr	r0, [r4, #4]
    3dd8:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3ddc:	f7fe fa56 	bl	228c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    3de0:	b108      	cbz	r0, 3de6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34e>
    3de2:	2701      	movs	r7, #1
    3de4:	4605      	mov	r5, r0
    3de6:	4629      	mov	r1, r5
    3de8:	68a0      	ldr	r0, [r4, #8]
    3dea:	f00a fbb8 	bl	e55e <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    3dee:	4639      	mov	r1, r7
    3df0:	68a0      	ldr	r0, [r4, #8]
    3df2:	f00a fbba 	bl	e56a <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    3df6:	68a0      	ldr	r0, [r4, #8]
    3df8:	f004 fab6 	bl	8368 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3dfc:	2e05      	cmp	r6, #5
    3dfe:	d108      	bne.n	3e12 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x37a>
    3e00:	6860      	ldr	r0, [r4, #4]
    3e02:	682a      	ldr	r2, [r5, #0]
    3e04:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3e06:	f8c1 200a 	str.w	r2, [r1, #10]
    3e0a:	88aa      	ldrh	r2, [r5, #4]
    3e0c:	81ca      	strh	r2, [r1, #14]
    3e0e:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3e10:	7247      	strb	r7, [r0, #9]
    3e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e16:	0000      	.short	0x0000
    3e18:	200000ec 	.word	0x200000ec
    3e1c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3e20:	4f65      	ldr	r7, [pc, #404]	; (3fb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x520>)
    3e22:	4604      	mov	r4, r0
    3e24:	6878      	ldr	r0, [r7, #4]
    3e26:	f890 8081 	ldrb.w	r8, [r0, #129]	; 0x81
    3e2a:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3e2e:	b180      	cbz	r0, 3e52 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3ba>
    3e30:	2600      	movs	r6, #0
    3e32:	2500      	movs	r5, #0
    3e34:	7ca0      	ldrb	r0, [r4, #18]
    3e36:	68a1      	ldr	r1, [r4, #8]
    3e38:	f00a ffe5 	bl	ee06 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3e3c:	4682      	mov	sl, r0
    3e3e:	f7ff fe6b 	bl	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
    3e42:	b140      	cbz	r0, 3e56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3be>
    3e44:	6878      	ldr	r0, [r7, #4]
    3e46:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3e4a:	b121      	cbz	r1, 3e56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3be>
    3e4c:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3e50:	e004      	b.n	3e5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c4>
    3e52:	2601      	movs	r6, #1
    3e54:	e7ed      	b.n	3e32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x39a>
    3e56:	6878      	ldr	r0, [r7, #4]
    3e58:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3e5c:	4683      	mov	fp, r0
    3e5e:	f7fe f9a1 	bl	21a4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    3e62:	ea5f 0900 	movs.w	r9, r0
    3e66:	d00c      	beq.n	3e82 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3ea>
    3e68:	4658      	mov	r0, fp
    3e6a:	f7fe f98f 	bl	218c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    3e6e:	b100      	cbz	r0, 3e72 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3da>
    3e70:	2601      	movs	r6, #1
    3e72:	f1ba 0f00 	cmp.w	sl, #0
    3e76:	d004      	beq.n	3e82 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3ea>
    3e78:	4648      	mov	r0, r9
    3e7a:	68a1      	ldr	r1, [r4, #8]
    3e7c:	f00a f836 	bl	deec <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    3e80:	4605      	mov	r5, r0
    3e82:	6878      	ldr	r0, [r7, #4]
    3e84:	46b9      	mov	r9, r7
    3e86:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3e8a:	b10d      	cbz	r5, 3e90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3f8>
    3e8c:	f047 0702 	orr.w	r7, r7, #2
    3e90:	f7ff fe42 	bl	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
    3e94:	b3a0      	cbz	r0, 3f00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x468>
    3e96:	6860      	ldr	r0, [r4, #4]
    3e98:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3e9c:	7802      	ldrb	r2, [r0, #0]
    3e9e:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3ea2:	429a      	cmp	r2, r3
    3ea4:	d11f      	bne.n	3ee6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44e>
    3ea6:	7842      	ldrb	r2, [r0, #1]
    3ea8:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3eac:	429a      	cmp	r2, r3
    3eae:	d11a      	bne.n	3ee6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44e>
    3eb0:	7882      	ldrb	r2, [r0, #2]
    3eb2:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3eb6:	429a      	cmp	r2, r3
    3eb8:	d115      	bne.n	3ee6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44e>
    3eba:	78c2      	ldrb	r2, [r0, #3]
    3ebc:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3ec0:	429a      	cmp	r2, r3
    3ec2:	d110      	bne.n	3ee6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44e>
    3ec4:	7902      	ldrb	r2, [r0, #4]
    3ec6:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3eca:	429a      	cmp	r2, r3
    3ecc:	d10b      	bne.n	3ee6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44e>
    3ece:	7940      	ldrb	r0, [r0, #5]
    3ed0:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    3ed4:	4290      	cmp	r0, r2
    3ed6:	d106      	bne.n	3ee6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44e>
    3ed8:	7c60      	ldrb	r0, [r4, #17]
    3eda:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    3ede:	4288      	cmp	r0, r1
    3ee0:	d101      	bne.n	3ee6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44e>
    3ee2:	2001      	movs	r0, #1
    3ee4:	e000      	b.n	3ee8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x450>
    3ee6:	2000      	movs	r0, #0
    3ee8:	4f34      	ldr	r7, [pc, #208]	; (3fbc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x524>)
    3eea:	4682      	mov	sl, r0
    3eec:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
    3ef0:	2808      	cmp	r0, #8
    3ef2:	d006      	beq.n	3f02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46a>
    3ef4:	f897 107b 	ldrb.w	r1, [r7, #123]	; 0x7b
    3ef8:	4288      	cmp	r0, r1
    3efa:	d102      	bne.n	3f02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46a>
    3efc:	2001      	movs	r0, #1
    3efe:	e001      	b.n	3f04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46c>
    3f00:	e021      	b.n	3f46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4ae>
    3f02:	2000      	movs	r0, #0
    3f04:	4681      	mov	r9, r0
    3f06:	b925      	cbnz	r5, 3f12 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x47a>
    3f08:	b12e      	cbz	r6, 3f16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x47e>
    3f0a:	4620      	mov	r0, r4
    3f0c:	f7ff fe10 	bl	3b30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x98>
    3f10:	b108      	cbz	r0, 3f16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x47e>
    3f12:	2001      	movs	r0, #1
    3f14:	e000      	b.n	3f18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x480>
    3f16:	2000      	movs	r0, #0
    3f18:	f1b8 0f00 	cmp.w	r8, #0
    3f1c:	d009      	beq.n	3f32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x49a>
    3f1e:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
    3f22:	2901      	cmp	r1, #1
    3f24:	d003      	beq.n	3f2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x496>
    3f26:	b921      	cbnz	r1, 3f32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x49a>
    3f28:	ea5a 0109 	orrs.w	r1, sl, r9
    3f2c:	d001      	beq.n	3f32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x49a>
    3f2e:	2101      	movs	r1, #1
    3f30:	e000      	b.n	3f34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x49c>
    3f32:	2100      	movs	r1, #0
    3f34:	4208      	tst	r0, r1
    3f36:	d003      	beq.n	3f40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a8>
    3f38:	200c      	movs	r0, #12
    3f3a:	b004      	add	sp, #16
    3f3c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3f40:	f003 ffe2 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3f44:	e036      	b.n	3fb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x51c>
    3f46:	f003 ffdf 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3f4a:	f1b8 0f00 	cmp.w	r8, #0
    3f4e:	d031      	beq.n	3fb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x51c>
    3f50:	4620      	mov	r0, r4
    3f52:	f7ff fded 	bl	3b30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x98>
    3f56:	b900      	cbnz	r0, 3f5a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c2>
    3f58:	b175      	cbz	r5, 3f78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e0>
    3f5a:	a803      	add	r0, sp, #12
    3f5c:	f000 f97c 	bl	4258 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x258>
    3f60:	f8d9 2004 	ldr.w	r2, [r9, #4]
    3f64:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3f68:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3f6c:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    3f70:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3f74:	463b      	mov	r3, r7
    3f76:	e018      	b.n	3faa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x512>
    3f78:	f8d9 0004 	ldr.w	r0, [r9, #4]
    3f7c:	464d      	mov	r5, r9
    3f7e:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    3f82:	2803      	cmp	r0, #3
    3f84:	d001      	beq.n	3f8a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4f2>
    3f86:	2802      	cmp	r0, #2
    3f88:	d114      	bne.n	3fb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x51c>
    3f8a:	f1ba 0f00 	cmp.w	sl, #0
    3f8e:	d011      	beq.n	3fb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x51c>
    3f90:	a803      	add	r0, sp, #12
    3f92:	f000 f961 	bl	4258 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x258>
    3f96:	686a      	ldr	r2, [r5, #4]
    3f98:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3f9c:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3fa0:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    3fa4:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3fa8:	23fe      	movs	r3, #254	; 0xfe
    3faa:	2101      	movs	r1, #1
    3fac:	4620      	mov	r0, r4
    3fae:	324a      	adds	r2, #74	; 0x4a
    3fb0:	f00a ffbc 	bl	ef2c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3fb4:	2005      	movs	r0, #5
    3fb6:	e7c0      	b.n	3f3a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a2>
    3fb8:	200000ec 	.word	0x200000ec
    3fbc:	20000b48 	.word	0x20000b48
    3fc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3fc2:	4c3f      	ldr	r4, [pc, #252]	; (40c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc0>)
    3fc4:	4605      	mov	r5, r0
    3fc6:	6860      	ldr	r0, [r4, #4]
    3fc8:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3fcc:	2900      	cmp	r1, #0
    3fce:	d06c      	beq.n	40aa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xaa>
    3fd0:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3fd4:	2802      	cmp	r0, #2
    3fd6:	d02c      	beq.n	4032 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x32>
    3fd8:	2801      	cmp	r0, #1
    3fda:	d043      	beq.n	4064 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x64>
    3fdc:	f7ff fd9c 	bl	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
    3fe0:	2800      	cmp	r0, #0
    3fe2:	d067      	beq.n	40b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb4>
    3fe4:	686a      	ldr	r2, [r5, #4]
    3fe6:	6861      	ldr	r1, [r4, #4]
    3fe8:	7810      	ldrb	r0, [r2, #0]
    3fea:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3fee:	4298      	cmp	r0, r3
    3ff0:	d14c      	bne.n	408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>
    3ff2:	7850      	ldrb	r0, [r2, #1]
    3ff4:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3ff8:	4298      	cmp	r0, r3
    3ffa:	d147      	bne.n	408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>
    3ffc:	7890      	ldrb	r0, [r2, #2]
    3ffe:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    4002:	4298      	cmp	r0, r3
    4004:	d142      	bne.n	408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>
    4006:	78d0      	ldrb	r0, [r2, #3]
    4008:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    400c:	4298      	cmp	r0, r3
    400e:	d13d      	bne.n	408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>
    4010:	7910      	ldrb	r0, [r2, #4]
    4012:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    4016:	4298      	cmp	r0, r3
    4018:	d138      	bne.n	408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>
    401a:	7950      	ldrb	r0, [r2, #5]
    401c:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    4020:	4290      	cmp	r0, r2
    4022:	d133      	bne.n	408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>
    4024:	7c68      	ldrb	r0, [r5, #17]
    4026:	f891 205f 	ldrb.w	r2, [r1, #95]	; 0x5f
    402a:	4290      	cmp	r0, r2
    402c:	d12e      	bne.n	408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>
    402e:	2001      	movs	r0, #1
    4030:	e02d      	b.n	408e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8e>
    4032:	a803      	add	r0, sp, #12
    4034:	f000 f910 	bl	4258 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x258>
    4038:	6862      	ldr	r2, [r4, #4]
    403a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    403e:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    4042:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    4046:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    404a:	23ff      	movs	r3, #255	; 0xff
    404c:	2100      	movs	r1, #0
    404e:	4628      	mov	r0, r5
    4050:	324a      	adds	r2, #74	; 0x4a
    4052:	f00a ff6b 	bl	ef2c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    4056:	6861      	ldr	r1, [r4, #4]
    4058:	2001      	movs	r0, #1
    405a:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    405e:	200b      	movs	r0, #11
    4060:	b004      	add	sp, #16
    4062:	bd70      	pop	{r4, r5, r6, pc}
    4064:	a803      	add	r0, sp, #12
    4066:	f000 f8f7 	bl	4258 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x258>
    406a:	6862      	ldr	r2, [r4, #4]
    406c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    4070:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    4074:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    4078:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    407c:	23ff      	movs	r3, #255	; 0xff
    407e:	2100      	movs	r1, #0
    4080:	4628      	mov	r0, r5
    4082:	324a      	adds	r2, #74	; 0x4a
    4084:	f00a ff52 	bl	ef2c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    4088:	2005      	movs	r0, #5
    408a:	e7e9      	b.n	4060 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60>
    408c:	2000      	movs	r0, #0
    408e:	f891 105a 	ldrb.w	r1, [r1, #90]	; 0x5a
    4092:	2901      	cmp	r1, #1
    4094:	d00c      	beq.n	40b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb0>
    4096:	b958      	cbnz	r0, 40b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb0>
    4098:	490a      	ldr	r1, [pc, #40]	; (40c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc4>)
    409a:	f891 007b 	ldrb.w	r0, [r1, #123]	; 0x7b
    409e:	2808      	cmp	r0, #8
    40a0:	d003      	beq.n	40aa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xaa>
    40a2:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    40a6:	4281      	cmp	r1, r0
    40a8:	d002      	beq.n	40b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb0>
    40aa:	f003 ff2d 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    40ae:	e7eb      	b.n	4088 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x88>
    40b0:	200c      	movs	r0, #12
    40b2:	e7d5      	b.n	4060 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60>
    40b4:	f640 61e6 	movw	r1, #3814	; 0xee6
    40b8:	2032      	movs	r0, #50	; 0x32
    40ba:	f7fc fcaf 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40be:	0000      	.short	0x0000
    40c0:	200000ec 	.word	0x200000ec
    40c4:	20000b48 	.word	0x20000b48
    40c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    40ca:	4c1e      	ldr	r4, [pc, #120]	; (4144 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x144>)
    40cc:	4605      	mov	r5, r0
    40ce:	6860      	ldr	r0, [r4, #4]
    40d0:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    40d4:	b129      	cbz	r1, 40e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe2>
    40d6:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    40da:	2802      	cmp	r0, #2
    40dc:	d004      	beq.n	40e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe8>
    40de:	2801      	cmp	r0, #1
    40e0:	d01b      	beq.n	411a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x11a>
    40e2:	f003 ff11 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    40e6:	e02a      	b.n	413e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x13e>
    40e8:	a803      	add	r0, sp, #12
    40ea:	f000 f8b5 	bl	4258 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x258>
    40ee:	6862      	ldr	r2, [r4, #4]
    40f0:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    40f4:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    40f8:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    40fc:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    4100:	23ff      	movs	r3, #255	; 0xff
    4102:	2106      	movs	r1, #6
    4104:	4628      	mov	r0, r5
    4106:	324a      	adds	r2, #74	; 0x4a
    4108:	f00a ff10 	bl	ef2c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    410c:	6862      	ldr	r2, [r4, #4]
    410e:	200b      	movs	r0, #11
    4110:	2100      	movs	r1, #0
    4112:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    4116:	b004      	add	sp, #16
    4118:	bd70      	pop	{r4, r5, r6, pc}
    411a:	a803      	add	r0, sp, #12
    411c:	f000 f89c 	bl	4258 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x258>
    4120:	6862      	ldr	r2, [r4, #4]
    4122:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    4126:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    412a:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    412e:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    4132:	23ff      	movs	r3, #255	; 0xff
    4134:	2106      	movs	r1, #6
    4136:	4628      	mov	r0, r5
    4138:	324a      	adds	r2, #74	; 0x4a
    413a:	f00a fef7 	bl	ef2c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    413e:	2005      	movs	r0, #5
    4140:	e7e9      	b.n	4116 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x116>
    4142:	0000      	.short	0x0000
    4144:	200000ec 	.word	0x200000ec
    4148:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    414a:	b389      	cbz	r1, 41b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b0>
    414c:	2901      	cmp	r1, #1
    414e:	d034      	beq.n	41ba <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ba>
    4150:	2505      	movs	r5, #5
    4152:	2902      	cmp	r1, #2
    4154:	d004      	beq.n	4160 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x160>
    4156:	2906      	cmp	r1, #6
    4158:	d025      	beq.n	41a6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a6>
    415a:	f003 fed5 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    415e:	e01f      	b.n	41a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a0>
    4160:	4606      	mov	r6, r0
    4162:	f003 fed1 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    4166:	4c17      	ldr	r4, [pc, #92]	; (41c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c4>)
    4168:	6860      	ldr	r0, [r4, #4]
    416a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    416e:	b1b9      	cbz	r1, 41a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a0>
    4170:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    4174:	2801      	cmp	r0, #1
    4176:	d001      	beq.n	417c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x17c>
    4178:	2802      	cmp	r0, #2
    417a:	d111      	bne.n	41a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a0>
    417c:	a803      	add	r0, sp, #12
    417e:	f000 f86b 	bl	4258 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x258>
    4182:	6862      	ldr	r2, [r4, #4]
    4184:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    4188:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    418c:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    4190:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    4194:	23ff      	movs	r3, #255	; 0xff
    4196:	2102      	movs	r1, #2
    4198:	4630      	mov	r0, r6
    419a:	324a      	adds	r2, #74	; 0x4a
    419c:	f00a fec6 	bl	ef2c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    41a0:	b004      	add	sp, #16
    41a2:	4628      	mov	r0, r5
    41a4:	bd70      	pop	{r4, r5, r6, pc}
    41a6:	b004      	add	sp, #16
    41a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41ac:	f7ff bf8c 	b.w	40c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc8>
    41b0:	b004      	add	sp, #16
    41b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41b6:	f7ff bf03 	b.w	3fc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x528>
    41ba:	b004      	add	sp, #16
    41bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41c0:	f7ff be2c 	b.w	3e1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x384>
    41c4:	200000ec 	.word	0x200000ec
    41c8:	b570      	push	{r4, r5, r6, lr}
    41ca:	4c11      	ldr	r4, [pc, #68]	; (4210 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x210>)
    41cc:	4605      	mov	r5, r0
    41ce:	6861      	ldr	r1, [r4, #4]
    41d0:	f891 005d 	ldrb.w	r0, [r1, #93]	; 0x5d
    41d4:	2800      	cmp	r0, #0
    41d6:	d019      	beq.n	420c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20c>
    41d8:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    41dc:	2800      	cmp	r0, #0
    41de:	d015      	beq.n	420c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20c>
    41e0:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    41e4:	314a      	adds	r1, #74	; 0x4a
    41e6:	f00a fe0e 	bl	ee06 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    41ea:	b140      	cbz	r0, 41fe <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1fe>
    41ec:	f7fd ffca 	bl	2184 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    41f0:	6861      	ldr	r1, [r4, #4]
    41f2:	462a      	mov	r2, r5
    41f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41f8:	314a      	adds	r1, #74	; 0x4a
    41fa:	f009 be42 	b.w	de82 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    41fe:	6860      	ldr	r0, [r4, #4]
    4200:	4629      	mov	r1, r5
    4202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4206:	304a      	adds	r0, #74	; 0x4a
    4208:	f009 be2a 	b.w	de60 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    420c:	bd70      	pop	{r4, r5, r6, pc}
    420e:	0000      	.short	0x0000
    4210:	200000ec 	.word	0x200000ec
    4214:	4602      	mov	r2, r0
    4216:	480b      	ldr	r0, [pc, #44]	; (4244 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x244>)
    4218:	b082      	sub	sp, #8
    421a:	6840      	ldr	r0, [r0, #4]
    421c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    4220:	f88d 1000 	strb.w	r1, [sp]
    4224:	9900      	ldr	r1, [sp, #0]
    4226:	9100      	str	r1, [sp, #0]
    4228:	f89d 1000 	ldrb.w	r1, [sp]
    422c:	2900      	cmp	r1, #0
    422e:	d107      	bne.n	4240 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x240>
    4230:	6e81      	ldr	r1, [r0, #104]	; 0x68
    4232:	2900      	cmp	r1, #0
    4234:	d004      	beq.n	4240 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x240>
    4236:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    423a:	b002      	add	sp, #8
    423c:	f007 ba2c 	b.w	b698 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4240:	b002      	add	sp, #8
    4242:	4770      	bx	lr
    4244:	200000ec 	.word	0x200000ec
    4248:	b510      	push	{r4, lr}
    424a:	f7fe fa73 	bl	2734 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    424e:	4901      	ldr	r1, [pc, #4]	; (4254 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x254>)
    4250:	7008      	strb	r0, [r1, #0]
    4252:	bd10      	pop	{r4, pc}
    4254:	200000ec 	.word	0x200000ec
    4258:	4a07      	ldr	r2, [pc, #28]	; (4278 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x278>)
    425a:	b510      	push	{r4, lr}
    425c:	f992 1000 	ldrsb.w	r1, [r2]
    4260:	297f      	cmp	r1, #127	; 0x7f
    4262:	d003      	beq.n	426c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x26c>
    4264:	7001      	strb	r1, [r0, #0]
    4266:	207f      	movs	r0, #127	; 0x7f
    4268:	7010      	strb	r0, [r2, #0]
    426a:	bd10      	pop	{r4, pc}
    426c:	f240 414d 	movw	r1, #1101	; 0x44d
    4270:	2032      	movs	r0, #50	; 0x32
    4272:	f7fc fbd3 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4276:	0000      	.short	0x0000
    4278:	200000ec 	.word	0x200000ec
    427c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4280:	4607      	mov	r7, r0
    4282:	f7fd f85d 	bl	1340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    4286:	4604      	mov	r4, r0
    4288:	f7fd f860 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    428c:	4621      	mov	r1, r4
    428e:	f00a fe28 	bl	eee2 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    4292:	0005      	movs	r5, r0
    4294:	d012      	beq.n	42bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2bc>
    4296:	4c2d      	ldr	r4, [pc, #180]	; (434c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34c>)
    4298:	6860      	ldr	r0, [r4, #4]
    429a:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    429e:	2801      	cmp	r0, #1
    42a0:	d004      	beq.n	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    42a2:	2802      	cmp	r0, #2
    42a4:	d002      	beq.n	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    42a6:	f7ff fc37 	bl	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
    42aa:	b150      	cbz	r0, 42c2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c2>
    42ac:	f06f 0613 	mvn.w	r6, #19
    42b0:	b33f      	cbz	r7, 4302 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x302>
    42b2:	4628      	mov	r0, r5
    42b4:	f00a f8fc 	bl	e4b0 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>
    42b8:	b950      	cbnz	r0, 42d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2d0>
    42ba:	e005      	b.n	42c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c8>
    42bc:	f241 5158 	movw	r1, #5464	; 0x1558
    42c0:	e03a      	b.n	4338 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x338>
    42c2:	f241 515e 	movw	r1, #5470	; 0x155e
    42c6:	e037      	b.n	4338 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x338>
    42c8:	4628      	mov	r0, r5
    42ca:	f00a f913 	bl	e4f4 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>
    42ce:	b1c0      	cbz	r0, 4302 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x302>
    42d0:	6861      	ldr	r1, [r4, #4]
    42d2:	4628      	mov	r0, r5
    42d4:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    42d8:	2a05      	cmp	r2, #5
    42da:	d202      	bcs.n	42e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e2>
    42dc:	f241 41dd 	movw	r1, #5341	; 0x14dd
    42e0:	e02a      	b.n	4338 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x338>
    42e2:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    42e6:	2a0b      	cmp	r2, #11
    42e8:	d302      	bcc.n	42f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2f0>
    42ea:	f241 41de 	movw	r1, #5342	; 0x14de
    42ee:	e023      	b.n	4338 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x338>
    42f0:	68e2      	ldr	r2, [r4, #12]
    42f2:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    42f6:	6952      	ldr	r2, [r2, #20]
    42f8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    42fc:	5851      	ldr	r1, [r2, r1]
    42fe:	4788      	blx	r1
    4300:	e016      	b.n	4330 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x330>
    4302:	6860      	ldr	r0, [r4, #4]
    4304:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    4308:	2905      	cmp	r1, #5
    430a:	d202      	bcs.n	4312 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x312>
    430c:	f241 514e 	movw	r1, #5454	; 0x154e
    4310:	e012      	b.n	4338 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x338>
    4312:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    4316:	290b      	cmp	r1, #11
    4318:	d302      	bcc.n	4320 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x320>
    431a:	f241 514f 	movw	r1, #5455	; 0x154f
    431e:	e00b      	b.n	4338 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x338>
    4320:	68e1      	ldr	r1, [r4, #12]
    4322:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4326:	6989      	ldr	r1, [r1, #24]
    4328:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    432c:	5808      	ldr	r0, [r1, r0]
    432e:	4780      	blx	r0
    4330:	280f      	cmp	r0, #15
    4332:	d304      	bcc.n	433e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x33e>
    4334:	f241 5173 	movw	r1, #5491	; 0x1573
    4338:	2032      	movs	r0, #50	; 0x32
    433a:	f7fc fb6f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    433e:	68e1      	ldr	r1, [r4, #12]
    4340:	6909      	ldr	r1, [r1, #16]
    4342:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    434a:	4700      	bx	r0
    434c:	200000ec 	.word	0x200000ec
    4350:	b510      	push	{r4, lr}
    4352:	b118      	cbz	r0, 435c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x35c>
    4354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4358:	f000 b918 	b.w	458c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58c>
    435c:	2900      	cmp	r1, #0
    435e:	d01d      	beq.n	439c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x39c>
    4360:	480f      	ldr	r0, [pc, #60]	; (43a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a0>)
    4362:	6841      	ldr	r1, [r0, #4]
    4364:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4368:	2a0b      	cmp	r2, #11
    436a:	d202      	bcs.n	4372 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x372>
    436c:	f241 612e 	movw	r1, #5678	; 0x162e
    4370:	e005      	b.n	437e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x37e>
    4372:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4376:	2a0f      	cmp	r2, #15
    4378:	d304      	bcc.n	4384 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x384>
    437a:	f241 612f 	movw	r1, #5679	; 0x162f
    437e:	2032      	movs	r0, #50	; 0x32
    4380:	f7fc fb4c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4384:	68c0      	ldr	r0, [r0, #12]
    4386:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    438a:	6880      	ldr	r0, [r0, #8]
    438c:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    4390:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4394:	5840      	ldr	r0, [r0, r1]
    4396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    439a:	4700      	bx	r0
    439c:	bd10      	pop	{r4, pc}
    439e:	0000      	.short	0x0000
    43a0:	200000ec 	.word	0x200000ec
    43a4:	b510      	push	{r4, lr}
    43a6:	f7ff fab3 	bl	3910 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    43aa:	f000 f8fd 	bl	45a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a8>
    43ae:	4805      	ldr	r0, [pc, #20]	; (43c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c4>)
    43b0:	6881      	ldr	r1, [r0, #8]
    43b2:	2000      	movs	r0, #0
    43b4:	f7ff fc06 	bl	3bc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12c>
    43b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    43bc:	2002      	movs	r0, #2
    43be:	f000 bad7 	b.w	4970 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    43c2:	0000      	.short	0x0000
    43c4:	200000ec 	.word	0x200000ec
    43c8:	b510      	push	{r4, lr}
    43ca:	f7fc ffb9 	bl	1340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    43ce:	4604      	mov	r4, r0
    43d0:	f7fc ffbc 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    43d4:	4621      	mov	r1, r4
    43d6:	f00a fd84 	bl	eee2 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    43da:	b150      	cbz	r0, 43f2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3f2>
    43dc:	f003 ffc4 	bl	8368 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    43e0:	2000      	movs	r0, #0
    43e2:	f003 fe87 	bl	80f4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    43e6:	4905      	ldr	r1, [pc, #20]	; (43fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3fc>)
    43e8:	2006      	movs	r0, #6
    43ea:	6849      	ldr	r1, [r1, #4]
    43ec:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    43f0:	bd10      	pop	{r4, pc}
    43f2:	f44f 61c6 	mov.w	r1, #1584	; 0x630
    43f6:	2032      	movs	r0, #50	; 0x32
    43f8:	f7fc fb10 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43fc:	200000ec 	.word	0x200000ec
    4400:	490f      	ldr	r1, [pc, #60]	; (4440 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x440>)
    4402:	b510      	push	{r4, lr}
    4404:	6848      	ldr	r0, [r1, #4]
    4406:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    440a:	2a05      	cmp	r2, #5
    440c:	d202      	bcs.n	4414 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x414>
    440e:	f241 6162 	movw	r1, #5730	; 0x1662
    4412:	e005      	b.n	4420 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x420>
    4414:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    4418:	2a0b      	cmp	r2, #11
    441a:	d304      	bcc.n	4426 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x426>
    441c:	f241 6163 	movw	r1, #5731	; 0x1663
    4420:	2032      	movs	r0, #50	; 0x32
    4422:	f7fc fafb 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4426:	68c9      	ldr	r1, [r1, #12]
    4428:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    442c:	68c9      	ldr	r1, [r1, #12]
    442e:	f06f 0213 	mvn.w	r2, #19
    4432:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    4436:	5808      	ldr	r0, [r1, r0]
    4438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    443c:	4700      	bx	r0
    443e:	0000      	.short	0x0000
    4440:	200000ec 	.word	0x200000ec
    4444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4448:	4c2c      	ldr	r4, [pc, #176]	; (44fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4fc>)
    444a:	4605      	mov	r5, r0
    444c:	460e      	mov	r6, r1
    444e:	6860      	ldr	r0, [r4, #4]
    4450:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4454:	b120      	cbz	r0, 4460 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x460>
    4456:	2801      	cmp	r0, #1
    4458:	d002      	beq.n	4460 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x460>
    445a:	200c      	movs	r0, #12
    445c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4460:	f003 fedc 	bl	821c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4464:	f003 fd2e 	bl	7ec4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4468:	f003 fb52 	bl	7b10 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    446c:	4824      	ldr	r0, [pc, #144]	; (4500 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x500>)
    446e:	f003 fe39 	bl	80e4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4472:	4824      	ldr	r0, [pc, #144]	; (4504 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x504>)
    4474:	f004 f83c 	bl	84f0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4478:	4823      	ldr	r0, [pc, #140]	; (4508 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x508>)
    447a:	f004 f82f 	bl	84dc <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    447e:	4630      	mov	r0, r6
    4480:	f003 ff72 	bl	8368 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4484:	7968      	ldrb	r0, [r5, #5]
    4486:	b110      	cbz	r0, 448e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48e>
    4488:	2001      	movs	r0, #1
    448a:	f7ff fec3 	bl	4214 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x214>
    448e:	7928      	ldrb	r0, [r5, #4]
    4490:	2803      	cmp	r0, #3
    4492:	d001      	beq.n	4498 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x498>
    4494:	b118      	cbz	r0, 449e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x49e>
    4496:	e018      	b.n	44ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4ca>
    4498:	f640 2152 	movw	r1, #2642	; 0xa52
    449c:	e02a      	b.n	44f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4f4>
    449e:	6861      	ldr	r1, [r4, #4]
    44a0:	2000      	movs	r0, #0
    44a2:	2503      	movs	r5, #3
    44a4:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    44a8:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
    44ac:	1c52      	adds	r2, r2, #1
    44ae:	fbb2 f7f5 	udiv	r7, r2, r5
    44b2:	fb05 2217 	mls	r2, r5, r7, r2
    44b6:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    44ba:	fa23 f202 	lsr.w	r2, r3, r2
    44be:	07d2      	lsls	r2, r2, #31
    44c0:	d103      	bne.n	44ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4ca>
    44c2:	1c40      	adds	r0, r0, #1
    44c4:	b2c0      	uxtb	r0, r0
    44c6:	2803      	cmp	r0, #3
    44c8:	d3ee      	bcc.n	44a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4a8>
    44ca:	6860      	ldr	r0, [r4, #4]
    44cc:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    44d0:	f003 ff28 	bl	8324 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    44d4:	4631      	mov	r1, r6
    44d6:	2001      	movs	r0, #1
    44d8:	f7ff fa38 	bl	394c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x78>
    44dc:	2800      	cmp	r0, #0
    44de:	d0bd      	beq.n	445c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x45c>
    44e0:	f000 f91a 	bl	4718 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x718>
    44e4:	4809      	ldr	r0, [pc, #36]	; (450c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50c>)
    44e6:	6800      	ldr	r0, [r0, #0]
    44e8:	2803      	cmp	r0, #3
    44ea:	d001      	beq.n	44f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4f0>
    44ec:	2000      	movs	r0, #0
    44ee:	e7b5      	b.n	445c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x45c>
    44f0:	f44f 6126 	mov.w	r1, #2656	; 0xa60
    44f4:	2032      	movs	r0, #50	; 0x32
    44f6:	f7fc fa91 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44fa:	0000      	.short	0x0000
    44fc:	200000ec 	.word	0x200000ec
    4500:	00004800 	.word	0x00004800
    4504:	00555555 	.word	0x00555555
    4508:	8e89bed6 	.word	0x8e89bed6
    450c:	40001550 	.word	0x40001550
    4510:	b510      	push	{r4, lr}
    4512:	2000      	movs	r0, #0
    4514:	f7ff fe7e 	bl	4214 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x214>
    4518:	4808      	ldr	r0, [pc, #32]	; (453c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x53c>)
    451a:	6840      	ldr	r0, [r0, #4]
    451c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4520:	b128      	cbz	r0, 452e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52e>
    4522:	2801      	cmp	r0, #1
    4524:	d003      	beq.n	452e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52e>
    4526:	2802      	cmp	r0, #2
    4528:	d004      	beq.n	4534 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x534>
    452a:	200c      	movs	r0, #12
    452c:	bd10      	pop	{r4, pc}
    452e:	f000 f82d 	bl	458c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58c>
    4532:	e001      	b.n	4538 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x538>
    4534:	f000 f840 	bl	45b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5b8>
    4538:	2000      	movs	r0, #0
    453a:	bd10      	pop	{r4, pc}
    453c:	200000ec 	.word	0x200000ec
    4540:	b510      	push	{r4, lr}
    4542:	2000      	movs	r0, #0
    4544:	7048      	strb	r0, [r1, #1]
    4546:	2019      	movs	r0, #25
    4548:	7008      	strb	r0, [r1, #0]
    454a:	480f      	ldr	r0, [pc, #60]	; (4588 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x588>)
    454c:	6840      	ldr	r0, [r0, #4]
    454e:	f8d0 0042 	ldr.w	r0, [r0, #66]	; 0x42
    4552:	6048      	str	r0, [r1, #4]
    4554:	7908      	ldrb	r0, [r1, #4]
    4556:	2801      	cmp	r0, #1
    4558:	d114      	bne.n	4584 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x584>
    455a:	88cc      	ldrh	r4, [r1, #6]
    455c:	2100      	movs	r1, #0
    455e:	4620      	mov	r0, r4
    4560:	f7fc fd3e 	bl	fe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4564:	2800      	cmp	r0, #0
    4566:	d00d      	beq.n	4584 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x584>
    4568:	4620      	mov	r0, r4
    456a:	f009 fc56 	bl	de1a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    456e:	2100      	movs	r1, #0
    4570:	4620      	mov	r0, r4
    4572:	f7fc fdcb 	bl	110c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4576:	2800      	cmp	r0, #0
    4578:	d004      	beq.n	4584 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x584>
    457a:	f240 4115 	movw	r1, #1045	; 0x415
    457e:	2032      	movs	r0, #50	; 0x32
    4580:	f7fc fa4c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4584:	bd10      	pop	{r4, pc}
    4586:	0000      	.short	0x0000
    4588:	200000ec 	.word	0x200000ec
    458c:	b510      	push	{r4, lr}
    458e:	f7ff f9bf 	bl	3910 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    4592:	4904      	ldr	r1, [pc, #16]	; (45a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a4>)
    4594:	2001      	movs	r0, #1
    4596:	6849      	ldr	r1, [r1, #4]
    4598:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    459c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    45a0:	f000 bb0a 	b.w	4bb8 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>
    45a4:	200000ec 	.word	0x200000ec
    45a8:	4902      	ldr	r1, [pc, #8]	; (45b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5b4>)
    45aa:	2000      	movs	r0, #0
    45ac:	6849      	ldr	r1, [r1, #4]
    45ae:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    45b2:	4770      	bx	lr
    45b4:	200000ec 	.word	0x200000ec
    45b8:	b570      	push	{r4, r5, r6, lr}
    45ba:	f7fc fec1 	bl	1340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    45be:	4604      	mov	r4, r0
    45c0:	f7fc fec4 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    45c4:	4621      	mov	r1, r4
    45c6:	f00a fc8c 	bl	eee2 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    45ca:	0004      	movs	r4, r0
    45cc:	d020      	beq.n	4610 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x610>
    45ce:	f00a fc95 	bl	eefc <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    45d2:	2000      	movs	r0, #0
    45d4:	f000 f9fa 	bl	49cc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    45d8:	b1f8      	cbz	r0, 461a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x61a>
    45da:	4d20      	ldr	r5, [pc, #128]	; (465c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x65c>)
    45dc:	6868      	ldr	r0, [r5, #4]
    45de:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    45e2:	2802      	cmp	r0, #2
    45e4:	d003      	beq.n	45ee <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ee>
    45e6:	4621      	mov	r1, r4
    45e8:	2000      	movs	r0, #0
    45ea:	f7ff f9af 	bl	394c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x78>
    45ee:	1ce0      	adds	r0, r4, #3
    45f0:	f009 fcc6 	bl	df80 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    45f4:	6869      	ldr	r1, [r5, #4]
    45f6:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    45fa:	b128      	cbz	r0, 4608 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x608>
    45fc:	2440      	movs	r4, #64	; 0x40
    45fe:	f003 faa7 	bl	7b50 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    4602:	4620      	mov	r0, r4
    4604:	f003 fc6c 	bl	7ee0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    4608:	f7ff fa86 	bl	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
    460c:	b970      	cbnz	r0, 462c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x62c>
    460e:	e008      	b.n	4622 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x622>
    4610:	f240 511e 	movw	r1, #1310	; 0x51e
    4614:	2032      	movs	r0, #50	; 0x32
    4616:	f7fc fa01 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    461a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    461e:	f7ff bfb5 	b.w	458c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58c>
    4622:	6868      	ldr	r0, [r5, #4]
    4624:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    4628:	2802      	cmp	r0, #2
    462a:	d104      	bne.n	4636 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x636>
    462c:	2100      	movs	r1, #0
    462e:	2201      	movs	r2, #1
    4630:	4608      	mov	r0, r1
    4632:	f003 ff21 	bl	8478 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    4636:	6868      	ldr	r0, [r5, #4]
    4638:	21ff      	movs	r1, #255	; 0xff
    463a:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    463e:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    4642:	2100      	movs	r1, #0
    4644:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    4648:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    464c:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    4650:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    4654:	2105      	movs	r1, #5
    4656:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    465a:	bd70      	pop	{r4, r5, r6, pc}
    465c:	200000ec 	.word	0x200000ec
    4660:	b570      	push	{r4, r5, r6, lr}
    4662:	f7fc fe6d 	bl	1340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    4666:	4604      	mov	r4, r0
    4668:	f7fc fe70 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    466c:	4621      	mov	r1, r4
    466e:	f00a fc38 	bl	eee2 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    4672:	0005      	movs	r5, r0
    4674:	d028      	beq.n	46c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c8>
    4676:	4e19      	ldr	r6, [pc, #100]	; (46dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6dc>)
    4678:	2004      	movs	r0, #4
    467a:	6874      	ldr	r4, [r6, #4]
    467c:	3470      	adds	r4, #112	; 0x70
    467e:	f000 f9a5 	bl	49cc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    4682:	b330      	cbz	r0, 46d2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6d2>
    4684:	200c      	movs	r0, #12
    4686:	7020      	strb	r0, [r4, #0]
    4688:	2000      	movs	r0, #0
    468a:	f000 f971 	bl	4970 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    468e:	7828      	ldrb	r0, [r5, #0]
    4690:	6871      	ldr	r1, [r6, #4]
    4692:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4696:	f881 008b 	strb.w	r0, [r1, #139]	; 0x8b
    469a:	2005      	movs	r0, #5
    469c:	f7ff fb20 	bl	3ce0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x248>
    46a0:	4a0f      	ldr	r2, [pc, #60]	; (46e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6e0>)
    46a2:	68b1      	ldr	r1, [r6, #8]
    46a4:	2520      	movs	r5, #32
    46a6:	6d50      	ldr	r0, [r2, #84]	; 0x54
    46a8:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
    46ac:	7808      	ldrb	r0, [r1, #0]
    46ae:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    46b2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    46b6:	4318      	orrs	r0, r3
    46b8:	7008      	strb	r0, [r1, #0]
    46ba:	6d50      	ldr	r0, [r2, #84]	; 0x54
    46bc:	7ee2      	ldrb	r2, [r4, #27]
    46be:	f810 1fad 	ldrb.w	r1, [r0, #173]!
    46c2:	4011      	ands	r1, r2
    46c4:	7001      	strb	r1, [r0, #0]
    46c6:	bd70      	pop	{r4, r5, r6, pc}
    46c8:	f240 619f 	movw	r1, #1695	; 0x69f
    46cc:	2032      	movs	r0, #50	; 0x32
    46ce:	f7fc f9a5 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    46d6:	f7ff bf59 	b.w	458c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58c>
    46da:	0000      	.short	0x0000
    46dc:	200000ec 	.word	0x200000ec
    46e0:	20000b48 	.word	0x20000b48
    46e4:	b510      	push	{r4, lr}
    46e6:	2003      	movs	r0, #3
    46e8:	f000 f970 	bl	49cc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    46ec:	b168      	cbz	r0, 470a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x70a>
    46ee:	2003      	movs	r0, #3
    46f0:	f7ff faf6 	bl	3ce0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x248>
    46f4:	2201      	movs	r2, #1
    46f6:	4611      	mov	r1, r2
    46f8:	2000      	movs	r0, #0
    46fa:	f003 febd 	bl	8478 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    46fe:	4905      	ldr	r1, [pc, #20]	; (4714 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x714>)
    4700:	200b      	movs	r0, #11
    4702:	6849      	ldr	r1, [r1, #4]
    4704:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    4708:	bd10      	pop	{r4, pc}
    470a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    470e:	f7ff bf3d 	b.w	458c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58c>
    4712:	0000      	.short	0x0000
    4714:	200000ec 	.word	0x200000ec
    4718:	b570      	push	{r4, r5, r6, lr}
    471a:	4d19      	ldr	r5, [pc, #100]	; (4780 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x780>)
    471c:	2000      	movs	r0, #0
    471e:	686c      	ldr	r4, [r5, #4]
    4720:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    4724:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    4728:	b910      	cbnz	r0, 4730 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x730>
    472a:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    472e:	b308      	cbz	r0, 4774 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x774>
    4730:	e9f4 1024 	ldrd	r1, r0, [r4, #144]!	; 0x90
    4734:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4738:	4050      	eors	r0, r2
    473a:	ea70 0101 	orns	r1, r0, r1
    473e:	d019      	beq.n	4774 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x774>
    4740:	f00c fab9 	bl	10cb6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4744:	e9d4 2300 	ldrd	r2, r3, [r4]
    4748:	1a80      	subs	r0, r0, r2
    474a:	4199      	sbcs	r1, r3
    474c:	d312      	bcc.n	4774 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x774>
    474e:	f7fd fe4f 	bl	23f0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    4752:	490c      	ldr	r1, [pc, #48]	; (4784 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x784>)
    4754:	fba0 2301 	umull	r2, r3, r0, r1
    4758:	6868      	ldr	r0, [r5, #4]
    475a:	3090      	adds	r0, #144	; 0x90
    475c:	f00a fbc3 	bl	eee6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa8>
    4760:	6868      	ldr	r0, [r5, #4]
    4762:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    4766:	b110      	cbz	r0, 476e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x76e>
    4768:	2001      	movs	r0, #1
    476a:	f7fd fd35 	bl	21d8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    476e:	2001      	movs	r0, #1
    4770:	f7ff fd2a 	bl	41c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c8>
    4774:	6869      	ldr	r1, [r5, #4]
    4776:	2002      	movs	r0, #2
    4778:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    477c:	bd70      	pop	{r4, r5, r6, pc}
    477e:	0000      	.short	0x0000
    4780:	200000ec 	.word	0x200000ec
    4784:	000f4240 	.word	0x000f4240
    4788:	000045a9 	.word	0x000045a9
    478c:	0000458d 	.word	0x0000458d
    4790:	0000eea3 	.word	0x0000eea3
    4794:	0000eea3 	.word	0x0000eea3
    4798:	0000eea3 	.word	0x0000eea3
    479c:	000045b9 	.word	0x000045b9
    47a0:	0000eea3 	.word	0x0000eea3
    47a4:	0000eea3 	.word	0x0000eea3
    47a8:	0000eea3 	.word	0x0000eea3
    47ac:	0000eea3 	.word	0x0000eea3
    47b0:	0000eea3 	.word	0x0000eea3
    47b4:	000046e5 	.word	0x000046e5
    47b8:	00004661 	.word	0x00004661
    47bc:	0000eea3 	.word	0x0000eea3
    47c0:	0000eea3 	.word	0x0000eea3
    47c4:	000043c9 	.word	0x000043c9
    47c8:	000043a5 	.word	0x000043a5
    47cc:	0000eead 	.word	0x0000eead
    47d0:	0000eebb 	.word	0x0000eebb
    47d4:	0000ee53 	.word	0x0000ee53
    47d8:	0000ee5d 	.word	0x0000ee5d
    47dc:	0000ee6b 	.word	0x0000ee6b
    47e0:	00003ac5 	.word	0x00003ac5
    47e4:	00004445 	.word	0x00004445
    47e8:	00004511 	.word	0x00004511
    47ec:	000047c4 	.word	0x000047c4
    47f0:	000047cc 	.word	0x000047cc
    47f4:	00004788 	.word	0x00004788
    47f8:	000047dc 	.word	0x000047dc
    47fc:	000047d4 	.word	0x000047d4
    4800:	00004401 	.word	0x00004401
    4804:	0000427d 	.word	0x0000427d
    4808:	00004351 	.word	0x00004351
    480c:	0000eecd 	.word	0x0000eecd
    4810:	b570      	push	{r4, r5, r6, lr}
    4812:	4604      	mov	r4, r0
    4814:	7800      	ldrb	r0, [r0, #0]
    4816:	2805      	cmp	r0, #5
    4818:	d001      	beq.n	481e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x81e>
    481a:	2150      	movs	r1, #80	; 0x50
    481c:	e058      	b.n	48d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8d0>
    481e:	7ba0      	ldrb	r0, [r4, #14]
    4820:	06c0      	lsls	r0, r0, #27
    4822:	d401      	bmi.n	4828 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x828>
    4824:	2151      	movs	r1, #81	; 0x51
    4826:	e053      	b.n	48d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8d0>
    4828:	221c      	movs	r2, #28
    482a:	1d21      	adds	r1, r4, #4
    482c:	482f      	ldr	r0, [pc, #188]	; (48ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8ec>)
    482e:	f00c fbe6 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4832:	482e      	ldr	r0, [pc, #184]	; (48ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8ec>)
    4834:	7b22      	ldrb	r2, [r4, #12]
    4836:	f104 0120 	add.w	r1, r4, #32
    483a:	301c      	adds	r0, #28
    483c:	f00c fbdf 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4840:	482a      	ldr	r0, [pc, #168]	; (48ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8ec>)
    4842:	f04f 0201 	mov.w	r2, #1
    4846:	7a81      	ldrb	r1, [r0, #10]
    4848:	0749      	lsls	r1, r1, #29
    484a:	d502      	bpl.n	4852 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x852>
    484c:	7cc1      	ldrb	r1, [r0, #19]
    484e:	29fe      	cmp	r1, #254	; 0xfe
    4850:	d00c      	beq.n	486c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x86c>
    4852:	2304      	movs	r3, #4
    4854:	7023      	strb	r3, [r4, #0]
    4856:	6801      	ldr	r1, [r0, #0]
    4858:	6061      	str	r1, [r4, #4]
    485a:	6841      	ldr	r1, [r0, #4]
    485c:	60a1      	str	r1, [r4, #8]
    485e:	8901      	ldrh	r1, [r0, #8]
    4860:	81a1      	strh	r1, [r4, #12]
    4862:	7a81      	ldrb	r1, [r0, #10]
    4864:	070d      	lsls	r5, r1, #28
    4866:	d519      	bpl.n	489c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x89c>
    4868:	73a3      	strb	r3, [r4, #14]
    486a:	e02d      	b.n	48c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c8>
    486c:	2113      	movs	r1, #19
    486e:	7021      	strb	r1, [r4, #0]
    4870:	7801      	ldrb	r1, [r0, #0]
    4872:	7121      	strb	r1, [r4, #4]
    4874:	7162      	strb	r2, [r4, #5]
    4876:	7841      	ldrb	r1, [r0, #1]
    4878:	71a1      	strb	r1, [r4, #6]
    487a:	f8d0 1002 	ldr.w	r1, [r0, #2]
    487e:	f8c4 1007 	str.w	r1, [r4, #7]
    4882:	88c1      	ldrh	r1, [r0, #6]
    4884:	f8a4 100b 	strh.w	r1, [r4, #11]
    4888:	21fe      	movs	r1, #254	; 0xfe
    488a:	7361      	strb	r1, [r4, #13]
    488c:	6941      	ldr	r1, [r0, #20]
    488e:	f8c4 100e 	str.w	r1, [r4, #14]
    4892:	8b01      	ldrh	r1, [r0, #24]
    4894:	8261      	strh	r1, [r4, #18]
    4896:	7a40      	ldrb	r0, [r0, #9]
    4898:	7520      	strb	r0, [r4, #20]
    489a:	bd70      	pop	{r4, r5, r6, pc}
    489c:	07cb      	lsls	r3, r1, #31
    489e:	d003      	beq.n	48a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a8>
    48a0:	078b      	lsls	r3, r1, #30
    48a2:	d501      	bpl.n	48a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a8>
    48a4:	2100      	movs	r1, #0
    48a6:	e00e      	b.n	48c6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c6>
    48a8:	074b      	lsls	r3, r1, #29
    48aa:	d501      	bpl.n	48b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8b0>
    48ac:	73a2      	strb	r2, [r4, #14]
    48ae:	e00b      	b.n	48c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c8>
    48b0:	07ca      	lsls	r2, r1, #31
    48b2:	d110      	bne.n	48d6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8d6>
    48b4:	078a      	lsls	r2, r1, #30
    48b6:	d501      	bpl.n	48bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8bc>
    48b8:	2102      	movs	r1, #2
    48ba:	e004      	b.n	48c6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c6>
    48bc:	07ca      	lsls	r2, r1, #31
    48be:	d10a      	bne.n	48d6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8d6>
    48c0:	0789      	lsls	r1, r1, #30
    48c2:	d408      	bmi.n	48d6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8d6>
    48c4:	2103      	movs	r1, #3
    48c6:	73a1      	strb	r1, [r4, #14]
    48c8:	7a02      	ldrb	r2, [r0, #8]
    48ca:	2a1f      	cmp	r2, #31
    48cc:	d905      	bls.n	48da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8da>
    48ce:	2195      	movs	r1, #149	; 0x95
    48d0:	2033      	movs	r0, #51	; 0x33
    48d2:	f7fc f8a3 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48d6:	2192      	movs	r1, #146	; 0x92
    48d8:	e7fa      	b.n	48d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8d0>
    48da:	f104 000f 	add.w	r0, r4, #15
    48de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    48e2:	4902      	ldr	r1, [pc, #8]	; (48ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8ec>)
    48e4:	311c      	adds	r1, #28
    48e6:	f00c bb8a 	b.w	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    48ea:	0000      	.short	0x0000
    48ec:	200015d4 	.word	0x200015d4
    48f0:	2100      	movs	r1, #0
    48f2:	7201      	strb	r1, [r0, #8]
    48f4:	2206      	movs	r2, #6
    48f6:	4901      	ldr	r1, [pc, #4]	; (48fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8fc>)
    48f8:	f009 beeb 	b.w	e6d2 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    48fc:	0000f0b7 	.word	0x0000f0b7

00004900 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    4900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4904:	4616      	mov	r6, r2
    4906:	460c      	mov	r4, r1
    4908:	4605      	mov	r5, r0
    490a:	f009 fdef 	bl	e4ec <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>
    490e:	7460      	strb	r0, [r4, #17]
    4910:	4628      	mov	r0, r5
    4912:	f009 fde2 	bl	e4da <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>
    4916:	74a0      	strb	r0, [r4, #18]
    4918:	1cea      	adds	r2, r5, #3
    491a:	4b14      	ldr	r3, [pc, #80]	; (496c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    491c:	1d90      	adds	r0, r2, #6
    491e:	2100      	movs	r1, #0
    4920:	2e07      	cmp	r6, #7
    4922:	d21f      	bcs.n	4964 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    4924:	e8df f006 	tbb	[pc, r6]
    4928:	1e110b04 	.word	0x1e110b04
    492c:	00041e13 	.word	0x00041e13
    4930:	781b      	ldrb	r3, [r3, #0]
    4932:	e00d      	b.n	4950 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    4934:	60e0      	str	r0, [r4, #12]
    4936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    493a:	60e1      	str	r1, [r4, #12]
    493c:	e7fb      	b.n	4936 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    493e:	785b      	ldrb	r3, [r3, #1]
    4940:	7063      	strb	r3, [r4, #1]
    4942:	e9c4 2001 	strd	r2, r0, [r4, #4]
    4946:	7421      	strb	r1, [r4, #16]
    4948:	e7f7      	b.n	493a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    494a:	789b      	ldrb	r3, [r3, #2]
    494c:	e000      	b.n	4950 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    494e:	78db      	ldrb	r3, [r3, #3]
    4950:	7063      	strb	r3, [r4, #1]
    4952:	e9c4 2101 	strd	r2, r1, [r4, #4]
    4956:	786a      	ldrb	r2, [r5, #1]
    4958:	1f92      	subs	r2, r2, #6
    495a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    495e:	7422      	strb	r2, [r4, #16]
    4960:	d0eb      	beq.n	493a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    4962:	e7e7      	b.n	4934 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    4964:	7061      	strb	r1, [r4, #1]
    4966:	6061      	str	r1, [r4, #4]
    4968:	60a1      	str	r1, [r4, #8]
    496a:	e7ec      	b.n	4946 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    496c:	0001126a 	.word	0x0001126a

00004970 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>:
    4970:	b570      	push	{r4, r5, r6, lr}
    4972:	b140      	cbz	r0, 4986 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    4974:	2801      	cmp	r0, #1
    4976:	d006      	beq.n	4986 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    4978:	2802      	cmp	r0, #2
    497a:	d00a      	beq.n	4992 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x22>
    497c:	2803      	cmp	r0, #3
    497e:	d006      	beq.n	498e <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x1e>
    4980:	f640 01cb 	movw	r1, #2251	; 0x8cb
    4984:	e015      	b.n	49b2 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x42>
    4986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    498a:	f000 b97d 	b.w	4c88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    498e:	2001      	movs	r0, #1
    4990:	e000      	b.n	4994 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x24>
    4992:	2000      	movs	r0, #0
    4994:	4c0c      	ldr	r4, [pc, #48]	; (49c8 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x58>)
    4996:	2101      	movs	r1, #1
    4998:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    499c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    49a0:	6a20      	ldr	r0, [r4, #32]
    49a2:	2500      	movs	r5, #0
    49a4:	f880 5248 	strb.w	r5, [r0, #584]	; 0x248
    49a8:	7821      	ldrb	r1, [r4, #0]
    49aa:	2905      	cmp	r1, #5
    49ac:	d004      	beq.n	49b8 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x48>
    49ae:	f640 016e 	movw	r1, #2158	; 0x86e
    49b2:	2021      	movs	r0, #33	; 0x21
    49b4:	f7fc f832 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    49b8:	f00a fc94 	bl	f2e4 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA>
    49bc:	6225      	str	r5, [r4, #32]
    49be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    49c2:	f000 b9c5 	b.w	4d50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    49c6:	0000      	.short	0x0000
    49c8:	20000bf0 	.word	0x20000bf0

000049cc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    49cc:	b570      	push	{r4, r5, r6, lr}
    49ce:	4605      	mov	r5, r0
    49d0:	f00c f971 	bl	10cb6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    49d4:	4c16      	ldr	r4, [pc, #88]	; (4a30 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>)
    49d6:	6921      	ldr	r1, [r4, #16]
    49d8:	1a46      	subs	r6, r0, r1
    49da:	b155      	cbz	r5, 49f2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x26>
    49dc:	2d03      	cmp	r5, #3
    49de:	d00d      	beq.n	49fc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x30>
    49e0:	2d04      	cmp	r5, #4
    49e2:	d00e      	beq.n	4a02 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    49e4:	2d06      	cmp	r5, #6
    49e6:	d01d      	beq.n	4a24 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x58>
    49e8:	f240 31d9 	movw	r1, #985	; 0x3d9
    49ec:	2021      	movs	r0, #33	; 0x21
    49ee:	f7fc f815 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    49f2:	2001      	movs	r0, #1
    49f4:	f00a fc08 	bl	f208 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    49f8:	3098      	adds	r0, #152	; 0x98
    49fa:	e004      	b.n	4a06 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    49fc:	f44f 7057 	mov.w	r0, #860	; 0x35c
    4a00:	e001      	b.n	4a06 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    4a02:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    4a06:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4a08:	1835      	adds	r5, r6, r0
    4a0a:	39f9      	subs	r1, #249	; 0xf9
    4a0c:	428d      	cmp	r5, r1
    4a0e:	d307      	bcc.n	4a20 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    4a10:	2600      	movs	r6, #0
    4a12:	f000 facd 	bl	4fb0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x360>
    4a16:	b140      	cbz	r0, 4a2a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    4a18:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4a1a:	38f9      	subs	r0, #249	; 0xf9
    4a1c:	4285      	cmp	r5, r0
    4a1e:	d203      	bcs.n	4a28 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    4a20:	2601      	movs	r6, #1
    4a22:	e002      	b.n	4a2a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    4a24:	2001      	movs	r0, #1
    4a26:	bd70      	pop	{r4, r5, r6, pc}
    4a28:	2600      	movs	r6, #0
    4a2a:	4630      	mov	r0, r6
    4a2c:	bd70      	pop	{r4, r5, r6, pc}
    4a2e:	0000      	.short	0x0000
    4a30:	20000bf0 	.word	0x20000bf0

00004a34 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
    4a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a36:	4c1e      	ldr	r4, [pc, #120]	; (4ab0 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x7c>)
    4a38:	4607      	mov	r7, r0
    4a3a:	b087      	sub	sp, #28
    4a3c:	7820      	ldrb	r0, [r4, #0]
    4a3e:	460e      	mov	r6, r1
    4a40:	b110      	cbz	r0, 4a48 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x14>
    4a42:	200c      	movs	r0, #12
    4a44:	b007      	add	sp, #28
    4a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a48:	f7fe fd3c 	bl	34c4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4a4c:	4605      	mov	r5, r0
    4a4e:	6227      	str	r7, [r4, #32]
    4a50:	f897 0248 	ldrb.w	r0, [r7, #584]	; 0x248
    4a54:	b110      	cbz	r0, 4a5c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x28>
    4a56:	f240 21ff 	movw	r1, #767	; 0x2ff
    4a5a:	e025      	b.n	4aa8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    4a5c:	2005      	movs	r0, #5
    4a5e:	7020      	strb	r0, [r4, #0]
    4a60:	2000      	movs	r0, #0
    4a62:	7060      	strb	r0, [r4, #1]
    4a64:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    4a68:	f000 fae8 	bl	503c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3ec>
    4a6c:	64a0      	str	r0, [r4, #72]	; 0x48
    4a6e:	2100      	movs	r1, #0
    4a70:	4810      	ldr	r0, [pc, #64]	; (4ab4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
    4a72:	f006 fc43 	bl	b2fc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    4a76:	7028      	strb	r0, [r5, #0]
    4a78:	2820      	cmp	r0, #32
    4a7a:	d00d      	beq.n	4a98 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x64>
    4a7c:	4633      	mov	r3, r6
    4a7e:	2200      	movs	r2, #0
    4a80:	2101      	movs	r1, #1
    4a82:	4668      	mov	r0, sp
    4a84:	f000 fb42 	bl	510c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4bc>
    4a88:	b148      	cbz	r0, 4a9e <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6a>
    4a8a:	7828      	ldrb	r0, [r5, #0]
    4a8c:	4669      	mov	r1, sp
    4a8e:	f00a fbe7 	bl	f260 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6e>
    4a92:	b138      	cbz	r0, 4aa4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x70>
    4a94:	2000      	movs	r0, #0
    4a96:	e7d5      	b.n	4a44 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
    4a98:	f240 310d 	movw	r1, #781	; 0x30d
    4a9c:	e004      	b.n	4aa8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    4a9e:	f44f 7144 	mov.w	r1, #784	; 0x310
    4aa2:	e001      	b.n	4aa8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    4aa4:	f240 3111 	movw	r1, #785	; 0x311
    4aa8:	2021      	movs	r0, #33	; 0x21
    4aaa:	f7fb ffb7 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4aae:	0000      	.short	0x0000
    4ab0:	20000bf0 	.word	0x20000bf0
    4ab4:	00004d71 	.word	0x00004d71

00004ab8 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
    4ab8:	4902      	ldr	r1, [pc, #8]	; (4ac4 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
    4aba:	6a09      	ldr	r1, [r1, #32]
    4abc:	6001      	str	r1, [r0, #0]
    4abe:	f000 b83d 	b.w	4b3c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    4ac2:	0000      	.short	0x0000
    4ac4:	20000bf0 	.word	0x20000bf0

00004ac8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    4ac8:	b570      	push	{r4, r5, r6, lr}
    4aca:	b086      	sub	sp, #24
    4acc:	4606      	mov	r6, r0
    4ace:	b111      	cbz	r1, 4ad6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xe>
    4ad0:	2011      	movs	r0, #17
    4ad2:	b006      	add	sp, #24
    4ad4:	bd70      	pop	{r4, r5, r6, pc}
    4ad6:	4c17      	ldr	r4, [pc, #92]	; (4b34 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x6c>)
    4ad8:	7820      	ldrb	r0, [r4, #0]
    4ada:	b108      	cbz	r0, 4ae0 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x18>
    4adc:	200c      	movs	r0, #12
    4ade:	e7f8      	b.n	4ad2 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    4ae0:	f7fe fcf0 	bl	34c4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4ae4:	4605      	mov	r5, r0
    4ae6:	2000      	movs	r0, #0
    4ae8:	7060      	strb	r0, [r4, #1]
    4aea:	2004      	movs	r0, #4
    4aec:	7020      	strb	r0, [r4, #0]
    4aee:	f000 faa5 	bl	503c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3ec>
    4af2:	64a0      	str	r0, [r4, #72]	; 0x48
    4af4:	2100      	movs	r1, #0
    4af6:	4810      	ldr	r0, [pc, #64]	; (4b38 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    4af8:	f006 fc00 	bl	b2fc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    4afc:	7028      	strb	r0, [r5, #0]
    4afe:	2820      	cmp	r0, #32
    4b00:	d00d      	beq.n	4b1e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x56>
    4b02:	4633      	mov	r3, r6
    4b04:	2200      	movs	r2, #0
    4b06:	2101      	movs	r1, #1
    4b08:	4668      	mov	r0, sp
    4b0a:	f000 faff 	bl	510c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4bc>
    4b0e:	b148      	cbz	r0, 4b24 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5c>
    4b10:	7828      	ldrb	r0, [r5, #0]
    4b12:	4669      	mov	r1, sp
    4b14:	f00a fba4 	bl	f260 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6e>
    4b18:	b138      	cbz	r0, 4b2a <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x62>
    4b1a:	2000      	movs	r0, #0
    4b1c:	e7d9      	b.n	4ad2 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    4b1e:	f240 3165 	movw	r1, #869	; 0x365
    4b22:	e004      	b.n	4b2e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    4b24:	f240 3167 	movw	r1, #871	; 0x367
    4b28:	e001      	b.n	4b2e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    4b2a:	f44f 715a 	mov.w	r1, #872	; 0x368
    4b2e:	2021      	movs	r0, #33	; 0x21
    4b30:	f7fb ff74 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b34:	20000bf0 	.word	0x20000bf0
    4b38:	00004d71 	.word	0x00004d71

00004b3c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    4b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b40:	2700      	movs	r7, #0
    4b42:	f7fe fcbf 	bl	34c4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4b46:	4c18      	ldr	r4, [pc, #96]	; (4ba8 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x6c>)
    4b48:	4605      	mov	r5, r0
    4b4a:	7820      	ldrb	r0, [r4, #0]
    4b4c:	2804      	cmp	r0, #4
    4b4e:	d005      	beq.n	4b5c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    4b50:	7820      	ldrb	r0, [r4, #0]
    4b52:	2805      	cmp	r0, #5
    4b54:	d002      	beq.n	4b5c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    4b56:	200c      	movs	r0, #12
    4b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b5c:	2001      	movs	r0, #1
    4b5e:	7060      	strb	r0, [r4, #1]
    4b60:	7b20      	ldrb	r0, [r4, #12]
    4b62:	b160      	cbz	r0, 4b7e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    4b64:	f3ef 8610 	mrs	r6, PRIMASK
    4b68:	b672      	cpsid	i
    4b6a:	7b20      	ldrb	r0, [r4, #12]
    4b6c:	b128      	cbz	r0, 4b7a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    4b6e:	7b60      	ldrb	r0, [r4, #13]
    4b70:	b118      	cbz	r0, 4b7a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    4b72:	f00a f964 	bl	ee3e <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    4b76:	f000 f8eb 	bl	4d50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4b7a:	b126      	cbz	r6, 4b86 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    4b7c:	e004      	b.n	4b88 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    4b7e:	7828      	ldrb	r0, [r5, #0]
    4b80:	f006 f93a 	bl	adf8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    4b84:	e000      	b.n	4b88 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    4b86:	b662      	cpsie	i
    4b88:	7828      	ldrb	r0, [r5, #0]
    4b8a:	f006 fa9f 	bl	b0cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    4b8e:	f000 fc19 	bl	53c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x774>
    4b92:	2000      	movs	r0, #0
    4b94:	7060      	strb	r0, [r4, #1]
    4b96:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4b9a:	b100      	cbz	r0, 4b9e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x62>
    4b9c:	270c      	movs	r7, #12
    4b9e:	f000 fc3d 	bl	541c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7cc>
    4ba2:	4638      	mov	r0, r7
    4ba4:	e7d8      	b.n	4b58 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    4ba6:	0000      	.short	0x0000
    4ba8:	20000bf0 	.word	0x20000bf0

00004bac <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    4bac:	4801      	ldr	r0, [pc, #4]	; (4bb4 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    4bae:	7800      	ldrb	r0, [r0, #0]
    4bb0:	4770      	bx	lr
    4bb2:	0000      	.short	0x0000
    4bb4:	20000bf0 	.word	0x20000bf0

00004bb8 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>:
    4bb8:	b510      	push	{r4, lr}
    4bba:	4c10      	ldr	r4, [pc, #64]	; (4bfc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x44>)
    4bbc:	b086      	sub	sp, #24
    4bbe:	7b20      	ldrb	r0, [r4, #12]
    4bc0:	b1b0      	cbz	r0, 4bf0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    4bc2:	7860      	ldrb	r0, [r4, #1]
    4bc4:	b9a0      	cbnz	r0, 4bf0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    4bc6:	2300      	movs	r3, #0
    4bc8:	461a      	mov	r2, r3
    4bca:	4619      	mov	r1, r3
    4bcc:	4668      	mov	r0, sp
    4bce:	f000 fa9d 	bl	510c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4bc>
    4bd2:	b158      	cbz	r0, 4bec <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x34>
    4bd4:	f7fe fc76 	bl	34c4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4bd8:	7800      	ldrb	r0, [r0, #0]
    4bda:	4669      	mov	r1, sp
    4bdc:	f00a fb40 	bl	f260 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6e>
    4be0:	b930      	cbnz	r0, 4bf0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    4be2:	f240 71d3 	movw	r1, #2003	; 0x7d3
    4be6:	2021      	movs	r0, #33	; 0x21
    4be8:	f7fb ff18 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4bec:	2001      	movs	r0, #1
    4bee:	70a0      	strb	r0, [r4, #2]
    4bf0:	b006      	add	sp, #24
    4bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4bf6:	f000 b8ab 	b.w	4d50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4bfa:	0000      	.short	0x0000
    4bfc:	20000bf0 	.word	0x20000bf0

00004c00 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>:
    4c00:	b508      	push	{r3, lr}
    4c02:	2260      	movs	r2, #96	; 0x60
    4c04:	2100      	movs	r1, #0
    4c06:	480c      	ldr	r0, [pc, #48]	; (4c38 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x38>)
    4c08:	f00c fa73 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4c0c:	f7fe fc5a 	bl	34c4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4c10:	2120      	movs	r1, #32
    4c12:	7001      	strb	r1, [r0, #0]
    4c14:	f000 f812 	bl	4c3c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    4c18:	b120      	cbz	r0, 4c24 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x24>
    4c1a:	f44f 710e 	mov.w	r1, #568	; 0x238
    4c1e:	2021      	movs	r0, #33	; 0x21
    4c20:	f7fb fefc 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c24:	f242 7010 	movw	r0, #10000	; 0x2710
    4c28:	9000      	str	r0, [sp, #0]
    4c2a:	2201      	movs	r2, #1
    4c2c:	4669      	mov	r1, sp
    4c2e:	1080      	asrs	r0, r0, #2
    4c30:	f000 f944 	bl	4ebc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26c>
    4c34:	bd08      	pop	{r3, pc}
    4c36:	0000      	.short	0x0000
    4c38:	20000bf0 	.word	0x20000bf0

00004c3c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>:
    4c3c:	4803      	ldr	r0, [pc, #12]	; (4c4c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0x10>)
    4c3e:	b510      	push	{r4, lr}
    4c40:	7800      	ldrb	r0, [r0, #0]
    4c42:	b108      	cbz	r0, 4c48 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0xc>
    4c44:	f7ff ff7a 	bl	4b3c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    4c48:	2000      	movs	r0, #0
    4c4a:	bd10      	pop	{r4, pc}
    4c4c:	20000bf0 	.word	0x20000bf0

00004c50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    4c50:	490c      	ldr	r1, [pc, #48]	; (4c84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    4c52:	b508      	push	{r3, lr}
    4c54:	7809      	ldrb	r1, [r1, #0]
    4c56:	b121      	cbz	r1, 4c62 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    4c58:	f240 311f 	movw	r1, #799	; 0x31f
    4c5c:	2021      	movs	r0, #33	; 0x21
    4c5e:	f7fb fedd 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c62:	2300      	movs	r3, #0
    4c64:	9300      	str	r3, [sp, #0]
    4c66:	7801      	ldrb	r1, [r0, #0]
    4c68:	461a      	mov	r2, r3
    4c6a:	07c9      	lsls	r1, r1, #31
    4c6c:	d003      	beq.n	4c76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    4c6e:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    4c72:	2201      	movs	r2, #1
    4c74:	9000      	str	r0, [sp, #0]
    4c76:	4669      	mov	r1, sp
    4c78:	4618      	mov	r0, r3
    4c7a:	f000 f91f 	bl	4ebc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26c>
    4c7e:	2000      	movs	r0, #0
    4c80:	bd08      	pop	{r3, pc}
    4c82:	0000      	.short	0x0000
    4c84:	20000bf0 	.word	0x20000bf0
    4c88:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    4c8c:	4c2e      	ldr	r4, [pc, #184]	; (4d48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf8>)
    4c8e:	4680      	mov	r8, r0
    4c90:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
    4c94:	461e      	mov	r6, r3
    4c96:	f003 fa81 	bl	819c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4c9a:	4607      	mov	r7, r0
    4c9c:	6a20      	ldr	r0, [r4, #32]
    4c9e:	2101      	movs	r1, #1
    4ca0:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    4ca4:	f880 106b 	strb.w	r1, [r0, #107]	; 0x6b
    4ca8:	3062      	adds	r0, #98	; 0x62
    4caa:	21ff      	movs	r1, #255	; 0xff
    4cac:	7281      	strb	r1, [r0, #10]
    4cae:	6a20      	ldr	r0, [r4, #32]
    4cb0:	f04f 0900 	mov.w	r9, #0
    4cb4:	4649      	mov	r1, r9
    4cb6:	302c      	adds	r0, #44	; 0x2c
    4cb8:	f009 fd7e 	bl	e7b8 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    4cbc:	462a      	mov	r2, r5
    4cbe:	4633      	mov	r3, r6
    4cc0:	2101      	movs	r1, #1
    4cc2:	4640      	mov	r0, r8
    4cc4:	9700      	str	r7, [sp, #0]
    4cc6:	f00a fab2 	bl	f22e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3c>
    4cca:	6a27      	ldr	r7, [r4, #32]
    4ccc:	4606      	mov	r6, r0
    4cce:	460d      	mov	r5, r1
    4cd0:	f8d7 8010 	ldr.w	r8, [r7, #16]
    4cd4:	f002 f9ae 	bl	7034 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    4cd8:	f104 0140 	add.w	r1, r4, #64	; 0x40
    4cdc:	4288      	cmp	r0, r1
    4cde:	d00b      	beq.n	4cf8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa8>
    4ce0:	e9cd 6500 	strd	r6, r5, [sp]
    4ce4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
    4ce8:	4642      	mov	r2, r8
    4cea:	f00a fdf5 	bl	f8d8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    4cee:	4540      	cmp	r0, r8
    4cf0:	d903      	bls.n	4cfa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa>
    4cf2:	f240 410f 	movw	r1, #1039	; 0x40f
    4cf6:	e01d      	b.n	4d34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xe4>
    4cf8:	2000      	movs	r0, #0
    4cfa:	4914      	ldr	r1, [pc, #80]	; (4d4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xfc>)
    4cfc:	4607      	mov	r7, r0
    4cfe:	6809      	ldr	r1, [r1, #0]
    4d00:	4288      	cmp	r0, r1
    4d02:	6a20      	ldr	r0, [r4, #32]
    4d04:	6901      	ldr	r1, [r0, #16]
    4d06:	d202      	bcs.n	4d0e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbe>
    4d08:	440f      	add	r7, r1
    4d0a:	6201      	str	r1, [r0, #32]
    4d0c:	e004      	b.n	4d18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc8>
    4d0e:	4638      	mov	r0, r7
    4d10:	f009 fb0f 	bl	e332 <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>
    4d14:	6a21      	ldr	r1, [r4, #32]
    4d16:	6208      	str	r0, [r1, #32]
    4d18:	6a20      	ldr	r0, [r4, #32]
    4d1a:	6901      	ldr	r1, [r0, #16]
    4d1c:	2005      	movs	r0, #5
    4d1e:	f009 fb10 	bl	e342 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    4d22:	6a21      	ldr	r1, [r4, #32]
    4d24:	8488      	strh	r0, [r1, #36]	; 0x24
    4d26:	6a21      	ldr	r1, [r4, #32]
    4d28:	6a0a      	ldr	r2, [r1, #32]
    4d2a:	1aba      	subs	r2, r7, r2
    4d2c:	4290      	cmp	r0, r2
    4d2e:	d804      	bhi.n	4d3a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xea>
    4d30:	f640 015c 	movw	r1, #2140	; 0x85c
    4d34:	2021      	movs	r0, #33	; 0x21
    4d36:	f7fb fe71 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d3a:	19f2      	adds	r2, r6, r7
    4d3c:	eb45 0509 	adc.w	r5, r5, r9
    4d40:	e9c1 258a 	strd	r2, r5, [r1, #552]	; 0x228
    4d44:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    4d48:	20000bf0 	.word	0x20000bf0
    4d4c:	200000fc 	.word	0x200000fc
    4d50:	b510      	push	{r4, lr}
    4d52:	4c06      	ldr	r4, [pc, #24]	; (4d6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>)
    4d54:	7b20      	ldrb	r0, [r4, #12]
    4d56:	2800      	cmp	r0, #0
    4d58:	d006      	beq.n	4d68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    4d5a:	f003 fa2b 	bl	81b4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    4d5e:	f006 faf1 	bl	b344 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    4d62:	2000      	movs	r0, #0
    4d64:	7320      	strb	r0, [r4, #12]
    4d66:	7360      	strb	r0, [r4, #13]
    4d68:	bd10      	pop	{r4, pc}
    4d6a:	0000      	.short	0x0000
    4d6c:	20000bf0 	.word	0x20000bf0
    4d70:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d72:	b087      	sub	sp, #28
    4d74:	460d      	mov	r5, r1
    4d76:	f7fe fba5 	bl	34c4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4d7a:	2701      	movs	r7, #1
    4d7c:	4c41      	ldr	r4, [pc, #260]	; (4e84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x234>)
    4d7e:	2d09      	cmp	r5, #9
    4d80:	d27c      	bcs.n	4e7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x22c>
    4d82:	e8df f005 	tbb	[pc, r5]
    4d86:	3c05      	.short	0x3c05
    4d88:	7b4d5252 	.word	0x7b4d5252
    4d8c:	00767168 	.word	0x00767168
    4d90:	7327      	strb	r7, [r4, #12]
    4d92:	7861      	ldrb	r1, [r4, #1]
    4d94:	2900      	cmp	r1, #0
    4d96:	d15c      	bne.n	4e52 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x202>
    4d98:	7800      	ldrb	r0, [r0, #0]
    4d9a:	f005 fad1 	bl	a340 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    4d9e:	4605      	mov	r5, r0
    4da0:	460e      	mov	r6, r1
    4da2:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4da6:	f000 fb55 	bl	5454 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x804>
    4daa:	b118      	cbz	r0, 4db4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x164>
    4dac:	2000      	movs	r0, #0
    4dae:	f88d 0004 	strb.w	r0, [sp, #4]
    4db2:	e001      	b.n	4db8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    4db4:	f88d 7004 	strb.w	r7, [sp, #4]
    4db8:	f000 f954 	bl	5064 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x414>
    4dbc:	4633      	mov	r3, r6
    4dbe:	462a      	mov	r2, r5
    4dc0:	f00a fa50 	bl	f264 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x72>
    4dc4:	6861      	ldr	r1, [r4, #4]
    4dc6:	fbb0 f2f1 	udiv	r2, r0, r1
    4dca:	fb01 0012 	mls	r0, r1, r2, r0
    4dce:	b150      	cbz	r0, 4de6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x196>
    4dd0:	f05f 0000 	movs.w	r0, #0
    4dd4:	f88d 0005 	strb.w	r0, [sp, #5]
    4dd8:	4668      	mov	r0, sp
    4dda:	f7fe fcab 	bl	3734 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    4dde:	b120      	cbz	r0, 4dea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19a>
    4de0:	f240 11d1 	movw	r1, #465	; 0x1d1
    4de4:	e047      	b.n	4e76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x226>
    4de6:	2001      	movs	r0, #1
    4de8:	e7f4      	b.n	4dd4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x184>
    4dea:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4dec:	38e8      	subs	r0, #232	; 0xe8
    4dee:	63a0      	str	r0, [r4, #56]	; 0x38
    4df0:	f006 fb84 	bl	b4fc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4df4:	2800      	cmp	r0, #0
    4df6:	d12c      	bne.n	4e52 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x202>
    4df8:	f240 11d5 	movw	r1, #469	; 0x1d5
    4dfc:	e03b      	b.n	4e76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x226>
    4dfe:	7860      	ldrb	r0, [r4, #1]
    4e00:	b130      	cbz	r0, 4e10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c0>
    4e02:	f00a f81c 	bl	ee3e <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    4e06:	b007      	add	sp, #28
    4e08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4e0c:	f7ff bfa0 	b.w	4d50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4e10:	7367      	strb	r7, [r4, #13]
    4e12:	f7fe fd1f 	bl	3854 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    4e16:	2800      	cmp	r0, #0
    4e18:	d01b      	beq.n	4e52 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x202>
    4e1a:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    4e1e:	e02a      	b.n	4e76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x226>
    4e20:	b007      	add	sp, #28
    4e22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4e26:	f003 bb99 	b.w	855c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    4e2a:	7805      	ldrb	r5, [r0, #0]
    4e2c:	2300      	movs	r3, #0
    4e2e:	2201      	movs	r2, #1
    4e30:	4619      	mov	r1, r3
    4e32:	4668      	mov	r0, sp
    4e34:	f000 f96a 	bl	510c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4bc>
    4e38:	b140      	cbz	r0, 4e4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1fc>
    4e3a:	4669      	mov	r1, sp
    4e3c:	4628      	mov	r0, r5
    4e3e:	f00a fa0f 	bl	f260 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6e>
    4e42:	2800      	cmp	r0, #0
    4e44:	d105      	bne.n	4e52 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x202>
    4e46:	f240 71ee 	movw	r1, #2030	; 0x7ee
    4e4a:	e014      	b.n	4e76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x226>
    4e4c:	70a7      	strb	r7, [r4, #2]
    4e4e:	f000 f81b 	bl	4e88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x238>
    4e52:	b007      	add	sp, #28
    4e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e56:	f000 f8ab 	bl	4fb0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x360>
    4e5a:	2800      	cmp	r0, #0
    4e5c:	d1f9      	bne.n	4e52 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x202>
    4e5e:	b007      	add	sp, #28
    4e60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4e64:	f009 bfe9 	b.w	ee3a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    4e68:	b007      	add	sp, #28
    4e6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4e6e:	f000 b80b 	b.w	4e88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x238>
    4e72:	f240 2116 	movw	r1, #534	; 0x216
    4e76:	2021      	movs	r0, #33	; 0x21
    4e78:	f7fb fdd0 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e7c:	f240 211a 	movw	r1, #538	; 0x21a
    4e80:	e7f9      	b.n	4e76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x226>
    4e82:	0000      	.short	0x0000
    4e84:	20000bf0 	.word	0x20000bf0
    4e88:	b510      	push	{r4, lr}
    4e8a:	4c0b      	ldr	r4, [pc, #44]	; (4eb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x268>)
    4e8c:	7820      	ldrb	r0, [r4, #0]
    4e8e:	b138      	cbz	r0, 4ea0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x250>
    4e90:	f000 fa98 	bl	53c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x774>
    4e94:	78a0      	ldrb	r0, [r4, #2]
    4e96:	b150      	cbz	r0, 4eae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x25e>
    4e98:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4e9c:	b128      	cbz	r0, 4eaa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x25a>
    4e9e:	e006      	b.n	4eae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x25e>
    4ea0:	f44f 71bf 	mov.w	r1, #382	; 0x17e
    4ea4:	2021      	movs	r0, #33	; 0x21
    4ea6:	f7fb fdb9 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4eaa:	f7fe fceb 	bl	3884 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    4eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4eb2:	f000 bab3 	b.w	541c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7cc>
    4eb6:	0000      	.short	0x0000
    4eb8:	20000bf0 	.word	0x20000bf0
    4ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ec0:	4d11      	ldr	r5, [pc, #68]	; (4f08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b8>)
    4ec2:	4616      	mov	r6, r2
    4ec4:	460f      	mov	r7, r1
    4ec6:	2400      	movs	r4, #0
    4ec8:	6068      	str	r0, [r5, #4]
    4eca:	f00a f992 	bl	f1f2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    4ece:	f8df c03c 	ldr.w	ip, [pc, #60]	; 4f0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2bc>
    4ed2:	2100      	movs	r1, #0
    4ed4:	f81c 2001 	ldrb.w	r2, [ip, r1]
    4ed8:	4232      	tst	r2, r6
    4eda:	d007      	beq.n	4eec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x29c>
    4edc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    4ee0:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    4ee4:	1a1b      	subs	r3, r3, r0
    4ee6:	1c64      	adds	r4, r4, #1
    4ee8:	b2e4      	uxtb	r4, r4
    4eea:	6093      	str	r3, [r2, #8]
    4eec:	1c49      	adds	r1, r1, #1
    4eee:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    4ef2:	d0ef      	beq.n	4ed4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x284>
    4ef4:	f016 0f0e 	tst.w	r6, #14
    4ef8:	d004      	beq.n	4f04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b4>
    4efa:	f240 710f 	movw	r1, #1807	; 0x70f
    4efe:	2021      	movs	r0, #33	; 0x21
    4f00:	f7fb fd8c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f08:	20000bf0 	.word	0x20000bf0
    4f0c:	0001126e 	.word	0x0001126e
    4f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f14:	b086      	sub	sp, #24
    4f16:	4692      	mov	sl, r2
    4f18:	4607      	mov	r7, r0
    4f1a:	4689      	mov	r9, r1
    4f1c:	f000 faa6 	bl	546c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    4f20:	4d22      	ldr	r5, [pc, #136]	; (4fac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x35c>)
    4f22:	f04f 0800 	mov.w	r8, #0
    4f26:	686a      	ldr	r2, [r5, #4]
    4f28:	1886      	adds	r6, r0, r2
    4f2a:	eb41 0108 	adc.w	r1, r1, r8
    4f2e:	460c      	mov	r4, r1
    4f30:	460b      	mov	r3, r1
    4f32:	4632      	mov	r2, r6
    4f34:	4638      	mov	r0, r7
    4f36:	4649      	mov	r1, r9
    4f38:	f00a f994 	bl	f264 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x72>
    4f3c:	4607      	mov	r7, r0
    4f3e:	f00a f988 	bl	f252 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x60>
    4f42:	4287      	cmp	r7, r0
    4f44:	da13      	bge.n	4f6e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x31e>
    4f46:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4f4a:	f000 fa8f 	bl	546c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    4f4e:	4632      	mov	r2, r6
    4f50:	4623      	mov	r3, r4
    4f52:	f00a f987 	bl	f264 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x72>
    4f56:	6869      	ldr	r1, [r5, #4]
    4f58:	fbb0 f1f1 	udiv	r1, r0, r1
    4f5c:	f8ca 1000 	str.w	r1, [sl]
    4f60:	6868      	ldr	r0, [r5, #4]
    4f62:	1980      	adds	r0, r0, r6
    4f64:	eb48 0104 	adc.w	r1, r8, r4
    4f68:	b006      	add	sp, #24
    4f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f6e:	f88d 8000 	strb.w	r8, [sp]
    4f72:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4f74:	9001      	str	r0, [sp, #4]
    4f76:	f00a f925 	bl	f1c4 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    4f7a:	f8ad 0008 	strh.w	r0, [sp, #8]
    4f7e:	2001      	movs	r0, #1
    4f80:	f88d 000b 	strb.w	r0, [sp, #11]
    4f84:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4f88:	f000 fa70 	bl	546c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    4f8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4f90:	f000 f9f8 	bl	5384 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x734>
    4f94:	f88d 000a 	strb.w	r0, [sp, #10]
    4f98:	4668      	mov	r0, sp
    4f9a:	6869      	ldr	r1, [r5, #4]
    4f9c:	f009 f978 	bl	e290 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    4fa0:	f8ca 0000 	str.w	r0, [sl]
    4fa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4fa8:	e7de      	b.n	4f68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x318>
    4faa:	0000      	.short	0x0000
    4fac:	20000bf0 	.word	0x20000bf0
    4fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fb4:	f00b fe7f 	bl	10cb6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4fb8:	4c1f      	ldr	r4, [pc, #124]	; (5038 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e8>)
    4fba:	4606      	mov	r6, r0
    4fbc:	460d      	mov	r5, r1
    4fbe:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    4fc2:	f000 f9df 	bl	5384 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x734>
    4fc6:	4607      	mov	r7, r0
    4fc8:	f005 f960 	bl	a28c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    4fcc:	4602      	mov	r2, r0
    4fce:	2867      	cmp	r0, #103	; 0x67
    4fd0:	d323      	bcc.n	501a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3ca>
    4fd2:	1c50      	adds	r0, r2, #1
    4fd4:	d024      	beq.n	5020 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d0>
    4fd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4fd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4fda:	1888      	adds	r0, r1, r2
    4fdc:	4283      	cmp	r3, r0
    4fde:	d800      	bhi.n	4fe2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x392>
    4fe0:	1a5a      	subs	r2, r3, r1
    4fe2:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    4fe6:	1830      	adds	r0, r6, r0
    4fe8:	f145 31ff 	adc.w	r1, r5, #4294967295
    4fec:	f000 fa54 	bl	5498 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x848>
    4ff0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4ff2:	4408      	add	r0, r1
    4ff4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4ff6:	1a45      	subs	r5, r0, r1
    4ff8:	f241 3088 	movw	r0, #5000	; 0x1388
    4ffc:	4285      	cmp	r5, r0
    4ffe:	d900      	bls.n	5002 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3b2>
    5000:	4605      	mov	r5, r0
    5002:	f00b fe58 	bl	10cb6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    5006:	1b80      	subs	r0, r0, r6
    5008:	f100 00a1 	add.w	r0, r0, #161	; 0xa1
    500c:	4285      	cmp	r5, r0
    500e:	d304      	bcc.n	501a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3ca>
    5010:	4639      	mov	r1, r7
    5012:	4628      	mov	r0, r5
    5014:	f005 f84a 	bl	a0ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    5018:	b120      	cbz	r0, 5024 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d4>
    501a:	2000      	movs	r0, #0
    501c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5020:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5022:	e7e7      	b.n	4ff4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3a4>
    5024:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5026:	4428      	add	r0, r5
    5028:	6320      	str	r0, [r4, #48]	; 0x30
    502a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    502c:	4428      	add	r0, r5
    502e:	63a0      	str	r0, [r4, #56]	; 0x38
    5030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5034:	f006 ba62 	b.w	b4fc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    5038:	20000bf0 	.word	0x20000bf0
    503c:	b510      	push	{r4, lr}
    503e:	2400      	movs	r4, #0
    5040:	f00a f8d7 	bl	f1f2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    5044:	4a06      	ldr	r2, [pc, #24]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x410>)
    5046:	2100      	movs	r1, #0
    5048:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    504c:	4404      	add	r4, r0
    504e:	689b      	ldr	r3, [r3, #8]
    5050:	1c49      	adds	r1, r1, #1
    5052:	441c      	add	r4, r3
    5054:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    5058:	d0f6      	beq.n	5048 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3f8>
    505a:	4620      	mov	r0, r4
    505c:	bd10      	pop	{r4, pc}
    505e:	0000      	.short	0x0000
    5060:	20000bf0 	.word	0x20000bf0
    5064:	4901      	ldr	r1, [pc, #4]	; (506c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x41c>)
    5066:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
    506a:	4770      	bx	lr
    506c:	20000bf0 	.word	0x20000bf0
    5070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5074:	4606      	mov	r6, r0
    5076:	481d      	ldr	r0, [pc, #116]	; (50ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x49c>)
    5078:	4688      	mov	r8, r1
    507a:	4615      	mov	r5, r2
    507c:	e9d0 100a 	ldrd	r1, r0, [r0, #40]	; 0x28
    5080:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    5084:	2701      	movs	r7, #1
    5086:	4050      	eors	r0, r2
    5088:	b086      	sub	sp, #24
    508a:	ea70 0101 	orns	r1, r0, r1
    508e:	d021      	beq.n	50d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x484>
    5090:	2400      	movs	r4, #0
    5092:	f88d 4000 	strb.w	r4, [sp]
    5096:	9501      	str	r5, [sp, #4]
    5098:	f00a f894 	bl	f1c4 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    509c:	f8ad 0008 	strh.w	r0, [sp, #8]
    50a0:	f88d 700b 	strb.w	r7, [sp, #11]
    50a4:	f00a f8d5 	bl	f252 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x60>
    50a8:	1982      	adds	r2, r0, r6
    50aa:	eb44 0008 	adc.w	r0, r4, r8
    50ae:	e9cd 2004 	strd	r2, r0, [sp, #16]
    50b2:	2002      	movs	r0, #2
    50b4:	f88d 000a 	strb.w	r0, [sp, #10]
    50b8:	4668      	mov	r0, sp
    50ba:	f005 fce3 	bl	aa84 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    50be:	b168      	cbz	r0, 50dc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x48c>
    50c0:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
    50c4:	194a      	adds	r2, r1, r5
    50c6:	4909      	ldr	r1, [pc, #36]	; (50ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x49c>)
    50c8:	4160      	adcs	r0, r4
    50ca:	e9d1 310a 	ldrd	r3, r1, [r1, #40]	; 0x28
    50ce:	1a9a      	subs	r2, r3, r2
    50d0:	4181      	sbcs	r1, r0
    50d2:	d408      	bmi.n	50e6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x496>
    50d4:	2001      	movs	r0, #1
    50d6:	b006      	add	sp, #24
    50d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50dc:	f44f 61a7 	mov.w	r1, #1336	; 0x538
    50e0:	2021      	movs	r0, #33	; 0x21
    50e2:	f7fb fc9b 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50e6:	2000      	movs	r0, #0
    50e8:	e7f5      	b.n	50d6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x486>
    50ea:	0000      	.short	0x0000
    50ec:	20000bf0 	.word	0x20000bf0
    50f0:	b510      	push	{r4, lr}
    50f2:	f7ff ffa3 	bl	503c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3ec>
    50f6:	4904      	ldr	r1, [pc, #16]	; (5108 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4b8>)
    50f8:	6849      	ldr	r1, [r1, #4]
    50fa:	4288      	cmp	r0, r1
    50fc:	d101      	bne.n	5102 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4b2>
    50fe:	2001      	movs	r0, #1
    5100:	bd10      	pop	{r4, pc}
    5102:	2000      	movs	r0, #0
    5104:	bd10      	pop	{r4, pc}
    5106:	0000      	.short	0x0000
    5108:	20000bf0 	.word	0x20000bf0
    510c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5110:	b087      	sub	sp, #28
    5112:	4614      	mov	r4, r2
    5114:	4606      	mov	r6, r0
    5116:	f00b fdce 	bl	10cb6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    511a:	4680      	mov	r8, r0
    511c:	4897      	ldr	r0, [pc, #604]	; (537c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72c>)
    511e:	4689      	mov	r9, r1
    5120:	f04f 0a00 	mov.w	sl, #0
    5124:	6880      	ldr	r0, [r0, #8]
    5126:	9002      	str	r0, [sp, #8]
    5128:	f7ff ffe2 	bl	50f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4a0>
    512c:	9004      	str	r0, [sp, #16]
    512e:	4020      	ands	r0, r4
    5130:	9003      	str	r0, [sp, #12]
    5132:	9808      	ldr	r0, [sp, #32]
    5134:	2800      	cmp	r0, #0
    5136:	d07b      	beq.n	5230 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e0>
    5138:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    513c:	eb18 0502 	adds.w	r5, r8, r2
    5140:	f149 0400 	adc.w	r4, r9, #0
    5144:	f001 ff7c 	bl	7040 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    5148:	9000      	str	r0, [sp, #0]
    514a:	488c      	ldr	r0, [pc, #560]	; (537c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72c>)
    514c:	7801      	ldrb	r1, [r0, #0]
    514e:	f100 0b40 	add.w	fp, r0, #64	; 0x40
    5152:	2905      	cmp	r1, #5
    5154:	d136      	bne.n	51c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x574>
    5156:	6a00      	ldr	r0, [r0, #32]
    5158:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    515c:	f001 ff50 	bl	7000 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    5160:	4607      	mov	r7, r0
    5162:	9800      	ldr	r0, [sp, #0]
    5164:	4287      	cmp	r7, r0
    5166:	d00a      	beq.n	517e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x52e>
    5168:	4884      	ldr	r0, [pc, #528]	; (537c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72c>)
    516a:	4639      	mov	r1, r7
    516c:	6a00      	ldr	r0, [r0, #32]
    516e:	f500 700a 	add.w	r0, r0, #552	; 0x228
    5172:	f001 fef9 	bl	6f68 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    5176:	2100      	movs	r1, #0
    5178:	f8cb 1018 	str.w	r1, [fp, #24]
    517c:	e00d      	b.n	519a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54a>
    517e:	497f      	ldr	r1, [pc, #508]	; (537c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72c>)
    5180:	6a0a      	ldr	r2, [r1, #32]
    5182:	f502 720a 	add.w	r2, r2, #552	; 0x228
    5186:	f8cb 2018 	str.w	r2, [fp, #24]
    518a:	6a0a      	ldr	r2, [r1, #32]
    518c:	6c88      	ldr	r0, [r1, #72]	; 0x48
    518e:	f8d2 2230 	ldr.w	r2, [r2, #560]	; 0x230
    5192:	4290      	cmp	r0, r2
    5194:	d200      	bcs.n	5198 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x548>
    5196:	4610      	mov	r0, r2
    5198:	6488      	str	r0, [r1, #72]	; 0x48
    519a:	4878      	ldr	r0, [pc, #480]	; (537c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72c>)
    519c:	6a00      	ldr	r0, [r0, #32]
    519e:	b158      	cbz	r0, 51b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x568>
    51a0:	b16f      	cbz	r7, 51be <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x56e>
    51a2:	e9d7 1201 	ldrd	r1, r2, [r7, #4]
    51a6:	f8d7 c000 	ldr.w	ip, [r7]
    51aa:	eb1c 0202 	adds.w	r2, ip, r2
    51ae:	eb41 010a 	adc.w	r1, r1, sl
    51b2:	e9c0 218a 	strd	r2, r1, [r0, #552]	; 0x228
    51b6:	e005      	b.n	51c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x574>
    51b8:	f240 71aa 	movw	r1, #1962	; 0x7aa
    51bc:	e01c      	b.n	51f8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a8>
    51be:	2100      	movs	r1, #0
    51c0:	e9c0 118a 	strd	r1, r1, [r0, #552]	; 0x228
    51c4:	4658      	mov	r0, fp
    51c6:	9900      	ldr	r1, [sp, #0]
    51c8:	f001 fece 	bl	6f68 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    51cc:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 537c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72c>
    51d0:	9800      	ldr	r0, [sp, #0]
    51d2:	f8db 7004 	ldr.w	r7, [fp, #4]
    51d6:	b190      	cbz	r0, 51fe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5ae>
    51d8:	e9d0 3100 	ldrd	r3, r1, [r0]
    51dc:	6880      	ldr	r0, [r0, #8]
    51de:	e9cd 5400 	strd	r5, r4, [sp]
    51e2:	1818      	adds	r0, r3, r0
    51e4:	eb41 010a 	adc.w	r1, r1, sl
    51e8:	463a      	mov	r2, r7
    51ea:	f00a fb75 	bl	f8d8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    51ee:	4601      	mov	r1, r0
    51f0:	42b8      	cmp	r0, r7
    51f2:	d905      	bls.n	5200 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5b0>
    51f4:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
    51f8:	2021      	movs	r0, #33	; 0x21
    51fa:	f7fb fc0f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51fe:	2100      	movs	r1, #0
    5200:	186d      	adds	r5, r5, r1
    5202:	4650      	mov	r0, sl
    5204:	f8db 2004 	ldr.w	r2, [fp, #4]
    5208:	4144      	adcs	r4, r0
    520a:	1aaa      	subs	r2, r5, r2
    520c:	eb64 030a 	sbc.w	r3, r4, sl
    5210:	e9cb 2310 	strd	r2, r3, [fp, #64]	; 0x40
    5214:	4959      	ldr	r1, [pc, #356]	; (537c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72c>)
    5216:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5218:	3128      	adds	r1, #40	; 0x28
    521a:	b152      	cbz	r2, 5232 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e2>
    521c:	f242 7310 	movw	r3, #10000	; 0x2710
    5220:	435a      	muls	r2, r3
    5222:	18aa      	adds	r2, r5, r2
    5224:	eb44 000a 	adc.w	r0, r4, sl
    5228:	e9c1 2000 	strd	r2, r0, [r1]
    522c:	2001      	movs	r0, #1
    522e:	e051      	b.n	52d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x684>
    5230:	e005      	b.n	523e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5ee>
    5232:	f04f 30ff 	mov.w	r0, #4294967295
    5236:	0842      	lsrs	r2, r0, #1
    5238:	e9c1 0200 	strd	r0, r2, [r1]
    523c:	e7f6      	b.n	522c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5dc>
    523e:	9803      	ldr	r0, [sp, #12]
    5240:	b1d8      	cbz	r0, 527a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x62a>
    5242:	2001      	movs	r0, #1
    5244:	f009 ffe0 	bl	f208 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    5248:	4604      	mov	r4, r0
    524a:	2001      	movs	r0, #1
    524c:	f003 f89c 	bl	8388 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    5250:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    5254:	4401      	add	r1, r0
    5256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    525a:	fbb1 f0f0 	udiv	r0, r1, r0
    525e:	1822      	adds	r2, r4, r0
    5260:	4640      	mov	r0, r8
    5262:	4649      	mov	r1, r9
    5264:	32f9      	adds	r2, #249	; 0xf9
    5266:	f7ff ff03 	bl	5070 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x420>
    526a:	b908      	cbnz	r0, 5270 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x620>
    526c:	2000      	movs	r0, #0
    526e:	9002      	str	r0, [sp, #8]
    5270:	4645      	mov	r5, r8
    5272:	464c      	mov	r4, r9
    5274:	f8cd a014 	str.w	sl, [sp, #20]
    5278:	e02d      	b.n	52d6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x686>
    527a:	b13c      	cbz	r4, 528c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x63c>
    527c:	aa05      	add	r2, sp, #20
    527e:	4640      	mov	r0, r8
    5280:	4649      	mov	r1, r9
    5282:	f7ff fe45 	bl	4f10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2c0>
    5286:	4605      	mov	r5, r0
    5288:	460c      	mov	r4, r1
    528a:	e024      	b.n	52d6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x686>
    528c:	4640      	mov	r0, r8
    528e:	4649      	mov	r1, r9
    5290:	f000 f8ec 	bl	546c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    5294:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 537c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72c>
    5298:	4602      	mov	r2, r0
    529a:	4608      	mov	r0, r1
    529c:	f8db 1008 	ldr.w	r1, [fp, #8]
    52a0:	9102      	str	r1, [sp, #8]
    52a2:	f8db 3004 	ldr.w	r3, [fp, #4]
    52a6:	4657      	mov	r7, sl
    52a8:	189d      	adds	r5, r3, r2
    52aa:	eb4a 0400 	adc.w	r4, sl, r0
    52ae:	e9db 0104 	ldrd	r0, r1, [fp, #16]
    52b2:	f000 f8cf 	bl	5454 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x804>
    52b6:	f8db 1004 	ldr.w	r1, [fp, #4]
    52ba:	4348      	muls	r0, r1
    52bc:	9000      	str	r0, [sp, #0]
    52be:	f7ff fed1 	bl	5064 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x414>
    52c2:	9a00      	ldr	r2, [sp, #0]
    52c4:	1880      	adds	r0, r0, r2
    52c6:	4179      	adcs	r1, r7
    52c8:	e9cb 0110 	strd	r0, r1, [fp, #64]	; 0x40
    52cc:	4621      	mov	r1, r4
    52ce:	4628      	mov	r0, r5
    52d0:	f000 f8c0 	bl	5454 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x804>
    52d4:	9005      	str	r0, [sp, #20]
    52d6:	2001      	movs	r0, #1
    52d8:	f009 ff96 	bl	f208 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    52dc:	4607      	mov	r7, r0
    52de:	2001      	movs	r0, #1
    52e0:	f003 f852 	bl	8388 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    52e4:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    52e8:	4401      	add	r1, r0
    52ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    52ee:	fbb1 f0f0 	udiv	r0, r1, r0
    52f2:	4407      	add	r7, r0
    52f4:	4628      	mov	r0, r5
    52f6:	4621      	mov	r1, r4
    52f8:	37f9      	adds	r7, #249	; 0xf9
    52fa:	9a02      	ldr	r2, [sp, #8]
    52fc:	f000 f8cc 	bl	5498 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x848>
    5300:	491e      	ldr	r1, [pc, #120]	; (537c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72c>)
    5302:	eb01 028a 	add.w	r2, r1, sl, lsl #2
    5306:	6892      	ldr	r2, [r2, #8]
    5308:	4282      	cmp	r2, r0
    530a:	d800      	bhi.n	530e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6be>
    530c:	4610      	mov	r0, r2
    530e:	6348      	str	r0, [r1, #52]	; 0x34
    5310:	9a08      	ldr	r2, [sp, #32]
    5312:	b10a      	cbz	r2, 5318 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c8>
    5314:	e9c1 5404 	strd	r5, r4, [r1, #16]
    5318:	e9c1 5406 	strd	r5, r4, [r1, #24]
    531c:	468b      	mov	fp, r1
    531e:	9904      	ldr	r1, [sp, #16]
    5320:	b111      	cbz	r1, 5328 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6d8>
    5322:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
    5326:	e001      	b.n	532c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6dc>
    5328:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
    532c:	2001      	movs	r0, #1
    532e:	72f0      	strb	r0, [r6, #11]
    5330:	f009 ff48 	bl	f1c4 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    5334:	8130      	strh	r0, [r6, #8]
    5336:	4628      	mov	r0, r5
    5338:	4621      	mov	r1, r4
    533a:	f000 f823 	bl	5384 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x734>
    533e:	72b0      	strb	r0, [r6, #10]
    5340:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
    5344:	6070      	str	r0, [r6, #4]
    5346:	9803      	ldr	r0, [sp, #12]
    5348:	b148      	cbz	r0, 535e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70e>
    534a:	2001      	movs	r0, #1
    534c:	7030      	strb	r0, [r6, #0]
    534e:	4a0c      	ldr	r2, [pc, #48]	; (5380 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x730>)
    5350:	4640      	mov	r0, r8
    5352:	4649      	mov	r1, r9
    5354:	f000 f8a0 	bl	5498 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x848>
    5358:	1bc0      	subs	r0, r0, r7
    535a:	6130      	str	r0, [r6, #16]
    535c:	e003      	b.n	5366 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x716>
    535e:	f886 a000 	strb.w	sl, [r6]
    5362:	e9c6 5404 	strd	r5, r4, [r6, #16]
    5366:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
    536a:	42b8      	cmp	r0, r7
    536c:	d303      	bcc.n	5376 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x726>
    536e:	2001      	movs	r0, #1
    5370:	b00b      	add	sp, #44	; 0x2c
    5372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5376:	2000      	movs	r0, #0
    5378:	e7fa      	b.n	5370 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x720>
    537a:	0000      	.short	0x0000
    537c:	20000bf0 	.word	0x20000bf0
    5380:	0f424000 	.word	0x0f424000
    5384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5388:	4c0d      	ldr	r4, [pc, #52]	; (53c0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x770>)
    538a:	4605      	mov	r5, r0
    538c:	460e      	mov	r6, r1
    538e:	7820      	ldrb	r0, [r4, #0]
    5390:	2804      	cmp	r0, #4
    5392:	d10b      	bne.n	53ac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x75c>
    5394:	6860      	ldr	r0, [r4, #4]
    5396:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    539a:	0047      	lsls	r7, r0, #1
    539c:	f7ff fe62 	bl	5064 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x414>
    53a0:	462a      	mov	r2, r5
    53a2:	4633      	mov	r3, r6
    53a4:	f009 ff5e 	bl	f264 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x72>
    53a8:	42b8      	cmp	r0, r7
    53aa:	d304      	bcc.n	53b6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x766>
    53ac:	78e0      	ldrb	r0, [r4, #3]
    53ae:	b128      	cbz	r0, 53bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x76c>
    53b0:	f7ff fe9e 	bl	50f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4a0>
    53b4:	b110      	cbz	r0, 53bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x76c>
    53b6:	2002      	movs	r0, #2
    53b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53bc:	2001      	movs	r0, #1
    53be:	e7fb      	b.n	53b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x768>
    53c0:	20000bf0 	.word	0x20000bf0
    53c4:	b570      	push	{r4, r5, r6, lr}
    53c6:	4d14      	ldr	r5, [pc, #80]	; (5418 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7c8>)
    53c8:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    53cc:	f105 0440 	add.w	r4, r5, #64	; 0x40
    53d0:	2800      	cmp	r0, #0
    53d2:	7828      	ldrb	r0, [r5, #0]
    53d4:	d00f      	beq.n	53f6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a6>
    53d6:	2805      	cmp	r0, #5
    53d8:	d004      	beq.n	53e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x794>
    53da:	f240 215a 	movw	r1, #602	; 0x25a
    53de:	2021      	movs	r0, #33	; 0x21
    53e0:	f7fb fb1c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53e4:	4620      	mov	r0, r4
    53e6:	f009 ff0a 	bl	f1fe <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    53ea:	b178      	cbz	r0, 540c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7bc>
    53ec:	4620      	mov	r0, r4
    53ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53f2:	f001 bd97 	b.w	6f24 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    53f6:	2805      	cmp	r0, #5
    53f8:	d108      	bne.n	540c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7bc>
    53fa:	4620      	mov	r0, r4
    53fc:	f009 feff 	bl	f1fe <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    5400:	b920      	cbnz	r0, 540c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7bc>
    5402:	6a28      	ldr	r0, [r5, #32]
    5404:	f500 700a 	add.w	r0, r0, #552	; 0x228
    5408:	f001 fddc 	bl	6fc4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    540c:	4620      	mov	r0, r4
    540e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5412:	f001 bdd7 	b.w	6fc4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    5416:	0000      	.short	0x0000
    5418:	20000bf0 	.word	0x20000bf0
    541c:	b510      	push	{r4, lr}
    541e:	f7fe f8c3 	bl	35a8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    5422:	490b      	ldr	r1, [pc, #44]	; (5450 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x800>)
    5424:	2000      	movs	r0, #0
    5426:	7088      	strb	r0, [r1, #2]
    5428:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    542c:	6208      	str	r0, [r1, #32]
    542e:	7008      	strb	r0, [r1, #0]
    5430:	f7fe f848 	bl	34c4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    5434:	4604      	mov	r4, r0
    5436:	7800      	ldrb	r0, [r0, #0]
    5438:	f005 fe26 	bl	b088 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    543c:	b110      	cbz	r0, 5444 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f4>
    543e:	2020      	movs	r0, #32
    5440:	7020      	strb	r0, [r4, #0]
    5442:	bd10      	pop	{r4, pc}
    5444:	f240 3195 	movw	r1, #917	; 0x395
    5448:	2021      	movs	r0, #33	; 0x21
    544a:	f7fb fae7 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    544e:	0000      	.short	0x0000
    5450:	20000bf0 	.word	0x20000bf0
    5454:	b510      	push	{r4, lr}
    5456:	4604      	mov	r4, r0
    5458:	f7ff fe04 	bl	5064 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x414>
    545c:	4902      	ldr	r1, [pc, #8]	; (5468 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x818>)
    545e:	1a20      	subs	r0, r4, r0
    5460:	6849      	ldr	r1, [r1, #4]
    5462:	fbb0 f0f1 	udiv	r0, r0, r1
    5466:	bd10      	pop	{r4, pc}
    5468:	20000bf0 	.word	0x20000bf0
    546c:	b570      	push	{r4, r5, r6, lr}
    546e:	4604      	mov	r4, r0
    5470:	460d      	mov	r5, r1
    5472:	f7ff fdf7 	bl	5064 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x414>
    5476:	4622      	mov	r2, r4
    5478:	462b      	mov	r3, r5
    547a:	f009 fef3 	bl	f264 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x72>
    547e:	4905      	ldr	r1, [pc, #20]	; (5494 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x844>)
    5480:	684c      	ldr	r4, [r1, #4]
    5482:	fbb0 f0f4 	udiv	r0, r0, r4
    5486:	4344      	muls	r4, r0
    5488:	f7ff fdec 	bl	5064 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x414>
    548c:	1900      	adds	r0, r0, r4
    548e:	f141 0100 	adc.w	r1, r1, #0
    5492:	bd70      	pop	{r4, r5, r6, pc}
    5494:	20000bf0 	.word	0x20000bf0
    5498:	4b0a      	ldr	r3, [pc, #40]	; (54c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x874>)
    549a:	b510      	push	{r4, lr}
    549c:	e9d3 430a 	ldrd	r4, r3, [r3, #40]	; 0x28
    54a0:	1a20      	subs	r0, r4, r0
    54a2:	eb63 0301 	sbc.w	r3, r3, r1
    54a6:	2400      	movs	r4, #0
    54a8:	4621      	mov	r1, r4
    54aa:	1a24      	subs	r4, r4, r0
    54ac:	4199      	sbcs	r1, r3
    54ae:	da06      	bge.n	54be <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x86e>
    54b0:	2100      	movs	r1, #0
    54b2:	1a14      	subs	r4, r2, r0
    54b4:	eb71 0403 	sbcs.w	r4, r1, r3
    54b8:	da00      	bge.n	54bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x86c>
    54ba:	4610      	mov	r0, r2
    54bc:	bd10      	pop	{r4, pc}
    54be:	2000      	movs	r0, #0
    54c0:	bd10      	pop	{r4, pc}
    54c2:	0000      	.short	0x0000
    54c4:	20000bf0 	.word	0x20000bf0

000054c8 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    54c8:	b510      	push	{r4, lr}
    54ca:	f002 fe67 	bl	819c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    54ce:	4905      	ldr	r1, [pc, #20]	; (54e4 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x1c>)
    54d0:	684a      	ldr	r2, [r1, #4]
    54d2:	4282      	cmp	r2, r0
    54d4:	d301      	bcc.n	54da <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x12>
    54d6:	7808      	ldrb	r0, [r1, #0]
    54d8:	b108      	cbz	r0, 54de <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x16>
    54da:	2000      	movs	r0, #0
    54dc:	bd10      	pop	{r4, pc}
    54de:	2001      	movs	r0, #1
    54e0:	bd10      	pop	{r4, pc}
    54e2:	0000      	.short	0x0000
    54e4:	20000100 	.word	0x20000100

000054e8 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    54e8:	4902      	ldr	r1, [pc, #8]	; (54f4 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0xc>)
    54ea:	2000      	movs	r0, #0
    54ec:	6008      	str	r0, [r1, #0]
    54ee:	6048      	str	r0, [r1, #4]
    54f0:	f000 b844 	b.w	557c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    54f4:	20000100 	.word	0x20000100

000054f8 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>:
    54f8:	b510      	push	{r4, lr}
    54fa:	0004      	movs	r4, r0
    54fc:	d005      	beq.n	550a <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x12>
    54fe:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    5502:	b128      	cbz	r0, 5510 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x18>
    5504:	f240 11a3 	movw	r1, #419	; 0x1a3
    5508:	e008      	b.n	551c <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x24>
    550a:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
    550e:	e005      	b.n	551c <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x24>
    5510:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    5514:	2820      	cmp	r0, #32
    5516:	d004      	beq.n	5522 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x2a>
    5518:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    551c:	2035      	movs	r0, #53	; 0x35
    551e:	f7fb fa7d 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5522:	4621      	mov	r1, r4
    5524:	4805      	ldr	r0, [pc, #20]	; (553c <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x44>)
    5526:	f005 fee9 	bl	b2fc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    552a:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    552e:	2820      	cmp	r0, #32
    5530:	d001      	beq.n	5536 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x3e>
    5532:	2000      	movs	r0, #0
    5534:	bd10      	pop	{r4, pc}
    5536:	200d      	movs	r0, #13
    5538:	bd10      	pop	{r4, pc}
    553a:	0000      	.short	0x0000
    553c:	0000f355 	.word	0x0000f355

00005540 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    5540:	4901      	ldr	r1, [pc, #4]	; (5548 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    5542:	7048      	strb	r0, [r1, #1]
    5544:	4770      	bx	lr
    5546:	0000      	.short	0x0000
    5548:	20000100 	.word	0x20000100

0000554c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    554c:	b570      	push	{r4, r5, r6, lr}
    554e:	4605      	mov	r5, r0
    5550:	4809      	ldr	r0, [pc, #36]	; (5578 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x2c>)
    5552:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    5556:	fbb0 f4f1 	udiv	r4, r0, r1
    555a:	f009 fe4a 	bl	f1f2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    555e:	1901      	adds	r1, r0, r4
    5560:	4628      	mov	r0, r5
    5562:	f201 113f 	addw	r1, r1, #319	; 0x13f
    5566:	f009 f940 	bl	e7ea <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    556a:	f640 0148 	movw	r1, #2120	; 0x848
    556e:	4288      	cmp	r0, r1
    5570:	d300      	bcc.n	5574 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x28>
    5572:	4608      	mov	r0, r1
    5574:	b280      	uxth	r0, r0
    5576:	bd70      	pop	{r4, r5, r6, pc}
    5578:	000122f9 	.word	0x000122f9
    557c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    5580:	4e1c      	ldr	r6, [pc, #112]	; (55f4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xa8>)
    5582:	2001      	movs	r0, #1
    5584:	7030      	strb	r0, [r6, #0]
    5586:	2400      	movs	r4, #0
    5588:	f64f 77ff 	movw	r7, #65535	; 0xffff
    558c:	e016      	b.n	55bc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x70>
    558e:	2100      	movs	r1, #0
    5590:	f7fb fd26 	bl	fe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5594:	0005      	movs	r5, r0
    5596:	d014      	beq.n	55c2 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x76>
    5598:	f895 0249 	ldrb.w	r0, [r5, #585]	; 0x249
    559c:	f005 fd96 	bl	b0cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    55a0:	f885 4248 	strb.w	r4, [r5, #584]	; 0x248
    55a4:	f895 0249 	ldrb.w	r0, [r5, #585]	; 0x249
    55a8:	f005 fd6e 	bl	b088 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    55ac:	b160      	cbz	r0, 55c8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    55ae:	2020      	movs	r0, #32
    55b0:	f885 0249 	strb.w	r0, [r5, #585]	; 0x249
    55b4:	f505 700a 	add.w	r0, r5, #552	; 0x228
    55b8:	f001 fd04 	bl	6fc4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    55bc:	9400      	str	r4, [sp, #0]
    55be:	9401      	str	r4, [sp, #4]
    55c0:	e010      	b.n	55e4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x98>
    55c2:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    55c6:	e001      	b.n	55cc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x80>
    55c8:	f240 11bf 	movw	r1, #447	; 0x1bf
    55cc:	2035      	movs	r0, #53	; 0x35
    55ce:	f7fb fa25 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55d2:	9800      	ldr	r0, [sp, #0]
    55d4:	b130      	cbz	r0, 55e4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x98>
    55d6:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    55da:	b119      	cbz	r1, 55e4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x98>
    55dc:	8800      	ldrh	r0, [r0, #0]
    55de:	42b8      	cmp	r0, r7
    55e0:	d1d5      	bne.n	558e <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x42>
    55e2:	e004      	b.n	55ee <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xa2>
    55e4:	4668      	mov	r0, sp
    55e6:	f7fb fd41 	bl	106c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    55ea:	2800      	cmp	r0, #0
    55ec:	d0f1      	beq.n	55d2 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x86>
    55ee:	7034      	strb	r4, [r6, #0]
    55f0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    55f4:	20000100 	.word	0x20000100
    55f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55fc:	4606      	mov	r6, r0
    55fe:	f009 fdf8 	bl	f1f2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    5602:	f500 70a0 	add.w	r0, r0, #320	; 0x140
    5606:	b284      	uxth	r4, r0
    5608:	f896 006b 	ldrb.w	r0, [r6, #107]	; 0x6b
    560c:	2128      	movs	r1, #40	; 0x28
    560e:	f009 fe91 	bl	f334 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x50>
    5612:	4f1d      	ldr	r7, [pc, #116]	; (5688 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x13c>)
    5614:	eb04 0800 	add.w	r8, r4, r0
    5618:	7878      	ldrb	r0, [r7, #1]
    561a:	b108      	cbz	r0, 5620 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xd4>
    561c:	6934      	ldr	r4, [r6, #16]
    561e:	e004      	b.n	562a <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xde>
    5620:	6af4      	ldr	r4, [r6, #44]	; 0x2c
    5622:	6930      	ldr	r0, [r6, #16]
    5624:	42a0      	cmp	r0, r4
    5626:	d200      	bcs.n	562a <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xde>
    5628:	4604      	mov	r4, r0
    562a:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    562e:	f009 f8e7 	bl	e800 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    5632:	4605      	mov	r5, r0
    5634:	f009 fddd 	bl	f1f2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    5638:	4405      	add	r5, r0
    563a:	1b64      	subs	r4, r4, r5
    563c:	2c00      	cmp	r4, #0
    563e:	dc00      	bgt.n	5642 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xf6>
    5640:	2400      	movs	r4, #0
    5642:	2002      	movs	r0, #2
    5644:	f004 fe22 	bl	a28c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    5648:	4284      	cmp	r4, r0
    564a:	d300      	bcc.n	564e <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x102>
    564c:	4604      	mov	r4, r0
    564e:	2102      	movs	r1, #2
    5650:	4620      	mov	r0, r4
    5652:	f004 fd2b 	bl	a0ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    5656:	b900      	cbnz	r0, 565a <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x10e>
    5658:	4425      	add	r5, r4
    565a:	f009 fdca 	bl	f1f2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    565e:	1a2c      	subs	r4, r5, r0
    5660:	4642      	mov	r2, r8
    5662:	4629      	mov	r1, r5
    5664:	4630      	mov	r0, r6
    5666:	f2a4 142f 	subw	r4, r4, #303	; 0x12f
    566a:	f009 f86a 	bl	e742 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    566e:	6078      	str	r0, [r7, #4]
    5670:	4620      	mov	r0, r4
    5672:	f005 ff43 	bl	b4fc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    5676:	2800      	cmp	r0, #0
    5678:	d103      	bne.n	5682 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x136>
    567a:	21fb      	movs	r1, #251	; 0xfb
    567c:	2035      	movs	r0, #53	; 0x35
    567e:	f7fb f9cd 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5686:	0000      	.short	0x0000
    5688:	20000100 	.word	0x20000100
    568c:	b510      	push	{r4, lr}
    568e:	4604      	mov	r4, r0
    5690:	2901      	cmp	r1, #1
    5692:	d102      	bne.n	569a <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x14e>
    5694:	480a      	ldr	r0, [pc, #40]	; (56c0 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x174>)
    5696:	7800      	ldrb	r0, [r0, #0]
    5698:	b140      	cbz	r0, 56ac <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x160>
    569a:	2004      	movs	r0, #4
    569c:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    56a0:	f002 fd88 	bl	81b4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    56a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    56a8:	f005 be4c 	b.w	b344 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    56ac:	2200      	movs	r2, #0
    56ae:	2101      	movs	r1, #1
    56b0:	4620      	mov	r0, r4
    56b2:	f009 ff4c 	bl	f54e <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x26a>
    56b6:	f834 0f9c 	ldrh.w	r0, [r4, #156]!
    56ba:	1c40      	adds	r0, r0, #1
    56bc:	8020      	strh	r0, [r4, #0]
    56be:	e7ef      	b.n	56a0 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x154>
    56c0:	20000100 	.word	0x20000100
    56c4:	b510      	push	{r4, lr}
    56c6:	4604      	mov	r4, r0
    56c8:	4608      	mov	r0, r1
    56ca:	f002 fe5d 	bl	8388 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    56ce:	4906      	ldr	r1, [pc, #24]	; (56e8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x19c>)
    56d0:	f200 709d 	addw	r0, r0, #1949	; 0x79d
    56d4:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
    56d8:	4408      	add	r0, r1
    56da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    56de:	fbb0 f0f1 	udiv	r0, r0, r1
    56e2:	f200 103f 	addw	r0, r0, #319	; 0x13f
    56e6:	bd10      	pop	{r4, pc}
    56e8:	0000f580 	.word	0x0000f580

000056ec <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    56ec:	4806      	ldr	r0, [pc, #24]	; (5708 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    56ee:	4905      	ldr	r1, [pc, #20]	; (5704 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    56f0:	6501      	str	r1, [r0, #80]	; 0x50
    56f2:	4906      	ldr	r1, [pc, #24]	; (570c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    56f4:	6541      	str	r1, [r0, #84]	; 0x54
    56f6:	4807      	ldr	r0, [pc, #28]	; (5714 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    56f8:	4905      	ldr	r1, [pc, #20]	; (5710 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    56fa:	6501      	str	r1, [r0, #80]	; 0x50
    56fc:	4906      	ldr	r1, [pc, #24]	; (5718 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    56fe:	6541      	str	r1, [r0, #84]	; 0x54
    5700:	4770      	bx	lr
    5702:	0000      	.short	0x0000
    5704:	0000683d 	.word	0x0000683d
    5708:	2000011c 	.word	0x2000011c
    570c:	00006915 	.word	0x00006915
    5710:	0000eaef 	.word	0x0000eaef
    5714:	200001c8 	.word	0x200001c8
    5718:	0000f74f 	.word	0x0000f74f

0000571c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    571c:	b570      	push	{r4, r5, r6, lr}
    571e:	4605      	mov	r5, r0
    5720:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    5724:	f895 10a9 	ldrb.w	r1, [r5, #169]	; 0xa9
    5728:	b1c9      	cbz	r1, 575e <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    572a:	f8b5 10d8 	ldrh.w	r1, [r5, #216]	; 0xd8
    572e:	1a0c      	subs	r4, r1, r0
    5730:	f1b4 0404 	subs.w	r4, r4, #4
    5734:	f895 00d4 	ldrb.w	r0, [r5, #212]	; 0xd4
    5738:	b140      	cbz	r0, 574c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    573a:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    573e:	2300      	movs	r3, #0
    5740:	2109      	movs	r1, #9
    5742:	f105 0088 	add.w	r0, r5, #136	; 0x88
    5746:	f008 fc93 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    574a:	b160      	cbz	r0, 5766 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    574c:	4628      	mov	r0, r5
    574e:	f00a f8b4 	bl	f8ba <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2da>
    5752:	b138      	cbz	r0, 5764 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    5754:	e9d5 1032 	ldrd	r1, r0, [r5, #200]	; 0xc8
    5758:	1a40      	subs	r0, r0, r1
    575a:	1f00      	subs	r0, r0, #4
    575c:	e003      	b.n	5766 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    575e:	f1c0 0402 	rsb	r4, r0, #2
    5762:	e7e7      	b.n	5734 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    5764:	4620      	mov	r0, r4
    5766:	42a0      	cmp	r0, r4
    5768:	da00      	bge.n	576c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    576a:	4604      	mov	r4, r0
    576c:	2c00      	cmp	r4, #0
    576e:	dc01      	bgt.n	5774 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    5770:	2000      	movs	r0, #0
    5772:	bd70      	pop	{r4, r5, r6, pc}
    5774:	b2a0      	uxth	r0, r4
    5776:	bd70      	pop	{r4, r5, r6, pc}

00005778 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    5778:	481d      	ldr	r0, [pc, #116]	; (57f0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    577a:	491c      	ldr	r1, [pc, #112]	; (57ec <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    577c:	6081      	str	r1, [r0, #8]
    577e:	491d      	ldr	r1, [pc, #116]	; (57f4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    5780:	61c1      	str	r1, [r0, #28]
    5782:	491d      	ldr	r1, [pc, #116]	; (57f8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    5784:	62c1      	str	r1, [r0, #44]	; 0x2c
    5786:	491d      	ldr	r1, [pc, #116]	; (57fc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    5788:	6101      	str	r1, [r0, #16]
    578a:	491d      	ldr	r1, [pc, #116]	; (5800 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    578c:	6141      	str	r1, [r0, #20]
    578e:	491d      	ldr	r1, [pc, #116]	; (5804 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    5790:	6441      	str	r1, [r0, #68]	; 0x44
    5792:	491d      	ldr	r1, [pc, #116]	; (5808 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    5794:	6181      	str	r1, [r0, #24]
    5796:	491d      	ldr	r1, [pc, #116]	; (580c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    5798:	6301      	str	r1, [r0, #48]	; 0x30
    579a:	491d      	ldr	r1, [pc, #116]	; (5810 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    579c:	6241      	str	r1, [r0, #36]	; 0x24
    579e:	491d      	ldr	r1, [pc, #116]	; (5814 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    57a0:	64c1      	str	r1, [r0, #76]	; 0x4c
    57a2:	491d      	ldr	r1, [pc, #116]	; (5818 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    57a4:	6481      	str	r1, [r0, #72]	; 0x48
    57a6:	491d      	ldr	r1, [pc, #116]	; (581c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    57a8:	6341      	str	r1, [r0, #52]	; 0x34
    57aa:	491d      	ldr	r1, [pc, #116]	; (5820 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    57ac:	6381      	str	r1, [r0, #56]	; 0x38
    57ae:	481e      	ldr	r0, [pc, #120]	; (5828 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    57b0:	491c      	ldr	r1, [pc, #112]	; (5824 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    57b2:	6081      	str	r1, [r0, #8]
    57b4:	491d      	ldr	r1, [pc, #116]	; (582c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    57b6:	61c1      	str	r1, [r0, #28]
    57b8:	491d      	ldr	r1, [pc, #116]	; (5830 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    57ba:	6201      	str	r1, [r0, #32]
    57bc:	491d      	ldr	r1, [pc, #116]	; (5834 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    57be:	6041      	str	r1, [r0, #4]
    57c0:	491d      	ldr	r1, [pc, #116]	; (5838 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    57c2:	6001      	str	r1, [r0, #0]
    57c4:	491d      	ldr	r1, [pc, #116]	; (583c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    57c6:	6281      	str	r1, [r0, #40]	; 0x28
    57c8:	491d      	ldr	r1, [pc, #116]	; (5840 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    57ca:	62c1      	str	r1, [r0, #44]	; 0x2c
    57cc:	491d      	ldr	r1, [pc, #116]	; (5844 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    57ce:	60c1      	str	r1, [r0, #12]
    57d0:	491d      	ldr	r1, [pc, #116]	; (5848 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    57d2:	6181      	str	r1, [r0, #24]
    57d4:	491d      	ldr	r1, [pc, #116]	; (584c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    57d6:	6301      	str	r1, [r0, #48]	; 0x30
    57d8:	491d      	ldr	r1, [pc, #116]	; (5850 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd8>)
    57da:	6481      	str	r1, [r0, #72]	; 0x48
    57dc:	491d      	ldr	r1, [pc, #116]	; (5854 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xdc>)
    57de:	64c1      	str	r1, [r0, #76]	; 0x4c
    57e0:	491d      	ldr	r1, [pc, #116]	; (5858 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe0>)
    57e2:	6441      	str	r1, [r0, #68]	; 0x44
    57e4:	491d      	ldr	r1, [pc, #116]	; (585c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe4>)
    57e6:	6241      	str	r1, [r0, #36]	; 0x24
    57e8:	4770      	bx	lr
    57ea:	0000      	.short	0x0000
    57ec:	00006bd1 	.word	0x00006bd1
    57f0:	2000011c 	.word	0x2000011c
    57f4:	00006bdd 	.word	0x00006bdd
    57f8:	0000f65d 	.word	0x0000f65d
    57fc:	0000677d 	.word	0x0000677d
    5800:	0000f67d 	.word	0x0000f67d
    5804:	00006ad5 	.word	0x00006ad5
    5808:	00006b55 	.word	0x00006b55
    580c:	00006c25 	.word	0x00006c25
    5810:	000067b9 	.word	0x000067b9
    5814:	0000ecc7 	.word	0x0000ecc7
    5818:	0000ec71 	.word	0x0000ec71
    581c:	00006b09 	.word	0x00006b09
    5820:	00006921 	.word	0x00006921
    5824:	0000eaaf 	.word	0x0000eaaf
    5828:	200001c8 	.word	0x200001c8
    582c:	0000f899 	.word	0x0000f899
    5830:	0000f74b 	.word	0x0000f74b
    5834:	0000f6bd 	.word	0x0000f6bd
    5838:	0000f6e7 	.word	0x0000f6e7
    583c:	0000f787 	.word	0x0000f787
    5840:	0000f7b9 	.word	0x0000f7b9
    5844:	0000f711 	.word	0x0000f711
    5848:	0000f87b 	.word	0x0000f87b
    584c:	0000f8b7 	.word	0x0000f8b7
    5850:	0000eca3 	.word	0x0000eca3
    5854:	0000eced 	.word	0x0000eced
    5858:	0000f859 	.word	0x0000f859
    585c:	0000f783 	.word	0x0000f783

00005860 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    5860:	4806      	ldr	r0, [pc, #24]	; (587c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    5862:	4905      	ldr	r1, [pc, #20]	; (5878 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    5864:	6581      	str	r1, [r0, #88]	; 0x58
    5866:	4906      	ldr	r1, [pc, #24]	; (5880 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    5868:	65c1      	str	r1, [r0, #92]	; 0x5c
    586a:	4807      	ldr	r0, [pc, #28]	; (5888 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    586c:	4905      	ldr	r1, [pc, #20]	; (5884 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    586e:	6581      	str	r1, [r0, #88]	; 0x58
    5870:	4906      	ldr	r1, [pc, #24]	; (588c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    5872:	6601      	str	r1, [r0, #96]	; 0x60
    5874:	4770      	bx	lr
    5876:	0000      	.short	0x0000
    5878:	0000692d 	.word	0x0000692d
    587c:	2000011c 	.word	0x2000011c
    5880:	00006a65 	.word	0x00006a65
    5884:	000108a9 	.word	0x000108a9
    5888:	200001c8 	.word	0x200001c8
    588c:	0000f7df 	.word	0x0000f7df

00005890 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    5890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5892:	4d38      	ldr	r5, [pc, #224]	; (5974 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    5894:	2600      	movs	r6, #0
    5896:	f1a5 070c 	sub.w	r7, r5, #12
    589a:	702e      	strb	r6, [r5, #0]
    589c:	6068      	str	r0, [r5, #4]
    589e:	807e      	strh	r6, [r7, #2]
    58a0:	707e      	strb	r6, [r7, #1]
    58a2:	4604      	mov	r4, r0
    58a4:	703e      	strb	r6, [r7, #0]
    58a6:	8800      	ldrh	r0, [r0, #0]
    58a8:	f7fb ff0c 	bl	16c4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    58ac:	6868      	ldr	r0, [r5, #4]
    58ae:	8800      	ldrh	r0, [r0, #0]
    58b0:	f7fb feb0 	bl	1614 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    58b4:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    58b8:	1c40      	adds	r0, r0, #1
    58ba:	b282      	uxth	r2, r0
    58bc:	6868      	ldr	r0, [r5, #4]
    58be:	f100 0388 	add.w	r3, r0, #136	; 0x88
    58c2:	4601      	mov	r1, r0
    58c4:	4618      	mov	r0, r3
    58c6:	f008 fd99 	bl	e3fc <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    58ca:	b120      	cbz	r0, 58d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x46>
    58cc:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
    58d0:	2036      	movs	r0, #54	; 0x36
    58d2:	f7fb f8a3 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    58d6:	f8a4 624a 	strh.w	r6, [r4, #586]	; 0x24a
    58da:	f894 00a6 	ldrb.w	r0, [r4, #166]	; 0xa6
    58de:	2825      	cmp	r0, #37	; 0x25
    58e0:	d10a      	bne.n	58f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    58e2:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    58e6:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    58ea:	1a40      	subs	r0, r0, r1
    58ec:	b200      	sxth	r0, r0
    58ee:	2800      	cmp	r0, #0
    58f0:	db02      	blt.n	58f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    58f2:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
    58f6:	e011      	b.n	591c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c>
    58f8:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    58fc:	2825      	cmp	r0, #37	; 0x25
    58fe:	d003      	beq.n	5908 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    5900:	2826      	cmp	r0, #38	; 0x26
    5902:	d001      	beq.n	5908 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    5904:	2827      	cmp	r0, #39	; 0x27
    5906:	d10c      	bne.n	5922 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    5908:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    590c:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    5910:	1a40      	subs	r0, r0, r1
    5912:	b200      	sxth	r0, r0
    5914:	2800      	cmp	r0, #0
    5916:	db04      	blt.n	5922 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    5918:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
    591c:	f000 fea6 	bl	666c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xce8>
    5920:	b118      	cbz	r0, 592a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9a>
    5922:	f000 fd2b 	bl	637c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9f8>
    5926:	b130      	cbz	r0, 5936 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa6>
    5928:	e022      	b.n	5970 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>
    592a:	2100      	movs	r1, #0
    592c:	4608      	mov	r0, r1
    592e:	f000 fccd 	bl	62cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x948>
    5932:	2000      	movs	r0, #0
    5934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5936:	6868      	ldr	r0, [r5, #4]
    5938:	3088      	adds	r0, #136	; 0x88
    593a:	f009 fe5f 	bl	f5fc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    593e:	b120      	cbz	r0, 594a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba>
    5940:	6868      	ldr	r0, [r5, #4]
    5942:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    5946:	f000 fbbd 	bl	60c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x740>
    594a:	480b      	ldr	r0, [pc, #44]	; (5978 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    594c:	9000      	str	r0, [sp, #0]
    594e:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
    5952:	4b0a      	ldr	r3, [pc, #40]	; (597c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>)
    5954:	4a0a      	ldr	r2, [pc, #40]	; (5980 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf0>)
    5956:	f7fb ff37 	bl	17c8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>
    595a:	6868      	ldr	r0, [r5, #4]
    595c:	2300      	movs	r3, #0
    595e:	2105      	movs	r1, #5
    5960:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5964:	3088      	adds	r0, #136	; 0x88
    5966:	f008 fb83 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    596a:	b108      	cbz	r0, 5970 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>
    596c:	f7fb ff26 	bl	17bc <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>
    5970:	2001      	movs	r0, #1
    5972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5974:	20000114 	.word	0x20000114
    5978:	000062cd 	.word	0x000062cd
    597c:	00005b61 	.word	0x00005b61
    5980:	000065e5 	.word	0x000065e5

00005984 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    5984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5986:	460d      	mov	r5, r1
    5988:	4604      	mov	r4, r0
    598a:	2600      	movs	r6, #0
    598c:	e051      	b.n	5a32 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xae>
    598e:	bf00      	nop
    5990:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    5994:	1c40      	adds	r0, r0, #1
    5996:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    599a:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
    599e:	1c40      	adds	r0, r0, #1
    59a0:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
    59a4:	4620      	mov	r0, r4
    59a6:	f009 ff88 	bl	f8ba <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2da>
    59aa:	b198      	cbz	r0, 59d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    59ac:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    59b0:	1c40      	adds	r0, r0, #1
    59b2:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    59b6:	4620      	mov	r0, r4
    59b8:	f009 fe41 	bl	f63e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    59bc:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
    59c0:	4288      	cmp	r0, r1
    59c2:	d307      	bcc.n	59d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    59c4:	2202      	movs	r2, #2
    59c6:	491d      	ldr	r1, [pc, #116]	; (5a3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb8>)
    59c8:	f504 70b0 	add.w	r0, r4, #352	; 0x160
    59cc:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    59d0:	f008 fe93 	bl	e6fa <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    59d4:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    59d8:	b120      	cbz	r0, 59e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x60>
    59da:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    59de:	1c40      	adds	r0, r0, #1
    59e0:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
    59e4:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
    59e8:	b120      	cbz	r0, 59f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x70>
    59ea:	f8b4 00e2 	ldrh.w	r0, [r4, #226]	; 0xe2
    59ee:	1c40      	adds	r0, r0, #1
    59f0:	f8a4 00e2 	strh.w	r0, [r4, #226]	; 0xe2
    59f4:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
    59f8:	f88d 0000 	strb.w	r0, [sp]
    59fc:	9800      	ldr	r0, [sp, #0]
    59fe:	9000      	str	r0, [sp, #0]
    5a00:	f89d 0000 	ldrb.w	r0, [sp]
    5a04:	b940      	cbnz	r0, 5a18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94>
    5a06:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
    5a0a:	2300      	movs	r3, #0
    5a0c:	2101      	movs	r1, #1
    5a0e:	f104 0088 	add.w	r0, r4, #136	; 0x88
    5a12:	f008 fb2d 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a16:	b120      	cbz	r0, 5a22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e>
    5a18:	f8b4 00da 	ldrh.w	r0, [r4, #218]	; 0xda
    5a1c:	1c40      	adds	r0, r0, #1
    5a1e:	f8a4 00da 	strh.w	r0, [r4, #218]	; 0xda
    5a22:	4620      	mov	r0, r4
    5a24:	f000 fa18 	bl	5e58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4d4>
    5a28:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5a2c:	1c40      	adds	r0, r0, #1
    5a2e:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    5a32:	1e6d      	subs	r5, r5, #1
    5a34:	b2ad      	uxth	r5, r5
    5a36:	d2ab      	bcs.n	5990 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc>
    5a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a3a:	0000      	.short	0x0000
    5a3c:	0000ec5f 	.word	0x0000ec5f
    5a40:	4411      	add	r1, r2
    5a42:	78c2      	ldrb	r2, [r0, #3]
    5a44:	480c      	ldr	r0, [pc, #48]	; (5a78 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf4>)
    5a46:	1d89      	adds	r1, r1, #6
    5a48:	b289      	uxth	r1, r1
    5a4a:	6840      	ldr	r0, [r0, #4]
    5a4c:	2a01      	cmp	r2, #1
    5a4e:	d006      	beq.n	5a5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xda>
    5a50:	b142      	cbz	r2, 5a64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0>
    5a52:	2a18      	cmp	r2, #24
    5a54:	d105      	bne.n	5a62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde>
    5a56:	f890 2262 	ldrb.w	r2, [r0, #610]	; 0x262
    5a5a:	b132      	cbz	r2, 5a6a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe6>
    5a5c:	e009      	b.n	5a72 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    5a5e:	f8a0 125e 	strh.w	r1, [r0, #606]	; 0x25e
    5a62:	4770      	bx	lr
    5a64:	f8a0 1266 	strh.w	r1, [r0, #614]	; 0x266
    5a68:	4770      	bx	lr
    5a6a:	f890 2263 	ldrb.w	r2, [r0, #611]	; 0x263
    5a6e:	b902      	cbnz	r2, 5a72 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    5a70:	2100      	movs	r1, #0
    5a72:	f8a0 1260 	strh.w	r1, [r0, #608]	; 0x260
    5a76:	4770      	bx	lr
    5a78:	20000114 	.word	0x20000114
    5a7c:	490b      	ldr	r1, [pc, #44]	; (5aac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x128>)
    5a7e:	78c2      	ldrb	r2, [r0, #3]
    5a80:	6849      	ldr	r1, [r1, #4]
    5a82:	2a01      	cmp	r2, #1
    5a84:	d006      	beq.n	5a94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x110>
    5a86:	b15a      	cbz	r2, 5aa0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c>
    5a88:	2a18      	cmp	r2, #24
    5a8a:	d108      	bne.n	5a9e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a>
    5a8c:	f8b1 1260 	ldrh.w	r1, [r1, #608]	; 0x260
    5a90:	f008 bdc9 	b.w	e626 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>
    5a94:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
    5a98:	7241      	strb	r1, [r0, #9]
    5a9a:	0a09      	lsrs	r1, r1, #8
    5a9c:	7281      	strb	r1, [r0, #10]
    5a9e:	4770      	bx	lr
    5aa0:	f8b1 1266 	ldrh.w	r1, [r1, #614]	; 0x266
    5aa4:	7341      	strb	r1, [r0, #13]
    5aa6:	0a09      	lsrs	r1, r1, #8
    5aa8:	7381      	strb	r1, [r0, #14]
    5aaa:	4770      	bx	lr
    5aac:	20000114 	.word	0x20000114
    5ab0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    5ab2:	4c2a      	ldr	r4, [pc, #168]	; (5b5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d8>)
    5ab4:	2300      	movs	r3, #0
    5ab6:	4619      	mov	r1, r3
    5ab8:	6860      	ldr	r0, [r4, #4]
    5aba:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5abe:	3088      	adds	r0, #136	; 0x88
    5ac0:	f008 fad6 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ac4:	2800      	cmp	r0, #0
    5ac6:	d048      	beq.n	5b5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5ac8:	6860      	ldr	r0, [r4, #4]
    5aca:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    5ace:	f88d 1000 	strb.w	r1, [sp]
    5ad2:	9900      	ldr	r1, [sp, #0]
    5ad4:	9100      	str	r1, [sp, #0]
    5ad6:	f89d 1000 	ldrb.w	r1, [sp]
    5ada:	2500      	movs	r5, #0
    5adc:	2900      	cmp	r1, #0
    5ade:	d03c      	beq.n	5b5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5ae0:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    5ae4:	f008 fb27 	bl	e136 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5ae8:	2800      	cmp	r0, #0
    5aea:	d136      	bne.n	5b5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5aec:	6860      	ldr	r0, [r4, #4]
    5aee:	f8b0 009c 	ldrh.w	r0, [r0, #156]	; 0x9c
    5af2:	280a      	cmp	r0, #10
    5af4:	d931      	bls.n	5b5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5af6:	4668      	mov	r0, sp
    5af8:	f7fc fe38 	bl	276c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    5afc:	2800      	cmp	r0, #0
    5afe:	d02c      	beq.n	5b5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5b00:	6861      	ldr	r1, [r4, #4]
    5b02:	2205      	movs	r2, #5
    5b04:	4668      	mov	r0, sp
    5b06:	31ae      	adds	r1, #174	; 0xae
    5b08:	f00b fa67 	bl	10fda <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5b0c:	b310      	cbz	r0, 5b54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d0>
    5b0e:	6860      	ldr	r0, [r4, #4]
    5b10:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    5b14:	7808      	ldrb	r0, [r1, #0]
    5b16:	b158      	cbz	r0, 5b30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1ac>
    5b18:	2205      	movs	r2, #5
    5b1a:	4668      	mov	r0, sp
    5b1c:	1c49      	adds	r1, r1, #1
    5b1e:	f00b fa5c 	bl	10fda <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5b22:	2800      	cmp	r0, #0
    5b24:	d119      	bne.n	5b5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5b26:	6860      	ldr	r0, [r4, #4]
    5b28:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5b2c:	7800      	ldrb	r0, [r0, #0]
    5b2e:	b940      	cbnz	r0, 5b42 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1be>
    5b30:	6860      	ldr	r0, [r4, #4]
    5b32:	9900      	ldr	r1, [sp, #0]
    5b34:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5b38:	f8c0 1001 	str.w	r1, [r0, #1]
    5b3c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5b40:	7141      	strb	r1, [r0, #5]
    5b42:	6860      	ldr	r0, [r4, #4]
    5b44:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5b48:	7801      	ldrb	r1, [r0, #0]
    5b4a:	1c49      	adds	r1, r1, #1
    5b4c:	7001      	strb	r1, [r0, #0]
    5b4e:	2001      	movs	r0, #1
    5b50:	f000 fddc 	bl	670c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    5b54:	6860      	ldr	r0, [r4, #4]
    5b56:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    5b5a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    5b5c:	20000114 	.word	0x20000114
    5b60:	4a0c      	ldr	r2, [pc, #48]	; (5b94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x210>)
    5b62:	7851      	ldrb	r1, [r2, #1]
    5b64:	b9a1      	cbnz	r1, 5b90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    5b66:	f102 010c 	add.w	r1, r2, #12
    5b6a:	2801      	cmp	r0, #1
    5b6c:	6849      	ldr	r1, [r1, #4]
    5b6e:	d008      	beq.n	5b82 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fe>
    5b70:	7890      	ldrb	r0, [r2, #2]
    5b72:	0740      	lsls	r0, r0, #29
    5b74:	d503      	bpl.n	5b7e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fa>
    5b76:	f891 00a7 	ldrb.w	r0, [r1, #167]	; 0xa7
    5b7a:	2806      	cmp	r0, #6
    5b7c:	d008      	beq.n	5b90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    5b7e:	2001      	movs	r0, #1
    5b80:	4770      	bx	lr
    5b82:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    5b86:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    5b88:	4288      	cmp	r0, r1
    5b8a:	d801      	bhi.n	5b90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    5b8c:	f7ff bc9c 	b.w	54c8 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    5b90:	2000      	movs	r0, #0
    5b92:	4770      	bx	lr
    5b94:	20000108 	.word	0x20000108
    5b98:	b538      	push	{r3, r4, r5, lr}
    5b9a:	4c91      	ldr	r4, [pc, #580]	; (5de0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x45c>)
    5b9c:	6860      	ldr	r0, [r4, #4]
    5b9e:	3088      	adds	r0, #136	; 0x88
    5ba0:	f009 fd2c 	bl	f5fc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5ba4:	2800      	cmp	r0, #0
    5ba6:	d162      	bne.n	5c6e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ea>
    5ba8:	6860      	ldr	r0, [r4, #4]
    5baa:	2300      	movs	r3, #0
    5bac:	2101      	movs	r1, #1
    5bae:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    5bb2:	3088      	adds	r0, #136	; 0x88
    5bb4:	f008 fa5c 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5bb8:	2800      	cmp	r0, #0
    5bba:	d158      	bne.n	5c6e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ea>
    5bbc:	6860      	ldr	r0, [r4, #4]
    5bbe:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
    5bc2:	f88d 1000 	strb.w	r1, [sp]
    5bc6:	9900      	ldr	r1, [sp, #0]
    5bc8:	9100      	str	r1, [sp, #0]
    5bca:	f89d 1000 	ldrb.w	r1, [sp]
    5bce:	b109      	cbz	r1, 5bd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x250>
    5bd0:	2002      	movs	r0, #2
    5bd2:	e042      	b.n	5c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2d6>
    5bd4:	2500      	movs	r5, #0
    5bd6:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5bda:	462b      	mov	r3, r5
    5bdc:	4629      	mov	r1, r5
    5bde:	3088      	adds	r0, #136	; 0x88
    5be0:	f008 fa46 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5be4:	b128      	cbz	r0, 5bf2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    5be6:	6860      	ldr	r0, [r4, #4]
    5be8:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    5bec:	b108      	cbz	r0, 5bf2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    5bee:	2012      	movs	r0, #18
    5bf0:	e033      	b.n	5c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2d6>
    5bf2:	6860      	ldr	r0, [r4, #4]
    5bf4:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5bf8:	2a19      	cmp	r2, #25
    5bfa:	d027      	beq.n	5c4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c8>
    5bfc:	dc06      	bgt.n	5c0c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x288>
    5bfe:	2a03      	cmp	r2, #3
    5c00:	d026      	beq.n	5c50 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2cc>
    5c02:	2a12      	cmp	r2, #18
    5c04:	d01e      	beq.n	5c44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c0>
    5c06:	2a13      	cmp	r2, #19
    5c08:	d104      	bne.n	5c14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x290>
    5c0a:	e019      	b.n	5c40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2bc>
    5c0c:	2a24      	cmp	r2, #36	; 0x24
    5c0e:	d028      	beq.n	5c62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2de>
    5c10:	2a2f      	cmp	r2, #47	; 0x2f
    5c12:	d02d      	beq.n	5c70 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ec>
    5c14:	2300      	movs	r3, #0
    5c16:	2104      	movs	r1, #4
    5c18:	3088      	adds	r0, #136	; 0x88
    5c1a:	f008 fa29 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5c1e:	2800      	cmp	r0, #0
    5c20:	d125      	bne.n	5c6e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ea>
    5c22:	6860      	ldr	r0, [r4, #4]
    5c24:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    5c28:	291e      	cmp	r1, #30
    5c2a:	d046      	beq.n	5cba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x336>
    5c2c:	dc27      	bgt.n	5c7e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2fa>
    5c2e:	2901      	cmp	r1, #1
    5c30:	d034      	beq.n	5c9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x318>
    5c32:	2902      	cmp	r1, #2
    5c34:	d03f      	beq.n	5cb6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x332>
    5c36:	2903      	cmp	r1, #3
    5c38:	d02a      	beq.n	5c90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x30c>
    5c3a:	2904      	cmp	r1, #4
    5c3c:	d13a      	bne.n	5cb4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x330>
    5c3e:	e0b2      	b.n	5da6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x422>
    5c40:	200b      	movs	r0, #11
    5c42:	e00a      	b.n	5c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2d6>
    5c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5c48:	f000 bc8c 	b.w	6564 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    5c4c:	2006      	movs	r0, #6
    5c4e:	e004      	b.n	5c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2d6>
    5c50:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    5c54:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    5c58:	2007      	movs	r0, #7
    5c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5c5e:	f000 bd55 	b.w	670c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    5c62:	2018      	movs	r0, #24
    5c64:	f000 fd52 	bl	670c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    5c68:	6860      	ldr	r0, [r4, #4]
    5c6a:	f8a0 50dc 	strh.w	r5, [r0, #220]	; 0xdc
    5c6e:	bd38      	pop	{r3, r4, r5, pc}
    5c70:	2001      	movs	r0, #1
    5c72:	f000 fd53 	bl	671c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd98>
    5c76:	6860      	ldr	r0, [r4, #4]
    5c78:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    5c7c:	bd38      	pop	{r3, r4, r5, pc}
    5c7e:	291f      	cmp	r1, #31
    5c80:	d01b      	beq.n	5cba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x336>
    5c82:	2922      	cmp	r1, #34	; 0x22
    5c84:	d05e      	beq.n	5d44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c0>
    5c86:	2928      	cmp	r1, #40	; 0x28
    5c88:	d073      	beq.n	5d72 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ee>
    5c8a:	292f      	cmp	r1, #47	; 0x2f
    5c8c:	d17a      	bne.n	5d84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5c8e:	e086      	b.n	5d9e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x41a>
    5c90:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    5c94:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    5c98:	2007      	movs	r0, #7
    5c9a:	e087      	b.n	5dac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x428>
    5c9c:	200c      	movs	r0, #12
    5c9e:	f000 fd35 	bl	670c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    5ca2:	6860      	ldr	r0, [r4, #4]
    5ca4:	f820 5fe2 	strh.w	r5, [r0, #226]!
    5ca8:	7941      	ldrb	r1, [r0, #5]
    5caa:	f041 0101 	orr.w	r1, r1, #1
    5cae:	7141      	strb	r1, [r0, #5]
    5cb0:	f800 5c3c 	strb.w	r5, [r0, #-60]
    5cb4:	e066      	b.n	5d84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5cb6:	2013      	movs	r0, #19
    5cb8:	e036      	b.n	5d28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3a4>
    5cba:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5cbe:	f88d 2000 	strb.w	r2, [sp]
    5cc2:	9a00      	ldr	r2, [sp, #0]
    5cc4:	9200      	str	r2, [sp, #0]
    5cc6:	f89d 2000 	ldrb.w	r2, [sp]
    5cca:	bbaa      	cbnz	r2, 5d38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3b4>
    5ccc:	f890 213a 	ldrb.w	r2, [r0, #314]	; 0x13a
    5cd0:	f88d 2000 	strb.w	r2, [sp]
    5cd4:	9a00      	ldr	r2, [sp, #0]
    5cd6:	9200      	str	r2, [sp, #0]
    5cd8:	f89d 2000 	ldrb.w	r2, [sp]
    5cdc:	b36a      	cbz	r2, 5d3a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3b6>
    5cde:	2925      	cmp	r1, #37	; 0x25
    5ce0:	d02e      	beq.n	5d40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3bc>
    5ce2:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    5ce6:	2925      	cmp	r1, #37	; 0x25
    5ce8:	d02a      	beq.n	5d40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3bc>
    5cea:	2926      	cmp	r1, #38	; 0x26
    5cec:	d028      	beq.n	5d40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3bc>
    5cee:	2300      	movs	r3, #0
    5cf0:	f200 2262 	addw	r2, r0, #610	; 0x262
    5cf4:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    5cf8:	f008 fd15 	bl	e726 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5cfc:	6860      	ldr	r0, [r4, #4]
    5cfe:	211f      	movs	r1, #31
    5d00:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    5d04:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    5d08:	6860      	ldr	r0, [r4, #4]
    5d0a:	f008 fd27 	bl	e75c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5d0e:	4834      	ldr	r0, [pc, #208]	; (5de0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x45c>)
    5d10:	f008 ff3d 	bl	eb8e <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    5d14:	6861      	ldr	r1, [r4, #4]
    5d16:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5d1a:	8bc2      	ldrh	r2, [r0, #30]
    5d1c:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    5d20:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5d22:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    5d26:	2015      	movs	r0, #21
    5d28:	f000 fcf0 	bl	670c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    5d2c:	6860      	ldr	r0, [r4, #4]
    5d2e:	f8a0 50e2 	strh.w	r5, [r0, #226]	; 0xe2
    5d32:	bf00      	nop
    5d34:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    5d38:	e024      	b.n	5d84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5d3a:	291f      	cmp	r1, #31
    5d3c:	d0e4      	beq.n	5d08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x384>
    5d3e:	e021      	b.n	5d84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5d40:	2301      	movs	r3, #1
    5d42:	e7d5      	b.n	5cf0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x36c>
    5d44:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5d48:	2901      	cmp	r1, #1
    5d4a:	d108      	bne.n	5d5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3da>
    5d4c:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    5d50:	f88d 1000 	strb.w	r1, [sp]
    5d54:	9900      	ldr	r1, [sp, #0]
    5d56:	9100      	str	r1, [sp, #0]
    5d58:	f89d 1000 	ldrb.w	r1, [sp]
    5d5c:	b121      	cbz	r1, 5d68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3e4>
    5d5e:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5d62:	2902      	cmp	r1, #2
    5d64:	d006      	beq.n	5d74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3f0>
    5d66:	e00d      	b.n	5d84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5d68:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    5d6c:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    5d70:	e003      	b.n	5d7a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3f6>
    5d72:	e01a      	b.n	5daa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x426>
    5d74:	f850 1f62 	ldr.w	r1, [r0, #98]!
    5d78:	6840      	ldr	r0, [r0, #4]
    5d7a:	f000 fcd9 	bl	6730 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdac>
    5d7e:	2018      	movs	r0, #24
    5d80:	f000 fcc4 	bl	670c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    5d84:	6860      	ldr	r0, [r4, #4]
    5d86:	3088      	adds	r0, #136	; 0x88
    5d88:	f009 fc38 	bl	f5fc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5d8c:	2800      	cmp	r0, #0
    5d8e:	f47f af75 	bne.w	5c7c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f8>
    5d92:	6860      	ldr	r0, [r4, #4]
    5d94:	3088      	adds	r0, #136	; 0x88
    5d96:	f009 fc31 	bl	f5fc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5d9a:	b158      	cbz	r0, 5db4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x430>
    5d9c:	e015      	b.n	5dca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x446>
    5d9e:	2000      	movs	r0, #0
    5da0:	f000 fcbc 	bl	671c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd98>
    5da4:	e004      	b.n	5db0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x42c>
    5da6:	2009      	movs	r0, #9
    5da8:	e000      	b.n	5dac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x428>
    5daa:	2024      	movs	r0, #36	; 0x24
    5dac:	f000 fcae 	bl	670c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    5db0:	6860      	ldr	r0, [r4, #4]
    5db2:	e7bf      	b.n	5d34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3b0>
    5db4:	6860      	ldr	r0, [r4, #4]
    5db6:	2300      	movs	r3, #0
    5db8:	4619      	mov	r1, r3
    5dba:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5dbe:	3088      	adds	r0, #136	; 0x88
    5dc0:	f008 f956 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5dc4:	b108      	cbz	r0, 5dca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x446>
    5dc6:	f000 fb03 	bl	63d0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa4c>
    5dca:	6860      	ldr	r0, [r4, #4]
    5dcc:	3088      	adds	r0, #136	; 0x88
    5dce:	f009 fc15 	bl	f5fc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5dd2:	2800      	cmp	r0, #0
    5dd4:	d1db      	bne.n	5d8e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5dda:	f7ff be69 	b.w	5ab0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12c>
    5dde:	0000      	.short	0x0000
    5de0:	20000114 	.word	0x20000114
    5de4:	b538      	push	{r3, r4, r5, lr}
    5de6:	4d1a      	ldr	r5, [pc, #104]	; (5e50 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4cc>)
    5de8:	686b      	ldr	r3, [r5, #4]
    5dea:	f893 10a5 	ldrb.w	r1, [r3, #165]	; 0xa5
    5dee:	2917      	cmp	r1, #23
    5df0:	d001      	beq.n	5df6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x472>
    5df2:	2914      	cmp	r1, #20
    5df4:	d102      	bne.n	5dfc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x478>
    5df6:	f893 10e6 	ldrb.w	r1, [r3, #230]	; 0xe6
    5dfa:	b109      	cbz	r1, 5e00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x47c>
    5dfc:	2002      	movs	r0, #2
    5dfe:	bd38      	pop	{r3, r4, r5, pc}
    5e00:	2400      	movs	r4, #0
    5e02:	f883 40e5 	strb.w	r4, [r3, #229]	; 0xe5
    5e06:	f883 40e0 	strb.w	r4, [r3, #224]	; 0xe0
    5e0a:	f893 121a 	ldrb.w	r1, [r3, #538]	; 0x21a
    5e0e:	f88d 1000 	strb.w	r1, [sp]
    5e12:	9900      	ldr	r1, [sp, #0]
    5e14:	9100      	str	r1, [sp, #0]
    5e16:	f89d 1000 	ldrb.w	r1, [sp]
    5e1a:	b121      	cbz	r1, 5e26 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4a2>
    5e1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    5e20:	2036      	movs	r0, #54	; 0x36
    5e22:	f7fa fdfb 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e26:	8819      	ldrh	r1, [r3, #0]
    5e28:	f8a3 121e 	strh.w	r1, [r3, #542]	; 0x21e
    5e2c:	f883 021c 	strb.w	r0, [r3, #540]	; 0x21c
    5e30:	f883 4220 	strb.w	r4, [r3, #544]	; 0x220
    5e34:	f883 4278 	strb.w	r4, [r3, #632]	; 0x278
    5e38:	f203 2012 	addw	r0, r3, #530	; 0x212
    5e3c:	2202      	movs	r2, #2
    5e3e:	4905      	ldr	r1, [pc, #20]	; (5e54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4d0>)
    5e40:	f008 fc47 	bl	e6d2 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5e44:	6868      	ldr	r0, [r5, #4]
    5e46:	f880 40a5 	strb.w	r4, [r0, #165]	; 0xa5
    5e4a:	2000      	movs	r0, #0
    5e4c:	bd38      	pop	{r3, r4, r5, pc}
    5e4e:	0000      	.short	0x0000
    5e50:	20000114 	.word	0x20000114
    5e54:	0000ebaf 	.word	0x0000ebaf
    5e58:	b570      	push	{r4, r5, r6, lr}
    5e5a:	4604      	mov	r4, r0
    5e5c:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    5e60:	2500      	movs	r5, #0
    5e62:	280b      	cmp	r0, #11
    5e64:	d001      	beq.n	5e6a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4e6>
    5e66:	280c      	cmp	r0, #12
    5e68:	d108      	bne.n	5e7c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4f8>
    5e6a:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    5e6e:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
    5e72:	1a89      	subs	r1, r1, r2
    5e74:	1c49      	adds	r1, r1, #1
    5e76:	0409      	lsls	r1, r1, #16
    5e78:	0c09      	lsrs	r1, r1, #16
    5e7a:	d032      	beq.n	5ee2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x55e>
    5e7c:	280d      	cmp	r0, #13
    5e7e:	d001      	beq.n	5e84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x500>
    5e80:	280e      	cmp	r0, #14
    5e82:	d12d      	bne.n	5ee0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x55c>
    5e84:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5e88:	f8b4 1266 	ldrh.w	r1, [r4, #614]	; 0x266
    5e8c:	1a40      	subs	r0, r0, r1
    5e8e:	1c40      	adds	r0, r0, #1
    5e90:	0400      	lsls	r0, r0, #16
    5e92:	0c00      	lsrs	r0, r0, #16
    5e94:	d124      	bne.n	5ee0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x55c>
    5e96:	8820      	ldrh	r0, [r4, #0]
    5e98:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    5e9c:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    5ea0:	f008 f8e0 	bl	e064 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5ea4:	f8a4 01d4 	strh.w	r0, [r4, #468]	; 0x1d4
    5ea8:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    5eac:	f8a4 01d6 	strh.w	r0, [r4, #470]	; 0x1d6
    5eb0:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    5eb4:	f8a4 01d8 	strh.w	r0, [r4, #472]	; 0x1d8
    5eb8:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
    5ebc:	2202      	movs	r2, #2
    5ebe:	4919      	ldr	r1, [pc, #100]	; (5f24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5a0>)
    5ec0:	f504 70e3 	add.w	r0, r4, #454	; 0x1c6
    5ec4:	f008 fc19 	bl	e6fa <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5ec8:	f884 5264 	strb.w	r5, [r4, #612]	; 0x264
    5ecc:	2102      	movs	r1, #2
    5ece:	4620      	mov	r0, r4
    5ed0:	f7fc fba0 	bl	2614 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5ed4:	2103      	movs	r1, #3
    5ed6:	4620      	mov	r0, r4
    5ed8:	f009 f9c6 	bl	f268 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    5edc:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5ee0:	bd70      	pop	{r4, r5, r6, pc}
    5ee2:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5ee6:	f8d0 1001 	ldr.w	r1, [r0, #1]
    5eea:	f8c4 10ae 	str.w	r1, [r4, #174]	; 0xae
    5eee:	7940      	ldrb	r0, [r0, #5]
    5ef0:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    5ef4:	2103      	movs	r1, #3
    5ef6:	4620      	mov	r0, r4
    5ef8:	f7fc fb8c 	bl	2614 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5efc:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5f00:	7800      	ldrb	r0, [r0, #0]
    5f02:	b148      	cbz	r0, 5f18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x594>
    5f04:	2101      	movs	r1, #1
    5f06:	20fe      	movs	r0, #254	; 0xfe
    5f08:	f000 ffd6 	bl	6eb8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1534>
    5f0c:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5f10:	20ff      	movs	r0, #255	; 0xff
    5f12:	f884 00fe 	strb.w	r0, [r4, #254]	; 0xfe
    5f16:	bd70      	pop	{r4, r5, r6, pc}
    5f18:	f240 2152 	movw	r1, #594	; 0x252
    5f1c:	2036      	movs	r0, #54	; 0x36
    5f1e:	f7fa fd7d 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f22:	0000      	.short	0x0000
    5f24:	0000eacd 	.word	0x0000eacd
    5f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f2a:	4d28      	ldr	r5, [pc, #160]	; (5fcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>)
    5f2c:	f04f 0600 	mov.w	r6, #0
    5f30:	f105 040c 	add.w	r4, r5, #12
    5f34:	8869      	ldrh	r1, [r5, #2]
    5f36:	0748      	lsls	r0, r1, #29
    5f38:	d510      	bpl.n	5f5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d8>
    5f3a:	6860      	ldr	r0, [r4, #4]
    5f3c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5f40:	2a03      	cmp	r2, #3
    5f42:	d004      	beq.n	5f4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5ca>
    5f44:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    5f48:	2a06      	cmp	r2, #6
    5f4a:	d107      	bne.n	5f5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d8>
    5f4c:	e002      	b.n	5f54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d0>
    5f4e:	f240 6191 	movw	r1, #1681	; 0x691
    5f52:	e025      	b.n	5fa0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x61c>
    5f54:	2201      	movs	r2, #1
    5f56:	702a      	strb	r2, [r5, #0]
    5f58:	f880 60a7 	strb.w	r6, [r0, #167]	; 0xa7
    5f5c:	0788      	lsls	r0, r1, #30
    5f5e:	d50a      	bpl.n	5f76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5f2>
    5f60:	6868      	ldr	r0, [r5, #4]
    5f62:	78c0      	ldrb	r0, [r0, #3]
    5f64:	282b      	cmp	r0, #43	; 0x2b
    5f66:	d219      	bcs.n	5f9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x618>
    5f68:	4919      	ldr	r1, [pc, #100]	; (5fd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x64c>)
    5f6a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5f6e:	b1a9      	cbz	r1, 5f9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x618>
    5f70:	4816      	ldr	r0, [pc, #88]	; (5fcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>)
    5f72:	300c      	adds	r0, #12
    5f74:	4788      	blx	r1
    5f76:	f000 f86d 	bl	6054 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6d0>
    5f7a:	f000 f82b 	bl	5fd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x650>
    5f7e:	4607      	mov	r7, r0
    5f80:	7868      	ldrb	r0, [r5, #1]
    5f82:	0700      	lsls	r0, r0, #28
    5f84:	d51c      	bpl.n	5fc0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x63c>
    5f86:	6860      	ldr	r0, [r4, #4]
    5f88:	2300      	movs	r3, #0
    5f8a:	2105      	movs	r1, #5
    5f8c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5f90:	3088      	adds	r0, #136	; 0x88
    5f92:	f008 f86d 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5f96:	b130      	cbz	r0, 5fa6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x622>
    5f98:	2708      	movs	r7, #8
    5f9a:	e011      	b.n	5fc0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x63c>
    5f9c:	f240 719d 	movw	r1, #1949	; 0x79d
    5fa0:	2036      	movs	r0, #54	; 0x36
    5fa2:	f7fa fd3b 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fa6:	4669      	mov	r1, sp
    5fa8:	2003      	movs	r0, #3
    5faa:	9600      	str	r6, [sp, #0]
    5fac:	f7fb fce2 	bl	1974 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    5fb0:	9800      	ldr	r0, [sp, #0]
    5fb2:	b128      	cbz	r0, 5fc0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x63c>
    5fb4:	7206      	strb	r6, [r0, #8]
    5fb6:	2210      	movs	r2, #16
    5fb8:	6861      	ldr	r1, [r4, #4]
    5fba:	9800      	ldr	r0, [sp, #0]
    5fbc:	f008 fb89 	bl	e6d2 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5fc0:	6860      	ldr	r0, [r4, #4]
    5fc2:	f7ff ff49 	bl	5e58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4d4>
    5fc6:	4638      	mov	r0, r7
    5fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5fca:	0000      	.short	0x0000
    5fcc:	20000108 	.word	0x20000108
    5fd0:	200001c8 	.word	0x200001c8
    5fd4:	b570      	push	{r4, r5, r6, lr}
    5fd6:	4c1d      	ldr	r4, [pc, #116]	; (604c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c8>)
    5fd8:	2000      	movs	r0, #0
    5fda:	78a1      	ldrb	r1, [r4, #2]
    5fdc:	07c9      	lsls	r1, r1, #31
    5fde:	d01d      	beq.n	601c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x698>
    5fe0:	68a0      	ldr	r0, [r4, #8]
    5fe2:	2300      	movs	r3, #0
    5fe4:	2105      	movs	r1, #5
    5fe6:	78c5      	ldrb	r5, [r0, #3]
    5fe8:	f104 000c 	add.w	r0, r4, #12
    5fec:	6840      	ldr	r0, [r0, #4]
    5fee:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5ff2:	3088      	adds	r0, #136	; 0x88
    5ff4:	f008 f83c 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ff8:	b188      	cbz	r0, 601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x69a>
    5ffa:	2d06      	cmp	r5, #6
    5ffc:	d00f      	beq.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x69a>
    5ffe:	dc06      	bgt.n	600e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x68a>
    6000:	2d02      	cmp	r5, #2
    6002:	d00c      	beq.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x69a>
    6004:	2d04      	cmp	r5, #4
    6006:	d00a      	beq.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x69a>
    6008:	2d05      	cmp	r5, #5
    600a:	d106      	bne.n	601a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x696>
    600c:	e007      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x69a>
    600e:	2d0b      	cmp	r5, #11
    6010:	d005      	beq.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x69a>
    6012:	2d0d      	cmp	r5, #13
    6014:	d003      	beq.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x69a>
    6016:	2d11      	cmp	r5, #17
    6018:	d001      	beq.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x69a>
    601a:	2008      	movs	r0, #8
    601c:	bd70      	pop	{r4, r5, r6, pc}
    601e:	68a0      	ldr	r0, [r4, #8]
    6020:	f7fc fc36 	bl	2890 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    6024:	b160      	cbz	r0, 6040 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6bc>
    6026:	68a0      	ldr	r0, [r4, #8]
    6028:	78c0      	ldrb	r0, [r0, #3]
    602a:	282b      	cmp	r0, #43	; 0x2b
    602c:	d208      	bcs.n	6040 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6bc>
    602e:	4908      	ldr	r1, [pc, #32]	; (6050 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6cc>)
    6030:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    6034:	b121      	cbz	r1, 6040 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6bc>
    6036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    603a:	4804      	ldr	r0, [pc, #16]	; (604c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c8>)
    603c:	300c      	adds	r0, #12
    603e:	4708      	bx	r1
    6040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6044:	2000      	movs	r0, #0
    6046:	f000 bbbd 	b.w	67c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe40>
    604a:	0000      	.short	0x0000
    604c:	20000108 	.word	0x20000108
    6050:	2000011c 	.word	0x2000011c
    6054:	b570      	push	{r4, r5, r6, lr}
    6056:	4d1a      	ldr	r5, [pc, #104]	; (60c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x73c>)
    6058:	78a8      	ldrb	r0, [r5, #2]
    605a:	0700      	lsls	r0, r0, #28
    605c:	d52e      	bpl.n	60bc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x738>
    605e:	f105 040c 	add.w	r4, r5, #12
    6062:	2100      	movs	r1, #0
    6064:	6860      	ldr	r0, [r4, #4]
    6066:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    606a:	f000 ff25 	bl	6eb8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1534>
    606e:	6860      	ldr	r0, [r4, #4]
    6070:	3088      	adds	r0, #136	; 0x88
    6072:	f009 fac3 	bl	f5fc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    6076:	b160      	cbz	r0, 6092 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x70e>
    6078:	6860      	ldr	r0, [r4, #4]
    607a:	21fe      	movs	r1, #254	; 0xfe
    607c:	f880 112e 	strb.w	r1, [r0, #302]	; 0x12e
    6080:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    6084:	290b      	cmp	r1, #11
    6086:	d009      	beq.n	609c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x718>
    6088:	290d      	cmp	r1, #13
    608a:	d009      	beq.n	60a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x71c>
    608c:	2925      	cmp	r1, #37	; 0x25
    608e:	d10c      	bne.n	60aa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x726>
    6090:	e008      	b.n	60a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x720>
    6092:	f240 71a9 	movw	r1, #1961	; 0x7a9
    6096:	2036      	movs	r0, #54	; 0x36
    6098:	f7fa fcc0 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    609c:	210c      	movs	r1, #12
    609e:	e002      	b.n	60a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x722>
    60a0:	210e      	movs	r1, #14
    60a2:	e000      	b.n	60a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x722>
    60a4:	2126      	movs	r1, #38	; 0x26
    60a6:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    60aa:	f890 10a7 	ldrb.w	r1, [r0, #167]	; 0xa7
    60ae:	2907      	cmp	r1, #7
    60b0:	d104      	bne.n	60bc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x738>
    60b2:	2102      	movs	r1, #2
    60b4:	7029      	strb	r1, [r5, #0]
    60b6:	2100      	movs	r1, #0
    60b8:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
    60bc:	bd70      	pop	{r4, r5, r6, pc}
    60be:	0000      	.short	0x0000
    60c0:	20000108 	.word	0x20000108
    60c4:	b538      	push	{r3, r4, r5, lr}
    60c6:	4605      	mov	r5, r0
    60c8:	4668      	mov	r0, sp
    60ca:	f7fb fae5 	bl	1698 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    60ce:	b348      	cbz	r0, 6124 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x7a0>
    60d0:	2222      	movs	r2, #34	; 0x22
    60d2:	2100      	movs	r1, #0
    60d4:	9800      	ldr	r0, [sp, #0]
    60d6:	f00b f80c 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    60da:	2103      	movs	r1, #3
    60dc:	9800      	ldr	r0, [sp, #0]
    60de:	f008 fabc 	bl	e65a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    60e2:	9800      	ldr	r0, [sp, #0]
    60e4:	7801      	ldrb	r1, [r0, #0]
    60e6:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    60ea:	7001      	strb	r1, [r0, #0]
    60ec:	4629      	mov	r1, r5
    60ee:	f7fc fbdf 	bl	28b0 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    60f2:	2100      	movs	r1, #0
    60f4:	4c73      	ldr	r4, [pc, #460]	; (62c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x940>)
    60f6:	2d26      	cmp	r5, #38	; 0x26
    60f8:	d276      	bcs.n	61e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x864>
    60fa:	e8df f005 	tbb	[pc, r5]
    60fe:	2129      	.short	0x2129
    6100:	dbdb5116 	.word	0xdbdb5116
    6104:	7a761bd4 	.word	0x7a761bd4
    6108:	db6ad4d4 	.word	0xdb6ad4d4
    610c:	bcdbdbdb 	.word	0xbcdbdbdb
    6110:	7f7fd4d4 	.word	0x7f7fd4d4
    6114:	dba2db98 	.word	0xdba2db98
    6118:	dbdbdbdb 	.word	0xdbdbdbdb
    611c:	dbdbdbdb 	.word	0xdbdbdbdb
    6120:	b5b5b5db 	.word	0xb5b5b5db
    6124:	f640 2114 	movw	r1, #2580	; 0xa14
    6128:	e0c9      	b.n	62be <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x93a>
    612a:	6861      	ldr	r1, [r4, #4]
    612c:	9800      	ldr	r0, [sp, #0]
    612e:	f891 1139 	ldrb.w	r1, [r1, #313]	; 0x139
    6132:	e003      	b.n	613c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x7b8>
    6134:	6861      	ldr	r1, [r4, #4]
    6136:	9800      	ldr	r0, [sp, #0]
    6138:	f891 1130 	ldrb.w	r1, [r1, #304]	; 0x130
    613c:	7101      	strb	r1, [r0, #4]
    613e:	e0b2      	b.n	62a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    6140:	6860      	ldr	r0, [r4, #4]
    6142:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    6146:	9800      	ldr	r0, [sp, #0]
    6148:	1c49      	adds	r1, r1, #1
    614a:	f008 fa17 	bl	e57c <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>
    614e:	e0aa      	b.n	62a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    6150:	6860      	ldr	r0, [r4, #4]
    6152:	9d00      	ldr	r5, [sp, #0]
    6154:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
    6158:	f8b0 0268 	ldrh.w	r0, [r0, #616]	; 0x268
    615c:	f008 f8fa 	bl	e354 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    6160:	7128      	strb	r0, [r5, #4]
    6162:	6860      	ldr	r0, [r4, #4]
    6164:	9d00      	ldr	r5, [sp, #0]
    6166:	f500 701b 	add.w	r0, r0, #620	; 0x26c
    616a:	c803      	ldmia	r0, {r0, r1}
    616c:	f008 f8db 	bl	e326 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    6170:	7168      	strb	r0, [r5, #5]
    6172:	0a00      	lsrs	r0, r0, #8
    6174:	71a8      	strb	r0, [r5, #6]
    6176:	6860      	ldr	r0, [r4, #4]
    6178:	9d00      	ldr	r5, [sp, #0]
    617a:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
    617e:	f007 ff71 	bl	e064 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6182:	71e8      	strb	r0, [r5, #7]
    6184:	0a00      	lsrs	r0, r0, #8
    6186:	7228      	strb	r0, [r5, #8]
    6188:	6862      	ldr	r2, [r4, #4]
    618a:	9800      	ldr	r0, [sp, #0]
    618c:	f8b2 1274 	ldrh.w	r1, [r2, #628]	; 0x274
    6190:	7241      	strb	r1, [r0, #9]
    6192:	0a09      	lsrs	r1, r1, #8
    6194:	7281      	strb	r1, [r0, #10]
    6196:	f8b2 1276 	ldrh.w	r1, [r2, #630]	; 0x276
    619a:	f008 f9f4 	bl	e586 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>
    619e:	e082      	b.n	62a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    61a0:	6861      	ldr	r1, [r4, #4]
    61a2:	9800      	ldr	r0, [sp, #0]
    61a4:	f201 2179 	addw	r1, r1, #633	; 0x279
    61a8:	f008 fa02 	bl	e5b0 <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>
    61ac:	6861      	ldr	r1, [r4, #4]
    61ae:	9800      	ldr	r0, [sp, #0]
    61b0:	f201 2181 	addw	r1, r1, #641	; 0x281
    61b4:	f008 f9f5 	bl	e5a2 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>
    61b8:	6861      	ldr	r1, [r4, #4]
    61ba:	9800      	ldr	r0, [sp, #0]
    61bc:	f201 2193 	addw	r1, r1, #659	; 0x293
    61c0:	f008 f9fb 	bl	e5ba <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>
    61c4:	6861      	ldr	r1, [r4, #4]
    61c6:	9800      	ldr	r0, [sp, #0]
    61c8:	f501 7190 	add.w	r1, r1, #288	; 0x120
    61cc:	f008 f9ec 	bl	e5a8 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>
    61d0:	e069      	b.n	62a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    61d2:	9800      	ldr	r0, [sp, #0]
    61d4:	220d      	movs	r2, #13
    61d6:	7102      	strb	r2, [r0, #4]
    61d8:	2259      	movs	r2, #89	; 0x59
    61da:	7142      	strb	r2, [r0, #5]
    61dc:	7181      	strb	r1, [r0, #6]
    61de:	2166      	movs	r1, #102	; 0x66
    61e0:	71c1      	strb	r1, [r0, #7]
    61e2:	2111      	movs	r1, #17
    61e4:	7201      	strb	r1, [r0, #8]
    61e6:	e05e      	b.n	62a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    61e8:	e064      	b.n	62b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x930>
    61ea:	9800      	ldr	r0, [sp, #0]
    61ec:	f7fc ff12 	bl	3014 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    61f0:	e059      	b.n	62a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    61f2:	4834      	ldr	r0, [pc, #208]	; (62c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x940>)
    61f4:	9900      	ldr	r1, [sp, #0]
    61f6:	f7fc ff67 	bl	30c8 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    61fa:	e054      	b.n	62a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    61fc:	6860      	ldr	r0, [r4, #4]
    61fe:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    6202:	9800      	ldr	r0, [sp, #0]
    6204:	f008 fa39 	bl	e67a <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    6208:	6860      	ldr	r0, [r4, #4]
    620a:	f8b0 1130 	ldrh.w	r1, [r0, #304]	; 0x130
    620e:	9800      	ldr	r0, [sp, #0]
    6210:	f008 fa37 	bl	e682 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    6214:	6860      	ldr	r0, [r4, #4]
    6216:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    621a:	9800      	ldr	r0, [sp, #0]
    621c:	f008 fa25 	bl	e66a <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    6220:	6860      	ldr	r0, [r4, #4]
    6222:	f8b0 1132 	ldrh.w	r1, [r0, #306]	; 0x132
    6226:	9800      	ldr	r0, [sp, #0]
    6228:	f008 fa23 	bl	e672 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    622c:	e03b      	b.n	62a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    622e:	6861      	ldr	r1, [r4, #4]
    6230:	9800      	ldr	r0, [sp, #0]
    6232:	f891 1146 	ldrb.w	r1, [r1, #326]	; 0x146
    6236:	7101      	strb	r1, [r0, #4]
    6238:	6861      	ldr	r1, [r4, #4]
    623a:	f891 1147 	ldrb.w	r1, [r1, #327]	; 0x147
    623e:	7141      	strb	r1, [r0, #5]
    6240:	e031      	b.n	62a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    6242:	6860      	ldr	r0, [r4, #4]
    6244:	f890 0263 	ldrb.w	r0, [r0, #611]	; 0x263
    6248:	f007 ffc7 	bl	e1da <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    624c:	4601      	mov	r1, r0
    624e:	9800      	ldr	r0, [sp, #0]
    6250:	f008 f9ef 	bl	e632 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>
    6254:	6860      	ldr	r0, [r4, #4]
    6256:	f890 0262 	ldrb.w	r0, [r0, #610]	; 0x262
    625a:	f007 ffbe 	bl	e1da <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    625e:	4601      	mov	r1, r0
    6260:	9800      	ldr	r0, [sp, #0]
    6262:	f008 f9e4 	bl	e62e <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>
    6266:	e01e      	b.n	62a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    6268:	4b17      	ldr	r3, [pc, #92]	; (62c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x944>)
    626a:	4a16      	ldr	r2, [pc, #88]	; (62c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x940>)
    626c:	4628      	mov	r0, r5
    626e:	681b      	ldr	r3, [r3, #0]
    6270:	9900      	ldr	r1, [sp, #0]
    6272:	4798      	blx	r3
    6274:	e017      	b.n	62a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x922>
    6276:	6860      	ldr	r0, [r4, #4]
    6278:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    627c:	b141      	cbz	r1, 6290 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90c>
    627e:	f890 112d 	ldrb.w	r1, [r0, #301]	; 0x12d
    6282:	9800      	ldr	r0, [sp, #0]
    6284:	f008 f9e3 	bl	e64e <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    6288:	6860      	ldr	r0, [r4, #4]
    628a:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    628e:	e007      	b.n	62a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x91c>
    6290:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    6294:	9800      	ldr	r0, [sp, #0]
    6296:	f008 f9da 	bl	e64e <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    629a:	6860      	ldr	r0, [r4, #4]
    629c:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    62a0:	9800      	ldr	r0, [sp, #0]
    62a2:	f008 f9d8 	bl	e656 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    62a6:	f7fb f9d1 	bl	164c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    62aa:	b130      	cbz	r0, 62ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x936>
    62ac:	9800      	ldr	r0, [sp, #0]
    62ae:	f7ff fbe5 	bl	5a7c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    62b2:	bd38      	pop	{r3, r4, r5, pc}
    62b4:	f640 21ea 	movw	r1, #2794	; 0xaea
    62b8:	e001      	b.n	62be <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x93a>
    62ba:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
    62be:	2036      	movs	r0, #54	; 0x36
    62c0:	f7fa fbac 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62c4:	20000114 	.word	0x20000114
    62c8:	20000274 	.word	0x20000274
    62cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62d0:	4e28      	ldr	r6, [pc, #160]	; (6374 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9f0>)
    62d2:	4680      	mov	r8, r0
    62d4:	460d      	mov	r5, r1
    62d6:	8870      	ldrh	r0, [r6, #2]
    62d8:	f106 040c 	add.w	r4, r6, #12
    62dc:	05c1      	lsls	r1, r0, #23
    62de:	6860      	ldr	r0, [r4, #4]
    62e0:	f04f 0700 	mov.w	r7, #0
    62e4:	d502      	bpl.n	62ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x968>
    62e6:	f8a0 70d6 	strh.w	r7, [r0, #214]	; 0xd6
    62ea:	e004      	b.n	62f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x972>
    62ec:	f8b0 10d6 	ldrh.w	r1, [r0, #214]	; 0xd6
    62f0:	1c49      	adds	r1, r1, #1
    62f2:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
    62f6:	f009 fae0 	bl	f8ba <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2da>
    62fa:	b1f0      	cbz	r0, 633a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b6>
    62fc:	8870      	ldrh	r0, [r6, #2]
    62fe:	0500      	lsls	r0, r0, #20
    6300:	d506      	bpl.n	6310 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x98c>
    6302:	6860      	ldr	r0, [r4, #4]
    6304:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    6308:	b111      	cbz	r1, 6310 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x98c>
    630a:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    630e:	e014      	b.n	633a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b6>
    6310:	6860      	ldr	r0, [r4, #4]
    6312:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    6316:	1c49      	adds	r1, r1, #1
    6318:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
    631c:	f009 f98f 	bl	f63e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    6320:	6860      	ldr	r0, [r4, #4]
    6322:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    6326:	4291      	cmp	r1, r2
    6328:	d307      	bcc.n	633a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b6>
    632a:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    632e:	2202      	movs	r2, #2
    6330:	4911      	ldr	r1, [pc, #68]	; (6378 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9f4>)
    6332:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    6336:	f008 f9e0 	bl	e6fa <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    633a:	8870      	ldrh	r0, [r6, #2]
    633c:	f410 7f40 	tst.w	r0, #768	; 0x300
    6340:	d008      	beq.n	6354 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9d0>
    6342:	6860      	ldr	r0, [r4, #4]
    6344:	f890 10a9 	ldrb.w	r1, [r0, #169]	; 0xa9
    6348:	b921      	cbnz	r1, 6354 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9d0>
    634a:	2101      	movs	r1, #1
    634c:	f880 10a9 	strb.w	r1, [r0, #169]	; 0xa9
    6350:	f008 ff8a 	bl	f268 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6354:	ea58 0005 	orrs.w	r0, r8, r5
    6358:	d104      	bne.n	6364 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e0>
    635a:	f7ff fde5 	bl	5f28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5a4>
    635e:	4605      	mov	r5, r0
    6360:	f7ff fc1a 	bl	5b98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x214>
    6364:	4629      	mov	r1, r5
    6366:	4640      	mov	r0, r8
    6368:	f000 fcb0 	bl	6ccc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1348>
    636c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6370:	f7fb b956 	b.w	1620 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6374:	20000108 	.word	0x20000108
    6378:	0000ec5f 	.word	0x0000ec5f
    637c:	4813      	ldr	r0, [pc, #76]	; (63cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa48>)
    637e:	6840      	ldr	r0, [r0, #4]
    6380:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    6384:	b129      	cbz	r1, 6392 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa0e>
    6386:	f8b0 10dc 	ldrh.w	r1, [r0, #220]	; 0xdc
    638a:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    638e:	4291      	cmp	r1, r2
    6390:	d215      	bcs.n	63be <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3a>
    6392:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
    6396:	b129      	cbz	r1, 63a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa20>
    6398:	f8b0 10e2 	ldrh.w	r1, [r0, #226]	; 0xe2
    639c:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    63a0:	4291      	cmp	r1, r2
    63a2:	d20c      	bcs.n	63be <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3a>
    63a4:	f8b0 20da 	ldrh.w	r2, [r0, #218]	; 0xda
    63a8:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    63ac:	428a      	cmp	r2, r1
    63ae:	d206      	bcs.n	63be <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3a>
    63b0:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
    63b4:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    63b8:	b11a      	cbz	r2, 63c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3e>
    63ba:	4288      	cmp	r0, r1
    63bc:	d303      	bcc.n	63c6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa42>
    63be:	2001      	movs	r0, #1
    63c0:	4770      	bx	lr
    63c2:	2806      	cmp	r0, #6
    63c4:	d2fb      	bcs.n	63be <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3a>
    63c6:	2000      	movs	r0, #0
    63c8:	4770      	bx	lr
    63ca:	0000      	.short	0x0000
    63cc:	20000114 	.word	0x20000114
    63d0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    63d2:	4c63      	ldr	r4, [pc, #396]	; (6560 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbdc>)
    63d4:	6860      	ldr	r0, [r4, #4]
    63d6:	f890 1264 	ldrb.w	r1, [r0, #612]	; 0x264
    63da:	f88d 1000 	strb.w	r1, [sp]
    63de:	9900      	ldr	r1, [sp, #0]
    63e0:	9100      	str	r1, [sp, #0]
    63e2:	f89d 1000 	ldrb.w	r1, [sp]
    63e6:	2500      	movs	r5, #0
    63e8:	b129      	cbz	r1, 63f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa72>
    63ea:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    63ee:	f007 fea2 	bl	e136 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    63f2:	2800      	cmp	r0, #0
    63f4:	d07d      	beq.n	64f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb6e>
    63f6:	6860      	ldr	r0, [r4, #4]
    63f8:	f890 1278 	ldrb.w	r1, [r0, #632]	; 0x278
    63fc:	b181      	cbz	r1, 6420 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa9c>
    63fe:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
    6402:	b149      	cbz	r1, 6418 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa94>
    6404:	f890 00ab 	ldrb.w	r0, [r0, #171]	; 0xab
    6408:	b108      	cbz	r0, 640e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa8a>
    640a:	200a      	movs	r0, #10
    640c:	e071      	b.n	64f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb6e>
    640e:	f44f 6103 	mov.w	r1, #2096	; 0x830
    6412:	2036      	movs	r0, #54	; 0x36
    6414:	f7fa fb02 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6418:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    641c:	f000 b8a2 	b.w	6564 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    6420:	f890 114b 	ldrb.w	r1, [r0, #331]	; 0x14b
    6424:	b109      	cbz	r1, 642a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa6>
    6426:	2008      	movs	r0, #8
    6428:	e063      	b.n	64f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb6e>
    642a:	f890 114a 	ldrb.w	r1, [r0, #330]	; 0x14a
    642e:	b179      	cbz	r1, 6450 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xacc>
    6430:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    6434:	0780      	lsls	r0, r0, #30
    6436:	d10a      	bne.n	644e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaca>
    6438:	200c      	movs	r0, #12
    643a:	f000 f967 	bl	670c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    643e:	6860      	ldr	r0, [r4, #4]
    6440:	f810 1fe7 	ldrb.w	r1, [r0, #231]!
    6444:	f041 0101 	orr.w	r1, r1, #1
    6448:	7001      	strb	r1, [r0, #0]
    644a:	f880 5063 	strb.w	r5, [r0, #99]	; 0x63
    644e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6450:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    6454:	f88d 1004 	strb.w	r1, [sp, #4]
    6458:	9901      	ldr	r1, [sp, #4]
    645a:	9101      	str	r1, [sp, #4]
    645c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6460:	b141      	cbz	r1, 6474 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf0>
    6462:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    6466:	f88d 1000 	strb.w	r1, [sp]
    646a:	9900      	ldr	r1, [sp, #0]
    646c:	9100      	str	r1, [sp, #0]
    646e:	f89d 1000 	ldrb.w	r1, [sp]
    6472:	b121      	cbz	r1, 647e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xafa>
    6474:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    6478:	2901      	cmp	r1, #1
    647a:	d021      	beq.n	64c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb3c>
    647c:	e02e      	b.n	64dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb58>
    647e:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    6482:	2925      	cmp	r1, #37	; 0x25
    6484:	d01a      	beq.n	64bc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb38>
    6486:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    648a:	2925      	cmp	r1, #37	; 0x25
    648c:	d016      	beq.n	64bc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb38>
    648e:	2926      	cmp	r1, #38	; 0x26
    6490:	d014      	beq.n	64bc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb38>
    6492:	2300      	movs	r3, #0
    6494:	f200 2262 	addw	r2, r0, #610	; 0x262
    6498:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    649c:	f008 f943 	bl	e726 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    64a0:	6860      	ldr	r0, [r4, #4]
    64a2:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    64a6:	6861      	ldr	r1, [r4, #4]
    64a8:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    64ac:	8bc2      	ldrh	r2, [r0, #30]
    64ae:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    64b2:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    64b4:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    64b8:	2014      	movs	r0, #20
    64ba:	e01a      	b.n	64f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb6e>
    64bc:	2301      	movs	r3, #1
    64be:	e7e9      	b.n	6494 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb10>
    64c0:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    64c4:	f88d 1000 	strb.w	r1, [sp]
    64c8:	9900      	ldr	r1, [sp, #0]
    64ca:	9100      	str	r1, [sp, #0]
    64cc:	f89d 1000 	ldrb.w	r1, [sp]
    64d0:	b921      	cbnz	r1, 64dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb58>
    64d2:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    64d6:	f007 fe2e 	bl	e136 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    64da:	b170      	cbz	r0, 64fa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb76>
    64dc:	6860      	ldr	r0, [r4, #4]
    64de:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    64e2:	f88d 1000 	strb.w	r1, [sp]
    64e6:	9900      	ldr	r1, [sp, #0]
    64e8:	9100      	str	r1, [sp, #0]
    64ea:	f89d 1000 	ldrb.w	r1, [sp]
    64ee:	b329      	cbz	r1, 653c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbb8>
    64f0:	2023      	movs	r0, #35	; 0x23
    64f2:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    64f6:	f000 b909 	b.w	670c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    64fa:	6860      	ldr	r0, [r4, #4]
    64fc:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    6500:	f009 f884 	bl	f60c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6504:	4605      	mov	r5, r0
    6506:	6860      	ldr	r0, [r4, #4]
    6508:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    650c:	f009 f87e 	bl	f60c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6510:	4606      	mov	r6, r0
    6512:	6860      	ldr	r0, [r4, #4]
    6514:	f890 1146 	ldrb.w	r1, [r0, #326]	; 0x146
    6518:	4628      	mov	r0, r5
    651a:	f009 f882 	bl	f622 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    651e:	b158      	cbz	r0, 6538 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbb4>
    6520:	6860      	ldr	r0, [r4, #4]
    6522:	f890 1147 	ldrb.w	r1, [r0, #327]	; 0x147
    6526:	4630      	mov	r0, r6
    6528:	f009 f87b 	bl	f622 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    652c:	b120      	cbz	r0, 6538 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbb4>
    652e:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    6532:	2000      	movs	r0, #0
    6534:	f000 b8e4 	b.w	6700 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd7c>
    6538:	2016      	movs	r0, #22
    653a:	e7da      	b.n	64f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb6e>
    653c:	f890 014e 	ldrb.w	r0, [r0, #334]	; 0x14e
    6540:	f88d 0000 	strb.w	r0, [sp]
    6544:	9800      	ldr	r0, [sp, #0]
    6546:	9000      	str	r0, [sp, #0]
    6548:	f89d 0000 	ldrb.w	r0, [sp]
    654c:	2800      	cmp	r0, #0
    654e:	f43f af7e 	beq.w	644e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaca>
    6552:	2025      	movs	r0, #37	; 0x25
    6554:	f000 f8da 	bl	670c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    6558:	6860      	ldr	r0, [r4, #4]
    655a:	f880 514e 	strb.w	r5, [r0, #334]	; 0x14e
    655e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6560:	20000114 	.word	0x20000114
    6564:	b510      	push	{r4, lr}
    6566:	4c1e      	ldr	r4, [pc, #120]	; (65e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc5c>)
    6568:	6862      	ldr	r2, [r4, #4]
    656a:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    656e:	2808      	cmp	r0, #8
    6570:	d20d      	bcs.n	658e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0a>
    6572:	f1c0 0108 	rsb	r1, r0, #8
    6576:	f200 2093 	addw	r0, r0, #659	; 0x293
    657a:	b2c9      	uxtb	r1, r1
    657c:	4410      	add	r0, r2
    657e:	f7fa fae1 	bl	b44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    6582:	6861      	ldr	r1, [r4, #4]
    6584:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    6588:	4410      	add	r0, r2
    658a:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    658e:	6862      	ldr	r2, [r4, #4]
    6590:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    6594:	3808      	subs	r0, #8
    6596:	2804      	cmp	r0, #4
    6598:	d20d      	bcs.n	65b6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc32>
    659a:	f1c0 0104 	rsb	r1, r0, #4
    659e:	f500 7090 	add.w	r0, r0, #288	; 0x120
    65a2:	b2c9      	uxtb	r1, r1
    65a4:	4410      	add	r0, r2
    65a6:	f7fa facd 	bl	b44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    65aa:	6861      	ldr	r1, [r4, #4]
    65ac:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    65b0:	4410      	add	r0, r2
    65b2:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    65b6:	6860      	ldr	r0, [r4, #4]
    65b8:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    65bc:	290c      	cmp	r1, #12
    65be:	d30e      	bcc.n	65de <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc5a>
    65c0:	d005      	beq.n	65ce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc4a>
    65c2:	f640 3161 	movw	r1, #2913	; 0xb61
    65c6:	f04f 0036 	mov.w	r0, #54	; 0x36
    65ca:	f7fa fa27 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65ce:	2100      	movs	r1, #0
    65d0:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
    65d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    65d8:	2003      	movs	r0, #3
    65da:	f000 b897 	b.w	670c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    65de:	bd10      	pop	{r4, pc}
    65e0:	20000114 	.word	0x20000114
    65e4:	b570      	push	{r4, r5, r6, lr}
    65e6:	4b20      	ldr	r3, [pc, #128]	; (6668 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xce4>)
    65e8:	4602      	mov	r2, r0
    65ea:	460c      	mov	r4, r1
    65ec:	8858      	ldrh	r0, [r3, #2]
    65ee:	4310      	orrs	r0, r2
    65f0:	8058      	strh	r0, [r3, #2]
    65f2:	f103 000c 	add.w	r0, r3, #12
    65f6:	0791      	lsls	r1, r2, #30
    65f8:	6840      	ldr	r0, [r0, #4]
    65fa:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    65fe:	d507      	bpl.n	6610 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc8c>
    6600:	b121      	cbz	r1, 660c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc88>
    6602:	f640 416f 	movw	r1, #3183	; 0xc6f
    6606:	2036      	movs	r0, #54	; 0x36
    6608:	f7fa fa08 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    660c:	605c      	str	r4, [r3, #4]
    660e:	e003      	b.n	6618 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc94>
    6610:	b101      	cbz	r1, 6614 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc90>
    6612:	609c      	str	r4, [r3, #8]
    6614:	0791      	lsls	r1, r2, #30
    6616:	d515      	bpl.n	6644 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc0>
    6618:	78e1      	ldrb	r1, [r4, #3]
    661a:	2906      	cmp	r1, #6
    661c:	d002      	beq.n	6624 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xca0>
    661e:	290b      	cmp	r1, #11
    6620:	d110      	bne.n	6644 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc0>
    6622:	e008      	b.n	6636 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcb2>
    6624:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    6628:	2919      	cmp	r1, #25
    662a:	d10b      	bne.n	6644 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc0>
    662c:	2100      	movs	r1, #0
    662e:	e9c0 1142 	strd	r1, r1, [r0, #264]	; 0x108
    6632:	2101      	movs	r1, #1
    6634:	e004      	b.n	6640 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcbc>
    6636:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    663a:	2913      	cmp	r1, #19
    663c:	d102      	bne.n	6644 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc0>
    663e:	2100      	movs	r1, #0
    6640:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    6644:	0691      	lsls	r1, r2, #26
    6646:	d501      	bpl.n	664c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc8>
    6648:	2108      	movs	r1, #8
    664a:	7059      	strb	r1, [r3, #1]
    664c:	0611      	lsls	r1, r2, #24
    664e:	d50a      	bpl.n	6666 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xce2>
    6650:	8b02      	ldrh	r2, [r0, #24]
    6652:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    6656:	4620      	mov	r0, r4
    6658:	f7ff f9f2 	bl	5a40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbc>
    665c:	4620      	mov	r0, r4
    665e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6662:	f7ff ba0b 	b.w	5a7c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    6666:	bd70      	pop	{r4, r5, r6, pc}
    6668:	20000108 	.word	0x20000108
    666c:	b570      	push	{r4, r5, r6, lr}
    666e:	4c22      	ldr	r4, [pc, #136]	; (66f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd74>)
    6670:	2501      	movs	r5, #1
    6672:	6863      	ldr	r3, [r4, #4]
    6674:	f893 1262 	ldrb.w	r1, [r3, #610]	; 0x262
    6678:	b909      	cbnz	r1, 667e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcfa>
    667a:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
    667e:	f893 2263 	ldrb.w	r2, [r3, #611]	; 0x263
    6682:	b90a      	cbnz	r2, 6688 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd04>
    6684:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
    6688:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
    668c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    6690:	f103 0062 	add.w	r0, r3, #98	; 0x62
    6694:	22ff      	movs	r2, #255	; 0xff
    6696:	7282      	strb	r2, [r0, #10]
    6698:	4818      	ldr	r0, [pc, #96]	; (66fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd78>)
    669a:	6802      	ldr	r2, [r0, #0]
    669c:	b10a      	cbz	r2, 66a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd1e>
    669e:	4618      	mov	r0, r3
    66a0:	4790      	blx	r2
    66a2:	2000      	movs	r0, #0
    66a4:	f000 f82c 	bl	6700 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd7c>
    66a8:	6860      	ldr	r0, [r4, #4]
    66aa:	302c      	adds	r0, #44	; 0x2c
    66ac:	f008 f8a8 	bl	e800 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    66b0:	4606      	mov	r6, r0
    66b2:	6860      	ldr	r0, [r4, #4]
    66b4:	f008 f852 	bl	e75c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    66b8:	b130      	cbz	r0, 66c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd44>
    66ba:	6861      	ldr	r1, [r4, #4]
    66bc:	f501 72b5 	add.w	r2, r1, #362	; 0x16a
    66c0:	f831 0b2c 	ldrh.w	r0, [r1], #44
    66c4:	f7fc fb4e 	bl	2d64 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    66c8:	2104      	movs	r1, #4
    66ca:	6860      	ldr	r0, [r4, #4]
    66cc:	f008 fdcc 	bl	f268 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    66d0:	6860      	ldr	r0, [r4, #4]
    66d2:	302c      	adds	r0, #44	; 0x2c
    66d4:	f008 f894 	bl	e800 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    66d8:	4604      	mov	r4, r0
    66da:	42a6      	cmp	r6, r4
    66dc:	d20a      	bcs.n	66f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd70>
    66de:	f003 fe1f 	bl	a320 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    66e2:	4601      	mov	r1, r0
    66e4:	1ba0      	subs	r0, r4, r6
    66e6:	2867      	cmp	r0, #103	; 0x67
    66e8:	d200      	bcs.n	66ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd68>
    66ea:	2067      	movs	r0, #103	; 0x67
    66ec:	f003 fcde 	bl	a0ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    66f0:	b100      	cbz	r0, 66f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd70>
    66f2:	2500      	movs	r5, #0
    66f4:	4628      	mov	r0, r5
    66f6:	bd70      	pop	{r4, r5, r6, pc}
    66f8:	20000114 	.word	0x20000114
    66fc:	2000027c 	.word	0x2000027c
    6700:	4601      	mov	r1, r0
    6702:	4801      	ldr	r0, [pc, #4]	; (6708 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd84>)
    6704:	f001 b992 	b.w	7a2c <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>
    6708:	20000114 	.word	0x20000114
    670c:	4902      	ldr	r1, [pc, #8]	; (6718 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd94>)
    670e:	6849      	ldr	r1, [r1, #4]
    6710:	f881 012e 	strb.w	r0, [r1, #302]	; 0x12e
    6714:	f000 bab0 	b.w	6c78 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12f4>
    6718:	20000114 	.word	0x20000114
    671c:	4903      	ldr	r1, [pc, #12]	; (672c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xda8>)
    671e:	6849      	ldr	r1, [r1, #4]
    6720:	f881 0130 	strb.w	r0, [r1, #304]	; 0x130
    6724:	2011      	movs	r0, #17
    6726:	f7ff bff1 	b.w	670c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd88>
    672a:	0000      	.short	0x0000
    672c:	20000114 	.word	0x20000114
    6730:	b538      	push	{r3, r4, r5, lr}
    6732:	4c11      	ldr	r4, [pc, #68]	; (6778 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf4>)
    6734:	6862      	ldr	r2, [r4, #4]
    6736:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    673a:	f8ad 2000 	strh.w	r2, [sp]
    673e:	f007 fd77 	bl	e230 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    6742:	f89d 3000 	ldrb.w	r3, [sp]
    6746:	b2c2      	uxtb	r2, r0
    6748:	2100      	movs	r1, #0
    674a:	4293      	cmp	r3, r2
    674c:	d003      	beq.n	6756 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdd2>
    674e:	6863      	ldr	r3, [r4, #4]
    6750:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
    6754:	e002      	b.n	675c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdd8>
    6756:	6862      	ldr	r2, [r4, #4]
    6758:	f882 1262 	strb.w	r1, [r2, #610]	; 0x262
    675c:	f89d 2001 	ldrb.w	r2, [sp, #1]
    6760:	f3c0 2007 	ubfx	r0, r0, #8, #8
    6764:	4282      	cmp	r2, r0
    6766:	d003      	beq.n	6770 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdec>
    6768:	6861      	ldr	r1, [r4, #4]
    676a:	f881 0263 	strb.w	r0, [r1, #611]	; 0x263
    676e:	bd38      	pop	{r3, r4, r5, pc}
    6770:	6860      	ldr	r0, [r4, #4]
    6772:	f880 1263 	strb.w	r1, [r0, #611]	; 0x263
    6776:	bd38      	pop	{r3, r4, r5, pc}
    6778:	20000114 	.word	0x20000114
    677c:	b570      	push	{r4, r5, r6, lr}
    677e:	6841      	ldr	r1, [r0, #4]
    6780:	4604      	mov	r4, r0
    6782:	f891 00a5 	ldrb.w	r0, [r1, #165]	; 0xa5
    6786:	2814      	cmp	r0, #20
    6788:	d001      	beq.n	678e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0a>
    678a:	2002      	movs	r0, #2
    678c:	bd70      	pop	{r4, r5, r6, pc}
    678e:	4d09      	ldr	r5, [pc, #36]	; (67b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe30>)
    6790:	f201 219b 	addw	r1, r1, #667	; 0x29b
    6794:	68a8      	ldr	r0, [r5, #8]
    6796:	f007 ff19 	bl	e5cc <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>
    679a:	6861      	ldr	r1, [r4, #4]
    679c:	68a8      	ldr	r0, [r5, #8]
    679e:	f501 7192 	add.w	r1, r1, #292	; 0x124
    67a2:	f007 ff10 	bl	e5c6 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>
    67a6:	6861      	ldr	r1, [r4, #4]
    67a8:	2017      	movs	r0, #23
    67aa:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    67ae:	2000      	movs	r0, #0
    67b0:	bd70      	pop	{r4, r5, r6, pc}
    67b2:	0000      	.short	0x0000
    67b4:	20000108 	.word	0x20000108
    67b8:	4901      	ldr	r1, [pc, #4]	; (67c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe3c>)
    67ba:	6889      	ldr	r1, [r1, #8]
    67bc:	f7fc bc38 	b.w	3030 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    67c0:	20000108 	.word	0x20000108
    67c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67c8:	4e1b      	ldr	r6, [pc, #108]	; (6838 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>)
    67ca:	2500      	movs	r5, #0
    67cc:	f106 010c 	add.w	r1, r6, #12
    67d0:	2703      	movs	r7, #3
    67d2:	f8d1 c004 	ldr.w	ip, [r1, #4]
    67d6:	2401      	movs	r4, #1
    67d8:	b1a0      	cbz	r0, 6804 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe80>
    67da:	68b0      	ldr	r0, [r6, #8]
    67dc:	78c0      	ldrb	r0, [r0, #3]
    67de:	f88c 0129 	strb.w	r0, [ip, #297]	; 0x129
    67e2:	fa04 f000 	lsl.w	r0, r4, r0
    67e6:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    67ea:	b130      	cbz	r0, 67fa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe76>
    67ec:	f88c 70a5 	strb.w	r7, [ip, #165]	; 0xa5
    67f0:	f8ac 50dc 	strh.w	r5, [ip, #220]	; 0xdc
    67f4:	f88c 40e0 	strb.w	r4, [ip, #224]	; 0xe0
    67f8:	e019      	b.n	682e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeaa>
    67fa:	f44f 61c4 	mov.w	r1, #1568	; 0x620
    67fe:	2036      	movs	r0, #54	; 0x36
    6800:	f7fa f90c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6804:	4688      	mov	r8, r1
    6806:	2300      	movs	r3, #0
    6808:	f89c 20a6 	ldrb.w	r2, [ip, #166]	; 0xa6
    680c:	f10c 0088 	add.w	r0, ip, #136	; 0x88
    6810:	4619      	mov	r1, r3
    6812:	f007 fc2d 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6816:	b168      	cbz	r0, 6834 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb0>
    6818:	68b0      	ldr	r0, [r6, #8]
    681a:	78c1      	ldrb	r1, [r0, #3]
    681c:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6820:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    6824:	f800 7fa6 	strb.w	r7, [r0, #166]!
    6828:	8785      	strh	r5, [r0, #60]	; 0x3c
    682a:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    682e:	2000      	movs	r0, #0
    6830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6834:	2001      	movs	r0, #1
    6836:	e7fb      	b.n	6830 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeac>
    6838:	20000108 	.word	0x20000108
    683c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6840:	4604      	mov	r4, r0
    6842:	6840      	ldr	r0, [r0, #4]
    6844:	2300      	movs	r3, #0
    6846:	4619      	mov	r1, r3
    6848:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    684c:	3088      	adds	r0, #136	; 0x88
    684e:	f007 fc0f 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6852:	b310      	cbz	r0, 689a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf16>
    6854:	4d2e      	ldr	r5, [pc, #184]	; (6910 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8c>)
    6856:	68a8      	ldr	r0, [r5, #8]
    6858:	f007 fec9 	bl	e5ee <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    685c:	b300      	cbz	r0, 68a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf1c>
    685e:	68a8      	ldr	r0, [r5, #8]
    6860:	f007 febf 	bl	e5e2 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    6864:	4607      	mov	r7, r0
    6866:	68a8      	ldr	r0, [r5, #8]
    6868:	f007 febf 	bl	e5ea <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    686c:	4680      	mov	r8, r0
    686e:	68a8      	ldr	r0, [r5, #8]
    6870:	f007 feb5 	bl	e5de <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    6874:	4606      	mov	r6, r0
    6876:	68a8      	ldr	r0, [r5, #8]
    6878:	f007 feb5 	bl	e5e6 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    687c:	4601      	mov	r1, r0
    687e:	9700      	str	r7, [sp, #0]
    6880:	6860      	ldr	r0, [r4, #4]
    6882:	4643      	mov	r3, r8
    6884:	4632      	mov	r2, r6
    6886:	302c      	adds	r0, #44	; 0x2c
    6888:	f007 ffc4 	bl	e814 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    688c:	6860      	ldr	r0, [r4, #4]
    688e:	2501      	movs	r5, #1
    6890:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    6894:	291d      	cmp	r1, #29
    6896:	d008      	beq.n	68aa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf26>
    6898:	e009      	b.n	68ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf2a>
    689a:	2001      	movs	r0, #1
    689c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    68a0:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    68a4:	2000      	movs	r0, #0
    68a6:	f7ff bf8d 	b.w	67c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe40>
    68aa:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
    68ae:	6860      	ldr	r0, [r4, #4]
    68b0:	2600      	movs	r6, #0
    68b2:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    68b6:	2901      	cmp	r1, #1
    68b8:	d011      	beq.n	68de <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf5a>
    68ba:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    68be:	f88d 1004 	strb.w	r1, [sp, #4]
    68c2:	9901      	ldr	r1, [sp, #4]
    68c4:	9101      	str	r1, [sp, #4]
    68c6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    68ca:	b941      	cbnz	r1, 68de <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf5a>
    68cc:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    68d0:	f88d 1000 	strb.w	r1, [sp]
    68d4:	9900      	ldr	r1, [sp, #0]
    68d6:	9100      	str	r1, [sp, #0]
    68d8:	f89d 1000 	ldrb.w	r1, [sp]
    68dc:	b151      	cbz	r1, 68f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf70>
    68de:	211f      	movs	r1, #31
    68e0:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    68e4:	6860      	ldr	r0, [r4, #4]
    68e6:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    68ea:	6860      	ldr	r0, [r4, #4]
    68ec:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    68f0:	2000      	movs	r0, #0
    68f2:	e7d3      	b.n	689c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf18>
    68f4:	211e      	movs	r1, #30
    68f6:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    68fa:	4805      	ldr	r0, [pc, #20]	; (6910 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8c>)
    68fc:	300c      	adds	r0, #12
    68fe:	6843      	ldr	r3, [r0, #4]
    6900:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    6904:	8818      	ldrh	r0, [r3, #0]
    6906:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    690a:	f7fc fa53 	bl	2db4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    690e:	e7e9      	b.n	68e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf60>
    6910:	20000108 	.word	0x20000108
    6914:	4901      	ldr	r1, [pc, #4]	; (691c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf98>)
    6916:	6889      	ldr	r1, [r1, #8]
    6918:	f008 b8fb 	b.w	eb12 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>
    691c:	20000108 	.word	0x20000108
    6920:	4901      	ldr	r1, [pc, #4]	; (6928 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfa4>)
    6922:	6889      	ldr	r1, [r1, #8]
    6924:	f7fc bb4c 	b.w	2fc0 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    6928:	20000108 	.word	0x20000108
    692c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6930:	4604      	mov	r4, r0
    6932:	6840      	ldr	r0, [r0, #4]
    6934:	f04f 0800 	mov.w	r8, #0
    6938:	b086      	sub	sp, #24
    693a:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    693e:	4643      	mov	r3, r8
    6940:	4641      	mov	r1, r8
    6942:	3088      	adds	r0, #136	; 0x88
    6944:	f007 fb94 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6948:	b190      	cbz	r0, 6970 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfec>
    694a:	6860      	ldr	r0, [r4, #4]
    694c:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    6950:	2824      	cmp	r0, #36	; 0x24
    6952:	d011      	beq.n	6978 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xff4>
    6954:	2825      	cmp	r0, #37	; 0x25
    6956:	d00f      	beq.n	6978 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xff4>
    6958:	2826      	cmp	r0, #38	; 0x26
    695a:	d00d      	beq.n	6978 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xff4>
    695c:	4668      	mov	r0, sp
    695e:	f7fa fe89 	bl	1674 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6962:	b158      	cbz	r0, 697c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xff8>
    6964:	9800      	ldr	r0, [sp, #0]
    6966:	a903      	add	r1, sp, #12
    6968:	78c0      	ldrb	r0, [r0, #3]
    696a:	f88d 000c 	strb.w	r0, [sp, #12]
    696e:	e006      	b.n	697e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xffa>
    6970:	2001      	movs	r0, #1
    6972:	b006      	add	sp, #24
    6974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6978:	2020      	movs	r0, #32
    697a:	e7fa      	b.n	6972 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfee>
    697c:	2100      	movs	r1, #0
    697e:	6860      	ldr	r0, [r4, #4]
    6980:	ab02      	add	r3, sp, #8
    6982:	2216      	movs	r2, #22
    6984:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    6988:	f007 fc31 	bl	e1ee <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    698c:	2501      	movs	r5, #1
    698e:	2600      	movs	r6, #0
    6990:	b188      	cbz	r0, 69b6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1032>
    6992:	f89d 2008 	ldrb.w	r2, [sp, #8]
    6996:	2116      	movs	r1, #22
    6998:	4830      	ldr	r0, [pc, #192]	; (6a5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d8>)
    699a:	f008 f834 	bl	ea06 <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>
    699e:	6861      	ldr	r1, [r4, #4]
    69a0:	202f      	movs	r0, #47	; 0x2f
    69a2:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    69a6:	6860      	ldr	r0, [r4, #4]
    69a8:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    69ac:	6860      	ldr	r0, [r4, #4]
    69ae:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    69b2:	2000      	movs	r0, #0
    69b4:	e7dd      	b.n	6972 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfee>
    69b6:	4f29      	ldr	r7, [pc, #164]	; (6a5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d8>)
    69b8:	3f0c      	subs	r7, #12
    69ba:	68b8      	ldr	r0, [r7, #8]
    69bc:	f007 fe29 	bl	e612 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    69c0:	b1b8      	cbz	r0, 69f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x106e>
    69c2:	68b8      	ldr	r0, [r7, #8]
    69c4:	6862      	ldr	r2, [r4, #4]
    69c6:	7901      	ldrb	r1, [r0, #4]
    69c8:	f001 0107 	and.w	r1, r1, #7
    69cc:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    69d0:	7940      	ldrb	r0, [r0, #5]
    69d2:	f000 0107 	and.w	r1, r0, #7
    69d6:	6860      	ldr	r0, [r4, #4]
    69d8:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    69dc:	6860      	ldr	r0, [r4, #4]
    69de:	f890 2145 	ldrb.w	r2, [r0, #325]	; 0x145
    69e2:	f88d 200c 	strb.w	r2, [sp, #12]
    69e6:	9a03      	ldr	r2, [sp, #12]
    69e8:	9203      	str	r2, [sp, #12]
    69ea:	f89d 200c 	ldrb.w	r2, [sp, #12]
    69ee:	bb4a      	cbnz	r2, 6a44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10c0>
    69f0:	e004      	b.n	69fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1078>
    69f2:	2000      	movs	r0, #0
    69f4:	f7ff fee6 	bl	67c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe40>
    69f8:	4680      	mov	r8, r0
    69fa:	e02d      	b.n	6a58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d4>
    69fc:	f890 2144 	ldrb.w	r2, [r0, #324]	; 0x144
    6a00:	2a01      	cmp	r2, #1
    6a02:	d01f      	beq.n	6a44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10c0>
    6a04:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    6a08:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    6a0c:	7857      	ldrb	r7, [r2, #1]
    6a0e:	429f      	cmp	r7, r3
    6a10:	d106      	bne.n	6a20 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x109c>
    6a12:	7812      	ldrb	r2, [r2, #0]
    6a14:	428a      	cmp	r2, r1
    6a16:	d103      	bne.n	6a20 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x109c>
    6a18:	2102      	movs	r1, #2
    6a1a:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
    6a1e:	e011      	b.n	6a44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10c0>
    6a20:	480e      	ldr	r0, [pc, #56]	; (6a5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d8>)
    6a22:	6841      	ldr	r1, [r0, #4]
    6a24:	f501 70cf 	add.w	r0, r1, #414	; 0x19e
    6a28:	880a      	ldrh	r2, [r1, #0]
    6a2a:	f820 2b02 	strh.w	r2, [r0], #2
    6a2e:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    6a32:	f800 2b01 	strb.w	r2, [r0], #1
    6a36:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    6a3a:	f800 190d 	strb.w	r1, [r0], #-13
    6a3e:	4908      	ldr	r1, [pc, #32]	; (6a60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>)
    6a40:	f007 fe3e 	bl	e6c0 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    6a44:	6861      	ldr	r1, [r4, #4]
    6a46:	2022      	movs	r0, #34	; 0x22
    6a48:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    6a4c:	6860      	ldr	r0, [r4, #4]
    6a4e:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    6a52:	6860      	ldr	r0, [r4, #4]
    6a54:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    6a58:	4640      	mov	r0, r8
    6a5a:	e78a      	b.n	6972 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfee>
    6a5c:	20000114 	.word	0x20000114
    6a60:	00007a6d 	.word	0x00007a6d
    6a64:	b570      	push	{r4, r5, r6, lr}
    6a66:	4604      	mov	r4, r0
    6a68:	6840      	ldr	r0, [r0, #4]
    6a6a:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    6a6e:	2820      	cmp	r0, #32
    6a70:	d001      	beq.n	6a76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10f2>
    6a72:	2001      	movs	r0, #1
    6a74:	bd70      	pop	{r4, r5, r6, pc}
    6a76:	4e16      	ldr	r6, [pc, #88]	; (6ad0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x114c>)
    6a78:	68b0      	ldr	r0, [r6, #8]
    6a7a:	f007 fddc 	bl	e636 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>
    6a7e:	b1f0      	cbz	r0, 6abe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x113a>
    6a80:	68b0      	ldr	r0, [r6, #8]
    6a82:	6862      	ldr	r2, [r4, #4]
    6a84:	7901      	ldrb	r1, [r0, #4]
    6a86:	7940      	ldrb	r0, [r0, #5]
    6a88:	f001 0107 	and.w	r1, r1, #7
    6a8c:	f361 0507 	bfi	r5, r1, #0, #8
    6a90:	4629      	mov	r1, r5
    6a92:	f000 0007 	and.w	r0, r0, #7
    6a96:	f360 210f 	bfi	r1, r0, #8, #8
    6a9a:	2001      	movs	r0, #1
    6a9c:	f882 00e0 	strb.w	r0, [r2, #224]	; 0xe0
    6aa0:	6862      	ldr	r2, [r4, #4]
    6aa2:	2000      	movs	r0, #0
    6aa4:	f8a2 00dc 	strh.w	r0, [r2, #220]	; 0xdc
    6aa8:	6862      	ldr	r2, [r4, #4]
    6aaa:	2024      	movs	r0, #36	; 0x24
    6aac:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
    6ab0:	6860      	ldr	r0, [r4, #4]
    6ab2:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    6ab6:	f7ff fe3b 	bl	6730 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdac>
    6aba:	2000      	movs	r0, #0
    6abc:	bd70      	pop	{r4, r5, r6, pc}
    6abe:	2001      	movs	r0, #1
    6ac0:	f7ff fe80 	bl	67c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe40>
    6ac4:	4604      	mov	r4, r0
    6ac6:	201e      	movs	r0, #30
    6ac8:	f7ff fe1a 	bl	6700 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd7c>
    6acc:	4620      	mov	r0, r4
    6ace:	bd70      	pop	{r4, r5, r6, pc}
    6ad0:	20000108 	.word	0x20000108
    6ad4:	b570      	push	{r4, r5, r6, lr}
    6ad6:	4604      	mov	r4, r0
    6ad8:	6840      	ldr	r0, [r0, #4]
    6ada:	4d0a      	ldr	r5, [pc, #40]	; (6b04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1180>)
    6adc:	f810 1ff6 	ldrb.w	r1, [r0, #246]!
    6ae0:	f041 0104 	orr.w	r1, r1, #4
    6ae4:	7001      	strb	r1, [r0, #0]
    6ae6:	68a8      	ldr	r0, [r5, #8]
    6ae8:	f007 fdaf 	bl	e64a <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    6aec:	4606      	mov	r6, r0
    6aee:	68a8      	ldr	r0, [r5, #8]
    6af0:	f007 fdaf 	bl	e652 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6af4:	4601      	mov	r1, r0
    6af6:	4622      	mov	r2, r4
    6af8:	4630      	mov	r0, r6
    6afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6afe:	f000 b897 	b.w	6c30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ac>
    6b02:	0000      	.short	0x0000
    6b04:	20000108 	.word	0x20000108
    6b08:	4a11      	ldr	r2, [pc, #68]	; (6b50 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11cc>)
    6b0a:	4911      	ldr	r1, [pc, #68]	; (6b50 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11cc>)
    6b0c:	320c      	adds	r2, #12
    6b0e:	6852      	ldr	r2, [r2, #4]
    6b10:	6889      	ldr	r1, [r1, #8]
    6b12:	f892 30a5 	ldrb.w	r3, [r2, #165]	; 0xa5
    6b16:	7909      	ldrb	r1, [r1, #4]
    6b18:	f1a3 0210 	sub.w	r2, r3, #16
    6b1c:	2a0c      	cmp	r2, #12
    6b1e:	d801      	bhi.n	6b24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a0>
    6b20:	2303      	movs	r3, #3
    6b22:	e008      	b.n	6b36 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11b2>
    6b24:	2b28      	cmp	r3, #40	; 0x28
    6b26:	d00a      	beq.n	6b3e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11ba>
    6b28:	2b1d      	cmp	r3, #29
    6b2a:	d00a      	beq.n	6b42 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11be>
    6b2c:	2b05      	cmp	r3, #5
    6b2e:	d00a      	beq.n	6b46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c2>
    6b30:	2b20      	cmp	r3, #32
    6b32:	d00a      	beq.n	6b4a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c6>
    6b34:	23fe      	movs	r3, #254	; 0xfe
    6b36:	4602      	mov	r2, r0
    6b38:	4618      	mov	r0, r3
    6b3a:	f000 b879 	b.w	6c30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ac>
    6b3e:	2323      	movs	r3, #35	; 0x23
    6b40:	e7f9      	b.n	6b36 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11b2>
    6b42:	2314      	movs	r3, #20
    6b44:	e7f7      	b.n	6b36 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11b2>
    6b46:	2312      	movs	r3, #18
    6b48:	e7f5      	b.n	6b36 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11b2>
    6b4a:	2316      	movs	r3, #22
    6b4c:	e7f3      	b.n	6b36 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11b2>
    6b4e:	0000      	.short	0x0000
    6b50:	20000108 	.word	0x20000108
    6b54:	b570      	push	{r4, r5, r6, lr}
    6b56:	4604      	mov	r4, r0
    6b58:	6840      	ldr	r0, [r0, #4]
    6b5a:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    6b5e:	291b      	cmp	r1, #27
    6b60:	d001      	beq.n	6b66 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11e2>
    6b62:	2002      	movs	r0, #2
    6b64:	bd70      	pop	{r4, r5, r6, pc}
    6b66:	2500      	movs	r5, #0
    6b68:	f880 50e5 	strb.w	r5, [r0, #229]	; 0xe5
    6b6c:	6860      	ldr	r0, [r4, #4]
    6b6e:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    6b72:	6860      	ldr	r0, [r4, #4]
    6b74:	f880 5278 	strb.w	r5, [r0, #632]	; 0x278
    6b78:	6860      	ldr	r0, [r4, #4]
    6b7a:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    6b7e:	b161      	cbz	r1, 6b9a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1216>
    6b80:	f880 50e6 	strb.w	r5, [r0, #230]	; 0xe6
    6b84:	6860      	ldr	r0, [r4, #4]
    6b86:	2202      	movs	r2, #2
    6b88:	8801      	ldrh	r1, [r0, #0]
    6b8a:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    6b8e:	6860      	ldr	r0, [r4, #4]
    6b90:	490d      	ldr	r1, [pc, #52]	; (6bc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1244>)
    6b92:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    6b96:	6860      	ldr	r0, [r4, #4]
    6b98:	e00c      	b.n	6bb4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1230>
    6b9a:	8801      	ldrh	r1, [r0, #0]
    6b9c:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    6ba0:	6860      	ldr	r0, [r4, #4]
    6ba2:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    6ba6:	6861      	ldr	r1, [r4, #4]
    6ba8:	2001      	movs	r0, #1
    6baa:	2202      	movs	r2, #2
    6bac:	f881 0220 	strb.w	r0, [r1, #544]	; 0x220
    6bb0:	4906      	ldr	r1, [pc, #24]	; (6bcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1248>)
    6bb2:	6860      	ldr	r0, [r4, #4]
    6bb4:	f200 2012 	addw	r0, r0, #530	; 0x212
    6bb8:	f007 fd8b 	bl	e6d2 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6bbc:	6860      	ldr	r0, [r4, #4]
    6bbe:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    6bc2:	2000      	movs	r0, #0
    6bc4:	bd70      	pop	{r4, r5, r6, pc}
    6bc6:	0000      	.short	0x0000
    6bc8:	0000ebcd 	.word	0x0000ebcd
    6bcc:	0000ebaf 	.word	0x0000ebaf
    6bd0:	4901      	ldr	r1, [pc, #4]	; (6bd8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1254>)
    6bd2:	6889      	ldr	r1, [r1, #8]
    6bd4:	f007 bf55 	b.w	ea82 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>
    6bd8:	20000108 	.word	0x20000108
    6bdc:	4602      	mov	r2, r0
    6bde:	480f      	ldr	r0, [pc, #60]	; (6c1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1298>)
    6be0:	b510      	push	{r4, lr}
    6be2:	6880      	ldr	r0, [r0, #8]
    6be4:	6851      	ldr	r1, [r2, #4]
    6be6:	2400      	movs	r4, #0
    6be8:	7900      	ldrb	r0, [r0, #4]
    6bea:	f891 10a5 	ldrb.w	r1, [r1, #165]	; 0xa5
    6bee:	2812      	cmp	r0, #18
    6bf0:	d006      	beq.n	6c00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x127c>
    6bf2:	2814      	cmp	r0, #20
    6bf4:	d004      	beq.n	6c00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x127c>
    6bf6:	2816      	cmp	r0, #22
    6bf8:	d002      	beq.n	6c00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x127c>
    6bfa:	2823      	cmp	r0, #35	; 0x23
    6bfc:	d10c      	bne.n	6c18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1294>
    6bfe:	e004      	b.n	6c0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1286>
    6c00:	2101      	movs	r1, #1
    6c02:	f000 f90f 	bl	6e24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14a0>
    6c06:	4604      	mov	r4, r0
    6c08:	e006      	b.n	6c18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1294>
    6c0a:	2928      	cmp	r1, #40	; 0x28
    6c0c:	d104      	bne.n	6c18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1294>
    6c0e:	4804      	ldr	r0, [pc, #16]	; (6c20 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129c>)
    6c10:	6801      	ldr	r1, [r0, #0]
    6c12:	b109      	cbz	r1, 6c18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1294>
    6c14:	4610      	mov	r0, r2
    6c16:	4788      	blx	r1
    6c18:	4620      	mov	r0, r4
    6c1a:	bd10      	pop	{r4, pc}
    6c1c:	20000108 	.word	0x20000108
    6c20:	20000280 	.word	0x20000280
    6c24:	4901      	ldr	r1, [pc, #4]	; (6c2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a8>)
    6c26:	6889      	ldr	r1, [r1, #8]
    6c28:	f7fc ba62 	b.w	30f0 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    6c2c:	20000108 	.word	0x20000108
    6c30:	4603      	mov	r3, r0
    6c32:	2000      	movs	r0, #0
    6c34:	2b23      	cmp	r3, #35	; 0x23
    6c36:	d017      	beq.n	6c68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12e4>
    6c38:	dc0b      	bgt.n	6c52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ce>
    6c3a:	2b03      	cmp	r3, #3
    6c3c:	d011      	beq.n	6c62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12de>
    6c3e:	2b12      	cmp	r3, #18
    6c40:	d003      	beq.n	6c4a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12c6>
    6c42:	2b14      	cmp	r3, #20
    6c44:	d001      	beq.n	6c4a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12c6>
    6c46:	2b16      	cmp	r3, #22
    6c48:	d10a      	bne.n	6c60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12dc>
    6c4a:	2100      	movs	r1, #0
    6c4c:	4618      	mov	r0, r3
    6c4e:	f000 b8e9 	b.w	6e24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14a0>
    6c52:	2b24      	cmp	r3, #36	; 0x24
    6c54:	d008      	beq.n	6c68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12e4>
    6c56:	2b25      	cmp	r3, #37	; 0x25
    6c58:	d006      	beq.n	6c68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12e4>
    6c5a:	2bfe      	cmp	r3, #254	; 0xfe
    6c5c:	d100      	bne.n	6c60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12dc>
    6c5e:	2002      	movs	r0, #2
    6c60:	4770      	bx	lr
    6c62:	4608      	mov	r0, r1
    6c64:	f7ff b8be 	b.w	5de4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x460>
    6c68:	4a02      	ldr	r2, [pc, #8]	; (6c74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12f0>)
    6c6a:	6812      	ldr	r2, [r2, #0]
    6c6c:	2a00      	cmp	r2, #0
    6c6e:	d0f7      	beq.n	6c60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12dc>
    6c70:	4618      	mov	r0, r3
    6c72:	4710      	bx	r2
    6c74:	20000278 	.word	0x20000278
    6c78:	280c      	cmp	r0, #12
    6c7a:	d01a      	beq.n	6cb2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6c7c:	2813      	cmp	r0, #19
    6c7e:	d018      	beq.n	6cb2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6c80:	2818      	cmp	r0, #24
    6c82:	d016      	beq.n	6cb2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6c84:	4910      	ldr	r1, [pc, #64]	; (6cc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1344>)
    6c86:	2200      	movs	r2, #0
    6c88:	2811      	cmp	r0, #17
    6c8a:	6849      	ldr	r1, [r1, #4]
    6c8c:	d012      	beq.n	6cb4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1330>
    6c8e:	2807      	cmp	r0, #7
    6c90:	d00f      	beq.n	6cb2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6c92:	2809      	cmp	r0, #9
    6c94:	d00d      	beq.n	6cb2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6c96:	2815      	cmp	r0, #21
    6c98:	d012      	beq.n	6cc0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x133c>
    6c9a:	2824      	cmp	r0, #36	; 0x24
    6c9c:	d009      	beq.n	6cb2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6c9e:	2801      	cmp	r0, #1
    6ca0:	d007      	beq.n	6cb2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6ca2:	2800      	cmp	r0, #0
    6ca4:	d005      	beq.n	6cb2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6ca6:	2802      	cmp	r0, #2
    6ca8:	d003      	beq.n	6cb2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132e>
    6caa:	f821 2fdc 	strh.w	r2, [r1, #220]!
    6cae:	2001      	movs	r0, #1
    6cb0:	7108      	strb	r0, [r1, #4]
    6cb2:	4770      	bx	lr
    6cb4:	f891 0130 	ldrb.w	r0, [r1, #304]	; 0x130
    6cb8:	b110      	cbz	r0, 6cc0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x133c>
    6cba:	f8a1 20dc 	strh.w	r2, [r1, #220]	; 0xdc
    6cbe:	4770      	bx	lr
    6cc0:	f8a1 20e2 	strh.w	r2, [r1, #226]	; 0xe2
    6cc4:	4770      	bx	lr
    6cc6:	0000      	.short	0x0000
    6cc8:	20000114 	.word	0x20000114
    6ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6cd0:	4d52      	ldr	r5, [pc, #328]	; (6e1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1498>)
    6cd2:	4680      	mov	r8, r0
    6cd4:	460f      	mov	r7, r1
    6cd6:	6868      	ldr	r0, [r5, #4]
    6cd8:	f100 0488 	add.w	r4, r0, #136	; 0x88
    6cdc:	f890 0138 	ldrb.w	r0, [r0, #312]	; 0x138
    6ce0:	f88d 0000 	strb.w	r0, [sp]
    6ce4:	9800      	ldr	r0, [sp, #0]
    6ce6:	9000      	str	r0, [sp, #0]
    6ce8:	f89d 0000 	ldrb.w	r0, [sp]
    6cec:	2600      	movs	r6, #0
    6cee:	b930      	cbnz	r0, 6cfe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x137a>
    6cf0:	7fe2      	ldrb	r2, [r4, #31]
    6cf2:	2300      	movs	r3, #0
    6cf4:	2101      	movs	r1, #1
    6cf6:	4620      	mov	r0, r4
    6cf8:	f007 f9ba 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6cfc:	b120      	cbz	r0, 6d08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1384>
    6cfe:	f8b4 0052 	ldrh.w	r0, [r4, #82]	; 0x52
    6d02:	1c40      	adds	r0, r0, #1
    6d04:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
    6d08:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    6d0c:	b121      	cbz	r1, 6d18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1394>
    6d0e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
    6d12:	1c40      	adds	r0, r0, #1
    6d14:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
    6d18:	f994 005c 	ldrsb.w	r0, [r4, #92]	; 0x5c
    6d1c:	b120      	cbz	r0, 6d28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13a4>
    6d1e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
    6d22:	1c52      	adds	r2, r2, #1
    6d24:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    6d28:	f1b8 0f00 	cmp.w	r8, #0
    6d2c:	d114      	bne.n	6d58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13d4>
    6d2e:	4a3b      	ldr	r2, [pc, #236]	; (6e1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1498>)
    6d30:	3a0c      	subs	r2, #12
    6d32:	7812      	ldrb	r2, [r2, #0]
    6d34:	2a02      	cmp	r2, #2
    6d36:	d006      	beq.n	6d46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13c2>
    6d38:	2a01      	cmp	r2, #1
    6d3a:	d006      	beq.n	6d4a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13c6>
    6d3c:	b1df      	cbz	r7, 6d76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13f2>
    6d3e:	06f8      	lsls	r0, r7, #27
    6d40:	d508      	bpl.n	6d54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13d0>
    6d42:	201e      	movs	r0, #30
    6d44:	e043      	b.n	6dce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144a>
    6d46:	2016      	movs	r0, #22
    6d48:	e041      	b.n	6dce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144a>
    6d4a:	6868      	ldr	r0, [r5, #4]
    6d4c:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
    6d50:	bba0      	cbnz	r0, 6dbc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1438>
    6d52:	e05d      	b.n	6e10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x148c>
    6d54:	0738      	lsls	r0, r7, #28
    6d56:	d501      	bpl.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13d8>
    6d58:	203d      	movs	r0, #61	; 0x3d
    6d5a:	e038      	b.n	6dce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144a>
    6d5c:	07b8      	lsls	r0, r7, #30
    6d5e:	d001      	beq.n	6d64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e0>
    6d60:	202a      	movs	r0, #42	; 0x2a
    6d62:	e034      	b.n	6dce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144a>
    6d64:	06b8      	lsls	r0, r7, #26
    6d66:	d404      	bmi.n	6d72 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13ee>
    6d68:	f640 5101 	movw	r1, #3329	; 0xd01
    6d6c:	2036      	movs	r0, #54	; 0x36
    6d6e:	f7f9 fe55 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d72:	2023      	movs	r0, #35	; 0x23
    6d74:	e02b      	b.n	6dce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144a>
    6d76:	b129      	cbz	r1, 6d84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1400>
    6d78:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    6d7c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6d80:	4291      	cmp	r1, r2
    6d82:	d81a      	bhi.n	6dba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1436>
    6d84:	b128      	cbz	r0, 6d92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x140e>
    6d86:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
    6d8a:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
    6d8e:	4288      	cmp	r0, r1
    6d90:	d813      	bhi.n	6dba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1436>
    6d92:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
    6d96:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
    6d9a:	4281      	cmp	r1, r0
    6d9c:	d309      	bcc.n	6db2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x142e>
    6d9e:	686a      	ldr	r2, [r5, #4]
    6da0:	f892 2138 	ldrb.w	r2, [r2, #312]	; 0x138
    6da4:	f88d 2000 	strb.w	r2, [sp]
    6da8:	9a00      	ldr	r2, [sp, #0]
    6daa:	9200      	str	r2, [sp, #0]
    6dac:	f89d 2000 	ldrb.w	r2, [sp]
    6db0:	b91a      	cbnz	r2, 6dba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1436>
    6db2:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6db6:	4291      	cmp	r1, r2
    6db8:	d301      	bcc.n	6dbe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x143a>
    6dba:	2022      	movs	r0, #34	; 0x22
    6dbc:	e007      	b.n	6dce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144a>
    6dbe:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    6dc2:	b1f9      	cbz	r1, 6e04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1480>
    6dc4:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
    6dc8:	4281      	cmp	r1, r0
    6dca:	d321      	bcc.n	6e10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x148c>
    6dcc:	2008      	movs	r0, #8
    6dce:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
    6dd2:	4913      	ldr	r1, [pc, #76]	; (6e20 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x149c>)
    6dd4:	f104 0036 	add.w	r0, r4, #54	; 0x36
    6dd8:	f007 fc72 	bl	e6c0 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    6ddc:	7766      	strb	r6, [r4, #29]
    6dde:	77a6      	strb	r6, [r4, #30]
    6de0:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
    6de4:	2102      	movs	r1, #2
    6de6:	6868      	ldr	r0, [r5, #4]
    6de8:	f008 fa3e 	bl	f268 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6dec:	6868      	ldr	r0, [r5, #4]
    6dee:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    6df2:	2901      	cmp	r1, #1
    6df4:	d104      	bne.n	6e00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x147c>
    6df6:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    6dfa:	7801      	ldrb	r1, [r0, #0]
    6dfc:	1e49      	subs	r1, r1, #1
    6dfe:	7001      	strb	r1, [r0, #0]
    6e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6e04:	f8b4 004e 	ldrh.w	r0, [r4, #78]	; 0x4e
    6e08:	2806      	cmp	r0, #6
    6e0a:	d301      	bcc.n	6e10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x148c>
    6e0c:	203e      	movs	r0, #62	; 0x3e
    6e0e:	e7de      	b.n	6dce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144a>
    6e10:	6868      	ldr	r0, [r5, #4]
    6e12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6e16:	2100      	movs	r1, #0
    6e18:	f008 ba26 	b.w	f268 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6e1c:	20000114 	.word	0x20000114
    6e20:	0000ea25 	.word	0x0000ea25
    6e24:	b570      	push	{r4, r5, r6, lr}
    6e26:	460e      	mov	r6, r1
    6e28:	4601      	mov	r1, r0
    6e2a:	6850      	ldr	r0, [r2, #4]
    6e2c:	4614      	mov	r4, r2
    6e2e:	2500      	movs	r5, #0
    6e30:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    6e34:	481f      	ldr	r0, [pc, #124]	; (6eb4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1530>)
    6e36:	6840      	ldr	r0, [r0, #4]
    6e38:	3088      	adds	r0, #136	; 0x88
    6e3a:	2912      	cmp	r1, #18
    6e3c:	d008      	beq.n	6e50 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14cc>
    6e3e:	2914      	cmp	r1, #20
    6e40:	d010      	beq.n	6e64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14e0>
    6e42:	2916      	cmp	r1, #22
    6e44:	d020      	beq.n	6e88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1504>
    6e46:	f240 51c9 	movw	r1, #1481	; 0x5c9
    6e4a:	2036      	movs	r0, #54	; 0x36
    6e4c:	f7f9 fde6 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e50:	2109      	movs	r1, #9
    6e52:	2300      	movs	r3, #0
    6e54:	f007 f90c 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6e58:	b348      	cbz	r0, 6eae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152a>
    6e5a:	4620      	mov	r0, r4
    6e5c:	f007 ff33 	bl	ecc6 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>
    6e60:	4605      	mov	r5, r0
    6e62:	e024      	b.n	6eae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152a>
    6e64:	210a      	movs	r1, #10
    6e66:	2300      	movs	r3, #0
    6e68:	f007 f902 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6e6c:	b1f8      	cbz	r0, 6eae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152a>
    6e6e:	4811      	ldr	r0, [pc, #68]	; (6eb4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1530>)
    6e70:	f007 fdcf 	bl	ea12 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6e74:	b126      	cbz	r6, 6e80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14fc>
    6e76:	6860      	ldr	r0, [r4, #4]
    6e78:	2105      	movs	r1, #5
    6e7a:	30f6      	adds	r0, #246	; 0xf6
    6e7c:	f008 fb83 	bl	f586 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x2a2>
    6e80:	480c      	ldr	r0, [pc, #48]	; (6eb4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1530>)
    6e82:	f007 fe84 	bl	eb8e <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    6e86:	e012      	b.n	6eae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152a>
    6e88:	2a20      	cmp	r2, #32
    6e8a:	d110      	bne.n	6eae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152a>
    6e8c:	4809      	ldr	r0, [pc, #36]	; (6eb4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1530>)
    6e8e:	f007 fdc0 	bl	ea12 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6e92:	b14e      	cbz	r6, 6ea8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1524>
    6e94:	6860      	ldr	r0, [r4, #4]
    6e96:	2108      	movs	r1, #8
    6e98:	30f6      	adds	r0, #246	; 0xf6
    6e9a:	f008 fb74 	bl	f586 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x2a2>
    6e9e:	6860      	ldr	r0, [r4, #4]
    6ea0:	210b      	movs	r1, #11
    6ea2:	30f6      	adds	r0, #246	; 0xf6
    6ea4:	f008 fb6f 	bl	f586 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x2a2>
    6ea8:	201a      	movs	r0, #26
    6eaa:	f7ff fc29 	bl	6700 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd7c>
    6eae:	4628      	mov	r0, r5
    6eb0:	bd70      	pop	{r4, r5, r6, pc}
    6eb2:	0000      	.short	0x0000
    6eb4:	20000114 	.word	0x20000114
    6eb8:	4a19      	ldr	r2, [pc, #100]	; (6f20 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x159c>)
    6eba:	2901      	cmp	r1, #1
    6ebc:	6852      	ldr	r2, [r2, #4]
    6ebe:	d010      	beq.n	6ee2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x155e>
    6ec0:	2100      	movs	r1, #0
    6ec2:	b1c8      	cbz	r0, 6ef8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1574>
    6ec4:	2801      	cmp	r0, #1
    6ec6:	d022      	beq.n	6f0e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x158a>
    6ec8:	2803      	cmp	r0, #3
    6eca:	d109      	bne.n	6ee0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x155c>
    6ecc:	f892 00a5 	ldrb.w	r0, [r2, #165]	; 0xa5
    6ed0:	2814      	cmp	r0, #20
    6ed2:	d005      	beq.n	6ee0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x155c>
    6ed4:	2817      	cmp	r0, #23
    6ed6:	d003      	beq.n	6ee0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x155c>
    6ed8:	2819      	cmp	r0, #25
    6eda:	d001      	beq.n	6ee0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x155c>
    6edc:	f882 1278 	strb.w	r1, [r2, #632]	; 0x278
    6ee0:	4770      	bx	lr
    6ee2:	f892 012e 	ldrb.w	r0, [r2, #302]	; 0x12e
    6ee6:	2801      	cmp	r0, #1
    6ee8:	d0fa      	beq.n	6ee0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x155c>
    6eea:	bf00      	nop
    6eec:	f8d2 0258 	ldr.w	r0, [r2, #600]	; 0x258
    6ef0:	7801      	ldrb	r1, [r0, #0]
    6ef2:	1e49      	subs	r1, r1, #1
    6ef4:	7001      	strb	r1, [r0, #0]
    6ef6:	4770      	bx	lr
    6ef8:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6efc:	f8b2 3266 	ldrh.w	r3, [r2, #614]	; 0x266
    6f00:	1ac0      	subs	r0, r0, r3
    6f02:	b200      	sxth	r0, r0
    6f04:	2800      	cmp	r0, #0
    6f06:	dbf6      	blt.n	6ef6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1572>
    6f08:	f882 1264 	strb.w	r1, [r2, #612]	; 0x264
    6f0c:	4770      	bx	lr
    6f0e:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6f12:	f8b2 125e 	ldrh.w	r1, [r2, #606]	; 0x25e
    6f16:	1a40      	subs	r0, r0, r1
    6f18:	b200      	sxth	r0, r0
    6f1a:	2800      	cmp	r0, #0
    6f1c:	dae6      	bge.n	6eec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1568>
    6f1e:	4770      	bx	lr
    6f20:	20000114 	.word	0x20000114

00006f24 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    6f24:	b510      	push	{r4, lr}
    6f26:	6981      	ldr	r1, [r0, #24]
    6f28:	b119      	cbz	r1, 6f32 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    6f2a:	6882      	ldr	r2, [r0, #8]
    6f2c:	688b      	ldr	r3, [r1, #8]
    6f2e:	429a      	cmp	r2, r3
    6f30:	d203      	bcs.n	6f3a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    6f32:	21c6      	movs	r1, #198	; 0xc6
    6f34:	2037      	movs	r0, #55	; 0x37
    6f36:	f7f9 fd71 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f3a:	6942      	ldr	r2, [r0, #20]
    6f3c:	614a      	str	r2, [r1, #20]
    6f3e:	6903      	ldr	r3, [r0, #16]
    6f40:	610b      	str	r3, [r1, #16]
    6f42:	b10a      	cbz	r2, 6f48 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    6f44:	6111      	str	r1, [r2, #16]
    6f46:	e001      	b.n	6f4c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    6f48:	4a06      	ldr	r2, [pc, #24]	; (6f64 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    6f4a:	6011      	str	r1, [r2, #0]
    6f4c:	690a      	ldr	r2, [r1, #16]
    6f4e:	b132      	cbz	r2, 6f5e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    6f50:	6151      	str	r1, [r2, #20]
    6f52:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    6f56:	4410      	add	r0, r2
    6f58:	688a      	ldr	r2, [r1, #8]
    6f5a:	1a80      	subs	r0, r0, r2
    6f5c:	e000      	b.n	6f60 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    6f5e:	2000      	movs	r0, #0
    6f60:	60c8      	str	r0, [r1, #12]
    6f62:	bd10      	pop	{r4, pc}
    6f64:	20000284 	.word	0x20000284

00006f68 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    6f68:	b510      	push	{r4, lr}
    6f6a:	2200      	movs	r2, #0
    6f6c:	6141      	str	r1, [r0, #20]
    6f6e:	b189      	cbz	r1, 6f94 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    6f70:	690b      	ldr	r3, [r1, #16]
    6f72:	6108      	str	r0, [r1, #16]
    6f74:	6103      	str	r3, [r0, #16]
    6f76:	b103      	cbz	r3, 6f7a <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6f78:	6158      	str	r0, [r3, #20]
    6f7a:	6941      	ldr	r1, [r0, #20]
    6f7c:	60c2      	str	r2, [r0, #12]
    6f7e:	2900      	cmp	r1, #0
    6f80:	d00f      	beq.n	6fa2 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    6f82:	68cb      	ldr	r3, [r1, #12]
    6f84:	b163      	cbz	r3, 6fa0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    6f86:	6884      	ldr	r4, [r0, #8]
    6f88:	42a3      	cmp	r3, r4
    6f8a:	d207      	bcs.n	6f9c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    6f8c:	212b      	movs	r1, #43	; 0x2b
    6f8e:	2037      	movs	r0, #55	; 0x37
    6f90:	f7f9 fd44 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f94:	4903      	ldr	r1, [pc, #12]	; (6fa4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    6f96:	6102      	str	r2, [r0, #16]
    6f98:	6008      	str	r0, [r1, #0]
    6f9a:	e7ee      	b.n	6f7a <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6f9c:	1b1b      	subs	r3, r3, r4
    6f9e:	60c3      	str	r3, [r0, #12]
    6fa0:	60ca      	str	r2, [r1, #12]
    6fa2:	bd10      	pop	{r4, pc}
    6fa4:	20000284 	.word	0x20000284

00006fa8 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI>:
    6fa8:	6941      	ldr	r1, [r0, #20]
    6faa:	b929      	cbnz	r1, 6fb8 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x10>
    6fac:	6901      	ldr	r1, [r0, #16]
    6fae:	b919      	cbnz	r1, 6fb8 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x10>
    6fb0:	4903      	ldr	r1, [pc, #12]	; (6fc0 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x18>)
    6fb2:	6809      	ldr	r1, [r1, #0]
    6fb4:	4281      	cmp	r1, r0
    6fb6:	d101      	bne.n	6fbc <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x14>
    6fb8:	2001      	movs	r0, #1
    6fba:	4770      	bx	lr
    6fbc:	2000      	movs	r0, #0
    6fbe:	4770      	bx	lr
    6fc0:	20000284 	.word	0x20000284

00006fc4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    6fc4:	6941      	ldr	r1, [r0, #20]
    6fc6:	b149      	cbz	r1, 6fdc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    6fc8:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    6fcc:	441a      	add	r2, r3
    6fce:	68cb      	ldr	r3, [r1, #12]
    6fd0:	441a      	add	r2, r3
    6fd2:	60ca      	str	r2, [r1, #12]
    6fd4:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    6fd8:	6111      	str	r1, [r2, #16]
    6fda:	e002      	b.n	6fe2 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    6fdc:	4a07      	ldr	r2, [pc, #28]	; (6ffc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x38>)
    6fde:	6901      	ldr	r1, [r0, #16]
    6fe0:	6011      	str	r1, [r2, #0]
    6fe2:	6902      	ldr	r2, [r0, #16]
    6fe4:	2100      	movs	r1, #0
    6fe6:	b112      	cbz	r2, 6fee <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x2a>
    6fe8:	6943      	ldr	r3, [r0, #20]
    6fea:	6153      	str	r3, [r2, #20]
    6fec:	e002      	b.n	6ff4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x30>
    6fee:	6942      	ldr	r2, [r0, #20]
    6ff0:	b102      	cbz	r2, 6ff4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x30>
    6ff2:	60d1      	str	r1, [r2, #12]
    6ff4:	6101      	str	r1, [r0, #16]
    6ff6:	6141      	str	r1, [r0, #20]
    6ff8:	4770      	bx	lr
    6ffa:	0000      	.short	0x0000
    6ffc:	20000284 	.word	0x20000284

00007000 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    7000:	b510      	push	{r4, lr}
    7002:	4604      	mov	r4, r0
    7004:	490a      	ldr	r1, [pc, #40]	; (7030 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    7006:	2000      	movs	r0, #0
    7008:	4602      	mov	r2, r0
    700a:	6809      	ldr	r1, [r1, #0]
    700c:	1e43      	subs	r3, r0, #1
    700e:	e008      	b.n	7022 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    7010:	68ca      	ldr	r2, [r1, #12]
    7012:	42a2      	cmp	r2, r4
    7014:	d303      	bcc.n	701e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    7016:	429a      	cmp	r2, r3
    7018:	d201      	bcs.n	701e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    701a:	4613      	mov	r3, r2
    701c:	4608      	mov	r0, r1
    701e:	460a      	mov	r2, r1
    7020:	6909      	ldr	r1, [r1, #16]
    7022:	2900      	cmp	r1, #0
    7024:	d1f4      	bne.n	7010 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    7026:	2800      	cmp	r0, #0
    7028:	d100      	bne.n	702c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    702a:	4610      	mov	r0, r2
    702c:	bd10      	pop	{r4, pc}
    702e:	0000      	.short	0x0000
    7030:	20000284 	.word	0x20000284

00007034 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    7034:	4801      	ldr	r0, [pc, #4]	; (703c <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    7036:	6800      	ldr	r0, [r0, #0]
    7038:	4770      	bx	lr
    703a:	0000      	.short	0x0000
    703c:	20000284 	.word	0x20000284

00007040 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    7040:	4804      	ldr	r0, [pc, #16]	; (7054 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    7042:	6801      	ldr	r1, [r0, #0]
    7044:	2000      	movs	r0, #0
    7046:	e001      	b.n	704c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    7048:	4608      	mov	r0, r1
    704a:	6909      	ldr	r1, [r1, #16]
    704c:	2900      	cmp	r1, #0
    704e:	d1fb      	bne.n	7048 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    7050:	4770      	bx	lr
    7052:	0000      	.short	0x0000
    7054:	20000284 	.word	0x20000284

00007058 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    7058:	4801      	ldr	r0, [pc, #4]	; (7060 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    705a:	2100      	movs	r1, #0
    705c:	6001      	str	r1, [r0, #0]
    705e:	4770      	bx	lr
    7060:	20000284 	.word	0x20000284

00007064 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    7064:	4903      	ldr	r1, [pc, #12]	; (7074 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    7066:	2000      	movs	r0, #0
    7068:	6809      	ldr	r1, [r1, #0]
    706a:	2900      	cmp	r1, #0
    706c:	d000      	beq.n	7070 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    706e:	200c      	movs	r0, #12
    7070:	4770      	bx	lr
    7072:	0000      	.short	0x0000
    7074:	20000284 	.word	0x20000284

00007078 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    7078:	b570      	push	{r4, r5, r6, lr}
    707a:	6844      	ldr	r4, [r0, #4]
    707c:	220d      	movs	r2, #13
    707e:	f504 759c 	add.w	r5, r4, #312	; 0x138
    7082:	2100      	movs	r1, #0
    7084:	f104 0078 	add.w	r0, r4, #120	; 0x78
    7088:	f00a f833 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    708c:	f44f 70a7 	mov.w	r0, #334	; 0x14e
    7090:	2100      	movs	r1, #0
    7092:	f8a4 114c 	strh.w	r1, [r4, #332]	; 0x14c
    7096:	5501      	strb	r1, [r0, r4]
    7098:	f8a5 1017 	strh.w	r1, [r5, #23]
    709c:	7669      	strb	r1, [r5, #25]
    709e:	4608      	mov	r0, r1
    70a0:	f05f 017f 	movs.w	r1, #127	; 0x7f
    70a4:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    70a8:	1c40      	adds	r0, r0, #1
    70aa:	b2c0      	uxtb	r0, r0
    70ac:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    70b0:	2802      	cmp	r0, #2
    70b2:	d3f7      	bcc.n	70a4 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    70b4:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    70b8:	4620      	mov	r0, r4
    70ba:	f008 fc8f 	bl	f9dc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    70be:	2000      	movs	r0, #0
    70c0:	21ff      	movs	r1, #255	; 0xff
    70c2:	1822      	adds	r2, r4, r0
    70c4:	1c40      	adds	r0, r0, #1
    70c6:	b2c0      	uxtb	r0, r0
    70c8:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
    70cc:	2802      	cmp	r0, #2
    70ce:	d3f8      	bcc.n	70c2 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    70d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000070d4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    70d4:	b500      	push	{lr}
    70d6:	7941      	ldrb	r1, [r0, #5]
    70d8:	b095      	sub	sp, #84	; 0x54
    70da:	b141      	cbz	r1, 70ee <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    70dc:	2901      	cmp	r1, #1
    70de:	d006      	beq.n	70ee <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    70e0:	2902      	cmp	r1, #2
    70e2:	d004      	beq.n	70ee <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    70e4:	2903      	cmp	r1, #3
    70e6:	d002      	beq.n	70ee <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    70e8:	2012      	movs	r0, #18
    70ea:	b015      	add	sp, #84	; 0x54
    70ec:	bd00      	pop	{pc}
    70ee:	7901      	ldrb	r1, [r0, #4]
    70f0:	f88d 1000 	strb.w	r1, [sp]
    70f4:	7b01      	ldrb	r1, [r0, #12]
    70f6:	f88d 1001 	strb.w	r1, [sp, #1]
    70fa:	7942      	ldrb	r2, [r0, #5]
    70fc:	2100      	movs	r1, #0
    70fe:	2301      	movs	r3, #1
    7100:	b3f2      	cbz	r2, 7180 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xac>
    7102:	2a02      	cmp	r2, #2
    7104:	d03d      	beq.n	7182 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xae>
    7106:	f88d 3002 	strb.w	r3, [sp, #2]
    710a:	bf00      	nop
    710c:	f8d0 2006 	ldr.w	r2, [r0, #6]
    7110:	f8cd 2003 	str.w	r2, [sp, #3]
    7114:	8942      	ldrh	r2, [r0, #10]
    7116:	f8ad 2007 	strh.w	r2, [sp, #7]
    711a:	f88d 3009 	strb.w	r3, [sp, #9]
    711e:	f830 2b01 	ldrh.w	r2, [r0], #1
    7122:	f240 2371 	movw	r3, #625	; 0x271
    7126:	435a      	muls	r2, r3
    7128:	9203      	str	r2, [sp, #12]
    712a:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    712e:	435a      	muls	r2, r3
    7130:	9206      	str	r2, [sp, #24]
    7132:	8982      	ldrh	r2, [r0, #12]
    7134:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    7138:	89c2      	ldrh	r2, [r0, #14]
    713a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    713e:	8a02      	ldrh	r2, [r0, #16]
    7140:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    7144:	8a42      	ldrh	r2, [r0, #18]
    7146:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    714a:	8a82      	ldrh	r2, [r0, #20]
    714c:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    7150:	8ac0      	ldrh	r0, [r0, #22]
    7152:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    7156:	2007      	movs	r0, #7
    7158:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    715c:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    7160:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    7164:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    7168:	9806      	ldr	r0, [sp, #24]
    716a:	f000 fa0d 	bl	7588 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x90>
    716e:	b158      	cbz	r0, 7188 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb4>
    7170:	9803      	ldr	r0, [sp, #12]
    7172:	f000 f9fd 	bl	7570 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x78>
    7176:	b138      	cbz	r0, 7188 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb4>
    7178:	4668      	mov	r0, sp
    717a:	f008 ff04 	bl	ff86 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    717e:	e7b4      	b.n	70ea <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    7180:	e7ff      	b.n	7182 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xae>
    7182:	f88d 1002 	strb.w	r1, [sp, #2]
    7186:	e7c1      	b.n	710c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    7188:	2030      	movs	r0, #48	; 0x30
    718a:	e7ae      	b.n	70ea <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

0000718c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    718c:	4903      	ldr	r1, [pc, #12]	; (719c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    718e:	884a      	ldrh	r2, [r1, #2]
    7190:	8002      	strh	r2, [r0, #0]
    7192:	7809      	ldrb	r1, [r1, #0]
    7194:	7081      	strb	r1, [r0, #2]
    7196:	2000      	movs	r0, #0
    7198:	4770      	bx	lr
    719a:	0000      	.short	0x0000
    719c:	20001354 	.word	0x20001354

000071a0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    71a0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    71a2:	460c      	mov	r4, r1
    71a4:	4605      	mov	r5, r0
    71a6:	8800      	ldrh	r0, [r0, #0]
    71a8:	4669      	mov	r1, sp
    71aa:	f006 ff4b 	bl	e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    71ae:	2200      	movs	r2, #0
    71b0:	b128      	cbz	r0, 71be <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    71b2:	f8c4 2002 	str.w	r2, [r4, #2]
    71b6:	71a2      	strb	r2, [r4, #6]
    71b8:	8022      	strh	r2, [r4, #0]
    71ba:	2002      	movs	r0, #2
    71bc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    71be:	9901      	ldr	r1, [sp, #4]
    71c0:	f111 0188 	adds.w	r1, r1, #136	; 0x88
    71c4:	f881 2076 	strb.w	r2, [r1, #118]	; 0x76
    71c8:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    71cc:	f8c4 0002 	str.w	r0, [r4, #2]
    71d0:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    71d4:	71a0      	strb	r0, [r4, #6]
    71d6:	8828      	ldrh	r0, [r5, #0]
    71d8:	8020      	strh	r0, [r4, #0]
    71da:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
    71de:	f88d 0008 	strb.w	r0, [sp, #8]
    71e2:	9802      	ldr	r0, [sp, #8]
    71e4:	9002      	str	r0, [sp, #8]
    71e6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    71ea:	2800      	cmp	r0, #0
    71ec:	d1ea      	bne.n	71c4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    71ee:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000071f0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    71f0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    71f2:	460d      	mov	r5, r1
    71f4:	4606      	mov	r6, r0
    71f6:	8800      	ldrh	r0, [r0, #0]
    71f8:	4669      	mov	r1, sp
    71fa:	f006 ff23 	bl	e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    71fe:	2800      	cmp	r0, #0
    7200:	d11a      	bne.n	7238 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    7202:	f8dd 4004 	ldr.w	r4, [sp, #4]
    7206:	2700      	movs	r7, #0
    7208:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    720c:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    7210:	f009 f8bf 	bl	10392 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>
    7214:	70a8      	strb	r0, [r5, #2]
    7216:	7860      	ldrb	r0, [r4, #1]
    7218:	f009 f8bb 	bl	10392 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>
    721c:	70e8      	strb	r0, [r5, #3]
    721e:	78a0      	ldrb	r0, [r4, #2]
    7220:	f88d 0008 	strb.w	r0, [sp, #8]
    7224:	9802      	ldr	r0, [sp, #8]
    7226:	9002      	str	r0, [sp, #8]
    7228:	f89d 0008 	ldrb.w	r0, [sp, #8]
    722c:	3c6a      	subs	r4, #106	; 0x6a
    722e:	2800      	cmp	r0, #0
    7230:	d1ea      	bne.n	7208 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    7232:	8830      	ldrh	r0, [r6, #0]
    7234:	8028      	strh	r0, [r5, #0]
    7236:	2000      	movs	r0, #0
    7238:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000723c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    723c:	4903      	ldr	r1, [pc, #12]	; (724c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    723e:	888a      	ldrh	r2, [r1, #4]
    7240:	8002      	strh	r2, [r0, #0]
    7242:	88c9      	ldrh	r1, [r1, #6]
    7244:	8041      	strh	r1, [r0, #2]
    7246:	2000      	movs	r0, #0
    7248:	4770      	bx	lr
    724a:	0000      	.short	0x0000
    724c:	20000296 	.word	0x20000296

00007250 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    7250:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    7252:	2400      	movs	r4, #0
    7254:	a902      	add	r1, sp, #8
    7256:	f88d 4004 	strb.w	r4, [sp, #4]
    725a:	f88d 4008 	strb.w	r4, [sp, #8]
    725e:	9100      	str	r1, [sp, #0]
    7260:	7882      	ldrb	r2, [r0, #2]
    7262:	7841      	ldrb	r1, [r0, #1]
    7264:	7800      	ldrb	r0, [r0, #0]
    7266:	ab01      	add	r3, sp, #4
    7268:	f009 fa99 	bl	1079e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x458>
    726c:	2800      	cmp	r0, #0
    726e:	d112      	bne.n	7296 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    7270:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7274:	f009 f8a4 	bl	103c0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x7a>
    7278:	b170      	cbz	r0, 7298 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    727a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    727e:	f009 f89f 	bl	103c0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x7a>
    7282:	b148      	cbz	r0, 7298 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    7284:	4805      	ldr	r0, [pc, #20]	; (729c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    7286:	f89d 1004 	ldrb.w	r1, [sp, #4]
    728a:	7381      	strb	r1, [r0, #14]
    728c:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7290:	73c1      	strb	r1, [r0, #15]
    7292:	8204      	strh	r4, [r0, #16]
    7294:	2000      	movs	r0, #0
    7296:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7298:	2011      	movs	r0, #17
    729a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    729c:	20001354 	.word	0x20001354

000072a0 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    72a0:	b51c      	push	{r2, r3, r4, lr}
    72a2:	4604      	mov	r4, r0
    72a4:	f006 feb8 	bl	e018 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    72a8:	b148      	cbz	r0, 72be <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x1e>
    72aa:	4620      	mov	r0, r4
    72ac:	f7fb fa74 	bl	2798 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    72b0:	4909      	ldr	r1, [pc, #36]	; (72d8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x38>)
    72b2:	24ff      	movs	r4, #255	; 0xff
    72b4:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    72b8:	e9cd 0100 	strd	r0, r1, [sp]
    72bc:	e004      	b.n	72c8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    72be:	2012      	movs	r0, #18
    72c0:	bd1c      	pop	{r2, r3, r4, pc}
    72c2:	9800      	ldr	r0, [sp, #0]
    72c4:	f880 425c 	strb.w	r4, [r0, #604]	; 0x25c
    72c8:	4668      	mov	r0, sp
    72ca:	f7f9 fecf 	bl	106c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    72ce:	2800      	cmp	r0, #0
    72d0:	d0f7      	beq.n	72c2 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x22>
    72d2:	2000      	movs	r0, #0
    72d4:	bd1c      	pop	{r2, r3, r4, pc}
    72d6:	0000      	.short	0x0000
    72d8:	000078bc 	.word	0x000078bc

000072dc <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    72dc:	7801      	ldrb	r1, [r0, #0]
    72de:	b171      	cbz	r1, 72fe <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    72e0:	7841      	ldrb	r1, [r0, #1]
    72e2:	b161      	cbz	r1, 72fe <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    72e4:	8841      	ldrh	r1, [r0, #2]
    72e6:	291b      	cmp	r1, #27
    72e8:	d309      	bcc.n	72fe <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    72ea:	8881      	ldrh	r1, [r0, #4]
    72ec:	291b      	cmp	r1, #27
    72ee:	d306      	bcc.n	72fe <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    72f0:	4904      	ldr	r1, [pc, #16]	; (7304 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    72f2:	6802      	ldr	r2, [r0, #0]
    72f4:	600a      	str	r2, [r1, #0]
    72f6:	8880      	ldrh	r0, [r0, #4]
    72f8:	8088      	strh	r0, [r1, #4]
    72fa:	2000      	movs	r0, #0
    72fc:	4770      	bx	lr
    72fe:	2012      	movs	r0, #18
    7300:	4770      	bx	lr
    7302:	0000      	.short	0x0000
    7304:	20001354 	.word	0x20001354

00007308 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    7308:	6800      	ldr	r0, [r0, #0]
    730a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    730e:	4288      	cmp	r0, r1
    7310:	d303      	bcc.n	731a <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    7312:	4903      	ldr	r1, [pc, #12]	; (7320 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    7314:	6088      	str	r0, [r1, #8]
    7316:	2000      	movs	r0, #0
    7318:	4770      	bx	lr
    731a:	2012      	movs	r0, #18
    731c:	4770      	bx	lr
    731e:	0000      	.short	0x0000
    7320:	20001354 	.word	0x20001354

00007324 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    7324:	b510      	push	{r4, lr}
    7326:	b086      	sub	sp, #24
    7328:	4604      	mov	r4, r0
    732a:	f009 f924 	bl	10576 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x230>
    732e:	2800      	cmp	r0, #0
    7330:	d103      	bne.n	733a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    7332:	f009 fa21 	bl	10778 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
    7336:	b110      	cbz	r0, 733e <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    7338:	200c      	movs	r0, #12
    733a:	b006      	add	sp, #24
    733c:	bd10      	pop	{r4, pc}
    733e:	2102      	movs	r1, #2
    7340:	f104 0010 	add.w	r0, r4, #16
    7344:	f000 f92c 	bl	75a0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xa8>
    7348:	78a0      	ldrb	r0, [r4, #2]
    734a:	f88d 0008 	strb.w	r0, [sp, #8]
    734e:	78a0      	ldrb	r0, [r4, #2]
    7350:	f88d 0000 	strb.w	r0, [sp]
    7354:	7860      	ldrb	r0, [r4, #1]
    7356:	f88d 0003 	strb.w	r0, [sp, #3]
    735a:	7820      	ldrb	r0, [r4, #0]
    735c:	f88d 0002 	strb.w	r0, [sp, #2]
    7360:	7e20      	ldrb	r0, [r4, #24]
    7362:	f88d 0004 	strb.w	r0, [sp, #4]
    7366:	78a0      	ldrb	r0, [r4, #2]
    7368:	07c0      	lsls	r0, r0, #31
    736a:	d00b      	beq.n	7384 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    736c:	78e0      	ldrb	r0, [r4, #3]
    736e:	2801      	cmp	r0, #1
    7370:	d011      	beq.n	7396 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    7372:	b190      	cbz	r0, 739a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    7374:	f05f 0000 	movs.w	r0, #0
    7378:	f88d 0001 	strb.w	r0, [sp, #1]
    737c:	68a0      	ldr	r0, [r4, #8]
    737e:	9003      	str	r0, [sp, #12]
    7380:	6920      	ldr	r0, [r4, #16]
    7382:	9004      	str	r0, [sp, #16]
    7384:	a802      	add	r0, sp, #8
    7386:	f7fd fc63 	bl	4c50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    738a:	2800      	cmp	r0, #0
    738c:	d1d5      	bne.n	733a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    738e:	4668      	mov	r0, sp
    7390:	f7fc fa44 	bl	381c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    7394:	e7d1      	b.n	733a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    7396:	2002      	movs	r0, #2
    7398:	e7ee      	b.n	7378 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    739a:	2001      	movs	r0, #1
    739c:	e7ec      	b.n	7378 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

000073a0 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>:
    73a0:	4801      	ldr	r0, [pc, #4]	; (73a8 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA+0x8>)
    73a2:	f990 0000 	ldrsb.w	r0, [r0]
    73a6:	4770      	bx	lr
    73a8:	20000288 	.word	0x20000288

000073ac <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    73ac:	4a03      	ldr	r2, [pc, #12]	; (73bc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    73ae:	e9d2 1200 	ldrd	r1, r2, [r2]
    73b2:	6001      	str	r1, [r0, #0]
    73b4:	6042      	str	r2, [r0, #4]
    73b6:	2000      	movs	r0, #0
    73b8:	4770      	bx	lr
    73ba:	0000      	.short	0x0000
    73bc:	000078bc 	.word	0x000078bc

000073c0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    73c0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    73c2:	8800      	ldrh	r0, [r0, #0]
    73c4:	4669      	mov	r1, sp
    73c6:	f006 fe3d 	bl	e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    73ca:	b968      	cbnz	r0, 73e8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    73cc:	2401      	movs	r4, #1
    73ce:	9801      	ldr	r0, [sp, #4]
    73d0:	f009 f9b5 	bl	1073e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f8>
    73d4:	b140      	cbz	r0, 73e8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    73d6:	9801      	ldr	r0, [sp, #4]
    73d8:	4601      	mov	r1, r0
    73da:	f890 214a 	ldrb.w	r2, [r0, #330]	; 0x14a
    73de:	3088      	adds	r0, #136	; 0x88
    73e0:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    73e4:	b95a      	cbnz	r2, 73fe <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    73e6:	e001      	b.n	73ec <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    73e8:	2002      	movs	r0, #2
    73ea:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    73ec:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
    73f0:	f88d 2008 	strb.w	r2, [sp, #8]
    73f4:	9a02      	ldr	r2, [sp, #8]
    73f6:	9202      	str	r2, [sp, #8]
    73f8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    73fc:	b10a      	cbz	r2, 7402 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    73fe:	203a      	movs	r0, #58	; 0x3a
    7400:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7402:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
    7406:	0792      	lsls	r2, r2, #30
    7408:	d006      	beq.n	7418 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    740a:	2202      	movs	r2, #2
    740c:	4903      	ldr	r1, [pc, #12]	; (741c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>)
    740e:	3060      	adds	r0, #96	; 0x60
    7410:	f007 f973 	bl	e6fa <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    7414:	2000      	movs	r0, #0
    7416:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7418:	700c      	strb	r4, [r1, #0]
    741a:	e7fb      	b.n	7414 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    741c:	0000ecf7 	.word	0x0000ecf7

00007420 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ>:
    7420:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    7424:	4613      	mov	r3, r2
    7426:	4a33      	ldr	r2, [pc, #204]	; (74f4 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xd4>)
    7428:	460f      	mov	r7, r1
    742a:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    742e:	8814      	ldrh	r4, [r2, #0]
    7430:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    7434:	428c      	cmp	r4, r1
    7436:	d200      	bcs.n	743a <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x1a>
    7438:	4621      	mov	r1, r4
    743a:	4688      	mov	r8, r1
    743c:	8891      	ldrh	r1, [r2, #4]
    743e:	42b1      	cmp	r1, r6
    7440:	d200      	bcs.n	7444 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x24>
    7442:	460e      	mov	r6, r1
    7444:	8851      	ldrh	r1, [r2, #2]
    7446:	f640 0448 	movw	r4, #2120	; 0x848
    744a:	42a1      	cmp	r1, r4
    744c:	d300      	bcc.n	7450 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x30>
    744e:	4621      	mov	r1, r4
    7450:	88d5      	ldrh	r5, [r2, #6]
    7452:	42a5      	cmp	r5, r4
    7454:	d300      	bcc.n	7458 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x38>
    7456:	4625      	mov	r5, r4
    7458:	42a1      	cmp	r1, r4
    745a:	d200      	bcs.n	745e <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x3e>
    745c:	460c      	mov	r4, r1
    745e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    7462:	2e1b      	cmp	r6, #27
    7464:	d001      	beq.n	746a <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x4a>
    7466:	4295      	cmp	r5, r2
    7468:	d104      	bne.n	7474 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x54>
    746a:	f1b8 0f1b 	cmp.w	r8, #27
    746e:	d03e      	beq.n	74ee <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    7470:	4294      	cmp	r4, r2
    7472:	d03c      	beq.n	74ee <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    7474:	466a      	mov	r2, sp
    7476:	4619      	mov	r1, r3
    7478:	f009 f908 	bl	1068c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x346>
    747c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    7480:	4641      	mov	r1, r8
    7482:	4540      	cmp	r0, r8
    7484:	d900      	bls.n	7488 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x68>
    7486:	4608      	mov	r0, r1
    7488:	80f8      	strh	r0, [r7, #6]
    748a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    748e:	42a1      	cmp	r1, r4
    7490:	d800      	bhi.n	7494 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x74>
    7492:	460c      	mov	r4, r1
    7494:	813c      	strh	r4, [r7, #8]
    7496:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    749a:	42b1      	cmp	r1, r6
    749c:	d800      	bhi.n	74a0 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x80>
    749e:	460e      	mov	r6, r1
    74a0:	807e      	strh	r6, [r7, #2]
    74a2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    74a6:	42a9      	cmp	r1, r5
    74a8:	d800      	bhi.n	74ac <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x8c>
    74aa:	460d      	mov	r5, r1
    74ac:	80bd      	strh	r5, [r7, #4]
    74ae:	21ff      	movs	r1, #255	; 0xff
    74b0:	7039      	strb	r1, [r7, #0]
    74b2:	381b      	subs	r0, #27
    74b4:	28e0      	cmp	r0, #224	; 0xe0
    74b6:	d902      	bls.n	74be <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x9e>
    74b8:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
    74bc:	e014      	b.n	74e8 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    74be:	3e1b      	subs	r6, #27
    74c0:	2ee0      	cmp	r6, #224	; 0xe0
    74c2:	d902      	bls.n	74ca <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xaa>
    74c4:	f240 51b2 	movw	r1, #1458	; 0x5b2
    74c8:	e00e      	b.n	74e8 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    74ca:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    74ce:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    74d2:	4284      	cmp	r4, r0
    74d4:	d902      	bls.n	74dc <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xbc>
    74d6:	f240 51b4 	movw	r1, #1460	; 0x5b4
    74da:	e005      	b.n	74e8 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    74dc:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    74e0:	4285      	cmp	r5, r0
    74e2:	d904      	bls.n	74ee <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    74e4:	f240 51b6 	movw	r1, #1462	; 0x5b6
    74e8:	2039      	movs	r0, #57	; 0x39
    74ea:	f7f9 fa97 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74ee:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    74f2:	0000      	.short	0x0000
    74f4:	20000296 	.word	0x20000296

000074f8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>:
    74f8:	b510      	push	{r4, lr}
    74fa:	2005      	movs	r0, #5
    74fc:	f000 fa52 	bl	79a4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    7500:	f7fe f8f4 	bl	56ec <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    7504:	4902      	ldr	r1, [pc, #8]	; (7510 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x18>)
    7506:	4801      	ldr	r0, [pc, #4]	; (750c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14>)
    7508:	6048      	str	r0, [r1, #4]
    750a:	bd10      	pop	{r4, pc}
    750c:	00007421 	.word	0x00007421
    7510:	20000288 	.word	0x20000288
    7514:	b510      	push	{r4, lr}
    7516:	480e      	ldr	r0, [pc, #56]	; (7550 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x58>)
    7518:	2100      	movs	r1, #0
    751a:	4b0e      	ldr	r3, [pc, #56]	; (7554 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x5c>)
    751c:	74c1      	strb	r1, [r0, #19]
    751e:	8281      	strh	r1, [r0, #20]
    7520:	221b      	movs	r2, #27
    7522:	801a      	strh	r2, [r3, #0]
    7524:	f44f 74a4 	mov.w	r4, #328	; 0x148
    7528:	805c      	strh	r4, [r3, #2]
    752a:	809a      	strh	r2, [r3, #4]
    752c:	80dc      	strh	r4, [r3, #6]
    752e:	7381      	strb	r1, [r0, #14]
    7530:	73c1      	strb	r1, [r0, #15]
    7532:	2303      	movs	r3, #3
    7534:	7003      	strb	r3, [r0, #0]
    7536:	2302      	movs	r3, #2
    7538:	7043      	strb	r3, [r0, #1]
    753a:	8042      	strh	r2, [r0, #2]
    753c:	8082      	strh	r2, [r0, #4]
    753e:	f640 62a6 	movw	r2, #3750	; 0xea6
    7542:	6082      	str	r2, [r0, #8]
    7544:	7481      	strb	r1, [r0, #18]
    7546:	7301      	strb	r1, [r0, #12]
    7548:	4802      	ldr	r0, [pc, #8]	; (7554 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x5c>)
    754a:	1f80      	subs	r0, r0, #6
    754c:	7001      	strb	r1, [r0, #0]
    754e:	bd10      	pop	{r4, pc}
    7550:	20001354 	.word	0x20001354
    7554:	20000296 	.word	0x20000296
    7558:	4904      	ldr	r1, [pc, #16]	; (756c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x74>)
    755a:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    755e:	4288      	cmp	r0, r1
    7560:	d301      	bcc.n	7566 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x6e>
    7562:	2000      	movs	r0, #0
    7564:	4770      	bx	lr
    7566:	2001      	movs	r0, #1
    7568:	4770      	bx	lr
    756a:	0000      	.short	0x0000
    756c:	0270f3cc 	.word	0x0270f3cc
    7570:	4904      	ldr	r1, [pc, #16]	; (7584 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x8c>)
    7572:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    7576:	4288      	cmp	r0, r1
    7578:	d301      	bcc.n	757e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x86>
    757a:	2000      	movs	r0, #0
    757c:	4770      	bx	lr
    757e:	2001      	movs	r0, #1
    7580:	4770      	bx	lr
    7582:	0000      	.short	0x0000
    7584:	009c363d 	.word	0x009c363d
    7588:	4904      	ldr	r1, [pc, #16]	; (759c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xa4>)
    758a:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    758e:	4288      	cmp	r0, r1
    7590:	d301      	bcc.n	7596 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x9e>
    7592:	2000      	movs	r0, #0
    7594:	4770      	bx	lr
    7596:	2001      	movs	r0, #1
    7598:	4770      	bx	lr
    759a:	0000      	.short	0x0000
    759c:	009c363d 	.word	0x009c363d
    75a0:	b530      	push	{r4, r5, lr}
    75a2:	2200      	movs	r2, #0
    75a4:	4d07      	ldr	r5, [pc, #28]	; (75c4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xcc>)
    75a6:	e009      	b.n	75bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xc4>
    75a8:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    75ac:	462b      	mov	r3, r5
    75ae:	429c      	cmp	r4, r3
    75b0:	d800      	bhi.n	75b4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xbc>
    75b2:	4623      	mov	r3, r4
    75b4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    75b8:	1c52      	adds	r2, r2, #1
    75ba:	b2d2      	uxtb	r2, r2
    75bc:	428a      	cmp	r2, r1
    75be:	d3f3      	bcc.n	75a8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xb0>
    75c0:	bd30      	pop	{r4, r5, pc}
    75c2:	0000      	.short	0x0000
    75c4:	00f42400 	.word	0x00f42400
    75c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    75cc:	4604      	mov	r4, r0
    75ce:	a05c      	add	r0, pc, #368	; (adr r0, 7740 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x248>)
    75d0:	4688      	mov	r8, r1
    75d2:	e9d0 7600 	ldrd	r7, r6, [r0]
    75d6:	b087      	sub	sp, #28
    75d8:	4699      	mov	r9, r3
    75da:	4615      	mov	r5, r2
    75dc:	2100      	movs	r1, #0
    75de:	4620      	mov	r0, r4
    75e0:	f7fb f818 	bl	2614 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    75e4:	f8a4 8000 	strh.w	r8, [r4]
    75e8:	4857      	ldr	r0, [pc, #348]	; (7748 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x250>)
    75ea:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    75ee:	f000 f9e5 	bl	79bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    75f2:	0940      	lsrs	r0, r0, #5
    75f4:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    75f8:	07c1      	lsls	r1, r0, #31
    75fa:	f8df 8150 	ldr.w	r8, [pc, #336]	; 774c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x254>
    75fe:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7602:	d006      	beq.n	7612 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x11a>
    7604:	f8b8 2002 	ldrh.w	r2, [r8, #2]
    7608:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    760c:	84c2      	strh	r2, [r0, #38]	; 0x26
    760e:	8501      	strh	r1, [r0, #40]	; 0x28
    7610:	e002      	b.n	7618 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x120>
    7612:	211b      	movs	r1, #27
    7614:	84c1      	strh	r1, [r0, #38]	; 0x26
    7616:	8501      	strh	r1, [r0, #40]	; 0x28
    7618:	f000 f9d0 	bl	79bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    761c:	0788      	lsls	r0, r1, #30
    761e:	d506      	bpl.n	762e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x136>
    7620:	2000      	movs	r0, #0
    7622:	f88d 0000 	strb.w	r0, [sp]
    7626:	4668      	mov	r0, sp
    7628:	9401      	str	r4, [sp, #4]
    762a:	f7ff fd25 	bl	7078 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    762e:	f898 1001 	ldrb.w	r1, [r8, #1]
    7632:	9100      	str	r1, [sp, #0]
    7634:	f898 3000 	ldrb.w	r3, [r8]
    7638:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    763c:	f8b8 1002 	ldrh.w	r1, [r8, #2]
    7640:	8820      	ldrh	r0, [r4, #0]
    7642:	f7f9 fd8f 	bl	1164 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    7646:	b120      	cbz	r0, 7652 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x15a>
    7648:	f241 0119 	movw	r1, #4121	; 0x1019
    764c:	2039      	movs	r0, #57	; 0x39
    764e:	f7f9 f9e5 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7652:	f007 f959 	bl	e908 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    7656:	6160      	str	r0, [r4, #20]
    7658:	f1b9 0f00 	cmp.w	r9, #0
    765c:	d004      	beq.n	7668 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x170>
    765e:	f7fb fc8f 	bl	2f80 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    7662:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7666:	61e0      	str	r0, [r4, #28]
    7668:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    766c:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    7670:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
    7672:	f006 fcf3 	bl	e05c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7676:	6120      	str	r0, [r4, #16]
    7678:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    767c:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    7680:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    7682:	8320      	strh	r0, [r4, #24]
    7684:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    7688:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    768c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    768e:	8360      	strh	r0, [r4, #26]
    7690:	7a68      	ldrb	r0, [r5, #9]
    7692:	f008 fe74 	bl	1037e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
    7696:	f8d8 1008 	ldr.w	r1, [r8, #8]
    769a:	4645      	mov	r5, r8
    769c:	4620      	mov	r0, r4
    769e:	62e1      	str	r1, [r4, #44]	; 0x2c
    76a0:	f007 fe1d 	bl	f2de <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
    76a4:	f8c4 70ae 	str.w	r7, [r4, #174]	; 0xae
    76a8:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
    76ac:	20ff      	movs	r0, #255	; 0xff
    76ae:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    76b2:	4825      	ldr	r0, [pc, #148]	; (7748 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x250>)
    76b4:	3808      	subs	r0, #8
    76b6:	6843      	ldr	r3, [r0, #4]
    76b8:	b123      	cbz	r3, 76c4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1cc>
    76ba:	2201      	movs	r2, #1
    76bc:	f504 719d 	add.w	r1, r4, #314	; 0x13a
    76c0:	4620      	mov	r0, r4
    76c2:	4798      	blx	r3
    76c4:	8821      	ldrh	r1, [r4, #0]
    76c6:	f8ad 1004 	strh.w	r1, [sp, #4]
    76ca:	7ba9      	ldrb	r1, [r5, #14]
    76cc:	f88d 1006 	strb.w	r1, [sp, #6]
    76d0:	7be9      	ldrb	r1, [r5, #15]
    76d2:	f88d 1007 	strb.w	r1, [sp, #7]
    76d6:	8a29      	ldrh	r1, [r5, #16]
    76d8:	f8ad 1008 	strh.w	r1, [sp, #8]
    76dc:	a904      	add	r1, sp, #16
    76de:	9100      	str	r1, [sp, #0]
    76e0:	2000      	movs	r0, #0
    76e2:	ab03      	add	r3, sp, #12
    76e4:	aa01      	add	r2, sp, #4
    76e6:	4621      	mov	r1, r4
    76e8:	f009 f806 	bl	106f8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3b2>
    76ec:	0005      	movs	r5, r0
    76ee:	d10f      	bne.n	7710 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x218>
    76f0:	f89d 000c 	ldrb.w	r0, [sp, #12]
    76f4:	f88d 0014 	strb.w	r0, [sp, #20]
    76f8:	f89d 0010 	ldrb.w	r0, [sp, #16]
    76fc:	f88d 0015 	strb.w	r0, [sp, #21]
    7700:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    7704:	f8ad 0016 	strh.w	r0, [sp, #22]
    7708:	a905      	add	r1, sp, #20
    770a:	4620      	mov	r0, r4
    770c:	f006 fd61 	bl	e1d2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    7710:	f7fb fc36 	bl	2f80 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    7714:	210c      	movs	r1, #12
    7716:	fbb0 f2f1 	udiv	r2, r0, r1
    771a:	fb01 0012 	mls	r0, r1, r2, r0
    771e:	1d40      	adds	r0, r0, #5
    7720:	b2c0      	uxtb	r0, r0
    7722:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    7726:	2809      	cmp	r0, #9
    7728:	d202      	bcs.n	7730 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x238>
    772a:	3008      	adds	r0, #8
    772c:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    7730:	2101      	movs	r1, #1
    7732:	4620      	mov	r0, r4
    7734:	f7fa ff6e 	bl	2614 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    7738:	b007      	add	sp, #28
    773a:	4628      	mov	r0, r5
    773c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7740:	ffffffff 	.word	0xffffffff
    7744:	0000001f 	.word	0x0000001f
    7748:	20000290 	.word	0x20000290
    774c:	20001354 	.word	0x20001354
    7750:	4a09      	ldr	r2, [pc, #36]	; (7778 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x280>)
    7752:	4290      	cmp	r0, r2
    7754:	d80b      	bhi.n	776e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x276>
    7756:	2901      	cmp	r1, #1
    7758:	d002      	beq.n	7760 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x268>
    775a:	2904      	cmp	r1, #4
    775c:	d003      	beq.n	7766 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x26e>
    775e:	e008      	b.n	7772 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x27a>
    7760:	f240 7153 	movw	r1, #1875	; 0x753
    7764:	e001      	b.n	776a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x272>
    7766:	f640 11c4 	movw	r1, #2500	; 0x9c4
    776a:	4288      	cmp	r0, r1
    776c:	d201      	bcs.n	7772 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x27a>
    776e:	2000      	movs	r0, #0
    7770:	4770      	bx	lr
    7772:	2001      	movs	r0, #1
    7774:	4770      	bx	lr
    7776:	0000      	.short	0x0000
    7778:	0270fd8f 	.word	0x0270fd8f
    777c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7780:	b088      	sub	sp, #32
    7782:	4604      	mov	r4, r0
    7784:	8800      	ldrh	r0, [r0, #0]
    7786:	a906      	add	r1, sp, #24
    7788:	f006 fc5c 	bl	e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    778c:	2800      	cmp	r0, #0
    778e:	d147      	bne.n	7820 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>
    7790:	9807      	ldr	r0, [sp, #28]
    7792:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    7796:	f88d 1008 	strb.w	r1, [sp, #8]
    779a:	9902      	ldr	r1, [sp, #8]
    779c:	9102      	str	r1, [sp, #8]
    779e:	f89d 1008 	ldrb.w	r1, [sp, #8]
    77a2:	3088      	adds	r0, #136	; 0x88
    77a4:	b101      	cbz	r1, 77a8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2b0>
    77a6:	2101      	movs	r1, #1
    77a8:	f88d 100c 	strb.w	r1, [sp, #12]
    77ac:	7f81      	ldrb	r1, [r0, #30]
    77ae:	f04f 0801 	mov.w	r8, #1
    77b2:	291e      	cmp	r1, #30
    77b4:	d102      	bne.n	77bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2c4>
    77b6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    77ba:	b149      	cbz	r1, 77d0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2d8>
    77bc:	f05f 0100 	movs.w	r1, #0
    77c0:	f88d 1004 	strb.w	r1, [sp, #4]
    77c4:	2105      	movs	r1, #5
    77c6:	306e      	adds	r0, #110	; 0x6e
    77c8:	f008 f959 	bl	fa7e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    77cc:	b110      	cbz	r0, 77d4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2dc>
    77ce:	e004      	b.n	77da <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2e2>
    77d0:	2101      	movs	r1, #1
    77d2:	e7f5      	b.n	77c0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2c8>
    77d4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    77d8:	b308      	cbz	r0, 781e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x326>
    77da:	8921      	ldrh	r1, [r4, #8]
    77dc:	88e0      	ldrh	r0, [r4, #6]
    77de:	f008 fe04 	bl	103ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    77e2:	2800      	cmp	r0, #0
    77e4:	d11c      	bne.n	7820 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>
    77e6:	88a1      	ldrh	r1, [r4, #4]
    77e8:	8860      	ldrh	r0, [r4, #2]
    77ea:	f008 fdfe 	bl	103ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    77ee:	2800      	cmp	r0, #0
    77f0:	d116      	bne.n	7820 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>
    77f2:	8921      	ldrh	r1, [r4, #8]
    77f4:	88e0      	ldrh	r0, [r4, #6]
    77f6:	f008 fdee 	bl	103d6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x90>
    77fa:	2800      	cmp	r0, #0
    77fc:	d110      	bne.n	7820 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>
    77fe:	88a1      	ldrh	r1, [r4, #4]
    7800:	8860      	ldrh	r0, [r4, #2]
    7802:	f008 fde8 	bl	103d6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x90>
    7806:	0006      	movs	r6, r0
    7808:	d10a      	bne.n	7820 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>
    780a:	9807      	ldr	r0, [sp, #28]
    780c:	f500 759d 	add.w	r5, r0, #314	; 0x13a
    7810:	27ff      	movs	r7, #255	; 0xff
    7812:	706f      	strb	r7, [r5, #1]
    7814:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7818:	b129      	cbz	r1, 7826 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x32e>
    781a:	263a      	movs	r6, #58	; 0x3a
    781c:	e02e      	b.n	787c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x384>
    781e:	201a      	movs	r0, #26
    7820:	b008      	add	sp, #32
    7822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7826:	4641      	mov	r1, r8
    7828:	aa03      	add	r2, sp, #12
    782a:	f008 ff2f 	bl	1068c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x346>
    782e:	8861      	ldrh	r1, [r4, #2]
    7830:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7834:	4281      	cmp	r1, r0
    7836:	d200      	bcs.n	783a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x342>
    7838:	4608      	mov	r0, r1
    783a:	80e8      	strh	r0, [r5, #6]
    783c:	88a1      	ldrh	r1, [r4, #4]
    783e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7842:	4281      	cmp	r1, r0
    7844:	d200      	bcs.n	7848 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x350>
    7846:	4608      	mov	r0, r1
    7848:	8128      	strh	r0, [r5, #8]
    784a:	88e2      	ldrh	r2, [r4, #6]
    784c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7850:	428a      	cmp	r2, r1
    7852:	d200      	bcs.n	7856 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x35e>
    7854:	4611      	mov	r1, r2
    7856:	8069      	strh	r1, [r5, #2]
    7858:	8922      	ldrh	r2, [r4, #8]
    785a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    785e:	428a      	cmp	r2, r1
    7860:	d200      	bcs.n	7864 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x36c>
    7862:	4611      	mov	r1, r2
    7864:	f640 0248 	movw	r2, #2120	; 0x848
    7868:	80a9      	strh	r1, [r5, #4]
    786a:	4291      	cmp	r1, r2
    786c:	d300      	bcc.n	7870 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x378>
    786e:	4611      	mov	r1, r2
    7870:	80a9      	strh	r1, [r5, #4]
    7872:	4290      	cmp	r0, r2
    7874:	d200      	bcs.n	7878 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x380>
    7876:	4602      	mov	r2, r0
    7878:	812a      	strh	r2, [r5, #8]
    787a:	702f      	strb	r7, [r5, #0]
    787c:	2000      	movs	r0, #0
    787e:	7068      	strb	r0, [r5, #1]
    7880:	4630      	mov	r0, r6
    7882:	e7cd      	b.n	7820 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>
    7884:	b510      	push	{r4, lr}
    7886:	4604      	mov	r4, r0
    7888:	88c1      	ldrh	r1, [r0, #6]
    788a:	8880      	ldrh	r0, [r0, #4]
    788c:	f008 fdad 	bl	103ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    7890:	2800      	cmp	r0, #0
    7892:	d10f      	bne.n	78b4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3bc>
    7894:	8861      	ldrh	r1, [r4, #2]
    7896:	8820      	ldrh	r0, [r4, #0]
    7898:	f008 fda7 	bl	103ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    789c:	2800      	cmp	r0, #0
    789e:	d109      	bne.n	78b4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3bc>
    78a0:	4805      	ldr	r0, [pc, #20]	; (78b8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3c0>)
    78a2:	88a1      	ldrh	r1, [r4, #4]
    78a4:	8081      	strh	r1, [r0, #4]
    78a6:	8821      	ldrh	r1, [r4, #0]
    78a8:	8001      	strh	r1, [r0, #0]
    78aa:	88e1      	ldrh	r1, [r4, #6]
    78ac:	80c1      	strh	r1, [r0, #6]
    78ae:	8861      	ldrh	r1, [r4, #2]
    78b0:	8041      	strh	r1, [r0, #2]
    78b2:	2000      	movs	r0, #0
    78b4:	bd10      	pop	{r4, pc}
    78b6:	0000      	.short	0x0000
    78b8:	20000296 	.word	0x20000296
    78bc:	0d11660d 	.word	0x0d11660d
    78c0:	11660059 	.word	0x11660059
	...

000078cc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    78cc:	b570      	push	{r4, r5, r6, lr}
    78ce:	460d      	mov	r5, r1
    78d0:	f7fb f960 	bl	2b94 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    78d4:	4c05      	ldr	r4, [pc, #20]	; (78ec <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    78d6:	6065      	str	r5, [r4, #4]
    78d8:	68a0      	ldr	r0, [r4, #8]
    78da:	f008 ff8f 	bl	107fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4b6>
    78de:	f008 fca5 	bl	1022c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    78e2:	f7fb fb41 	bl	2f68 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    78e6:	2001      	movs	r0, #1
    78e8:	7020      	strb	r0, [r4, #0]
    78ea:	bd70      	pop	{r4, r5, r6, pc}
    78ec:	200002a0 	.word	0x200002a0

000078f0 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    78f0:	4801      	ldr	r0, [pc, #4]	; (78f8 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    78f2:	7800      	ldrb	r0, [r0, #0]
    78f4:	4770      	bx	lr
    78f6:	0000      	.short	0x0000
    78f8:	200002a0 	.word	0x200002a0

000078fc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    78fc:	b510      	push	{r4, lr}
    78fe:	4c06      	ldr	r4, [pc, #24]	; (7918 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    7900:	68e0      	ldr	r0, [r4, #12]
    7902:	f008 ff7b 	bl	107fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4b6>
    7906:	6920      	ldr	r0, [r4, #16]
    7908:	f008 ff78 	bl	107fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4b6>
    790c:	f008 fd1b 	bl	10346 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    7910:	2000      	movs	r0, #0
    7912:	7020      	strb	r0, [r4, #0]
    7914:	bd10      	pop	{r4, pc}
    7916:	0000      	.short	0x0000
    7918:	200002a0 	.word	0x200002a0

0000791c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    791c:	b510      	push	{r4, lr}
    791e:	4908      	ldr	r1, [pc, #32]	; (7940 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    7920:	4808      	ldr	r0, [pc, #32]	; (7944 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    7922:	f008 ff5e 	bl	107e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x49c>
    7926:	4807      	ldr	r0, [pc, #28]	; (7944 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    7928:	4907      	ldr	r1, [pc, #28]	; (7948 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    792a:	1d00      	adds	r0, r0, #4
    792c:	f008 ff59 	bl	107e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x49c>
    7930:	4804      	ldr	r0, [pc, #16]	; (7944 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    7932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7936:	4905      	ldr	r1, [pc, #20]	; (794c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    7938:	3008      	adds	r0, #8
    793a:	f008 bf52 	b.w	107e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x49c>
    793e:	0000      	.short	0x0000
    7940:	200002bc 	.word	0x200002bc
    7944:	200002a8 	.word	0x200002a8
    7948:	200002c4 	.word	0x200002c4
    794c:	200002b4 	.word	0x200002b4
    7950:	b510      	push	{r4, lr}
    7952:	f7fb fedf 	bl	3714 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>
    7956:	f000 f813 	bl	7980 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x64>
    795a:	f006 fa60 	bl	de1e <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    795e:	4907      	ldr	r1, [pc, #28]	; (797c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x60>)
    7960:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    7964:	f7f9 ff14 	bl	1790 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>
    7968:	2000      	movs	r0, #0
    796a:	f006 f9c9 	bl	dd00 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    796e:	f7fd ff03 	bl	5778 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    7972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7976:	f7fb b913 	b.w	2ba0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
    797a:	0000      	.short	0x0000
    797c:	20001711 	.word	0x20001711
    7980:	b510      	push	{r4, lr}
    7982:	f7ff fb69 	bl	7058 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    7986:	f7fd f93b 	bl	4c00 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>
    798a:	f7fd fdad 	bl	54e8 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    798e:	f7ff fd07 	bl	73a0 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    7992:	4601      	mov	r1, r0
    7994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7998:	4801      	ldr	r0, [pc, #4]	; (79a0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x84>)
    799a:	f7fb be1f 	b.w	35dc <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    799e:	0000      	.short	0x0000
    79a0:	2000160f 	.word	0x2000160f

000079a4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    79a4:	4a04      	ldr	r2, [pc, #16]	; (79b8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    79a6:	08c1      	lsrs	r1, r0, #3
    79a8:	f000 0307 	and.w	r3, r0, #7
    79ac:	2001      	movs	r0, #1
    79ae:	4098      	lsls	r0, r3
    79b0:	5c53      	ldrb	r3, [r2, r1]
    79b2:	4303      	orrs	r3, r0
    79b4:	5453      	strb	r3, [r2, r1]
    79b6:	4770      	bx	lr
    79b8:	20000020 	.word	0x20000020

000079bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    79bc:	4901      	ldr	r1, [pc, #4]	; (79c4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    79be:	e9d1 0100 	ldrd	r0, r1, [r1]
    79c2:	4770      	bx	lr
    79c4:	20000020 	.word	0x20000020

000079c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    79c8:	4806      	ldr	r0, [pc, #24]	; (79e4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    79ca:	8801      	ldrh	r1, [r0, #0]
    79cc:	7900      	ldrb	r0, [r0, #4]
    79ce:	0602      	lsls	r2, r0, #24
    79d0:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    79d4:	f000 0001 	and.w	r0, r0, #1
    79d8:	1800      	adds	r0, r0, r0
    79da:	b2c0      	uxtb	r0, r0
    79dc:	f040 0001 	orr.w	r0, r0, #1
    79e0:	4770      	bx	lr
    79e2:	0000      	.short	0x0000
    79e4:	20000020 	.word	0x20000020

000079e8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    79e8:	b510      	push	{r4, lr}
    79ea:	f004 fe93 	bl	c714 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    79ee:	2200      	movs	r2, #0
    79f0:	4b08      	ldr	r3, [pc, #32]	; (7a14 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    79f2:	4611      	mov	r1, r2
    79f4:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    79f8:	4284      	cmp	r4, r0
    79fa:	d303      	bcc.n	7a04 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    79fc:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7a00:	7882      	ldrb	r2, [r0, #2]
    7a02:	e003      	b.n	7a0c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    7a04:	1c49      	adds	r1, r1, #1
    7a06:	b2c9      	uxtb	r1, r1
    7a08:	290c      	cmp	r1, #12
    7a0a:	d3f3      	bcc.n	79f4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    7a0c:	4802      	ldr	r0, [pc, #8]	; (7a18 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    7a0e:	7002      	strb	r2, [r0, #0]
    7a10:	bd10      	pop	{r4, pc}
    7a12:	0000      	.short	0x0000
    7a14:	00010878 	.word	0x00010878
    7a18:	2000036d 	.word	0x2000036d

00007a1c <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    7a1c:	4802      	ldr	r0, [pc, #8]	; (7a28 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0xc>)
    7a1e:	7800      	ldrb	r0, [r0, #0]
    7a20:	f000 0007 	and.w	r0, r0, #7
    7a24:	4770      	bx	lr
    7a26:	0000      	.short	0x0000
    7a28:	2000036d 	.word	0x2000036d

00007a2c <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>:
    7a2c:	b570      	push	{r4, r5, r6, lr}
    7a2e:	6845      	ldr	r5, [r0, #4]
    7a30:	f505 76d7 	add.w	r6, r5, #430	; 0x1ae
    7a34:	8828      	ldrh	r0, [r5, #0]
    7a36:	f826 0902 	strh.w	r0, [r6], #-2
    7a3a:	f505 749c 	add.w	r4, r5, #312	; 0x138
    7a3e:	7031      	strb	r1, [r6, #0]
    7a40:	f895 006a 	ldrb.w	r0, [r5, #106]	; 0x6a
    7a44:	f008 ff4c 	bl	108e0 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    7a48:	7130      	strb	r0, [r6, #4]
    7a4a:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    7a4e:	f008 ff47 	bl	108e0 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    7a52:	f806 0f05 	strb.w	r0, [r6, #5]!
    7a56:	2202      	movs	r2, #2
    7a58:	4903      	ldr	r1, [pc, #12]	; (7a68 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA+0x3c>)
    7a5a:	f1a6 000f 	sub.w	r0, r6, #15
    7a5e:	f006 fe4c 	bl	e6fa <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    7a62:	2000      	movs	r0, #0
    7a64:	7320      	strb	r0, [r4, #12]
    7a66:	bd70      	pop	{r4, r5, r6, pc}
    7a68:	000108cd 	.word	0x000108cd

00007a6c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
    7a6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7a6e:	460e      	mov	r6, r1
    7a70:	4604      	mov	r4, r0
    7a72:	f7fa ff47 	bl	2904 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    7a76:	2500      	movs	r5, #0
    7a78:	b320      	cbz	r0, 7ac4 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x58>
    7a7a:	f5a4 74ca 	sub.w	r4, r4, #404	; 0x194
    7a7e:	a902      	add	r1, sp, #8
    7a80:	8820      	ldrh	r0, [r4, #0]
    7a82:	f8ad 0000 	strh.w	r0, [sp]
    7a86:	f006 fadd 	bl	e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7a8a:	b108      	cbz	r0, 7a90 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x24>
    7a8c:	2126      	movs	r1, #38	; 0x26
    7a8e:	e010      	b.n	7ab2 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x46>
    7a90:	9803      	ldr	r0, [sp, #12]
    7a92:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    7a96:	f88d 1002 	strb.w	r1, [sp, #2]
    7a9a:	7841      	ldrb	r1, [r0, #1]
    7a9c:	f88d 1003 	strb.w	r1, [sp, #3]
    7aa0:	8840      	ldrh	r0, [r0, #2]
    7aa2:	f8ad 0004 	strh.w	r0, [sp, #4]
    7aa6:	2102      	movs	r1, #2
    7aa8:	4668      	mov	r0, sp
    7aaa:	f008 fbc1 	bl	10230 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7aae:	b118      	cbz	r0, 7ab8 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4c>
    7ab0:	213c      	movs	r1, #60	; 0x3c
    7ab2:	207e      	movs	r0, #126	; 0x7e
    7ab4:	f7f8 ffb2 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ab8:	f8cd 5000 	str.w	r5, [sp]
    7abc:	f8bd 0000 	ldrh.w	r0, [sp]
    7ac0:	b004      	add	sp, #16
    7ac2:	bd70      	pop	{r4, r5, r6, pc}
    7ac4:	2020      	movs	r0, #32
    7ac6:	7030      	strb	r0, [r6, #0]
    7ac8:	7075      	strb	r5, [r6, #1]
    7aca:	f8d4 000a 	ldr.w	r0, [r4, #10]
    7ace:	6070      	str	r0, [r6, #4]
    7ad0:	4801      	ldr	r0, [pc, #4]	; (7ad8 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x6c>)
    7ad2:	6800      	ldr	r0, [r0, #0]
    7ad4:	9000      	str	r0, [sp, #0]
    7ad6:	e7f1      	b.n	7abc <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x50>
    7ad8:	00007adc 	.word	0x00007adc
    7adc:	00000004 	.word	0x00000004

00007ae0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7ae0:	b570      	push	{r4, r5, r6, lr}
    7ae2:	4605      	mov	r5, r0
    7ae4:	4616      	mov	r6, r2
    7ae6:	460c      	mov	r4, r1
    7ae8:	2002      	movs	r0, #2
    7aea:	f000 f9b7 	bl	7e5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7aee:	4906      	ldr	r1, [pc, #24]	; (7b08 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7af0:	2001      	movs	r0, #1
    7af2:	1ef6      	subs	r6, r6, #3
    7af4:	7008      	strb	r0, [r1, #0]
    7af6:	4805      	ldr	r0, [pc, #20]	; (7b0c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7af8:	6006      	str	r6, [r0, #0]
    7afa:	4804      	ldr	r0, [pc, #16]	; (7b0c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7afc:	3808      	subs	r0, #8
    7afe:	6005      	str	r5, [r0, #0]
    7b00:	1f00      	subs	r0, r0, #4
    7b02:	6004      	str	r4, [r0, #0]
    7b04:	bd70      	pop	{r4, r5, r6, pc}
    7b06:	0000      	.short	0x0000
    7b08:	2000036e 	.word	0x2000036e
    7b0c:	4000f510 	.word	0x4000f510

00007b10 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    7b10:	b510      	push	{r4, lr}
    7b12:	4c0c      	ldr	r4, [pc, #48]	; (7b44 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    7b14:	7820      	ldrb	r0, [r4, #0]
    7b16:	b180      	cbz	r0, 7b3a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    7b18:	490b      	ldr	r1, [pc, #44]	; (7b48 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    7b1a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7b1e:	6008      	str	r0, [r1, #0]
    7b20:	f000 f86a 	bl	7bf8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7b24:	2100      	movs	r1, #0
    7b26:	b120      	cbz	r0, 7b32 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    7b28:	2001      	movs	r0, #1
    7b2a:	7060      	strb	r0, [r4, #1]
    7b2c:	4807      	ldr	r0, [pc, #28]	; (7b4c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    7b2e:	6800      	ldr	r0, [r0, #0]
    7b30:	e001      	b.n	7b36 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    7b32:	7061      	strb	r1, [r4, #1]
    7b34:	2010      	movs	r0, #16
    7b36:	70a0      	strb	r0, [r4, #2]
    7b38:	7021      	strb	r1, [r4, #0]
    7b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b3e:	2000      	movs	r0, #0
    7b40:	f000 b98c 	b.w	7e5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7b44:	2000036e 	.word	0x2000036e
    7b48:	4001f508 	.word	0x4001f508
    7b4c:	4000f400 	.word	0x4000f400

00007b50 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    7b50:	b510      	push	{r4, lr}
    7b52:	2002      	movs	r0, #2
    7b54:	f000 f982 	bl	7e5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7b58:	4904      	ldr	r1, [pc, #16]	; (7b6c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    7b5a:	2001      	movs	r0, #1
    7b5c:	7008      	strb	r0, [r1, #0]
    7b5e:	f000 f859 	bl	7c14 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    7b62:	4903      	ldr	r1, [pc, #12]	; (7b70 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    7b64:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7b68:	6008      	str	r0, [r1, #0]
    7b6a:	bd10      	pop	{r4, pc}
    7b6c:	2000036e 	.word	0x2000036e
    7b70:	4001f504 	.word	0x4001f504

00007b74 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    7b74:	4803      	ldr	r0, [pc, #12]	; (7b84 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    7b76:	2100      	movs	r1, #0
    7b78:	7001      	strb	r1, [r0, #0]
    7b7a:	7041      	strb	r1, [r0, #1]
    7b7c:	2110      	movs	r1, #16
    7b7e:	7081      	strb	r1, [r0, #2]
    7b80:	4770      	bx	lr
    7b82:	0000      	.short	0x0000
    7b84:	2000036e 	.word	0x2000036e

00007b88 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7b88:	4807      	ldr	r0, [pc, #28]	; (7ba8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7b8a:	b510      	push	{r4, lr}
    7b8c:	7801      	ldrb	r1, [r0, #0]
    7b8e:	b141      	cbz	r1, 7ba2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7b90:	f000 f832 	bl	7bf8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7b94:	b118      	cbz	r0, 7b9e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    7b96:	4805      	ldr	r0, [pc, #20]	; (7bac <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7b98:	6800      	ldr	r0, [r0, #0]
    7b9a:	b2c0      	uxtb	r0, r0
    7b9c:	bd10      	pop	{r4, pc}
    7b9e:	2010      	movs	r0, #16
    7ba0:	bd10      	pop	{r4, pc}
    7ba2:	7880      	ldrb	r0, [r0, #2]
    7ba4:	bd10      	pop	{r4, pc}
    7ba6:	0000      	.short	0x0000
    7ba8:	2000036e 	.word	0x2000036e
    7bac:	4000f400 	.word	0x4000f400

00007bb0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7bb0:	4808      	ldr	r0, [pc, #32]	; (7bd4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    7bb2:	b510      	push	{r4, lr}
    7bb4:	7801      	ldrb	r1, [r0, #0]
    7bb6:	b159      	cbz	r1, 7bd0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7bb8:	4807      	ldr	r0, [pc, #28]	; (7bd8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7bba:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7bbe:	b128      	cbz	r0, 7bcc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7bc0:	f000 f80c 	bl	7bdc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7bc4:	2800      	cmp	r0, #0
    7bc6:	d000      	beq.n	7bca <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    7bc8:	2001      	movs	r0, #1
    7bca:	bd10      	pop	{r4, pc}
    7bcc:	2002      	movs	r0, #2
    7bce:	bd10      	pop	{r4, pc}
    7bd0:	7840      	ldrb	r0, [r0, #1]
    7bd2:	bd10      	pop	{r4, pc}
    7bd4:	2000036e 	.word	0x2000036e
    7bd8:	4000f000 	.word	0x4000f000
    7bdc:	4805      	ldr	r0, [pc, #20]	; (7bf4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7bde:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    7be2:	b111      	cbz	r1, 7bea <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    7be4:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7be8:	b108      	cbz	r0, 7bee <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    7bea:	2000      	movs	r0, #0
    7bec:	4770      	bx	lr
    7bee:	2001      	movs	r0, #1
    7bf0:	4770      	bx	lr
    7bf2:	0000      	.short	0x0000
    7bf4:	4000f000 	.word	0x4000f000
    7bf8:	4805      	ldr	r0, [pc, #20]	; (7c10 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    7bfa:	b510      	push	{r4, lr}
    7bfc:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7c00:	b120      	cbz	r0, 7c0c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7c02:	f7ff ffeb 	bl	7bdc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7c06:	b108      	cbz	r0, 7c0c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7c08:	2001      	movs	r0, #1
    7c0a:	bd10      	pop	{r4, pc}
    7c0c:	2000      	movs	r0, #0
    7c0e:	bd10      	pop	{r4, pc}
    7c10:	4000f000 	.word	0x4000f000
    7c14:	4804      	ldr	r0, [pc, #16]	; (7c28 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    7c16:	2100      	movs	r1, #0
    7c18:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7c1c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7c20:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7c24:	4770      	bx	lr
    7c26:	0000      	.short	0x0000
    7c28:	4000f000 	.word	0x4000f000

00007c2c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    7c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c30:	4604      	mov	r4, r0
    7c32:	461e      	mov	r6, r3
    7c34:	4690      	mov	r8, r2
    7c36:	460f      	mov	r7, r1
    7c38:	2001      	movs	r0, #1
    7c3a:	f000 f90f 	bl	7e5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7c3e:	4d1e      	ldr	r5, [pc, #120]	; (7cb8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    7c40:	481e      	ldr	r0, [pc, #120]	; (7cbc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    7c42:	f004 0103 	and.w	r1, r4, #3
    7c46:	712e      	strb	r6, [r5, #4]
    7c48:	6800      	ldr	r0, [r0, #0]
    7c4a:	0432      	lsls	r2, r6, #16
    7c4c:	f361 0007 	bfi	r0, r1, #0, #8
    7c50:	f366 200f 	bfi	r0, r6, #8, #8
    7c54:	0c00      	lsrs	r0, r0, #16
    7c56:	4e1a      	ldr	r6, [pc, #104]	; (7cc0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7c58:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    7c5c:	4308      	orrs	r0, r1
    7c5e:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    7c62:	4818      	ldr	r0, [pc, #96]	; (7cc4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7c64:	6007      	str	r7, [r0, #0]
    7c66:	f009 f91e 	bl	10ea6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7c6a:	b938      	cbnz	r0, 7c7c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7c6c:	4815      	ldr	r0, [pc, #84]	; (7cc4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7c6e:	3010      	adds	r0, #16
    7c70:	6801      	ldr	r1, [r0, #0]
    7c72:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7c76:	ea41 0108 	orr.w	r1, r1, r8
    7c7a:	6001      	str	r1, [r0, #0]
    7c7c:	f000 f8e4 	bl	7e48 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7c80:	b10c      	cbz	r4, 7c86 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7c82:	2c04      	cmp	r4, #4
    7c84:	d107      	bne.n	7c96 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7c86:	4811      	ldr	r0, [pc, #68]	; (7ccc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7c88:	490d      	ldr	r1, [pc, #52]	; (7cc0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7c8a:	4a0f      	ldr	r2, [pc, #60]	; (7cc8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7c8c:	1d09      	adds	r1, r1, #4
    7c8e:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7c92:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7c96:	2001      	movs	r0, #1
    7c98:	7068      	strb	r0, [r5, #1]
    7c9a:	70ec      	strb	r4, [r5, #3]
    7c9c:	b11c      	cbz	r4, 7ca6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7c9e:	2c01      	cmp	r4, #1
    7ca0:	d001      	beq.n	7ca6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7ca2:	2c02      	cmp	r4, #2
    7ca4:	d106      	bne.n	7cb4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    7ca6:	7028      	strb	r0, [r5, #0]
    7ca8:	2100      	movs	r1, #0
    7caa:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7cae:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7cb2:	6030      	str	r0, [r6, #0]
    7cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7cb8:	20000371 	.word	0x20000371
    7cbc:	00007e58 	.word	0x00007e58
    7cc0:	4000f000 	.word	0x4000f000
    7cc4:	4000f508 	.word	0x4000f508
    7cc8:	4000f100 	.word	0x4000f100
    7ccc:	4001f088 	.word	0x4001f088

00007cd0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7cd0:	b570      	push	{r4, r5, r6, lr}
    7cd2:	4a1c      	ldr	r2, [pc, #112]	; (7d44 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7cd4:	7853      	ldrb	r3, [r2, #1]
    7cd6:	b1a3      	cbz	r3, 7d02 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    7cd8:	4b1b      	ldr	r3, [pc, #108]	; (7d48 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    7cda:	6019      	str	r1, [r3, #0]
    7cdc:	1d19      	adds	r1, r3, #4
    7cde:	6008      	str	r0, [r1, #0]
    7ce0:	2501      	movs	r5, #1
    7ce2:	7095      	strb	r5, [r2, #2]
    7ce4:	4610      	mov	r0, r2
    7ce6:	78d6      	ldrb	r6, [r2, #3]
    7ce8:	4b18      	ldr	r3, [pc, #96]	; (7d4c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7cea:	7800      	ldrb	r0, [r0, #0]
    7cec:	4c18      	ldr	r4, [pc, #96]	; (7d50 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7cee:	2100      	movs	r1, #0
    7cf0:	b156      	cbz	r6, 7d08 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7cf2:	2e04      	cmp	r6, #4
    7cf4:	d01b      	beq.n	7d2e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    7cf6:	b308      	cbz	r0, 7d3c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    7cf8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7cfc:	0668      	lsls	r0, r5, #25
    7cfe:	6018      	str	r0, [r3, #0]
    7d00:	bd70      	pop	{r4, r5, r6, pc}
    7d02:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    7d06:	e01a      	b.n	7d3e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7d08:	b178      	cbz	r0, 7d2a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7d0a:	4620      	mov	r0, r4
    7d0c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7d10:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7d14:	601e      	str	r6, [r3, #0]
    7d16:	1271      	asrs	r1, r6, #9
    7d18:	f008 fe0a 	bl	10930 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7d1c:	2800      	cmp	r0, #0
    7d1e:	d0ef      	beq.n	7d00 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7d20:	6065      	str	r5, [r4, #4]
    7d22:	480a      	ldr	r0, [pc, #40]	; (7d4c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7d24:	1d00      	adds	r0, r0, #4
    7d26:	6006      	str	r6, [r0, #0]
    7d28:	bd70      	pop	{r4, r5, r6, pc}
    7d2a:	21d5      	movs	r1, #213	; 0xd5
    7d2c:	e007      	b.n	7d3e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7d2e:	7015      	strb	r5, [r2, #0]
    7d30:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7d34:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7d38:	6025      	str	r5, [r4, #0]
    7d3a:	bd70      	pop	{r4, r5, r6, pc}
    7d3c:	21e8      	movs	r1, #232	; 0xe8
    7d3e:	203c      	movs	r0, #60	; 0x3c
    7d40:	f7f8 fe6c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d44:	20000371 	.word	0x20000371
    7d48:	4000f50c 	.word	0x4000f50c
    7d4c:	4001f504 	.word	0x4001f504
    7d50:	4000f000 	.word	0x4000f000

00007d54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7d54:	b570      	push	{r4, r5, r6, lr}
    7d56:	4d05      	ldr	r5, [pc, #20]	; (7d6c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7d58:	2400      	movs	r4, #0
    7d5a:	7828      	ldrb	r0, [r5, #0]
    7d5c:	b110      	cbz	r0, 7d64 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    7d5e:	f000 f873 	bl	7e48 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7d62:	702c      	strb	r4, [r5, #0]
    7d64:	706c      	strb	r4, [r5, #1]
    7d66:	70ac      	strb	r4, [r5, #2]
    7d68:	bd70      	pop	{r4, r5, r6, pc}
    7d6a:	0000      	.short	0x0000
    7d6c:	20000371 	.word	0x20000371

00007d70 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7d70:	4802      	ldr	r0, [pc, #8]	; (7d7c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7d72:	2100      	movs	r1, #0
    7d74:	7001      	strb	r1, [r0, #0]
    7d76:	7041      	strb	r1, [r0, #1]
    7d78:	7081      	strb	r1, [r0, #2]
    7d7a:	4770      	bx	lr
    7d7c:	20000371 	.word	0x20000371

00007d80 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7d80:	480b      	ldr	r0, [pc, #44]	; (7db0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7d82:	b510      	push	{r4, lr}
    7d84:	7800      	ldrb	r0, [r0, #0]
    7d86:	b158      	cbz	r0, 7da0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7d88:	f44f 7182 	mov.w	r1, #260	; 0x104
    7d8c:	4809      	ldr	r0, [pc, #36]	; (7db4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7d8e:	f008 fdcf 	bl	10930 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7d92:	b140      	cbz	r0, 7da6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7d94:	4808      	ldr	r0, [pc, #32]	; (7db8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7d96:	6800      	ldr	r0, [r0, #0]
    7d98:	2800      	cmp	r0, #0
    7d9a:	d000      	beq.n	7d9e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7d9c:	2001      	movs	r0, #1
    7d9e:	bd10      	pop	{r4, pc}
    7da0:	f240 215e 	movw	r1, #606	; 0x25e
    7da4:	e001      	b.n	7daa <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7da6:	f240 215f 	movw	r1, #607	; 0x25f
    7daa:	203c      	movs	r0, #60	; 0x3c
    7dac:	f7f8 fe36 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7db0:	20000371 	.word	0x20000371
    7db4:	4000f000 	.word	0x4000f000
    7db8:	4000f400 	.word	0x4000f400

00007dbc <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7dbc:	4801      	ldr	r0, [pc, #4]	; (7dc4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7dbe:	2101      	movs	r1, #1
    7dc0:	6081      	str	r1, [r0, #8]
    7dc2:	4770      	bx	lr
    7dc4:	4000f000 	.word	0x4000f000

00007dc8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7dcc:	481b      	ldr	r0, [pc, #108]	; (7e3c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7dce:	7800      	ldrb	r0, [r0, #0]
    7dd0:	b1d8      	cbz	r0, 7e0a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7dd2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7e40 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    7dd6:	f44f 7682 	mov.w	r6, #260	; 0x104
    7dda:	4631      	mov	r1, r6
    7ddc:	4640      	mov	r0, r8
    7dde:	f008 fda7 	bl	10930 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7de2:	2800      	cmp	r0, #0
    7de4:	d128      	bne.n	7e38 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    7de6:	2002      	movs	r0, #2
    7de8:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7dec:	4c15      	ldr	r4, [pc, #84]	; (7e44 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7dee:	6820      	ldr	r0, [r4, #0]
    7df0:	43c0      	mvns	r0, r0
    7df2:	f340 1500 	sbfx	r5, r0, #4, #1
    7df6:	6820      	ldr	r0, [r4, #0]
    7df8:	f040 0010 	orr.w	r0, r0, #16
    7dfc:	6020      	str	r0, [r4, #0]
    7dfe:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7e02:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    7e06:	1c6d      	adds	r5, r5, #1
    7e08:	e008      	b.n	7e1c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7e0a:	f240 216a 	movw	r1, #618	; 0x26a
    7e0e:	203c      	movs	r0, #60	; 0x3c
    7e10:	f7f8 fe04 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e14:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7e18:	f009 f885 	bl	10f26 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7e1c:	4631      	mov	r1, r6
    7e1e:	4640      	mov	r0, r8
    7e20:	f008 fd86 	bl	10930 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7e24:	2800      	cmp	r0, #0
    7e26:	d0f5      	beq.n	7e14 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7e28:	b91d      	cbnz	r5, 7e32 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7e2a:	6820      	ldr	r0, [r4, #0]
    7e2c:	f020 0010 	bic.w	r0, r0, #16
    7e30:	6020      	str	r0, [r4, #0]
    7e32:	2002      	movs	r0, #2
    7e34:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e3c:	20000371 	.word	0x20000371
    7e40:	4000f000 	.word	0x4000f000
    7e44:	e000ed10 	.word	0xe000ed10
    7e48:	4902      	ldr	r1, [pc, #8]	; (7e54 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7e4a:	4801      	ldr	r0, [pc, #4]	; (7e50 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7e4c:	6008      	str	r0, [r1, #0]
    7e4e:	4770      	bx	lr
    7e50:	02020000 	.word	0x02020000
    7e54:	4001f508 	.word	0x4001f508
    7e58:	00010000 	.word	0x00010000

00007e5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7e5c:	b510      	push	{r4, lr}
    7e5e:	4604      	mov	r4, r0
    7e60:	f000 f820 	bl	7ea4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7e64:	2c00      	cmp	r4, #0
    7e66:	d00e      	beq.n	7e86 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7e68:	4a0b      	ldr	r2, [pc, #44]	; (7e98 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7e6a:	480b      	ldr	r0, [pc, #44]	; (7e98 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7e6c:	490b      	ldr	r1, [pc, #44]	; (7e9c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7e6e:	3214      	adds	r2, #20
    7e70:	2c01      	cmp	r4, #1
    7e72:	d005      	beq.n	7e80 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7e74:	2c02      	cmp	r4, #2
    7e76:	d007      	beq.n	7e88 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7e78:	2182      	movs	r1, #130	; 0x82
    7e7a:	203d      	movs	r0, #61	; 0x3d
    7e7c:	f7f8 fdce 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e80:	2302      	movs	r3, #2
    7e82:	6003      	str	r3, [r0, #0]
    7e84:	6011      	str	r1, [r2, #0]
    7e86:	bd10      	pop	{r4, pc}
    7e88:	2303      	movs	r3, #3
    7e8a:	6003      	str	r3, [r0, #0]
    7e8c:	6011      	str	r1, [r2, #0]
    7e8e:	4904      	ldr	r1, [pc, #16]	; (7ea0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7e90:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7e94:	6008      	str	r0, [r1, #0]
    7e96:	bd10      	pop	{r4, pc}
    7e98:	4000f500 	.word	0x4000f500
    7e9c:	20001813 	.word	0x20001813
    7ea0:	4001f504 	.word	0x4001f504
    7ea4:	4805      	ldr	r0, [pc, #20]	; (7ebc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7ea6:	b510      	push	{r4, lr}
    7ea8:	2100      	movs	r1, #0
    7eaa:	6001      	str	r1, [r0, #0]
    7eac:	6001      	str	r1, [r0, #0]
    7eae:	f7ff ff51 	bl	7d54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7eb2:	4903      	ldr	r1, [pc, #12]	; (7ec0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7eb4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7eb8:	6008      	str	r0, [r1, #0]
    7eba:	bd10      	pop	{r4, pc}
    7ebc:	4000f500 	.word	0x4000f500
    7ec0:	4001f508 	.word	0x4001f508

00007ec4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7ec4:	4805      	ldr	r0, [pc, #20]	; (7edc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7ec6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7eca:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7ece:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7ed2:	2100      	movs	r1, #0
    7ed4:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7ed8:	4770      	bx	lr
    7eda:	0000      	.short	0x0000
    7edc:	40001000 	.word	0x40001000

00007ee0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7ee0:	4904      	ldr	r1, [pc, #16]	; (7ef4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7ee2:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7ee6:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7eea:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7eee:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7ef2:	4770      	bx	lr
    7ef4:	40001000 	.word	0x40001000

00007ef8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7ef8:	4902      	ldr	r1, [pc, #8]	; (7f04 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7efa:	5c08      	ldrb	r0, [r1, r0]
    7efc:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7f00:	4770      	bx	lr
    7f02:	0000      	.short	0x0000
    7f04:	00008b16 	.word	0x00008b16

00007f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f0a:	4c24      	ldr	r4, [pc, #144]	; (7f9c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7f0c:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7f10:	f010 0f10 	tst.w	r0, #16
    7f14:	d001      	beq.n	7f1a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    7f16:	2701      	movs	r7, #1
    7f18:	e000      	b.n	7f1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7f1a:	2700      	movs	r7, #0
    7f1c:	2010      	movs	r0, #16
    7f1e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7f22:	2002      	movs	r0, #2
    7f24:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7f28:	481d      	ldr	r0, [pc, #116]	; (7fa0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7f2a:	2500      	movs	r5, #0
    7f2c:	491d      	ldr	r1, [pc, #116]	; (7fa4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7f2e:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    7f32:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    7f36:	6008      	str	r0, [r1, #0]
    7f38:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7f3c:	f44f 7688 	mov.w	r6, #272	; 0x110
    7f40:	f010 0fff 	tst.w	r0, #255	; 0xff
    7f44:	d019      	beq.n	7f7a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    7f46:	20ff      	movs	r0, #255	; 0xff
    7f48:	f88d 0000 	strb.w	r0, [sp]
    7f4c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7f50:	2001      	movs	r0, #1
    7f52:	6120      	str	r0, [r4, #16]
    7f54:	e005      	b.n	7f62 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7f56:	bf00      	nop
    7f58:	f89d 0000 	ldrb.w	r0, [sp]
    7f5c:	1e40      	subs	r0, r0, #1
    7f5e:	f88d 0000 	strb.w	r0, [sp]
    7f62:	f89d 0000 	ldrb.w	r0, [sp]
    7f66:	b128      	cbz	r0, 7f74 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7f68:	4631      	mov	r1, r6
    7f6a:	4620      	mov	r0, r4
    7f6c:	f008 fd0f 	bl	1098e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7f70:	2800      	cmp	r0, #0
    7f72:	d0f1      	beq.n	7f58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7f74:	f89d 0000 	ldrb.w	r0, [sp]
    7f78:	b158      	cbz	r0, 7f92 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7f7a:	f000 fbe1 	bl	8740 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    7f7e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7f82:	f000 fd49 	bl	8a18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    7f86:	2f00      	cmp	r7, #0
    7f88:	d002      	beq.n	7f90 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7f8a:	2010      	movs	r0, #16
    7f8c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f92:	f640 0194 	movw	r1, #2196	; 0x894
    7f96:	203e      	movs	r0, #62	; 0x3e
    7f98:	f7f8 fd40 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f9c:	40001000 	.word	0x40001000
    7fa0:	200013a4 	.word	0x200013a4
    7fa4:	4001f508 	.word	0x4001f508

00007fa8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7fac:	4d18      	ldr	r5, [pc, #96]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7fae:	4607      	mov	r7, r0
    7fb0:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    7fb4:	07c2      	lsls	r2, r0, #31
    7fb6:	d00f      	beq.n	7fd8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7fb8:	4c16      	ldr	r4, [pc, #88]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7fba:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7fbe:	f042 0201 	orr.w	r2, r2, #1
    7fc2:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7fc6:	f040 0002 	orr.w	r0, r0, #2
    7fca:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    7fce:	2601      	movs	r6, #1
    7fd0:	b13f      	cbz	r7, 7fe2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7fd2:	2f01      	cmp	r7, #1
    7fd4:	d00b      	beq.n	7fee <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7fd6:	e010      	b.n	7ffa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7fd8:	f240 716f 	movw	r1, #1903	; 0x76f
    7fdc:	203e      	movs	r0, #62	; 0x3e
    7fde:	f7f8 fd1d 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fe2:	4608      	mov	r0, r1
    7fe4:	f000 fd72 	bl	8acc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    7fe8:	726e      	strb	r6, [r5, #9]
    7fea:	6026      	str	r6, [r4, #0]
    7fec:	e005      	b.n	7ffa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7fee:	4608      	mov	r0, r1
    7ff0:	f000 fd52 	bl	8a98 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    7ff4:	2002      	movs	r0, #2
    7ff6:	7268      	strb	r0, [r5, #9]
    7ff8:	6066      	str	r6, [r4, #4]
    7ffa:	4807      	ldr	r0, [pc, #28]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    7ffc:	64c6      	str	r6, [r0, #76]	; 0x4c
    7ffe:	4806      	ldr	r0, [pc, #24]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    8000:	300c      	adds	r0, #12
    8002:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    8006:	4638      	mov	r0, r7
    8008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    800c:	f000 bcd6 	b.w	89bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    8010:	200013a4 	.word	0x200013a4
    8014:	40001000 	.word	0x40001000
    8018:	40008000 	.word	0x40008000

0000801c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    801c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8020:	4c2c      	ldr	r4, [pc, #176]	; (80d4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    8022:	0006      	movs	r6, r0
    8024:	4d2c      	ldr	r5, [pc, #176]	; (80d8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    8026:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    802a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80dc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    802e:	f040 0002 	orr.w	r0, r0, #2
    8032:	4689      	mov	r9, r1
    8034:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    8038:	f04f 0700 	mov.w	r7, #0
    803c:	d002      	beq.n	8044 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    803e:	2e01      	cmp	r6, #1
    8040:	d020      	beq.n	8084 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    8042:	e036      	b.n	80b2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    8044:	4608      	mov	r0, r1
    8046:	f000 fd41 	bl	8acc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    804a:	2001      	movs	r0, #1
    804c:	7260      	strb	r0, [r4, #9]
    804e:	79e0      	ldrb	r0, [r4, #7]
    8050:	2801      	cmp	r0, #1
    8052:	d105      	bne.n	8060 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    8054:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    8058:	f040 0008 	orr.w	r0, r0, #8
    805c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    8060:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8062:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    8066:	6260      	str	r0, [r4, #36]	; 0x24
    8068:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    806c:	f8c8 0000 	str.w	r0, [r8]
    8070:	491b      	ldr	r1, [pc, #108]	; (80e0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    8072:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    8076:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    807a:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    807e:	fbb0 f7f1 	udiv	r7, r0, r1
    8082:	e016      	b.n	80b2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    8084:	4608      	mov	r0, r1
    8086:	f000 fd07 	bl	8a98 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    808a:	2002      	movs	r0, #2
    808c:	7260      	strb	r0, [r4, #9]
    808e:	79e0      	ldrb	r0, [r4, #7]
    8090:	2801      	cmp	r0, #1
    8092:	d105      	bne.n	80a0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    8094:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    8098:	f040 0004 	orr.w	r0, r0, #4
    809c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    80a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    80a2:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    80a6:	6260      	str	r0, [r4, #36]	; 0x24
    80a8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    80ac:	f8c8 0000 	str.w	r0, [r8]
    80b0:	2729      	movs	r7, #41	; 0x29
    80b2:	f000 fbb1 	bl	8818 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    80b6:	f008 fdf5 	bl	10ca4 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    80ba:	b120      	cbz	r0, 80c6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    80bc:	f7ff ff24 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    80c0:	2000      	movs	r0, #0
    80c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    80c6:	2100      	movs	r1, #0
    80c8:	4630      	mov	r0, r6
    80ca:	f000 fc77 	bl	89bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    80ce:	4638      	mov	r0, r7
    80d0:	e7f7      	b.n	80c2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    80d2:	0000      	.short	0x0000
    80d4:	200013a4 	.word	0x200013a4
    80d8:	40001000 	.word	0x40001000
    80dc:	4001f504 	.word	0x4001f504
    80e0:	00008b10 	.word	0x00008b10

000080e4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    80e4:	b510      	push	{r4, lr}
    80e6:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    80e8:	4901      	ldr	r1, [pc, #4]	; (80f0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    80ea:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    80ee:	bd10      	pop	{r4, pc}
    80f0:	20001394 	.word	0x20001394

000080f4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    80f4:	b570      	push	{r4, r5, r6, lr}
    80f6:	4c0f      	ldr	r4, [pc, #60]	; (8134 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    80f8:	4603      	mov	r3, r0
    80fa:	2002      	movs	r0, #2
    80fc:	7320      	strb	r0, [r4, #12]
    80fe:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    8102:	2096      	movs	r0, #150	; 0x96
    8104:	f894 1020 	ldrb.w	r1, [r4, #32]
    8108:	7d22      	ldrb	r2, [r4, #20]
    810a:	2d01      	cmp	r5, #1
    810c:	d00e      	beq.n	812c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    810e:	f000 fd3b 	bl	8b88 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    8112:	6120      	str	r0, [r4, #16]
    8114:	4808      	ldr	r0, [pc, #32]	; (8138 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    8116:	2100      	movs	r1, #0
    8118:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    811c:	6921      	ldr	r1, [r4, #16]
    811e:	69e0      	ldr	r0, [r4, #28]
    8120:	4408      	add	r0, r1
    8122:	4905      	ldr	r1, [pc, #20]	; (8138 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    8124:	1d09      	adds	r1, r1, #4
    8126:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    812a:	bd70      	pop	{r4, r5, r6, pc}
    812c:	f000 fd4a 	bl	8bc4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    8130:	e7ef      	b.n	8112 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    8132:	0000      	.short	0x0000
    8134:	200013a4 	.word	0x200013a4
    8138:	40008000 	.word	0x40008000

0000813c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    813c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8140:	2234      	movs	r2, #52	; 0x34
    8142:	2100      	movs	r1, #0
    8144:	4813      	ldr	r0, [pc, #76]	; (8194 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    8146:	f008 ffd4 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    814a:	f000 fc65 	bl	8a18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    814e:	f008 fe7f 	bl	10e50 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8152:	4d11      	ldr	r5, [pc, #68]	; (8198 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    8154:	4e10      	ldr	r6, [pc, #64]	; (8198 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    8156:	2400      	movs	r4, #0
    8158:	4f0f      	ldr	r7, [pc, #60]	; (8198 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    815a:	3508      	adds	r5, #8
    815c:	3610      	adds	r6, #16
    815e:	b928      	cbnz	r0, 816c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    8160:	f008 fe8d 	bl	10e7e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8164:	b910      	cbnz	r0, 816c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    8166:	f008 fe94 	bl	10e92 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    816a:	b108      	cbz	r0, 8170 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    816c:	2224      	movs	r2, #36	; 0x24
    816e:	e006      	b.n	817e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    8170:	f008 fecf 	bl	10f12 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8174:	b910      	cbnz	r0, 817c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    8176:	f008 fec2 	bl	10efe <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    817a:	b140      	cbz	r0, 818e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    817c:	2240      	movs	r2, #64	; 0x40
    817e:	21ff      	movs	r1, #255	; 0xff
    8180:	4638      	mov	r0, r7
    8182:	f008 ffb6 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8186:	602c      	str	r4, [r5, #0]
    8188:	6034      	str	r4, [r6, #0]
    818a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    818e:	2238      	movs	r2, #56	; 0x38
    8190:	e7f5      	b.n	817e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    8192:	0000      	.short	0x0000
    8194:	200013a4 	.word	0x200013a4
    8198:	40000e00 	.word	0x40000e00

0000819c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    819c:	4801      	ldr	r0, [pc, #4]	; (81a4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    819e:	69c0      	ldr	r0, [r0, #28]
    81a0:	4770      	bx	lr
    81a2:	0000      	.short	0x0000
    81a4:	200013a4 	.word	0x200013a4

000081a8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    81a8:	4801      	ldr	r0, [pc, #4]	; (81b0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x8>)
    81aa:	f890 0020 	ldrb.w	r0, [r0, #32]
    81ae:	4770      	bx	lr
    81b0:	200013a4 	.word	0x200013a4

000081b4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    81b4:	b510      	push	{r4, lr}
    81b6:	f000 fbe3 	bl	8980 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    81ba:	f7ff fea5 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    81be:	f004 fd25 	bl	cc0c <mpsl_fem_disable>
    81c2:	b130      	cbz	r0, 81d2 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    81c4:	1c40      	adds	r0, r0, #1
    81c6:	d004      	beq.n	81d2 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    81c8:	f240 5165 	movw	r1, #1381	; 0x565
    81cc:	203e      	movs	r0, #62	; 0x3e
    81ce:	f7f8 fc25 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81d2:	480f      	ldr	r0, [pc, #60]	; (8210 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    81d4:	4a0f      	ldr	r2, [pc, #60]	; (8214 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    81d6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    81d8:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    81dc:	6011      	str	r1, [r2, #0]
    81de:	2400      	movs	r4, #0
    81e0:	6244      	str	r4, [r0, #36]	; 0x24
    81e2:	7304      	strb	r4, [r0, #12]
    81e4:	61c4      	str	r4, [r0, #28]
    81e6:	6184      	str	r4, [r0, #24]
    81e8:	f000 fbca 	bl	8980 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    81ec:	480a      	ldr	r0, [pc, #40]	; (8218 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    81ee:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    81f2:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    81f6:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    81fa:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    81fe:	2001      	movs	r0, #1
    8200:	f008 fbb4 	bl	1096c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    8204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8208:	2001      	movs	r0, #1
    820a:	f008 bba2 	b.w	10952 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    820e:	0000      	.short	0x0000
    8210:	200013a4 	.word	0x200013a4
    8214:	4001f508 	.word	0x4001f508
    8218:	40008000 	.word	0x40008000

0000821c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    821c:	b570      	push	{r4, r5, r6, lr}
    821e:	2001      	movs	r0, #1
    8220:	f008 fba4 	bl	1096c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    8224:	4c37      	ldr	r4, [pc, #220]	; (8304 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    8226:	2000      	movs	r0, #0
    8228:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    822c:	2001      	movs	r0, #1
    822e:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    8232:	f008 fe44 	bl	10ebe <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8236:	4d34      	ldr	r5, [pc, #208]	; (8308 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8238:	b118      	cbz	r0, 8242 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    823a:	6828      	ldr	r0, [r5, #0]
    823c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    8240:	6028      	str	r0, [r5, #0]
    8242:	f008 fe30 	bl	10ea6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8246:	b128      	cbz	r0, 8254 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    8248:	6828      	ldr	r0, [r5, #0]
    824a:	4930      	ldr	r1, [pc, #192]	; (830c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    824c:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    8250:	4308      	orrs	r0, r1
    8252:	6028      	str	r0, [r5, #0]
    8254:	f008 fe43 	bl	10ede <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8258:	b138      	cbz	r0, 826a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    825a:	482b      	ldr	r0, [pc, #172]	; (8308 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    825c:	1d00      	adds	r0, r0, #4
    825e:	6801      	ldr	r1, [r0, #0]
    8260:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    8264:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    8268:	6001      	str	r1, [r0, #0]
    826a:	4927      	ldr	r1, [pc, #156]	; (8308 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    826c:	4828      	ldr	r0, [pc, #160]	; (8310 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    826e:	313c      	adds	r1, #60	; 0x3c
    8270:	6008      	str	r0, [r1, #0]
    8272:	f004 fd05 	bl	cc80 <mpsl_fem_device_config_254_apply_get>
    8276:	b140      	cbz	r0, 828a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    8278:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    827c:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    8280:	1c41      	adds	r1, r0, #1
    8282:	d002      	beq.n	828a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    8284:	4920      	ldr	r1, [pc, #128]	; (8308 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8286:	3110      	adds	r1, #16
    8288:	6008      	str	r0, [r1, #0]
    828a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    828e:	6e00      	ldr	r0, [r0, #96]	; 0x60
    8290:	1c41      	adds	r1, r0, #1
    8292:	d004      	beq.n	829e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    8294:	491f      	ldr	r1, [pc, #124]	; (8314 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    8296:	680a      	ldr	r2, [r1, #0]
    8298:	f360 4217 	bfi	r2, r0, #16, #8
    829c:	600a      	str	r2, [r1, #0]
    829e:	f240 1103 	movw	r1, #259	; 0x103
    82a2:	f240 605b 	movw	r0, #1627	; 0x65b
    82a6:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    82aa:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    82ae:	2001      	movs	r0, #1
    82b0:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    82b4:	f000 f842 	bl	833c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    82b8:	f240 2001 	movw	r0, #513	; 0x201
    82bc:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    82c0:	2002      	movs	r0, #2
    82c2:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    82c6:	4914      	ldr	r1, [pc, #80]	; (8318 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    82c8:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    82cc:	6008      	str	r0, [r1, #0]
    82ce:	4913      	ldr	r1, [pc, #76]	; (831c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    82d0:	2000      	movs	r0, #0
    82d2:	8608      	strh	r0, [r1, #48]	; 0x30
    82d4:	3110      	adds	r1, #16
    82d6:	61c8      	str	r0, [r1, #28]
    82d8:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    82dc:	2001      	movs	r0, #1
    82de:	f008 fb38 	bl	10952 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    82e2:	2010      	movs	r0, #16
    82e4:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    82e8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    82ec:	2002      	movs	r0, #2
    82ee:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    82f2:	480b      	ldr	r0, [pc, #44]	; (8320 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    82f4:	6800      	ldr	r0, [r0, #0]
    82f6:	2800      	cmp	r0, #0
    82f8:	d002      	beq.n	8300 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    82fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82fe:	4700      	bx	r0
    8300:	bd70      	pop	{r4, r5, r6, pc}
    8302:	0000      	.short	0x0000
    8304:	40001000 	.word	0x40001000
    8308:	4000173c 	.word	0x4000173c
    830c:	80000096 	.word	0x80000096
    8310:	8900002c 	.word	0x8900002c
    8314:	4000158c 	.word	0x4000158c
    8318:	4001f504 	.word	0x4001f504
    831c:	20001394 	.word	0x20001394
    8320:	200002cc 	.word	0x200002cc

00008324 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    8324:	4901      	ldr	r1, [pc, #4]	; (832c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    8326:	7548      	strb	r0, [r1, #21]
    8328:	4770      	bx	lr
    832a:	0000      	.short	0x0000
    832c:	200013a4 	.word	0x200013a4

00008330 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    8330:	4901      	ldr	r1, [pc, #4]	; (8338 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    8332:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8336:	4770      	bx	lr
    8338:	00008b64 	.word	0x00008b64

0000833c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    833c:	4908      	ldr	r1, [pc, #32]	; (8360 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    833e:	b510      	push	{r4, lr}
    8340:	7508      	strb	r0, [r1, #20]
    8342:	4908      	ldr	r1, [pc, #32]	; (8364 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    8344:	2801      	cmp	r0, #1
    8346:	d006      	beq.n	8356 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    8348:	2802      	cmp	r0, #2
    834a:	d006      	beq.n	835a <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    834c:	f640 516c 	movw	r1, #3436	; 0xd6c
    8350:	203e      	movs	r0, #62	; 0x3e
    8352:	f7f8 fb63 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8356:	2003      	movs	r0, #3
    8358:	e000      	b.n	835c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    835a:	2004      	movs	r0, #4
    835c:	6008      	str	r0, [r1, #0]
    835e:	bd10      	pop	{r4, pc}
    8360:	200013a4 	.word	0x200013a4
    8364:	40001510 	.word	0x40001510

00008368 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    8368:	4905      	ldr	r1, [pc, #20]	; (8380 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    836a:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    836e:	4805      	ldr	r0, [pc, #20]	; (8384 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    8370:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    8374:	f041 0101 	orr.w	r1, r1, #1
    8378:	7001      	strb	r1, [r0, #0]
    837a:	f000 ba13 	b.w	87a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    837e:	0000      	.short	0x0000
    8380:	40001000 	.word	0x40001000
    8384:	200013a4 	.word	0x200013a4

00008388 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    8388:	4901      	ldr	r1, [pc, #4]	; (8390 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    838a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    838e:	4770      	bx	lr
    8390:	00008b70 	.word	0x00008b70

00008394 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    8394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8398:	4e30      	ldr	r6, [pc, #192]	; (845c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    839a:	4c31      	ldr	r4, [pc, #196]	; (8460 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    839c:	4688      	mov	r8, r1
    839e:	0007      	movs	r7, r0
    83a0:	4615      	mov	r5, r2
    83a2:	f04f 0901 	mov.w	r9, #1
    83a6:	d006      	beq.n	83b6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    83a8:	2f01      	cmp	r7, #1
    83aa:	d012      	beq.n	83d2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    83ac:	f640 0117 	movw	r1, #2071	; 0x817
    83b0:	203e      	movs	r0, #62	; 0x3e
    83b2:	f7f8 fb33 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    83b6:	4610      	mov	r0, r2
    83b8:	f000 fb88 	bl	8acc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    83bc:	4829      	ldr	r0, [pc, #164]	; (8464 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    83be:	f884 9009 	strb.w	r9, [r4, #9]
    83c2:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    83c6:	4640      	mov	r0, r8
    83c8:	f000 fb2e 	bl	8a28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    83cc:	4605      	mov	r5, r0
    83ce:	4630      	mov	r0, r6
    83d0:	e00c      	b.n	83ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    83d2:	4610      	mov	r0, r2
    83d4:	f000 fb60 	bl	8a98 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    83d8:	2002      	movs	r0, #2
    83da:	7260      	strb	r0, [r4, #9]
    83dc:	f649 71ba 	movw	r1, #40890	; 0x9fba
    83e0:	4640      	mov	r0, r8
    83e2:	f000 fb21 	bl	8a28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    83e6:	4605      	mov	r5, r0
    83e8:	481c      	ldr	r0, [pc, #112]	; (845c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    83ea:	1d00      	adds	r0, r0, #4
    83ec:	f000 fada 	bl	89a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>
    83f0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8468 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    83f4:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    83f8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8470 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    83fc:	481b      	ldr	r0, [pc, #108]	; (846c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    83fe:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    8402:	2010      	movs	r0, #16
    8404:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    8408:	6a60      	ldr	r0, [r4, #36]	; 0x24
    840a:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    840e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    8412:	6260      	str	r0, [r4, #36]	; 0x24
    8414:	4817      	ldr	r0, [pc, #92]	; (8474 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    8416:	6006      	str	r6, [r0, #0]
    8418:	f000 f9fe 	bl	8818 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    841c:	4641      	mov	r1, r8
    841e:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    8422:	4811      	ldr	r0, [pc, #68]	; (8468 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    8424:	300c      	adds	r0, #12
    8426:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    842a:	42a8      	cmp	r0, r5
    842c:	d310      	bcc.n	8450 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    842e:	2000      	movs	r0, #0
    8430:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8434:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    8438:	6a60      	ldr	r0, [r4, #36]	; 0x24
    843a:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    843e:	6260      	str	r0, [r4, #36]	; 0x24
    8440:	480c      	ldr	r0, [pc, #48]	; (8474 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    8442:	1d00      	adds	r0, r0, #4
    8444:	6006      	str	r6, [r0, #0]
    8446:	f7ff fd5f 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    844a:	2000      	movs	r0, #0
    844c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8450:	4629      	mov	r1, r5
    8452:	4638      	mov	r0, r7
    8454:	f000 fab2 	bl	89bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    8458:	2001      	movs	r0, #1
    845a:	e7f7      	b.n	844c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    845c:	40001000 	.word	0x40001000
    8460:	200013a4 	.word	0x200013a4
    8464:	00008b10 	.word	0x00008b10
    8468:	40008000 	.word	0x40008000
    846c:	40008140 	.word	0x40008140
    8470:	4001f098 	.word	0x4001f098
    8474:	4001f504 	.word	0x4001f504

00008478 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    8478:	4b0d      	ldr	r3, [pc, #52]	; (84b0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    847a:	b510      	push	{r4, lr}
    847c:	71d8      	strb	r0, [r3, #7]
    847e:	729a      	strb	r2, [r3, #10]
    8480:	b151      	cbz	r1, 8498 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    8482:	2002      	movs	r0, #2
    8484:	7218      	strb	r0, [r3, #8]
    8486:	2801      	cmp	r0, #1
    8488:	d008      	beq.n	849c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    848a:	2802      	cmp	r0, #2
    848c:	d00f      	beq.n	84ae <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    848e:	f640 2144 	movw	r1, #2628	; 0xa44
    8492:	203e      	movs	r0, #62	; 0x3e
    8494:	f7f8 fac2 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8498:	2001      	movs	r0, #1
    849a:	e7f3      	b.n	8484 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    849c:	7a58      	ldrb	r0, [r3, #9]
    849e:	2802      	cmp	r0, #2
    84a0:	d105      	bne.n	84ae <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    84a2:	f000 f943 	bl	872c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    84a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    84aa:	f000 ba51 	b.w	8950 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    84ae:	bd10      	pop	{r4, pc}
    84b0:	200013a4 	.word	0x200013a4

000084b4 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    84b4:	4902      	ldr	r1, [pc, #8]	; (84c0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    84b6:	2000      	movs	r0, #0
    84b8:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    84bc:	4770      	bx	lr
    84be:	0000      	.short	0x0000
    84c0:	40008000 	.word	0x40008000

000084c4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    84c4:	4904      	ldr	r1, [pc, #16]	; (84d8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    84c6:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    84ca:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    84ce:	4249      	negs	r1, r1
    84d0:	7001      	strb	r1, [r0, #0]
    84d2:	2001      	movs	r0, #1
    84d4:	4770      	bx	lr
    84d6:	0000      	.short	0x0000
    84d8:	40001000 	.word	0x40001000

000084dc <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    84dc:	4903      	ldr	r1, [pc, #12]	; (84ec <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    84de:	0e02      	lsrs	r2, r0, #24
    84e0:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    84e4:	0200      	lsls	r0, r0, #8
    84e6:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    84ea:	4770      	bx	lr
    84ec:	40001000 	.word	0x40001000

000084f0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    84f0:	4901      	ldr	r1, [pc, #4]	; (84f8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    84f2:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    84f6:	4770      	bx	lr
    84f8:	40001000 	.word	0x40001000

000084fc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    84fc:	b510      	push	{r4, lr}
    84fe:	2200      	movs	r2, #0
    8500:	2901      	cmp	r1, #1
    8502:	d006      	beq.n	8512 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    8504:	2902      	cmp	r1, #2
    8506:	d002      	beq.n	850e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    8508:	f240 21d2 	movw	r1, #722	; 0x2d2
    850c:	e014      	b.n	8538 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    850e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8512:	490b      	ldr	r1, [pc, #44]	; (8540 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    8514:	430a      	orrs	r2, r1
    8516:	490b      	ldr	r1, [pc, #44]	; (8544 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    8518:	600a      	str	r2, [r1, #0]
    851a:	490b      	ldr	r1, [pc, #44]	; (8548 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    851c:	4308      	orrs	r0, r1
    851e:	4909      	ldr	r1, [pc, #36]	; (8544 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    8520:	1d09      	adds	r1, r1, #4
    8522:	6008      	str	r0, [r1, #0]
    8524:	4809      	ldr	r0, [pc, #36]	; (854c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    8526:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    852a:	b2c0      	uxtb	r0, r0
    852c:	2803      	cmp	r0, #3
    852e:	d001      	beq.n	8534 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    8530:	280b      	cmp	r0, #11
    8532:	d104      	bne.n	853e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    8534:	f240 21ea 	movw	r1, #746	; 0x2ea
    8538:	203e      	movs	r0, #62	; 0x3e
    853a:	f7f8 fa6f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    853e:	bd10      	pop	{r4, pc}
    8540:	00100108 	.word	0x00100108
    8544:	40001514 	.word	0x40001514
    8548:	02030000 	.word	0x02030000
    854c:	40001000 	.word	0x40001000

00008550 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    8550:	4901      	ldr	r1, [pc, #4]	; (8558 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    8552:	7588      	strb	r0, [r1, #22]
    8554:	4770      	bx	lr
    8556:	0000      	.short	0x0000
    8558:	200013a4 	.word	0x200013a4

0000855c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    855c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8560:	4851      	ldr	r0, [pc, #324]	; (86a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    8562:	f04f 0a01 	mov.w	sl, #1
    8566:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    856a:	484f      	ldr	r0, [pc, #316]	; (86a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    856c:	300c      	adds	r0, #12
    856e:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    8572:	f008 fb95 	bl	10ca0 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    8576:	4c4d      	ldr	r4, [pc, #308]	; (86ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    8578:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    857c:	f000 f8e0 	bl	8740 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    8580:	494b      	ldr	r1, [pc, #300]	; (86b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8582:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8584:	6008      	str	r0, [r1, #0]
    8586:	f8df 812c 	ldr.w	r8, [pc, #300]	; 86b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    858a:	2000      	movs	r0, #0
    858c:	6260      	str	r0, [r4, #36]	; 0x24
    858e:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    8592:	f240 131d 	movw	r3, #285	; 0x11d
    8596:	439a      	bics	r2, r3
    8598:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    859c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    85a0:	f000 f94e 	bl	8840 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>
    85a4:	4605      	mov	r5, r0
    85a6:	4840      	ldr	r0, [pc, #256]	; (86a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    85a8:	3008      	adds	r0, #8
    85aa:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    85ae:	4e3e      	ldr	r6, [pc, #248]	; (86a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    85b0:	61e0      	str	r0, [r4, #28]
    85b2:	1d36      	adds	r6, r6, #4
    85b4:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    85b8:	61a0      	str	r0, [r4, #24]
    85ba:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    85be:	7d21      	ldrb	r1, [r4, #20]
    85c0:	f884 1020 	strb.w	r1, [r4, #32]
    85c4:	7a61      	ldrb	r1, [r4, #9]
    85c6:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    85ca:	46a1      	mov	r9, r4
    85cc:	2400      	movs	r4, #0
    85ce:	4639      	mov	r1, r7
    85d0:	4628      	mov	r0, r5
    85d2:	f000 f983 	bl	88dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x380>
    85d6:	b910      	cbnz	r0, 85de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    85d8:	f8c8 a010 	str.w	sl, [r8, #16]
    85dc:	2401      	movs	r4, #1
    85de:	4f33      	ldr	r7, [pc, #204]	; (86ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    85e0:	07e8      	lsls	r0, r5, #31
    85e2:	f1a7 0710 	sub.w	r7, r7, #16
    85e6:	d120      	bne.n	862a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    85e8:	07a8      	lsls	r0, r5, #30
    85ea:	d527      	bpl.n	863c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    85ec:	f008 fc77 	bl	10ede <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    85f0:	b9f0      	cbnz	r0, 8630 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    85f2:	f008 fc64 	bl	10ebe <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    85f6:	b9d8      	cbnz	r0, 8630 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    85f8:	482f      	ldr	r0, [pc, #188]	; (86b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    85fa:	6800      	ldr	r0, [r0, #0]
    85fc:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    8600:	f3c0 6300 	ubfx	r3, r0, #24, #1
    8604:	f000 020f 	and.w	r2, r0, #15
    8608:	f3c0 1103 	ubfx	r1, r0, #4, #4
    860c:	f3c0 2803 	ubfx	r8, r0, #8, #4
    8610:	b173      	cbz	r3, 8630 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    8612:	b11a      	cbz	r2, 861c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    8614:	b111      	cbz	r1, 861c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    8616:	f1b8 0f00 	cmp.w	r8, #0
    861a:	d109      	bne.n	8630 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    861c:	f3c0 4004 	ubfx	r0, r0, #16, #5
    8620:	2801      	cmp	r0, #1
    8622:	d105      	bne.n	8630 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    8624:	f1bc 0f03 	cmp.w	ip, #3
    8628:	d202      	bcs.n	8630 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    862a:	6838      	ldr	r0, [r7, #0]
    862c:	4780      	blx	r0
    862e:	e00e      	b.n	864e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    8630:	f345 0080 	sbfx	r0, r5, #2, #1
    8634:	4621      	mov	r1, r4
    8636:	1c40      	adds	r0, r0, #1
    8638:	687a      	ldr	r2, [r7, #4]
    863a:	e007      	b.n	864c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    863c:	f015 0f28 	tst.w	r5, #40	; 0x28
    8640:	d005      	beq.n	864e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    8642:	f345 1140 	sbfx	r1, r5, #5, #1
    8646:	68ba      	ldr	r2, [r7, #8]
    8648:	4620      	mov	r0, r4
    864a:	1c49      	adds	r1, r1, #1
    864c:	4790      	blx	r2
    864e:	06e8      	lsls	r0, r5, #27
    8650:	d501      	bpl.n	8656 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    8652:	68f8      	ldr	r0, [r7, #12]
    8654:	4780      	blx	r0
    8656:	f899 1009 	ldrb.w	r1, [r9, #9]
    865a:	4648      	mov	r0, r9
    865c:	2902      	cmp	r1, #2
    865e:	d120      	bne.n	86a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    8660:	7b01      	ldrb	r1, [r0, #12]
    8662:	2900      	cmp	r1, #0
    8664:	d01d      	beq.n	86a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    8666:	2902      	cmp	r1, #2
    8668:	d004      	beq.n	8674 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    866a:	2901      	cmp	r1, #1
    866c:	d009      	beq.n	8682 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    866e:	f640 4156 	movw	r1, #3158	; 0xc56
    8672:	e00d      	b.n	8690 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    8674:	69c1      	ldr	r1, [r0, #28]
    8676:	f8d9 0010 	ldr.w	r0, [r9, #16]
    867a:	4408      	add	r0, r1
    867c:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    8680:	e00b      	b.n	869a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    8682:	6901      	ldr	r1, [r0, #16]
    8684:	f8d9 001c 	ldr.w	r0, [r9, #28]
    8688:	4281      	cmp	r1, r0
    868a:	d804      	bhi.n	8696 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    868c:	f640 4157 	movw	r1, #3159	; 0xc57
    8690:	203e      	movs	r0, #62	; 0x3e
    8692:	f7f8 f9c3 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8696:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    869a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    869e:	f000 b961 	b.w	8964 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    86a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    86a6:	0000      	.short	0x0000
    86a8:	40008000 	.word	0x40008000
    86ac:	200013a4 	.word	0x200013a4
    86b0:	4001f508 	.word	0x4001f508
    86b4:	40001000 	.word	0x40001000
    86b8:	40001450 	.word	0x40001450
    86bc:	480b      	ldr	r0, [pc, #44]	; (86ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    86be:	7d81      	ldrb	r1, [r0, #22]
    86c0:	480b      	ldr	r0, [pc, #44]	; (86f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    86c2:	5c40      	ldrb	r0, [r0, r1]
    86c4:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    86c8:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    86cc:	d204      	bcs.n	86d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    86ce:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    86d2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    86d6:	e001      	b.n	86dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    86d8:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    86dc:	4a05      	ldr	r2, [pc, #20]	; (86f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    86de:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    86e2:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    86e6:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    86ea:	4770      	bx	lr
    86ec:	200013a4 	.word	0x200013a4
    86f0:	00008b16 	.word	0x00008b16
    86f4:	40001000 	.word	0x40001000
    86f8:	b508      	push	{r3, lr}
    86fa:	490b      	ldr	r1, [pc, #44]	; (8728 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    86fc:	466b      	mov	r3, sp
    86fe:	f991 2015 	ldrsb.w	r2, [r1, #21]
    8702:	7d89      	ldrb	r1, [r1, #22]
    8704:	f000 faaa 	bl	8c5c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    8708:	f99d 0000 	ldrsb.w	r0, [sp]
    870c:	f000 fa7a 	bl	8c04 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    8710:	f10d 0001 	add.w	r0, sp, #1
    8714:	f004 fa9e 	bl	cc54 <mpsl_fem_pa_gain_set>
    8718:	2800      	cmp	r0, #0
    871a:	d004      	beq.n	8726 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    871c:	f240 51e6 	movw	r1, #1510	; 0x5e6
    8720:	203e      	movs	r0, #62	; 0x3e
    8722:	f7f8 f97b 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8726:	bd08      	pop	{r3, pc}
    8728:	200013a4 	.word	0x200013a4
    872c:	4803      	ldr	r0, [pc, #12]	; (873c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    872e:	7a01      	ldrb	r1, [r0, #8]
    8730:	2901      	cmp	r1, #1
    8732:	d102      	bne.n	873a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
    8734:	7a80      	ldrb	r0, [r0, #10]
    8736:	f7ff bfdf 	b.w	86f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    873a:	4770      	bx	lr
    873c:	200013a4 	.word	0x200013a4
    8740:	480d      	ldr	r0, [pc, #52]	; (8778 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
    8742:	b510      	push	{r4, lr}
    8744:	7a40      	ldrb	r0, [r0, #9]
    8746:	2801      	cmp	r0, #1
    8748:	d00c      	beq.n	8764 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    874a:	2802      	cmp	r0, #2
    874c:	d113      	bne.n	8776 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    874e:	f004 fa63 	bl	cc18 <mpsl_fem_lna_configuration_clear>
    8752:	2800      	cmp	r0, #0
    8754:	d00f      	beq.n	8776 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8756:	1c40      	adds	r0, r0, #1
    8758:	d00d      	beq.n	8776 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    875a:	f640 01ab 	movw	r1, #2219	; 0x8ab
    875e:	203e      	movs	r0, #62	; 0x3e
    8760:	f7f8 f95c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8764:	f004 fa6a 	bl	cc3c <mpsl_fem_pa_configuration_clear>
    8768:	2800      	cmp	r0, #0
    876a:	d004      	beq.n	8776 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    876c:	1c40      	adds	r0, r0, #1
    876e:	d002      	beq.n	8776 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8770:	f640 01a5 	movw	r1, #2213	; 0x8a5
    8774:	e7f3      	b.n	875e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
    8776:	bd10      	pop	{r4, pc}
    8778:	200013a4 	.word	0x200013a4
    877c:	4808      	ldr	r0, [pc, #32]	; (87a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
    877e:	2100      	movs	r1, #0
    8780:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    8784:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8788:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    878c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    8790:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    8794:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    8798:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    879c:	4770      	bx	lr
    879e:	0000      	.short	0x0000
    87a0:	40001000 	.word	0x40001000
    87a4:	4818      	ldr	r0, [pc, #96]	; (8808 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>)
    87a6:	b510      	push	{r4, lr}
    87a8:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    87ac:	07c1      	lsls	r1, r0, #31
    87ae:	d029      	beq.n	8804 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    87b0:	0781      	lsls	r1, r0, #30
    87b2:	d514      	bpl.n	87de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    87b4:	4815      	ldr	r0, [pc, #84]	; (880c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    87b6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    87ba:	f041 0101 	orr.w	r1, r1, #1
    87be:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    87c2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    87c6:	b2c0      	uxtb	r0, r0
    87c8:	280b      	cmp	r0, #11
    87ca:	d005      	beq.n	87d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    87cc:	280a      	cmp	r0, #10
    87ce:	d003      	beq.n	87d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    87d0:	2803      	cmp	r0, #3
    87d2:	d001      	beq.n	87d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    87d4:	2802      	cmp	r0, #2
    87d6:	d115      	bne.n	8804 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    87d8:	f240 610f 	movw	r1, #1551	; 0x60f
    87dc:	e00f      	b.n	87fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    87de:	0740      	lsls	r0, r0, #29
    87e0:	d510      	bpl.n	8804 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    87e2:	480a      	ldr	r0, [pc, #40]	; (880c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    87e4:	490a      	ldr	r1, [pc, #40]	; (8810 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    87e6:	3008      	adds	r0, #8
    87e8:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    87ec:	f44f 71a0 	mov.w	r1, #320	; 0x140
    87f0:	4808      	ldr	r0, [pc, #32]	; (8814 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
    87f2:	f008 f8d1 	bl	10998 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    87f6:	2800      	cmp	r0, #0
    87f8:	d004      	beq.n	8804 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    87fa:	f240 6117 	movw	r1, #1559	; 0x617
    87fe:	203e      	movs	r0, #62	; 0x3e
    8800:	f7f8 f90c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8804:	bd10      	pop	{r4, pc}
    8806:	0000      	.short	0x0000
    8808:	200013a4 	.word	0x200013a4
    880c:	40001000 	.word	0x40001000
    8810:	4001f098 	.word	0x4001f098
    8814:	40008000 	.word	0x40008000
    8818:	4808      	ldr	r0, [pc, #32]	; (883c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>)
    881a:	4601      	mov	r1, r0
    881c:	79c2      	ldrb	r2, [r0, #7]
    881e:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    8822:	b112      	cbz	r2, 882a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ce>
    8824:	2a01      	cmp	r2, #1
    8826:	d003      	beq.n	8830 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    8828:	e006      	b.n	8838 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    882a:	f041 0102 	orr.w	r1, r1, #2
    882e:	e001      	b.n	8834 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
    8830:	f041 0104 	orr.w	r1, r1, #4
    8834:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    8838:	f7ff bfb4 	b.w	87a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    883c:	200013a4 	.word	0x200013a4
    8840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8844:	4d22      	ldr	r5, [pc, #136]	; (88d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x374>)
    8846:	2400      	movs	r4, #0
    8848:	7b28      	ldrb	r0, [r5, #12]
    884a:	b138      	cbz	r0, 885c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    884c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    8850:	4820      	ldr	r0, [pc, #128]	; (88d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>)
    8852:	f008 f8a1 	bl	10998 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8856:	b108      	cbz	r0, 885c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    8858:	2701      	movs	r7, #1
    885a:	e000      	b.n	885e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x302>
    885c:	2700      	movs	r7, #0
    885e:	7a68      	ldrb	r0, [r5, #9]
    8860:	4e1d      	ldr	r6, [pc, #116]	; (88d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x37c>)
    8862:	f44f 7186 	mov.w	r1, #268	; 0x10c
    8866:	2801      	cmp	r0, #1
    8868:	d002      	beq.n	8870 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x314>
    886a:	2802      	cmp	r0, #2
    886c:	d006      	beq.n	887c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x320>
    886e:	e016      	b.n	889e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8870:	4630      	mov	r0, r6
    8872:	f008 f88c 	bl	1098e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8876:	b190      	cbz	r0, 889e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8878:	2408      	movs	r4, #8
    887a:	e010      	b.n	889e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    887c:	4630      	mov	r0, r6
    887e:	f008 f886 	bl	1098e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8882:	b100      	cbz	r0, 8886 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x32a>
    8884:	2402      	movs	r4, #2
    8886:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    888a:	43c0      	mvns	r0, r0
    888c:	f340 0000 	sbfx	r0, r0, #0, #1
    8890:	1c40      	adds	r0, r0, #1
    8892:	d101      	bne.n	8898 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x33c>
    8894:	f044 0404 	orr.w	r4, r4, #4
    8898:	b10f      	cbz	r7, 889e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    889a:	f044 0401 	orr.w	r4, r4, #1
    889e:	f014 0f0b 	tst.w	r4, #11
    88a2:	d107      	bne.n	88b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    88a4:	f44f 7188 	mov.w	r1, #272	; 0x110
    88a8:	4630      	mov	r0, r6
    88aa:	f008 f870 	bl	1098e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    88ae:	b108      	cbz	r0, 88b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    88b0:	f044 0410 	orr.w	r4, r4, #16
    88b4:	f7ff ff62 	bl	877c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
    88b8:	06e0      	lsls	r0, r4, #27
    88ba:	d506      	bpl.n	88ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    88bc:	0720      	lsls	r0, r4, #28
    88be:	d404      	bmi.n	88ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    88c0:	7a68      	ldrb	r0, [r5, #9]
    88c2:	2801      	cmp	r0, #1
    88c4:	d101      	bne.n	88ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    88c6:	f044 0420 	orr.w	r4, r4, #32
    88ca:	4620      	mov	r0, r4
    88cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    88d0:	200013a4 	.word	0x200013a4
    88d4:	40008000 	.word	0x40008000
    88d8:	40001000 	.word	0x40001000
    88dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88e0:	4c1a      	ldr	r4, [pc, #104]	; (894c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f0>)
    88e2:	460d      	mov	r5, r1
    88e4:	7a21      	ldrb	r1, [r4, #8]
    88e6:	b129      	cbz	r1, 88f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x398>
    88e8:	f010 0f11 	tst.w	r0, #17
    88ec:	d007      	beq.n	88fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a2>
    88ee:	f7ff fb0b 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    88f2:	e024      	b.n	893e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    88f4:	f000 f890 	bl	8a18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    88f8:	2000      	movs	r0, #0
    88fa:	7320      	strb	r0, [r4, #12]
    88fc:	e01f      	b.n	893e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    88fe:	2901      	cmp	r1, #1
    8900:	d001      	beq.n	8906 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
    8902:	2601      	movs	r6, #1
    8904:	e000      	b.n	8908 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ac>
    8906:	2600      	movs	r6, #0
    8908:	79e0      	ldrb	r0, [r4, #7]
    890a:	2801      	cmp	r0, #1
    890c:	d00e      	beq.n	892c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d0>
    890e:	2700      	movs	r7, #0
    8910:	f000 f882 	bl	8a18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    8914:	2196      	movs	r1, #150	; 0x96
    8916:	4630      	mov	r0, r6
    8918:	f000 f894 	bl	8a44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e8>
    891c:	4601      	mov	r1, r0
    891e:	b14f      	cbz	r7, 8934 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d8>
    8920:	353b      	adds	r5, #59	; 0x3b
    8922:	428d      	cmp	r5, r1
    8924:	d904      	bls.n	8930 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d4>
    8926:	2000      	movs	r0, #0
    8928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    892c:	2701      	movs	r7, #1
    892e:	e7ef      	b.n	8910 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
    8930:	2001      	movs	r0, #1
    8932:	71e0      	strb	r0, [r4, #7]
    8934:	7aa2      	ldrb	r2, [r4, #10]
    8936:	4630      	mov	r0, r6
    8938:	f7ff fd2c 	bl	8394 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    893c:	b108      	cbz	r0, 8942 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
    893e:	2001      	movs	r0, #1
    8940:	e7f2      	b.n	8928 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3cc>
    8942:	f640 21a5 	movw	r1, #2725	; 0xaa5
    8946:	203e      	movs	r0, #62	; 0x3e
    8948:	f7f8 f868 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    894c:	200013a4 	.word	0x200013a4
    8950:	4803      	ldr	r0, [pc, #12]	; (8960 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    8952:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    8956:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    895a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    895e:	4770      	bx	lr
    8960:	40001000 	.word	0x40001000
    8964:	4804      	ldr	r0, [pc, #16]	; (8978 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    8966:	6a41      	ldr	r1, [r0, #36]	; 0x24
    8968:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    896c:	6241      	str	r1, [r0, #36]	; 0x24
    896e:	4903      	ldr	r1, [pc, #12]	; (897c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    8970:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    8974:	6008      	str	r0, [r1, #0]
    8976:	4770      	bx	lr
    8978:	200013a4 	.word	0x200013a4
    897c:	4001f504 	.word	0x4001f504
    8980:	4a07      	ldr	r2, [pc, #28]	; (89a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    8982:	2000      	movs	r0, #0
    8984:	3208      	adds	r2, #8
    8986:	4906      	ldr	r1, [pc, #24]	; (89a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    8988:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    898c:	1d0a      	adds	r2, r1, #4
    898e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8992:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8996:	4902      	ldr	r1, [pc, #8]	; (89a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    8998:	310c      	adds	r1, #12
    899a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    899e:	4770      	bx	lr
    89a0:	40008000 	.word	0x40008000
    89a4:	4903      	ldr	r1, [pc, #12]	; (89b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x458>)
    89a6:	79c9      	ldrb	r1, [r1, #7]
    89a8:	2900      	cmp	r1, #0
    89aa:	d102      	bne.n	89b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x456>
    89ac:	4902      	ldr	r1, [pc, #8]	; (89b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45c>)
    89ae:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    89b2:	4770      	bx	lr
    89b4:	200013a4 	.word	0x200013a4
    89b8:	4001f098 	.word	0x4001f098
    89bc:	b510      	push	{r4, lr}
    89be:	4a14      	ldr	r2, [pc, #80]	; (8a10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    89c0:	b120      	cbz	r0, 89cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
    89c2:	2801      	cmp	r0, #1
    89c4:	d011      	beq.n	89ea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48e>
    89c6:	f240 7153 	movw	r1, #1875	; 0x753
    89ca:	e01c      	b.n	8a06 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    89cc:	f101 0028 	add.w	r0, r1, #40	; 0x28
    89d0:	e9c2 1002 	strd	r1, r0, [r2, #8]
    89d4:	490f      	ldr	r1, [pc, #60]	; (8a14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    89d6:	480e      	ldr	r0, [pc, #56]	; (8a10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    89d8:	f004 f936 	bl	cc48 <mpsl_fem_pa_configuration_set>
    89dc:	2800      	cmp	r0, #0
    89de:	d015      	beq.n	8a0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    89e0:	1c40      	adds	r0, r0, #1
    89e2:	d013      	beq.n	8a0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    89e4:	f240 7142 	movw	r1, #1858	; 0x742
    89e8:	e00d      	b.n	8a06 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    89ea:	f101 0029 	add.w	r0, r1, #41	; 0x29
    89ee:	e9c2 1002 	strd	r1, r0, [r2, #8]
    89f2:	4908      	ldr	r1, [pc, #32]	; (8a14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    89f4:	4806      	ldr	r0, [pc, #24]	; (8a10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    89f6:	f004 f915 	bl	cc24 <mpsl_fem_lna_configuration_set>
    89fa:	2800      	cmp	r0, #0
    89fc:	d006      	beq.n	8a0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    89fe:	1c40      	adds	r0, r0, #1
    8a00:	d004      	beq.n	8a0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    8a02:	f240 714f 	movw	r1, #1871	; 0x74f
    8a06:	203e      	movs	r0, #62	; 0x3e
    8a08:	f7f8 f808 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a0c:	bd10      	pop	{r4, pc}
    8a0e:	0000      	.short	0x0000
    8a10:	200002d0 	.word	0x200002d0
    8a14:	00008b40 	.word	0x00008b40
    8a18:	4802      	ldr	r0, [pc, #8]	; (8a24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c8>)
    8a1a:	2100      	movs	r1, #0
    8a1c:	71c1      	strb	r1, [r0, #7]
    8a1e:	7201      	strb	r1, [r0, #8]
    8a20:	7241      	strb	r1, [r0, #9]
    8a22:	4770      	bx	lr
    8a24:	200013a4 	.word	0x200013a4
    8a28:	4a05      	ldr	r2, [pc, #20]	; (8a40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e4>)
    8a2a:	79d2      	ldrb	r2, [r2, #7]
    8a2c:	2a01      	cmp	r2, #1
    8a2e:	d006      	beq.n	8a3e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e2>
    8a30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a34:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8a38:	fbb1 f1f2 	udiv	r1, r1, r2
    8a3c:	1a40      	subs	r0, r0, r1
    8a3e:	4770      	bx	lr
    8a40:	200013a4 	.word	0x200013a4
    8a44:	b570      	push	{r4, r5, r6, lr}
    8a46:	4c13      	ldr	r4, [pc, #76]	; (8a94 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x538>)
    8a48:	4603      	mov	r3, r0
    8a4a:	460d      	mov	r5, r1
    8a4c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8a50:	2000      	movs	r0, #0
    8a52:	b15a      	cbz	r2, 8a6c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    8a54:	4621      	mov	r1, r4
    8a56:	f891 1020 	ldrb.w	r1, [r1, #32]
    8a5a:	b163      	cbz	r3, 8a76 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x51a>
    8a5c:	2b01      	cmp	r3, #1
    8a5e:	d111      	bne.n	8a84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x528>
    8a60:	2a01      	cmp	r2, #1
    8a62:	4628      	mov	r0, r5
    8a64:	d012      	beq.n	8a8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x530>
    8a66:	f007 ff9c 	bl	109a2 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8a6a:	e009      	b.n	8a80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    8a6c:	f640 0158 	movw	r1, #2136	; 0x858
    8a70:	203e      	movs	r0, #62	; 0x3e
    8a72:	f7f7 ffd3 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a76:	2a01      	cmp	r2, #1
    8a78:	4628      	mov	r0, r5
    8a7a:	d004      	beq.n	8a86 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x52a>
    8a7c:	f007 ff9f 	bl	109be <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    8a80:	69e1      	ldr	r1, [r4, #28]
    8a82:	4408      	add	r0, r1
    8a84:	bd70      	pop	{r4, r5, r6, pc}
    8a86:	f000 f8d1 	bl	8c2c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    8a8a:	e7f9      	b.n	8a80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    8a8c:	f000 f8c0 	bl	8c10 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    8a90:	e7f6      	b.n	8a80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    8a92:	0000      	.short	0x0000
    8a94:	200013a4 	.word	0x200013a4
    8a98:	b510      	push	{r4, lr}
    8a9a:	f7ff fc4f 	bl	833c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8a9e:	f7ff fe0d 	bl	86bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    8aa2:	f7ff fe43 	bl	872c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    8aa6:	f7ff ff53 	bl	8950 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    8aaa:	f008 fa18 	bl	10ede <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8aae:	2800      	cmp	r0, #0
    8ab0:	d108      	bne.n	8ac4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    8ab2:	f008 fa04 	bl	10ebe <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8ab6:	2800      	cmp	r0, #0
    8ab8:	d104      	bne.n	8ac4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    8aba:	4803      	ldr	r0, [pc, #12]	; (8ac8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x56c>)
    8abc:	6801      	ldr	r1, [r0, #0]
    8abe:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    8ac2:	6001      	str	r1, [r0, #0]
    8ac4:	bd10      	pop	{r4, pc}
    8ac6:	0000      	.short	0x0000
    8ac8:	40001568 	.word	0x40001568
    8acc:	b510      	push	{r4, lr}
    8ace:	4604      	mov	r4, r0
    8ad0:	f7ff fc34 	bl	833c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8ad4:	f7ff fdf2 	bl	86bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    8ad8:	4620      	mov	r0, r4
    8ada:	f7ff fe0d 	bl	86f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    8ade:	f008 f9fe 	bl	10ede <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8ae2:	2800      	cmp	r0, #0
    8ae4:	d00d      	beq.n	8b02 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a6>
    8ae6:	4a09      	ldr	r2, [pc, #36]	; (8b0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b0>)
    8ae8:	6811      	ldr	r1, [r2, #0]
    8aea:	0650      	lsls	r0, r2, #25
    8aec:	2c02      	cmp	r4, #2
    8aee:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    8af2:	d007      	beq.n	8b04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a8>
    8af4:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8af8:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8afc:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8b00:	6010      	str	r0, [r2, #0]
    8b02:	bd10      	pop	{r4, pc}
    8b04:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8b08:	e7f6      	b.n	8af8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x59c>
    8b0a:	0000      	.short	0x0000
    8b0c:	40001588 	.word	0x40001588
    8b10:	a62c0000 	.word	0xa62c0000
    8b14:	0604a1e0 	.word	0x0604a1e0
    8b18:	0e0c0a08 	.word	0x0e0c0a08
    8b1c:	16141210 	.word	0x16141210
    8b20:	201e1c18 	.word	0x201e1c18
    8b24:	28262422 	.word	0x28262422
    8b28:	302e2c2a 	.word	0x302e2c2a
    8b2c:	38363432 	.word	0x38363432
    8b30:	403e3c3a 	.word	0x403e3c3a
    8b34:	48464442 	.word	0x48464442
    8b38:	024e4c4a 	.word	0x024e4c4a
    8b3c:	0000501a 	.word	0x0000501a
    8b40:	00000001 	.word	0x00000001
    8b44:	40001110 	.word	0x40001110
	...
    8b5c:	00001e14 	.word	0x00001e14
    8b60:	00001130 	.word	0x00001130
    8b64:	00000000 	.word	0x00000000
    8b68:	00000028 	.word	0x00000028
    8b6c:	00000018 	.word	0x00000018
    8b70:	00000000 	.word	0x00000000
    8b74:	00001e14 	.word	0x00001e14
    8b78:	00001130 	.word	0x00001130
    8b7c:	00000000 	.word	0x00000000
    8b80:	00001770 	.word	0x00001770
    8b84:	00000fa0 	.word	0x00000fa0

00008b88 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    8b88:	b570      	push	{r4, r5, r6, lr}
    8b8a:	4605      	mov	r5, r0
    8b8c:	4614      	mov	r4, r2
    8b8e:	4608      	mov	r0, r1
    8b90:	f7ff fbfa 	bl	8388 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8b94:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8b98:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    8b9c:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    8ba0:	4807      	ldr	r0, [pc, #28]	; (8bc0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    8ba2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8ba6:	4408      	add	r0, r1
    8ba8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8bac:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8bb0:	fbb0 f5f1 	udiv	r5, r0, r1
    8bb4:	4620      	mov	r0, r4
    8bb6:	f7ff fbbb 	bl	8330 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8bba:	4428      	add	r0, r5
    8bbc:	1d40      	adds	r0, r0, #5
    8bbe:	bd70      	pop	{r4, r5, r6, pc}
    8bc0:	00008c50 	.word	0x00008c50

00008bc4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8bc4:	b570      	push	{r4, r5, r6, lr}
    8bc6:	4d0e      	ldr	r5, [pc, #56]	; (8c00 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8bc8:	461c      	mov	r4, r3
    8bca:	3d08      	subs	r5, #8
    8bcc:	4b0c      	ldr	r3, [pc, #48]	; (8c00 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8bce:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    8bd2:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    8bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8bda:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    8bde:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8be2:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8be6:	4418      	add	r0, r3
    8be8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8bec:	fbb0 f5f1 	udiv	r5, r0, r1
    8bf0:	4610      	mov	r0, r2
    8bf2:	f7ff fb9d 	bl	8330 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8bf6:	4428      	add	r0, r5
    8bf8:	4420      	add	r0, r4
    8bfa:	1d40      	adds	r0, r0, #5
    8bfc:	bd70      	pop	{r4, r5, r6, pc}
    8bfe:	0000      	.short	0x0000
    8c00:	00008c50 	.word	0x00008c50

00008c04 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8c04:	4901      	ldr	r1, [pc, #4]	; (8c0c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8c06:	b2c0      	uxtb	r0, r0
    8c08:	6008      	str	r0, [r1, #0]
    8c0a:	4770      	bx	lr
    8c0c:	4000150c 	.word	0x4000150c

00008c10 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8c10:	4a05      	ldr	r2, [pc, #20]	; (8c28 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8c12:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8c16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c1a:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8c1e:	fbb1 f1f2 	udiv	r1, r1, r2
    8c22:	4408      	add	r0, r1
    8c24:	1e80      	subs	r0, r0, #2
    8c26:	4770      	bx	lr
    8c28:	00008c48 	.word	0x00008c48

00008c2c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8c2c:	4a05      	ldr	r2, [pc, #20]	; (8c44 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8c2e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8c32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c36:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8c3a:	fbb1 f1f2 	udiv	r1, r1, r2
    8c3e:	4408      	add	r0, r1
    8c40:	4770      	bx	lr
    8c42:	0000      	.short	0x0000
    8c44:	00008c48 	.word	0x00008c48
    8c48:	05dc0000 	.word	0x05dc0000
    8c4c:	000003e8 	.word	0x000003e8
    8c50:	00000000 	.word	0x00000000
    8c54:	00001e14 	.word	0x00001e14
    8c58:	00001130 	.word	0x00001130

00008c5c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8c60:	461e      	mov	r6, r3
    8c62:	4617      	mov	r7, r2
    8c64:	460c      	mov	r4, r1
    8c66:	4605      	mov	r5, r0
    8c68:	f000 f856 	bl	8d18 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8c6c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8d14 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8c70:	4680      	mov	r8, r0
    8c72:	f899 0000 	ldrb.w	r0, [r9]
    8c76:	42a8      	cmp	r0, r5
    8c78:	d110      	bne.n	8c9c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c7a:	f899 1001 	ldrb.w	r1, [r9, #1]
    8c7e:	4648      	mov	r0, r9
    8c80:	42a1      	cmp	r1, r4
    8c82:	d10b      	bne.n	8c9c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c84:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8c88:	42b9      	cmp	r1, r7
    8c8a:	d107      	bne.n	8c9c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c8c:	78c2      	ldrb	r2, [r0, #3]
    8c8e:	4542      	cmp	r2, r8
    8c90:	d104      	bne.n	8c9c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c92:	8881      	ldrh	r1, [r0, #4]
    8c94:	8031      	strh	r1, [r6, #0]
    8c96:	7980      	ldrb	r0, [r0, #6]
    8c98:	70b0      	strb	r0, [r6, #2]
    8c9a:	e037      	b.n	8d0c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8c9c:	463a      	mov	r2, r7
    8c9e:	4621      	mov	r1, r4
    8ca0:	2d01      	cmp	r5, #1
    8ca2:	d009      	beq.n	8cb8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    8ca4:	2d02      	cmp	r5, #2
    8ca6:	d009      	beq.n	8cbc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8ca8:	2d04      	cmp	r5, #4
    8caa:	d009      	beq.n	8cc0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8cac:	2d08      	cmp	r5, #8
    8cae:	d009      	beq.n	8cc4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8cb0:	f240 4161 	movw	r1, #1121	; 0x461
    8cb4:	2006      	movs	r0, #6
    8cb6:	e00c      	b.n	8cd2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8cb8:	2000      	movs	r0, #0
    8cba:	e004      	b.n	8cc6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8cbc:	2001      	movs	r0, #1
    8cbe:	e002      	b.n	8cc6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8cc0:	2003      	movs	r0, #3
    8cc2:	e000      	b.n	8cc6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8cc4:	2002      	movs	r0, #2
    8cc6:	466b      	mov	r3, sp
    8cc8:	f000 f89e 	bl	8e08 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8ccc:	b118      	cbz	r0, 8cd6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    8cce:	213d      	movs	r1, #61	; 0x3d
    8cd0:	2075      	movs	r0, #117	; 0x75
    8cd2:	f7f7 fea3 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cd6:	4620      	mov	r0, r4
    8cd8:	f7ff f90e 	bl	7ef8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8cdc:	4602      	mov	r2, r0
    8cde:	2300      	movs	r3, #0
    8ce0:	4631      	mov	r1, r6
    8ce2:	f99d 0000 	ldrsb.w	r0, [sp]
    8ce6:	f003 ffc1 	bl	cc6c <mpsl_fem_tx_power_split>
    8cea:	4601      	mov	r1, r0
    8cec:	f889 1007 	strb.w	r1, [r9, #7]
    8cf0:	8831      	ldrh	r1, [r6, #0]
    8cf2:	f8a9 1004 	strh.w	r1, [r9, #4]
    8cf6:	78b1      	ldrb	r1, [r6, #2]
    8cf8:	f889 1006 	strb.w	r1, [r9, #6]
    8cfc:	f889 5000 	strb.w	r5, [r9]
    8d00:	f889 4001 	strb.w	r4, [r9, #1]
    8d04:	f889 7002 	strb.w	r7, [r9, #2]
    8d08:	f889 8003 	strb.w	r8, [r9, #3]
    8d0c:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8d14:	20000376 	.word	0x20000376

00008d18 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8d18:	4801      	ldr	r0, [pc, #4]	; (8d20 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8d1a:	7800      	ldrb	r0, [r0, #0]
    8d1c:	4770      	bx	lr
    8d1e:	0000      	.short	0x0000
    8d20:	200002e8 	.word	0x200002e8

00008d24 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8d24:	b570      	push	{r4, r5, r6, lr}
    8d26:	4c17      	ldr	r4, [pc, #92]	; (8d84 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8d28:	7860      	ldrb	r0, [r4, #1]
    8d2a:	2800      	cmp	r0, #0
    8d2c:	d123      	bne.n	8d76 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8d2e:	2001      	movs	r0, #1
    8d30:	7060      	strb	r0, [r4, #1]
    8d32:	f008 f8ae 	bl	10e92 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8d36:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8d3a:	b928      	cbnz	r0, 8d48 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8d3c:	f008 f8df 	bl	10efe <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8d40:	b910      	cbnz	r0, 8d48 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8d42:	f008 f8e6 	bl	10f12 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8d46:	b120      	cbz	r0, 8d52 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8d48:	480f      	ldr	r0, [pc, #60]	; (8d88 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8d4a:	6060      	str	r0, [r4, #4]
    8d4c:	70a5      	strb	r5, [r4, #2]
    8d4e:	2008      	movs	r0, #8
    8d50:	e010      	b.n	8d74 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8d52:	f008 f873 	bl	10e3c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8d56:	b940      	cbnz	r0, 8d6a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d58:	f008 f87a 	bl	10e50 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8d5c:	b928      	cbnz	r0, 8d6a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d5e:	f008 f88e 	bl	10e7e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8d62:	b910      	cbnz	r0, 8d6a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d64:	f008 f89f 	bl	10ea6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8d68:	b130      	cbz	r0, 8d78 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8d6a:	4807      	ldr	r0, [pc, #28]	; (8d88 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8d6c:	3031      	adds	r0, #49	; 0x31
    8d6e:	6060      	str	r0, [r4, #4]
    8d70:	70a5      	strb	r5, [r4, #2]
    8d72:	2004      	movs	r0, #4
    8d74:	70e0      	strb	r0, [r4, #3]
    8d76:	bd70      	pop	{r4, r5, r6, pc}
    8d78:	f240 113f 	movw	r1, #319	; 0x13f
    8d7c:	2074      	movs	r0, #116	; 0x74
    8d7e:	f003 fdb7 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d82:	0000      	.short	0x0000
    8d84:	200002e8 	.word	0x200002e8
    8d88:	0001127d 	.word	0x0001127d

00008d8c <mpsl_tx_power_radio_supported_power_adjust>:
    8d8c:	4a06      	ldr	r2, [pc, #24]	; (8da8 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8d8e:	b500      	push	{lr}
    8d90:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8d94:	4290      	cmp	r0, r2
    8d96:	db01      	blt.n	8d9c <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8d98:	4610      	mov	r0, r2
    8d9a:	bd00      	pop	{pc}
    8d9c:	f000 f808 	bl	8db0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8da0:	4902      	ldr	r1, [pc, #8]	; (8dac <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8da2:	5608      	ldrsb	r0, [r1, r0]
    8da4:	bd00      	pop	{pc}
    8da6:	0000      	.short	0x0000
    8da8:	200002e8 	.word	0x200002e8
    8dac:	0001126f 	.word	0x0001126f

00008db0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8db0:	4602      	mov	r2, r0
    8db2:	4813      	ldr	r0, [pc, #76]	; (8e00 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    8db4:	b510      	push	{r4, lr}
    8db6:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8dba:	429a      	cmp	r2, r3
    8dbc:	db01      	blt.n	8dc2 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8dbe:	200d      	movs	r0, #13
    8dc0:	bd10      	pop	{r4, pc}
    8dc2:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8dc6:	429a      	cmp	r2, r3
    8dc8:	dc01      	bgt.n	8dce <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    8dca:	2000      	movs	r0, #0
    8dcc:	bd10      	pop	{r4, pc}
    8dce:	b101      	cbz	r1, 8dd2 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8dd0:	2101      	movs	r1, #1
    8dd2:	1ad4      	subs	r4, r2, r3
    8dd4:	6843      	ldr	r3, [r0, #4]
    8dd6:	5d18      	ldrb	r0, [r3, r4]
    8dd8:	4c0a      	ldr	r4, [pc, #40]	; (8e04 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8dda:	5624      	ldrsb	r4, [r4, r0]
    8ddc:	4294      	cmp	r4, r2
    8dde:	d0f5      	beq.n	8dcc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8de0:	4c08      	ldr	r4, [pc, #32]	; (8e04 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8de2:	4408      	add	r0, r1
    8de4:	343f      	adds	r4, #63	; 0x3f
    8de6:	b2c0      	uxtb	r0, r0
    8de8:	b2d2      	uxtb	r2, r2
    8dea:	42a3      	cmp	r3, r4
    8dec:	d1ee      	bne.n	8dcc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8dee:	2900      	cmp	r1, #0
    8df0:	d0ec      	beq.n	8dcc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8df2:	2a01      	cmp	r2, #1
    8df4:	d001      	beq.n	8dfa <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8df6:	2a02      	cmp	r2, #2
    8df8:	d1e8      	bne.n	8dcc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8dfa:	1c40      	adds	r0, r0, #1
    8dfc:	b2c0      	uxtb	r0, r0
    8dfe:	bd10      	pop	{r4, pc}
    8e00:	200002e8 	.word	0x200002e8
    8e04:	0001126f 	.word	0x0001126f

00008e08 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e0c:	461c      	mov	r4, r3
    8e0e:	4690      	mov	r8, r2
    8e10:	460d      	mov	r5, r1
    8e12:	4606      	mov	r6, r0
    8e14:	f06f 0715 	mvn.w	r7, #21
    8e18:	2804      	cmp	r0, #4
    8e1a:	d804      	bhi.n	8e26 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8e1c:	b11c      	cbz	r4, 8e26 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8e1e:	f007 fdd9 	bl	109d4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    8e22:	42a8      	cmp	r0, r5
    8e24:	d802      	bhi.n	8e2c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8e26:	4638      	mov	r0, r7
    8e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e2c:	4805      	ldr	r0, [pc, #20]	; (8e44 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8e2e:	4642      	mov	r2, r8
    8e30:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8e34:	b118      	cbz	r0, 8e3e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8e36:	5740      	ldrsb	r0, [r0, r5]
    8e38:	4282      	cmp	r2, r0
    8e3a:	dd00      	ble.n	8e3e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8e3c:	4602      	mov	r2, r0
    8e3e:	7022      	strb	r2, [r4, #0]
    8e40:	2000      	movs	r0, #0
    8e42:	e7f1      	b.n	8e28 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8e44:	200013d8 	.word	0x200013d8
    8e48:	b570      	push	{r4, r5, r6, lr}
    8e4a:	460d      	mov	r5, r1
    8e4c:	0004      	movs	r4, r0
    8e4e:	d00c      	beq.n	8e6a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
    8e50:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    8e54:	2100      	movs	r1, #0
    8e56:	2002      	movs	r0, #2
    8e58:	2d09      	cmp	r5, #9
    8e5a:	d26e      	bcs.n	8f3a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x132>
    8e5c:	e8df f005 	tbb	[pc, r5]
    8e60:	36361108 	.word	0x36361108
    8e64:	a6897166 	.word	0xa6897166
    8e68:	0094      	.short	0x0094
    8e6a:	f44f 71cb 	mov.w	r1, #406	; 0x196
    8e6e:	e0f7      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8e70:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8e74:	2804      	cmp	r0, #4
    8e76:	d07b      	beq.n	8f70 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x168>
    8e78:	2803      	cmp	r0, #3
    8e7a:	d0fc      	beq.n	8e76 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
    8e7c:	f240 11a1 	movw	r1, #417	; 0x1a1
    8e80:	e0ee      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8e82:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8e86:	2804      	cmp	r0, #4
    8e88:	d004      	beq.n	8e94 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    8e8a:	2803      	cmp	r0, #3
    8e8c:	d002      	beq.n	8e94 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    8e8e:	f240 11a5 	movw	r1, #421	; 0x1a5
    8e92:	e0e5      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8e94:	2005      	movs	r0, #5
    8e96:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8e9a:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    8e9e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    8ea2:	bbb8      	cbnz	r0, 8f14 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x10c>
    8ea4:	2100      	movs	r1, #0
    8ea6:	4620      	mov	r0, r4
    8ea8:	f007 fdf5 	bl	10a96 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd8>
    8eac:	7820      	ldrb	r0, [r4, #0]
    8eae:	2801      	cmp	r0, #1
    8eb0:	d007      	beq.n	8ec2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xba>
    8eb2:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    8eb6:	bf00      	nop
    8eb8:	e9c4 0106 	strd	r0, r1, [r4, #24]
    8ebc:	2100      	movs	r1, #0
    8ebe:	6a22      	ldr	r2, [r4, #32]
    8ec0:	e048      	b.n	8f54 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    8ec2:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    8ec6:	f001 fa3b 	bl	a340 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    8eca:	e7f5      	b.n	8eb8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xb0>
    8ecc:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    8ed0:	2904      	cmp	r1, #4
    8ed2:	d004      	beq.n	8ede <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xd6>
    8ed4:	2903      	cmp	r1, #3
    8ed6:	d002      	beq.n	8ede <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xd6>
    8ed8:	f240 11c3 	movw	r1, #451	; 0x1c3
    8edc:	e0c0      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8ede:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    8ee2:	b122      	cbz	r2, 8eee <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xe6>
    8ee4:	4621      	mov	r1, r4
    8ee6:	4630      	mov	r0, r6
    8ee8:	f007 fe26 	bl	10b38 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x17a>
    8eec:	e0b0      	b.n	9050 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    8eee:	2904      	cmp	r1, #4
    8ef0:	d000      	beq.n	8ef4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xec>
    8ef2:	2001      	movs	r0, #1
    8ef4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8ef8:	6a22      	ldr	r2, [r4, #32]
    8efa:	2d02      	cmp	r5, #2
    8efc:	d00b      	beq.n	8f16 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x10e>
    8efe:	2106      	movs	r1, #6
    8f00:	4630      	mov	r0, r6
    8f02:	4790      	blx	r2
    8f04:	2800      	cmp	r0, #0
    8f06:	d06d      	beq.n	8fe4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1dc>
    8f08:	7800      	ldrb	r0, [r0, #0]
    8f0a:	2800      	cmp	r0, #0
    8f0c:	d06a      	beq.n	8fe4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1dc>
    8f0e:	f240 11dd 	movw	r1, #477	; 0x1dd
    8f12:	e0a5      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f14:	e034      	b.n	8f80 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x178>
    8f16:	2105      	movs	r1, #5
    8f18:	4630      	mov	r0, r6
    8f1a:	4790      	blx	r2
    8f1c:	2800      	cmp	r0, #0
    8f1e:	d070      	beq.n	9002 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fa>
    8f20:	7800      	ldrb	r0, [r0, #0]
    8f22:	2800      	cmp	r0, #0
    8f24:	d06d      	beq.n	9002 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fa>
    8f26:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    8f2a:	e099      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f2c:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8f30:	2805      	cmp	r0, #5
    8f32:	d003      	beq.n	8f3c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x134>
    8f34:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    8f38:	e092      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f3a:	e080      	b.n	903e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x236>
    8f3c:	2102      	movs	r1, #2
    8f3e:	6a22      	ldr	r2, [r4, #32]
    8f40:	e008      	b.n	8f54 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    8f42:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8f46:	2805      	cmp	r0, #5
    8f48:	d002      	beq.n	8f50 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x148>
    8f4a:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    8f4e:	e087      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f50:	6a22      	ldr	r2, [r4, #32]
    8f52:	2101      	movs	r1, #1
    8f54:	4630      	mov	r0, r6
    8f56:	4790      	blx	r2
    8f58:	4601      	mov	r1, r0
    8f5a:	4620      	mov	r0, r4
    8f5c:	f007 fd46 	bl	109ec <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    8f60:	2802      	cmp	r0, #2
    8f62:	d075      	beq.n	9050 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    8f64:	b3e8      	cbz	r0, 8fe2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1da>
    8f66:	2801      	cmp	r0, #1
    8f68:	d06c      	beq.n	9044 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x23c>
    8f6a:	f240 212a 	movw	r1, #554	; 0x22a
    8f6e:	e077      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f70:	e070      	b.n	9054 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24c>
    8f72:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8f76:	2805      	cmp	r0, #5
    8f78:	d002      	beq.n	8f80 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x178>
    8f7a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    8f7e:	e06f      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8f84:	f000 b89e 	b.w	90c4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2bc>
    8f88:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8f8c:	2805      	cmp	r0, #5
    8f8e:	d002      	beq.n	8f96 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x18e>
    8f90:	f240 11f5 	movw	r1, #501	; 0x1f5
    8f94:	e064      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f96:	6a22      	ldr	r2, [r4, #32]
    8f98:	210a      	movs	r1, #10
    8f9a:	4630      	mov	r0, r6
    8f9c:	4790      	blx	r2
    8f9e:	4601      	mov	r1, r0
    8fa0:	4620      	mov	r0, r4
    8fa2:	f007 fd23 	bl	109ec <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    8fa6:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    8faa:	e059      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8fac:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    8fb0:	2a05      	cmp	r2, #5
    8fb2:	d007      	beq.n	8fc4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1bc>
    8fb4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    8fb8:	b10b      	cbz	r3, 8fbe <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1b6>
    8fba:	2a03      	cmp	r2, #3
    8fbc:	d002      	beq.n	8fc4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1bc>
    8fbe:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    8fc2:	e04d      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8fc4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    8fc8:	b12a      	cbz	r2, 8fd6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1ce>
    8fca:	4621      	mov	r1, r4
    8fcc:	4630      	mov	r0, r6
    8fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8fd2:	f007 bdb1 	b.w	10b38 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x17a>
    8fd6:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    8fda:	b19a      	cbz	r2, 9004 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fc>
    8fdc:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    8fe0:	e001      	b.n	8fe6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1de>
    8fe2:	e032      	b.n	904a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x242>
    8fe4:	e034      	b.n	9050 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    8fe6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8fea:	6a22      	ldr	r2, [r4, #32]
    8fec:	2108      	movs	r1, #8
    8fee:	4630      	mov	r0, r6
    8ff0:	4790      	blx	r2
    8ff2:	2800      	cmp	r0, #0
    8ff4:	d037      	beq.n	9066 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8ff6:	7800      	ldrb	r0, [r0, #0]
    8ff8:	2800      	cmp	r0, #0
    8ffa:	d034      	beq.n	9066 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8ffc:	f44f 7102 	mov.w	r1, #520	; 0x208
    9000:	e02e      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9002:	e030      	b.n	9066 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9004:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    9008:	b15a      	cbz	r2, 9022 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x21a>
    900a:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    900e:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    9012:	4621      	mov	r1, r4
    9014:	f007 fd3d 	bl	10a92 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
    9018:	2800      	cmp	r0, #0
    901a:	d124      	bne.n	9066 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    901c:	f240 210d 	movw	r1, #525	; 0x20d
    9020:	e01e      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9022:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    9026:	6a22      	ldr	r2, [r4, #32]
    9028:	2107      	movs	r1, #7
    902a:	4630      	mov	r0, r6
    902c:	4790      	blx	r2
    902e:	2800      	cmp	r0, #0
    9030:	d019      	beq.n	9066 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9032:	7800      	ldrb	r0, [r0, #0]
    9034:	2800      	cmp	r0, #0
    9036:	d016      	beq.n	9066 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9038:	f44f 7105 	mov.w	r1, #532	; 0x214
    903c:	e010      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    903e:	f240 2119 	movw	r1, #537	; 0x219
    9042:	e00d      	b.n	9060 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9044:	2104      	movs	r1, #4
    9046:	6a22      	ldr	r2, [r4, #32]
    9048:	e784      	b.n	8f54 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    904a:	2103      	movs	r1, #3
    904c:	6a22      	ldr	r2, [r4, #32]
    904e:	e781      	b.n	8f54 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    9050:	2d00      	cmp	r5, #0
    9052:	d108      	bne.n	9066 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9054:	f007 fe26 	bl	10ca4 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    9058:	2800      	cmp	r0, #0
    905a:	d004      	beq.n	9066 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    905c:	f240 2133 	movw	r1, #563	; 0x233
    9060:	206a      	movs	r0, #106	; 0x6a
    9062:	f003 fc45 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9066:	bd70      	pop	{r4, r5, r6, pc}
    9068:	2800      	cmp	r0, #0
    906a:	d019      	beq.n	90a0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x298>
    906c:	7803      	ldrb	r3, [r0, #0]
    906e:	4913      	ldr	r1, [pc, #76]	; (90bc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2b4>)
    9070:	4a13      	ldr	r2, [pc, #76]	; (90c0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2b8>)
    9072:	b113      	cbz	r3, 907a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x272>
    9074:	2b01      	cmp	r3, #1
    9076:	d00e      	beq.n	9096 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x28e>
    9078:	e011      	b.n	909e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    907a:	7903      	ldrb	r3, [r0, #4]
    907c:	2b01      	cmp	r3, #1
    907e:	d000      	beq.n	9082 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x27a>
    9080:	b96b      	cbnz	r3, 909e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    9082:	7943      	ldrb	r3, [r0, #5]
    9084:	b10b      	cbz	r3, 908a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x282>
    9086:	2b01      	cmp	r3, #1
    9088:	d109      	bne.n	909e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    908a:	6883      	ldr	r3, [r0, #8]
    908c:	3b64      	subs	r3, #100	; 0x64
    908e:	428b      	cmp	r3, r1
    9090:	d205      	bcs.n	909e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    9092:	68c0      	ldr	r0, [r0, #12]
    9094:	e00e      	b.n	90b4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2ac>
    9096:	7903      	ldrb	r3, [r0, #4]
    9098:	2b01      	cmp	r3, #1
    909a:	d002      	beq.n	90a2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x29a>
    909c:	b10b      	cbz	r3, 90a2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x29a>
    909e:	2000      	movs	r0, #0
    90a0:	4770      	bx	lr
    90a2:	7943      	ldrb	r3, [r0, #5]
    90a4:	b10b      	cbz	r3, 90aa <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2a2>
    90a6:	2b01      	cmp	r3, #1
    90a8:	d1f9      	bne.n	909e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    90aa:	68c3      	ldr	r3, [r0, #12]
    90ac:	3b64      	subs	r3, #100	; 0x64
    90ae:	428b      	cmp	r3, r1
    90b0:	d2f5      	bcs.n	909e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    90b2:	6880      	ldr	r0, [r0, #8]
    90b4:	4290      	cmp	r0, r2
    90b6:	d8f2      	bhi.n	909e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    90b8:	2001      	movs	r0, #1
    90ba:	4770      	bx	lr
    90bc:	0001863d 	.word	0x0001863d
    90c0:	0f423fff 	.word	0x0f423fff
    90c4:	b510      	push	{r4, lr}
    90c6:	4c05      	ldr	r4, [pc, #20]	; (90dc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2d4>)
    90c8:	6820      	ldr	r0, [r4, #0]
    90ca:	b110      	cbz	r0, 90d2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2ca>
    90cc:	4780      	blx	r0
    90ce:	2000      	movs	r0, #0
    90d0:	6020      	str	r0, [r4, #0]
    90d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    90d6:	f002 b935 	b.w	b344 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    90da:	0000      	.short	0x0000
    90dc:	200002f0 	.word	0x200002f0

000090e0 <mpsl_timeslot_session_open>:
    90e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90e4:	460e      	mov	r6, r1
    90e6:	0005      	movs	r5, r0
    90e8:	d004      	beq.n	90f4 <mpsl_timeslot_session_open+0x14>
    90ea:	f000 f847 	bl	917c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    90ee:	4607      	mov	r7, r0
    90f0:	2400      	movs	r4, #0
    90f2:	e00b      	b.n	910c <mpsl_timeslot_session_open+0x2c>
    90f4:	f06f 0015 	mvn.w	r0, #21
    90f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90fc:	4620      	mov	r0, r4
    90fe:	f000 f843 	bl	9188 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    9102:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    9106:	b130      	cbz	r0, 9116 <mpsl_timeslot_session_open+0x36>
    9108:	1c64      	adds	r4, r4, #1
    910a:	b2e4      	uxtb	r4, r4
    910c:	42bc      	cmp	r4, r7
    910e:	d3f5      	bcc.n	90fc <mpsl_timeslot_session_open+0x1c>
    9110:	f06f 000b 	mvn.w	r0, #11
    9114:	e7f0      	b.n	90f8 <mpsl_timeslot_session_open+0x18>
    9116:	4627      	mov	r7, r4
    9118:	2cff      	cmp	r4, #255	; 0xff
    911a:	d0f9      	beq.n	9110 <mpsl_timeslot_session_open+0x30>
    911c:	4620      	mov	r0, r4
    911e:	f000 f833 	bl	9188 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    9122:	4604      	mov	r4, r0
    9124:	f007 fd23 	bl	10b6e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x1b0>
    9128:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
    912c:	4621      	mov	r1, r4
    912e:	4808      	ldr	r0, [pc, #32]	; (9150 <mpsl_timeslot_session_open+0x70>)
    9130:	f002 f8e4 	bl	b2fc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    9134:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    9138:	2820      	cmp	r0, #32
    913a:	d006      	beq.n	914a <mpsl_timeslot_session_open+0x6a>
    913c:	2001      	movs	r0, #1
    913e:	6225      	str	r5, [r4, #32]
    9140:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    9144:	7037      	strb	r7, [r6, #0]
    9146:	2000      	movs	r0, #0
    9148:	e7d6      	b.n	90f8 <mpsl_timeslot_session_open+0x18>
    914a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    914e:	e7d3      	b.n	90f8 <mpsl_timeslot_session_open+0x18>
    9150:	00008e49 	.word	0x00008e49

00009154 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    9154:	b510      	push	{r4, lr}
    9156:	0782      	lsls	r2, r0, #30
    9158:	d002      	beq.n	9160 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    915a:	f06f 000d 	mvn.w	r0, #13
    915e:	bd10      	pop	{r4, pc}
    9160:	4a05      	ldr	r2, [pc, #20]	; (9178 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    9162:	7011      	strb	r1, [r2, #0]
    9164:	6050      	str	r0, [r2, #4]
    9166:	b128      	cbz	r0, 9174 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    9168:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    916c:	010a      	lsls	r2, r1, #4
    916e:	2100      	movs	r1, #0
    9170:	f007 ffbf 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9174:	2000      	movs	r0, #0
    9176:	bd10      	pop	{r4, pc}
    9178:	200002f4 	.word	0x200002f4

0000917c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    917c:	4801      	ldr	r0, [pc, #4]	; (9184 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    917e:	7800      	ldrb	r0, [r0, #0]
    9180:	4770      	bx	lr
    9182:	0000      	.short	0x0000
    9184:	200002f4 	.word	0x200002f4

00009188 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    9188:	4905      	ldr	r1, [pc, #20]	; (91a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    918a:	780a      	ldrb	r2, [r1, #0]
    918c:	4290      	cmp	r0, r2
    918e:	d301      	bcc.n	9194 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    9190:	2000      	movs	r0, #0
    9192:	4770      	bx	lr
    9194:	6849      	ldr	r1, [r1, #4]
    9196:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    919a:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    919e:	4770      	bx	lr
    91a0:	200002f4 	.word	0x200002f4

000091a4 <MPSL_IRQ_RADIO_Handler>:
    91a4:	490d      	ldr	r1, [pc, #52]	; (91dc <MPSL_IRQ_RADIO_Handler+0x38>)
    91a6:	b510      	push	{r4, lr}
    91a8:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    91ac:	2820      	cmp	r0, #32
    91ae:	d00f      	beq.n	91d0 <MPSL_IRQ_RADIO_Handler+0x2c>
    91b0:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    91b4:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    91b8:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    91bc:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    91c0:	6840      	ldr	r0, [r0, #4]
    91c2:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    91c6:	680a      	ldr	r2, [r1, #0]
    91c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    91cc:	2104      	movs	r1, #4
    91ce:	4710      	bx	r2
    91d0:	f640 017f 	movw	r1, #2175	; 0x87f
    91d4:	2070      	movs	r0, #112	; 0x70
    91d6:	f003 fb8b 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    91da:	0000      	.short	0x0000
    91dc:	200010d0 	.word	0x200010d0
    91e0:	b570      	push	{r4, r5, r6, lr}
    91e2:	4605      	mov	r5, r0
    91e4:	2a20      	cmp	r2, #32
    91e6:	d028      	beq.n	923a <MPSL_IRQ_RADIO_Handler+0x96>
    91e8:	4819      	ldr	r0, [pc, #100]	; (9250 <MPSL_IRQ_RADIO_Handler+0xac>)
    91ea:	4c1a      	ldr	r4, [pc, #104]	; (9254 <MPSL_IRQ_RADIO_Handler+0xb0>)
    91ec:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    91f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    91f4:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    91f8:	4423      	add	r3, r4
    91fa:	2920      	cmp	r1, #32
    91fc:	d022      	beq.n	9244 <MPSL_IRQ_RADIO_Handler+0xa0>
    91fe:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    9202:	7840      	ldrb	r0, [r0, #1]
    9204:	784c      	ldrb	r4, [r1, #1]
    9206:	7048      	strb	r0, [r1, #1]
    9208:	4620      	mov	r0, r4
    920a:	4601      	mov	r1, r0
    920c:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    9210:	4291      	cmp	r1, r2
    9212:	7005      	strb	r5, [r0, #0]
    9214:	7840      	ldrb	r0, [r0, #1]
    9216:	d1f8      	bne.n	920a <MPSL_IRQ_RADIO_Handler+0x66>
    9218:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    921c:	2a20      	cmp	r2, #32
    921e:	bf1a      	itte	ne
    9220:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    9224:	7054      	strbne	r4, [r2, #1]
    9226:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    922a:	2220      	movs	r2, #32
    922c:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    9230:	f88c 2001 	strb.w	r2, [ip, #1]
    9234:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    9238:	bd70      	pop	{r4, r5, r6, pc}
    923a:	f240 2186 	movw	r1, #646	; 0x286
    923e:	2070      	movs	r0, #112	; 0x70
    9240:	f003 fb56 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9244:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    9248:	7840      	ldrb	r0, [r0, #1]
    924a:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    924e:	e7db      	b.n	9208 <MPSL_IRQ_RADIO_Handler+0x64>
    9250:	20001050 	.word	0x20001050
    9254:	200010d0 	.word	0x200010d0
    9258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    925c:	b08f      	sub	sp, #60	; 0x3c
    925e:	4615      	mov	r5, r2
    9260:	461e      	mov	r6, r3
    9262:	460c      	mov	r4, r1
    9264:	f002 fa98 	bl	b798 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9268:	1828      	adds	r0, r5, r0
    926a:	f146 0100 	adc.w	r1, r6, #0
    926e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    9272:	e9d4 2300 	ldrd	r2, r3, [r4]
    9276:	1a80      	subs	r0, r0, r2
    9278:	eb71 0003 	sbcs.w	r0, r1, r3
    927c:	f0c0 80e5 	bcc.w	944a <MPSL_IRQ_RADIO_Handler+0x2a6>
    9280:	a808      	add	r0, sp, #32
    9282:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    9286:	900a      	str	r0, [sp, #40]	; 0x28
    9288:	48bc      	ldr	r0, [pc, #752]	; (957c <MPSL_IRQ_RADIO_Handler+0x3d8>)
    928a:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    928e:	4408      	add	r0, r1
    9290:	9009      	str	r0, [sp, #36]	; 0x24
    9292:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    9296:	2020      	movs	r0, #32
    9298:	f10d 091c 	add.w	r9, sp, #28
    929c:	f88d 001c 	strb.w	r0, [sp, #28]
    92a0:	2d20      	cmp	r5, #32
    92a2:	d036      	beq.n	9312 <MPSL_IRQ_RADIO_Handler+0x16e>
    92a4:	48b6      	ldr	r0, [pc, #728]	; (9580 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    92a6:	2600      	movs	r6, #0
    92a8:	eb00 1b8a 	add.w	fp, r0, sl, lsl #6
    92ac:	48b5      	ldr	r0, [pc, #724]	; (9584 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    92ae:	e9d4 7300 	ldrd	r7, r3, [r4]
    92b2:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    92b6:	f850 8f08 	ldr.w	r8, [r0, #8]!
    92ba:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    92be:	eb18 0101 	adds.w	r1, r8, r1
    92c2:	4172      	adcs	r2, r6
    92c4:	1a79      	subs	r1, r7, r1
    92c6:	eb73 0102 	sbcs.w	r1, r3, r2
    92ca:	d322      	bcc.n	9312 <MPSL_IRQ_RADIO_Handler+0x16e>
    92cc:	89e1      	ldrh	r1, [r4, #14]
    92ce:	b1c9      	cbz	r1, 9304 <MPSL_IRQ_RADIO_Handler+0x160>
    92d0:	89c0      	ldrh	r0, [r0, #14]
    92d2:	b9b8      	cbnz	r0, 9304 <MPSL_IRQ_RADIO_Handler+0x160>
    92d4:	f003 f96c 	bl	c5b0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    92d8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    92dc:	bf08      	it	eq
    92de:	200d      	moveq	r0, #13
    92e0:	d00b      	beq.n	92fa <MPSL_IRQ_RADIO_Handler+0x156>
    92e2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    92e6:	3856      	subs	r0, #86	; 0x56
    92e8:	bf08      	it	eq
    92ea:	201c      	moveq	r0, #28
    92ec:	d005      	beq.n	92fa <MPSL_IRQ_RADIO_Handler+0x156>
    92ee:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    92f2:	389f      	subs	r0, #159	; 0x9f
    92f4:	bf14      	ite	ne
    92f6:	4630      	movne	r0, r6
    92f8:	2032      	moveq	r0, #50	; 0x32
    92fa:	1c40      	adds	r0, r0, #1
    92fc:	ebb7 0108 	subs.w	r1, r7, r8
    9300:	4281      	cmp	r1, r0
    9302:	db06      	blt.n	9312 <MPSL_IRQ_RADIO_Handler+0x16e>
    9304:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9308:	f889 5000 	strb.w	r5, [r9]
    930c:	7845      	ldrb	r5, [r0, #1]
    930e:	2d20      	cmp	r5, #32
    9310:	d1cc      	bne.n	92ac <MPSL_IRQ_RADIO_Handler+0x108>
    9312:	980a      	ldr	r0, [sp, #40]	; 0x28
    9314:	f899 1000 	ldrb.w	r1, [r9]
    9318:	2d20      	cmp	r5, #32
    931a:	7001      	strb	r1, [r0, #0]
    931c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    9320:	f000 8128 	beq.w	9574 <MPSL_IRQ_RADIO_Handler+0x3d0>
    9324:	4896      	ldr	r0, [pc, #600]	; (9580 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    9326:	4f97      	ldr	r7, [pc, #604]	; (9584 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    9328:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    932c:	2600      	movs	r6, #0
    932e:	9004      	str	r0, [sp, #16]
    9330:	eb07 1a45 	add.w	sl, r7, r5, lsl #5
    9334:	f10a 0008 	add.w	r0, sl, #8
    9338:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    933c:	f8d4 b000 	ldr.w	fp, [r4]
    9340:	e9d0 8300 	ldrd	r8, r3, [r0]
    9344:	eb1b 0202 	adds.w	r2, fp, r2
    9348:	4171      	adcs	r1, r6
    934a:	ebb8 0202 	subs.w	r2, r8, r2
    934e:	eb73 0101 	sbcs.w	r1, r3, r1
    9352:	d320      	bcc.n	9396 <MPSL_IRQ_RADIO_Handler+0x1f2>
    9354:	89c0      	ldrh	r0, [r0, #14]
    9356:	2800      	cmp	r0, #0
    9358:	f000 810c 	beq.w	9574 <MPSL_IRQ_RADIO_Handler+0x3d0>
    935c:	89e0      	ldrh	r0, [r4, #14]
    935e:	2800      	cmp	r0, #0
    9360:	f040 8108 	bne.w	9574 <MPSL_IRQ_RADIO_Handler+0x3d0>
    9364:	f003 f924 	bl	c5b0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9368:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    936c:	bf08      	it	eq
    936e:	200d      	moveq	r0, #13
    9370:	d00b      	beq.n	938a <MPSL_IRQ_RADIO_Handler+0x1e6>
    9372:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9376:	3856      	subs	r0, #86	; 0x56
    9378:	bf08      	it	eq
    937a:	201c      	moveq	r0, #28
    937c:	d005      	beq.n	938a <MPSL_IRQ_RADIO_Handler+0x1e6>
    937e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9382:	389f      	subs	r0, #159	; 0x9f
    9384:	bf14      	ite	ne
    9386:	4630      	movne	r0, r6
    9388:	2032      	moveq	r0, #50	; 0x32
    938a:	1c41      	adds	r1, r0, #1
    938c:	ebb8 000b 	subs.w	r0, r8, fp
    9390:	4288      	cmp	r0, r1
    9392:	f280 80ef 	bge.w	9574 <MPSL_IRQ_RADIO_Handler+0x3d0>
    9396:	f889 5000 	strb.w	r5, [r9]
    939a:	f89a 0018 	ldrb.w	r0, [sl, #24]
    939e:	7c21      	ldrb	r1, [r4, #16]
    93a0:	4281      	cmp	r1, r0
    93a2:	d207      	bcs.n	93b4 <MPSL_IRQ_RADIO_Handler+0x210>
    93a4:	9804      	ldr	r0, [sp, #16]
    93a6:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    93aa:	7845      	ldrb	r5, [r0, #1]
    93ac:	2d20      	cmp	r5, #32
    93ae:	d1bf      	bne.n	9330 <MPSL_IRQ_RADIO_Handler+0x18c>
    93b0:	f000 b8e0 	b.w	9574 <MPSL_IRQ_RADIO_Handler+0x3d0>
    93b4:	f89d 0020 	ldrb.w	r0, [sp, #32]
    93b8:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    93bc:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    93c0:	f8d0 9008 	ldr.w	r9, [r0, #8]
    93c4:	8ac0      	ldrh	r0, [r0, #22]
    93c6:	eb19 0502 	adds.w	r5, r9, r2
    93ca:	eb41 0806 	adc.w	r8, r1, r6
    93ce:	bbb0      	cbnz	r0, 943e <MPSL_IRQ_RADIO_Handler+0x29a>
    93d0:	89e0      	ldrh	r0, [r4, #14]
    93d2:	b3a0      	cbz	r0, 943e <MPSL_IRQ_RADIO_Handler+0x29a>
    93d4:	f003 f8ec 	bl	c5b0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    93d8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    93dc:	bf08      	it	eq
    93de:	200d      	moveq	r0, #13
    93e0:	d00b      	beq.n	93fa <MPSL_IRQ_RADIO_Handler+0x256>
    93e2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    93e6:	3856      	subs	r0, #86	; 0x56
    93e8:	bf08      	it	eq
    93ea:	201c      	moveq	r0, #28
    93ec:	d005      	beq.n	93fa <MPSL_IRQ_RADIO_Handler+0x256>
    93ee:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    93f2:	389f      	subs	r0, #159	; 0x9f
    93f4:	bf14      	ite	ne
    93f6:	4630      	movne	r0, r6
    93f8:	2032      	moveq	r0, #50	; 0x32
    93fa:	1c41      	adds	r1, r0, #1
    93fc:	ebb5 0009 	subs.w	r0, r5, r9
    9400:	4288      	cmp	r0, r1
    9402:	da1c      	bge.n	943e <MPSL_IRQ_RADIO_Handler+0x29a>
    9404:	f003 f8d4 	bl	c5b0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9408:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    940c:	bf08      	it	eq
    940e:	200d      	moveq	r0, #13
    9410:	d00b      	beq.n	942a <MPSL_IRQ_RADIO_Handler+0x286>
    9412:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9416:	3856      	subs	r0, #86	; 0x56
    9418:	bf08      	it	eq
    941a:	201c      	moveq	r0, #28
    941c:	d005      	beq.n	942a <MPSL_IRQ_RADIO_Handler+0x286>
    941e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9422:	389f      	subs	r0, #159	; 0x9f
    9424:	bf14      	ite	ne
    9426:	4630      	movne	r0, r6
    9428:	2032      	moveq	r0, #50	; 0x32
    942a:	f89d 1020 	ldrb.w	r1, [sp, #32]
    942e:	1c40      	adds	r0, r0, #1
    9430:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    9434:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    9438:	1815      	adds	r5, r2, r0
    943a:	eb43 0806 	adc.w	r8, r3, r6
    943e:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    9442:	1b49      	subs	r1, r1, r5
    9444:	eb70 0008 	sbcs.w	r0, r0, r8
    9448:	d203      	bcs.n	9452 <MPSL_IRQ_RADIO_Handler+0x2ae>
    944a:	b00f      	add	sp, #60	; 0x3c
    944c:	2000      	movs	r0, #0
    944e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9452:	e9c4 5800 	strd	r5, r8, [r4]
    9456:	9818      	ldr	r0, [sp, #96]	; 0x60
    9458:	900b      	str	r0, [sp, #44]	; 0x2c
    945a:	a808      	add	r0, sp, #32
    945c:	900a      	str	r0, [sp, #40]	; 0x28
    945e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9460:	f10d 0a1c 	add.w	sl, sp, #28
    9464:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    9468:	2020      	movs	r0, #32
    946a:	f88d 001c 	strb.w	r0, [sp, #28]
    946e:	2d20      	cmp	r5, #32
    9470:	d037      	beq.n	94e2 <MPSL_IRQ_RADIO_Handler+0x33e>
    9472:	4843      	ldr	r0, [pc, #268]	; (9580 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    9474:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9476:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    947a:	bf00      	nop
    947c:	eb07 1045 	add.w	r0, r7, r5, lsl #5
    9480:	e9d4 8300 	ldrd	r8, r3, [r4]
    9484:	f850 9f08 	ldr.w	r9, [r0, #8]!
    9488:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    948c:	eb19 0202 	adds.w	r2, r9, r2
    9490:	4171      	adcs	r1, r6
    9492:	ebb8 0202 	subs.w	r2, r8, r2
    9496:	eb73 0101 	sbcs.w	r1, r3, r1
    949a:	d322      	bcc.n	94e2 <MPSL_IRQ_RADIO_Handler+0x33e>
    949c:	89e1      	ldrh	r1, [r4, #14]
    949e:	b1c9      	cbz	r1, 94d4 <MPSL_IRQ_RADIO_Handler+0x330>
    94a0:	89c0      	ldrh	r0, [r0, #14]
    94a2:	b9b8      	cbnz	r0, 94d4 <MPSL_IRQ_RADIO_Handler+0x330>
    94a4:	f003 f884 	bl	c5b0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    94a8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    94ac:	bf08      	it	eq
    94ae:	200d      	moveq	r0, #13
    94b0:	d00b      	beq.n	94ca <MPSL_IRQ_RADIO_Handler+0x326>
    94b2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    94b6:	3856      	subs	r0, #86	; 0x56
    94b8:	bf08      	it	eq
    94ba:	201c      	moveq	r0, #28
    94bc:	d005      	beq.n	94ca <MPSL_IRQ_RADIO_Handler+0x326>
    94be:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    94c2:	389f      	subs	r0, #159	; 0x9f
    94c4:	bf14      	ite	ne
    94c6:	4630      	movne	r0, r6
    94c8:	2032      	moveq	r0, #50	; 0x32
    94ca:	1c41      	adds	r1, r0, #1
    94cc:	ebb8 0009 	subs.w	r0, r8, r9
    94d0:	4288      	cmp	r0, r1
    94d2:	db06      	blt.n	94e2 <MPSL_IRQ_RADIO_Handler+0x33e>
    94d4:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    94d8:	f88a 5000 	strb.w	r5, [sl]
    94dc:	7845      	ldrb	r5, [r0, #1]
    94de:	2d20      	cmp	r5, #32
    94e0:	d1cc      	bne.n	947c <MPSL_IRQ_RADIO_Handler+0x2d8>
    94e2:	980a      	ldr	r0, [sp, #40]	; 0x28
    94e4:	f89a 1000 	ldrb.w	r1, [sl]
    94e8:	2d20      	cmp	r5, #32
    94ea:	7001      	strb	r1, [r0, #0]
    94ec:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
    94f0:	d040      	beq.n	9574 <MPSL_IRQ_RADIO_Handler+0x3d0>
    94f2:	4923      	ldr	r1, [pc, #140]	; (9580 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    94f4:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    94f8:	f8cd 000c 	str.w	r0, [sp, #12]
    94fc:	eb07 1945 	add.w	r9, r7, r5, lsl #5
    9500:	f109 0008 	add.w	r0, r9, #8
    9504:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    9508:	f8d4 b000 	ldr.w	fp, [r4]
    950c:	e9d0 a300 	ldrd	sl, r3, [r0]
    9510:	eb1b 0202 	adds.w	r2, fp, r2
    9514:	4171      	adcs	r1, r6
    9516:	ebba 0202 	subs.w	r2, sl, r2
    951a:	eb73 0101 	sbcs.w	r1, r3, r1
    951e:	d31b      	bcc.n	9558 <MPSL_IRQ_RADIO_Handler+0x3b4>
    9520:	89c0      	ldrh	r0, [r0, #14]
    9522:	b338      	cbz	r0, 9574 <MPSL_IRQ_RADIO_Handler+0x3d0>
    9524:	89e0      	ldrh	r0, [r4, #14]
    9526:	bb28      	cbnz	r0, 9574 <MPSL_IRQ_RADIO_Handler+0x3d0>
    9528:	f003 f842 	bl	c5b0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    952c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9530:	bf08      	it	eq
    9532:	200d      	moveq	r0, #13
    9534:	d00b      	beq.n	954e <MPSL_IRQ_RADIO_Handler+0x3aa>
    9536:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    953a:	3856      	subs	r0, #86	; 0x56
    953c:	bf08      	it	eq
    953e:	201c      	moveq	r0, #28
    9540:	d005      	beq.n	954e <MPSL_IRQ_RADIO_Handler+0x3aa>
    9542:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9546:	389f      	subs	r0, #159	; 0x9f
    9548:	bf14      	ite	ne
    954a:	4630      	movne	r0, r6
    954c:	2032      	moveq	r0, #50	; 0x32
    954e:	1c41      	adds	r1, r0, #1
    9550:	ebba 000b 	subs.w	r0, sl, fp
    9554:	4288      	cmp	r0, r1
    9556:	da0d      	bge.n	9574 <MPSL_IRQ_RADIO_Handler+0x3d0>
    9558:	f888 5000 	strb.w	r5, [r8]
    955c:	f899 1018 	ldrb.w	r1, [r9, #24]
    9560:	7c20      	ldrb	r0, [r4, #16]
    9562:	4288      	cmp	r0, r1
    9564:	f4bf af26 	bcs.w	93b4 <MPSL_IRQ_RADIO_Handler+0x210>
    9568:	9803      	ldr	r0, [sp, #12]
    956a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    956e:	7845      	ldrb	r5, [r0, #1]
    9570:	2d20      	cmp	r5, #32
    9572:	d1c3      	bne.n	94fc <MPSL_IRQ_RADIO_Handler+0x358>
    9574:	b00f      	add	sp, #60	; 0x3c
    9576:	2001      	movs	r0, #1
    9578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    957c:	200010d0 	.word	0x200010d0
    9580:	20001050 	.word	0x20001050
    9584:	20000c50 	.word	0x20000c50
    9588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    958c:	b083      	sub	sp, #12
    958e:	4691      	mov	r9, r2
    9590:	4604      	mov	r4, r0
    9592:	460d      	mov	r5, r1
    9594:	4698      	mov	r8, r3
    9596:	aa01      	add	r2, sp, #4
    9598:	4669      	mov	r1, sp
    959a:	4618      	mov	r0, r3
    959c:	f002 f918 	bl	b7d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    95a0:	f002 fe2e 	bl	c200 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    95a4:	f002 f8f8 	bl	b798 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    95a8:	4607      	mov	r7, r0
    95aa:	481e      	ldr	r0, [pc, #120]	; (9624 <MPSL_IRQ_RADIO_Handler+0x480>)
    95ac:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    95b0:	2600      	movs	r6, #0
    95b2:	2920      	cmp	r1, #32
    95b4:	d009      	beq.n	95ca <MPSL_IRQ_RADIO_Handler+0x426>
    95b6:	6882      	ldr	r2, [r0, #8]
    95b8:	68c1      	ldr	r1, [r0, #12]
    95ba:	6900      	ldr	r0, [r0, #16]
    95bc:	1d83      	adds	r3, r0, #6
    95be:	f146 0000 	adc.w	r0, r6, #0
    95c2:	18d4      	adds	r4, r2, r3
    95c4:	eb41 0500 	adc.w	r5, r1, r0
    95c8:	e026      	b.n	9618 <MPSL_IRQ_RADIO_Handler+0x474>
    95ca:	340a      	adds	r4, #10
    95cc:	f145 0500 	adc.w	r5, r5, #0
    95d0:	f1b8 0f00 	cmp.w	r8, #0
    95d4:	d017      	beq.n	9606 <MPSL_IRQ_RADIO_Handler+0x462>
    95d6:	f003 f913 	bl	c800 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    95da:	b9a0      	cbnz	r0, 9606 <MPSL_IRQ_RADIO_Handler+0x462>
    95dc:	f002 ffe8 	bl	c5b0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    95e0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    95e4:	bf08      	it	eq
    95e6:	200d      	moveq	r0, #13
    95e8:	d00b      	beq.n	9602 <MPSL_IRQ_RADIO_Handler+0x45e>
    95ea:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    95ee:	3856      	subs	r0, #86	; 0x56
    95f0:	bf08      	it	eq
    95f2:	201c      	moveq	r0, #28
    95f4:	d005      	beq.n	9602 <MPSL_IRQ_RADIO_Handler+0x45e>
    95f6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    95fa:	389f      	subs	r0, #159	; 0x9f
    95fc:	bf14      	ite	ne
    95fe:	4630      	movne	r0, r6
    9600:	2032      	moveq	r0, #50	; 0x32
    9602:	1904      	adds	r4, r0, r4
    9604:	4175      	adcs	r5, r6
    9606:	f1b9 0f00 	cmp.w	r9, #0
    960a:	d105      	bne.n	9618 <MPSL_IRQ_RADIO_Handler+0x474>
    960c:	9800      	ldr	r0, [sp, #0]
    960e:	4287      	cmp	r7, r0
    9610:	d902      	bls.n	9618 <MPSL_IRQ_RADIO_Handler+0x474>
    9612:	1a38      	subs	r0, r7, r0
    9614:	1904      	adds	r4, r0, r4
    9616:	4175      	adcs	r5, r6
    9618:	b003      	add	sp, #12
    961a:	4620      	mov	r0, r4
    961c:	4629      	mov	r1, r5
    961e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9622:	0000      	.short	0x0000
    9624:	200010d0 	.word	0x200010d0
    9628:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    962c:	b081      	sub	sp, #4
    962e:	4605      	mov	r5, r0
    9630:	9802      	ldr	r0, [sp, #8]
    9632:	494a      	ldr	r1, [pc, #296]	; (975c <MPSL_IRQ_RADIO_Handler+0x5b8>)
    9634:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9638:	4408      	add	r0, r1
    963a:	2600      	movs	r6, #0
    963c:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    9640:	2020      	movs	r0, #32
    9642:	4692      	mov	sl, r2
    9644:	7010      	strb	r0, [r2, #0]
    9646:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    964a:	2c20      	cmp	r4, #32
    964c:	d036      	beq.n	96bc <MPSL_IRQ_RADIO_Handler+0x518>
    964e:	9902      	ldr	r1, [sp, #8]
    9650:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    9654:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    9658:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    965c:	e9d5 7300 	ldrd	r7, r3, [r5]
    9660:	f850 8f08 	ldr.w	r8, [r0, #8]!
    9664:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    9668:	eb18 0202 	adds.w	r2, r8, r2
    966c:	4171      	adcs	r1, r6
    966e:	1aba      	subs	r2, r7, r2
    9670:	eb73 0101 	sbcs.w	r1, r3, r1
    9674:	d322      	bcc.n	96bc <MPSL_IRQ_RADIO_Handler+0x518>
    9676:	89e9      	ldrh	r1, [r5, #14]
    9678:	b1c9      	cbz	r1, 96ae <MPSL_IRQ_RADIO_Handler+0x50a>
    967a:	89c0      	ldrh	r0, [r0, #14]
    967c:	b9b8      	cbnz	r0, 96ae <MPSL_IRQ_RADIO_Handler+0x50a>
    967e:	f002 ff97 	bl	c5b0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9682:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9686:	bf08      	it	eq
    9688:	200d      	moveq	r0, #13
    968a:	d00b      	beq.n	96a4 <MPSL_IRQ_RADIO_Handler+0x500>
    968c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9690:	3856      	subs	r0, #86	; 0x56
    9692:	bf08      	it	eq
    9694:	201c      	moveq	r0, #28
    9696:	d005      	beq.n	96a4 <MPSL_IRQ_RADIO_Handler+0x500>
    9698:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    969c:	389f      	subs	r0, #159	; 0x9f
    969e:	bf14      	ite	ne
    96a0:	4630      	movne	r0, r6
    96a2:	2032      	moveq	r0, #50	; 0x32
    96a4:	1c41      	adds	r1, r0, #1
    96a6:	ebb7 0008 	subs.w	r0, r7, r8
    96aa:	4288      	cmp	r0, r1
    96ac:	db06      	blt.n	96bc <MPSL_IRQ_RADIO_Handler+0x518>
    96ae:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    96b2:	f88a 4000 	strb.w	r4, [sl]
    96b6:	7844      	ldrb	r4, [r0, #1]
    96b8:	2c20      	cmp	r4, #32
    96ba:	d1cd      	bne.n	9658 <MPSL_IRQ_RADIO_Handler+0x4b4>
    96bc:	9804      	ldr	r0, [sp, #16]
    96be:	f89a 1000 	ldrb.w	r1, [sl]
    96c2:	2c20      	cmp	r4, #32
    96c4:	7001      	strb	r1, [r0, #0]
    96c6:	9f04      	ldr	r7, [sp, #16]
    96c8:	9802      	ldr	r0, [sp, #8]
    96ca:	d042      	beq.n	9752 <MPSL_IRQ_RADIO_Handler+0x5ae>
    96cc:	4924      	ldr	r1, [pc, #144]	; (9760 <MPSL_IRQ_RADIO_Handler+0x5bc>)
    96ce:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    96d2:	9000      	str	r0, [sp, #0]
    96d4:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    96d8:	f8d5 b000 	ldr.w	fp, [r5]
    96dc:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    96e0:	f108 0008 	add.w	r0, r8, #8
    96e4:	eb1b 0201 	adds.w	r2, fp, r1
    96e8:	eb43 0106 	adc.w	r1, r3, r6
    96ec:	e9d0 a300 	ldrd	sl, r3, [r0]
    96f0:	ebba 0202 	subs.w	r2, sl, r2
    96f4:	eb73 0101 	sbcs.w	r1, r3, r1
    96f8:	d31b      	bcc.n	9732 <MPSL_IRQ_RADIO_Handler+0x58e>
    96fa:	89c0      	ldrh	r0, [r0, #14]
    96fc:	b348      	cbz	r0, 9752 <MPSL_IRQ_RADIO_Handler+0x5ae>
    96fe:	89e8      	ldrh	r0, [r5, #14]
    9700:	bb38      	cbnz	r0, 9752 <MPSL_IRQ_RADIO_Handler+0x5ae>
    9702:	f002 ff55 	bl	c5b0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9706:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    970a:	bf08      	it	eq
    970c:	200d      	moveq	r0, #13
    970e:	d00b      	beq.n	9728 <MPSL_IRQ_RADIO_Handler+0x584>
    9710:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9714:	3856      	subs	r0, #86	; 0x56
    9716:	bf08      	it	eq
    9718:	201c      	moveq	r0, #28
    971a:	d005      	beq.n	9728 <MPSL_IRQ_RADIO_Handler+0x584>
    971c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9720:	389f      	subs	r0, #159	; 0x9f
    9722:	bf14      	ite	ne
    9724:	4630      	movne	r0, r6
    9726:	2032      	moveq	r0, #50	; 0x32
    9728:	1c41      	adds	r1, r0, #1
    972a:	ebba 000b 	subs.w	r0, sl, fp
    972e:	4288      	cmp	r0, r1
    9730:	da0f      	bge.n	9752 <MPSL_IRQ_RADIO_Handler+0x5ae>
    9732:	703c      	strb	r4, [r7, #0]
    9734:	f898 1018 	ldrb.w	r1, [r8, #24]
    9738:	7c28      	ldrb	r0, [r5, #16]
    973a:	4288      	cmp	r0, r1
    973c:	d303      	bcc.n	9746 <MPSL_IRQ_RADIO_Handler+0x5a2>
    973e:	b005      	add	sp, #20
    9740:	2000      	movs	r0, #0
    9742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9746:	9800      	ldr	r0, [sp, #0]
    9748:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    974c:	7844      	ldrb	r4, [r0, #1]
    974e:	2c20      	cmp	r4, #32
    9750:	d1c0      	bne.n	96d4 <MPSL_IRQ_RADIO_Handler+0x530>
    9752:	b005      	add	sp, #20
    9754:	2001      	movs	r0, #1
    9756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    975a:	0000      	.short	0x0000
    975c:	200010d0 	.word	0x200010d0
    9760:	20001050 	.word	0x20001050
    9764:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9768:	b09c      	sub	sp, #112	; 0x70
    976a:	461f      	mov	r7, r3
    976c:	f002 fa80 	bl	bc70 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    9770:	4604      	mov	r4, r0
    9772:	460d      	mov	r5, r1
    9774:	f002 fd44 	bl	c200 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9778:	4606      	mov	r6, r0
    977a:	981e      	ldr	r0, [sp, #120]	; 0x78
    977c:	2801      	cmp	r0, #1
    977e:	bf18      	it	ne
    9780:	2802      	cmpne	r0, #2
    9782:	d005      	beq.n	9790 <MPSL_IRQ_RADIO_Handler+0x5ec>
    9784:	f640 1156 	movw	r1, #2390	; 0x956
    9788:	f04f 0070 	mov.w	r0, #112	; 0x70
    978c:	f003 f8b0 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9790:	49fe      	ldr	r1, [pc, #1016]	; (9b8c <MPSL_IRQ_RADIO_Handler+0x9e8>)
    9792:	2001      	movs	r0, #1
    9794:	6008      	str	r0, [r1, #0]
    9796:	49fe      	ldr	r1, [pc, #1016]	; (9b90 <MPSL_IRQ_RADIO_Handler+0x9ec>)
    9798:	6889      	ldr	r1, [r1, #8]
    979a:	6008      	str	r0, [r1, #0]
    979c:	2000      	movs	r0, #0
    979e:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    97a2:	900c      	str	r0, [sp, #48]	; 0x30
    97a4:	1e40      	subs	r0, r0, #1
    97a6:	900d      	str	r0, [sp, #52]	; 0x34
    97a8:	48fa      	ldr	r0, [pc, #1000]	; (9b94 <MPSL_IRQ_RADIO_Handler+0x9f0>)
    97aa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    97ae:	eb00 1047 	add.w	r0, r0, r7, lsl #5
    97b2:	f100 0108 	add.w	r1, r0, #8
    97b6:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    97ba:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    97be:	e9d0 1006 	ldrd	r1, r0, [r0, #24]
    97c2:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    97c6:	980e      	ldr	r0, [sp, #56]	; 0x38
    97c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    97cc:	f007 fa75 	bl	10cba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    97d0:	4602      	mov	r2, r0
    97d2:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    97d6:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    97da:	4bef      	ldr	r3, [pc, #956]	; (9b98 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    97dc:	4440      	add	r0, r8
    97de:	1c41      	adds	r1, r0, #1
    97e0:	1850      	adds	r0, r2, r1
    97e2:	429a      	cmp	r2, r3
    97e4:	d856      	bhi.n	9894 <MPSL_IRQ_RADIO_Handler+0x6f0>
    97e6:	4aed      	ldr	r2, [pc, #948]	; (9b9c <MPSL_IRQ_RADIO_Handler+0x9f8>)
    97e8:	4291      	cmp	r1, r2
    97ea:	dc5b      	bgt.n	98a4 <MPSL_IRQ_RADIO_Handler+0x700>
    97ec:	4252      	negs	r2, r2
    97ee:	4291      	cmp	r1, r2
    97f0:	db60      	blt.n	98b4 <MPSL_IRQ_RADIO_Handler+0x710>
    97f2:	1c59      	adds	r1, r3, #1
    97f4:	4281      	cmp	r1, r0
    97f6:	bfdc      	itt	le
    97f8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    97fc:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9800:	dd05      	ble.n	980e <MPSL_IRQ_RADIO_Handler+0x66a>
    9802:	2800      	cmp	r0, #0
    9804:	bfbc      	itt	lt
    9806:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    980a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    980e:	9017      	str	r0, [sp, #92]	; 0x5c
    9810:	48e3      	ldr	r0, [pc, #908]	; (9ba0 <MPSL_IRQ_RADIO_Handler+0x9fc>)
    9812:	f1b8 0f00 	cmp.w	r8, #0
    9816:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    981a:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    981e:	bf14      	ite	ne
    9820:	f04f 0a01 	movne.w	sl, #1
    9824:	f04f 0a00 	moveq.w	sl, #0
    9828:	f002 ffea 	bl	c800 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    982c:	9019      	str	r0, [sp, #100]	; 0x64
    982e:	f1ba 0f00 	cmp.w	sl, #0
    9832:	d00b      	beq.n	984c <MPSL_IRQ_RADIO_Handler+0x6a8>
    9834:	49db      	ldr	r1, [pc, #876]	; (9ba4 <MPSL_IRQ_RADIO_Handler+0xa00>)
    9836:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    983a:	ea6f 0200 	mvn.w	r2, r0
    983e:	ea72 0001 	orns	r0, r2, r1
    9842:	bf02      	ittt	eq
    9844:	9819      	ldreq	r0, [sp, #100]	; 0x64
    9846:	2800      	cmpeq	r0, #0
    9848:	2701      	moveq	r7, #1
    984a:	d001      	beq.n	9850 <MPSL_IRQ_RADIO_Handler+0x6ac>
    984c:	f04f 0700 	mov.w	r7, #0
    9850:	f002 feae 	bl	c5b0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9854:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9858:	bf08      	it	eq
    985a:	200d      	moveq	r0, #13
    985c:	d00b      	beq.n	9876 <MPSL_IRQ_RADIO_Handler+0x6d2>
    985e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9862:	3856      	subs	r0, #86	; 0x56
    9864:	bf08      	it	eq
    9866:	201c      	moveq	r0, #28
    9868:	d005      	beq.n	9876 <MPSL_IRQ_RADIO_Handler+0x6d2>
    986a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    986e:	389f      	subs	r0, #159	; 0x9f
    9870:	bf14      	ite	ne
    9872:	2000      	movne	r0, #0
    9874:	2032      	moveq	r0, #50	; 0x32
    9876:	f04f 0900 	mov.w	r9, #0
    987a:	46cb      	mov	fp, r9
    987c:	9016      	str	r0, [sp, #88]	; 0x58
    987e:	4546      	cmp	r6, r8
    9880:	d936      	bls.n	98f0 <MPSL_IRQ_RADIO_Handler+0x74c>
    9882:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9884:	43f3      	mvns	r3, r6
    9886:	f8df c310 	ldr.w	ip, [pc, #784]	; 9b98 <MPSL_IRQ_RADIO_Handler+0x9f4>
    988a:	18c8      	adds	r0, r1, r3
    988c:	46e9      	mov	r9, sp
    988e:	aa1a      	add	r2, sp, #104	; 0x68
    9890:	4561      	cmp	r1, ip
    9892:	d904      	bls.n	989e <MPSL_IRQ_RADIO_Handler+0x6fa>
    9894:	f240 517f 	movw	r1, #1407	; 0x57f
    9898:	2070      	movs	r0, #112	; 0x70
    989a:	f003 f829 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    989e:	49bf      	ldr	r1, [pc, #764]	; (9b9c <MPSL_IRQ_RADIO_Handler+0x9f8>)
    98a0:	428b      	cmp	r3, r1
    98a2:	dd04      	ble.n	98ae <MPSL_IRQ_RADIO_Handler+0x70a>
    98a4:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    98a8:	2070      	movs	r0, #112	; 0x70
    98aa:	f003 f821 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98ae:	49be      	ldr	r1, [pc, #760]	; (9ba8 <MPSL_IRQ_RADIO_Handler+0xa04>)
    98b0:	428b      	cmp	r3, r1
    98b2:	da04      	bge.n	98be <MPSL_IRQ_RADIO_Handler+0x71a>
    98b4:	f240 5181 	movw	r1, #1409	; 0x581
    98b8:	2070      	movs	r0, #112	; 0x70
    98ba:	f003 f819 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98be:	49bb      	ldr	r1, [pc, #748]	; (9bac <MPSL_IRQ_RADIO_Handler+0xa08>)
    98c0:	4281      	cmp	r1, r0
    98c2:	bfdc      	itt	le
    98c4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    98c8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    98cc:	dd05      	ble.n	98da <MPSL_IRQ_RADIO_Handler+0x736>
    98ce:	2800      	cmp	r0, #0
    98d0:	bfbc      	itt	lt
    98d2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    98d6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    98da:	4649      	mov	r1, r9
    98dc:	f001 ff78 	bl	b7d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    98e0:	9800      	ldr	r0, [sp, #0]
    98e2:	990e      	ldr	r1, [sp, #56]	; 0x38
    98e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    98e8:	9000      	str	r0, [sp, #0]
    98ea:	1a08      	subs	r0, r1, r0
    98ec:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    98f0:	2f00      	cmp	r7, #0
    98f2:	bf18      	it	ne
    98f4:	f8dd b058 	ldrne.w	fp, [sp, #88]	; 0x58
    98f8:	d105      	bne.n	9906 <MPSL_IRQ_RADIO_Handler+0x762>
    98fa:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    98fe:	2800      	cmp	r0, #0
    9900:	bf18      	it	ne
    9902:	f04f 0b02 	movne.w	fp, #2
    9906:	43e0      	mvns	r0, r4
    9908:	ea70 0005 	orns	r0, r0, r5
    990c:	d022      	beq.n	9954 <MPSL_IRQ_RADIO_Handler+0x7b0>
    990e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    9912:	1a22      	subs	r2, r4, r0
    9914:	eb75 0201 	sbcs.w	r2, r5, r1
    9918:	d20c      	bcs.n	9934 <MPSL_IRQ_RADIO_Handler+0x790>
    991a:	1b02      	subs	r2, r0, r4
    991c:	eb61 0105 	sbc.w	r1, r1, r5
    9920:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    9924:	f171 0100 	sbcs.w	r1, r1, #0
    9928:	d311      	bcc.n	994e <MPSL_IRQ_RADIO_Handler+0x7aa>
    992a:	f640 1195 	movw	r1, #2453	; 0x995
    992e:	2070      	movs	r0, #112	; 0x70
    9930:	f002 ffde 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9934:	1a22      	subs	r2, r4, r0
    9936:	eb65 0101 	sbc.w	r1, r5, r1
    993a:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    993e:	f171 0100 	sbcs.w	r1, r1, #0
    9942:	d304      	bcc.n	994e <MPSL_IRQ_RADIO_Handler+0x7aa>
    9944:	f640 1199 	movw	r1, #2457	; 0x999
    9948:	2070      	movs	r0, #112	; 0x70
    994a:	f002 ffd1 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    994e:	1b00      	subs	r0, r0, r4
    9950:	2801      	cmp	r0, #1
    9952:	da03      	bge.n	995c <MPSL_IRQ_RADIO_Handler+0x7b8>
    9954:	981c      	ldr	r0, [sp, #112]	; 0x70
    9956:	901a      	str	r0, [sp, #104]	; 0x68
    9958:	2003      	movs	r0, #3
    995a:	e00d      	b.n	9978 <MPSL_IRQ_RADIO_Handler+0x7d4>
    995c:	b157      	cbz	r7, 9974 <MPSL_IRQ_RADIO_Handler+0x7d0>
    995e:	4891      	ldr	r0, [pc, #580]	; (9ba4 <MPSL_IRQ_RADIO_Handler+0xa00>)
    9960:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    9964:	b130      	cbz	r0, 9974 <MPSL_IRQ_RADIO_Handler+0x7d0>
    9966:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    996a:	f110 0b00 	adds.w	fp, r0, #0
    996e:	bf18      	it	ne
    9970:	f04f 0b02 	movne.w	fp, #2
    9974:	2000      	movs	r0, #0
    9976:	941a      	str	r4, [sp, #104]	; 0x68
    9978:	4483      	add	fp, r0
    997a:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    997e:	ebb0 0009 	subs.w	r0, r0, r9
    9982:	f162 0100 	sbc.w	r1, r2, #0
    9986:	1e42      	subs	r2, r0, #1
    9988:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    998a:	f141 3eff 	adc.w	lr, r1, #4294967295
    998e:	1ad3      	subs	r3, r2, r3
    9990:	455b      	cmp	r3, fp
    9992:	db08      	blt.n	99a6 <MPSL_IRQ_RADIO_Handler+0x802>
    9994:	f1b9 0f00 	cmp.w	r9, #0
    9998:	d032      	beq.n	9a00 <MPSL_IRQ_RADIO_Handler+0x85c>
    999a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    999c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    99a0:	444b      	add	r3, r9
    99a2:	9310      	str	r3, [sp, #64]	; 0x40
    99a4:	e02c      	b.n	9a00 <MPSL_IRQ_RADIO_Handler+0x85c>
    99a6:	f1b9 0f00 	cmp.w	r9, #0
    99aa:	d005      	beq.n	99b8 <MPSL_IRQ_RADIO_Handler+0x814>
    99ac:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    99b0:	b920      	cbnz	r0, 99bc <MPSL_IRQ_RADIO_Handler+0x818>
    99b2:	f002 fc1b 	bl	c1ec <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    99b6:	b108      	cbz	r0, 99bc <MPSL_IRQ_RADIO_Handler+0x818>
    99b8:	b9af      	cbnz	r7, 99e6 <MPSL_IRQ_RADIO_Handler+0x842>
    99ba:	e00c      	b.n	99d6 <MPSL_IRQ_RADIO_Handler+0x832>
    99bc:	b92f      	cbnz	r7, 99ca <MPSL_IRQ_RADIO_Handler+0x826>
    99be:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    99c2:	2800      	cmp	r0, #0
    99c4:	bf18      	it	ne
    99c6:	f1ab 0b02 	subne.w	fp, fp, #2
    99ca:	f04f 0900 	mov.w	r9, #0
    99ce:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
    99d2:	464e      	mov	r6, r9
    99d4:	e007      	b.n	99e6 <MPSL_IRQ_RADIO_Handler+0x842>
    99d6:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    99da:	b120      	cbz	r0, 99e6 <MPSL_IRQ_RADIO_Handler+0x842>
    99dc:	2000      	movs	r0, #0
    99de:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    99e2:	f1ab 0b02 	sub.w	fp, fp, #2
    99e6:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    99ea:	ebb0 0009 	subs.w	r0, r0, r9
    99ee:	f162 0100 	sbc.w	r1, r2, #0
    99f2:	1e42      	subs	r2, r0, #1
    99f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    99f6:	f141 3eff 	adc.w	lr, r1, #4294967295
    99fa:	1ad3      	subs	r3, r2, r3
    99fc:	455b      	cmp	r3, fp
    99fe:	db7d      	blt.n	9afc <MPSL_IRQ_RADIO_Handler+0x958>
    9a00:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9a02:	b99b      	cbnz	r3, 9a2c <MPSL_IRQ_RADIO_Handler+0x888>
    9a04:	4b67      	ldr	r3, [pc, #412]	; (9ba4 <MPSL_IRQ_RADIO_Handler+0xa00>)
    9a06:	e9d3 c30e 	ldrd	ip, r3, [r3, #56]	; 0x38
    9a0a:	ea6f 090c 	mvn.w	r9, ip
    9a0e:	ea79 0903 	orns	r9, r9, r3
    9a12:	d00b      	beq.n	9a2c <MPSL_IRQ_RADIO_Handler+0x888>
    9a14:	ebb0 0c0c 	subs.w	ip, r0, ip
    9a18:	9816      	ldr	r0, [sp, #88]	; 0x58
    9a1a:	eb61 0303 	sbc.w	r3, r1, r3
    9a1e:	ebbc 0000 	subs.w	r0, ip, r0
    9a22:	f173 0000 	sbcs.w	r0, r3, #0
    9a26:	bf38      	it	cc
    9a28:	2000      	movcc	r0, #0
    9a2a:	d300      	bcc.n	9a2e <MPSL_IRQ_RADIO_Handler+0x88a>
    9a2c:	2001      	movs	r0, #1
    9a2e:	ea3a 0000 	bics.w	r0, sl, r0
    9a32:	d163      	bne.n	9afc <MPSL_IRQ_RADIO_Handler+0x958>
    9a34:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    9a38:	e9cd 0107 	strd	r0, r1, [sp, #28]
    9a3c:	981e      	ldr	r0, [sp, #120]	; 0x78
    9a3e:	4691      	mov	r9, r2
    9a40:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
    9a44:	46f3      	mov	fp, lr
    9a46:	2700      	movs	r7, #0
    9a48:	f002 fdb2 	bl	c5b0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9a4c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9a50:	bf08      	it	eq
    9a52:	200d      	moveq	r0, #13
    9a54:	d00b      	beq.n	9a6e <MPSL_IRQ_RADIO_Handler+0x8ca>
    9a56:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9a5a:	3856      	subs	r0, #86	; 0x56
    9a5c:	bf08      	it	eq
    9a5e:	201c      	moveq	r0, #28
    9a60:	d005      	beq.n	9a6e <MPSL_IRQ_RADIO_Handler+0x8ca>
    9a62:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9a66:	389f      	subs	r0, #159	; 0x9f
    9a68:	bf14      	ite	ne
    9a6a:	4638      	movne	r0, r7
    9a6c:	2032      	moveq	r0, #50	; 0x32
    9a6e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    9a72:	300b      	adds	r0, #11
    9a74:	ebb9 0202 	subs.w	r2, r9, r2
    9a78:	eb6b 0303 	sbc.w	r3, fp, r3
    9a7c:	1a10      	subs	r0, r2, r0
    9a7e:	f173 0000 	sbcs.w	r0, r3, #0
    9a82:	d22a      	bcs.n	9ada <MPSL_IRQ_RADIO_Handler+0x936>
    9a84:	9819      	ldr	r0, [sp, #100]	; 0x64
    9a86:	2801      	cmp	r0, #1
    9a88:	d002      	beq.n	9a90 <MPSL_IRQ_RADIO_Handler+0x8ec>
    9a8a:	9818      	ldr	r0, [sp, #96]	; 0x60
    9a8c:	b148      	cbz	r0, 9aa2 <MPSL_IRQ_RADIO_Handler+0x8fe>
    9a8e:	e017      	b.n	9ac0 <MPSL_IRQ_RADIO_Handler+0x91c>
    9a90:	43e0      	mvns	r0, r4
    9a92:	ea70 0005 	orns	r0, r0, r5
    9a96:	d127      	bne.n	9ae8 <MPSL_IRQ_RADIO_Handler+0x944>
    9a98:	f640 01d7 	movw	r1, #2263	; 0x8d7
    9a9c:	2070      	movs	r0, #112	; 0x70
    9a9e:	f002 ff27 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9aa2:	43e0      	mvns	r0, r4
    9aa4:	ea70 0005 	orns	r0, r0, r5
    9aa8:	d00a      	beq.n	9ac0 <MPSL_IRQ_RADIO_Handler+0x91c>
    9aaa:	d01d      	beq.n	9ae8 <MPSL_IRQ_RADIO_Handler+0x944>
    9aac:	ebb4 0009 	subs.w	r0, r4, r9
    9ab0:	eb65 010b 	sbc.w	r1, r5, fp
    9ab4:	2300      	movs	r3, #0
    9ab6:	f1d0 0204 	rsbs	r2, r0, #4
    9aba:	eb73 0201 	sbcs.w	r2, r3, r1
    9abe:	da06      	bge.n	9ace <MPSL_IRQ_RADIO_Handler+0x92a>
    9ac0:	464c      	mov	r4, r9
    9ac2:	465d      	mov	r5, fp
    9ac4:	4620      	mov	r0, r4
    9ac6:	4629      	mov	r1, r5
    9ac8:	f001 ffb2 	bl	ba30 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9acc:	e00c      	b.n	9ae8 <MPSL_IRQ_RADIO_Handler+0x944>
    9ace:	2200      	movs	r2, #0
    9ad0:	1a10      	subs	r0, r2, r0
    9ad2:	eb72 0001 	sbcs.w	r0, r2, r1
    9ad6:	db11      	blt.n	9afc <MPSL_IRQ_RADIO_Handler+0x958>
    9ad8:	e006      	b.n	9ae8 <MPSL_IRQ_RADIO_Handler+0x944>
    9ada:	464c      	mov	r4, r9
    9adc:	465d      	mov	r5, fp
    9ade:	4620      	mov	r0, r4
    9ae0:	4629      	mov	r1, r5
    9ae2:	f001 ffa5 	bl	ba30 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9ae6:	4657      	mov	r7, sl
    9ae8:	43e1      	mvns	r1, r4
    9aea:	ea71 0005 	orns	r0, r1, r5
    9aee:	d071      	beq.n	9bd4 <MPSL_IRQ_RADIO_Handler+0xa30>
    9af0:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    9af4:	f04f 0b00 	mov.w	fp, #0
    9af8:	990e      	ldr	r1, [sp, #56]	; 0x38
    9afa:	e000      	b.n	9afe <MPSL_IRQ_RADIO_Handler+0x95a>
    9afc:	e06f      	b.n	9bde <MPSL_IRQ_RADIO_Handler+0xa3a>
    9afe:	1a0b      	subs	r3, r1, r0
    9b00:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    9b04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9b08:	eb11 010c 	adds.w	r1, r1, ip
    9b0c:	1a08      	subs	r0, r1, r0
    9b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9b12:	2b01      	cmp	r3, #1
    9b14:	d363      	bcc.n	9bde <MPSL_IRQ_RADIO_Handler+0xa3a>
    9b16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    9b1a:	bf98      	it	ls
    9b1c:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    9b20:	d85d      	bhi.n	9bde <MPSL_IRQ_RADIO_Handler+0xa3a>
    9b22:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    9b26:	f007 f8c8 	bl	10cba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9b2a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9b2c:	4a1b      	ldr	r2, [pc, #108]	; (9b9c <MPSL_IRQ_RADIO_Handler+0x9f8>)
    9b2e:	1a0d      	subs	r5, r1, r0
    9b30:	1aaa      	subs	r2, r5, r2
    9b32:	f17b 0200 	sbcs.w	r2, fp, #0
    9b36:	d316      	bcc.n	9b66 <MPSL_IRQ_RADIO_Handler+0x9c2>
    9b38:	4b18      	ldr	r3, [pc, #96]	; (9b9c <MPSL_IRQ_RADIO_Handler+0x9f8>)
    9b3a:	1a42      	subs	r2, r0, r1
    9b3c:	1ad3      	subs	r3, r2, r3
    9b3e:	f17b 0300 	sbcs.w	r3, fp, #0
    9b42:	d310      	bcc.n	9b66 <MPSL_IRQ_RADIO_Handler+0x9c2>
    9b44:	4b14      	ldr	r3, [pc, #80]	; (9b98 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    9b46:	42ab      	cmp	r3, r5
    9b48:	bf3e      	ittt	cc
    9b4a:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    9b4e:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    9b52:	1845      	addcc	r5, r0, r1
    9b54:	d307      	bcc.n	9b66 <MPSL_IRQ_RADIO_Handler+0x9c2>
    9b56:	4293      	cmp	r3, r2
    9b58:	d245      	bcs.n	9be6 <MPSL_IRQ_RADIO_Handler+0xa42>
    9b5a:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    9b5e:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    9b62:	4408      	add	r0, r1
    9b64:	4245      	negs	r5, r0
    9b66:	f8df 903c 	ldr.w	r9, [pc, #60]	; 9ba4 <MPSL_IRQ_RADIO_Handler+0xa00>
    9b6a:	f899 0022 	ldrb.w	r0, [r9, #34]	; 0x22
    9b6e:	b378      	cbz	r0, 9bd0 <MPSL_IRQ_RADIO_Handler+0xa2c>
    9b70:	981e      	ldr	r0, [sp, #120]	; 0x78
    9b72:	2801      	cmp	r0, #1
    9b74:	d005      	beq.n	9b82 <MPSL_IRQ_RADIO_Handler+0x9de>
    9b76:	2002      	movs	r0, #2
    9b78:	f002 f9e6 	bl	bf48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9b7c:	2001      	movs	r0, #1
    9b7e:	f002 f9e3 	bl	bf48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9b82:	45b0      	cmp	r8, r6
    9b84:	d240      	bcs.n	9c08 <MPSL_IRQ_RADIO_Handler+0xa64>
    9b86:	eba5 0106 	sub.w	r1, r5, r6
    9b8a:	e011      	b.n	9bb0 <MPSL_IRQ_RADIO_Handler+0xa0c>
    9b8c:	40000508 	.word	0x40000508
    9b90:	200002fc 	.word	0x200002fc
    9b94:	20000c50 	.word	0x20000c50
    9b98:	1e847fff 	.word	0x1e847fff
    9b9c:	0f424000 	.word	0x0f424000
    9ba0:	20001050 	.word	0x20001050
    9ba4:	200010d0 	.word	0x200010d0
    9ba8:	f0bdc000 	.word	0xf0bdc000
    9bac:	1e848000 	.word	0x1e848000
    9bb0:	f04f 0002 	mov.w	r0, #2
    9bb4:	f002 f90e 	bl	bdd4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9bb8:	b398      	cbz	r0, 9c22 <MPSL_IRQ_RADIO_Handler+0xa7e>
    9bba:	f1b8 0f00 	cmp.w	r8, #0
    9bbe:	bf1c      	itt	ne
    9bc0:	eba5 0108 	subne.w	r1, r5, r8
    9bc4:	2001      	movne	r0, #1
    9bc6:	d035      	beq.n	9c34 <MPSL_IRQ_RADIO_Handler+0xa90>
    9bc8:	f002 f904 	bl	bdd4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9bcc:	b348      	cbz	r0, 9c22 <MPSL_IRQ_RADIO_Handler+0xa7e>
    9bce:	e031      	b.n	9c34 <MPSL_IRQ_RADIO_Handler+0xa90>
    9bd0:	e00e      	b.n	9bf0 <MPSL_IRQ_RADIO_Handler+0xa4c>
    9bd2:	e7ff      	b.n	9bd4 <MPSL_IRQ_RADIO_Handler+0xa30>
    9bd4:	f640 2103 	movw	r1, #2563	; 0xa03
    9bd8:	2070      	movs	r0, #112	; 0x70
    9bda:	f002 fe89 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9bde:	b020      	add	sp, #128	; 0x80
    9be0:	2000      	movs	r0, #0
    9be2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9be6:	f640 21da 	movw	r1, #2778	; 0xada
    9bea:	2070      	movs	r0, #112	; 0x70
    9bec:	f002 fe80 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9bf0:	45b0      	cmp	r8, r6
    9bf2:	bf34      	ite	cc
    9bf4:	4630      	movcc	r0, r6
    9bf6:	4640      	movcs	r0, r8
    9bf8:	301e      	adds	r0, #30
    9bfa:	42a8      	cmp	r0, r5
    9bfc:	dbb8      	blt.n	9b70 <MPSL_IRQ_RADIO_Handler+0x9cc>
    9bfe:	f640 2117 	movw	r1, #2583	; 0xa17
    9c02:	2070      	movs	r0, #112	; 0x70
    9c04:	f002 fe74 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c08:	d90c      	bls.n	9c24 <MPSL_IRQ_RADIO_Handler+0xa80>
    9c0a:	eba5 0108 	sub.w	r1, r5, r8
    9c0e:	2001      	movs	r0, #1
    9c10:	f002 f8e0 	bl	bdd4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9c14:	b128      	cbz	r0, 9c22 <MPSL_IRQ_RADIO_Handler+0xa7e>
    9c16:	2e00      	cmp	r6, #0
    9c18:	bf1c      	itt	ne
    9c1a:	1ba9      	subne	r1, r5, r6
    9c1c:	2002      	movne	r0, #2
    9c1e:	d009      	beq.n	9c34 <MPSL_IRQ_RADIO_Handler+0xa90>
    9c20:	e7d2      	b.n	9bc8 <MPSL_IRQ_RADIO_Handler+0xa24>
    9c22:	e034      	b.n	9c8e <MPSL_IRQ_RADIO_Handler+0xaea>
    9c24:	ea56 0008 	orrs.w	r0, r6, r8
    9c28:	d004      	beq.n	9c34 <MPSL_IRQ_RADIO_Handler+0xa90>
    9c2a:	f640 113a 	movw	r1, #2362	; 0x93a
    9c2e:	2070      	movs	r0, #112	; 0x70
    9c30:	f002 fe5e 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c34:	4629      	mov	r1, r5
    9c36:	2000      	movs	r0, #0
    9c38:	f002 f8cc 	bl	bdd4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9c3c:	b338      	cbz	r0, 9c8e <MPSL_IRQ_RADIO_Handler+0xaea>
    9c3e:	2601      	movs	r6, #1
    9c40:	f1ba 0f00 	cmp.w	sl, #0
    9c44:	bf04      	itt	eq
    9c46:	f899 0040 	ldrbeq.w	r0, [r9, #64]	; 0x40
    9c4a:	2800      	cmpeq	r0, #0
    9c4c:	d000      	beq.n	9c50 <MPSL_IRQ_RADIO_Handler+0xaac>
    9c4e:	b347      	cbz	r7, 9ca2 <MPSL_IRQ_RADIO_Handler+0xafe>
    9c50:	e9d9 100e 	ldrd	r1, r0, [r9, #56]	; 0x38
    9c54:	ea6f 0101 	mvn.w	r1, r1
    9c58:	ea71 0000 	orns	r0, r1, r0
    9c5c:	d006      	beq.n	9c6c <MPSL_IRQ_RADIO_Handler+0xac8>
    9c5e:	f002 fcad 	bl	c5bc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9c62:	f04f 30ff 	mov.w	r0, #4294967295
    9c66:	4601      	mov	r1, r0
    9c68:	e9c9 010e 	strd	r0, r1, [r9, #56]	; 0x38
    9c6c:	b1ff      	cbz	r7, 9cae <MPSL_IRQ_RADIO_Handler+0xb0a>
    9c6e:	9816      	ldr	r0, [sp, #88]	; 0x58
    9c70:	1a20      	subs	r0, r4, r0
    9c72:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9c76:	f04f 0005 	mov.w	r0, #5
    9c7a:	f002 f8ab 	bl	bdd4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9c7e:	b370      	cbz	r0, 9cde <MPSL_IRQ_RADIO_Handler+0xb3a>
    9c80:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    9c84:	2800      	cmp	r0, #0
    9c86:	bf08      	it	eq
    9c88:	f889 6040 	strbeq.w	r6, [r9, #64]	; 0x40
    9c8c:	e017      	b.n	9cbe <MPSL_IRQ_RADIO_Handler+0xb1a>
    9c8e:	2002      	movs	r0, #2
    9c90:	f002 f95a 	bl	bf48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9c94:	2001      	movs	r0, #1
    9c96:	f002 f957 	bl	bf48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9c9a:	b020      	add	sp, #128	; 0x80
    9c9c:	2000      	movs	r0, #0
    9c9e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9ca2:	e9d9 010e 	ldrd	r0, r1, [r9, #56]	; 0x38
    9ca6:	43c0      	mvns	r0, r0
    9ca8:	ea70 0001 	orns	r0, r0, r1
    9cac:	d012      	beq.n	9cd4 <MPSL_IRQ_RADIO_Handler+0xb30>
    9cae:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    9cb2:	b120      	cbz	r0, 9cbe <MPSL_IRQ_RADIO_Handler+0xb1a>
    9cb4:	2005      	movs	r0, #5
    9cb6:	f002 f947 	bl	bf48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9cba:	f889 b040 	strb.w	fp, [r9, #64]	; 0x40
    9cbe:	eba5 0008 	sub.w	r0, r5, r8
    9cc2:	f1a0 0119 	sub.w	r1, r0, #25
    9cc6:	2900      	cmp	r1, #0
    9cc8:	dc0f      	bgt.n	9cea <MPSL_IRQ_RADIO_Handler+0xb46>
    9cca:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    9cce:	2070      	movs	r0, #112	; 0x70
    9cd0:	f002 fe0e 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9cd4:	f002 fc8e 	bl	c5f4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9cd8:	f002 f85a 	bl	bd90 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9cdc:	e7c4      	b.n	9c68 <MPSL_IRQ_RADIO_Handler+0xac4>
    9cde:	e7ff      	b.n	9ce0 <MPSL_IRQ_RADIO_Handler+0xb3c>
    9ce0:	f240 21e6 	movw	r1, #742	; 0x2e6
    9ce4:	2070      	movs	r0, #112	; 0x70
    9ce6:	f002 fe03 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9cea:	2003      	movs	r0, #3
    9cec:	f002 f872 	bl	bdd4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9cf0:	b338      	cbz	r0, 9d42 <MPSL_IRQ_RADIO_Handler+0xb9e>
    9cf2:	4816      	ldr	r0, [pc, #88]	; (9d4c <MPSL_IRQ_RADIO_Handler+0xba8>)
    9cf4:	6880      	ldr	r0, [r0, #8]
    9cf6:	f8c0 b000 	str.w	fp, [r0]
    9cfa:	4815      	ldr	r0, [pc, #84]	; (9d50 <MPSL_IRQ_RADIO_Handler+0xbac>)
    9cfc:	f8c0 b000 	str.w	fp, [r0]
    9d00:	ac0c      	add	r4, sp, #48	; 0x30
    9d02:	4814      	ldr	r0, [pc, #80]	; (9d54 <MPSL_IRQ_RADIO_Handler+0xbb0>)
    9d04:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    9d08:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    9d0c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    9d10:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    9d14:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
    9d18:	ac10      	add	r4, sp, #64	; 0x40
    9d1a:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    9d1e:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    9d22:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    9d26:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    9d2a:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    9d2e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    9d32:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    9d36:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    9d3a:	b020      	add	sp, #128	; 0x80
    9d3c:	2001      	movs	r0, #1
    9d3e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d42:	f640 2148 	movw	r1, #2632	; 0xa48
    9d46:	2070      	movs	r0, #112	; 0x70
    9d48:	f002 fdd2 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d4c:	200002fc 	.word	0x200002fc
    9d50:	40000508 	.word	0x40000508
    9d54:	20001050 	.word	0x20001050
    9d58:	b570      	push	{r4, r5, r6, lr}
    9d5a:	4d1d      	ldr	r5, [pc, #116]	; (9dd0 <MPSL_IRQ_RADIO_Handler+0xc2c>)
    9d5c:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    9d60:	2820      	cmp	r0, #32
    9d62:	bf18      	it	ne
    9d64:	bd70      	popne	{r4, r5, r6, pc}
    9d66:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    9d6a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9d6e:	4428      	add	r0, r5
    9d70:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    9d74:	2c20      	cmp	r4, #32
    9d76:	d026      	beq.n	9dc6 <MPSL_IRQ_RADIO_Handler+0xc22>
    9d78:	4b16      	ldr	r3, [pc, #88]	; (9dd4 <MPSL_IRQ_RADIO_Handler+0xc30>)
    9d7a:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9d7e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9d82:	7849      	ldrb	r1, [r1, #1]
    9d84:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    9d88:	20ff      	movs	r0, #255	; 0xff
    9d8a:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    9d8e:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    9d92:	4621      	mov	r1, r4
    9d94:	2002      	movs	r0, #2
    9d96:	f000 f88b 	bl	9eb0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9d9a:	2000      	movs	r0, #0
    9d9c:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    9da0:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    9da4:	480c      	ldr	r0, [pc, #48]	; (9dd8 <MPSL_IRQ_RADIO_Handler+0xc34>)
    9da6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    9daa:	7e00      	ldrb	r0, [r0, #24]
    9dac:	2800      	cmp	r0, #0
    9dae:	bf08      	it	eq
    9db0:	f002 ff06 	bleq	cbc0 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9db4:	2000      	movs	r0, #0
    9db6:	4909      	ldr	r1, [pc, #36]	; (9ddc <MPSL_IRQ_RADIO_Handler+0xc38>)
    9db8:	6849      	ldr	r1, [r1, #4]
    9dba:	2900      	cmp	r1, #0
    9dbc:	bf08      	it	eq
    9dbe:	bd70      	popeq	{r4, r5, r6, pc}
    9dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9dc4:	4708      	bx	r1
    9dc6:	f240 311d 	movw	r1, #797	; 0x31d
    9dca:	2070      	movs	r0, #112	; 0x70
    9dcc:	f002 fd90 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9dd0:	200010d0 	.word	0x200010d0
    9dd4:	20001050 	.word	0x20001050
    9dd8:	20000c50 	.word	0x20000c50
    9ddc:	200002fc 	.word	0x200002fc
    9de0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9de4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 9ea0 <MPSL_IRQ_RADIO_Handler+0xcfc>
    9de8:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    9dec:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9df0:	4440      	add	r0, r8
    9df2:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    9df6:	2c20      	cmp	r4, #32
    9df8:	bf08      	it	eq
    9dfa:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9dfe:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 9ea4 <MPSL_IRQ_RADIO_Handler+0xd00>
    9e02:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 9ea8 <MPSL_IRQ_RADIO_Handler+0xd04>
    9e06:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    9e0a:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    9e0e:	2607      	movs	r6, #7
    9e10:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9e14:	2801      	cmp	r0, #1
    9e16:	d00e      	beq.n	9e36 <MPSL_IRQ_RADIO_Handler+0xc92>
    9e18:	2804      	cmp	r0, #4
    9e1a:	bf08      	it	eq
    9e1c:	2602      	moveq	r6, #2
    9e1e:	d00a      	beq.n	9e36 <MPSL_IRQ_RADIO_Handler+0xc92>
    9e20:	2805      	cmp	r0, #5
    9e22:	bf0c      	ite	eq
    9e24:	2603      	moveq	r6, #3
    9e26:	2806      	cmpne	r0, #6
    9e28:	d005      	beq.n	9e36 <MPSL_IRQ_RADIO_Handler+0xc92>
    9e2a:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    9e2e:	f04f 0070 	mov.w	r0, #112	; 0x70
    9e32:	f002 fd5d 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e36:	f1bb 0f00 	cmp.w	fp, #0
    9e3a:	bf18      	it	ne
    9e3c:	f3af 8000 	nopne.w
    9e40:	f3ef 8010 	mrs	r0, PRIMASK
    9e44:	b672      	cpsid	i
    9e46:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9e4a:	784a      	ldrb	r2, [r1, #1]
    9e4c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9e50:	4441      	add	r1, r8
    9e52:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    9e56:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    9e5a:	42a2      	cmp	r2, r4
    9e5c:	bf04      	itt	eq
    9e5e:	2220      	moveq	r2, #32
    9e60:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    9e64:	b1a8      	cbz	r0, 9e92 <MPSL_IRQ_RADIO_Handler+0xcee>
    9e66:	462a      	mov	r2, r5
    9e68:	4621      	mov	r1, r4
    9e6a:	2001      	movs	r0, #1
    9e6c:	f000 f820 	bl	9eb0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9e70:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    9e74:	e9d1 2000 	ldrd	r2, r0, [r1]
    9e78:	4631      	mov	r1, r6
    9e7a:	4790      	blx	r2
    9e7c:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    9e80:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9e84:	4440      	add	r0, r8
    9e86:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    9e8a:	2c20      	cmp	r4, #32
    9e8c:	d1bd      	bne.n	9e0a <MPSL_IRQ_RADIO_Handler+0xc66>
    9e8e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9e92:	4806      	ldr	r0, [pc, #24]	; (9eac <MPSL_IRQ_RADIO_Handler+0xd08>)
    9e94:	2800      	cmp	r0, #0
    9e96:	bf18      	it	ne
    9e98:	f3af 8000 	nopne.w
    9e9c:	b662      	cpsie	i
    9e9e:	e7e2      	b.n	9e66 <MPSL_IRQ_RADIO_Handler+0xcc2>
    9ea0:	200010d0 	.word	0x200010d0
    9ea4:	00000000 	.word	0x00000000
    9ea8:	20001050 	.word	0x20001050
    9eac:	00000000 	.word	0x00000000
    9eb0:	f8df c058 	ldr.w	ip, [pc, #88]	; 9f0c <MPSL_IRQ_RADIO_Handler+0xd68>
    9eb4:	b510      	push	{r4, lr}
    9eb6:	2300      	movs	r3, #0
    9eb8:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9ebc:	2807      	cmp	r0, #7
    9ebe:	d21f      	bcs.n	9f00 <MPSL_IRQ_RADIO_Handler+0xd5c>
    9ec0:	e8df f000 	tbb	[pc, r0]
    9ec4:	05050505 	.word	0x05050505
    9ec8:	00040404 	.word	0x00040404
    9ecc:	2301      	movs	r3, #1
    9ece:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    9ed2:	2b00      	cmp	r3, #0
    9ed4:	bf08      	it	eq
    9ed6:	bd10      	popeq	{r4, pc}
    9ed8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9edc:	480c      	ldr	r0, [pc, #48]	; (9f10 <MPSL_IRQ_RADIO_Handler+0xd6c>)
    9ede:	4402      	add	r2, r0
    9ee0:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    9ee4:	2820      	cmp	r0, #32
    9ee6:	bf0e      	itee	eq
    9ee8:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    9eec:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9ef0:	7041      	strbne	r1, [r0, #1]
    9ef2:	2020      	movs	r0, #32
    9ef4:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    9ef8:	7058      	strb	r0, [r3, #1]
    9efa:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    9efe:	bd10      	pop	{r4, pc}
    9f00:	f44f 7117 	mov.w	r1, #604	; 0x25c
    9f04:	2070      	movs	r0, #112	; 0x70
    9f06:	f002 fcf3 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9f0a:	0000      	.short	0x0000
    9f0c:	20001050 	.word	0x20001050
    9f10:	200010d0 	.word	0x200010d0
    9f14:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9f18:	460f      	mov	r7, r1
    9f1a:	4680      	mov	r8, r0
    9f1c:	f8df b154 	ldr.w	fp, [pc, #340]	; a074 <MPSL_IRQ_RADIO_Handler+0xed0>
    9f20:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9f24:	4458      	add	r0, fp
    9f26:	f1b8 0f01 	cmp.w	r8, #1
    9f2a:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    9f2e:	4625      	mov	r5, r4
    9f30:	bf18      	it	ne
    9f32:	f1b8 0f02 	cmpne.w	r8, #2
    9f36:	d005      	beq.n	9f44 <MPSL_IRQ_RADIO_Handler+0xda0>
    9f38:	f640 217e 	movw	r1, #2686	; 0xa7e
    9f3c:	f04f 0070 	mov.w	r0, #112	; 0x70
    9f40:	f002 fcd6 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9f44:	2d20      	cmp	r5, #32
    9f46:	d041      	beq.n	9fcc <MPSL_IRQ_RADIO_Handler+0xe28>
    9f48:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    9f4c:	2600      	movs	r6, #0
    9f4e:	2800      	cmp	r0, #0
    9f50:	bf08      	it	eq
    9f52:	2602      	moveq	r6, #2
    9f54:	f001 fd66 	bl	ba24 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9f58:	f8df 911c 	ldr.w	r9, [pc, #284]	; a078 <MPSL_IRQ_RADIO_Handler+0xed4>
    9f5c:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9f60:	6899      	ldr	r1, [r3, #8]
    9f62:	691b      	ldr	r3, [r3, #16]
    9f64:	1a0a      	subs	r2, r1, r0
    9f66:	18c9      	adds	r1, r1, r3
    9f68:	1a09      	subs	r1, r1, r0
    9f6a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9f6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9f72:	4296      	cmp	r6, r2
    9f74:	bf99      	ittee	ls
    9f76:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9f7a:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9f7e:	4a3f      	ldrhi	r2, [pc, #252]	; (a07c <MPSL_IRQ_RADIO_Handler+0xed8>)
    9f80:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    9f84:	d920      	bls.n	9fc8 <MPSL_IRQ_RADIO_Handler+0xe24>
    9f86:	4622      	mov	r2, r4
    9f88:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    9f8c:	784c      	ldrb	r4, [r1, #1]
    9f8e:	2c20      	cmp	r4, #32
    9f90:	d012      	beq.n	9fb8 <MPSL_IRQ_RADIO_Handler+0xe14>
    9f92:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9f96:	6899      	ldr	r1, [r3, #8]
    9f98:	691b      	ldr	r3, [r3, #16]
    9f9a:	ebb1 0c00 	subs.w	ip, r1, r0
    9f9e:	18c9      	adds	r1, r1, r3
    9fa0:	1a09      	subs	r1, r1, r0
    9fa2:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    9fa6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9faa:	4566      	cmp	r6, ip
    9fac:	bf9c      	itt	ls
    9fae:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    9fb2:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9fb6:	d8e6      	bhi.n	9f86 <MPSL_IRQ_RADIO_Handler+0xde2>
    9fb8:	2a20      	cmp	r2, #32
    9fba:	d005      	beq.n	9fc8 <MPSL_IRQ_RADIO_Handler+0xe24>
    9fbc:	463b      	mov	r3, r7
    9fbe:	2120      	movs	r1, #32
    9fc0:	2004      	movs	r0, #4
    9fc2:	f7ff f90d 	bl	91e0 <MPSL_IRQ_RADIO_Handler+0x3c>
    9fc6:	4604      	mov	r4, r0
    9fc8:	42ac      	cmp	r4, r5
    9fca:	d113      	bne.n	9ff4 <MPSL_IRQ_RADIO_Handler+0xe50>
    9fcc:	482c      	ldr	r0, [pc, #176]	; (a080 <MPSL_IRQ_RADIO_Handler+0xedc>)
    9fce:	2800      	cmp	r0, #0
    9fd0:	bf18      	it	ne
    9fd2:	f3af 8000 	nopne.w
    9fd6:	f001 fedb 	bl	bd90 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9fda:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    9fde:	2a20      	cmp	r2, #32
    9fe0:	d00b      	beq.n	9ffa <MPSL_IRQ_RADIO_Handler+0xe56>
    9fe2:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    9fe6:	1c84      	adds	r4, r0, #2
    9fe8:	f141 0c00 	adc.w	ip, r1, #0
    9fec:	1b1b      	subs	r3, r3, r4
    9fee:	eb72 020c 	sbcs.w	r2, r2, ip
    9ff2:	d202      	bcs.n	9ffa <MPSL_IRQ_RADIO_Handler+0xe56>
    9ff4:	2000      	movs	r0, #0
    9ff6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9ffa:	2d20      	cmp	r5, #32
    9ffc:	d013      	beq.n	a026 <MPSL_IRQ_RADIO_Handler+0xe82>
    9ffe:	462b      	mov	r3, r5
    a000:	4642      	mov	r2, r8
    a002:	f7ff fbaf 	bl	9764 <MPSL_IRQ_RADIO_Handler+0x5c0>
    a006:	2800      	cmp	r0, #0
    a008:	bf1e      	ittt	ne
    a00a:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    a00e:	2002      	movne	r0, #2
    a010:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a014:	463b      	mov	r3, r7
    a016:	462a      	mov	r2, r5
    a018:	2120      	movs	r1, #32
    a01a:	2004      	movs	r0, #4
    a01c:	f7ff f8e0 	bl	91e0 <MPSL_IRQ_RADIO_Handler+0x3c>
    a020:	2000      	movs	r0, #0
    a022:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a026:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    a02a:	43c0      	mvns	r0, r0
    a02c:	ea70 0001 	orns	r0, r0, r1
    a030:	d005      	beq.n	a03e <MPSL_IRQ_RADIO_Handler+0xe9a>
    a032:	f002 fac3 	bl	c5bc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    a036:	f04f 30ff 	mov.w	r0, #4294967295
    a03a:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    a03e:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    a042:	b128      	cbz	r0, a050 <MPSL_IRQ_RADIO_Handler+0xeac>
    a044:	2005      	movs	r0, #5
    a046:	f001 ff7f 	bl	bf48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a04a:	2000      	movs	r0, #0
    a04c:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    a050:	2004      	movs	r0, #4
    a052:	f001 ff79 	bl	bf48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a056:	f001 ffdf 	bl	c018 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    a05a:	490a      	ldr	r1, [pc, #40]	; (a084 <MPSL_IRQ_RADIO_Handler+0xee0>)
    a05c:	2020      	movs	r0, #32
    a05e:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    a062:	6889      	ldr	r1, [r1, #8]
    a064:	2000      	movs	r0, #0
    a066:	6008      	str	r0, [r1, #0]
    a068:	4907      	ldr	r1, [pc, #28]	; (a088 <MPSL_IRQ_RADIO_Handler+0xee4>)
    a06a:	6008      	str	r0, [r1, #0]
    a06c:	2001      	movs	r0, #1
    a06e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a072:	0000      	.short	0x0000
    a074:	200010d0 	.word	0x200010d0
    a078:	20000c50 	.word	0x20000c50
    a07c:	20001050 	.word	0x20001050
    a080:	00000000 	.word	0x00000000
    a084:	200002fc 	.word	0x200002fc
    a088:	40000508 	.word	0x40000508

0000a08c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    a08c:	4906      	ldr	r1, [pc, #24]	; (a0a8 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    a08e:	b510      	push	{r4, lr}
    a090:	f891 2042 	ldrb.w	r2, [r1, #66]	; 0x42
    a094:	2a20      	cmp	r2, #32
    a096:	bf1c      	itt	ne
    a098:	f881 0022 	strbne.w	r0, [r1, #34]	; 0x22
    a09c:	bd10      	popne	{r4, pc}
    a09e:	f240 3177 	movw	r1, #887	; 0x377
    a0a2:	2070      	movs	r0, #112	; 0x70
    a0a4:	f002 fc24 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0a8:	200010d0 	.word	0x200010d0

0000a0ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    a0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0b0:	f8df b1c4 	ldr.w	fp, [pc, #452]	; a278 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    a0b4:	4606      	mov	r6, r0
    a0b6:	b08f      	sub	sp, #60	; 0x3c
    a0b8:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    a0bc:	468a      	mov	sl, r1
    a0be:	2820      	cmp	r0, #32
    a0c0:	d061      	beq.n	a186 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    a0c2:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    a0c6:	f10b 0408 	add.w	r4, fp, #8
    a0ca:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    a0ce:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    a0d2:	2120      	movs	r1, #32
    a0d4:	f88d 1018 	strb.w	r1, [sp, #24]
    a0d8:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    a0dc:	f8db 2008 	ldr.w	r2, [fp, #8]
    a0e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a0e4:	4459      	add	r1, fp
    a0e6:	2700      	movs	r7, #0
    a0e8:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    a0ec:	f8db 1010 	ldr.w	r1, [fp, #16]
    a0f0:	1851      	adds	r1, r2, r1
    a0f2:	910a      	str	r1, [sp, #40]	; 0x28
    a0f4:	f8db 0000 	ldr.w	r0, [fp]
    a0f8:	aa09      	add	r2, sp, #36	; 0x24
    a0fa:	4430      	add	r0, r6
    a0fc:	a907      	add	r1, sp, #28
    a0fe:	f001 fb67 	bl	b7d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a102:	f8d9 0010 	ldr.w	r0, [r9, #16]
    a106:	9907      	ldr	r1, [sp, #28]
    a108:	f8d9 2008 	ldr.w	r2, [r9, #8]
    a10c:	1840      	adds	r0, r0, r1
    a10e:	1810      	adds	r0, r2, r0
    a110:	2e67      	cmp	r6, #103	; 0x67
    a112:	d33d      	bcc.n	a190 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    a114:	4959      	ldr	r1, [pc, #356]	; (a27c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    a116:	2200      	movs	r2, #0
    a118:	1b89      	subs	r1, r1, r6
    a11a:	eb72 0107 	sbcs.w	r1, r2, r7
    a11e:	d337      	bcc.n	a190 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    a120:	6821      	ldr	r1, [r4, #0]
    a122:	4694      	mov	ip, r2
    a124:	1a40      	subs	r0, r0, r1
    a126:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    a12a:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    a12e:	eb7c 010c 	sbcs.w	r1, ip, ip
    a132:	d32d      	bcc.n	a190 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    a134:	60a0      	str	r0, [r4, #8]
    a136:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    a13a:	f884 a010 	strb.w	sl, [r4, #16]
    a13e:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    a142:	f10d 0b18 	add.w	fp, sp, #24
    a146:	2d20      	cmp	r5, #32
    a148:	d055      	beq.n	a1f6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    a14a:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    a14e:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    a152:	9001      	str	r0, [sp, #4]
    a154:	484a      	ldr	r0, [pc, #296]	; (a280 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    a156:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    a15a:	f8d4 a000 	ldr.w	sl, [r4]
    a15e:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    a162:	f108 0008 	add.w	r0, r8, #8
    a166:	eb1a 0201 	adds.w	r2, sl, r1
    a16a:	eb43 0107 	adc.w	r1, r3, r7
    a16e:	e9d0 9300 	ldrd	r9, r3, [r0]
    a172:	ebb9 0202 	subs.w	r2, r9, r2
    a176:	eb73 0101 	sbcs.w	r1, r3, r1
    a17a:	d325      	bcc.n	a1c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    a17c:	89c0      	ldrh	r0, [r0, #14]
    a17e:	b398      	cbz	r0, a1e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    a180:	89e0      	ldrh	r0, [r4, #14]
    a182:	b148      	cbz	r0, a198 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    a184:	e037      	b.n	a1f6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    a186:	f640 3138 	movw	r1, #2872	; 0xb38
    a18a:	2070      	movs	r0, #112	; 0x70
    a18c:	f002 fbb0 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a190:	b00f      	add	sp, #60	; 0x3c
    a192:	2001      	movs	r0, #1
    a194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a198:	f002 fa0a 	bl	c5b0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a19c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a1a0:	bf08      	it	eq
    a1a2:	200d      	moveq	r0, #13
    a1a4:	d00b      	beq.n	a1be <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    a1a6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a1aa:	3856      	subs	r0, #86	; 0x56
    a1ac:	bf08      	it	eq
    a1ae:	201c      	moveq	r0, #28
    a1b0:	d005      	beq.n	a1be <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    a1b2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a1b6:	389f      	subs	r0, #159	; 0x9f
    a1b8:	bf14      	ite	ne
    a1ba:	4638      	movne	r0, r7
    a1bc:	2032      	moveq	r0, #50	; 0x32
    a1be:	1c41      	adds	r1, r0, #1
    a1c0:	ebb9 000a 	subs.w	r0, r9, sl
    a1c4:	4288      	cmp	r0, r1
    a1c6:	da16      	bge.n	a1f6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    a1c8:	f88b 5000 	strb.w	r5, [fp]
    a1cc:	f898 0018 	ldrb.w	r0, [r8, #24]
    a1d0:	7c21      	ldrb	r1, [r4, #16]
    a1d2:	4281      	cmp	r1, r0
    a1d4:	d309      	bcc.n	a1ea <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    a1d6:	6821      	ldr	r1, [r4, #0]
    a1d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    a1da:	1a40      	subs	r0, r0, r1
    a1dc:	60a0      	str	r0, [r4, #8]
    a1de:	b00f      	add	sp, #60	; 0x3c
    a1e0:	f04f 0002 	mov.w	r0, #2
    a1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a1e8:	e005      	b.n	a1f6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    a1ea:	9801      	ldr	r0, [sp, #4]
    a1ec:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    a1f0:	7845      	ldrb	r5, [r0, #1]
    a1f2:	2d20      	cmp	r5, #32
    a1f4:	d1ae      	bne.n	a154 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    a1f6:	2005      	movs	r0, #5
    a1f8:	f001 fea6 	bl	bf48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a1fc:	4d1e      	ldr	r5, [pc, #120]	; (a278 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    a1fe:	f04f 30ff 	mov.w	r0, #4294967295
    a202:	6068      	str	r0, [r5, #4]
    a204:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    a208:	f89d 2018 	ldrb.w	r2, [sp, #24]
    a20c:	2120      	movs	r1, #32
    a20e:	2a20      	cmp	r2, #32
    a210:	d003      	beq.n	a21a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    a212:	2005      	movs	r0, #5
    a214:	f7fe ffe4 	bl	91e0 <MPSL_IRQ_RADIO_Handler+0x3c>
    a218:	e004      	b.n	a224 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    a21a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    a21e:	4428      	add	r0, r5
    a220:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    a224:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    a228:	4916      	ldr	r1, [pc, #88]	; (a284 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    a22a:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    a22e:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    a232:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    a236:	7048      	strb	r0, [r1, #1]
    a238:	6828      	ldr	r0, [r5, #0]
    a23a:	4430      	add	r0, r6
    a23c:	6028      	str	r0, [r5, #0]
    a23e:	20ff      	movs	r0, #255	; 0xff
    a240:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    a244:	7e68      	ldrb	r0, [r5, #25]
    a246:	2801      	cmp	r0, #1
    a248:	d10a      	bne.n	a260 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    a24a:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    a24e:	6823      	ldr	r3, [r4, #0]
    a250:	1818      	adds	r0, r3, r0
    a252:	f142 0100 	adc.w	r1, r2, #0
    a256:	1e40      	subs	r0, r0, #1
    a258:	f141 31ff 	adc.w	r1, r1, #4294967295
    a25c:	f001 fc96 	bl	bb8c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a260:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a264:	2820      	cmp	r0, #32
    a266:	d003      	beq.n	a270 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    a268:	4807      	ldr	r0, [pc, #28]	; (a288 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    a26a:	7840      	ldrb	r0, [r0, #1]
    a26c:	f002 fc12 	bl	ca94 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a270:	b00f      	add	sp, #60	; 0x3c
    a272:	2000      	movs	r0, #0
    a274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a278:	200010d0 	.word	0x200010d0
    a27c:	0f424000 	.word	0x0f424000
    a280:	20000c50 	.word	0x20000c50
    a284:	20001050 	.word	0x20001050
    a288:	200002fc 	.word	0x200002fc

0000a28c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    a28c:	b570      	push	{r4, r5, r6, lr}
    a28e:	4a23      	ldr	r2, [pc, #140]	; (a31c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    a290:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    a294:	2920      	cmp	r1, #32
    a296:	d039      	beq.n	a30c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    a298:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    a29c:	f5a2 6390 	sub.w	r3, r2, #1152	; 0x480
    a2a0:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
    a2a4:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
    a2a8:	f892 4041 	ldrb.w	r4, [r2, #65]	; 0x41
    a2ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a2b0:	4411      	add	r1, r2
    a2b2:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    a2b6:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    a2ba:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    a2be:	2920      	cmp	r1, #32
    a2c0:	d029      	beq.n	a316 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    a2c2:	eb03 1541 	add.w	r5, r3, r1, lsl #5
    a2c6:	7e2d      	ldrb	r5, [r5, #24]
    a2c8:	42a8      	cmp	r0, r5
    a2ca:	bf3c      	itt	cc
    a2cc:	eb04 0141 	addcc.w	r1, r4, r1, lsl #1
    a2d0:	7849      	ldrbcc	r1, [r1, #1]
    a2d2:	d3f4      	bcc.n	a2be <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
    a2d4:	e9dc 6003 	ldrd	r6, r0, [ip, #12]
    a2d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    a2dc:	f8dc 5008 	ldr.w	r5, [ip, #8]
    a2e0:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
    a2e4:	6814      	ldr	r4, [r2, #0]
    a2e6:	1828      	adds	r0, r5, r0
    a2e8:	f146 0200 	adc.w	r2, r6, #0
    a2ec:	ebb1 0c00 	subs.w	ip, r1, r0
    a2f0:	eb73 0202 	sbcs.w	r2, r3, r2
    a2f4:	d308      	bcc.n	a308 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    a2f6:	1a08      	subs	r0, r1, r0
    a2f8:	f006 fcdf 	bl	10cba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a2fc:	f104 0167 	add.w	r1, r4, #103	; 0x67
    a300:	4281      	cmp	r1, r0
    a302:	bf9c      	itt	ls
    a304:	1b00      	subls	r0, r0, r4
    a306:	bd70      	popls	{r4, r5, r6, pc}
    a308:	2000      	movs	r0, #0
    a30a:	bd70      	pop	{r4, r5, r6, pc}
    a30c:	f640 310b 	movw	r1, #2827	; 0xb0b
    a310:	2070      	movs	r0, #112	; 0x70
    a312:	f002 faed 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a316:	f04f 30ff 	mov.w	r0, #4294967295
    a31a:	bd70      	pop	{r4, r5, r6, pc}
    a31c:	200010d0 	.word	0x200010d0

0000a320 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    a320:	4806      	ldr	r0, [pc, #24]	; (a33c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    a322:	b510      	push	{r4, lr}
    a324:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    a328:	2920      	cmp	r1, #32
    a32a:	bf1c      	itt	ne
    a32c:	7e00      	ldrbne	r0, [r0, #24]
    a32e:	bd10      	popne	{r4, pc}
    a330:	f640 3132 	movw	r1, #2866	; 0xb32
    a334:	2070      	movs	r0, #112	; 0x70
    a336:	f002 fadb 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a33a:	0000      	.short	0x0000
    a33c:	200010d0 	.word	0x200010d0

0000a340 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    a340:	490a      	ldr	r1, [pc, #40]	; (a36c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    a342:	b510      	push	{r4, lr}
    a344:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    a348:	f100 0408 	add.w	r4, r0, #8
    a34c:	e9d4 0100 	ldrd	r0, r1, [r4]
    a350:	f001 f9c0 	bl	b6d4 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a354:	89e3      	ldrh	r3, [r4, #14]
    a356:	2200      	movs	r2, #0
    a358:	18c3      	adds	r3, r0, r3
    a35a:	7b20      	ldrb	r0, [r4, #12]
    a35c:	4151      	adcs	r1, r2
    a35e:	1818      	adds	r0, r3, r0
    a360:	4151      	adcs	r1, r2
    a362:	1c40      	adds	r0, r0, #1
    a364:	f141 0100 	adc.w	r1, r1, #0
    a368:	bd10      	pop	{r4, pc}
    a36a:	0000      	.short	0x0000
    a36c:	20000c50 	.word	0x20000c50

0000a370 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    a370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a372:	4d6f      	ldr	r5, [pc, #444]	; (a530 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    a374:	2600      	movs	r6, #0
    a376:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    a37a:	2701      	movs	r7, #1
    a37c:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    a380:	4b6c      	ldr	r3, [pc, #432]	; (a534 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    a382:	2808      	cmp	r0, #8
    a384:	d273      	bcs.n	a46e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    a386:	e8df f000 	tbb	[pc, r0]
    a38a:	7804      	.short	0x7804
    a38c:	47ceb3a0 	.word	0x47ceb3a0
    a390:	bdb8      	.short	0xbdb8
    a392:	43c8      	mvns	r0, r1
    a394:	ea70 0002 	orns	r0, r0, r2
    a398:	d105      	bne.n	a3a6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    a39a:	f002 f92b 	bl	c5f4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a39e:	f001 fcf7 	bl	bd90 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a3a2:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    a3a6:	8ae0      	ldrh	r0, [r4, #22]
    a3a8:	b110      	cbz	r0, a3b0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    a3aa:	f002 fa29 	bl	c800 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a3ae:	b180      	cbz	r0, a3d2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    a3b0:	f7ff fcd2 	bl	9d58 <MPSL_IRQ_RADIO_Handler+0xbb4>
    a3b4:	20ff      	movs	r0, #255	; 0xff
    a3b6:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    a3ba:	6861      	ldr	r1, [r4, #4]
    a3bc:	f1b1 3fff 	cmp.w	r1, #4294967295
    a3c0:	d003      	beq.n	a3ca <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    a3c2:	2005      	movs	r0, #5
    a3c4:	f001 fd06 	bl	bdd4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a3c8:	b140      	cbz	r0, a3dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    a3ca:	7e60      	ldrb	r0, [r4, #25]
    a3cc:	2801      	cmp	r0, #1
    a3ce:	d114      	bne.n	a3fa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    a3d0:	e009      	b.n	a3e6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    a3d2:	f640 012c 	movw	r1, #2092	; 0x82c
    a3d6:	2070      	movs	r0, #112	; 0x70
    a3d8:	f002 fa8a 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a3dc:	f640 0131 	movw	r1, #2097	; 0x831
    a3e0:	2070      	movs	r0, #112	; 0x70
    a3e2:	f002 fa85 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a3e6:	68a2      	ldr	r2, [r4, #8]
    a3e8:	6920      	ldr	r0, [r4, #16]
    a3ea:	68e1      	ldr	r1, [r4, #12]
    a3ec:	1810      	adds	r0, r2, r0
    a3ee:	4171      	adcs	r1, r6
    a3f0:	1e40      	subs	r0, r0, #1
    a3f2:	f141 31ff 	adc.w	r1, r1, #4294967295
    a3f6:	f001 fbc9 	bl	bb8c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a3fa:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a3fe:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a402:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a406:	6840      	ldr	r0, [r0, #4]
    a408:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a40c:	680a      	ldr	r2, [r1, #0]
    a40e:	b001      	add	sp, #4
    a410:	2101      	movs	r1, #1
    a412:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a416:	4710      	bx	r2
    a418:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    a41c:	b160      	cbz	r0, a438 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    a41e:	43c8      	mvns	r0, r1
    a420:	ea70 0002 	orns	r0, r0, r2
    a424:	d105      	bne.n	a432 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    a426:	f002 f8e5 	bl	c5f4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a42a:	f001 fcb1 	bl	bd90 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a42e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    a432:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    a436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a438:	f7ff fc8e 	bl	9d58 <MPSL_IRQ_RADIO_Handler+0xbb4>
    a43c:	f04f 30ff 	mov.w	r0, #4294967295
    a440:	6060      	str	r0, [r4, #4]
    a442:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    a446:	f88d 0000 	strb.w	r0, [sp]
    a44a:	f89d 0000 	ldrb.w	r0, [sp]
    a44e:	b178      	cbz	r0, a470 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    a450:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a454:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a458:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a45c:	6840      	ldr	r0, [r0, #4]
    a45e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a462:	680a      	ldr	r2, [r1, #0]
    a464:	b001      	add	sp, #4
    a466:	2106      	movs	r1, #6
    a468:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a46c:	4710      	bx	r2
    a46e:	e05a      	b.n	a526 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    a470:	f640 0148 	movw	r1, #2120	; 0x848
    a474:	2070      	movs	r0, #112	; 0x70
    a476:	f002 fa3b 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a47a:	f7ff fc6d 	bl	9d58 <MPSL_IRQ_RADIO_Handler+0xbb4>
    a47e:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    a482:	f002 f9bd 	bl	c800 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a486:	b130      	cbz	r0, a496 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    a488:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    a48c:	43c9      	mvns	r1, r1
    a48e:	ea71 0000 	orns	r0, r1, r0
    a492:	d005      	beq.n	a4a0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    a494:	e00a      	b.n	a4ac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    a496:	f640 0156 	movw	r1, #2134	; 0x856
    a49a:	2070      	movs	r0, #112	; 0x70
    a49c:	f002 fa28 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a4a0:	f002 f8a8 	bl	c5f4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a4a4:	f001 fc74 	bl	bd90 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a4a8:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    a4ac:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a4b0:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a4b4:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a4b8:	6840      	ldr	r0, [r0, #4]
    a4ba:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a4be:	680a      	ldr	r2, [r1, #0]
    a4c0:	b001      	add	sp, #4
    a4c2:	2100      	movs	r1, #0
    a4c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a4c8:	4710      	bx	r2
    a4ca:	f001 fe7b 	bl	c1c4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a4ce:	8ae0      	ldrh	r0, [r4, #22]
    a4d0:	b110      	cbz	r0, a4d8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    a4d2:	f002 f995 	bl	c800 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a4d6:	b130      	cbz	r0, a4e6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    a4d8:	f001 fe88 	bl	c1ec <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a4dc:	2800      	cmp	r0, #0
    a4de:	bf18      	it	ne
    a4e0:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    a4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a4e6:	f44f 6106 	mov.w	r1, #2144	; 0x860
    a4ea:	2070      	movs	r0, #112	; 0x70
    a4ec:	f002 fa00 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a4f0:	4811      	ldr	r0, [pc, #68]	; (a538 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a4f2:	6007      	str	r7, [r0, #0]
    a4f4:	6898      	ldr	r0, [r3, #8]
    a4f6:	6007      	str	r7, [r0, #0]
    a4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a4fa:	7818      	ldrb	r0, [r3, #0]
    a4fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a500:	f002 bac8 	b.w	ca94 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a504:	f7ff fc28 	bl	9d58 <MPSL_IRQ_RADIO_Handler+0xbb4>
    a508:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a50c:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a510:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a514:	6840      	ldr	r0, [r0, #4]
    a516:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a51a:	680a      	ldr	r2, [r1, #0]
    a51c:	b001      	add	sp, #4
    a51e:	2105      	movs	r1, #5
    a520:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a524:	4710      	bx	r2
    a526:	f640 0173 	movw	r1, #2163	; 0x873
    a52a:	2070      	movs	r0, #112	; 0x70
    a52c:	f002 f9e0 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a530:	20000c50 	.word	0x20000c50
    a534:	200002fc 	.word	0x200002fc
    a538:	40000508 	.word	0x40000508

0000a53c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a53c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a540:	48f7      	ldr	r0, [pc, #988]	; (a920 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    a542:	b097      	sub	sp, #92	; 0x5c
    a544:	460c      	mov	r4, r1
    a546:	6800      	ldr	r0, [r0, #0]
    a548:	4ff6      	ldr	r7, [pc, #984]	; (a924 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>)
    a54a:	05c0      	lsls	r0, r0, #23
    a54c:	0dc0      	lsrs	r0, r0, #23
    a54e:	d00e      	beq.n	a56e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a550:	3810      	subs	r0, #16
    a552:	b240      	sxtb	r0, r0
    a554:	2800      	cmp	r0, #0
    a556:	bfb8      	it	lt
    a558:	f000 000f 	andlt.w	r0, r0, #15
    a55c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a560:	bfac      	ite	ge
    a562:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a566:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a56a:	0940      	lsrs	r0, r0, #5
    a56c:	d00c      	beq.n	a588 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    a56e:	7820      	ldrb	r0, [r4, #0]
    a570:	f04f 0a00 	mov.w	sl, #0
    a574:	2800      	cmp	r0, #0
    a576:	bf18      	it	ne
    a578:	2801      	cmpne	r0, #1
    a57a:	d017      	beq.n	a5ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    a57c:	f240 61f9 	movw	r1, #1785	; 0x6f9
    a580:	f04f 0070 	mov.w	r0, #112	; 0x70
    a584:	f002 f9b4 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a588:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    a58c:	f04f 0a01 	mov.w	sl, #1
    a590:	2820      	cmp	r0, #32
    a592:	d006      	beq.n	a5a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    a594:	7820      	ldrb	r0, [r4, #0]
    a596:	b148      	cbz	r0, a5ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    a598:	f240 61f5 	movw	r1, #1781	; 0x6f5
    a59c:	2070      	movs	r0, #112	; 0x70
    a59e:	f002 f9a7 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a5a2:	f240 61f2 	movw	r1, #1778	; 0x6f2
    a5a6:	2070      	movs	r0, #112	; 0x70
    a5a8:	f002 f9a2 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a5ac:	f8df b378 	ldr.w	fp, [pc, #888]	; a928 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    a5b0:	f1bb 0f00 	cmp.w	fp, #0
    a5b4:	d004      	beq.n	a5c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
    a5b6:	2100      	movs	r1, #0
    a5b8:	f240 60fc 	movw	r0, #1788	; 0x6fc
    a5bc:	f3af 8000 	nop.w
    a5c0:	2000      	movs	r0, #0
    a5c2:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    a5c6:	a905      	add	r1, sp, #20
    a5c8:	9112      	str	r1, [sp, #72]	; 0x48
    a5ca:	49d8      	ldr	r1, [pc, #864]	; (a92c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>)
    a5cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a5ce:	f04f 0801 	mov.w	r8, #1
    a5d2:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    a5d6:	9001      	str	r0, [sp, #4]
    a5d8:	f1bb 0f00 	cmp.w	fp, #0
    a5dc:	d004      	beq.n	a5e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a5de:	2100      	movs	r1, #0
    a5e0:	f240 7007 	movw	r0, #1799	; 0x707
    a5e4:	f3af 8000 	nop.w
    a5e8:	f1b8 0f00 	cmp.w	r8, #0
    a5ec:	d009      	beq.n	a602 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    a5ee:	bf00      	nop
    a5f0:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    a5f4:	2500      	movs	r5, #0
    a5f6:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    a5fa:	f1ba 0f00 	cmp.w	sl, #0
    a5fe:	d007      	beq.n	a610 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
    a600:	e03e      	b.n	a680 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x144>
    a602:	48cb      	ldr	r0, [pc, #812]	; (a930 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    a604:	2800      	cmp	r0, #0
    a606:	bf18      	it	ne
    a608:	f3af 8000 	nopne.w
    a60c:	b662      	cpsie	i
    a60e:	e7ef      	b.n	a5f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
    a610:	46b1      	mov	r9, r6
    a612:	2001      	movs	r0, #1
    a614:	ea20 0609 	bic.w	r6, r0, r9
    a618:	48c6      	ldr	r0, [pc, #792]	; (a934 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    a61a:	2240      	movs	r2, #64	; 0x40
    a61c:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    a620:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a624:	f006 fceb 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a628:	f1bb 0f00 	cmp.w	fp, #0
    a62c:	d004      	beq.n	a638 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
    a62e:	2100      	movs	r1, #0
    a630:	f240 503c 	movw	r0, #1340	; 0x53c
    a634:	f3af 8000 	nop.w
    a638:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    a63c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a640:	4439      	add	r1, r7
    a642:	4438      	add	r0, r7
    a644:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    a646:	8502      	strh	r2, [r0, #40]	; 0x28
    a648:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    a64c:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a650:	f1bb 0f00 	cmp.w	fp, #0
    a654:	d004      	beq.n	a660 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x124>
    a656:	2100      	movs	r1, #0
    a658:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a65c:	f3af 8000 	nop.w
    a660:	f1bb 0f00 	cmp.w	fp, #0
    a664:	d004      	beq.n	a670 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
    a666:	2100      	movs	r1, #0
    a668:	f240 7011 	movw	r0, #1809	; 0x711
    a66c:	f3af 8000 	nop.w
    a670:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    a674:	f88d 0020 	strb.w	r0, [sp, #32]
    a678:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a67c:	2800      	cmp	r0, #0
    a67e:	d1ab      	bne.n	a5d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a680:	f1bb 0f00 	cmp.w	fp, #0
    a684:	d004      	beq.n	a690 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x154>
    a686:	2100      	movs	r1, #0
    a688:	f240 701b 	movw	r0, #1819	; 0x71b
    a68c:	f3af 8000 	nop.w
    a690:	f001 fb7e 	bl	bd90 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a694:	4681      	mov	r9, r0
    a696:	a802      	add	r0, sp, #8
    a698:	900a      	str	r0, [sp, #40]	; 0x28
    a69a:	4688      	mov	r8, r1
    a69c:	8921      	ldrh	r1, [r4, #8]
    a69e:	4628      	mov	r0, r5
    a6a0:	f361 401f 	bfi	r0, r1, #16, #16
    a6a4:	4601      	mov	r1, r0
    a6a6:	7aa2      	ldrb	r2, [r4, #10]
    a6a8:	4628      	mov	r0, r5
    a6aa:	f362 0007 	bfi	r0, r2, #0, #8
    a6ae:	7ae2      	ldrb	r2, [r4, #11]
    a6b0:	f362 200f 	bfi	r0, r2, #8, #8
    a6b4:	7822      	ldrb	r2, [r4, #0]
    a6b6:	9502      	str	r5, [sp, #8]
    a6b8:	f362 4017 	bfi	r0, r2, #16, #8
    a6bc:	e9cd 5104 	strd	r5, r1, [sp, #16]
    a6c0:	e9cd 0506 	strd	r0, r5, [sp, #24]
    a6c4:	9503      	str	r5, [sp, #12]
    a6c6:	7820      	ldrb	r0, [r4, #0]
    a6c8:	b380      	cbz	r0, a72c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    a6ca:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    a6ce:	499a      	ldr	r1, [pc, #616]	; (a938 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
    a6d0:	1a08      	subs	r0, r1, r0
    a6d2:	990a      	ldr	r1, [sp, #40]	; 0x28
    a6d4:	f101 020c 	add.w	r2, r1, #12
    a6d8:	a914      	add	r1, sp, #80	; 0x50
    a6da:	f001 f879 	bl	b7d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a6de:	2200      	movs	r2, #0
    a6e0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a6e4:	4648      	mov	r0, r9
    a6e6:	4641      	mov	r1, r8
    a6e8:	f7fe ff4e 	bl	9588 <MPSL_IRQ_RADIO_Handler+0x3e4>
    a6ec:	468c      	mov	ip, r1
    a6ee:	7ae1      	ldrb	r1, [r4, #11]
    a6f0:	2900      	cmp	r1, #0
    a6f2:	bf0c      	ite	eq
    a6f4:	217a      	moveq	r1, #122	; 0x7a
    a6f6:	214a      	movne	r1, #74	; 0x4a
    a6f8:	6862      	ldr	r2, [r4, #4]
    a6fa:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a6fe:	4411      	add	r1, r2
    a700:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    a704:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    a708:	441a      	add	r2, r3
    a70a:	4411      	add	r1, r2
    a70c:	1c88      	adds	r0, r1, #2
    a70e:	f001 f843 	bl	b798 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a712:	9600      	str	r6, [sp, #0]
    a714:	9004      	str	r0, [sp, #16]
    a716:	464a      	mov	r2, r9
    a718:	4643      	mov	r3, r8
    a71a:	6920      	ldr	r0, [r4, #16]
    a71c:	990a      	ldr	r1, [sp, #40]	; 0x28
    a71e:	f7fe fd9b 	bl	9258 <MPSL_IRQ_RADIO_Handler+0xb4>
    a722:	2800      	cmp	r0, #0
    a724:	bf08      	it	eq
    a726:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    a72a:	e046      	b.n	a7ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
    a72c:	e7ff      	b.n	a72e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
    a72e:	4648      	mov	r0, r9
    a730:	4641      	mov	r1, r8
    a732:	f000 ffcf 	bl	b6d4 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a736:	f8df c204 	ldr.w	ip, [pc, #516]	; a93c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    a73a:	4602      	mov	r2, r0
    a73c:	eb10 0c0c 	adds.w	ip, r0, ip
    a740:	460b      	mov	r3, r1
    a742:	f141 0e00 	adc.w	lr, r1, #0
    a746:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    a74a:	ebb0 0c0c 	subs.w	ip, r0, ip
    a74e:	eb71 0c0e 	sbcs.w	ip, r1, lr
    a752:	d229      	bcs.n	a7a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    a754:	3229      	adds	r2, #41	; 0x29
    a756:	f143 0300 	adc.w	r3, r3, #0
    a75a:	1a82      	subs	r2, r0, r2
    a75c:	eb71 0203 	sbcs.w	r2, r1, r3
    a760:	d322      	bcc.n	a7a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    a762:	8922      	ldrh	r2, [r4, #8]
    a764:	ab0a      	add	r3, sp, #40	; 0x28
    a766:	1a80      	subs	r0, r0, r2
    a768:	eb61 0105 	sbc.w	r1, r1, r5
    a76c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a76e:	1e40      	subs	r0, r0, #1
    a770:	9200      	str	r2, [sp, #0]
    a772:	f141 31ff 	adc.w	r1, r1, #4294967295
    a776:	aa0d      	add	r2, sp, #52	; 0x34
    a778:	f000 ffd0 	bl	b71c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    a77c:	7ae0      	ldrb	r0, [r4, #11]
    a77e:	2800      	cmp	r0, #0
    a780:	bf0c      	ite	eq
    a782:	207a      	moveq	r0, #122	; 0x7a
    a784:	204a      	movne	r0, #74	; 0x4a
    a786:	990d      	ldr	r1, [sp, #52]	; 0x34
    a788:	8922      	ldrh	r2, [r4, #8]
    a78a:	4408      	add	r0, r1
    a78c:	6861      	ldr	r1, [r4, #4]
    a78e:	4411      	add	r1, r2
    a790:	4408      	add	r0, r1
    a792:	1c80      	adds	r0, r0, #2
    a794:	f001 f800 	bl	b798 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a798:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    a79c:	e9cd 1202 	strd	r1, r2, [sp, #8]
    a7a0:	1a40      	subs	r0, r0, r1
    a7a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a7a6:	e007      	b.n	a7b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    a7a8:	f1b9 0101 	subs.w	r1, r9, #1
    a7ac:	f148 30ff 	adc.w	r0, r8, #4294967295
    a7b0:	e9cd 1002 	strd	r1, r0, [sp, #8]
    a7b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a7b8:	9004      	str	r0, [sp, #16]
    a7ba:	f1bb 0f00 	cmp.w	fp, #0
    a7be:	d004      	beq.n	a7ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28e>
    a7c0:	2100      	movs	r1, #0
    a7c2:	f240 7022 	movw	r0, #1826	; 0x722
    a7c6:	f3af 8000 	nop.w
    a7ca:	495a      	ldr	r1, [pc, #360]	; (a934 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    a7cc:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    a7d0:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    a7d4:	9108      	str	r1, [sp, #32]
    a7d6:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    a7da:	a802      	add	r0, sp, #8
    a7dc:	2901      	cmp	r1, #1
    a7de:	bf18      	it	ne
    a7e0:	2902      	cmpne	r1, #2
    a7e2:	d141      	bne.n	a868 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    a7e4:	9511      	str	r5, [sp, #68]	; 0x44
    a7e6:	9a02      	ldr	r2, [sp, #8]
    a7e8:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    a7ec:	1a53      	subs	r3, r2, r1
    a7ee:	f8dd c010 	ldr.w	ip, [sp, #16]
    a7f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a7f6:	eb12 020c 	adds.w	r2, r2, ip
    a7fa:	1a51      	subs	r1, r2, r1
    a7fc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a800:	2b02      	cmp	r3, #2
    a802:	d374      	bcc.n	a8ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    a804:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    a808:	bf98      	it	ls
    a80a:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a80e:	d86e      	bhi.n	a8ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    a810:	2501      	movs	r5, #1
    a812:	ab14      	add	r3, sp, #80	; 0x50
    a814:	aa0e      	add	r2, sp, #56	; 0x38
    a816:	4631      	mov	r1, r6
    a818:	f7fe ff06 	bl	9628 <MPSL_IRQ_RADIO_Handler+0x484>
    a81c:	2800      	cmp	r0, #0
    a81e:	d06d      	beq.n	a8fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    a820:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    a824:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a828:	4633      	mov	r3, r6
    a82a:	428a      	cmp	r2, r1
    a82c:	d06a      	beq.n	a904 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
    a82e:	2005      	movs	r0, #5
    a830:	f7fe fcd6 	bl	91e0 <MPSL_IRQ_RADIO_Handler+0x3c>
    a834:	9908      	ldr	r1, [sp, #32]
    a836:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    a83a:	7048      	strb	r0, [r1, #1]
    a83c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    a840:	2820      	cmp	r0, #32
    a842:	bf01      	itttt	eq
    a844:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a848:	4438      	addeq	r0, r7
    a84a:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    a84e:	9511      	streq	r5, [sp, #68]	; 0x44
    a850:	bf1e      	ittt	ne
    a852:	9908      	ldrne	r1, [sp, #32]
    a854:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    a858:	f880 8001 	strbne.w	r8, [r0, #1]
    a85c:	4632      	mov	r2, r6
    a85e:	4641      	mov	r1, r8
    a860:	f05f 0003 	movs.w	r0, #3
    a864:	f7ff fb24 	bl	9eb0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a868:	f1bb 0f00 	cmp.w	fp, #0
    a86c:	d004      	beq.n	a878 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    a86e:	2100      	movs	r1, #0
    a870:	f240 7027 	movw	r0, #1831	; 0x727
    a874:	f3af 8000 	nop.w
    a878:	4831      	ldr	r0, [pc, #196]	; (a940 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    a87a:	2800      	cmp	r0, #0
    a87c:	bf18      	it	ne
    a87e:	f3af 8000 	nopne.w
    a882:	f3ef 8810 	mrs	r8, PRIMASK
    a886:	b672      	cpsid	i
    a888:	f1bb 0f00 	cmp.w	fp, #0
    a88c:	d004      	beq.n	a898 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    a88e:	2100      	movs	r1, #0
    a890:	f240 702d 	movw	r0, #1837	; 0x72d
    a894:	f3af 8000 	nop.w
    a898:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    a89c:	f88d 0020 	strb.w	r0, [sp, #32]
    a8a0:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a8a4:	2800      	cmp	r0, #0
    a8a6:	f47f ae97 	bne.w	a5d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a8aa:	f1bb 0f00 	cmp.w	fp, #0
    a8ae:	d004      	beq.n	a8ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    a8b0:	2100      	movs	r1, #0
    a8b2:	f240 7035 	movw	r0, #1845	; 0x735
    a8b6:	f3af 8000 	nop.w
    a8ba:	f10d 0e04 	add.w	lr, sp, #4
    a8be:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    a8c2:	f100 0e08 	add.w	lr, r0, #8
    a8c6:	e88e 100e 	stmia.w	lr, {r1, r2, r3, ip}
    a8ca:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    a8ce:	e9c0 1206 	strd	r1, r2, [r0, #24]
    a8d2:	b325      	cbz	r5, a91e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e2>
    a8d4:	f1bb 0f00 	cmp.w	fp, #0
    a8d8:	d004      	beq.n	a8e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    a8da:	2100      	movs	r1, #0
    a8dc:	f240 7042 	movw	r0, #1858	; 0x742
    a8e0:	f3af 8000 	nop.w
    a8e4:	f1ba 0f00 	cmp.w	sl, #0
    a8e8:	d146      	bne.n	a978 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a8ea:	e02b      	b.n	a944 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>
    a8ec:	e7ff      	b.n	a8ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    a8ee:	4632      	mov	r2, r6
    a8f0:	4641      	mov	r1, r8
    a8f2:	2004      	movs	r0, #4
    a8f4:	f7ff fadc 	bl	9eb0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a8f8:	2501      	movs	r5, #1
    a8fa:	e7b5      	b.n	a868 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    a8fc:	4632      	mov	r2, r6
    a8fe:	4641      	mov	r1, r8
    a900:	2004      	movs	r0, #4
    a902:	e7af      	b.n	a864 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a904:	2920      	cmp	r1, #32
    a906:	bf1d      	ittte	ne
    a908:	9808      	ldrne	r0, [sp, #32]
    a90a:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    a90e:	7840      	ldrbne	r0, [r0, #1]
    a910:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a914:	bf04      	itt	eq
    a916:	4438      	addeq	r0, r7
    a918:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    a91c:	e78a      	b.n	a834 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    a91e:	e03b      	b.n	a998 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    a920:	e000ed04 	.word	0xe000ed04
    a924:	200010d0 	.word	0x200010d0
    a928:	00000000 	.word	0x00000000
    a92c:	20000c50 	.word	0x20000c50
    a930:	00000000 	.word	0x00000000
    a934:	20001050 	.word	0x20001050
    a938:	1e847fff 	.word	0x1e847fff
    a93c:	0f424000 	.word	0x0f424000
    a940:	00000000 	.word	0x00000000
    a944:	9811      	ldr	r0, [sp, #68]	; 0x44
    a946:	f010 0fff 	tst.w	r0, #255	; 0xff
    a94a:	d015      	beq.n	a978 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a94c:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    a950:	2820      	cmp	r0, #32
    a952:	d111      	bne.n	a978 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a954:	f1bb 0f00 	cmp.w	fp, #0
    a958:	d004      	beq.n	a964 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    a95a:	2100      	movs	r1, #0
    a95c:	f240 7047 	movw	r0, #1863	; 0x747
    a960:	f3af 8000 	nop.w
    a964:	4631      	mov	r1, r6
    a966:	2002      	movs	r0, #2
    a968:	f7ff fad4 	bl	9f14 <MPSL_IRQ_RADIO_Handler+0xd70>
    a96c:	9010      	str	r0, [sp, #64]	; 0x40
    a96e:	b918      	cbnz	r0, a978 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a970:	7820      	ldrb	r0, [r4, #0]
    a972:	b300      	cbz	r0, a9b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
    a974:	2801      	cmp	r0, #1
    a976:	d02e      	beq.n	a9d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49a>
    a978:	f1bb 0f00 	cmp.w	fp, #0
    a97c:	d004      	beq.n	a988 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    a97e:	2100      	movs	r1, #0
    a980:	f240 7064 	movw	r0, #1892	; 0x764
    a984:	f3af 8000 	nop.w
    a988:	20ff      	movs	r0, #255	; 0xff
    a98a:	f1ba 0f00 	cmp.w	sl, #0
    a98e:	bf18      	it	ne
    a990:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    a994:	d029      	beq.n	a9ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ae>
    a996:	2501      	movs	r5, #1
    a998:	f1bb 0f00 	cmp.w	fp, #0
    a99c:	d004      	beq.n	a9a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
    a99e:	2100      	movs	r1, #0
    a9a0:	f240 7075 	movw	r0, #1909	; 0x775
    a9a4:	f3af 8000 	nop.w
    a9a8:	9810      	ldr	r0, [sp, #64]	; 0x40
    a9aa:	4c34      	ldr	r4, [pc, #208]	; (aa7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x540>)
    a9ac:	2802      	cmp	r0, #2
    a9ae:	d025      	beq.n	a9fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    a9b0:	2801      	cmp	r0, #1
    a9b2:	d02b      	beq.n	aa0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    a9b4:	e02f      	b.n	aa16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    a9b6:	f1bb 0f00 	cmp.w	fp, #0
    a9ba:	d004      	beq.n	a9c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48a>
    a9bc:	2100      	movs	r1, #0
    a9be:	f240 704f 	movw	r0, #1871	; 0x74f
    a9c2:	f3af 8000 	nop.w
    a9c6:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    a9ca:	2004      	movs	r0, #4
    a9cc:	9917      	ldr	r1, [sp, #92]	; 0x5c
    a9ce:	f7ff fa6f 	bl	9eb0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a9d2:	2501      	movs	r5, #1
    a9d4:	e7e0      	b.n	a998 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    a9d6:	f1bb 0f00 	cmp.w	fp, #0
    a9da:	f43f adfd 	beq.w	a5d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a9de:	2100      	movs	r1, #0
    a9e0:	f240 705a 	movw	r0, #1882	; 0x75a
    a9e4:	f3af 8000 	nop.w
    a9e8:	e5f6      	b.n	a5d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a9ea:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    a9ee:	2101      	movs	r1, #1
    a9f0:	4391      	bics	r1, r2
    a9f2:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    a9f6:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    a9fa:	e7cc      	b.n	a996 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45a>
    a9fc:	68b8      	ldr	r0, [r7, #8]
    a9fe:	ebb0 0009 	subs.w	r0, r0, r9
    aa02:	f006 f95a 	bl	10cba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aa06:	6861      	ldr	r1, [r4, #4]
    aa08:	b921      	cbnz	r1, aa14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d8>
    aa0a:	e004      	b.n	aa16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    aa0c:	6861      	ldr	r1, [r4, #4]
    aa0e:	f04f 30ff 	mov.w	r0, #4294967295
    aa12:	b101      	cbz	r1, aa16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    aa14:	4788      	blx	r1
    aa16:	f1b8 0f00 	cmp.w	r8, #0
    aa1a:	d028      	beq.n	aa6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x532>
    aa1c:	f1bb 0f00 	cmp.w	fp, #0
    aa20:	d004      	beq.n	aa2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4f0>
    aa22:	2100      	movs	r1, #0
    aa24:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    aa28:	f3af 8000 	nop.w
    aa2c:	b19d      	cbz	r5, aa56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    aa2e:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    aa32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    aa36:	4438      	add	r0, r7
    aa38:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    aa3c:	2820      	cmp	r0, #32
    aa3e:	d00a      	beq.n	aa56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    aa40:	f1bb 0f00 	cmp.w	fp, #0
    aa44:	d004      	beq.n	aa50 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x514>
    aa46:	2100      	movs	r1, #0
    aa48:	f240 708f 	movw	r0, #1935	; 0x78f
    aa4c:	f3af 8000 	nop.w
    aa50:	7860      	ldrb	r0, [r4, #1]
    aa52:	f002 f81f 	bl	ca94 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    aa56:	f1bb 0f00 	cmp.w	fp, #0
    aa5a:	d004      	beq.n	aa66 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52a>
    aa5c:	2100      	movs	r1, #0
    aa5e:	f240 7094 	movw	r0, #1940	; 0x794
    aa62:	f3af 8000 	nop.w
    aa66:	b019      	add	sp, #100	; 0x64
    aa68:	4628      	mov	r0, r5
    aa6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa6e:	4804      	ldr	r0, [pc, #16]	; (aa80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>)
    aa70:	2800      	cmp	r0, #0
    aa72:	bf18      	it	ne
    aa74:	f3af 8000 	nopne.w
    aa78:	b662      	cpsie	i
    aa7a:	e7cf      	b.n	aa1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e0>
    aa7c:	200002fc 	.word	0x200002fc
    aa80:	00000000 	.word	0x00000000

0000aa84 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    aa84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa88:	4604      	mov	r4, r0
    aa8a:	7800      	ldrb	r0, [r0, #0]
    aa8c:	b095      	sub	sp, #84	; 0x54
    aa8e:	b118      	cbz	r0, aa98 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    aa90:	b015      	add	sp, #84	; 0x54
    aa92:	2000      	movs	r0, #0
    aa94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa98:	48d1      	ldr	r0, [pc, #836]	; (ade0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>)
    aa9a:	6800      	ldr	r0, [r0, #0]
    aa9c:	05c0      	lsls	r0, r0, #23
    aa9e:	0dc0      	lsrs	r0, r0, #23
    aaa0:	d00e      	beq.n	aac0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    aaa2:	3810      	subs	r0, #16
    aaa4:	b240      	sxtb	r0, r0
    aaa6:	2800      	cmp	r0, #0
    aaa8:	bfb8      	it	lt
    aaaa:	f000 000f 	andlt.w	r0, r0, #15
    aaae:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    aab2:	bfac      	ite	ge
    aab4:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    aab8:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    aabc:	0940      	lsrs	r0, r0, #5
    aabe:	d0e7      	beq.n	aa90 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    aac0:	a80d      	add	r0, sp, #52	; 0x34
    aac2:	f8df 9320 	ldr.w	r9, [pc, #800]	; ade4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    aac6:	9009      	str	r0, [sp, #36]	; 0x24
    aac8:	f1b9 0f00 	cmp.w	r9, #0
    aacc:	d004      	beq.n	aad8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    aace:	2100      	movs	r1, #0
    aad0:	f240 50c5 	movw	r0, #1477	; 0x5c5
    aad4:	f3af 8000 	nop.w
    aad8:	f8df 830c 	ldr.w	r8, [pc, #780]	; ade8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>
    aadc:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    aae0:	2500      	movs	r5, #0
    aae2:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    aae6:	9503      	str	r5, [sp, #12]
    aae8:	f1b9 0f00 	cmp.w	r9, #0
    aaec:	d004      	beq.n	aaf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    aaee:	2100      	movs	r1, #0
    aaf0:	f240 50ca 	movw	r0, #1482	; 0x5ca
    aaf4:	f3af 8000 	nop.w
    aaf8:	2001      	movs	r0, #1
    aafa:	ea20 0a06 	bic.w	sl, r0, r6
    aafe:	48bb      	ldr	r0, [pc, #748]	; (adec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    ab00:	2240      	movs	r2, #64	; 0x40
    ab02:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    ab06:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    ab0a:	f006 fa78 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ab0e:	f1b9 0f00 	cmp.w	r9, #0
    ab12:	d004      	beq.n	ab1e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    ab14:	2100      	movs	r1, #0
    ab16:	f240 503c 	movw	r0, #1340	; 0x53c
    ab1a:	f3af 8000 	nop.w
    ab1e:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    ab22:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    ab26:	eb01 0208 	add.w	r2, r1, r8
    ab2a:	4440      	add	r0, r8
    ab2c:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    ab2e:	8501      	strh	r1, [r0, #40]	; 0x28
    ab30:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
    ab34:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    ab38:	f1b9 0f00 	cmp.w	r9, #0
    ab3c:	d004      	beq.n	ab48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    ab3e:	2100      	movs	r1, #0
    ab40:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    ab44:	f3af 8000 	nop.w
    ab48:	f1b9 0f00 	cmp.w	r9, #0
    ab4c:	d004      	beq.n	ab58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    ab4e:	2100      	movs	r1, #0
    ab50:	f240 50cf 	movw	r0, #1487	; 0x5cf
    ab54:	f3af 8000 	nop.w
    ab58:	f001 f91a 	bl	bd90 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    ab5c:	460f      	mov	r7, r1
    ab5e:	4606      	mov	r6, r0
    ab60:	8921      	ldrh	r1, [r4, #8]
    ab62:	4628      	mov	r0, r5
    ab64:	f361 401f 	bfi	r0, r1, #16, #16
    ab68:	4601      	mov	r1, r0
    ab6a:	7aa2      	ldrb	r2, [r4, #10]
    ab6c:	4628      	mov	r0, r5
    ab6e:	f362 0007 	bfi	r0, r2, #0, #8
    ab72:	7ae2      	ldrb	r2, [r4, #11]
    ab74:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    ab78:	f362 200f 	bfi	r0, r2, #8, #8
    ab7c:	7822      	ldrb	r2, [r4, #0]
    ab7e:	950a      	str	r5, [sp, #40]	; 0x28
    ab80:	f362 4017 	bfi	r0, r2, #16, #8
    ab84:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
    ab88:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
    ab8c:	950b      	str	r5, [sp, #44]	; 0x2c
    ab8e:	7820      	ldrb	r0, [r4, #0]
    ab90:	b388      	cbz	r0, abf6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    ab92:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    ab96:	4896      	ldr	r0, [pc, #600]	; (adf0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    ab98:	f10b 020c 	add.w	r2, fp, #12
    ab9c:	1a40      	subs	r0, r0, r1
    ab9e:	a911      	add	r1, sp, #68	; 0x44
    aba0:	f000 fe16 	bl	b7d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    aba4:	2200      	movs	r2, #0
    aba6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    abaa:	4630      	mov	r0, r6
    abac:	4639      	mov	r1, r7
    abae:	f7fe fceb 	bl	9588 <MPSL_IRQ_RADIO_Handler+0x3e4>
    abb2:	4684      	mov	ip, r0
    abb4:	7ae0      	ldrb	r0, [r4, #11]
    abb6:	460b      	mov	r3, r1
    abb8:	2800      	cmp	r0, #0
    abba:	bf0c      	ite	eq
    abbc:	207a      	moveq	r0, #122	; 0x7a
    abbe:	204a      	movne	r0, #74	; 0x4a
    abc0:	6861      	ldr	r1, [r4, #4]
    abc2:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    abc6:	4408      	add	r0, r1
    abc8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    abcc:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
    abd0:	4411      	add	r1, r2
    abd2:	4408      	add	r0, r1
    abd4:	1c80      	adds	r0, r0, #2
    abd6:	f000 fddf 	bl	b798 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    abda:	f8cd a000 	str.w	sl, [sp]
    abde:	900c      	str	r0, [sp, #48]	; 0x30
    abe0:	4632      	mov	r2, r6
    abe2:	463b      	mov	r3, r7
    abe4:	4659      	mov	r1, fp
    abe6:	6920      	ldr	r0, [r4, #16]
    abe8:	f7fe fb36 	bl	9258 <MPSL_IRQ_RADIO_Handler+0xb4>
    abec:	2800      	cmp	r0, #0
    abee:	bf08      	it	eq
    abf0:	e9cd 670a 	strdeq	r6, r7, [sp, #40]	; 0x28
    abf4:	e045      	b.n	ac82 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fe>
    abf6:	e7ff      	b.n	abf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    abf8:	4630      	mov	r0, r6
    abfa:	4639      	mov	r1, r7
    abfc:	f000 fd6a 	bl	b6d4 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    ac00:	4b7c      	ldr	r3, [pc, #496]	; (adf4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    ac02:	4602      	mov	r2, r0
    ac04:	eb10 0c03 	adds.w	ip, r0, r3
    ac08:	468b      	mov	fp, r1
    ac0a:	f141 0300 	adc.w	r3, r1, #0
    ac0e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    ac12:	ebb0 0c0c 	subs.w	ip, r0, ip
    ac16:	eb71 0303 	sbcs.w	r3, r1, r3
    ac1a:	d22a      	bcs.n	ac72 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    ac1c:	3229      	adds	r2, #41	; 0x29
    ac1e:	f14b 0300 	adc.w	r3, fp, #0
    ac22:	1a82      	subs	r2, r0, r2
    ac24:	eb71 0203 	sbcs.w	r2, r1, r3
    ac28:	d323      	bcc.n	ac72 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    ac2a:	8922      	ldrh	r2, [r4, #8]
    ac2c:	ab12      	add	r3, sp, #72	; 0x48
    ac2e:	1a80      	subs	r0, r0, r2
    ac30:	eb61 0105 	sbc.w	r1, r1, r5
    ac34:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ac36:	1e40      	subs	r0, r0, #1
    ac38:	9200      	str	r2, [sp, #0]
    ac3a:	f141 31ff 	adc.w	r1, r1, #4294967295
    ac3e:	aa07      	add	r2, sp, #28
    ac40:	f000 fd6c 	bl	b71c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    ac44:	7ae0      	ldrb	r0, [r4, #11]
    ac46:	2800      	cmp	r0, #0
    ac48:	bf0c      	ite	eq
    ac4a:	207a      	moveq	r0, #122	; 0x7a
    ac4c:	204a      	movne	r0, #74	; 0x4a
    ac4e:	9907      	ldr	r1, [sp, #28]
    ac50:	8922      	ldrh	r2, [r4, #8]
    ac52:	4408      	add	r0, r1
    ac54:	6861      	ldr	r1, [r4, #4]
    ac56:	4411      	add	r1, r2
    ac58:	4408      	add	r0, r1
    ac5a:	1c80      	adds	r0, r0, #2
    ac5c:	f000 fd9c 	bl	b798 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    ac60:	4601      	mov	r1, r0
    ac62:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
    ac66:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    ac6a:	1a08      	subs	r0, r1, r0
    ac6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ac70:	e006      	b.n	ac80 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    ac72:	1e70      	subs	r0, r6, #1
    ac74:	f147 31ff 	adc.w	r1, r7, #4294967295
    ac78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    ac7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ac80:	900c      	str	r0, [sp, #48]	; 0x30
    ac82:	f1b9 0f00 	cmp.w	r9, #0
    ac86:	d004      	beq.n	ac92 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20e>
    ac88:	2100      	movs	r1, #0
    ac8a:	f240 50d5 	movw	r0, #1493	; 0x5d5
    ac8e:	f3af 8000 	nop.w
    ac92:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    ac96:	f8d8 1008 	ldr.w	r1, [r8, #8]
    ac9a:	1808      	adds	r0, r1, r0
    ac9c:	eb42 0105 	adc.w	r1, r2, r5
    aca0:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    aca4:	2a20      	cmp	r2, #32
    aca6:	d009      	beq.n	acbc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    aca8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    acac:	1a12      	subs	r2, r2, r0
    acae:	eb73 0201 	sbcs.w	r2, r3, r1
    acb2:	d203      	bcs.n	acbc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    acb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    acb8:	2001      	movs	r0, #1
    acba:	9003      	str	r0, [sp, #12]
    acbc:	f1b9 0f00 	cmp.w	r9, #0
    acc0:	d004      	beq.n	accc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    acc2:	2100      	movs	r1, #0
    acc4:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    acc8:	f3af 8000 	nop.w
    accc:	990a      	ldr	r1, [sp, #40]	; 0x28
    acce:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    acd2:	1a0a      	subs	r2, r1, r0
    acd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    acd6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    acda:	18c9      	adds	r1, r1, r3
    acdc:	1a08      	subs	r0, r1, r0
    acde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ace2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    ace6:	bf98      	it	ls
    ace8:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    acec:	d80b      	bhi.n	ad06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    acee:	4632      	mov	r2, r6
    acf0:	463b      	mov	r3, r7
    acf2:	a90a      	add	r1, sp, #40	; 0x28
    acf4:	483f      	ldr	r0, [pc, #252]	; (adf4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    acf6:	f8cd a000 	str.w	sl, [sp]
    acfa:	f7fe faad 	bl	9258 <MPSL_IRQ_RADIO_Handler+0xb4>
    acfe:	9903      	ldr	r1, [sp, #12]
    ad00:	4308      	orrs	r0, r1
    ad02:	d145      	bne.n	ad90 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    ad04:	e05f      	b.n	adc6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    ad06:	f8bd b036 	ldrh.w	fp, [sp, #54]	; 0x36
    ad0a:	aa05      	add	r2, sp, #20
    ad0c:	a903      	add	r1, sp, #12
    ad0e:	4658      	mov	r0, fp
    ad10:	f000 fd5e 	bl	b7d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    ad14:	f001 fa74 	bl	c200 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    ad18:	f000 fd3e 	bl	b798 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    ad1c:	4682      	mov	sl, r0
    ad1e:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    ad22:	2820      	cmp	r0, #32
    ad24:	d00a      	beq.n	ad3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>
    ad26:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    ad2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    ad2e:	1d80      	adds	r0, r0, #6
    ad30:	f145 0100 	adc.w	r1, r5, #0
    ad34:	181e      	adds	r6, r3, r0
    ad36:	eb42 0701 	adc.w	r7, r2, r1
    ad3a:	e024      	b.n	ad86 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    ad3c:	360a      	adds	r6, #10
    ad3e:	f147 0700 	adc.w	r7, r7, #0
    ad42:	f1bb 0f00 	cmp.w	fp, #0
    ad46:	d017      	beq.n	ad78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    ad48:	f001 fd5a 	bl	c800 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    ad4c:	b9a0      	cbnz	r0, ad78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    ad4e:	f001 fc2f 	bl	c5b0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    ad52:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    ad56:	bf08      	it	eq
    ad58:	200d      	moveq	r0, #13
    ad5a:	d00b      	beq.n	ad74 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    ad5c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    ad60:	3856      	subs	r0, #86	; 0x56
    ad62:	bf08      	it	eq
    ad64:	201c      	moveq	r0, #28
    ad66:	d005      	beq.n	ad74 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    ad68:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    ad6c:	389f      	subs	r0, #159	; 0x9f
    ad6e:	bf14      	ite	ne
    ad70:	4628      	movne	r0, r5
    ad72:	2032      	moveq	r0, #50	; 0x32
    ad74:	1986      	adds	r6, r0, r6
    ad76:	416f      	adcs	r7, r5
    ad78:	9803      	ldr	r0, [sp, #12]
    ad7a:	4582      	cmp	sl, r0
    ad7c:	d903      	bls.n	ad86 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    ad7e:	ebaa 0000 	sub.w	r0, sl, r0
    ad82:	1986      	adds	r6, r0, r6
    ad84:	416f      	adcs	r7, r5
    ad86:	201f      	movs	r0, #31
    ad88:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    ad8c:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    ad90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    ad94:	f000 fc9e 	bl	b6d4 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    ad98:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    ad9c:	1880      	adds	r0, r0, r2
    ad9e:	eb41 0205 	adc.w	r2, r1, r5
    ada2:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    ada6:	1840      	adds	r0, r0, r1
    ada8:	eb42 0105 	adc.w	r1, r2, r5
    adac:	1c40      	adds	r0, r0, #1
    adae:	f141 0100 	adc.w	r1, r1, #0
    adb2:	f1b9 0f00 	cmp.w	r9, #0
    adb6:	e9c4 0104 	strd	r0, r1, [r4, #16]
    adba:	d004      	beq.n	adc6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    adbc:	2100      	movs	r1, #0
    adbe:	f240 50fa 	movw	r0, #1530	; 0x5fa
    adc2:	f3af 8000 	nop.w
    adc6:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    adca:	f88d 0000 	strb.w	r0, [sp]
    adce:	f89d 0000 	ldrb.w	r0, [sp]
    add2:	2800      	cmp	r0, #0
    add4:	f47f ae78 	bne.w	aac8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    add8:	b015      	add	sp, #84	; 0x54
    adda:	2001      	movs	r0, #1
    addc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ade0:	e000ed04 	.word	0xe000ed04
    ade4:	00000000 	.word	0x00000000
    ade8:	200010d0 	.word	0x200010d0
    adec:	20001050 	.word	0x20001050
    adf0:	1e847fff 	.word	0x1e847fff
    adf4:	0f424000 	.word	0x0f424000

0000adf8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    adf8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    adfc:	4d9d      	ldr	r5, [pc, #628]	; (b074 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    adfe:	b08c      	sub	sp, #48	; 0x30
    ae00:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    ae04:	2000      	movs	r0, #0
    ae06:	9007      	str	r0, [sp, #28]
    ae08:	9008      	str	r0, [sp, #32]
    ae0a:	2001      	movs	r0, #1
    ae0c:	4c9a      	ldr	r4, [pc, #616]	; (b078 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    ae0e:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    ae12:	f04f 0800 	mov.w	r8, #0
    ae16:	4607      	mov	r7, r0
    ae18:	9006      	str	r0, [sp, #24]
    ae1a:	b124      	cbz	r4, ae26 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    ae1c:	2100      	movs	r1, #0
    ae1e:	f240 70a5 	movw	r0, #1957	; 0x7a5
    ae22:	f3af 8000 	nop.w
    ae26:	9806      	ldr	r0, [sp, #24]
    ae28:	2800      	cmp	r0, #0
    ae2a:	d03c      	beq.n	aea6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    ae2c:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    ae30:	b124      	cbz	r4, ae3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    ae32:	2100      	movs	r1, #0
    ae34:	f240 70aa 	movw	r0, #1962	; 0x7aa
    ae38:	f3af 8000 	nop.w
    ae3c:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    ae40:	2240      	movs	r2, #64	; 0x40
    ae42:	ea27 060a 	bic.w	r6, r7, sl
    ae46:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    ae4a:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    ae4e:	4683      	mov	fp, r0
    ae50:	f006 f8d5 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ae54:	b124      	cbz	r4, ae60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    ae56:	2100      	movs	r1, #0
    ae58:	f240 503c 	movw	r0, #1340	; 0x53c
    ae5c:	f3af 8000 	nop.w
    ae60:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    ae64:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    ae68:	4428      	add	r0, r5
    ae6a:	4429      	add	r1, r5
    ae6c:	9000      	str	r0, [sp, #0]
    ae6e:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    ae70:	8502      	strh	r2, [r0, #40]	; 0x28
    ae72:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    ae76:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    ae7a:	b124      	cbz	r4, ae86 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    ae7c:	2100      	movs	r1, #0
    ae7e:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    ae82:	f3af 8000 	nop.w
    ae86:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    ae8a:	f88d 0008 	strb.w	r0, [sp, #8]
    ae8e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ae92:	b178      	cbz	r0, aeb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    ae94:	2c00      	cmp	r4, #0
    ae96:	bf1c      	itt	ne
    ae98:	2100      	movne	r1, #0
    ae9a:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    ae9e:	d0bc      	beq.n	ae1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    aea0:	f3af 8000 	nop.w
    aea4:	e7b9      	b.n	ae1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    aea6:	4875      	ldr	r0, [pc, #468]	; (b07c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    aea8:	2800      	cmp	r0, #0
    aeaa:	bf18      	it	ne
    aeac:	f3af 8000 	nopne.w
    aeb0:	b662      	cpsie	i
    aeb2:	e7bb      	b.n	ae2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    aeb4:	b124      	cbz	r4, aec0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    aeb6:	2100      	movs	r1, #0
    aeb8:	f240 70b4 	movw	r0, #1972	; 0x7b4
    aebc:	f3af 8000 	nop.w
    aec0:	980c      	ldr	r0, [sp, #48]	; 0x30
    aec2:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    aec6:	2803      	cmp	r0, #3
    aec8:	d17e      	bne.n	afc8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    aeca:	9a00      	ldr	r2, [sp, #0]
    aecc:	990c      	ldr	r1, [sp, #48]	; 0x30
    aece:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    aed2:	4288      	cmp	r0, r1
    aed4:	bf14      	ite	ne
    aed6:	f04f 0a00 	movne.w	sl, #0
    aeda:	f04f 0a01 	moveq.w	sl, #1
    aede:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    aee2:	4683      	mov	fp, r0
    aee4:	2220      	movs	r2, #32
    aee6:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    aeea:	e003      	b.n	aef4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    aeec:	4602      	mov	r2, r0
    aeee:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    aef2:	7840      	ldrb	r0, [r0, #1]
    aef4:	4288      	cmp	r0, r1
    aef6:	d002      	beq.n	aefe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    aef8:	2820      	cmp	r0, #32
    aefa:	d00a      	beq.n	af12 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    aefc:	e7f6      	b.n	aeec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    aefe:	2820      	cmp	r0, #32
    af00:	d007      	beq.n	af12 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    af02:	4583      	cmp	fp, r0
    af04:	d107      	bne.n	af16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    af06:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    af0a:	7840      	ldrb	r0, [r0, #1]
    af0c:	f88c 0000 	strb.w	r0, [ip]
    af10:	e007      	b.n	af22 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    af12:	4640      	mov	r0, r8
    af14:	e00c      	b.n	af30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    af16:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    af1a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    af1e:	7840      	ldrb	r0, [r0, #1]
    af20:	7048      	strb	r0, [r1, #1]
    af22:	b124      	cbz	r4, af2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    af24:	2100      	movs	r1, #0
    af26:	f240 40a4 	movw	r0, #1188	; 0x4a4
    af2a:	f3af 8000 	nop.w
    af2e:	4638      	mov	r0, r7
    af30:	46c3      	mov	fp, r8
    af32:	ea10 0f0a 	tst.w	r0, sl
    af36:	bf18      	it	ne
    af38:	46bb      	movne	fp, r7
    af3a:	2800      	cmp	r0, #0
    af3c:	d04e      	beq.n	afdc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    af3e:	b124      	cbz	r4, af4a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    af40:	2100      	movs	r1, #0
    af42:	f240 70b9 	movw	r0, #1977	; 0x7b9
    af46:	f3af 8000 	nop.w
    af4a:	4632      	mov	r2, r6
    af4c:	2001      	movs	r0, #1
    af4e:	990c      	ldr	r1, [sp, #48]	; 0x30
    af50:	f7fe ffae 	bl	9eb0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    af54:	b124      	cbz	r4, af60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    af56:	2100      	movs	r1, #0
    af58:	f240 70c2 	movw	r0, #1986	; 0x7c2
    af5c:	f3af 8000 	nop.w
    af60:	4847      	ldr	r0, [pc, #284]	; (b080 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    af62:	2800      	cmp	r0, #0
    af64:	bf18      	it	ne
    af66:	f3af 8000 	nopne.w
    af6a:	f3ef 8010 	mrs	r0, PRIMASK
    af6e:	b672      	cpsid	i
    af70:	9006      	str	r0, [sp, #24]
    af72:	b124      	cbz	r4, af7e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    af74:	2100      	movs	r1, #0
    af76:	f240 70c7 	movw	r0, #1991	; 0x7c7
    af7a:	f3af 8000 	nop.w
    af7e:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    af82:	f88d 0008 	strb.w	r0, [sp, #8]
    af86:	f89d 0008 	ldrb.w	r0, [sp, #8]
    af8a:	b138      	cbz	r0, af9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    af8c:	2c00      	cmp	r4, #0
    af8e:	bf1c      	itt	ne
    af90:	2100      	movne	r1, #0
    af92:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    af96:	f43f af40 	beq.w	ae1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    af9a:	e781      	b.n	aea0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    af9c:	f1bb 0f00 	cmp.w	fp, #0
    afa0:	d009      	beq.n	afb6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    afa2:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    afa6:	2820      	cmp	r0, #32
    afa8:	d105      	bne.n	afb6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    afaa:	4631      	mov	r1, r6
    afac:	2002      	movs	r0, #2
    afae:	f7fe ffb1 	bl	9f14 <MPSL_IRQ_RADIO_Handler+0xd70>
    afb2:	9008      	str	r0, [sp, #32]
    afb4:	b1f8      	cbz	r0, aff6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    afb6:	b124      	cbz	r4, afc2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    afb8:	2100      	movs	r1, #0
    afba:	f240 70df 	movw	r0, #2015	; 0x7df
    afbe:	f3af 8000 	nop.w
    afc2:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    afc6:	e000      	b.n	afca <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    afc8:	e008      	b.n	afdc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    afca:	ea27 0000 	bic.w	r0, r7, r0
    afce:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    afd2:	20ff      	movs	r0, #255	; 0xff
    afd4:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    afd8:	2001      	movs	r0, #1
    afda:	9007      	str	r0, [sp, #28]
    afdc:	b124      	cbz	r4, afe8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    afde:	2100      	movs	r1, #0
    afe0:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    afe4:	f3af 8000 	nop.w
    afe8:	9808      	ldr	r0, [sp, #32]
    afea:	4e26      	ldr	r6, [pc, #152]	; (b084 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    afec:	2802      	cmp	r0, #2
    afee:	d009      	beq.n	b004 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    aff0:	2801      	cmp	r0, #1
    aff2:	d027      	beq.n	b044 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    aff4:	e02b      	b.n	b04e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    aff6:	b354      	cbz	r4, b04e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    aff8:	2100      	movs	r1, #0
    affa:	f240 70da 	movw	r0, #2010	; 0x7da
    affe:	f3af 8000 	nop.w
    b002:	e7ec      	b.n	afde <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    b004:	f000 fec4 	bl	bd90 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    b008:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    b00c:	ebb3 0c00 	subs.w	ip, r3, r0
    b010:	eb72 0c01 	sbcs.w	ip, r2, r1
    b014:	d204      	bcs.n	b020 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    b016:	f240 71ee 	movw	r1, #2030	; 0x7ee
    b01a:	2070      	movs	r0, #112	; 0x70
    b01c:	f001 fc68 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b020:	1a18      	subs	r0, r3, r0
    b022:	eb62 0101 	sbc.w	r1, r2, r1
    b026:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    b02a:	f171 0100 	sbcs.w	r1, r1, #0
    b02e:	d304      	bcc.n	b03a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    b030:	f240 71ef 	movw	r1, #2031	; 0x7ef
    b034:	2070      	movs	r0, #112	; 0x70
    b036:	f001 fc5b 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b03a:	f005 fe3e 	bl	10cba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b03e:	6871      	ldr	r1, [r6, #4]
    b040:	b129      	cbz	r1, b04e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    b042:	e003      	b.n	b04c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    b044:	6871      	ldr	r1, [r6, #4]
    b046:	f04f 30ff 	mov.w	r0, #4294967295
    b04a:	b101      	cbz	r1, b04e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    b04c:	4788      	blx	r1
    b04e:	9806      	ldr	r0, [sp, #24]
    b050:	b148      	cbz	r0, b066 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    b052:	b124      	cbz	r4, b05e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    b054:	2100      	movs	r1, #0
    b056:	f240 70ff 	movw	r0, #2047	; 0x7ff
    b05a:	f3af 8000 	nop.w
    b05e:	9807      	ldr	r0, [sp, #28]
    b060:	b00d      	add	sp, #52	; 0x34
    b062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b066:	4805      	ldr	r0, [pc, #20]	; (b07c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    b068:	2800      	cmp	r0, #0
    b06a:	bf18      	it	ne
    b06c:	f3af 8000 	nopne.w
    b070:	b662      	cpsie	i
    b072:	e7ee      	b.n	b052 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    b074:	200010d0 	.word	0x200010d0
	...
    b084:	200002fc 	.word	0x200002fc

0000b088 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    b088:	b510      	push	{r4, lr}
    b08a:	2820      	cmp	r0, #32
    b08c:	d211      	bcs.n	b0b2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    b08e:	490e      	ldr	r1, [pc, #56]	; (b0c8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    b090:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    b094:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    b098:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    b09c:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    b0a0:	b13b      	cbz	r3, b0b2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    b0a2:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    b0a6:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    b0aa:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    b0ae:	2a01      	cmp	r2, #1
    b0b0:	d001      	beq.n	b0b6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    b0b2:	2000      	movs	r0, #0
    b0b4:	bd10      	pop	{r4, pc}
    b0b6:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    b0ba:	4601      	mov	r1, r0
    b0bc:	2000      	movs	r0, #0
    b0be:	f7fe fef7 	bl	9eb0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    b0c2:	2001      	movs	r0, #1
    b0c4:	bd10      	pop	{r4, pc}
    b0c6:	0000      	.short	0x0000
    b0c8:	200010d0 	.word	0x200010d0

0000b0cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    b0cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b0d0:	4e86      	ldr	r6, [pc, #536]	; (b2ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    b0d2:	4680      	mov	r8, r0
    b0d4:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    b0d8:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    b0dc:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    b0e0:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    b0e4:	2800      	cmp	r0, #0
    b0e6:	d071      	beq.n	b1cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    b0e8:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    b0ec:	4d80      	ldr	r5, [pc, #512]	; (b2f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    b0ee:	b125      	cbz	r5, b0fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    b0f0:	2100      	movs	r1, #0
    b0f2:	f640 307e 	movw	r0, #2942	; 0xb7e
    b0f6:	f3af 8000 	nop.w
    b0fa:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    b0fe:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    b102:	2801      	cmp	r0, #1
    b104:	d018      	beq.n	b138 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    b106:	b2c0      	uxtb	r0, r0
    b108:	2804      	cmp	r0, #4
    b10a:	bf1c      	itt	ne
    b10c:	2805      	cmpne	r0, #5
    b10e:	2806      	cmpne	r0, #6
    b110:	d061      	beq.n	b1d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    b112:	b12d      	cbz	r5, b120 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    b114:	f04f 0100 	mov.w	r1, #0
    b118:	f640 308a 	movw	r0, #2954	; 0xb8a
    b11c:	f3af 8000 	nop.w
    b120:	f005 ff01 	bl	10f26 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b124:	b125      	cbz	r5, b130 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    b126:	2100      	movs	r1, #0
    b128:	f640 308e 	movw	r0, #2958	; 0xb8e
    b12c:	f3af 8000 	nop.w
    b130:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    b134:	2801      	cmp	r0, #1
    b136:	d1e6      	bne.n	b106 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    b138:	2401      	movs	r4, #1
    b13a:	b125      	cbz	r5, b146 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    b13c:	2100      	movs	r1, #0
    b13e:	f640 3095 	movw	r0, #2965	; 0xb95
    b142:	f3af 8000 	nop.w
    b146:	2c00      	cmp	r4, #0
    b148:	d04b      	beq.n	b1e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    b14a:	2000      	movs	r0, #0
    b14c:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    b150:	b125      	cbz	r5, b15c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    b152:	2100      	movs	r1, #0
    b154:	f640 309a 	movw	r0, #2970	; 0xb9a
    b158:	f3af 8000 	nop.w
    b15c:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    b160:	2001      	movs	r0, #1
    b162:	ea20 090b 	bic.w	r9, r0, fp
    b166:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    b16a:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    b16e:	2240      	movs	r2, #64	; 0x40
    b170:	f005 ff45 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    b174:	b125      	cbz	r5, b180 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    b176:	2100      	movs	r1, #0
    b178:	f240 503c 	movw	r0, #1340	; 0x53c
    b17c:	f3af 8000 	nop.w
    b180:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    b184:	eb00 0a06 	add.w	sl, r0, r6
    b188:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    b18c:	4430      	add	r0, r6
    b18e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    b190:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    b194:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    b198:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    b19c:	b125      	cbz	r5, b1a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    b19e:	2100      	movs	r1, #0
    b1a0:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    b1a4:	f3af 8000 	nop.w
    b1a8:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    b1ac:	f88d 0000 	strb.w	r0, [sp]
    b1b0:	f89d 0000 	ldrb.w	r0, [sp]
    b1b4:	b1e0      	cbz	r0, b1f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    b1b6:	2d00      	cmp	r5, #0
    b1b8:	bf1c      	itt	ne
    b1ba:	2100      	movne	r1, #0
    b1bc:	f44f 603a 	movne.w	r0, #2976	; 0xba0
    b1c0:	d0bb      	beq.n	b13a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    b1c2:	bf00      	nop
    b1c4:	f3af 8000 	nop.w
    b1c8:	e7b7      	b.n	b13a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    b1ca:	e7ff      	b.n	b1cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    b1cc:	f640 3175 	movw	r1, #2933	; 0xb75
    b1d0:	2070      	movs	r0, #112	; 0x70
    b1d2:	f001 fb8d 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b1d6:	464a      	mov	r2, r9
    b1d8:	4641      	mov	r1, r8
    b1da:	2001      	movs	r0, #1
    b1dc:	f7fe fe68 	bl	9eb0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    b1e0:	e7a0      	b.n	b124 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    b1e2:	4844      	ldr	r0, [pc, #272]	; (b2f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    b1e4:	2800      	cmp	r0, #0
    b1e6:	bf18      	it	ne
    b1e8:	f3af 8000 	nopne.w
    b1ec:	b662      	cpsie	i
    b1ee:	e7ac      	b.n	b14a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    b1f0:	b125      	cbz	r5, b1fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    b1f2:	2100      	movs	r1, #0
    b1f4:	f640 30a4 	movw	r0, #2980	; 0xba4
    b1f8:	f3af 8000 	nop.w
    b1fc:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    b200:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    b204:	4640      	mov	r0, r8
    b206:	461c      	mov	r4, r3
    b208:	f04f 0b20 	mov.w	fp, #32
    b20c:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    b210:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    b214:	e004      	b.n	b220 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    b216:	46a3      	mov	fp, r4
    b218:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    b21c:	f89c 4001 	ldrb.w	r4, [ip, #1]
    b220:	4284      	cmp	r4, r0
    b222:	d002      	beq.n	b22a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    b224:	2c20      	cmp	r4, #32
    b226:	d02b      	beq.n	b280 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    b228:	e7f5      	b.n	b216 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    b22a:	2c20      	cmp	r4, #32
    b22c:	d028      	beq.n	b280 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    b22e:	42a3      	cmp	r3, r4
    b230:	d104      	bne.n	b23c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    b232:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    b236:	7840      	ldrb	r0, [r0, #1]
    b238:	7008      	strb	r0, [r1, #0]
    b23a:	e005      	b.n	b248 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    b23c:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    b240:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    b244:	7840      	ldrb	r0, [r0, #1]
    b246:	7048      	strb	r0, [r1, #1]
    b248:	f1ba 0f00 	cmp.w	sl, #0
    b24c:	d011      	beq.n	b272 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    b24e:	b125      	cbz	r5, b25a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    b250:	2100      	movs	r1, #0
    b252:	f240 409c 	movw	r0, #1180	; 0x49c
    b256:	f3af 8000 	nop.w
    b25a:	f89a 0000 	ldrb.w	r0, [sl]
    b25e:	42a0      	cmp	r0, r4
    b260:	d107      	bne.n	b272 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    b262:	b125      	cbz	r5, b26e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    b264:	2100      	movs	r1, #0
    b266:	f240 409f 	movw	r0, #1183	; 0x49f
    b26a:	f3af 8000 	nop.w
    b26e:	f88a b000 	strb.w	fp, [sl]
    b272:	b15d      	cbz	r5, b28c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    b274:	2100      	movs	r1, #0
    b276:	f240 40a4 	movw	r0, #1188	; 0x4a4
    b27a:	f3af 8000 	nop.w
    b27e:	e000      	b.n	b282 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    b280:	b125      	cbz	r5, b28c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    b282:	2100      	movs	r1, #0
    b284:	f640 30a8 	movw	r0, #2984	; 0xba8
    b288:	f3af 8000 	nop.w
    b28c:	481a      	ldr	r0, [pc, #104]	; (b2f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    b28e:	2800      	cmp	r0, #0
    b290:	bf18      	it	ne
    b292:	f3af 8000 	nopne.w
    b296:	f3ef 8410 	mrs	r4, PRIMASK
    b29a:	b672      	cpsid	i
    b29c:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    b2a0:	f88d 0000 	strb.w	r0, [sp]
    b2a4:	f89d 0000 	ldrb.w	r0, [sp]
    b2a8:	b138      	cbz	r0, b2ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    b2aa:	2d00      	cmp	r5, #0
    b2ac:	bf1c      	itt	ne
    b2ae:	2100      	movne	r1, #0
    b2b0:	f640 30ae 	movwne	r0, #2990	; 0xbae
    b2b4:	f43f af41 	beq.w	b13a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    b2b8:	e784      	b.n	b1c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    b2ba:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    b2be:	20ff      	movs	r0, #255	; 0xff
    b2c0:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    b2c4:	b154      	cbz	r4, b2dc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    b2c6:	2d00      	cmp	r5, #0
    b2c8:	bf08      	it	eq
    b2ca:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b2ce:	2100      	movs	r1, #0
    b2d0:	f640 30bb 	movw	r0, #3003	; 0xbbb
    b2d4:	f3af 8000 	nop.w
    b2d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b2dc:	4805      	ldr	r0, [pc, #20]	; (b2f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    b2de:	2800      	cmp	r0, #0
    b2e0:	bf18      	it	ne
    b2e2:	f3af 8000 	nopne.w
    b2e6:	b662      	cpsie	i
    b2e8:	e7ed      	b.n	b2c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    b2ea:	0000      	.short	0x0000
    b2ec:	200010d0 	.word	0x200010d0
	...

0000b2fc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    b2fc:	b570      	push	{r4, r5, r6, lr}
    b2fe:	460d      	mov	r5, r1
    b300:	4606      	mov	r6, r0
    b302:	f001 fa6b 	bl	c7dc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    b306:	480d      	ldr	r0, [pc, #52]	; (b33c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    b308:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    b30c:	2400      	movs	r4, #0
    b30e:	3880      	subs	r0, #128	; 0x80
    b310:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    b314:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    b318:	b129      	cbz	r1, b326 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    b31a:	1c61      	adds	r1, r4, #1
    b31c:	b2cc      	uxtb	r4, r1
    b31e:	2c20      	cmp	r4, #32
    b320:	d3f8      	bcc.n	b314 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    b322:	2020      	movs	r0, #32
    b324:	bd70      	pop	{r4, r5, r6, pc}
    b326:	4806      	ldr	r0, [pc, #24]	; (b340 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    b328:	4621      	mov	r1, r4
    b32a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    b32e:	e9c0 6500 	strd	r6, r5, [r0]
    b332:	2001      	movs	r0, #1
    b334:	f7fe fdbc 	bl	9eb0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    b338:	4620      	mov	r0, r4
    b33a:	bd70      	pop	{r4, r5, r6, pc}
    b33c:	200010d0 	.word	0x200010d0
    b340:	20000c50 	.word	0x20000c50

0000b344 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    b344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b348:	f000 fd22 	bl	bd90 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    b34c:	4606      	mov	r6, r0
    b34e:	460f      	mov	r7, r1
    b350:	f000 fe62 	bl	c018 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    b354:	4c65      	ldr	r4, [pc, #404]	; (b4ec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    b356:	6860      	ldr	r0, [r4, #4]
    b358:	f1b0 3fff 	cmp.w	r0, #4294967295
    b35c:	bf1c      	itt	ne
    b35e:	f04f 30ff 	movne.w	r0, #4294967295
    b362:	6060      	strne	r0, [r4, #4]
    b364:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    b368:	f8df b184 	ldr.w	fp, [pc, #388]	; b4f0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
    b36c:	2500      	movs	r5, #0
    b36e:	bb10      	cbnz	r0, b3b6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    b370:	f44f 710c 	mov.w	r1, #560	; 0x230
    b374:	6920      	ldr	r0, [r4, #16]
    b376:	f001 fa1d 	bl	c7b4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    b37a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    b37e:	68a1      	ldr	r1, [r4, #8]
    b380:	1818      	adds	r0, r3, r0
    b382:	eb45 0305 	adc.w	r3, r5, r5
    b386:	1809      	adds	r1, r1, r0
    b388:	eb42 0003 	adc.w	r0, r2, r3
    b38c:	1a71      	subs	r1, r6, r1
    b38e:	eb77 0000 	sbcs.w	r0, r7, r0
    b392:	d310      	bcc.n	b3b6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    b394:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b398:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    b39c:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    b3a0:	6840      	ldr	r0, [r0, #4]
    b3a2:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    b3a6:	680a      	ldr	r2, [r1, #0]
    b3a8:	2108      	movs	r1, #8
    b3aa:	4790      	blx	r2
    b3ac:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    b3b0:	2070      	movs	r0, #112	; 0x70
    b3b2:	f001 fa9d 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b3b6:	7e60      	ldrb	r0, [r4, #25]
    b3b8:	b180      	cbz	r0, b3dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    b3ba:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    b3be:	f88d 0000 	strb.w	r0, [sp]
    b3c2:	f89d 0000 	ldrb.w	r0, [sp]
    b3c6:	b148      	cbz	r0, b3dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    b3c8:	f000 fc58 	bl	bc7c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    b3cc:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    b3d0:	b150      	cbz	r0, b3e8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    b3d2:	f240 31cd 	movw	r1, #973	; 0x3cd
    b3d6:	2070      	movs	r0, #112	; 0x70
    b3d8:	f001 fa8a 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b3dc:	1cf0      	adds	r0, r6, #3
    b3de:	f147 0100 	adc.w	r1, r7, #0
    b3e2:	f000 fb25 	bl	ba30 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b3e6:	e7f1      	b.n	b3cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    b3e8:	2001      	movs	r0, #1
    b3ea:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    b3ee:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b3f2:	2820      	cmp	r0, #32
    b3f4:	d020      	beq.n	b438 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
    b3f6:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    b3fa:	2020      	movs	r0, #32
    b3fc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    b400:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    b404:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    b408:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    b40c:	6025      	str	r5, [r4, #0]
    b40e:	f000 fefd 	bl	c20c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    b412:	f884 0020 	strb.w	r0, [r4, #32]
    b416:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    b41a:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    b41e:	eb00 0a04 	add.w	sl, r0, r4
    b422:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    b426:	2820      	cmp	r0, #32
    b428:	d01c      	beq.n	b464 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    b42a:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    b42e:	f89b 001a 	ldrb.w	r0, [fp, #26]
    b432:	2801      	cmp	r0, #1
    b434:	d005      	beq.n	b442 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
    b436:	e015      	b.n	b464 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    b438:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    b43c:	2070      	movs	r0, #112	; 0x70
    b43e:	f001 fa57 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b442:	2201      	movs	r2, #1
    b444:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    b448:	4630      	mov	r0, r6
    b44a:	4639      	mov	r1, r7
    b44c:	f7fe f89c 	bl	9588 <MPSL_IRQ_RADIO_Handler+0x3e4>
    b450:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    b454:	1a12      	subs	r2, r2, r0
    b456:	eb73 0201 	sbcs.w	r2, r3, r1
    b45a:	bf24      	itt	cs
    b45c:	f10b 0208 	addcs.w	r2, fp, #8
    b460:	e9c2 0100 	strdcs	r0, r1, [r2]
    b464:	4641      	mov	r1, r8
    b466:	2001      	movs	r0, #1
    b468:	f7fe fd54 	bl	9f14 <MPSL_IRQ_RADIO_Handler+0xd70>
    b46c:	0007      	movs	r7, r0
    b46e:	d0f9      	beq.n	b464 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    b470:	4820      	ldr	r0, [pc, #128]	; (b4f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    b472:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    b476:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    b47a:	2802      	cmp	r0, #2
    b47c:	d104      	bne.n	b488 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
    b47e:	4642      	mov	r2, r8
    b480:	4649      	mov	r1, r9
    b482:	2006      	movs	r0, #6
    b484:	f7fe fd14 	bl	9eb0 <MPSL_IRQ_RADIO_Handler+0xd0c>
    b488:	20ff      	movs	r0, #255	; 0xff
    b48a:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    b48e:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    b492:	f8df 8064 	ldr.w	r8, [pc, #100]	; b4f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    b496:	2820      	cmp	r0, #32
    b498:	bf1c      	itt	ne
    b49a:	f898 0001 	ldrbne.w	r0, [r8, #1]
    b49e:	f001 faf9 	blne	ca94 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b4a2:	f894 0020 	ldrb.w	r0, [r4, #32]
    b4a6:	b128      	cbz	r0, b4b4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
    b4a8:	f000 fe8c 	bl	c1c4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    b4ac:	f884 5020 	strb.w	r5, [r4, #32]
    b4b0:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    b4b4:	2f02      	cmp	r7, #2
    b4b6:	d00f      	beq.n	b4d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    b4b8:	2f01      	cmp	r7, #1
    b4ba:	bf18      	it	ne
    b4bc:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4c0:	f04f 30ff 	mov.w	r0, #4294967295
    b4c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    b4c8:	2900      	cmp	r1, #0
    b4ca:	bf08      	it	eq
    b4cc:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4d0:	b001      	add	sp, #4
    b4d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4d6:	4708      	bx	r1
    b4d8:	68a0      	ldr	r0, [r4, #8]
    b4da:	1b80      	subs	r0, r0, r6
    b4dc:	f005 fbed 	bl	10cba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b4e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
    b4e4:	2900      	cmp	r1, #0
    b4e6:	d1f3      	bne.n	b4d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
    b4e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4ec:	200010d0 	.word	0x200010d0
    b4f0:	20000c50 	.word	0x20000c50
    b4f4:	20001050 	.word	0x20001050
    b4f8:	200002fc 	.word	0x200002fc

0000b4fc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    b4fc:	b570      	push	{r4, r5, r6, lr}
    b4fe:	4c40      	ldr	r4, [pc, #256]	; (b600 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x104>)
    b500:	4605      	mov	r5, r0
    b502:	b082      	sub	sp, #8
    b504:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b508:	2820      	cmp	r0, #32
    b50a:	d008      	beq.n	b51e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    b50c:	6860      	ldr	r0, [r4, #4]
    b50e:	f1b0 3fff 	cmp.w	r0, #4294967295
    b512:	d009      	beq.n	b528 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    b514:	f640 21b6 	movw	r1, #2742	; 0xab6
    b518:	2070      	movs	r0, #112	; 0x70
    b51a:	f001 f9e9 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b51e:	f640 21b5 	movw	r1, #2741	; 0xab5
    b522:	2070      	movs	r0, #112	; 0x70
    b524:	f001 f9e4 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b528:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b52c:	4935      	ldr	r1, [pc, #212]	; (b604 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x108>)
    b52e:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    b532:	68b0      	ldr	r0, [r6, #8]
    b534:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b538:	f005 fbbf 	bl	10cba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b53c:	4602      	mov	r2, r0
    b53e:	8af0      	ldrh	r0, [r6, #22]
    b540:	7d31      	ldrb	r1, [r6, #20]
    b542:	4b31      	ldr	r3, [pc, #196]	; (b608 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    b544:	4408      	add	r0, r1
    b546:	1c40      	adds	r0, r0, #1
    b548:	1811      	adds	r1, r2, r0
    b54a:	429a      	cmp	r2, r3
    b54c:	d817      	bhi.n	b57e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b54e:	4a2f      	ldr	r2, [pc, #188]	; (b60c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    b550:	4290      	cmp	r0, r2
    b552:	dc1b      	bgt.n	b58c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b554:	f1c2 0c00 	rsb	ip, r2, #0
    b558:	4560      	cmp	r0, ip
    b55a:	db1e      	blt.n	b59a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b55c:	0056      	lsls	r6, r2, #1
    b55e:	428e      	cmp	r6, r1
    b560:	bfdc      	itt	le
    b562:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b566:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b56a:	dd05      	ble.n	b578 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b56c:	2900      	cmp	r1, #0
    b56e:	bfbc      	itt	lt
    b570:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b574:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b578:	1948      	adds	r0, r1, r5
    b57a:	4299      	cmp	r1, r3
    b57c:	d904      	bls.n	b588 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b57e:	f240 517f 	movw	r1, #1407	; 0x57f
    b582:	2070      	movs	r0, #112	; 0x70
    b584:	f001 f9b4 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b588:	4295      	cmp	r5, r2
    b58a:	dd04      	ble.n	b596 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b58c:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    b590:	2070      	movs	r0, #112	; 0x70
    b592:	f001 f9ad 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b596:	4565      	cmp	r5, ip
    b598:	da04      	bge.n	b5a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b59a:	f240 5181 	movw	r1, #1409	; 0x581
    b59e:	2070      	movs	r0, #112	; 0x70
    b5a0:	f001 f9a6 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b5a4:	4286      	cmp	r6, r0
    b5a6:	bfdc      	itt	le
    b5a8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b5ac:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b5b0:	dd05      	ble.n	b5be <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b5b2:	2800      	cmp	r0, #0
    b5b4:	bfbc      	itt	lt
    b5b6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b5ba:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b5be:	aa01      	add	r2, sp, #4
    b5c0:	4669      	mov	r1, sp
    b5c2:	f000 f905 	bl	b7d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b5c6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b5ca:	280f      	cmp	r0, #15
    b5cc:	bf8c      	ite	hi
    b5ce:	2001      	movhi	r0, #1
    b5d0:	2000      	movls	r0, #0
    b5d2:	9900      	ldr	r1, [sp, #0]
    b5d4:	4408      	add	r0, r1
    b5d6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b5da:	6061      	str	r1, [r4, #4]
    b5dc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    b5e0:	f88d 0000 	strb.w	r0, [sp]
    b5e4:	f89d 0000 	ldrb.w	r0, [sp]
    b5e8:	2800      	cmp	r0, #0
    b5ea:	bf02      	ittt	eq
    b5ec:	2001      	moveq	r0, #1
    b5ee:	b002      	addeq	sp, #8
    b5f0:	bd70      	popeq	{r4, r5, r6, pc}
    b5f2:	2005      	movs	r0, #5
    b5f4:	b002      	add	sp, #8
    b5f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b5fa:	f000 bbeb 	b.w	bdd4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b5fe:	0000      	.short	0x0000
    b600:	200010d0 	.word	0x200010d0
    b604:	20000c50 	.word	0x20000c50
    b608:	1e847fff 	.word	0x1e847fff
    b60c:	0f424000 	.word	0x0f424000

0000b610 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b610:	b570      	push	{r4, r5, r6, lr}
    b612:	4c1e      	ldr	r4, [pc, #120]	; (b68c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b614:	2120      	movs	r1, #32
    b616:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    b61a:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    b61e:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    b622:	2000      	movs	r0, #0
    b624:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    b628:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    b62c:	1e42      	subs	r2, r0, #1
    b62e:	e9c4 0200 	strd	r0, r2, [r4]
    b632:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    b636:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    b63a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    b63e:	f884 0020 	strb.w	r0, [r4, #32]
    b642:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    b646:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    b64a:	1e41      	subs	r1, r0, #1
    b64c:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    b650:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    b654:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b658:	2210      	movs	r2, #16
    b65a:	7088      	strb	r0, [r1, #2]
    b65c:	f801 0f04 	strb.w	r0, [r1, #4]!
    b660:	1e52      	subs	r2, r2, #1
    b662:	d1fa      	bne.n	b65a <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    b664:	f000 fddc 	bl	c220 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b668:	4d09      	ldr	r5, [pc, #36]	; (b690 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    b66a:	2601      	movs	r6, #1
    b66c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    b670:	20ff      	movs	r0, #255	; 0xff
    b672:	7028      	strb	r0, [r5, #0]
    b674:	4807      	ldr	r0, [pc, #28]	; (b694 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    b676:	f001 f9ef 	bl	ca58 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b67a:	7068      	strb	r0, [r5, #1]
    b67c:	f001 fa5a 	bl	cb34 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b680:	60a8      	str	r0, [r5, #8]
    b682:	f000 fd5f 	bl	c144 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b686:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    b68a:	bd70      	pop	{r4, r5, r6, pc}
    b68c:	200010d0 	.word	0x200010d0
    b690:	200002fc 	.word	0x200002fc
    b694:	00009de1 	.word	0x00009de1

0000b698 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    b698:	b570      	push	{r4, r5, r6, lr}
    b69a:	4605      	mov	r5, r0
    b69c:	2001      	movs	r0, #1
    b69e:	fa00 f405 	lsl.w	r4, r0, r5
    b6a2:	460e      	mov	r6, r1
    b6a4:	2a00      	cmp	r2, #0
    b6a6:	bf08      	it	eq
    b6a8:	4808      	ldreq	r0, [pc, #32]	; (b6cc <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    b6aa:	d00c      	beq.n	b6c6 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    b6ac:	2000      	movs	r0, #0
    b6ae:	f000 fd2f 	bl	c110 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    b6b2:	00e9      	lsls	r1, r5, #3
    b6b4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b6b8:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    b6bc:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b6c0:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    b6c4:	4802      	ldr	r0, [pc, #8]	; (b6d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    b6c6:	6004      	str	r4, [r0, #0]
    b6c8:	bd70      	pop	{r4, r5, r6, pc}
    b6ca:	0000      	.short	0x0000
    b6cc:	4001f508 	.word	0x4001f508
    b6d0:	4001f504 	.word	0x4001f504

0000b6d4 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    b6d4:	0e03      	lsrs	r3, r0, #24
    b6d6:	b430      	push	{r4, r5}
    b6d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    b6dc:	f8df c038 	ldr.w	ip, [pc, #56]	; b718 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    b6e0:	0e09      	lsrs	r1, r1, #24
    b6e2:	fba3 250c 	umull	r2, r5, r3, ip
    b6e6:	fb01 510c 	mla	r1, r1, ip, r5
    b6ea:	2400      	movs	r4, #0
    b6ec:	fb03 1104 	mla	r1, r3, r4, r1
    b6f0:	f647 73ff 	movw	r3, #32767	; 0x7fff
    b6f4:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    b6f8:	f643 5c09 	movw	ip, #15625	; 0x3d09
    b6fc:	fb13 f30c 	smulbb	r3, r3, ip
    b700:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b704:	fb10 f00c 	smulbb	r0, r0, ip
    b708:	f500 7080 	add.w	r0, r0, #256	; 0x100
    b70c:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    b710:	1880      	adds	r0, r0, r2
    b712:	4161      	adcs	r1, r4
    b714:	bc30      	pop	{r4, r5}
    b716:	4770      	bx	lr
    b718:	1e848000 	.word	0x1e848000

0000b71c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    b71c:	b570      	push	{r4, r5, r6, lr}
    b71e:	b084      	sub	sp, #16
    b720:	4615      	mov	r5, r2
    b722:	aa01      	add	r2, sp, #4
    b724:	461c      	mov	r4, r3
    b726:	9200      	str	r2, [sp, #0]
    b728:	9e08      	ldr	r6, [sp, #32]
    b72a:	ab02      	add	r3, sp, #8
    b72c:	4a17      	ldr	r2, [pc, #92]	; (b78c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    b72e:	f005 fc45 	bl	10fbc <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    b732:	9801      	ldr	r0, [sp, #4]
    b734:	f248 6237 	movw	r2, #34359	; 0x8637
    b738:	0b41      	lsrs	r1, r0, #13
    b73a:	4351      	muls	r1, r2
    b73c:	0c09      	lsrs	r1, r1, #16
    b73e:	4a14      	ldr	r2, [pc, #80]	; (b790 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    b740:	024b      	lsls	r3, r1, #9
    b742:	fb01 0102 	mla	r1, r1, r2, r0
    b746:	4813      	ldr	r0, [pc, #76]	; (b794 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    b748:	4348      	muls	r0, r1
    b74a:	0d42      	lsrs	r2, r0, #21
    b74c:	1898      	adds	r0, r3, r2
    b74e:	f643 5309 	movw	r3, #15625	; 0x3d09
    b752:	fb12 f303 	smulbb	r3, r2, r3
    b756:	f503 7280 	add.w	r2, r3, #256	; 0x100
    b75a:	f643 5c08 	movw	ip, #15624	; 0x3d08
    b75e:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    b762:	4463      	add	r3, ip
    b764:	b2d2      	uxtb	r2, r2
    b766:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    b76a:	bf84      	itt	hi
    b76c:	2200      	movhi	r2, #0
    b76e:	1c40      	addhi	r0, r0, #1
    b770:	7032      	strb	r2, [r6, #0]
    b772:	9b02      	ldr	r3, [sp, #8]
    b774:	0a19      	lsrs	r1, r3, #8
    b776:	061b      	lsls	r3, r3, #24
    b778:	1818      	adds	r0, r3, r0
    b77a:	f141 0100 	adc.w	r1, r1, #0
    b77e:	e9c4 0100 	strd	r0, r1, [r4]
    b782:	9801      	ldr	r0, [sp, #4]
    b784:	6028      	str	r0, [r5, #0]
    b786:	b004      	add	sp, #16
    b788:	bd70      	pop	{r4, r5, r6, pc}
    b78a:	0000      	.short	0x0000
    b78c:	1e848000 	.word	0x1e848000
    b790:	ffffc2f7 	.word	0xffffc2f7
    b794:	00010c6f 	.word	0x00010c6f

0000b798 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b798:	0b41      	lsrs	r1, r0, #13
    b79a:	f248 6237 	movw	r2, #34359	; 0x8637
    b79e:	4351      	muls	r1, r2
    b7a0:	0c0a      	lsrs	r2, r1, #16
    b7a2:	4b09      	ldr	r3, [pc, #36]	; (b7c8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b7a4:	0251      	lsls	r1, r2, #9
    b7a6:	fb02 0203 	mla	r2, r2, r3, r0
    b7aa:	4808      	ldr	r0, [pc, #32]	; (b7cc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b7ac:	4350      	muls	r0, r2
    b7ae:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b7b2:	306e      	adds	r0, #110	; 0x6e
    b7b4:	0d40      	lsrs	r0, r0, #21
    b7b6:	425b      	negs	r3, r3
    b7b8:	fb10 f303 	smulbb	r3, r0, r3
    b7bc:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b7c0:	bf88      	it	hi
    b7c2:	1c49      	addhi	r1, r1, #1
    b7c4:	4408      	add	r0, r1
    b7c6:	4770      	bx	lr
    b7c8:	ffffc2f7 	.word	0xffffc2f7
    b7cc:	00010c6f 	.word	0x00010c6f

0000b7d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b7d0:	0b43      	lsrs	r3, r0, #13
    b7d2:	f248 6c37 	movw	ip, #34359	; 0x8637
    b7d6:	fb03 f30c 	mul.w	r3, r3, ip
    b7da:	b430      	push	{r4, r5}
    b7dc:	0c1b      	lsrs	r3, r3, #16
    b7de:	f8df c044 	ldr.w	ip, [pc, #68]	; b824 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b7e2:	025c      	lsls	r4, r3, #9
    b7e4:	fb03 030c 	mla	r3, r3, ip, r0
    b7e8:	480f      	ldr	r0, [pc, #60]	; (b828 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b7ea:	4358      	muls	r0, r3
    b7ec:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b7f0:	eb04 000c 	add.w	r0, r4, ip
    b7f4:	f643 5409 	movw	r4, #15625	; 0x3d09
    b7f8:	fb1c f404 	smulbb	r4, ip, r4
    b7fc:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b800:	f643 5508 	movw	r5, #15624	; 0x3d08
    b804:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b808:	442c      	add	r4, r5
    b80a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b80e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b812:	bf84      	itt	hi
    b814:	f04f 0c00 	movhi.w	ip, #0
    b818:	1c40      	addhi	r0, r0, #1
    b81a:	6008      	str	r0, [r1, #0]
    b81c:	f882 c000 	strb.w	ip, [r2]
    b820:	bc30      	pop	{r4, r5}
    b822:	4770      	bx	lr
    b824:	ffffc2f7 	.word	0xffffc2f7
    b828:	00010c6f 	.word	0x00010c6f

0000b82c <MPSL_IRQ_RTC0_Handler>:
    b82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b830:	2400      	movs	r4, #0
    b832:	f8df 9080 	ldr.w	r9, [pc, #128]	; b8b4 <MPSL_IRQ_RTC0_Handler+0x88>
    b836:	4d20      	ldr	r5, [pc, #128]	; (b8b8 <MPSL_IRQ_RTC0_Handler+0x8c>)
    b838:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    b83c:	f44f 78a0 	mov.w	r8, #320	; 0x140
    b840:	ea4f 0604 	mov.w	r6, r4
    b844:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    b848:	fa07 f004 	lsl.w	r0, r7, r4
    b84c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    b850:	4202      	tst	r2, r0
    b852:	d01a      	beq.n	b88a <MPSL_IRQ_RTC0_Handler+0x5e>
    b854:	4a18      	ldr	r2, [pc, #96]	; (b8b8 <MPSL_IRQ_RTC0_Handler+0x8c>)
    b856:	5852      	ldr	r2, [r2, r1]
    b858:	b1ba      	cbz	r2, b88a <MPSL_IRQ_RTC0_Handler+0x5e>
    b85a:	506e      	str	r6, [r5, r1]
    b85c:	00a1      	lsls	r1, r4, #2
    b85e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b862:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    b866:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    b86a:	f8d9 2000 	ldr.w	r2, [r9]
    b86e:	1a89      	subs	r1, r1, r2
    b870:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b874:	2902      	cmp	r1, #2
    b876:	d302      	bcc.n	b87e <MPSL_IRQ_RTC0_Handler+0x52>
    b878:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    b87c:	d905      	bls.n	b88a <MPSL_IRQ_RTC0_Handler+0x5e>
    b87e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b882:	1d20      	adds	r0, r4, #4
    b884:	b2c0      	uxtb	r0, r0
    b886:	f7fe fd73 	bl	a370 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b88a:	1c60      	adds	r0, r4, #1
    b88c:	b2c4      	uxtb	r4, r0
    b88e:	2c03      	cmp	r4, #3
    b890:	d3d8      	bcc.n	b844 <MPSL_IRQ_RTC0_Handler+0x18>
    b892:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b896:	b128      	cbz	r0, b8a4 <MPSL_IRQ_RTC0_Handler+0x78>
    b898:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    b89c:	4807      	ldr	r0, [pc, #28]	; (b8bc <MPSL_IRQ_RTC0_Handler+0x90>)
    b89e:	6881      	ldr	r1, [r0, #8]
    b8a0:	1c49      	adds	r1, r1, #1
    b8a2:	6081      	str	r1, [r0, #8]
    b8a4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b8a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b8ac:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    b8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b8b4:	4000b504 	.word	0x4000b504
    b8b8:	4000b000 	.word	0x4000b000
    b8bc:	20000028 	.word	0x20000028

0000b8c0 <MPSL_IRQ_TIMER0_Handler>:
    b8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8c4:	4d38      	ldr	r5, [pc, #224]	; (b9a8 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b8c6:	7828      	ldrb	r0, [r5, #0]
    b8c8:	2804      	cmp	r0, #4
    b8ca:	d068      	beq.n	b99e <MPSL_IRQ_TIMER0_Handler+0xde>
    b8cc:	1ca8      	adds	r0, r5, #2
    b8ce:	2201      	movs	r2, #1
    b8d0:	7801      	ldrb	r1, [r0, #0]
    b8d2:	b159      	cbz	r1, b8ec <MPSL_IRQ_TIMER0_Handler+0x2c>
    b8d4:	2901      	cmp	r1, #1
    b8d6:	bf08      	it	eq
    b8d8:	706a      	strbeq	r2, [r5, #1]
    b8da:	d002      	beq.n	b8e2 <MPSL_IRQ_TIMER0_Handler+0x22>
    b8dc:	7869      	ldrb	r1, [r5, #1]
    b8de:	2900      	cmp	r1, #0
    b8e0:	d058      	beq.n	b994 <MPSL_IRQ_TIMER0_Handler+0xd4>
    b8e2:	2102      	movs	r1, #2
    b8e4:	7001      	strb	r1, [r0, #0]
    b8e6:	7840      	ldrb	r0, [r0, #1]
    b8e8:	f000 fb2e 	bl	bf48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b8ec:	4c2f      	ldr	r4, [pc, #188]	; (b9ac <MPSL_IRQ_TIMER0_Handler+0xec>)
    b8ee:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b8f2:	f04f 0800 	mov.w	r8, #0
    b8f6:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b8fa:	f44f 7780 	mov.w	r7, #256	; 0x100
    b8fe:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b902:	d00a      	beq.n	b91a <MPSL_IRQ_TIMER0_Handler+0x5a>
    b904:	482a      	ldr	r0, [pc, #168]	; (b9b0 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b906:	6800      	ldr	r0, [r0, #0]
    b908:	b138      	cbz	r0, b91a <MPSL_IRQ_TIMER0_Handler+0x5a>
    b90a:	2003      	movs	r0, #3
    b90c:	f000 fb1c 	bl	bf48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b910:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b914:	2003      	movs	r0, #3
    b916:	f7fe fd2b 	bl	a370 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b91a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b91e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b922:	d00a      	beq.n	b93a <MPSL_IRQ_TIMER0_Handler+0x7a>
    b924:	4823      	ldr	r0, [pc, #140]	; (b9b4 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b926:	6800      	ldr	r0, [r0, #0]
    b928:	b138      	cbz	r0, b93a <MPSL_IRQ_TIMER0_Handler+0x7a>
    b92a:	2002      	movs	r0, #2
    b92c:	f000 fb0c 	bl	bf48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b930:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b934:	2002      	movs	r0, #2
    b936:	f7fe fd1b 	bl	a370 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b93a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b93e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b942:	d00a      	beq.n	b95a <MPSL_IRQ_TIMER0_Handler+0x9a>
    b944:	481c      	ldr	r0, [pc, #112]	; (b9b8 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b946:	6800      	ldr	r0, [r0, #0]
    b948:	b138      	cbz	r0, b95a <MPSL_IRQ_TIMER0_Handler+0x9a>
    b94a:	2001      	movs	r0, #1
    b94c:	f000 fafc 	bl	bf48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b950:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b954:	2001      	movs	r0, #1
    b956:	f7fe fd0b 	bl	a370 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b95a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b95e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b962:	bf08      	it	eq
    b964:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b968:	4814      	ldr	r0, [pc, #80]	; (b9bc <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b96a:	6800      	ldr	r0, [r0, #0]
    b96c:	2800      	cmp	r0, #0
    b96e:	bf08      	it	eq
    b970:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b974:	2000      	movs	r0, #0
    b976:	f000 fae7 	bl	bf48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b97a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b97e:	2004      	movs	r0, #4
    b980:	7028      	strb	r0, [r5, #0]
    b982:	f8c5 8004 	str.w	r8, [r5, #4]
    b986:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b98e:	2000      	movs	r0, #0
    b990:	f7fe bcee 	b.w	a370 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b994:	f240 5169 	movw	r1, #1385	; 0x569
    b998:	206c      	movs	r0, #108	; 0x6c
    b99a:	f000 ffa9 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b99e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b9a2:	2007      	movs	r0, #7
    b9a4:	f7fe bce4 	b.w	a370 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b9a8:	20000028 	.word	0x20000028
    b9ac:	40008000 	.word	0x40008000
    b9b0:	4000814c 	.word	0x4000814c
    b9b4:	40008148 	.word	0x40008148
    b9b8:	40008144 	.word	0x40008144
    b9bc:	40008140 	.word	0x40008140
    b9c0:	2201      	movs	r2, #1
    b9c2:	0211      	lsls	r1, r2, #8
    b9c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b9c8:	2000      	movs	r0, #0
    b9ca:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b9ce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b9d2:	f3bf 8f4f 	dsb	sy
    b9d6:	f3bf 8f6f 	isb	sy
    b9da:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b9de:	490e      	ldr	r1, [pc, #56]	; (ba18 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b9e0:	f841 2f04 	str.w	r2, [r1, #4]!
    b9e4:	1e43      	subs	r3, r0, #1
    b9e6:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b9ea:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b9ee:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b9f2:	4b0a      	ldr	r3, [pc, #40]	; (ba1c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b9f4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b9f8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b9fc:	1d1b      	adds	r3, r3, #4
    b9fe:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    ba02:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    ba06:	1d1b      	adds	r3, r3, #4
    ba08:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    ba0c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    ba10:	60ca      	str	r2, [r1, #12]
    ba12:	4903      	ldr	r1, [pc, #12]	; (ba20 <MPSL_IRQ_TIMER0_Handler+0x160>)
    ba14:	7048      	strb	r0, [r1, #1]
    ba16:	4770      	bx	lr
    ba18:	40008000 	.word	0x40008000
    ba1c:	40008004 	.word	0x40008004
    ba20:	20000028 	.word	0x20000028

0000ba24 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    ba24:	4801      	ldr	r0, [pc, #4]	; (ba2c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    ba26:	6800      	ldr	r0, [r0, #0]
    ba28:	4770      	bx	lr
    ba2a:	0000      	.short	0x0000
    ba2c:	4000b504 	.word	0x4000b504

0000ba30 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    ba30:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ba34:	f8df 8130 	ldr.w	r8, [pc, #304]	; bb68 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    ba38:	4604      	mov	r4, r0
    ba3a:	f1a8 0702 	sub.w	r7, r8, #2
    ba3e:	460e      	mov	r6, r1
    ba40:	f898 c000 	ldrb.w	ip, [r8]
    ba44:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    ba48:	f1bc 0f01 	cmp.w	ip, #1
    ba4c:	d106      	bne.n	ba5c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    ba4e:	ea81 0204 	eor.w	r2, r1, r4
    ba52:	4070      	eors	r0, r6
    ba54:	4310      	orrs	r0, r2
    ba56:	bf08      	it	eq
    ba58:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    ba5c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    ba60:	4a42      	ldr	r2, [pc, #264]	; (bb6c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    ba62:	6010      	str	r0, [r2, #0]
    ba64:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    ba68:	f1bc 0f00 	cmp.w	ip, #0
    ba6c:	bf07      	ittee	eq
    ba6e:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    ba72:	2200      	moveq	r2, #0
    ba74:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    ba78:	2201      	movne	r2, #1
    ba7a:	483d      	ldr	r0, [pc, #244]	; (bb70 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    ba7c:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    ba80:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    ba84:	2500      	movs	r5, #0
    ba86:	f44f 79a0 	mov.w	r9, #320	; 0x140
    ba8a:	2a02      	cmp	r2, #2
    ba8c:	d207      	bcs.n	ba9e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    ba8e:	bf00      	nop
    ba90:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    ba94:	50c5      	str	r5, [r0, r3]
    ba96:	1c52      	adds	r2, r2, #1
    ba98:	b2d2      	uxtb	r2, r2
    ba9a:	2a02      	cmp	r2, #2
    ba9c:	d3f8      	bcc.n	ba90 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    ba9e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    baa2:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    baa6:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    baaa:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    baae:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    bab2:	4a30      	ldr	r2, [pc, #192]	; (bb74 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    bab4:	f8d2 9000 	ldr.w	r9, [r2]
    bab8:	eba3 0909 	sub.w	r9, r3, r9
    babc:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    bac0:	f04f 0901 	mov.w	r9, #1
    bac4:	f1ba 0f02 	cmp.w	sl, #2
    bac8:	d32e      	bcc.n	bb28 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    baca:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    bace:	d82b      	bhi.n	bb28 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    bad0:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    bad4:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    bad8:	f1bc 0f00 	cmp.w	ip, #0
    badc:	d005      	beq.n	baea <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    bade:	6810      	ldr	r0, [r2, #0]
    bae0:	1a08      	subs	r0, r1, r0
    bae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bae6:	2802      	cmp	r0, #2
    bae8:	d3f9      	bcc.n	bade <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    baea:	f8c7 9004 	str.w	r9, [r7, #4]
    baee:	703d      	strb	r5, [r7, #0]
    baf0:	f7ff ff66 	bl	b9c0 <MPSL_IRQ_TIMER0_Handler+0x100>
    baf4:	4820      	ldr	r0, [pc, #128]	; (bb78 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    baf6:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    bafa:	f365 0101 	bfi	r1, r5, #0, #2
    bafe:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    bb02:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    bb06:	2102      	movs	r1, #2
    bb08:	f361 0201 	bfi	r2, r1, #0, #2
    bb0c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    bb10:	2110      	movs	r1, #16
    bb12:	fa91 f1a1 	rbit	r1, r1
    bb16:	fab1 f181 	clz	r1, r1
    bb1a:	2909      	cmp	r1, #9
    bb1c:	d909      	bls.n	bb32 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    bb1e:	f240 3155 	movw	r1, #853	; 0x355
    bb22:	a016      	add	r0, pc, #88	; (adr r0, bb7c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    bb24:	f000 feb8 	bl	c898 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    bb28:	f240 31b2 	movw	r1, #946	; 0x3b2
    bb2c:	206c      	movs	r0, #108	; 0x6c
    bb2e:	f000 fedf 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb32:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    bb36:	f8c0 900c 	str.w	r9, [r0, #12]
    bb3a:	6879      	ldr	r1, [r7, #4]
    bb3c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bb40:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    bb44:	f44f 7180 	mov.w	r1, #256	; 0x100
    bb48:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bb4c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    bb50:	490d      	ldr	r1, [pc, #52]	; (bb88 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    bb52:	0480      	lsls	r0, r0, #18
    bb54:	6008      	str	r0, [r1, #0]
    bb56:	e9c7 4604 	strd	r4, r6, [r7, #16]
    bb5a:	2004      	movs	r0, #4
    bb5c:	f888 0001 	strb.w	r0, [r8, #1]
    bb60:	f888 9000 	strb.w	r9, [r8]
    bb64:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    bb68:	2000002a 	.word	0x2000002a
    bb6c:	4001f508 	.word	0x4001f508
    bb70:	4000b000 	.word	0x4000b000
    bb74:	4000b504 	.word	0x4000b504
    bb78:	40008000 	.word	0x40008000
    bb7c:	5f66726e 	.word	0x5f66726e
    bb80:	656d6974 	.word	0x656d6974
    bb84:	00682e72 	.word	0x00682e72
    bb88:	4001f504 	.word	0x4001f504

0000bb8c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    bb8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb90:	4c31      	ldr	r4, [pc, #196]	; (bc58 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    bb92:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    bb96:	ea82 0c00 	eor.w	ip, r2, r0
    bb9a:	404b      	eors	r3, r1
    bb9c:	ea5c 0303 	orrs.w	r3, ip, r3
    bba0:	bf14      	ite	ne
    bba2:	2301      	movne	r3, #1
    bba4:	2300      	moveq	r3, #0
    bba6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; bc5c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    bbaa:	f89c 8000 	ldrb.w	r8, [ip]
    bbae:	f1b8 0f02 	cmp.w	r8, #2
    bbb2:	d002      	beq.n	bbba <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    bbb4:	2b00      	cmp	r3, #0
    bbb6:	d03f      	beq.n	bc38 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    bbb8:	e003      	b.n	bbc2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    bbba:	2b00      	cmp	r3, #0
    bbbc:	bf08      	it	eq
    bbbe:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bbc2:	7863      	ldrb	r3, [r4, #1]
    bbc4:	b3bb      	cbz	r3, bc36 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    bbc6:	4d26      	ldr	r5, [pc, #152]	; (bc60 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    bbc8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    bbcc:	602b      	str	r3, [r5, #0]
    bbce:	4e25      	ldr	r6, [pc, #148]	; (bc64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
    bbd0:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    bbd4:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    bbd8:	462f      	mov	r7, r5
    bbda:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    bbde:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    bbe2:	2500      	movs	r5, #0
    bbe4:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    bbe8:	4d1f      	ldr	r5, [pc, #124]	; (bc68 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
    bbea:	f8d5 9000 	ldr.w	r9, [r5]
    bbee:	eba3 0909 	sub.w	r9, r3, r9
    bbf2:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    bbf6:	f1b9 0f02 	cmp.w	r9, #2
    bbfa:	d327      	bcc.n	bc4c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    bbfc:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    bc00:	d824      	bhi.n	bc4c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    bc02:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    bc06:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    bc0a:	f1b8 0f00 	cmp.w	r8, #0
    bc0e:	d005      	beq.n	bc1c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    bc10:	682b      	ldr	r3, [r5, #0]
    bc12:	1ad3      	subs	r3, r2, r3
    bc14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bc18:	2b02      	cmp	r3, #2
    bc1a:	d3f9      	bcc.n	bc10 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    bc1c:	4d13      	ldr	r5, [pc, #76]	; (bc6c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
    bc1e:	2202      	movs	r2, #2
    bc20:	0753      	lsls	r3, r2, #29
    bc22:	602b      	str	r3, [r5, #0]
    bc24:	e9c4 0104 	strd	r0, r1, [r4, #16]
    bc28:	2004      	movs	r0, #4
    bc2a:	f88c 0001 	strb.w	r0, [ip, #1]
    bc2e:	f88c 2000 	strb.w	r2, [ip]
    bc32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bc36:	e004      	b.n	bc42 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    bc38:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    bc3c:	206c      	movs	r0, #108	; 0x6c
    bc3e:	f000 fe57 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc42:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    bc46:	206c      	movs	r0, #108	; 0x6c
    bc48:	f000 fe52 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc4c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    bc50:	206c      	movs	r0, #108	; 0x6c
    bc52:	f000 fe4d 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc56:	0000      	.short	0x0000
    bc58:	20000028 	.word	0x20000028
    bc5c:	2000002a 	.word	0x2000002a
    bc60:	4001f508 	.word	0x4001f508
    bc64:	4000b000 	.word	0x4000b000
    bc68:	4000b504 	.word	0x4000b504
    bc6c:	4001f504 	.word	0x4001f504

0000bc70 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    bc70:	4901      	ldr	r1, [pc, #4]	; (bc78 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    bc72:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    bc76:	4770      	bx	lr
    bc78:	20000028 	.word	0x20000028

0000bc7c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    bc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc80:	f8df c0f4 	ldr.w	ip, [pc, #244]	; bd78 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    bc84:	f89c 4000 	ldrb.w	r4, [ip]
    bc88:	2c00      	cmp	r4, #0
    bc8a:	bf07      	ittee	eq
    bc8c:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    bc90:	2100      	moveq	r1, #0
    bc92:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    bc96:	2101      	movne	r1, #1
    bc98:	4838      	ldr	r0, [pc, #224]	; (bd7c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    bc9a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bc9e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bca2:	2300      	movs	r3, #0
    bca4:	2902      	cmp	r1, #2
    bca6:	bf38      	it	cc
    bca8:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    bcac:	d207      	bcs.n	bcbe <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    bcae:	bf00      	nop
    bcb0:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    bcb4:	5083      	str	r3, [r0, r2]
    bcb6:	1c49      	adds	r1, r1, #1
    bcb8:	b2c9      	uxtb	r1, r1
    bcba:	2902      	cmp	r1, #2
    bcbc:	d3f8      	bcc.n	bcb0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    bcbe:	2c02      	cmp	r4, #2
    bcc0:	d004      	beq.n	bccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    bcc2:	f240 31db 	movw	r1, #987	; 0x3db
    bcc6:	206c      	movs	r0, #108	; 0x6c
    bcc8:	f000 fe12 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bccc:	f3ef 8210 	mrs	r2, PRIMASK
    bcd0:	b672      	cpsid	i
    bcd2:	4c2b      	ldr	r4, [pc, #172]	; (bd80 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    bcd4:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    bcd8:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    bcdc:	b12d      	cbz	r5, bcea <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    bcde:	68a1      	ldr	r1, [r4, #8]
    bce0:	1c49      	adds	r1, r1, #1
    bce2:	60a1      	str	r1, [r4, #8]
    bce4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    bce8:	e7f4      	b.n	bcd4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    bcea:	68a0      	ldr	r0, [r4, #8]
    bcec:	b902      	cbnz	r2, bcf0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    bcee:	b662      	cpsie	i
    bcf0:	0a02      	lsrs	r2, r0, #8
    bcf2:	0600      	lsls	r0, r0, #24
    bcf4:	1840      	adds	r0, r0, r1
    bcf6:	eb42 0103 	adc.w	r1, r2, r3
    bcfa:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    bcfe:	1cc0      	adds	r0, r0, #3
    bd00:	f141 0100 	adc.w	r1, r1, #0
    bd04:	4f1f      	ldr	r7, [pc, #124]	; (bd84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    bd06:	2601      	movs	r6, #1
    bd08:	4d1f      	ldr	r5, [pc, #124]	; (bd88 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    bd0a:	ea80 0902 	eor.w	r9, r0, r2
    bd0e:	ea81 0808 	eor.w	r8, r1, r8
    bd12:	ea59 0808 	orrs.w	r8, r9, r8
    bd16:	d00e      	beq.n	bd36 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    bd18:	f8d7 8000 	ldr.w	r8, [r7]
    bd1c:	eba2 0808 	sub.w	r8, r2, r8
    bd20:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    bd24:	f1b8 0f04 	cmp.w	r8, #4
    bd28:	d305      	bcc.n	bd36 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    bd2a:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    bd2e:	d802      	bhi.n	bd36 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    bd30:	f7ff fe7e 	bl	ba30 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    bd34:	e01b      	b.n	bd6e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    bd36:	6838      	ldr	r0, [r7, #0]
    bd38:	1a10      	subs	r0, r2, r0
    bd3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bd3e:	2802      	cmp	r0, #2
    bd40:	d313      	bcc.n	bd6a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    bd42:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    bd46:	d810      	bhi.n	bd6a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    bd48:	4910      	ldr	r1, [pc, #64]	; (bd8c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    bd4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bd4e:	6008      	str	r0, [r1, #0]
    bd50:	6066      	str	r6, [r4, #4]
    bd52:	7023      	strb	r3, [r4, #0]
    bd54:	606e      	str	r6, [r5, #4]
    bd56:	60ee      	str	r6, [r5, #12]
    bd58:	0040      	lsls	r0, r0, #1
    bd5a:	1f09      	subs	r1, r1, #4
    bd5c:	6008      	str	r0, [r1, #0]
    bd5e:	2004      	movs	r0, #4
    bd60:	f88c 0001 	strb.w	r0, [ip, #1]
    bd64:	f88c 6000 	strb.w	r6, [ip]
    bd68:	e001      	b.n	bd6e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    bd6a:	6066      	str	r6, [r4, #4]
    bd6c:	7023      	strb	r3, [r4, #0]
    bd6e:	6860      	ldr	r0, [r4, #4]
    bd70:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    bd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bd78:	2000002a 	.word	0x2000002a
    bd7c:	4000b000 	.word	0x4000b000
    bd80:	20000028 	.word	0x20000028
    bd84:	4000b504 	.word	0x4000b504
    bd88:	40008000 	.word	0x40008000
    bd8c:	4001f508 	.word	0x4001f508

0000bd90 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    bd90:	b410      	push	{r4}
    bd92:	f3ef 8410 	mrs	r4, PRIMASK
    bd96:	b672      	cpsid	i
    bd98:	4a0c      	ldr	r2, [pc, #48]	; (bdcc <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    bd9a:	490d      	ldr	r1, [pc, #52]	; (bdd0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    bd9c:	f04f 0c00 	mov.w	ip, #0
    bda0:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    bda4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    bda8:	b12b      	cbz	r3, bdb6 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    bdaa:	6888      	ldr	r0, [r1, #8]
    bdac:	1c40      	adds	r0, r0, #1
    bdae:	6088      	str	r0, [r1, #8]
    bdb0:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    bdb4:	e7f4      	b.n	bda0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    bdb6:	6889      	ldr	r1, [r1, #8]
    bdb8:	b904      	cbnz	r4, bdbc <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    bdba:	b662      	cpsie	i
    bdbc:	0a0a      	lsrs	r2, r1, #8
    bdbe:	0609      	lsls	r1, r1, #24
    bdc0:	1808      	adds	r0, r1, r0
    bdc2:	bc10      	pop	{r4}
    bdc4:	eb42 010c 	adc.w	r1, r2, ip
    bdc8:	4770      	bx	lr
    bdca:	0000      	.short	0x0000
    bdcc:	4000b000 	.word	0x4000b000
    bdd0:	20000028 	.word	0x20000028

0000bdd4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    bdd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bdd8:	4a56      	ldr	r2, [pc, #344]	; (bf34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    bdda:	2501      	movs	r5, #1
    bddc:	2400      	movs	r4, #0
    bdde:	f892 c000 	ldrb.w	ip, [r2]
    bde2:	7852      	ldrb	r2, [r2, #1]
    bde4:	f44f 76a0 	mov.w	r6, #320	; 0x140
    bde8:	2807      	cmp	r0, #7
    bdea:	d27d      	bcs.n	bee8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    bdec:	e8df f000 	tbb	[pc, r0]
    bdf0:	04040404 	.word	0x04040404
    bdf4:	00606060 	.word	0x00606060
    bdf8:	4b4f      	ldr	r3, [pc, #316]	; (bf38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    bdfa:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    bdfe:	43ff      	mvns	r7, r7
    be00:	ea77 0708 	orns	r7, r7, r8
    be04:	bf04      	itt	eq
    be06:	785b      	ldrbeq	r3, [r3, #1]
    be08:	2b00      	cmpeq	r3, #0
    be0a:	d003      	beq.n	be14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    be0c:	f1bc 0f02 	cmp.w	ip, #2
    be10:	d005      	beq.n	be1e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    be12:	e026      	b.n	be62 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    be14:	f44f 6186 	mov.w	r1, #1072	; 0x430
    be18:	206c      	movs	r0, #108	; 0x6c
    be1a:	f000 fd69 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    be1e:	1f13      	subs	r3, r2, #4
    be20:	b2db      	uxtb	r3, r3
    be22:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    be26:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    be2a:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    be2e:	2300      	movs	r3, #0
    be30:	f1bc 0f01 	cmp.w	ip, #1
    be34:	d003      	beq.n	be3e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    be36:	f1bc 0f02 	cmp.w	ip, #2
    be3a:	d008      	beq.n	be4e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    be3c:	e00e      	b.n	be5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    be3e:	2a04      	cmp	r2, #4
    be40:	bf24      	itt	cs
    be42:	6837      	ldrcs	r7, [r6, #0]
    be44:	2f00      	cmpcs	r7, #0
    be46:	bf08      	it	eq
    be48:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    be4c:	e006      	b.n	be5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    be4e:	2a04      	cmp	r2, #4
    be50:	bf24      	itt	cs
    be52:	6837      	ldrcs	r7, [r6, #0]
    be54:	2f00      	cmpcs	r7, #0
    be56:	bf08      	it	eq
    be58:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    be5c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    be60:	d1e5      	bne.n	be2e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    be62:	4b36      	ldr	r3, [pc, #216]	; (bf3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    be64:	f100 0210 	add.w	r2, r0, #16
    be68:	fa05 f202 	lsl.w	r2, r5, r2
    be6c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    be70:	f04f 0c40 	mov.w	ip, #64	; 0x40
    be74:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    be78:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    be7c:	449c      	add	ip, r3
    be7e:	f8cc 5000 	str.w	r5, [ip]
    be82:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    be86:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    be8a:	eba1 0c0c 	sub.w	ip, r1, ip
    be8e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    be92:	f1bc 0f03 	cmp.w	ip, #3
    be96:	bf3e      	ittt	cc
    be98:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    be9c:	2000      	movcc	r0, #0
    be9e:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    bea2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bea6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    beaa:	2001      	movs	r0, #1
    beac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    beb0:	f1bc 0f00 	cmp.w	ip, #0
    beb4:	d006      	beq.n	bec4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    beb6:	4282      	cmp	r2, r0
    beb8:	d104      	bne.n	bec4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    beba:	f44f 618a 	mov.w	r1, #1104	; 0x450
    bebe:	206c      	movs	r0, #108	; 0x6c
    bec0:	f000 fd16 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bec4:	1f00      	subs	r0, r0, #4
    bec6:	b2c2      	uxtb	r2, r0
    bec8:	2a03      	cmp	r2, #3
    beca:	d304      	bcc.n	bed6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    becc:	f44f 7127 	mov.w	r1, #668	; 0x29c
    bed0:	206c      	movs	r0, #108	; 0x6c
    bed2:	f000 fd0d 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bed6:	4b1a      	ldr	r3, [pc, #104]	; (bf40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    bed8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    bedc:	4090      	lsls	r0, r2
    bede:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    bee2:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    bee6:	e000      	b.n	beea <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    bee8:	e01f      	b.n	bf2a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    beea:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    beee:	f843 400c 	str.w	r4, [r3, ip]
    bef2:	f8df c050 	ldr.w	ip, [pc, #80]	; bf44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    bef6:	f8dc c000 	ldr.w	ip, [ip]
    befa:	eba1 0c0c 	sub.w	ip, r1, ip
    befe:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    bf02:	f1bc 0f02 	cmp.w	ip, #2
    bf06:	d30d      	bcc.n	bf24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    bf08:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    bf0c:	d80a      	bhi.n	bf24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    bf0e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    bf12:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bf16:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    bf1a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    bf1e:	4628      	mov	r0, r5
    bf20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf24:	4620      	mov	r0, r4
    bf26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf2a:	f240 4154 	movw	r1, #1108	; 0x454
    bf2e:	206c      	movs	r0, #108	; 0x6c
    bf30:	f000 fcde 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bf34:	2000002a 	.word	0x2000002a
    bf38:	20000028 	.word	0x20000028
    bf3c:	40008000 	.word	0x40008000
    bf40:	4000b000 	.word	0x4000b000
    bf44:	4000b504 	.word	0x4000b504

0000bf48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    bf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf4a:	2101      	movs	r1, #1
    bf4c:	2600      	movs	r6, #0
    bf4e:	f44f 77a0 	mov.w	r7, #320	; 0x140
    bf52:	2807      	cmp	r0, #7
    bf54:	d24a      	bcs.n	bfec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    bf56:	e8df f000 	tbb	[pc, r0]
    bf5a:	0404      	.short	0x0404
    bf5c:	18180404 	.word	0x18180404
    bf60:	0018      	.short	0x0018
    bf62:	f100 0210 	add.w	r2, r0, #16
    bf66:	fa01 f202 	lsl.w	r2, r1, r2
    bf6a:	4923      	ldr	r1, [pc, #140]	; (bff8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    bf6c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    bf70:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    bf74:	2200      	movs	r2, #0
    bf76:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    bf7a:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    bf7e:	508e      	str	r6, [r1, r2]
    bf80:	491e      	ldr	r1, [pc, #120]	; (bffc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    bf82:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bf86:	9000      	str	r0, [sp, #0]
    bf88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf8a:	4d1d      	ldr	r5, [pc, #116]	; (c000 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    bf8c:	1f01      	subs	r1, r0, #4
    bf8e:	b2cc      	uxtb	r4, r1
    bf90:	7829      	ldrb	r1, [r5, #0]
    bf92:	b181      	cbz	r1, bfb6 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    bf94:	786a      	ldrb	r2, [r5, #1]
    bf96:	4282      	cmp	r2, r0
    bf98:	d10d      	bne.n	bfb6 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    bf9a:	4a1a      	ldr	r2, [pc, #104]	; (c004 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    bf9c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    bfa0:	6010      	str	r0, [r2, #0]
    bfa2:	2901      	cmp	r1, #1
    bfa4:	bf08      	it	eq
    bfa6:	f7ff fd0b 	bleq	b9c0 <MPSL_IRQ_TIMER0_Handler+0x100>
    bfaa:	702e      	strb	r6, [r5, #0]
    bfac:	4a16      	ldr	r2, [pc, #88]	; (c008 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    bfae:	f04f 30ff 	mov.w	r0, #4294967295
    bfb2:	e9c2 0004 	strd	r0, r0, [r2, #16]
    bfb6:	4915      	ldr	r1, [pc, #84]	; (c00c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    bfb8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    bfbc:	40a0      	lsls	r0, r4
    bfbe:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    bfc2:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    bfc6:	00a0      	lsls	r0, r4, #2
    bfc8:	4408      	add	r0, r1
    bfca:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bfce:	4a10      	ldr	r2, [pc, #64]	; (c010 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    bfd0:	6812      	ldr	r2, [r2, #0]
    bfd2:	1a80      	subs	r0, r0, r2
    bfd4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bfd8:	2802      	cmp	r0, #2
    bfda:	bf24      	itt	cs
    bfdc:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    bfe0:	500e      	strcs	r6, [r1, r0]
    bfe2:	480c      	ldr	r0, [pc, #48]	; (c014 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    bfe4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    bfe8:	9000      	str	r0, [sp, #0]
    bfea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bfec:	f240 41e2 	movw	r1, #1250	; 0x4e2
    bff0:	206c      	movs	r0, #108	; 0x6c
    bff2:	f000 fc7d 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bff6:	0000      	.short	0x0000
    bff8:	40008000 	.word	0x40008000
    bffc:	40008140 	.word	0x40008140
    c000:	2000002a 	.word	0x2000002a
    c004:	4001f508 	.word	0x4001f508
    c008:	20000028 	.word	0x20000028
    c00c:	4000b000 	.word	0x4000b000
    c010:	4000b504 	.word	0x4000b504
    c014:	4000b140 	.word	0x4000b140

0000c018 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    c018:	481a      	ldr	r0, [pc, #104]	; (c084 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    c01a:	7800      	ldrb	r0, [r0, #0]
    c01c:	2800      	cmp	r0, #0
    c01e:	bf07      	ittee	eq
    c020:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    c024:	2100      	moveq	r1, #0
    c026:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    c02a:	2101      	movne	r1, #1
    c02c:	4a16      	ldr	r2, [pc, #88]	; (c088 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    c02e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    c032:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    c036:	2000      	movs	r0, #0
    c038:	2902      	cmp	r1, #2
    c03a:	bf38      	it	cc
    c03c:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    c040:	d207      	bcs.n	c052 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    c042:	bf00      	nop
    c044:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    c048:	50d0      	str	r0, [r2, r3]
    c04a:	1c49      	adds	r1, r1, #1
    c04c:	b2c9      	uxtb	r1, r1
    c04e:	2902      	cmp	r1, #2
    c050:	d3f8      	bcc.n	c044 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    c052:	490e      	ldr	r1, [pc, #56]	; (c08c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    c054:	f04f 32ff 	mov.w	r2, #4294967295
    c058:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    c05c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c060:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    c064:	1d0a      	adds	r2, r1, #4
    c066:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c06a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    c06e:	1d12      	adds	r2, r2, #4
    c070:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c074:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    c078:	1d12      	adds	r2, r2, #4
    c07a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c07e:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    c082:	4770      	bx	lr
    c084:	2000002a 	.word	0x2000002a
    c088:	4000b000 	.word	0x4000b000
    c08c:	40008000 	.word	0x40008000

0000c090 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    c090:	b570      	push	{r4, r5, r6, lr}
    c092:	f3ef 8110 	mrs	r1, PRIMASK
    c096:	b672      	cpsid	i
    c098:	2400      	movs	r4, #0
    c09a:	4b0d      	ldr	r3, [pc, #52]	; (c0d0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    c09c:	4a0d      	ldr	r2, [pc, #52]	; (c0d4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    c09e:	bf00      	nop
    c0a0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    c0a4:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    c0a8:	f1bc 0f00 	cmp.w	ip, #0
    c0ac:	d005      	beq.n	c0ba <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    c0ae:	6890      	ldr	r0, [r2, #8]
    c0b0:	1c40      	adds	r0, r0, #1
    c0b2:	6090      	str	r0, [r2, #8]
    c0b4:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    c0b8:	e7f2      	b.n	c0a0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    c0ba:	6895      	ldr	r5, [r2, #8]
    c0bc:	b901      	cbnz	r1, c0c0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    c0be:	b662      	cpsie	i
    c0c0:	f004 fdfb 	bl	10cba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    c0c4:	4a04      	ldr	r2, [pc, #16]	; (c0d8 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    c0c6:	4621      	mov	r1, r4
    c0c8:	fbe5 0102 	umlal	r0, r1, r5, r2
    c0cc:	bd70      	pop	{r4, r5, r6, pc}
    c0ce:	0000      	.short	0x0000
    c0d0:	4000b000 	.word	0x4000b000
    c0d4:	20000028 	.word	0x20000028
    c0d8:	1e848000 	.word	0x1e848000

0000c0dc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    c0dc:	b510      	push	{r4, lr}
    c0de:	2807      	cmp	r0, #7
    c0e0:	d20d      	bcs.n	c0fe <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    c0e2:	e8df f000 	tbb	[pc, r0]
    c0e6:	0404      	.short	0x0404
    c0e8:	06060404 	.word	0x06060404
    c0ec:	0006      	.short	0x0006
    c0ee:	4906      	ldr	r1, [pc, #24]	; (c108 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    c0f0:	e002      	b.n	c0f8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    c0f2:	1f00      	subs	r0, r0, #4
    c0f4:	4905      	ldr	r1, [pc, #20]	; (c10c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    c0f6:	b2c0      	uxtb	r0, r0
    c0f8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    c0fc:	bd10      	pop	{r4, pc}
    c0fe:	f240 417b 	movw	r1, #1147	; 0x47b
    c102:	206c      	movs	r0, #108	; 0x6c
    c104:	f000 fbf4 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c108:	40008140 	.word	0x40008140
    c10c:	4000b140 	.word	0x4000b140

0000c110 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    c110:	b510      	push	{r4, lr}
    c112:	2807      	cmp	r0, #7
    c114:	d20d      	bcs.n	c132 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    c116:	e8df f000 	tbb	[pc, r0]
    c11a:	0404      	.short	0x0404
    c11c:	06060404 	.word	0x06060404
    c120:	0006      	.short	0x0006
    c122:	4906      	ldr	r1, [pc, #24]	; (c13c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    c124:	e002      	b.n	c12c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    c126:	1f00      	subs	r0, r0, #4
    c128:	4905      	ldr	r1, [pc, #20]	; (c140 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    c12a:	b2c0      	uxtb	r0, r0
    c12c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    c130:	bd10      	pop	{r4, pc}
    c132:	f240 417b 	movw	r1, #1147	; 0x47b
    c136:	206c      	movs	r0, #108	; 0x6c
    c138:	f000 fbda 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c13c:	40008140 	.word	0x40008140
    c140:	4000b140 	.word	0x4000b140

0000c144 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    c144:	b570      	push	{r4, r5, r6, lr}
    c146:	481b      	ldr	r0, [pc, #108]	; (c1b4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    c148:	2400      	movs	r4, #0
    c14a:	2104      	movs	r1, #4
    c14c:	7004      	strb	r4, [r0, #0]
    c14e:	1e80      	subs	r0, r0, #2
    c150:	7001      	strb	r1, [r0, #0]
    c152:	1f49      	subs	r1, r1, #5
    c154:	e9c0 1104 	strd	r1, r1, [r0, #16]
    c158:	6084      	str	r4, [r0, #8]
    c15a:	f7ff fc31 	bl	b9c0 <MPSL_IRQ_TIMER0_Handler+0x100>
    c15e:	2501      	movs	r5, #1
    c160:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    c164:	02eb      	lsls	r3, r5, #11
    c166:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    c16a:	f3bf 8f4f 	dsb	sy
    c16e:	f3bf 8f6f 	isb	sy
    c172:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    c176:	4a10      	ldr	r2, [pc, #64]	; (c1b8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    c178:	6055      	str	r5, [r2, #4]
    c17a:	6095      	str	r5, [r2, #8]
    c17c:	480f      	ldr	r0, [pc, #60]	; (c1bc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    c17e:	6801      	ldr	r1, [r0, #0]
    c180:	2900      	cmp	r1, #0
    c182:	d1fc      	bne.n	c17e <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    c184:	480e      	ldr	r0, [pc, #56]	; (c1c0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    c186:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    c18a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    c18e:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    c192:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    c196:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    c19a:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    c19e:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    c1a2:	6015      	str	r5, [r2, #0]
    c1a4:	f44f 7082 	mov.w	r0, #260	; 0x104
    c1a8:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    c1ac:	2002      	movs	r0, #2
    c1ae:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    c1b2:	bd70      	pop	{r4, r5, r6, pc}
    c1b4:	2000002a 	.word	0x2000002a
    c1b8:	4000b000 	.word	0x4000b000
    c1bc:	4000b504 	.word	0x4000b504
    c1c0:	00070002 	.word	0x00070002

0000c1c4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    c1c4:	4808      	ldr	r0, [pc, #32]	; (c1e8 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    c1c6:	f990 0000 	ldrsb.w	r0, [r0]
    c1ca:	2800      	cmp	r0, #0
    c1cc:	bfb8      	it	lt
    c1ce:	4770      	bxlt	lr
    c1d0:	f000 011f 	and.w	r1, r0, #31
    c1d4:	2201      	movs	r2, #1
    c1d6:	fa02 f101 	lsl.w	r1, r2, r1
    c1da:	0940      	lsrs	r0, r0, #5
    c1dc:	0080      	lsls	r0, r0, #2
    c1de:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c1e2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c1e6:	4770      	bx	lr
    c1e8:	2000037e 	.word	0x2000037e

0000c1ec <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    c1ec:	4803      	ldr	r0, [pc, #12]	; (c1fc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    c1ee:	7800      	ldrb	r0, [r0, #0]
    c1f0:	2803      	cmp	r0, #3
    c1f2:	bf0c      	ite	eq
    c1f4:	2001      	moveq	r0, #1
    c1f6:	2000      	movne	r0, #0
    c1f8:	4770      	bx	lr
    c1fa:	0000      	.short	0x0000
    c1fc:	20000350 	.word	0x20000350

0000c200 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    c200:	4801      	ldr	r0, [pc, #4]	; (c208 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    c202:	8840      	ldrh	r0, [r0, #2]
    c204:	4770      	bx	lr
    c206:	0000      	.short	0x0000
    c208:	20000350 	.word	0x20000350

0000c20c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    c20c:	4803      	ldr	r0, [pc, #12]	; (c21c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    c20e:	7800      	ldrb	r0, [r0, #0]
    c210:	2802      	cmp	r0, #2
    c212:	bf16      	itet	ne
    c214:	2803      	cmpne	r0, #3
    c216:	2001      	moveq	r0, #1
    c218:	2000      	movne	r0, #0
    c21a:	4770      	bx	lr
    c21c:	20000350 	.word	0x20000350

0000c220 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    c220:	4802      	ldr	r0, [pc, #8]	; (c22c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    c222:	2100      	movs	r1, #0
    c224:	7001      	strb	r1, [r0, #0]
    c226:	8041      	strh	r1, [r0, #2]
    c228:	4770      	bx	lr
    c22a:	0000      	.short	0x0000
    c22c:	20000350 	.word	0x20000350

0000c230 <MPSL_IRQ_CLOCK_Handler>:
    c230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c234:	4c16      	ldr	r4, [pc, #88]	; (c290 <MPSL_IRQ_CLOCK_Handler+0x60>)
    c236:	7a60      	ldrb	r0, [r4, #9]
    c238:	2800      	cmp	r0, #0
    c23a:	d027      	beq.n	c28c <MPSL_IRQ_CLOCK_Handler+0x5c>
    c23c:	f44f 7180 	mov.w	r1, #256	; 0x100
    c240:	058d      	lsls	r5, r1, #22
    c242:	4628      	mov	r0, r5
    c244:	f004 fd64 	bl	10d10 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c248:	4680      	mov	r8, r0
    c24a:	f44f 7182 	mov.w	r1, #260	; 0x104
    c24e:	4628      	mov	r0, r5
    c250:	f004 fd5e 	bl	10d10 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c254:	2600      	movs	r6, #0
    c256:	4607      	mov	r7, r0
    c258:	f1b8 0f00 	cmp.w	r8, #0
    c25c:	d009      	beq.n	c272 <MPSL_IRQ_CLOCK_Handler+0x42>
    c25e:	2001      	movs	r0, #1
    c260:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c264:	7920      	ldrb	r0, [r4, #4]
    c266:	b120      	cbz	r0, c272 <MPSL_IRQ_CLOCK_Handler+0x42>
    c268:	7126      	strb	r6, [r4, #4]
    c26a:	69e0      	ldr	r0, [r4, #28]
    c26c:	b108      	cbz	r0, c272 <MPSL_IRQ_CLOCK_Handler+0x42>
    c26e:	4780      	blx	r0
    c270:	61e6      	str	r6, [r4, #28]
    c272:	b137      	cbz	r7, c282 <MPSL_IRQ_CLOCK_Handler+0x52>
    c274:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    c278:	2002      	movs	r0, #2
    c27a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c27e:	f000 fa57 	bl	c730 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c282:	4640      	mov	r0, r8
    c284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c288:	f000 b858 	b.w	c33c <MPSL_IRQ_CLOCK_Handler+0x10c>
    c28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c290:	20000308 	.word	0x20000308
    c294:	b510      	push	{r4, lr}
    c296:	f004 fde5 	bl	10e64 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    c29a:	b930      	cbnz	r0, c2aa <MPSL_IRQ_CLOCK_Handler+0x7a>
    c29c:	f004 fe03 	bl	10ea6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c2a0:	b918      	cbnz	r0, c2aa <MPSL_IRQ_CLOCK_Handler+0x7a>
    c2a2:	f004 fe36 	bl	10f12 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c2a6:	2800      	cmp	r0, #0
    c2a8:	d002      	beq.n	c2b0 <MPSL_IRQ_CLOCK_Handler+0x80>
    c2aa:	4902      	ldr	r1, [pc, #8]	; (c2b4 <MPSL_IRQ_CLOCK_Handler+0x84>)
    c2ac:	2002      	movs	r0, #2
    c2ae:	6008      	str	r0, [r1, #0]
    c2b0:	bd10      	pop	{r4, pc}
    c2b2:	0000      	.short	0x0000
    c2b4:	40000c34 	.word	0x40000c34
    c2b8:	b570      	push	{r4, r5, r6, lr}
    c2ba:	f000 f99b 	bl	c5f4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c2be:	f000 fa9f 	bl	c800 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c2c2:	4c09      	ldr	r4, [pc, #36]	; (c2e8 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    c2c4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c2c8:	b130      	cbz	r0, c2d8 <MPSL_IRQ_CLOCK_Handler+0xa8>
    c2ca:	f7ff ffe3 	bl	c294 <MPSL_IRQ_CLOCK_Handler+0x64>
    c2ce:	2001      	movs	r0, #1
    c2d0:	6128      	str	r0, [r5, #16]
    c2d2:	2004      	movs	r0, #4
    c2d4:	72a0      	strb	r0, [r4, #10]
    c2d6:	e004      	b.n	c2e2 <MPSL_IRQ_CLOCK_Handler+0xb2>
    c2d8:	2003      	movs	r0, #3
    c2da:	72a0      	strb	r0, [r4, #10]
    c2dc:	2001      	movs	r0, #1
    c2de:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c2e2:	2000      	movs	r0, #0
    c2e4:	71e0      	strb	r0, [r4, #7]
    c2e6:	bd70      	pop	{r4, r5, r6, pc}
    c2e8:	20000308 	.word	0x20000308
    c2ec:	b570      	push	{r4, r5, r6, lr}
    c2ee:	4c12      	ldr	r4, [pc, #72]	; (c338 <MPSL_IRQ_CLOCK_Handler+0x108>)
    c2f0:	79a0      	ldrb	r0, [r4, #6]
    c2f2:	b1e0      	cbz	r0, c32e <MPSL_IRQ_CLOCK_Handler+0xfe>
    c2f4:	79e1      	ldrb	r1, [r4, #7]
    c2f6:	1e40      	subs	r0, r0, #1
    c2f8:	4281      	cmp	r1, r0
    c2fa:	da18      	bge.n	c32e <MPSL_IRQ_CLOCK_Handler+0xfe>
    c2fc:	f000 fa80 	bl	c800 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c300:	4605      	mov	r5, r0
    c302:	f000 fb69 	bl	c9d8 <mpsl_temperature_get>
    c306:	79a1      	ldrb	r1, [r4, #6]
    c308:	2901      	cmp	r1, #1
    c30a:	d902      	bls.n	c312 <MPSL_IRQ_CLOCK_Handler+0xe2>
    c30c:	79e1      	ldrb	r1, [r4, #7]
    c30e:	1c49      	adds	r1, r1, #1
    c310:	71e1      	strb	r1, [r4, #7]
    c312:	b10d      	cbz	r5, c318 <MPSL_IRQ_CLOCK_Handler+0xe8>
    c314:	6961      	ldr	r1, [r4, #20]
    c316:	e000      	b.n	c31a <MPSL_IRQ_CLOCK_Handler+0xea>
    c318:	6921      	ldr	r1, [r4, #16]
    c31a:	1a41      	subs	r1, r0, r1
    c31c:	2902      	cmp	r1, #2
    c31e:	da02      	bge.n	c326 <MPSL_IRQ_CLOCK_Handler+0xf6>
    c320:	f111 0f02 	cmn.w	r1, #2
    c324:	dc07      	bgt.n	c336 <MPSL_IRQ_CLOCK_Handler+0x106>
    c326:	b10d      	cbz	r5, c32c <MPSL_IRQ_CLOCK_Handler+0xfc>
    c328:	6160      	str	r0, [r4, #20]
    c32a:	e000      	b.n	c32e <MPSL_IRQ_CLOCK_Handler+0xfe>
    c32c:	6120      	str	r0, [r4, #16]
    c32e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c332:	f7ff bfc1 	b.w	c2b8 <MPSL_IRQ_CLOCK_Handler+0x88>
    c336:	bd70      	pop	{r4, r5, r6, pc}
    c338:	20000308 	.word	0x20000308
    c33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c340:	4606      	mov	r6, r0
    c342:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c346:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c34a:	4628      	mov	r0, r5
    c34c:	f004 fce0 	bl	10d10 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c350:	4680      	mov	r8, r0
    c352:	f44f 7188 	mov.w	r1, #272	; 0x110
    c356:	4628      	mov	r0, r5
    c358:	f004 fcda 	bl	10d10 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c35c:	4c27      	ldr	r4, [pc, #156]	; (c3fc <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    c35e:	4682      	mov	sl, r0
    c360:	7827      	ldrb	r7, [r4, #0]
    c362:	f104 0008 	add.w	r0, r4, #8
    c366:	f004 fd47 	bl	10df8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    c36a:	b110      	cbz	r0, c372 <MPSL_IRQ_CLOCK_Handler+0x142>
    c36c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    c370:	e016      	b.n	c3a0 <MPSL_IRQ_CLOCK_Handler+0x170>
    c372:	f04f 0901 	mov.w	r9, #1
    c376:	b146      	cbz	r6, c38a <MPSL_IRQ_CLOCK_Handler+0x15a>
    c378:	7aa0      	ldrb	r0, [r4, #10]
    c37a:	2803      	cmp	r0, #3
    c37c:	d105      	bne.n	c38a <MPSL_IRQ_CLOCK_Handler+0x15a>
    c37e:	2004      	movs	r0, #4
    c380:	72a0      	strb	r0, [r4, #10]
    c382:	f7ff ff87 	bl	c294 <MPSL_IRQ_CLOCK_Handler+0x64>
    c386:	f8c5 9010 	str.w	r9, [r5, #16]
    c38a:	2600      	movs	r6, #0
    c38c:	f1b8 0f00 	cmp.w	r8, #0
    c390:	d018      	beq.n	c3c4 <MPSL_IRQ_CLOCK_Handler+0x194>
    c392:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    c396:	7aa0      	ldrb	r0, [r4, #10]
    c398:	2804      	cmp	r0, #4
    c39a:	d004      	beq.n	c3a6 <MPSL_IRQ_CLOCK_Handler+0x176>
    c39c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    c3a0:	206d      	movs	r0, #109	; 0x6d
    c3a2:	f000 faa5 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c3a6:	f004 fd5d 	bl	10e64 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    c3aa:	b928      	cbnz	r0, c3b8 <MPSL_IRQ_CLOCK_Handler+0x188>
    c3ac:	f004 fd7b 	bl	10ea6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c3b0:	b910      	cbnz	r0, c3b8 <MPSL_IRQ_CLOCK_Handler+0x188>
    c3b2:	f004 fdae 	bl	10f12 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c3b6:	b108      	cbz	r0, c3bc <MPSL_IRQ_CLOCK_Handler+0x18c>
    c3b8:	4811      	ldr	r0, [pc, #68]	; (c400 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    c3ba:	6006      	str	r6, [r0, #0]
    c3bc:	2002      	movs	r0, #2
    c3be:	72a0      	strb	r0, [r4, #10]
    c3c0:	f000 f8fc 	bl	c5bc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c3c4:	f1ba 0f00 	cmp.w	sl, #0
    c3c8:	d008      	beq.n	c3dc <MPSL_IRQ_CLOCK_Handler+0x1ac>
    c3ca:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    c3ce:	7aa0      	ldrb	r0, [r4, #10]
    c3d0:	2802      	cmp	r0, #2
    c3d2:	d101      	bne.n	c3d8 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    c3d4:	f7ff ff8a 	bl	c2ec <MPSL_IRQ_CLOCK_Handler+0xbc>
    c3d8:	f8c5 9014 	str.w	r9, [r5, #20]
    c3dc:	b13f      	cbz	r7, c3ee <MPSL_IRQ_CLOCK_Handler+0x1be>
    c3de:	7026      	strb	r6, [r4, #0]
    c3e0:	7aa0      	ldrb	r0, [r4, #10]
    c3e2:	2802      	cmp	r0, #2
    c3e4:	d101      	bne.n	c3ea <MPSL_IRQ_CLOCK_Handler+0x1ba>
    c3e6:	f7ff ff67 	bl	c2b8 <MPSL_IRQ_CLOCK_Handler+0x88>
    c3ea:	f000 f8e7 	bl	c5bc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c3ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c3f2:	4802      	ldr	r0, [pc, #8]	; (c3fc <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    c3f4:	3008      	adds	r0, #8
    c3f6:	f004 bd16 	b.w	10e26 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    c3fa:	0000      	.short	0x0000
    c3fc:	20000308 	.word	0x20000308
    c400:	40000c34 	.word	0x40000c34
    c404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c408:	4c49      	ldr	r4, [pc, #292]	; (c530 <MPSL_IRQ_CLOCK_Handler+0x300>)
    c40a:	2700      	movs	r7, #0
    c40c:	4606      	mov	r6, r0
    c40e:	61a7      	str	r7, [r4, #24]
    c410:	7842      	ldrb	r2, [r0, #1]
    c412:	7881      	ldrb	r1, [r0, #2]
    c414:	7800      	ldrb	r0, [r0, #0]
    c416:	72e0      	strb	r0, [r4, #11]
    c418:	7162      	strb	r2, [r4, #5]
    c41a:	71a1      	strb	r1, [r4, #6]
    c41c:	71e7      	strb	r7, [r4, #7]
    c41e:	f04f 0801 	mov.w	r8, #1
    c422:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c426:	2805      	cmp	r0, #5
    c428:	d225      	bcs.n	c476 <MPSL_IRQ_CLOCK_Handler+0x246>
    c42a:	e8df f000 	tbb	[pc, r0]
    c42e:	0310      	.short	0x0310
    c430:	00222006 	.word	0x00222006
    c434:	f8c4 8018 	str.w	r8, [r4, #24]
    c438:	e009      	b.n	c44e <MPSL_IRQ_CLOCK_Handler+0x21e>
    c43a:	f000 f8db 	bl	c5f4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c43e:	2101      	movs	r1, #1
    c440:	4628      	mov	r0, r5
    c442:	f004 fc6a 	bl	10d1a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c446:	2800      	cmp	r0, #0
    c448:	d0f9      	beq.n	c43e <MPSL_IRQ_CLOCK_Handler+0x20e>
    c44a:	2002      	movs	r0, #2
    c44c:	61a0      	str	r0, [r4, #24]
    c44e:	f004 fc90 	bl	10d72 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    c452:	b1c0      	cbz	r0, c486 <MPSL_IRQ_CLOCK_Handler+0x256>
    c454:	f000 f9ee 	bl	c834 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    c458:	7e21      	ldrb	r1, [r4, #24]
    c45a:	f001 0103 	and.w	r1, r1, #3
    c45e:	4288      	cmp	r0, r1
    c460:	d111      	bne.n	c486 <MPSL_IRQ_CLOCK_Handler+0x256>
    c462:	79b0      	ldrb	r0, [r6, #6]
    c464:	b160      	cbz	r0, c480 <MPSL_IRQ_CLOCK_Handler+0x250>
    c466:	2002      	movs	r0, #2
    c468:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c46c:	e044      	b.n	c4f8 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c46e:	4831      	ldr	r0, [pc, #196]	; (c534 <MPSL_IRQ_CLOCK_Handler+0x304>)
    c470:	e7ec      	b.n	c44c <MPSL_IRQ_CLOCK_Handler+0x21c>
    c472:	4831      	ldr	r0, [pc, #196]	; (c538 <MPSL_IRQ_CLOCK_Handler+0x308>)
    c474:	e7ea      	b.n	c44c <MPSL_IRQ_CLOCK_Handler+0x21c>
    c476:	f240 313d 	movw	r1, #829	; 0x33d
    c47a:	206d      	movs	r0, #109	; 0x6d
    c47c:	f000 fa38 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c480:	f000 f9ac 	bl	c7dc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c484:	e038      	b.n	c4f8 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c486:	f8c5 800c 	str.w	r8, [r5, #12]
    c48a:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c48e:	69a0      	ldr	r0, [r4, #24]
    c490:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    c494:	f004 fcd2 	bl	10e3c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c498:	b940      	cbnz	r0, c4ac <MPSL_IRQ_CLOCK_Handler+0x27c>
    c49a:	f004 fcd9 	bl	10e50 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c49e:	b928      	cbnz	r0, c4ac <MPSL_IRQ_CLOCK_Handler+0x27c>
    c4a0:	f004 fced 	bl	10e7e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c4a4:	b910      	cbnz	r0, c4ac <MPSL_IRQ_CLOCK_Handler+0x27c>
    c4a6:	f004 fcfe 	bl	10ea6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c4aa:	b138      	cbz	r0, c4bc <MPSL_IRQ_CLOCK_Handler+0x28c>
    c4ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4b0:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    c4b4:	4921      	ldr	r1, [pc, #132]	; (c53c <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c4b6:	f3c0 3042 	ubfx	r0, r0, #13, #3
    c4ba:	6008      	str	r0, [r1, #0]
    c4bc:	f004 fcbe 	bl	10e3c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c4c0:	b940      	cbnz	r0, c4d4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c4c2:	f004 fcc5 	bl	10e50 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c4c6:	b928      	cbnz	r0, c4d4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c4c8:	f004 fcd9 	bl	10e7e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c4cc:	b910      	cbnz	r0, c4d4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c4ce:	f004 fcea 	bl	10ea6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c4d2:	b118      	cbz	r0, c4dc <MPSL_IRQ_CLOCK_Handler+0x2ac>
    c4d4:	4919      	ldr	r1, [pc, #100]	; (c53c <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c4d6:	3110      	adds	r1, #16
    c4d8:	f8c1 8000 	str.w	r8, [r1]
    c4dc:	f8c5 8008 	str.w	r8, [r5, #8]
    c4e0:	2002      	movs	r0, #2
    c4e2:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c4e6:	79b0      	ldrb	r0, [r6, #6]
    c4e8:	b930      	cbnz	r0, c4f8 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c4ea:	f000 f829 	bl	c540 <MPSL_IRQ_CLOCK_Handler+0x310>
    c4ee:	2002      	movs	r0, #2
    c4f0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c4f4:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c4f8:	79a0      	ldrb	r0, [r4, #6]
    c4fa:	b170      	cbz	r0, c51a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c4fc:	7830      	ldrb	r0, [r6, #0]
    c4fe:	b960      	cbnz	r0, c51a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c500:	f000 f97e 	bl	c800 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c504:	4606      	mov	r6, r0
    c506:	f000 fa67 	bl	c9d8 <mpsl_temperature_get>
    c50a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c50e:	b116      	cbz	r6, c516 <MPSL_IRQ_CLOCK_Handler+0x2e6>
    c510:	e9c4 1004 	strd	r1, r0, [r4, #16]
    c514:	e001      	b.n	c51a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c516:	e9c4 0104 	strd	r0, r1, [r4, #16]
    c51a:	2101      	movs	r1, #1
    c51c:	4628      	mov	r0, r5
    c51e:	f004 fbfc 	bl	10d1a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c522:	b108      	cbz	r0, c528 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    c524:	f000 f966 	bl	c7f4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c528:	72a7      	strb	r7, [r4, #10]
    c52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c52e:	0000      	.short	0x0000
    c530:	20000308 	.word	0x20000308
    c534:	00020001 	.word	0x00020001
    c538:	00030001 	.word	0x00030001
    c53c:	4000053c 	.word	0x4000053c
    c540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c544:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c548:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    c54c:	f010 0f02 	tst.w	r0, #2
    c550:	d011      	beq.n	c576 <MPSL_IRQ_CLOCK_Handler+0x346>
    c552:	4c16      	ldr	r4, [pc, #88]	; (c5ac <MPSL_IRQ_CLOCK_Handler+0x37c>)
    c554:	6820      	ldr	r0, [r4, #0]
    c556:	43c0      	mvns	r0, r0
    c558:	f340 1600 	sbfx	r6, r0, #4, #1
    c55c:	6820      	ldr	r0, [r4, #0]
    c55e:	f040 0010 	orr.w	r0, r0, #16
    c562:	6020      	str	r0, [r4, #0]
    c564:	f44f 7782 	mov.w	r7, #260	; 0x104
    c568:	4639      	mov	r1, r7
    c56a:	4628      	mov	r0, r5
    c56c:	1c76      	adds	r6, r6, #1
    c56e:	f004 fbcf 	bl	10d10 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c572:	b128      	cbz	r0, c580 <MPSL_IRQ_CLOCK_Handler+0x350>
    c574:	e00a      	b.n	c58c <MPSL_IRQ_CLOCK_Handler+0x35c>
    c576:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    c57a:	206d      	movs	r0, #109	; 0x6d
    c57c:	f000 f9b8 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c580:	f004 fcd3 	bl	10f2a <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    c584:	e002      	b.n	c58c <MPSL_IRQ_CLOCK_Handler+0x35c>
    c586:	bf00      	nop
    c588:	f004 fccd 	bl	10f26 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c58c:	4639      	mov	r1, r7
    c58e:	4628      	mov	r0, r5
    c590:	f004 fbbe 	bl	10d10 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c594:	2800      	cmp	r0, #0
    c596:	d0f7      	beq.n	c588 <MPSL_IRQ_CLOCK_Handler+0x358>
    c598:	f000 f920 	bl	c7dc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c59c:	2e00      	cmp	r6, #0
    c59e:	d103      	bne.n	c5a8 <MPSL_IRQ_CLOCK_Handler+0x378>
    c5a0:	6820      	ldr	r0, [r4, #0]
    c5a2:	f020 0010 	bic.w	r0, r0, #16
    c5a6:	6020      	str	r0, [r4, #0]
    c5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c5ac:	e000ed10 	.word	0xe000ed10

0000c5b0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c5b0:	4801      	ldr	r0, [pc, #4]	; (c5b8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c5b2:	89c0      	ldrh	r0, [r0, #14]
    c5b4:	4770      	bx	lr
    c5b6:	0000      	.short	0x0000
    c5b8:	20000308 	.word	0x20000308

0000c5bc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c5bc:	b510      	push	{r4, lr}
    c5be:	f3ef 8410 	mrs	r4, PRIMASK
    c5c2:	b672      	cpsid	i
    c5c4:	480a      	ldr	r0, [pc, #40]	; (c5f0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c5c6:	7841      	ldrb	r1, [r0, #1]
    c5c8:	b129      	cbz	r1, c5d6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c5ca:	7841      	ldrb	r1, [r0, #1]
    c5cc:	1e49      	subs	r1, r1, #1
    c5ce:	7041      	strb	r1, [r0, #1]
    c5d0:	7841      	ldrb	r1, [r0, #1]
    c5d2:	b129      	cbz	r1, c5e0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c5d4:	e008      	b.n	c5e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c5d6:	f240 1119 	movw	r1, #281	; 0x119
    c5da:	206d      	movs	r0, #109	; 0x6d
    c5dc:	f000 f988 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c5e0:	7880      	ldrb	r0, [r0, #2]
    c5e2:	b908      	cbnz	r0, c5e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c5e4:	f000 f91a 	bl	c81c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c5e8:	2c00      	cmp	r4, #0
    c5ea:	d100      	bne.n	c5ee <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c5ec:	b662      	cpsie	i
    c5ee:	bd10      	pop	{r4, pc}
    c5f0:	20000308 	.word	0x20000308

0000c5f4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c5f4:	b510      	push	{r4, lr}
    c5f6:	f3ef 8410 	mrs	r4, PRIMASK
    c5fa:	b672      	cpsid	i
    c5fc:	4806      	ldr	r0, [pc, #24]	; (c618 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c5fe:	7841      	ldrb	r1, [r0, #1]
    c600:	1c49      	adds	r1, r1, #1
    c602:	7041      	strb	r1, [r0, #1]
    c604:	7840      	ldrb	r0, [r0, #1]
    c606:	2801      	cmp	r0, #1
    c608:	d101      	bne.n	c60e <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c60a:	f004 fb9d 	bl	10d48 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c60e:	2c00      	cmp	r4, #0
    c610:	d100      	bne.n	c614 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c612:	b662      	cpsie	i
    c614:	bd10      	pop	{r4, pc}
    c616:	0000      	.short	0x0000
    c618:	20000308 	.word	0x20000308

0000c61c <mpsl_clock_hfclk_release>:
    c61c:	4805      	ldr	r0, [pc, #20]	; (c634 <mpsl_clock_hfclk_release+0x18>)
    c61e:	b510      	push	{r4, lr}
    c620:	78c1      	ldrb	r1, [r0, #3]
    c622:	b121      	cbz	r1, c62e <mpsl_clock_hfclk_release+0x12>
    c624:	2100      	movs	r1, #0
    c626:	7101      	strb	r1, [r0, #4]
    c628:	70c1      	strb	r1, [r0, #3]
    c62a:	f7ff ffc7 	bl	c5bc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c62e:	2000      	movs	r0, #0
    c630:	bd10      	pop	{r4, pc}
    c632:	0000      	.short	0x0000
    c634:	20000308 	.word	0x20000308

0000c638 <mpsl_clock_hfclk_request>:
    c638:	b570      	push	{r4, r5, r6, lr}
    c63a:	4c0c      	ldr	r4, [pc, #48]	; (c66c <mpsl_clock_hfclk_request+0x34>)
    c63c:	78e1      	ldrb	r1, [r4, #3]
    c63e:	b961      	cbnz	r1, c65a <mpsl_clock_hfclk_request+0x22>
    c640:	2501      	movs	r5, #1
    c642:	70e5      	strb	r5, [r4, #3]
    c644:	61e0      	str	r0, [r4, #28]
    c646:	f7ff ffd5 	bl	c5f4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c64a:	f000 f8d9 	bl	c800 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c64e:	b130      	cbz	r0, c65e <mpsl_clock_hfclk_request+0x26>
    c650:	69e0      	ldr	r0, [r4, #28]
    c652:	b110      	cbz	r0, c65a <mpsl_clock_hfclk_request+0x22>
    c654:	4780      	blx	r0
    c656:	2000      	movs	r0, #0
    c658:	61e0      	str	r0, [r4, #28]
    c65a:	2000      	movs	r0, #0
    c65c:	bd70      	pop	{r4, r5, r6, pc}
    c65e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c662:	7125      	strb	r5, [r4, #4]
    c664:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c668:	e7f7      	b.n	c65a <mpsl_clock_hfclk_request+0x22>
    c66a:	0000      	.short	0x0000
    c66c:	20000308 	.word	0x20000308

0000c670 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c674:	0005      	movs	r5, r0
    c676:	f06f 0015 	mvn.w	r0, #21
    c67a:	d03f      	beq.n	c6fc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c67c:	7829      	ldrb	r1, [r5, #0]
    c67e:	2904      	cmp	r1, #4
    c680:	d83c      	bhi.n	c6fc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c682:	2900      	cmp	r1, #0
    c684:	7869      	ldrb	r1, [r5, #1]
    c686:	d03b      	beq.n	c700 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c688:	2900      	cmp	r1, #0
    c68a:	d137      	bne.n	c6fc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c68c:	78a9      	ldrb	r1, [r5, #2]
    c68e:	2900      	cmp	r1, #0
    c690:	d134      	bne.n	c6fc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c692:	2000      	movs	r0, #0
    c694:	f004 fb2b 	bl	10cee <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c698:	2000      	movs	r0, #0
    c69a:	f004 fb1b 	bl	10cd4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c69e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c6a2:	f04f 31ff 	mov.w	r1, #4294967295
    c6a6:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c6aa:	2600      	movs	r6, #0
    c6ac:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c6b0:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c6b4:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c6b8:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c6bc:	4c14      	ldr	r4, [pc, #80]	; (c710 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c6be:	7066      	strb	r6, [r4, #1]
    c6c0:	88a8      	ldrh	r0, [r5, #4]
    c6c2:	81a0      	strh	r0, [r4, #12]
    c6c4:	f004 fb37 	bl	10d36 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c6c8:	2701      	movs	r7, #1
    c6ca:	b108      	cbz	r0, c6d0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c6cc:	70e7      	strb	r7, [r4, #3]
    c6ce:	7067      	strb	r7, [r4, #1]
    c6d0:	2101      	movs	r1, #1
    c6d2:	4640      	mov	r0, r8
    c6d4:	f004 fb21 	bl	10d1a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c6d8:	b108      	cbz	r0, c6de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c6da:	f000 f88b 	bl	c7f4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c6de:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c6e2:	81e0      	strh	r0, [r4, #14]
    c6e4:	4628      	mov	r0, r5
    c6e6:	f7ff fe8d 	bl	c404 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c6ea:	7267      	strb	r7, [r4, #9]
    c6ec:	2000      	movs	r0, #0
    c6ee:	f004 faf1 	bl	10cd4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c6f2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c6f6:	4630      	mov	r0, r6
    c6f8:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c700:	2900      	cmp	r1, #0
    c702:	d0fb      	beq.n	c6fc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c704:	2920      	cmp	r1, #32
    c706:	d8f9      	bhi.n	c6fc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c708:	78a9      	ldrb	r1, [r5, #2]
    c70a:	2921      	cmp	r1, #33	; 0x21
    c70c:	d9c1      	bls.n	c692 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c70e:	e7f5      	b.n	c6fc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c710:	20000308 	.word	0x20000308

0000c714 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c714:	4801      	ldr	r0, [pc, #4]	; (c71c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c716:	8980      	ldrh	r0, [r0, #12]
    c718:	4770      	bx	lr
    c71a:	0000      	.short	0x0000
    c71c:	20000308 	.word	0x20000308

0000c720 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c720:	4802      	ldr	r0, [pc, #8]	; (c72c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c722:	7a80      	ldrb	r0, [r0, #10]
    c724:	2800      	cmp	r0, #0
    c726:	d000      	beq.n	c72a <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c728:	2001      	movs	r0, #1
    c72a:	4770      	bx	lr
    c72c:	20000308 	.word	0x20000308

0000c730 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c732:	4d1f      	ldr	r5, [pc, #124]	; (c7b0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c734:	7ae8      	ldrb	r0, [r5, #11]
    c736:	2800      	cmp	r0, #0
    c738:	d10f      	bne.n	c75a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c73a:	7e28      	ldrb	r0, [r5, #24]
    c73c:	f000 0003 	and.w	r0, r0, #3
    c740:	f004 fb07 	bl	10d52 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c744:	2800      	cmp	r0, #0
    c746:	d008      	beq.n	c75a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c748:	f3ef 8110 	mrs	r1, PRIMASK
    c74c:	b672      	cpsid	i
    c74e:	f7ff ffe7 	bl	c720 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c752:	b118      	cbz	r0, c75c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c754:	2900      	cmp	r1, #0
    c756:	d100      	bne.n	c75a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c758:	b662      	cpsie	i
    c75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c75c:	2601      	movs	r6, #1
    c75e:	72ae      	strb	r6, [r5, #10]
    c760:	b901      	cbnz	r1, c764 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c762:	b662      	cpsie	i
    c764:	2018      	movs	r0, #24
    c766:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c76a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c76e:	61a6      	str	r6, [r4, #24]
    c770:	f44f 7020 	mov.w	r0, #640	; 0x280
    c774:	f8ad 0000 	strh.w	r0, [sp]
    c778:	f8bd 0000 	ldrh.w	r0, [sp]
    c77c:	1e41      	subs	r1, r0, #1
    c77e:	f8ad 1000 	strh.w	r1, [sp]
    c782:	d2f9      	bcs.n	c778 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c784:	2700      	movs	r7, #0
    c786:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c78a:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c78e:	4808      	ldr	r0, [pc, #32]	; (c7b0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c790:	3008      	adds	r0, #8
    c792:	f004 fb44 	bl	10e1e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c796:	702f      	strb	r7, [r5, #0]
    c798:	f7ff fd8e 	bl	c2b8 <MPSL_IRQ_CLOCK_Handler+0x88>
    c79c:	6166      	str	r6, [r4, #20]
    c79e:	7968      	ldrb	r0, [r5, #5]
    c7a0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c7a4:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c7a8:	2018      	movs	r0, #24
    c7aa:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c7b0:	20000308 	.word	0x20000308

0000c7b4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c7b4:	4602      	mov	r2, r0
    c7b6:	b510      	push	{r4, lr}
    c7b8:	2000      	movs	r0, #0
    c7ba:	2900      	cmp	r1, #0
    c7bc:	d00a      	beq.n	c7d4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c7be:	2a00      	cmp	r2, #0
    c7c0:	d008      	beq.n	c7d4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c7c2:	fba2 0101 	umull	r0, r1, r2, r1
    c7c6:	1e40      	subs	r0, r0, #1
    c7c8:	4a03      	ldr	r2, [pc, #12]	; (c7d8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c7ca:	f141 31ff 	adc.w	r1, r1, #4294967295
    c7ce:	f004 fbae 	bl	10f2e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c7d2:	1c40      	adds	r0, r0, #1
    c7d4:	bd10      	pop	{r4, pc}
    c7d6:	0000      	.short	0x0000
    c7d8:	000f4240 	.word	0x000f4240

0000c7dc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c7dc:	b510      	push	{r4, lr}
    c7de:	4c04      	ldr	r4, [pc, #16]	; (c7f0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c7e0:	7e20      	ldrb	r0, [r4, #24]
    c7e2:	f000 0003 	and.w	r0, r0, #3
    c7e6:	f004 fab4 	bl	10d52 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c7ea:	2800      	cmp	r0, #0
    c7ec:	d0f8      	beq.n	c7e0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c7ee:	bd10      	pop	{r4, pc}
    c7f0:	20000308 	.word	0x20000308

0000c7f4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c7f4:	4901      	ldr	r1, [pc, #4]	; (c7fc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c7f6:	2001      	movs	r0, #1
    c7f8:	7008      	strb	r0, [r1, #0]
    c7fa:	4770      	bx	lr
    c7fc:	2000037f 	.word	0x2000037f

0000c800 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c800:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c804:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c808:	b918      	cbnz	r0, c812 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c80a:	4803      	ldr	r0, [pc, #12]	; (c818 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c80c:	7800      	ldrb	r0, [r0, #0]
    c80e:	2800      	cmp	r0, #0
    c810:	d000      	beq.n	c814 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c812:	2001      	movs	r0, #1
    c814:	4770      	bx	lr
    c816:	0000      	.short	0x0000
    c818:	2000037f 	.word	0x2000037f

0000c81c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c81c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c820:	2101      	movs	r1, #1
    c822:	6041      	str	r1, [r0, #4]
    c824:	2100      	movs	r1, #0
    c826:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c82a:	4801      	ldr	r0, [pc, #4]	; (c830 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c82c:	7001      	strb	r1, [r0, #0]
    c82e:	4770      	bx	lr
    c830:	2000037f 	.word	0x2000037f

0000c834 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c834:	4802      	ldr	r0, [pc, #8]	; (c840 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c836:	6800      	ldr	r0, [r0, #0]
    c838:	f000 0003 	and.w	r0, r0, #3
    c83c:	4770      	bx	lr
    c83e:	0000      	.short	0x0000
    c840:	4000041c 	.word	0x4000041c
    c844:	b510      	push	{r4, lr}
    c846:	b131      	cbz	r1, c856 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c848:	2901      	cmp	r1, #1
    c84a:	d007      	beq.n	c85c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c84c:	f240 3102 	movw	r1, #770	; 0x302
    c850:	a005      	add	r0, pc, #20	; (adr r0, c868 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c852:	f000 f821 	bl	c898 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c856:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c85a:	e001      	b.n	c860 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c85c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c860:	f000 0001 	and.w	r0, r0, #1
    c864:	bd10      	pop	{r4, pc}
    c866:	0000      	.short	0x0000
    c868:	5f66726e 	.word	0x5f66726e
    c86c:	636f6c63 	.word	0x636f6c63
    c870:	00682e6b 	.word	0x00682e6b
    c874:	f3bf 8f4f 	dsb	sy
    c878:	4805      	ldr	r0, [pc, #20]	; (c890 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c87a:	6801      	ldr	r1, [r0, #0]
    c87c:	4a05      	ldr	r2, [pc, #20]	; (c894 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c87e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c882:	4311      	orrs	r1, r2
    c884:	6001      	str	r1, [r0, #0]
    c886:	f3bf 8f4f 	dsb	sy
    c88a:	bf00      	nop
    c88c:	e7fd      	b.n	c88a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c88e:	0000      	.short	0x0000
    c890:	e000ed0c 	.word	0xe000ed0c
    c894:	05fa0004 	.word	0x05fa0004

0000c898 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c898:	b672      	cpsid	i
    c89a:	4a03      	ldr	r2, [pc, #12]	; (c8a8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c89c:	6852      	ldr	r2, [r2, #4]
    c89e:	b102      	cbz	r2, c8a2 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c8a0:	4790      	blx	r2
    c8a2:	f7ff ffe7 	bl	c874 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c8a6:	0000      	.short	0x0000
    c8a8:	20000328 	.word	0x20000328
    c8ac:	4806      	ldr	r0, [pc, #24]	; (c8c8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c8ae:	b510      	push	{r4, lr}
    c8b0:	2100      	movs	r1, #0
    c8b2:	6001      	str	r1, [r0, #0]
    c8b4:	2101      	movs	r1, #1
    c8b6:	6001      	str	r1, [r0, #0]
    c8b8:	4608      	mov	r0, r1
    c8ba:	f004 fa71 	bl	10da0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c8be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c8c2:	2001      	movs	r0, #1
    c8c4:	f004 ba5f 	b.w	10d86 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c8c8:	40001ffc 	.word	0x40001ffc
    c8cc:	4807      	ldr	r0, [pc, #28]	; (c8ec <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c8ce:	b510      	push	{r4, lr}
    c8d0:	2101      	movs	r1, #1
    c8d2:	6041      	str	r1, [r0, #4]
    c8d4:	1e89      	subs	r1, r1, #2
    c8d6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c8da:	200c      	movs	r0, #12
    c8dc:	f004 fa60 	bl	10da0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c8e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c8e4:	200c      	movs	r0, #12
    c8e6:	f004 ba4e 	b.w	10d86 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c8ea:	0000      	.short	0x0000
    c8ec:	4000c000 	.word	0x4000c000

0000c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c8f0:	b50e      	push	{r1, r2, r3, lr}
    c8f2:	b672      	cpsid	i
    c8f4:	4a0f      	ldr	r2, [pc, #60]	; (c934 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c8f6:	6855      	ldr	r5, [r2, #4]
    c8f8:	b1d5      	cbz	r5, c930 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c8fa:	2200      	movs	r2, #0
    c8fc:	4603      	mov	r3, r0
    c8fe:	466e      	mov	r6, sp
    c900:	240a      	movs	r4, #10
    c902:	e003      	b.n	c90c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c904:	fbb0 f0f4 	udiv	r0, r0, r4
    c908:	1c52      	adds	r2, r2, #1
    c90a:	b2d2      	uxtb	r2, r2
    c90c:	2800      	cmp	r0, #0
    c90e:	d1f9      	bne.n	c904 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c910:	54b0      	strb	r0, [r6, r2]
    c912:	e009      	b.n	c928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c914:	fbb3 f0f4 	udiv	r0, r3, r4
    c918:	fb04 3010 	mls	r0, r4, r0, r3
    c91c:	fbb3 f3f4 	udiv	r3, r3, r4
    c920:	1e52      	subs	r2, r2, #1
    c922:	b2d2      	uxtb	r2, r2
    c924:	3030      	adds	r0, #48	; 0x30
    c926:	54b0      	strb	r0, [r6, r2]
    c928:	2a00      	cmp	r2, #0
    c92a:	d1f3      	bne.n	c914 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c92c:	4630      	mov	r0, r6
    c92e:	47a8      	blx	r5
    c930:	f7ff ffa0 	bl	c874 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c934:	20000328 	.word	0x20000328

0000c938 <mpsl_init>:
    c938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c93c:	4c18      	ldr	r4, [pc, #96]	; (c9a0 <mpsl_init+0x68>)
    c93e:	4606      	mov	r6, r0
    c940:	4617      	mov	r7, r2
    c942:	7860      	ldrb	r0, [r4, #1]
    c944:	460d      	mov	r5, r1
    c946:	b118      	cbz	r0, c950 <mpsl_init+0x18>
    c948:	f04f 30ff 	mov.w	r0, #4294967295
    c94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c950:	f7fc f9e8 	bl	8d24 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c954:	b906      	cbnz	r6, c958 <mpsl_init+0x20>
    c956:	4e13      	ldr	r6, [pc, #76]	; (c9a4 <mpsl_init+0x6c>)
    c958:	6067      	str	r7, [r4, #4]
    c95a:	7025      	strb	r5, [r4, #0]
    c95c:	f7ff ffa6 	bl	c8ac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c960:	f7ff ffb4 	bl	c8cc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c964:	4630      	mov	r0, r6
    c966:	f7ff fe83 	bl	c670 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c96a:	0006      	movs	r6, r0
    c96c:	d1ee      	bne.n	c94c <mpsl_init+0x14>
    c96e:	f7fe fe4f 	bl	b610 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c972:	f7ff fedd 	bl	c730 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c976:	f004 f901 	bl	10b7c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c97a:	4628      	mov	r0, r5
    c97c:	f004 fa03 	bl	10d86 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c980:	2001      	movs	r0, #1
    c982:	2d00      	cmp	r5, #0
    c984:	db09      	blt.n	c99a <mpsl_init+0x62>
    c986:	f005 011f 	and.w	r1, r5, #31
    c98a:	fa00 f101 	lsl.w	r1, r0, r1
    c98e:	096a      	lsrs	r2, r5, #5
    c990:	0092      	lsls	r2, r2, #2
    c992:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c996:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c99a:	7060      	strb	r0, [r4, #1]
    c99c:	4630      	mov	r0, r6
    c99e:	e7d5      	b.n	c94c <mpsl_init+0x14>
    c9a0:	20000328 	.word	0x20000328
    c9a4:	00010dc2 	.word	0x00010dc2

0000c9a8 <mpsl_is_initialized>:
    c9a8:	4801      	ldr	r0, [pc, #4]	; (c9b0 <mpsl_is_initialized+0x8>)
    c9aa:	7840      	ldrb	r0, [r0, #1]
    c9ac:	4770      	bx	lr
    c9ae:	0000      	.short	0x0000
    c9b0:	20000328 	.word	0x20000328

0000c9b4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c9b4:	4807      	ldr	r0, [pc, #28]	; (c9d4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c9b6:	f990 0000 	ldrsb.w	r0, [r0]
    c9ba:	2800      	cmp	r0, #0
    c9bc:	db09      	blt.n	c9d2 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c9be:	f000 021f 	and.w	r2, r0, #31
    c9c2:	2101      	movs	r1, #1
    c9c4:	4091      	lsls	r1, r2
    c9c6:	0940      	lsrs	r0, r0, #5
    c9c8:	0080      	lsls	r0, r0, #2
    c9ca:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c9ce:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c9d2:	4770      	bx	lr
    c9d4:	20000328 	.word	0x20000328

0000c9d8 <mpsl_temperature_get>:
    c9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9dc:	2501      	movs	r5, #1
    c9de:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c9e2:	0329      	lsls	r1, r5, #12
    c9e4:	f04f 0800 	mov.w	r8, #0
    c9e8:	4640      	mov	r0, r8
    c9ea:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c9ee:	f3bf 8f4f 	dsb	sy
    c9f2:	f3bf 8f6f 	isb	sy
    c9f6:	4c16      	ldr	r4, [pc, #88]	; (ca50 <mpsl_temperature_get+0x78>)
    c9f8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c9fc:	200c      	movs	r0, #12
    c9fe:	f004 f9ee 	bl	10dde <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    ca02:	4e14      	ldr	r6, [pc, #80]	; (ca54 <mpsl_temperature_get+0x7c>)
    ca04:	6830      	ldr	r0, [r6, #0]
    ca06:	43c0      	mvns	r0, r0
    ca08:	f340 1700 	sbfx	r7, r0, #4, #1
    ca0c:	6830      	ldr	r0, [r6, #0]
    ca0e:	f040 0010 	orr.w	r0, r0, #16
    ca12:	6030      	str	r0, [r6, #0]
    ca14:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    ca18:	6025      	str	r5, [r4, #0]
    ca1a:	1c7f      	adds	r7, r7, #1
    ca1c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    ca20:	b108      	cbz	r0, ca26 <mpsl_temperature_get+0x4e>
    ca22:	b11f      	cbz	r7, ca2c <mpsl_temperature_get+0x54>
    ca24:	e006      	b.n	ca34 <mpsl_temperature_get+0x5c>
    ca26:	f004 fa7e 	bl	10f26 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ca2a:	e7f7      	b.n	ca1c <mpsl_temperature_get+0x44>
    ca2c:	6830      	ldr	r0, [r6, #0]
    ca2e:	f020 0010 	bic.w	r0, r0, #16
    ca32:	6030      	str	r0, [r6, #0]
    ca34:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    ca38:	6065      	str	r5, [r4, #4]
    ca3a:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    ca3e:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    ca42:	200c      	movs	r0, #12
    ca44:	f004 f9cb 	bl	10dde <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    ca48:	4630      	mov	r0, r6
    ca4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca4e:	0000      	.short	0x0000
    ca50:	4000c000 	.word	0x4000c000
    ca54:	e000ed10 	.word	0xe000ed10

0000ca58 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    ca58:	b510      	push	{r4, lr}
    ca5a:	4602      	mov	r2, r0
    ca5c:	2005      	movs	r0, #5
    ca5e:	490c      	ldr	r1, [pc, #48]	; (ca90 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    ca60:	e004      	b.n	ca6c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    ca62:	bf00      	nop
    ca64:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    ca68:	791b      	ldrb	r3, [r3, #4]
    ca6a:	b133      	cbz	r3, ca7a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    ca6c:	1e40      	subs	r0, r0, #1
    ca6e:	b2c0      	uxtb	r0, r0
    ca70:	d2f8      	bcs.n	ca64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    ca72:	2148      	movs	r1, #72	; 0x48
    ca74:	2069      	movs	r0, #105	; 0x69
    ca76:	f7ff ff3b 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ca7a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    ca7e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    ca82:	2200      	movs	r2, #0
    ca84:	714a      	strb	r2, [r1, #5]
    ca86:	718a      	strb	r2, [r1, #6]
    ca88:	2201      	movs	r2, #1
    ca8a:	710a      	strb	r2, [r1, #4]
    ca8c:	bd10      	pop	{r4, pc}
    ca8e:	0000      	.short	0x0000
    ca90:	200013ec 	.word	0x200013ec

0000ca94 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    ca94:	b510      	push	{r4, lr}
    ca96:	2805      	cmp	r0, #5
    ca98:	d301      	bcc.n	ca9e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    ca9a:	2158      	movs	r1, #88	; 0x58
    ca9c:	e006      	b.n	caac <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    ca9e:	490a      	ldr	r1, [pc, #40]	; (cac8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    caa0:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    caa4:	7901      	ldrb	r1, [r0, #4]
    caa6:	2901      	cmp	r1, #1
    caa8:	d003      	beq.n	cab2 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    caaa:	2159      	movs	r1, #89	; 0x59
    caac:	2069      	movs	r0, #105	; 0x69
    caae:	f7ff ff1f 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cab2:	7941      	ldrb	r1, [r0, #5]
    cab4:	7982      	ldrb	r2, [r0, #6]
    cab6:	1c49      	adds	r1, r1, #1
    cab8:	b2c9      	uxtb	r1, r1
    caba:	428a      	cmp	r2, r1
    cabc:	d000      	beq.n	cac0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    cabe:	7141      	strb	r1, [r0, #5]
    cac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cac4:	f7ff bf76 	b.w	c9b4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    cac8:	200013ec 	.word	0x200013ec

0000cacc <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    cacc:	b510      	push	{r4, lr}
    cace:	2805      	cmp	r0, #5
    cad0:	d303      	bcc.n	cada <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    cad2:	214f      	movs	r1, #79	; 0x4f
    cad4:	2069      	movs	r0, #105	; 0x69
    cad6:	f7ff ff0b 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cada:	4a03      	ldr	r2, [pc, #12]	; (cae8 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    cadc:	2100      	movs	r1, #0
    cade:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    cae2:	7101      	strb	r1, [r0, #4]
    cae4:	bd10      	pop	{r4, pc}
    cae6:	0000      	.short	0x0000
    cae8:	200013ec 	.word	0x200013ec

0000caec <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    caec:	b570      	push	{r4, r5, r6, lr}
    caee:	2505      	movs	r5, #5
    caf0:	4e0e      	ldr	r6, [pc, #56]	; (cb2c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    caf2:	4c0f      	ldr	r4, [pc, #60]	; (cb30 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    caf4:	e016      	b.n	cb24 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    caf6:	7821      	ldrb	r1, [r4, #0]
    caf8:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    cafc:	7902      	ldrb	r2, [r0, #4]
    cafe:	2a01      	cmp	r2, #1
    cb00:	d108      	bne.n	cb14 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    cb02:	7942      	ldrb	r2, [r0, #5]
    cb04:	7983      	ldrb	r3, [r0, #6]
    cb06:	429a      	cmp	r2, r3
    cb08:	d004      	beq.n	cb14 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    cb0a:	7942      	ldrb	r2, [r0, #5]
    cb0c:	7182      	strb	r2, [r0, #6]
    cb0e:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    cb12:	4780      	blx	r0
    cb14:	7820      	ldrb	r0, [r4, #0]
    cb16:	1c40      	adds	r0, r0, #1
    cb18:	b2c0      	uxtb	r0, r0
    cb1a:	7020      	strb	r0, [r4, #0]
    cb1c:	2805      	cmp	r0, #5
    cb1e:	d301      	bcc.n	cb24 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    cb20:	2000      	movs	r0, #0
    cb22:	7020      	strb	r0, [r4, #0]
    cb24:	1e6d      	subs	r5, r5, #1
    cb26:	b2ed      	uxtb	r5, r5
    cb28:	d2e5      	bcs.n	caf6 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    cb2a:	bd70      	pop	{r4, r5, r6, pc}
    cb2c:	200013ec 	.word	0x200013ec
    cb30:	20000380 	.word	0x20000380

0000cb34 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    cb34:	b500      	push	{lr}
    cb36:	f004 f981 	bl	10e3c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    cb3a:	b940      	cbnz	r0, cb4e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    cb3c:	f004 f988 	bl	10e50 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    cb40:	b928      	cbnz	r0, cb4e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    cb42:	f004 f99c 	bl	10e7e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    cb46:	b910      	cbnz	r0, cb4e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    cb48:	f004 f9ad 	bl	10ea6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    cb4c:	b108      	cbz	r0, cb52 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    cb4e:	4802      	ldr	r0, [pc, #8]	; (cb58 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    cb50:	bd00      	pop	{pc}
    cb52:	4802      	ldr	r0, [pc, #8]	; (cb5c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    cb54:	bd00      	pop	{pc}
    cb56:	0000      	.short	0x0000
    cb58:	4000050c 	.word	0x4000050c
    cb5c:	4001e700 	.word	0x4001e700
    cb60:	b510      	push	{r4, lr}
    cb62:	f004 f9a0 	bl	10ea6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    cb66:	b330      	cbz	r0, cbb6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    cb68:	f3ef 8010 	mrs	r0, PRIMASK
    cb6c:	b1c8      	cbz	r0, cba2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    cb6e:	2100      	movs	r1, #0
    cb70:	b672      	cpsid	i
    cb72:	4812      	ldr	r0, [pc, #72]	; (cbbc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    cb74:	6802      	ldr	r2, [r0, #0]
    cb76:	6803      	ldr	r3, [r0, #0]
    cb78:	f3c2 1200 	ubfx	r2, r2, #4, #1
    cb7c:	f043 0310 	orr.w	r3, r3, #16
    cb80:	6003      	str	r3, [r0, #0]
    cb82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    cb86:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    cb8a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    cb8e:	431c      	orrs	r4, r3
    cb90:	d000      	beq.n	cb94 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    cb92:	bf40      	sev
    cb94:	bf20      	wfe
    cb96:	bf00      	nop
    cb98:	bf00      	nop
    cb9a:	bf00      	nop
    cb9c:	bf00      	nop
    cb9e:	b112      	cbz	r2, cba6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    cba0:	e005      	b.n	cbae <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    cba2:	2101      	movs	r1, #1
    cba4:	e7e4      	b.n	cb70 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    cba6:	6802      	ldr	r2, [r0, #0]
    cba8:	f022 0210 	bic.w	r2, r2, #16
    cbac:	6002      	str	r2, [r0, #0]
    cbae:	2900      	cmp	r1, #0
    cbb0:	d000      	beq.n	cbb4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    cbb2:	b662      	cpsie	i
    cbb4:	bd10      	pop	{r4, pc}
    cbb6:	bf20      	wfe
    cbb8:	bd10      	pop	{r4, pc}
    cbba:	0000      	.short	0x0000
    cbbc:	e000ed10 	.word	0xe000ed10

0000cbc0 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    cbc0:	4901      	ldr	r1, [pc, #4]	; (cbc8 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    cbc2:	2001      	movs	r0, #1
    cbc4:	7088      	strb	r0, [r1, #2]
    cbc6:	4770      	bx	lr
    cbc8:	20000330 	.word	0x20000330

0000cbcc <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    cbcc:	000111cb 00011203 000111ed 000111db     ................
    cbdc:	000111e7 000111d5 000111c9 000111c7     ................
    cbec:	000111ff 000111f3 000111e1 000111cf     ................
    cbfc:	000111c1 000111b9 000111bd 000111b3     ................

0000cc0c <mpsl_fem_disable>:
    cc0c:	4801      	ldr	r0, [pc, #4]	; (cc14 <mpsl_fem_disable+0x8>)
    cc0e:	6800      	ldr	r0, [r0, #0]
    cc10:	6800      	ldr	r0, [r0, #0]
    cc12:	4700      	bx	r0
    cc14:	20000344 	.word	0x20000344

0000cc18 <mpsl_fem_lna_configuration_clear>:
    cc18:	4801      	ldr	r0, [pc, #4]	; (cc20 <mpsl_fem_lna_configuration_clear+0x8>)
    cc1a:	6800      	ldr	r0, [r0, #0]
    cc1c:	6940      	ldr	r0, [r0, #20]
    cc1e:	4700      	bx	r0
    cc20:	20000344 	.word	0x20000344

0000cc24 <mpsl_fem_lna_configuration_set>:
    cc24:	4a01      	ldr	r2, [pc, #4]	; (cc2c <mpsl_fem_lna_configuration_set+0x8>)
    cc26:	6812      	ldr	r2, [r2, #0]
    cc28:	68d2      	ldr	r2, [r2, #12]
    cc2a:	4710      	bx	r2
    cc2c:	20000344 	.word	0x20000344

0000cc30 <mpsl_fem_lna_is_configured>:
    cc30:	4901      	ldr	r1, [pc, #4]	; (cc38 <mpsl_fem_lna_is_configured+0x8>)
    cc32:	6809      	ldr	r1, [r1, #0]
    cc34:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    cc36:	4708      	bx	r1
    cc38:	20000344 	.word	0x20000344

0000cc3c <mpsl_fem_pa_configuration_clear>:
    cc3c:	4801      	ldr	r0, [pc, #4]	; (cc44 <mpsl_fem_pa_configuration_clear+0x8>)
    cc3e:	6800      	ldr	r0, [r0, #0]
    cc40:	6900      	ldr	r0, [r0, #16]
    cc42:	4700      	bx	r0
    cc44:	20000344 	.word	0x20000344

0000cc48 <mpsl_fem_pa_configuration_set>:
    cc48:	4a01      	ldr	r2, [pc, #4]	; (cc50 <mpsl_fem_pa_configuration_set+0x8>)
    cc4a:	6812      	ldr	r2, [r2, #0]
    cc4c:	6892      	ldr	r2, [r2, #8]
    cc4e:	4710      	bx	r2
    cc50:	20000344 	.word	0x20000344

0000cc54 <mpsl_fem_pa_gain_set>:
    cc54:	4901      	ldr	r1, [pc, #4]	; (cc5c <mpsl_fem_pa_gain_set+0x8>)
    cc56:	6809      	ldr	r1, [r1, #0]
    cc58:	6a49      	ldr	r1, [r1, #36]	; 0x24
    cc5a:	4708      	bx	r1
    cc5c:	20000344 	.word	0x20000344

0000cc60 <mpsl_fem_pa_is_configured>:
    cc60:	4901      	ldr	r1, [pc, #4]	; (cc68 <mpsl_fem_pa_is_configured+0x8>)
    cc62:	6809      	ldr	r1, [r1, #0]
    cc64:	6a89      	ldr	r1, [r1, #40]	; 0x28
    cc66:	4708      	bx	r1
    cc68:	20000344 	.word	0x20000344

0000cc6c <mpsl_fem_tx_power_split>:
    cc6c:	b430      	push	{r4, r5}
    cc6e:	4c03      	ldr	r4, [pc, #12]	; (cc7c <mpsl_fem_tx_power_split+0x10>)
    cc70:	6824      	ldr	r4, [r4, #0]
    cc72:	6864      	ldr	r4, [r4, #4]
    cc74:	46a4      	mov	ip, r4
    cc76:	bc30      	pop	{r4, r5}
    cc78:	4760      	bx	ip
    cc7a:	0000      	.short	0x0000
    cc7c:	20000344 	.word	0x20000344

0000cc80 <mpsl_fem_device_config_254_apply_get>:
    cc80:	4801      	ldr	r0, [pc, #4]	; (cc88 <mpsl_fem_device_config_254_apply_get+0x8>)
    cc82:	7800      	ldrb	r0, [r0, #0]
    cc84:	4770      	bx	lr
    cc86:	0000      	.short	0x0000
    cc88:	20000381 	.word	0x20000381

0000cc8c <__udivmoddi4>:
    cc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cc90:	4686      	mov	lr, r0
    cc92:	468c      	mov	ip, r1
    cc94:	4608      	mov	r0, r1
    cc96:	9e08      	ldr	r6, [sp, #32]
    cc98:	4615      	mov	r5, r2
    cc9a:	4674      	mov	r4, lr
    cc9c:	4619      	mov	r1, r3
    cc9e:	2b00      	cmp	r3, #0
    cca0:	f040 80c2 	bne.w	ce28 <__udivmoddi4+0x19c>
    cca4:	4285      	cmp	r5, r0
    cca6:	fab2 f282 	clz	r2, r2
    ccaa:	d945      	bls.n	cd38 <__udivmoddi4+0xac>
    ccac:	b14a      	cbz	r2, ccc2 <__udivmoddi4+0x36>
    ccae:	f1c2 0320 	rsb	r3, r2, #32
    ccb2:	fa00 fc02 	lsl.w	ip, r0, r2
    ccb6:	fa2e f303 	lsr.w	r3, lr, r3
    ccba:	4095      	lsls	r5, r2
    ccbc:	ea43 0c0c 	orr.w	ip, r3, ip
    ccc0:	4094      	lsls	r4, r2
    ccc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    ccc6:	b2a8      	uxth	r0, r5
    ccc8:	fbbc f8fe 	udiv	r8, ip, lr
    cccc:	0c23      	lsrs	r3, r4, #16
    ccce:	fb0e cc18 	mls	ip, lr, r8, ip
    ccd2:	fb08 f900 	mul.w	r9, r8, r0
    ccd6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    ccda:	4599      	cmp	r9, r3
    ccdc:	d928      	bls.n	cd30 <__udivmoddi4+0xa4>
    ccde:	18eb      	adds	r3, r5, r3
    cce0:	f108 37ff 	add.w	r7, r8, #4294967295
    cce4:	d204      	bcs.n	ccf0 <__udivmoddi4+0x64>
    cce6:	4599      	cmp	r9, r3
    cce8:	d902      	bls.n	ccf0 <__udivmoddi4+0x64>
    ccea:	f1a8 0702 	sub.w	r7, r8, #2
    ccee:	442b      	add	r3, r5
    ccf0:	eba3 0309 	sub.w	r3, r3, r9
    ccf4:	b2a4      	uxth	r4, r4
    ccf6:	fbb3 fcfe 	udiv	ip, r3, lr
    ccfa:	fb0e 331c 	mls	r3, lr, ip, r3
    ccfe:	fb0c f000 	mul.w	r0, ip, r0
    cd02:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cd06:	42a0      	cmp	r0, r4
    cd08:	d914      	bls.n	cd34 <__udivmoddi4+0xa8>
    cd0a:	192c      	adds	r4, r5, r4
    cd0c:	f10c 33ff 	add.w	r3, ip, #4294967295
    cd10:	d204      	bcs.n	cd1c <__udivmoddi4+0x90>
    cd12:	42a0      	cmp	r0, r4
    cd14:	d902      	bls.n	cd1c <__udivmoddi4+0x90>
    cd16:	f1ac 0302 	sub.w	r3, ip, #2
    cd1a:	442c      	add	r4, r5
    cd1c:	1a24      	subs	r4, r4, r0
    cd1e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    cd22:	b11e      	cbz	r6, cd2c <__udivmoddi4+0xa0>
    cd24:	40d4      	lsrs	r4, r2
    cd26:	2300      	movs	r3, #0
    cd28:	6034      	str	r4, [r6, #0]
    cd2a:	6073      	str	r3, [r6, #4]
    cd2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd30:	4647      	mov	r7, r8
    cd32:	e7dd      	b.n	ccf0 <__udivmoddi4+0x64>
    cd34:	4663      	mov	r3, ip
    cd36:	e7f1      	b.n	cd1c <__udivmoddi4+0x90>
    cd38:	bb92      	cbnz	r2, cda0 <__udivmoddi4+0x114>
    cd3a:	1b43      	subs	r3, r0, r5
    cd3c:	2101      	movs	r1, #1
    cd3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cd42:	b2af      	uxth	r7, r5
    cd44:	fbb3 fcfe 	udiv	ip, r3, lr
    cd48:	0c20      	lsrs	r0, r4, #16
    cd4a:	fb0e 331c 	mls	r3, lr, ip, r3
    cd4e:	fb0c f807 	mul.w	r8, ip, r7
    cd52:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    cd56:	4598      	cmp	r8, r3
    cd58:	d962      	bls.n	ce20 <__udivmoddi4+0x194>
    cd5a:	18eb      	adds	r3, r5, r3
    cd5c:	f10c 30ff 	add.w	r0, ip, #4294967295
    cd60:	d204      	bcs.n	cd6c <__udivmoddi4+0xe0>
    cd62:	4598      	cmp	r8, r3
    cd64:	d902      	bls.n	cd6c <__udivmoddi4+0xe0>
    cd66:	f1ac 0002 	sub.w	r0, ip, #2
    cd6a:	442b      	add	r3, r5
    cd6c:	eba3 0308 	sub.w	r3, r3, r8
    cd70:	b2a4      	uxth	r4, r4
    cd72:	fbb3 fcfe 	udiv	ip, r3, lr
    cd76:	fb0e 331c 	mls	r3, lr, ip, r3
    cd7a:	fb0c f707 	mul.w	r7, ip, r7
    cd7e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cd82:	42a7      	cmp	r7, r4
    cd84:	d94e      	bls.n	ce24 <__udivmoddi4+0x198>
    cd86:	192c      	adds	r4, r5, r4
    cd88:	f10c 33ff 	add.w	r3, ip, #4294967295
    cd8c:	d204      	bcs.n	cd98 <__udivmoddi4+0x10c>
    cd8e:	42a7      	cmp	r7, r4
    cd90:	d902      	bls.n	cd98 <__udivmoddi4+0x10c>
    cd92:	f1ac 0302 	sub.w	r3, ip, #2
    cd96:	442c      	add	r4, r5
    cd98:	1be4      	subs	r4, r4, r7
    cd9a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cd9e:	e7c0      	b.n	cd22 <__udivmoddi4+0x96>
    cda0:	f1c2 0320 	rsb	r3, r2, #32
    cda4:	fa20 f103 	lsr.w	r1, r0, r3
    cda8:	4095      	lsls	r5, r2
    cdaa:	4090      	lsls	r0, r2
    cdac:	fa2e f303 	lsr.w	r3, lr, r3
    cdb0:	4303      	orrs	r3, r0
    cdb2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cdb6:	b2af      	uxth	r7, r5
    cdb8:	fbb1 fcfe 	udiv	ip, r1, lr
    cdbc:	fb0e 101c 	mls	r0, lr, ip, r1
    cdc0:	0c19      	lsrs	r1, r3, #16
    cdc2:	fb0c f807 	mul.w	r8, ip, r7
    cdc6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    cdca:	4588      	cmp	r8, r1
    cdcc:	fa04 f402 	lsl.w	r4, r4, r2
    cdd0:	d922      	bls.n	ce18 <__udivmoddi4+0x18c>
    cdd2:	1869      	adds	r1, r5, r1
    cdd4:	f10c 30ff 	add.w	r0, ip, #4294967295
    cdd8:	d204      	bcs.n	cde4 <__udivmoddi4+0x158>
    cdda:	4588      	cmp	r8, r1
    cddc:	d902      	bls.n	cde4 <__udivmoddi4+0x158>
    cdde:	f1ac 0002 	sub.w	r0, ip, #2
    cde2:	4429      	add	r1, r5
    cde4:	eba1 0108 	sub.w	r1, r1, r8
    cde8:	b29b      	uxth	r3, r3
    cdea:	fbb1 fcfe 	udiv	ip, r1, lr
    cdee:	fb0e 111c 	mls	r1, lr, ip, r1
    cdf2:	fb0c f707 	mul.w	r7, ip, r7
    cdf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    cdfa:	429f      	cmp	r7, r3
    cdfc:	d90e      	bls.n	ce1c <__udivmoddi4+0x190>
    cdfe:	18eb      	adds	r3, r5, r3
    ce00:	f10c 31ff 	add.w	r1, ip, #4294967295
    ce04:	d204      	bcs.n	ce10 <__udivmoddi4+0x184>
    ce06:	429f      	cmp	r7, r3
    ce08:	d902      	bls.n	ce10 <__udivmoddi4+0x184>
    ce0a:	f1ac 0102 	sub.w	r1, ip, #2
    ce0e:	442b      	add	r3, r5
    ce10:	1bdb      	subs	r3, r3, r7
    ce12:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    ce16:	e792      	b.n	cd3e <__udivmoddi4+0xb2>
    ce18:	4660      	mov	r0, ip
    ce1a:	e7e3      	b.n	cde4 <__udivmoddi4+0x158>
    ce1c:	4661      	mov	r1, ip
    ce1e:	e7f7      	b.n	ce10 <__udivmoddi4+0x184>
    ce20:	4660      	mov	r0, ip
    ce22:	e7a3      	b.n	cd6c <__udivmoddi4+0xe0>
    ce24:	4663      	mov	r3, ip
    ce26:	e7b7      	b.n	cd98 <__udivmoddi4+0x10c>
    ce28:	4283      	cmp	r3, r0
    ce2a:	d906      	bls.n	ce3a <__udivmoddi4+0x1ae>
    ce2c:	b916      	cbnz	r6, ce34 <__udivmoddi4+0x1a8>
    ce2e:	2100      	movs	r1, #0
    ce30:	4608      	mov	r0, r1
    ce32:	e77b      	b.n	cd2c <__udivmoddi4+0xa0>
    ce34:	e9c6 e000 	strd	lr, r0, [r6]
    ce38:	e7f9      	b.n	ce2e <__udivmoddi4+0x1a2>
    ce3a:	fab3 f783 	clz	r7, r3
    ce3e:	b98f      	cbnz	r7, ce64 <__udivmoddi4+0x1d8>
    ce40:	4283      	cmp	r3, r0
    ce42:	d301      	bcc.n	ce48 <__udivmoddi4+0x1bc>
    ce44:	4572      	cmp	r2, lr
    ce46:	d808      	bhi.n	ce5a <__udivmoddi4+0x1ce>
    ce48:	ebbe 0402 	subs.w	r4, lr, r2
    ce4c:	eb60 0303 	sbc.w	r3, r0, r3
    ce50:	2001      	movs	r0, #1
    ce52:	469c      	mov	ip, r3
    ce54:	b91e      	cbnz	r6, ce5e <__udivmoddi4+0x1d2>
    ce56:	2100      	movs	r1, #0
    ce58:	e768      	b.n	cd2c <__udivmoddi4+0xa0>
    ce5a:	4638      	mov	r0, r7
    ce5c:	e7fa      	b.n	ce54 <__udivmoddi4+0x1c8>
    ce5e:	e9c6 4c00 	strd	r4, ip, [r6]
    ce62:	e7f8      	b.n	ce56 <__udivmoddi4+0x1ca>
    ce64:	f1c7 0c20 	rsb	ip, r7, #32
    ce68:	40bb      	lsls	r3, r7
    ce6a:	fa22 f40c 	lsr.w	r4, r2, ip
    ce6e:	431c      	orrs	r4, r3
    ce70:	fa2e f10c 	lsr.w	r1, lr, ip
    ce74:	fa20 f30c 	lsr.w	r3, r0, ip
    ce78:	40b8      	lsls	r0, r7
    ce7a:	4301      	orrs	r1, r0
    ce7c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    ce80:	fa0e f507 	lsl.w	r5, lr, r7
    ce84:	fbb3 f8f9 	udiv	r8, r3, r9
    ce88:	fa1f fe84 	uxth.w	lr, r4
    ce8c:	fb09 3018 	mls	r0, r9, r8, r3
    ce90:	0c0b      	lsrs	r3, r1, #16
    ce92:	fb08 fa0e 	mul.w	sl, r8, lr
    ce96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    ce9a:	459a      	cmp	sl, r3
    ce9c:	fa02 f207 	lsl.w	r2, r2, r7
    cea0:	d940      	bls.n	cf24 <__udivmoddi4+0x298>
    cea2:	18e3      	adds	r3, r4, r3
    cea4:	f108 30ff 	add.w	r0, r8, #4294967295
    cea8:	d204      	bcs.n	ceb4 <__udivmoddi4+0x228>
    ceaa:	459a      	cmp	sl, r3
    ceac:	d902      	bls.n	ceb4 <__udivmoddi4+0x228>
    ceae:	f1a8 0002 	sub.w	r0, r8, #2
    ceb2:	4423      	add	r3, r4
    ceb4:	eba3 030a 	sub.w	r3, r3, sl
    ceb8:	b289      	uxth	r1, r1
    ceba:	fbb3 f8f9 	udiv	r8, r3, r9
    cebe:	fb09 3318 	mls	r3, r9, r8, r3
    cec2:	fb08 fe0e 	mul.w	lr, r8, lr
    cec6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    ceca:	458e      	cmp	lr, r1
    cecc:	d92c      	bls.n	cf28 <__udivmoddi4+0x29c>
    cece:	1861      	adds	r1, r4, r1
    ced0:	f108 33ff 	add.w	r3, r8, #4294967295
    ced4:	d204      	bcs.n	cee0 <__udivmoddi4+0x254>
    ced6:	458e      	cmp	lr, r1
    ced8:	d902      	bls.n	cee0 <__udivmoddi4+0x254>
    ceda:	f1a8 0302 	sub.w	r3, r8, #2
    cede:	4421      	add	r1, r4
    cee0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cee4:	fba0 9802 	umull	r9, r8, r0, r2
    cee8:	eba1 010e 	sub.w	r1, r1, lr
    ceec:	4541      	cmp	r1, r8
    ceee:	46ce      	mov	lr, r9
    cef0:	4643      	mov	r3, r8
    cef2:	d302      	bcc.n	cefa <__udivmoddi4+0x26e>
    cef4:	d106      	bne.n	cf04 <__udivmoddi4+0x278>
    cef6:	454d      	cmp	r5, r9
    cef8:	d204      	bcs.n	cf04 <__udivmoddi4+0x278>
    cefa:	ebb9 0e02 	subs.w	lr, r9, r2
    cefe:	eb68 0304 	sbc.w	r3, r8, r4
    cf02:	3801      	subs	r0, #1
    cf04:	2e00      	cmp	r6, #0
    cf06:	d0a6      	beq.n	ce56 <__udivmoddi4+0x1ca>
    cf08:	ebb5 020e 	subs.w	r2, r5, lr
    cf0c:	eb61 0103 	sbc.w	r1, r1, r3
    cf10:	fa01 fc0c 	lsl.w	ip, r1, ip
    cf14:	fa22 f307 	lsr.w	r3, r2, r7
    cf18:	ea4c 0303 	orr.w	r3, ip, r3
    cf1c:	40f9      	lsrs	r1, r7
    cf1e:	e9c6 3100 	strd	r3, r1, [r6]
    cf22:	e798      	b.n	ce56 <__udivmoddi4+0x1ca>
    cf24:	4640      	mov	r0, r8
    cf26:	e7c5      	b.n	ceb4 <__udivmoddi4+0x228>
    cf28:	4643      	mov	r3, r8
    cf2a:	e7d9      	b.n	cee0 <__udivmoddi4+0x254>
    cf2c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    cf30:	4681      	mov	r9, r0
    cf32:	ea5f 0802 	movs.w	r8, r2
    cf36:	f100 0007 	add.w	r0, r0, #7
    cf3a:	f020 0007 	bic.w	r0, r0, #7
    cf3e:	f04f 0200 	mov.w	r2, #0
    cf42:	e9cd 0200 	strd	r0, r2, [sp]
    cf46:	780a      	ldrb	r2, [r1, #0]
    cf48:	460c      	mov	r4, r1
    cf4a:	f88d 2005 	strb.w	r2, [sp, #5]
    cf4e:	d000      	beq.n	cf52 <__udivmoddi4+0x2c6>
    cf50:	2000      	movs	r0, #0
    cf52:	a901      	add	r1, sp, #4
    cf54:	f7f4 f858 	bl	1008 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    cf58:	9900      	ldr	r1, [sp, #0]
    cf5a:	2600      	movs	r6, #0
    cf5c:	4408      	add	r0, r1
    cf5e:	9000      	str	r0, [sp, #0]
    cf60:	7820      	ldrb	r0, [r4, #0]
    cf62:	7861      	ldrb	r1, [r4, #1]
    cf64:	4635      	mov	r5, r6
    cf66:	4408      	add	r0, r1
    cf68:	b2c7      	uxtb	r7, r0
    cf6a:	e008      	b.n	cf7e <__udivmoddi4+0x2f2>
    cf6c:	7a23      	ldrb	r3, [r4, #8]
    cf6e:	79e2      	ldrb	r2, [r4, #7]
    cf70:	79a1      	ldrb	r1, [r4, #6]
    cf72:	7960      	ldrb	r0, [r4, #5]
    cf74:	f000 fedd 	bl	dd32 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    cf78:	1c6d      	adds	r5, r5, #1
    cf7a:	4406      	add	r6, r0
    cf7c:	b2ed      	uxtb	r5, r5
    cf7e:	42bd      	cmp	r5, r7
    cf80:	d3f4      	bcc.n	cf6c <__udivmoddi4+0x2e0>
    cf82:	9800      	ldr	r0, [sp, #0]
    cf84:	1cc0      	adds	r0, r0, #3
    cf86:	f020 0003 	bic.w	r0, r0, #3
    cf8a:	9000      	str	r0, [sp, #0]
    cf8c:	f1b8 0f00 	cmp.w	r8, #0
    cf90:	d000      	beq.n	cf94 <__udivmoddi4+0x308>
    cf92:	2000      	movs	r0, #0
    cf94:	4632      	mov	r2, r6
    cf96:	4639      	mov	r1, r7
    cf98:	f7f4 f95e 	bl	1258 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cf9c:	9900      	ldr	r1, [sp, #0]
    cf9e:	4642      	mov	r2, r8
    cfa0:	4408      	add	r0, r1
    cfa2:	9000      	str	r0, [sp, #0]
    cfa4:	4621      	mov	r1, r4
    cfa6:	4668      	mov	r0, sp
    cfa8:	f7f3 fc24 	bl	7f4 <ocrypto_mod_p256_sqr+0x8c>
    cfac:	9900      	ldr	r1, [sp, #0]
    cfae:	eba1 0009 	sub.w	r0, r1, r9
    cfb2:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

0000cfb6 <sdc_soc_ecb_block_encrypt>:
    cfb6:	b530      	push	{r4, r5, lr}
    cfb8:	460d      	mov	r5, r1
    cfba:	b08d      	sub	sp, #52	; 0x34
    cfbc:	4614      	mov	r4, r2
    cfbe:	4601      	mov	r1, r0
    cfc0:	2210      	movs	r2, #16
    cfc2:	4668      	mov	r0, sp
    cfc4:	f004 f81b 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cfc8:	2210      	movs	r2, #16
    cfca:	4629      	mov	r1, r5
    cfcc:	a804      	add	r0, sp, #16
    cfce:	f004 f816 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cfd2:	4668      	mov	r0, sp
    cfd4:	f000 ff0f 	bl	ddf6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    cfd8:	b118      	cbz	r0, cfe2 <sdc_soc_ecb_block_encrypt+0x2c>
    cfda:	f06f 0015 	mvn.w	r0, #21
    cfde:	b00d      	add	sp, #52	; 0x34
    cfe0:	bd30      	pop	{r4, r5, pc}
    cfe2:	2210      	movs	r2, #16
    cfe4:	4620      	mov	r0, r4
    cfe6:	a908      	add	r1, sp, #32
    cfe8:	f004 f809 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cfec:	2000      	movs	r0, #0
    cfee:	e7f6      	b.n	cfde <sdc_soc_ecb_block_encrypt+0x28>

0000cff0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cff0:	b50e      	push	{r1, r2, r3, lr}
    cff2:	4601      	mov	r1, r0
    cff4:	4668      	mov	r0, sp
    cff6:	f000 f804 	bl	d002 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    cffa:	4668      	mov	r0, sp
    cffc:	f001 fb49 	bl	e692 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    d000:	bd0e      	pop	{r1, r2, r3, pc}

0000d002 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    d002:	880a      	ldrh	r2, [r1, #0]
    d004:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d008:	8082      	strh	r2, [r0, #4]
    d00a:	884a      	ldrh	r2, [r1, #2]
    d00c:	80c2      	strh	r2, [r0, #6]
    d00e:	784a      	ldrb	r2, [r1, #1]
    d010:	0993      	lsrs	r3, r2, #6
    d012:	2200      	movs	r2, #0
    d014:	7242      	strb	r2, [r0, #9]
    d016:	784b      	ldrb	r3, [r1, #1]
    d018:	f3c3 1301 	ubfx	r3, r3, #4, #2
    d01c:	b11b      	cbz	r3, d026 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d01e:	2b01      	cmp	r3, #1
    d020:	d005      	beq.n	d02e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    d022:	2b02      	cmp	r3, #2
    d024:	d005      	beq.n	d032 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    d026:	7202      	strb	r2, [r0, #8]
    d028:	1d09      	adds	r1, r1, #4
    d02a:	6001      	str	r1, [r0, #0]
    d02c:	4770      	bx	lr
    d02e:	2201      	movs	r2, #1
    d030:	e7f9      	b.n	d026 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d032:	2202      	movs	r2, #2
    d034:	e7f7      	b.n	d026 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000d036 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    d036:	b510      	push	{r4, lr}
    d038:	460c      	mov	r4, r1
    d03a:	7909      	ldrb	r1, [r1, #4]
    d03c:	7001      	strb	r1, [r0, #0]
    d03e:	7841      	ldrb	r1, [r0, #1]
    d040:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    d044:	7041      	strb	r1, [r0, #1]
    d046:	88a2      	ldrh	r2, [r4, #4]
    d048:	f3c2 2203 	ubfx	r2, r2, #8, #4
    d04c:	4311      	orrs	r1, r2
    d04e:	7041      	strb	r1, [r0, #1]
    d050:	79a2      	ldrb	r2, [r4, #6]
    d052:	7082      	strb	r2, [r0, #2]
    d054:	88e2      	ldrh	r2, [r4, #6]
    d056:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    d05a:	0a12      	lsrs	r2, r2, #8
    d05c:	70c2      	strb	r2, [r0, #3]
    d05e:	7041      	strb	r1, [r0, #1]
    d060:	7a22      	ldrb	r2, [r4, #8]
    d062:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    d066:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    d06a:	7041      	strb	r1, [r0, #1]
    d06c:	7a62      	ldrb	r2, [r4, #9]
    d06e:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    d072:	7041      	strb	r1, [r0, #1]
    d074:	6821      	ldr	r1, [r4, #0]
    d076:	1d02      	adds	r2, r0, #4
    d078:	4291      	cmp	r1, r2
    d07a:	d006      	beq.n	d08a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    d07c:	88e2      	ldrh	r2, [r4, #6]
    d07e:	2afb      	cmp	r2, #251	; 0xfb
    d080:	d300      	bcc.n	d084 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    d082:	22fb      	movs	r2, #251	; 0xfb
    d084:	1d00      	adds	r0, r0, #4
    d086:	f003 ffba 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d08a:	79a0      	ldrb	r0, [r4, #6]
    d08c:	1d00      	adds	r0, r0, #4
    d08e:	b2c0      	uxtb	r0, r0
    d090:	bd10      	pop	{r4, pc}

0000d092 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    d092:	b430      	push	{r4, r5}
    d094:	790a      	ldrb	r2, [r1, #4]
    d096:	7002      	strb	r2, [r0, #0]
    d098:	7842      	ldrb	r2, [r0, #1]
    d09a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    d09e:	7042      	strb	r2, [r0, #1]
    d0a0:	888b      	ldrh	r3, [r1, #4]
    d0a2:	f3c3 2303 	ubfx	r3, r3, #8, #4
    d0a6:	431a      	orrs	r2, r3
    d0a8:	7042      	strb	r2, [r0, #1]
    d0aa:	798b      	ldrb	r3, [r1, #6]
    d0ac:	7083      	strb	r3, [r0, #2]
    d0ae:	78c3      	ldrb	r3, [r0, #3]
    d0b0:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    d0b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d0b8:	70c3      	strb	r3, [r0, #3]
    d0ba:	88cc      	ldrh	r4, [r1, #6]
    d0bc:	f3c4 2405 	ubfx	r4, r4, #8, #6
    d0c0:	4323      	orrs	r3, r4
    d0c2:	70c3      	strb	r3, [r0, #3]
    d0c4:	7042      	strb	r2, [r0, #1]
    d0c6:	7a0c      	ldrb	r4, [r1, #8]
    d0c8:	f004 0403 	and.w	r4, r4, #3
    d0cc:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    d0d0:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    d0d4:	7042      	strb	r2, [r0, #1]
    d0d6:	7a4c      	ldrb	r4, [r1, #9]
    d0d8:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    d0dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    d0e0:	7042      	strb	r2, [r0, #1]
    d0e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    d0e6:	70c2      	strb	r2, [r0, #3]
    d0e8:	680b      	ldr	r3, [r1, #0]
    d0ea:	1d02      	adds	r2, r0, #4
    d0ec:	4293      	cmp	r3, r2
    d0ee:	d005      	beq.n	d0fc <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    d0f0:	88ca      	ldrh	r2, [r1, #6]
    d0f2:	bc30      	pop	{r4, r5}
    d0f4:	4619      	mov	r1, r3
    d0f6:	1d00      	adds	r0, r0, #4
    d0f8:	f003 bf81 	b.w	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d0fc:	bc30      	pop	{r4, r5}
    d0fe:	4770      	bx	lr

0000d100 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    d100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d104:	4604      	mov	r4, r0
    d106:	f891 c000 	ldrb.w	ip, [r1]
    d10a:	460d      	mov	r5, r1
    d10c:	2000      	movs	r0, #0
    d10e:	2711      	movs	r7, #17
    d110:	263e      	movs	r6, #62	; 0x3e
    d112:	2312      	movs	r3, #18
    d114:	22ff      	movs	r2, #255	; 0xff
    d116:	f04f 0b0c 	mov.w	fp, #12
    d11a:	f04f 0905 	mov.w	r9, #5
    d11e:	f04f 0a03 	mov.w	sl, #3
    d122:	f104 010d 	add.w	r1, r4, #13
    d126:	f04f 0e14 	mov.w	lr, #20
    d12a:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    d12e:	d26f      	bcs.n	d210 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x110>
    d130:	e8df f00c 	tbb	[pc, ip]
    d134:	47452d6e 	.word	0x47452d6e
    d138:	a76eef4c 	.word	0xa76eef4c
    d13c:	edf0c2b1 	.word	0xedf0c2b1
    d140:	e9eaebec 	.word	0xe9eaebec
    d144:	6f6e12e8 	.word	0x6f6e12e8
    d148:	e6e78c6e 	.word	0xe6e78c6e
    d14c:	e2e3e4e5 	.word	0xe2e3e4e5
    d150:	dedfe0e1 	.word	0xdedfe0e1
    d154:	00dc6edd 	.word	0x00dc6edd
    d158:	200e      	movs	r0, #14
    d15a:	7020      	strb	r0, [r4, #0]
    d15c:	7968      	ldrb	r0, [r5, #5]
    d15e:	70e0      	strb	r0, [r4, #3]
    d160:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d164:	0a00      	lsrs	r0, r0, #8
    d166:	7120      	strb	r0, [r4, #4]
    d168:	7928      	ldrb	r0, [r5, #4]
    d16a:	70a0      	strb	r0, [r4, #2]
    d16c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d170:	3883      	subs	r0, #131	; 0x83
    d172:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    d176:	d003      	beq.n	d180 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x80>
    d178:	2136      	movs	r1, #54	; 0x36
    d17a:	20c7      	movs	r0, #199	; 0xc7
    d17c:	f7f3 fc4e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d180:	4652      	mov	r2, sl
    d182:	1de9      	adds	r1, r5, #7
    d184:	1d60      	adds	r0, r4, #5
    d186:	f003 ff3a 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d18a:	2007      	movs	r0, #7
    d18c:	e151      	b.n	d432 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d18e:	f884 b000 	strb.w	fp, [r4]
    d192:	7928      	ldrb	r0, [r5, #4]
    d194:	70a0      	strb	r0, [r4, #2]
    d196:	7968      	ldrb	r0, [r5, #5]
    d198:	70e0      	strb	r0, [r4, #3]
    d19a:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d19e:	0a00      	lsrs	r0, r0, #8
    d1a0:	7120      	strb	r0, [r4, #4]
    d1a2:	79e8      	ldrb	r0, [r5, #7]
    d1a4:	7160      	strb	r0, [r4, #5]
    d1a6:	7a28      	ldrb	r0, [r5, #8]
    d1a8:	71a0      	strb	r0, [r4, #6]
    d1aa:	8928      	ldrh	r0, [r5, #8]
    d1ac:	0a00      	lsrs	r0, r0, #8
    d1ae:	71e0      	strb	r0, [r4, #7]
    d1b0:	7aa8      	ldrb	r0, [r5, #10]
    d1b2:	7220      	strb	r0, [r4, #8]
    d1b4:	8968      	ldrh	r0, [r5, #10]
    d1b6:	0a00      	lsrs	r0, r0, #8
    d1b8:	7260      	strb	r0, [r4, #9]
    d1ba:	2008      	movs	r0, #8
    d1bc:	e139      	b.n	d432 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d1be:	2010      	movs	r0, #16
    d1c0:	e000      	b.n	d1c4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc4>
    d1c2:	201a      	movs	r0, #26
    d1c4:	7020      	strb	r0, [r4, #0]
    d1c6:	7928      	ldrb	r0, [r5, #4]
    d1c8:	70a0      	strb	r0, [r4, #2]
    d1ca:	e138      	b.n	d43e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33e>
    d1cc:	7026      	strb	r6, [r4, #0]
    d1ce:	2002      	movs	r0, #2
    d1d0:	70a0      	strb	r0, [r4, #2]
    d1d2:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    d1d6:	70e0      	strb	r0, [r4, #3]
    d1d8:	7aa8      	ldrb	r0, [r5, #10]
    d1da:	7120      	strb	r0, [r4, #4]
    d1dc:	7868      	ldrb	r0, [r5, #1]
    d1de:	7160      	strb	r0, [r4, #5]
    d1e0:	f8d5 0002 	ldr.w	r0, [r5, #2]
    d1e4:	f8c4 0006 	str.w	r0, [r4, #6]
    d1e8:	88e8      	ldrh	r0, [r5, #6]
    d1ea:	8160      	strh	r0, [r4, #10]
    d1ec:	7a28      	ldrb	r0, [r5, #8]
    d1ee:	7320      	strb	r0, [r4, #12]
    d1f0:	7a2e      	ldrb	r6, [r5, #8]
    d1f2:	2e1f      	cmp	r6, #31
    d1f4:	d300      	bcc.n	d1f8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xf8>
    d1f6:	261f      	movs	r6, #31
    d1f8:	4608      	mov	r0, r1
    d1fa:	4632      	mov	r2, r6
    d1fc:	f105 010b 	add.w	r1, r5, #11
    d200:	f003 fefd 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d204:	360d      	adds	r6, #13
    d206:	7a69      	ldrb	r1, [r5, #9]
    d208:	55a1      	strb	r1, [r4, r6]
    d20a:	1e76      	subs	r6, r6, #1
    d20c:	b2f0      	uxtb	r0, r6
    d20e:	e10e      	b.n	d42e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    d210:	e111      	b.n	d436 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x336>
    d212:	7026      	strb	r6, [r4, #0]
    d214:	200b      	movs	r0, #11
    d216:	70a0      	strb	r0, [r4, #2]
    d218:	7928      	ldrb	r0, [r5, #4]
    d21a:	70e0      	strb	r0, [r4, #3]
    d21c:	7968      	ldrb	r0, [r5, #5]
    d21e:	7120      	strb	r0, [r4, #4]
    d220:	79a8      	ldrb	r0, [r5, #6]
    d222:	7160      	strb	r0, [r4, #5]
    d224:	f8d5 0007 	ldr.w	r0, [r5, #7]
    d228:	f8c4 0006 	str.w	r0, [r4, #6]
    d22c:	f8b5 000b 	ldrh.w	r0, [r5, #11]
    d230:	8160      	strh	r0, [r4, #10]
    d232:	7b68      	ldrb	r0, [r5, #13]
    d234:	7320      	strb	r0, [r4, #12]
    d236:	f8d5 000e 	ldr.w	r0, [r5, #14]
    d23a:	f8c4 000d 	str.w	r0, [r4, #13]
    d23e:	8a68      	ldrh	r0, [r5, #18]
    d240:	f8a4 0011 	strh.w	r0, [r4, #17]
    d244:	7d28      	ldrb	r0, [r5, #20]
    d246:	74e0      	strb	r0, [r4, #19]
    d248:	4618      	mov	r0, r3
    d24a:	e0f2      	b.n	d432 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d24c:	2029      	movs	r0, #41	; 0x29
    d24e:	f7f3 fd63 	bl	d18 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d252:	b148      	cbz	r0, d268 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x168>
    d254:	7026      	strb	r6, [r4, #0]
    d256:	2029      	movs	r0, #41	; 0x29
    d258:	70a0      	strb	r0, [r4, #2]
    d25a:	2221      	movs	r2, #33	; 0x21
    d25c:	1d29      	adds	r1, r5, #4
    d25e:	1ce0      	adds	r0, r4, #3
    d260:	f003 fecd 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d264:	2022      	movs	r0, #34	; 0x22
    d266:	e0e4      	b.n	d432 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d268:	200a      	movs	r0, #10
    d26a:	f7f3 fd55 	bl	d18 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d26e:	2800      	cmp	r0, #0
    d270:	4629      	mov	r1, r5
    d272:	4620      	mov	r0, r4
    d274:	d002      	beq.n	d27c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x17c>
    d276:	f000 f9a1 	bl	d5bc <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    d27a:	e0d8      	b.n	d42e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    d27c:	f000 f975 	bl	d56a <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    d280:	e0d5      	b.n	d42e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    d282:	7026      	strb	r6, [r4, #0]
    d284:	f884 e002 	strb.w	lr, [r4, #2]
    d288:	7928      	ldrb	r0, [r5, #4]
    d28a:	70e0      	strb	r0, [r4, #3]
    d28c:	88a8      	ldrh	r0, [r5, #4]
    d28e:	0a00      	lsrs	r0, r0, #8
    d290:	7120      	strb	r0, [r4, #4]
    d292:	79a8      	ldrb	r0, [r5, #6]
    d294:	e106      	b.n	d4a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    d296:	223e      	movs	r2, #62	; 0x3e
    d298:	7022      	strb	r2, [r4, #0]
    d29a:	2204      	movs	r2, #4
    d29c:	70a2      	strb	r2, [r4, #2]
    d29e:	6868      	ldr	r0, [r5, #4]
    d2a0:	f8c4 0003 	str.w	r0, [r4, #3]
    d2a4:	68a8      	ldr	r0, [r5, #8]
    d2a6:	f8c4 0007 	str.w	r0, [r4, #7]
    d2aa:	89a8      	ldrh	r0, [r5, #12]
    d2ac:	f8a4 000b 	strh.w	r0, [r4, #11]
    d2b0:	7ba8      	ldrb	r0, [r5, #14]
    d2b2:	7360      	strb	r0, [r4, #13]
    d2b4:	200c      	movs	r0, #12
    d2b6:	e0bc      	b.n	d432 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d2b8:	7026      	strb	r6, [r4, #0]
    d2ba:	f884 a002 	strb.w	sl, [r4, #2]
    d2be:	7928      	ldrb	r0, [r5, #4]
    d2c0:	70e0      	strb	r0, [r4, #3]
    d2c2:	79a8      	ldrb	r0, [r5, #6]
    d2c4:	7120      	strb	r0, [r4, #4]
    d2c6:	88e8      	ldrh	r0, [r5, #6]
    d2c8:	0a00      	lsrs	r0, r0, #8
    d2ca:	7160      	strb	r0, [r4, #5]
    d2cc:	7a28      	ldrb	r0, [r5, #8]
    d2ce:	71a0      	strb	r0, [r4, #6]
    d2d0:	8928      	ldrh	r0, [r5, #8]
    d2d2:	0a00      	lsrs	r0, r0, #8
    d2d4:	71e0      	strb	r0, [r4, #7]
    d2d6:	7aa8      	ldrb	r0, [r5, #10]
    d2d8:	7220      	strb	r0, [r4, #8]
    d2da:	8968      	ldrh	r0, [r5, #10]
    d2dc:	0a00      	lsrs	r0, r0, #8
    d2de:	7260      	strb	r0, [r4, #9]
    d2e0:	7b28      	ldrb	r0, [r5, #12]
    d2e2:	72a0      	strb	r0, [r4, #10]
    d2e4:	89a8      	ldrh	r0, [r5, #12]
    d2e6:	0a00      	lsrs	r0, r0, #8
    d2e8:	72e0      	strb	r0, [r4, #11]
    d2ea:	e118      	b.n	d51e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x41e>
    d2ec:	e126      	b.n	d53c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x43c>
    d2ee:	e0fa      	b.n	d4e6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    d2f0:	e0db      	b.n	d4aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3aa>
    d2f2:	e106      	b.n	d502 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    d2f4:	e115      	b.n	d522 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x422>
    d2f6:	e0cd      	b.n	d494 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x394>
    d2f8:	e0b5      	b.n	d466 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x366>
    d2fa:	e0b1      	b.n	d460 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x360>
    d2fc:	e09d      	b.n	d43a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33a>
    d2fe:	e0a0      	b.n	d442 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x342>
    d300:	e043      	b.n	d38a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x28a>
    d302:	e03f      	b.n	d384 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    d304:	e054      	b.n	d3b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2b0>
    d306:	e04e      	b.n	d3a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a6>
    d308:	e031      	b.n	d36e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    d30a:	e025      	b.n	d358 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x258>
    d30c:	e018      	b.n	d340 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    d30e:	e015      	b.n	d33c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23c>
    d310:	e000      	b.n	d314 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
    d312:	e056      	b.n	d3c2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    d314:	7026      	strb	r6, [r4, #0]
    d316:	f884 9002 	strb.w	r9, [r4, #2]
    d31a:	7928      	ldrb	r0, [r5, #4]
    d31c:	70e0      	strb	r0, [r4, #3]
    d31e:	88a8      	ldrh	r0, [r5, #4]
    d320:	0a00      	lsrs	r0, r0, #8
    d322:	7120      	strb	r0, [r4, #4]
    d324:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d328:	f8c4 0005 	str.w	r0, [r4, #5]
    d32c:	f8d5 000a 	ldr.w	r0, [r5, #10]
    d330:	f8c4 0009 	str.w	r0, [r4, #9]
    d334:	89e8      	ldrh	r0, [r5, #14]
    d336:	f8a4 000d 	strh.w	r0, [r4, #13]
    d33a:	e114      	b.n	d566 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x466>
    d33c:	7027      	strb	r7, [r4, #0]
    d33e:	e039      	b.n	d3b4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2b4>
    d340:	f884 9000 	strb.w	r9, [r4]
    d344:	7928      	ldrb	r0, [r5, #4]
    d346:	70a0      	strb	r0, [r4, #2]
    d348:	7968      	ldrb	r0, [r5, #5]
    d34a:	70e0      	strb	r0, [r4, #3]
    d34c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d350:	0a00      	lsrs	r0, r0, #8
    d352:	7120      	strb	r0, [r4, #4]
    d354:	79e8      	ldrb	r0, [r5, #7]
    d356:	e0a5      	b.n	d4a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    d358:	2008      	movs	r0, #8
    d35a:	7020      	strb	r0, [r4, #0]
    d35c:	7928      	ldrb	r0, [r5, #4]
    d35e:	70a0      	strb	r0, [r4, #2]
    d360:	79a8      	ldrb	r0, [r5, #6]
    d362:	70e0      	strb	r0, [r4, #3]
    d364:	88e8      	ldrh	r0, [r5, #6]
    d366:	0a00      	lsrs	r0, r0, #8
    d368:	7120      	strb	r0, [r4, #4]
    d36a:	7a28      	ldrb	r0, [r5, #8]
    d36c:	e09a      	b.n	d4a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    d36e:	2030      	movs	r0, #48	; 0x30
    d370:	7020      	strb	r0, [r4, #0]
    d372:	7928      	ldrb	r0, [r5, #4]
    d374:	70a0      	strb	r0, [r4, #2]
    d376:	79a8      	ldrb	r0, [r5, #6]
    d378:	70e0      	strb	r0, [r4, #3]
    d37a:	88e8      	ldrh	r0, [r5, #6]
    d37c:	0a00      	lsrs	r0, r0, #8
    d37e:	7120      	strb	r0, [r4, #4]
    d380:	2003      	movs	r0, #3
    d382:	e056      	b.n	d432 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d384:	7026      	strb	r6, [r4, #0]
    d386:	2007      	movs	r0, #7
    d388:	e091      	b.n	d4ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ae>
    d38a:	7026      	strb	r6, [r4, #0]
    d38c:	f884 b002 	strb.w	fp, [r4, #2]
    d390:	7928      	ldrb	r0, [r5, #4]
    d392:	70e0      	strb	r0, [r4, #3]
    d394:	79a8      	ldrb	r0, [r5, #6]
    d396:	7120      	strb	r0, [r4, #4]
    d398:	88e8      	ldrh	r0, [r5, #6]
    d39a:	0a00      	lsrs	r0, r0, #8
    d39c:	7160      	strb	r0, [r4, #5]
    d39e:	7a28      	ldrb	r0, [r5, #8]
    d3a0:	71a0      	strb	r0, [r4, #6]
    d3a2:	7a68      	ldrb	r0, [r5, #9]
    d3a4:	e059      	b.n	d45a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    d3a6:	1d29      	adds	r1, r5, #4
    d3a8:	4620      	mov	r0, r4
    d3aa:	f7f3 fc75 	bl	c98 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa0>
    d3ae:	e03e      	b.n	d42e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    d3b0:	2057      	movs	r0, #87	; 0x57
    d3b2:	7020      	strb	r0, [r4, #0]
    d3b4:	7928      	ldrb	r0, [r5, #4]
    d3b6:	70a0      	strb	r0, [r4, #2]
    d3b8:	88a8      	ldrh	r0, [r5, #4]
    d3ba:	0a00      	lsrs	r0, r0, #8
    d3bc:	70e0      	strb	r0, [r4, #3]
    d3be:	2002      	movs	r0, #2
    d3c0:	e037      	b.n	d432 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d3c2:	7026      	strb	r6, [r4, #0]
    d3c4:	220d      	movs	r2, #13
    d3c6:	70a2      	strb	r2, [r4, #2]
    d3c8:	792a      	ldrb	r2, [r5, #4]
    d3ca:	70e2      	strb	r2, [r4, #3]
    d3cc:	89ea      	ldrh	r2, [r5, #14]
    d3ce:	80a2      	strh	r2, [r4, #4]
    d3d0:	796a      	ldrb	r2, [r5, #5]
    d3d2:	71a2      	strb	r2, [r4, #6]
    d3d4:	f8d5 2006 	ldr.w	r2, [r5, #6]
    d3d8:	f8c4 2007 	str.w	r2, [r4, #7]
    d3dc:	896a      	ldrh	r2, [r5, #10]
    d3de:	f8a4 200b 	strh.w	r2, [r4, #11]
    d3e2:	7c2a      	ldrb	r2, [r5, #16]
    d3e4:	4620      	mov	r0, r4
    d3e6:	7362      	strb	r2, [r4, #13]
    d3e8:	1d29      	adds	r1, r5, #4
    d3ea:	7c6a      	ldrb	r2, [r5, #17]
    d3ec:	7382      	strb	r2, [r0, #14]
    d3ee:	7b8a      	ldrb	r2, [r1, #14]
    d3f0:	73c2      	strb	r2, [r0, #15]
    d3f2:	7e8a      	ldrb	r2, [r1, #26]
    d3f4:	7402      	strb	r2, [r0, #16]
    d3f6:	7a4a      	ldrb	r2, [r1, #9]
    d3f8:	7442      	strb	r2, [r0, #17]
    d3fa:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    d3fe:	f8ad 2000 	strh.w	r2, [sp]
    d402:	8242      	strh	r2, [r0, #18]
    d404:	7cca      	ldrb	r2, [r1, #19]
    d406:	7502      	strb	r2, [r0, #20]
    d408:	694a      	ldr	r2, [r1, #20]
    d40a:	f8c0 2015 	str.w	r2, [r0, #21]
    d40e:	8b0a      	ldrh	r2, [r1, #24]
    d410:	f8a0 2019 	strh.w	r2, [r0, #25]
    d414:	7a0a      	ldrb	r2, [r1, #8]
    d416:	76c2      	strb	r2, [r0, #27]
    d418:	7a0d      	ldrb	r5, [r1, #8]
    d41a:	2de5      	cmp	r5, #229	; 0xe5
    d41c:	d300      	bcc.n	d420 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x320>
    d41e:	25e5      	movs	r5, #229	; 0xe5
    d420:	462a      	mov	r2, r5
    d422:	301c      	adds	r0, #28
    d424:	311c      	adds	r1, #28
    d426:	f003 fdea 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d42a:	351a      	adds	r5, #26
    d42c:	b2e8      	uxtb	r0, r5
    d42e:	2800      	cmp	r0, #0
    d430:	d001      	beq.n	d436 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x336>
    d432:	7060      	strb	r0, [r4, #1]
    d434:	1c80      	adds	r0, r0, #2
    d436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d43a:	7026      	strb	r6, [r4, #0]
    d43c:	70a7      	strb	r7, [r4, #2]
    d43e:	2001      	movs	r0, #1
    d440:	e7f7      	b.n	d432 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d442:	7026      	strb	r6, [r4, #0]
    d444:	70a3      	strb	r3, [r4, #2]
    d446:	7928      	ldrb	r0, [r5, #4]
    d448:	70e0      	strb	r0, [r4, #3]
    d44a:	7968      	ldrb	r0, [r5, #5]
    d44c:	7120      	strb	r0, [r4, #4]
    d44e:	79a8      	ldrb	r0, [r5, #6]
    d450:	7160      	strb	r0, [r4, #5]
    d452:	88e8      	ldrh	r0, [r5, #6]
    d454:	0a00      	lsrs	r0, r0, #8
    d456:	71a0      	strb	r0, [r4, #6]
    d458:	7a28      	ldrb	r0, [r5, #8]
    d45a:	71e0      	strb	r0, [r4, #7]
    d45c:	2006      	movs	r0, #6
    d45e:	e7e8      	b.n	d432 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d460:	7026      	strb	r6, [r4, #0]
    d462:	2020      	movs	r0, #32
    d464:	e041      	b.n	d4ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ea>
    d466:	7026      	strb	r6, [r4, #0]
    d468:	2021      	movs	r0, #33	; 0x21
    d46a:	70a0      	strb	r0, [r4, #2]
    d46c:	7928      	ldrb	r0, [r5, #4]
    d46e:	70e0      	strb	r0, [r4, #3]
    d470:	7968      	ldrb	r0, [r5, #5]
    d472:	7120      	strb	r0, [r4, #4]
    d474:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d478:	0a00      	lsrs	r0, r0, #8
    d47a:	7160      	strb	r0, [r4, #5]
    d47c:	79e8      	ldrb	r0, [r5, #7]
    d47e:	71a0      	strb	r0, [r4, #6]
    d480:	7a28      	ldrb	r0, [r5, #8]
    d482:	71e0      	strb	r0, [r4, #7]
    d484:	7a68      	ldrb	r0, [r5, #9]
    d486:	7220      	strb	r0, [r4, #8]
    d488:	7aa8      	ldrb	r0, [r5, #10]
    d48a:	7260      	strb	r0, [r4, #9]
    d48c:	7ae8      	ldrb	r0, [r5, #11]
    d48e:	72a0      	strb	r0, [r4, #10]
    d490:	2009      	movs	r0, #9
    d492:	e7ce      	b.n	d432 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d494:	7022      	strb	r2, [r4, #0]
    d496:	20a1      	movs	r0, #161	; 0xa1
    d498:	70a0      	strb	r0, [r4, #2]
    d49a:	7928      	ldrb	r0, [r5, #4]
    d49c:	70e0      	strb	r0, [r4, #3]
    d49e:	7968      	ldrb	r0, [r5, #5]
    d4a0:	7120      	strb	r0, [r4, #4]
    d4a2:	2000      	movs	r0, #0
    d4a4:	7160      	strb	r0, [r4, #5]
    d4a6:	2004      	movs	r0, #4
    d4a8:	e7c3      	b.n	d432 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d4aa:	7022      	strb	r2, [r4, #0]
    d4ac:	20a2      	movs	r0, #162	; 0xa2
    d4ae:	70a0      	strb	r0, [r4, #2]
    d4b0:	7928      	ldrb	r0, [r5, #4]
    d4b2:	70e0      	strb	r0, [r4, #3]
    d4b4:	88a8      	ldrh	r0, [r5, #4]
    d4b6:	0a00      	lsrs	r0, r0, #8
    d4b8:	7120      	strb	r0, [r4, #4]
    d4ba:	79a8      	ldrb	r0, [r5, #6]
    d4bc:	7160      	strb	r0, [r4, #5]
    d4be:	88e8      	ldrh	r0, [r5, #6]
    d4c0:	0a00      	lsrs	r0, r0, #8
    d4c2:	71a0      	strb	r0, [r4, #6]
    d4c4:	7a28      	ldrb	r0, [r5, #8]
    d4c6:	71e0      	strb	r0, [r4, #7]
    d4c8:	8928      	ldrh	r0, [r5, #8]
    d4ca:	0a00      	lsrs	r0, r0, #8
    d4cc:	7220      	strb	r0, [r4, #8]
    d4ce:	7aa8      	ldrb	r0, [r5, #10]
    d4d0:	7260      	strb	r0, [r4, #9]
    d4d2:	8968      	ldrh	r0, [r5, #10]
    d4d4:	0a00      	lsrs	r0, r0, #8
    d4d6:	72a0      	strb	r0, [r4, #10]
    d4d8:	7b28      	ldrb	r0, [r5, #12]
    d4da:	72e0      	strb	r0, [r4, #11]
    d4dc:	89a8      	ldrh	r0, [r5, #12]
    d4de:	0a00      	lsrs	r0, r0, #8
    d4e0:	7320      	strb	r0, [r4, #12]
    d4e2:	200b      	movs	r0, #11
    d4e4:	e7a5      	b.n	d432 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d4e6:	7022      	strb	r2, [r4, #0]
    d4e8:	20a3      	movs	r0, #163	; 0xa3
    d4ea:	70a0      	strb	r0, [r4, #2]
    d4ec:	7928      	ldrb	r0, [r5, #4]
    d4ee:	70e0      	strb	r0, [r4, #3]
    d4f0:	88a8      	ldrh	r0, [r5, #4]
    d4f2:	0a00      	lsrs	r0, r0, #8
    d4f4:	7120      	strb	r0, [r4, #4]
    d4f6:	79a8      	ldrb	r0, [r5, #6]
    d4f8:	7160      	strb	r0, [r4, #5]
    d4fa:	79e8      	ldrb	r0, [r5, #7]
    d4fc:	71a0      	strb	r0, [r4, #6]
    d4fe:	2005      	movs	r0, #5
    d500:	e797      	b.n	d432 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d502:	7026      	strb	r6, [r4, #0]
    d504:	2013      	movs	r0, #19
    d506:	70a0      	strb	r0, [r4, #2]
    d508:	7928      	ldrb	r0, [r5, #4]
    d50a:	70e0      	strb	r0, [r4, #3]
    d50c:	7968      	ldrb	r0, [r5, #5]
    d50e:	7120      	strb	r0, [r4, #4]
    d510:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d514:	f8c4 0005 	str.w	r0, [r4, #5]
    d518:	8968      	ldrh	r0, [r5, #10]
    d51a:	f8a4 0009 	strh.w	r0, [r4, #9]
    d51e:	200a      	movs	r0, #10
    d520:	e787      	b.n	d432 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d522:	7022      	strb	r2, [r4, #0]
    d524:	20a4      	movs	r0, #164	; 0xa4
    d526:	70a0      	strb	r0, [r4, #2]
    d528:	7928      	ldrb	r0, [r5, #4]
    d52a:	70e0      	strb	r0, [r4, #3]
    d52c:	88a8      	ldrh	r0, [r5, #4]
    d52e:	0a00      	lsrs	r0, r0, #8
    d530:	7120      	strb	r0, [r4, #4]
    d532:	79a8      	ldrb	r0, [r5, #6]
    d534:	7160      	strb	r0, [r4, #5]
    d536:	79e8      	ldrb	r0, [r5, #7]
    d538:	71a0      	strb	r0, [r4, #6]
    d53a:	e626      	b.n	d18a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x8a>
    d53c:	7022      	strb	r2, [r4, #0]
    d53e:	2080      	movs	r0, #128	; 0x80
    d540:	70a0      	strb	r0, [r4, #2]
    d542:	88a9      	ldrh	r1, [r5, #4]
    d544:	f8a4 1003 	strh.w	r1, [r4, #3]
    d548:	88e9      	ldrh	r1, [r5, #6]
    d54a:	f8a4 1005 	strh.w	r1, [r4, #5]
    d54e:	7a29      	ldrb	r1, [r5, #8]
    d550:	71e1      	strb	r1, [r4, #7]
    d552:	8969      	ldrh	r1, [r5, #10]
    d554:	8121      	strh	r1, [r4, #8]
    d556:	89a9      	ldrh	r1, [r5, #12]
    d558:	8161      	strh	r1, [r4, #10]
    d55a:	89e9      	ldrh	r1, [r5, #14]
    d55c:	81a1      	strh	r1, [r4, #12]
    d55e:	7c29      	ldrb	r1, [r5, #16]
    d560:	f001 0101 	and.w	r1, r1, #1
    d564:	73a1      	strb	r1, [r4, #14]
    d566:	200d      	movs	r0, #13
    d568:	e763      	b.n	d432 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>

0000d56a <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    d56a:	223e      	movs	r2, #62	; 0x3e
    d56c:	7002      	strb	r2, [r0, #0]
    d56e:	2201      	movs	r2, #1
    d570:	7082      	strb	r2, [r0, #2]
    d572:	790a      	ldrb	r2, [r1, #4]
    d574:	70c2      	strb	r2, [r0, #3]
    d576:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d57a:	7102      	strb	r2, [r0, #4]
    d57c:	880a      	ldrh	r2, [r1, #0]
    d57e:	0a12      	lsrs	r2, r2, #8
    d580:	7142      	strb	r2, [r0, #5]
    d582:	788a      	ldrb	r2, [r1, #2]
    d584:	7182      	strb	r2, [r0, #6]
    d586:	78ca      	ldrb	r2, [r1, #3]
    d588:	71c2      	strb	r2, [r0, #7]
    d58a:	684a      	ldr	r2, [r1, #4]
    d58c:	6082      	str	r2, [r0, #8]
    d58e:	890a      	ldrh	r2, [r1, #8]
    d590:	8182      	strh	r2, [r0, #12]
    d592:	7d8a      	ldrb	r2, [r1, #22]
    d594:	7382      	strb	r2, [r0, #14]
    d596:	8aca      	ldrh	r2, [r1, #22]
    d598:	0a12      	lsrs	r2, r2, #8
    d59a:	73c2      	strb	r2, [r0, #15]
    d59c:	7e0a      	ldrb	r2, [r1, #24]
    d59e:	7402      	strb	r2, [r0, #16]
    d5a0:	8b0a      	ldrh	r2, [r1, #24]
    d5a2:	0a12      	lsrs	r2, r2, #8
    d5a4:	7442      	strb	r2, [r0, #17]
    d5a6:	7e8a      	ldrb	r2, [r1, #26]
    d5a8:	7482      	strb	r2, [r0, #18]
    d5aa:	8b4a      	ldrh	r2, [r1, #26]
    d5ac:	0a12      	lsrs	r2, r2, #8
    d5ae:	74c2      	strb	r2, [r0, #19]
    d5b0:	7f09      	ldrb	r1, [r1, #28]
    d5b2:	7501      	strb	r1, [r0, #20]
    d5b4:	2113      	movs	r1, #19
    d5b6:	7041      	strb	r1, [r0, #1]
    d5b8:	4608      	mov	r0, r1
    d5ba:	4770      	bx	lr
    d5bc:	223e      	movs	r2, #62	; 0x3e
    d5be:	7002      	strb	r2, [r0, #0]
    d5c0:	220a      	movs	r2, #10
    d5c2:	7082      	strb	r2, [r0, #2]
    d5c4:	790a      	ldrb	r2, [r1, #4]
    d5c6:	70c2      	strb	r2, [r0, #3]
    d5c8:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d5cc:	7102      	strb	r2, [r0, #4]
    d5ce:	880a      	ldrh	r2, [r1, #0]
    d5d0:	0a12      	lsrs	r2, r2, #8
    d5d2:	7142      	strb	r2, [r0, #5]
    d5d4:	788a      	ldrb	r2, [r1, #2]
    d5d6:	7182      	strb	r2, [r0, #6]
    d5d8:	78ca      	ldrb	r2, [r1, #3]
    d5da:	71c2      	strb	r2, [r0, #7]
    d5dc:	684a      	ldr	r2, [r1, #4]
    d5de:	6082      	str	r2, [r0, #8]
    d5e0:	890a      	ldrh	r2, [r1, #8]
    d5e2:	8182      	strh	r2, [r0, #12]
    d5e4:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d5e8:	f8c0 200e 	str.w	r2, [r0, #14]
    d5ec:	89ca      	ldrh	r2, [r1, #14]
    d5ee:	8242      	strh	r2, [r0, #18]
    d5f0:	690a      	ldr	r2, [r1, #16]
    d5f2:	6142      	str	r2, [r0, #20]
    d5f4:	8a8a      	ldrh	r2, [r1, #20]
    d5f6:	8302      	strh	r2, [r0, #24]
    d5f8:	7d8a      	ldrb	r2, [r1, #22]
    d5fa:	7682      	strb	r2, [r0, #26]
    d5fc:	8aca      	ldrh	r2, [r1, #22]
    d5fe:	0a12      	lsrs	r2, r2, #8
    d600:	76c2      	strb	r2, [r0, #27]
    d602:	7e0a      	ldrb	r2, [r1, #24]
    d604:	7702      	strb	r2, [r0, #28]
    d606:	8b0a      	ldrh	r2, [r1, #24]
    d608:	0a12      	lsrs	r2, r2, #8
    d60a:	7742      	strb	r2, [r0, #29]
    d60c:	7e8a      	ldrb	r2, [r1, #26]
    d60e:	7782      	strb	r2, [r0, #30]
    d610:	8b4a      	ldrh	r2, [r1, #26]
    d612:	0a12      	lsrs	r2, r2, #8
    d614:	77c2      	strb	r2, [r0, #31]
    d616:	7f09      	ldrb	r1, [r1, #28]
    d618:	f880 1020 	strb.w	r1, [r0, #32]
    d61c:	211f      	movs	r1, #31
    d61e:	7041      	strb	r1, [r0, #1]
    d620:	4608      	mov	r0, r1
    d622:	4770      	bx	lr
    d624:	094a      	lsrs	r2, r1, #5
    d626:	f001 011f 	and.w	r1, r1, #31
    d62a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d62e:	40c8      	lsrs	r0, r1
    d630:	f000 0001 	and.w	r0, r0, #1
    d634:	4770      	bx	lr

0000d636 <sdc_hci_data_put>:
    d636:	b510      	push	{r4, lr}
    d638:	f06f 0415 	mvn.w	r4, #21
    d63c:	b120      	cbz	r0, d648 <sdc_hci_data_put+0x12>
    d63e:	f7ff fcd7 	bl	cff0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d642:	b108      	cbz	r0, d648 <sdc_hci_data_put+0x12>
    d644:	2000      	movs	r0, #0
    d646:	bd10      	pop	{r4, pc}
    d648:	4620      	mov	r0, r4
    d64a:	bd10      	pop	{r4, pc}

0000d64c <sdc_hci_get>:
    d64c:	b510      	push	{r4, lr}
    d64e:	460c      	mov	r4, r1
    d650:	b130      	cbz	r0, d660 <sdc_hci_get+0x14>
    d652:	b12c      	cbz	r4, d660 <sdc_hci_get+0x14>
    d654:	f7f3 fad0 	bl	bf8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    d658:	b128      	cbz	r0, d666 <sdc_hci_get+0x1a>
    d65a:	7020      	strb	r0, [r4, #0]
    d65c:	2000      	movs	r0, #0
    d65e:	bd10      	pop	{r4, pc}
    d660:	f06f 0015 	mvn.w	r0, #21
    d664:	bd10      	pop	{r4, pc}
    d666:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d66a:	bd10      	pop	{r4, pc}

0000d66c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d66c:	f002 bd80 	b.w	10170 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d670 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d670:	f002 bd9b 	b.w	101aa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d674 <sdc_hci_cmd_cb_set_event_mask>:
    d674:	b510      	push	{r4, lr}
    d676:	f7f3 fb5f 	bl	d38 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d67a:	2000      	movs	r0, #0
    d67c:	bd10      	pop	{r4, pc}

0000d67e <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d67e:	b510      	push	{r4, lr}
    d680:	f7f3 fb6a 	bl	d58 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d684:	2000      	movs	r0, #0
    d686:	bd10      	pop	{r4, pc}

0000d688 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d688:	f002 bdb0 	b.w	101ec <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d68c <sdc_hci_cmd_vs_conn_event_extend>:
    d68c:	b508      	push	{r3, lr}
    d68e:	7800      	ldrb	r0, [r0, #0]
    d690:	f88d 0000 	strb.w	r0, [sp]
    d694:	4668      	mov	r0, sp
    d696:	f002 fd47 	bl	10128 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d69a:	bd08      	pop	{r3, pc}

0000d69c <sdc_hci_cmd_vs_conn_update>:
    d69c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d69e:	2100      	movs	r1, #0
    d6a0:	9100      	str	r1, [sp, #0]
    d6a2:	9101      	str	r1, [sp, #4]
    d6a4:	9102      	str	r1, [sp, #8]
    d6a6:	9103      	str	r1, [sp, #12]
    d6a8:	f8d0 1002 	ldr.w	r1, [r0, #2]
    d6ac:	f641 524c 	movw	r2, #7500	; 0x1d4c
    d6b0:	4291      	cmp	r1, r2
    d6b2:	d304      	bcc.n	d6be <sdc_hci_cmd_vs_conn_update+0x22>
    d6b4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d6b8:	fbb1 f1f2 	udiv	r1, r1, r2
    d6bc:	e005      	b.n	d6ca <sdc_hci_cmd_vs_conn_update+0x2e>
    d6be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d6c2:	fbb1 f1f2 	udiv	r1, r1, r2
    d6c6:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    d6ca:	8802      	ldrh	r2, [r0, #0]
    d6cc:	b289      	uxth	r1, r1
    d6ce:	f8ad 2000 	strh.w	r2, [sp]
    d6d2:	f8ad 1002 	strh.w	r1, [sp, #2]
    d6d6:	f8ad 1004 	strh.w	r1, [sp, #4]
    d6da:	88c1      	ldrh	r1, [r0, #6]
    d6dc:	f8ad 1006 	strh.w	r1, [sp, #6]
    d6e0:	8900      	ldrh	r0, [r0, #8]
    d6e2:	f8ad 0008 	strh.w	r0, [sp, #8]
    d6e6:	4668      	mov	r0, sp
    d6e8:	f002 fa7f 	bl	fbea <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    d6ec:	b004      	add	sp, #16
    d6ee:	bd10      	pop	{r4, pc}

0000d6f0 <sdc_hci_cmd_vs_event_length_set>:
    d6f0:	f7f9 be0a 	b.w	7308 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d6f4 <sdc_hci_cmd_vs_llpm_mode_set>:
    d6f4:	2001      	movs	r0, #1
    d6f6:	4770      	bx	lr

0000d6f8 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d6f8:	7800      	ldrb	r0, [r0, #0]
    d6fa:	b100      	cbz	r0, d6fe <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d6fc:	2001      	movs	r0, #1
    d6fe:	f002 bc3d 	b.w	ff7c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d702 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d702:	b510      	push	{r4, lr}
    d704:	4604      	mov	r4, r0
    d706:	f7ff f967 	bl	c9d8 <mpsl_temperature_get>
    d70a:	17c1      	asrs	r1, r0, #31
    d70c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d710:	1080      	asrs	r0, r0, #2
    d712:	287f      	cmp	r0, #127	; 0x7f
    d714:	dd01      	ble.n	d71a <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d716:	207f      	movs	r0, #127	; 0x7f
    d718:	e004      	b.n	d724 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d71a:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d71e:	4288      	cmp	r0, r1
    d720:	da00      	bge.n	d724 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d722:	4608      	mov	r0, r1
    d724:	7020      	strb	r0, [r4, #0]
    d726:	2000      	movs	r0, #0
    d728:	bd10      	pop	{r4, pc}

0000d72a <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d72a:	f002 bcec 	b.w	10106 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d72e <sdc_hci_cmd_ip_read_bd_addr>:
    d72e:	f002 bd30 	b.w	10192 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d732 <sdc_hci_cmd_ip_read_local_version_information>:
    d732:	f7f9 be3b 	b.w	73ac <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d736 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d736:	f002 ba27 	b.w	fb88 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d73a <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d73a:	f002 b9fb 	b.w	fb34 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d73e <sdc_hci_cmd_le_clear_filter_accept_list>:
    d73e:	f002 ba47 	b.w	fbd0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d742 <sdc_hci_cmd_le_clear_resolving_list>:
    d742:	f002 ba38 	b.w	fbb6 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d746 <sdc_hci_cmd_le_conn_update>:
    d746:	f002 ba50 	b.w	fbea <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000d74a <sdc_hci_cmd_le_create_conn>:
    d74a:	f7f9 bcc3 	b.w	70d4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000d74e <sdc_hci_cmd_le_create_conn_cancel>:
    d74e:	f002 ba8f 	b.w	fc70 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000d752 <sdc_hci_cmd_le_enable_encryption>:
    d752:	f002 bbd0 	b.w	fef6 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000d756 <sdc_hci_cmd_le_encrypt>:
    d756:	f002 ba9b 	b.w	fc90 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d75a <sdc_hci_cmd_le_rand>:
    d75a:	f002 baa2 	b.w	fca2 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d75e <sdc_hci_cmd_le_read_buffer_size>:
    d75e:	f7f9 bd15 	b.w	718c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d762 <sdc_hci_cmd_le_read_channel_map>:
    d762:	f7f9 bd1d 	b.w	71a0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d766 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d766:	f002 bada 	b.w	fd1e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d76a <sdc_hci_cmd_le_read_max_data_length>:
    d76a:	f002 baa0 	b.w	fcae <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d76e <sdc_hci_cmd_le_read_phy>:
    d76e:	f7f9 bd3f 	b.w	71f0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d772 <sdc_hci_cmd_le_read_remote_features>:
    d772:	f002 baa5 	b.w	fcc0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d776 <sdc_hci_cmd_le_read_resolving_list_size>:
    d776:	f002 babe 	b.w	fcf6 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d77a <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d77a:	f7f9 bd5f 	b.w	723c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d77e <sdc_hci_cmd_le_read_transmit_power>:
    d77e:	f002 babe 	b.w	fcfe <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d782 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d782:	f002 baec 	b.w	fd5e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d786 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d786:	f002 bad1 	b.w	fd2c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d78a <sdc_hci_cmd_le_set_address_resolution_enable>:
    d78a:	f002 bafd 	b.w	fd88 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d78e <sdc_hci_cmd_le_set_data_length>:
    d78e:	f002 bb09 	b.w	fda4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d792 <sdc_hci_cmd_le_set_default_phy>:
    d792:	f7f9 bd5d 	b.w	7250 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d796 <sdc_hci_cmd_le_set_event_mask>:
    d796:	b510      	push	{r4, lr}
    d798:	f7f3 fac6 	bl	d28 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d79c:	2000      	movs	r0, #0
    d79e:	bd10      	pop	{r4, pc}

0000d7a0 <sdc_hci_cmd_le_set_host_channel_classification>:
    d7a0:	f7f9 bd7e 	b.w	72a0 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000d7a4 <sdc_hci_cmd_le_set_phy>:
    d7a4:	f002 bb1e 	b.w	fde4 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d7a8 <sdc_hci_cmd_le_set_privacy_mode>:
    d7a8:	f002 bb35 	b.w	fe16 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d7ac <sdc_hci_cmd_le_set_random_address>:
    d7ac:	f002 bb49 	b.w	fe42 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d7b0 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d7b0:	f002 bb55 	b.w	fe5e <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d7b4 <sdc_hci_cmd_le_set_scan_enable>:
    d7b4:	f002 bb5c 	b.w	fe70 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d7b8 <sdc_hci_cmd_le_set_scan_params>:
    d7b8:	f002 bb70 	b.w	fe9c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000d7bc <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d7bc:	f002 bbcd 	b.w	ff5a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d7c0 <sdc_hci_cmd_lc_disconnect>:
    d7c0:	f002 b96d 	b.w	fa9e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d7c4 <sdc_hci_cmd_lc_read_remote_version_information>:
    d7c4:	f7f9 bdfc 	b.w	73c0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d7c8:	b570      	push	{r4, r5, r6, lr}
    d7ca:	880b      	ldrh	r3, [r1, #0]
    d7cc:	7cc4      	ldrb	r4, [r0, #19]
    d7ce:	f100 0518 	add.w	r5, r0, #24
    d7d2:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d7d6:	8802      	ldrh	r2, [r0, #0]
    d7d8:	4435      	add	r5, r6
    d7da:	1d64      	adds	r4, r4, #5
    d7dc:	882d      	ldrh	r5, [r5, #0]
    d7de:	4422      	add	r2, r4
    d7e0:	b292      	uxth	r2, r2
    d7e2:	4425      	add	r5, r4
    d7e4:	1e54      	subs	r4, r2, #1
    d7e6:	442c      	add	r4, r5
    d7e8:	fb94 f4f2 	sdiv	r4, r4, r2
    d7ec:	fb02 6204 	mla	r2, r2, r4, r6
    d7f0:	8840      	ldrh	r0, [r0, #2]
    d7f2:	b292      	uxth	r2, r2
    d7f4:	4290      	cmp	r0, r2
    d7f6:	d903      	bls.n	d800 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d7f8:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d7fc:	4310      	orrs	r0, r2
    d7fe:	e002      	b.n	d806 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d800:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d804:	4398      	bics	r0, r3
    d806:	8008      	strh	r0, [r1, #0]
    d808:	bd70      	pop	{r4, r5, r6, pc}
    d80a:	0442      	lsls	r2, r0, #17
    d80c:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d810:	d107      	bne.n	d822 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d812:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d816:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d81a:	4288      	cmp	r0, r1
    d81c:	d001      	beq.n	d822 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d81e:	2001      	movs	r0, #1
    d820:	4770      	bx	lr
    d822:	2000      	movs	r0, #0
    d824:	4770      	bx	lr

0000d826 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d826:	8881      	ldrh	r1, [r0, #4]
    d828:	88c0      	ldrh	r0, [r0, #6]
    d82a:	4288      	cmp	r0, r1
    d82c:	d101      	bne.n	d832 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d82e:	2001      	movs	r0, #1
    d830:	4770      	bx	lr
    d832:	2000      	movs	r0, #0
    d834:	4770      	bx	lr

0000d836 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d83a:	460f      	mov	r7, r1
    d83c:	4604      	mov	r4, r0
    d83e:	f100 0118 	add.w	r1, r0, #24
    d842:	8880      	ldrh	r0, [r0, #4]
    d844:	2600      	movs	r6, #0
    d846:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d84a:	1845      	adds	r5, r0, r1
    d84c:	603e      	str	r6, [r7, #0]
    d84e:	89e0      	ldrh	r0, [r4, #14]
    d850:	2800      	cmp	r0, #0
    d852:	d016      	beq.n	d882 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d854:	8961      	ldrh	r1, [r4, #10]
    d856:	4408      	add	r0, r1
    d858:	b280      	uxth	r0, r0
    d85a:	8160      	strh	r0, [r4, #10]
    d85c:	8829      	ldrh	r1, [r5, #0]
    d85e:	4288      	cmp	r0, r1
    d860:	d905      	bls.n	d86e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d862:	f240 1151 	movw	r1, #337	; 0x151
    d866:	f04f 0014 	mov.w	r0, #20
    d86a:	f7f3 f8d7 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d86e:	d106      	bne.n	d87e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d870:	f104 0104 	add.w	r1, r4, #4
    d874:	4620      	mov	r0, r4
    d876:	f7ff ffa7 	bl	d7c8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d87a:	8166      	strh	r6, [r4, #10]
    d87c:	603d      	str	r5, [r7, #0]
    d87e:	81e6      	strh	r6, [r4, #14]
    d880:	2001      	movs	r0, #1
    d882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d886 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d88a:	4604      	mov	r4, r0
    d88c:	f100 0318 	add.w	r3, r0, #24
    d890:	88c0      	ldrh	r0, [r0, #6]
    d892:	460e      	mov	r6, r1
    d894:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d898:	8a20      	ldrh	r0, [r4, #16]
    d89a:	19d9      	adds	r1, r3, r7
    d89c:	b108      	cbz	r0, d8a2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d89e:	42b0      	cmp	r0, r6
    d8a0:	d202      	bcs.n	d8a8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d8a2:	2000      	movs	r0, #0
    d8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d8a8:	89a0      	ldrh	r0, [r4, #12]
    d8aa:	2500      	movs	r5, #0
    d8ac:	b140      	cbz	r0, d8c0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d8ae:	f8b1 c000 	ldrh.w	ip, [r1]
    d8b2:	4560      	cmp	r0, ip
    d8b4:	d006      	beq.n	d8c4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d8b6:	f44f 7101 	mov.w	r1, #516	; 0x204
    d8ba:	2014      	movs	r0, #20
    d8bc:	f7f3 f8ae 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8c0:	800d      	strh	r5, [r1, #0]
    d8c2:	e00e      	b.n	d8e2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d8c4:	f894 c013 	ldrb.w	ip, [r4, #19]
    d8c8:	4418      	add	r0, r3
    d8ca:	f10c 0c05 	add.w	ip, ip, #5
    d8ce:	44bc      	add	ip, r7
    d8d0:	4460      	add	r0, ip
    d8d2:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d8d6:	f820 cc03 	strh.w	ip, [r0, #-3]
    d8da:	f894 c016 	ldrb.w	ip, [r4, #22]
    d8de:	f800 cc01 	strb.w	ip, [r0, #-1]
    d8e2:	89a0      	ldrh	r0, [r4, #12]
    d8e4:	4430      	add	r0, r6
    d8e6:	81a0      	strh	r0, [r4, #12]
    d8e8:	8808      	ldrh	r0, [r1, #0]
    d8ea:	4430      	add	r0, r6
    d8ec:	8008      	strh	r0, [r1, #0]
    d8ee:	b12a      	cbz	r2, d8fc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d8f0:	1da1      	adds	r1, r4, #6
    d8f2:	4620      	mov	r0, r4
    d8f4:	f7ff ff68 	bl	d7c8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d8f8:	81a5      	strh	r5, [r4, #12]
    d8fa:	e00a      	b.n	d912 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d8fc:	7ce0      	ldrb	r0, [r4, #19]
    d8fe:	89a1      	ldrh	r1, [r4, #12]
    d900:	1d40      	adds	r0, r0, #5
    d902:	4438      	add	r0, r7
    d904:	4419      	add	r1, r3
    d906:	4408      	add	r0, r1
    d908:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d90c:	82a1      	strh	r1, [r4, #20]
    d90e:	7880      	ldrb	r0, [r0, #2]
    d910:	75a0      	strb	r0, [r4, #22]
    d912:	8225      	strh	r5, [r4, #16]
    d914:	2001      	movs	r0, #1
    d916:	e7c5      	b.n	d8a4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d918 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d918:	1c80      	adds	r0, r0, #2
    d91a:	4770      	bx	lr

0000d91c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d91c:	b510      	push	{r4, lr}
    d91e:	88c2      	ldrh	r2, [r0, #6]
    d920:	8903      	ldrh	r3, [r0, #8]
    d922:	f3c2 010e 	ubfx	r1, r2, #0, #15
    d926:	f3c3 040e 	ubfx	r4, r3, #0, #15
    d92a:	1a61      	subs	r1, r4, r1
    d92c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d934:	429a      	cmp	r2, r3
    d936:	d101      	bne.n	d93c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d938:	8842      	ldrh	r2, [r0, #2]
    d93a:	4411      	add	r1, r2
    d93c:	7cc2      	ldrb	r2, [r0, #19]
    d93e:	8800      	ldrh	r0, [r0, #0]
    d940:	4410      	add	r0, r2
    d942:	1d40      	adds	r0, r0, #5
    d944:	b280      	uxth	r0, r0
    d946:	fb91 f0f0 	sdiv	r0, r1, r0
    d94a:	b280      	uxth	r0, r0
    d94c:	bd10      	pop	{r4, pc}

0000d94e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d94e:	b510      	push	{r4, lr}
    d950:	4604      	mov	r4, r0
    d952:	88c0      	ldrh	r0, [r0, #6]
    d954:	88a1      	ldrh	r1, [r4, #4]
    d956:	4281      	cmp	r1, r0
    d958:	d003      	beq.n	d962 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d95a:	8960      	ldrh	r0, [r4, #10]
    d95c:	b908      	cbnz	r0, d962 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d95e:	89e0      	ldrh	r0, [r4, #14]
    d960:	b108      	cbz	r0, d966 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d962:	2000      	movs	r0, #0
    d964:	bd10      	pop	{r4, pc}
    d966:	1d21      	adds	r1, r4, #4
    d968:	4620      	mov	r0, r4
    d96a:	f7ff ff2d 	bl	d7c8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d96e:	2000      	movs	r0, #0
    d970:	81e0      	strh	r0, [r4, #14]
    d972:	2001      	movs	r0, #1
    d974:	bd10      	pop	{r4, pc}

0000d976 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d976:	b510      	push	{r4, lr}
    d978:	4604      	mov	r4, r0
    d97a:	f100 0218 	add.w	r2, r0, #24
    d97e:	88c0      	ldrh	r0, [r0, #6]
    d980:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d984:	4402      	add	r2, r0
    d986:	8820      	ldrh	r0, [r4, #0]
    d988:	2845      	cmp	r0, #69	; 0x45
    d98a:	d200      	bcs.n	d98e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d98c:	2045      	movs	r0, #69	; 0x45
    d98e:	4288      	cmp	r0, r1
    d990:	d204      	bcs.n	d99c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d992:	f44f 7182 	mov.w	r1, #260	; 0x104
    d996:	2014      	movs	r0, #20
    d998:	f7f3 f840 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d99c:	7ca0      	ldrb	r0, [r4, #18]
    d99e:	2800      	cmp	r0, #0
    d9a0:	d003      	beq.n	d9aa <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d9a2:	8810      	ldrh	r0, [r2, #0]
    d9a4:	4288      	cmp	r0, r1
    d9a6:	d201      	bcs.n	d9ac <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d9a8:	2000      	movs	r0, #0
    d9aa:	bd10      	pop	{r4, pc}
    d9ac:	8011      	strh	r1, [r2, #0]
    d9ae:	1da1      	adds	r1, r4, #6
    d9b0:	4620      	mov	r0, r4
    d9b2:	f7ff ff09 	bl	d7c8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d9b6:	2000      	movs	r0, #0
    d9b8:	74a0      	strb	r0, [r4, #18]
    d9ba:	2001      	movs	r0, #1
    d9bc:	bd10      	pop	{r4, pc}

0000d9be <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d9be:	b510      	push	{r4, lr}
    d9c0:	88c4      	ldrh	r4, [r0, #6]
    d9c2:	8883      	ldrh	r3, [r0, #4]
    d9c4:	4601      	mov	r1, r0
    d9c6:	f100 0218 	add.w	r2, r0, #24
    d9ca:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d9ce:	4410      	add	r0, r2
    d9d0:	42a3      	cmp	r3, r4
    d9d2:	d002      	beq.n	d9da <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d9d4:	8949      	ldrh	r1, [r1, #10]
    d9d6:	2900      	cmp	r1, #0
    d9d8:	d000      	beq.n	d9dc <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d9da:	2000      	movs	r0, #0
    d9dc:	bd10      	pop	{r4, pc}

0000d9de <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d9de:	8803      	ldrh	r3, [r0, #0]
    d9e0:	2b45      	cmp	r3, #69	; 0x45
    d9e2:	d200      	bcs.n	d9e6 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d9e4:	2345      	movs	r3, #69	; 0x45
    d9e6:	8013      	strh	r3, [r2, #0]
    d9e8:	88c2      	ldrh	r2, [r0, #6]
    d9ea:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d9ee:	f100 0218 	add.w	r2, r0, #24
    d9f2:	441a      	add	r2, r3
    d9f4:	600a      	str	r2, [r1, #0]
    d9f6:	8980      	ldrh	r0, [r0, #12]
    d9f8:	4770      	bx	lr

0000d9fa <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d9fa:	7cc0      	ldrb	r0, [r0, #19]
    d9fc:	1d40      	adds	r0, r0, #5
    d9fe:	4408      	add	r0, r1
    da00:	1ec0      	subs	r0, r0, #3
    da02:	6010      	str	r0, [r2, #0]
    da04:	8808      	ldrh	r0, [r1, #0]
    da06:	4770      	bx	lr

0000da08 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    da08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da0c:	460e      	mov	r6, r1
    da0e:	88c1      	ldrh	r1, [r0, #6]
    da10:	8902      	ldrh	r2, [r0, #8]
    da12:	4604      	mov	r4, r0
    da14:	f100 0818 	add.w	r8, r0, #24
    da18:	8800      	ldrh	r0, [r0, #0]
    da1a:	f3c1 050e 	ubfx	r5, r1, #0, #15
    da1e:	f3c2 070e 	ubfx	r7, r2, #0, #15
    da22:	2845      	cmp	r0, #69	; 0x45
    da24:	d200      	bcs.n	da28 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    da26:	2045      	movs	r0, #69	; 0x45
    da28:	42b0      	cmp	r0, r6
    da2a:	d203      	bcs.n	da34 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    da2c:	21c6      	movs	r1, #198	; 0xc6
    da2e:	2014      	movs	r0, #20
    da30:	f7f2 fff4 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da34:	4610      	mov	r0, r2
    da36:	f7ff fee8 	bl	d80a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    da3a:	b110      	cbz	r0, da42 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    da3c:	2000      	movs	r0, #0
    da3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da42:	42af      	cmp	r7, r5
    da44:	d908      	bls.n	da58 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    da46:	7ce1      	ldrb	r1, [r4, #19]
    da48:	1b78      	subs	r0, r7, r5
    da4a:	1a40      	subs	r0, r0, r1
    da4c:	1f40      	subs	r0, r0, #5
    da4e:	4286      	cmp	r6, r0
    da50:	dd02      	ble.n	da58 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    da52:	2000      	movs	r0, #0
    da54:	74a0      	strb	r0, [r4, #18]
    da56:	e7f1      	b.n	da3c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    da58:	eb08 0005 	add.w	r0, r8, r5
    da5c:	2101      	movs	r1, #1
    da5e:	8006      	strh	r6, [r0, #0]
    da60:	74a1      	strb	r1, [r4, #18]
    da62:	e7ec      	b.n	da3e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000da64 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    da64:	b538      	push	{r3, r4, r5, lr}
    da66:	88c4      	ldrh	r4, [r0, #6]
    da68:	8881      	ldrh	r1, [r0, #4]
    da6a:	f100 0218 	add.w	r2, r0, #24
    da6e:	f3c1 030e 	ubfx	r3, r1, #0, #15
    da72:	441a      	add	r2, r3
    da74:	42a1      	cmp	r1, r4
    da76:	d010      	beq.n	da9a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    da78:	8943      	ldrh	r3, [r0, #10]
    da7a:	89c5      	ldrh	r5, [r0, #14]
    da7c:	8812      	ldrh	r2, [r2, #0]
    da7e:	442b      	add	r3, r5
    da80:	4293      	cmp	r3, r2
    da82:	d308      	bcc.n	da96 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    da84:	f8ad 1000 	strh.w	r1, [sp]
    da88:	4669      	mov	r1, sp
    da8a:	f7ff fe9d 	bl	d7c8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    da8e:	f8bd 0000 	ldrh.w	r0, [sp]
    da92:	42a0      	cmp	r0, r4
    da94:	d001      	beq.n	da9a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    da96:	2001      	movs	r0, #1
    da98:	bd38      	pop	{r3, r4, r5, pc}
    da9a:	2000      	movs	r0, #0
    da9c:	bd38      	pop	{r3, r4, r5, pc}

0000da9e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    da9e:	b570      	push	{r4, r5, r6, lr}
    daa0:	88c6      	ldrh	r6, [r0, #6]
    daa2:	8885      	ldrh	r5, [r0, #4]
    daa4:	4603      	mov	r3, r0
    daa6:	f100 0418 	add.w	r4, r0, #24
    daaa:	f3c5 000e 	ubfx	r0, r5, #0, #15
    daae:	4420      	add	r0, r4
    dab0:	42b5      	cmp	r5, r6
    dab2:	d102      	bne.n	daba <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    dab4:	2000      	movs	r0, #0
    dab6:	81d8      	strh	r0, [r3, #14]
    dab8:	bd70      	pop	{r4, r5, r6, pc}
    daba:	8804      	ldrh	r4, [r0, #0]
    dabc:	895d      	ldrh	r5, [r3, #10]
    dabe:	7cde      	ldrb	r6, [r3, #19]
    dac0:	1b64      	subs	r4, r4, r5
    dac2:	4435      	add	r5, r6
    dac4:	4428      	add	r0, r5
    dac6:	880d      	ldrh	r5, [r1, #0]
    dac8:	b2a4      	uxth	r4, r4
    daca:	1c80      	adds	r0, r0, #2
    dacc:	42a5      	cmp	r5, r4
    dace:	d900      	bls.n	dad2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    dad0:	800c      	strh	r4, [r1, #0]
    dad2:	895c      	ldrh	r4, [r3, #10]
    dad4:	b124      	cbz	r4, dae0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    dad6:	2400      	movs	r4, #0
    dad8:	7014      	strb	r4, [r2, #0]
    dada:	8809      	ldrh	r1, [r1, #0]
    dadc:	81d9      	strh	r1, [r3, #14]
    dade:	bd70      	pop	{r4, r5, r6, pc}
    dae0:	2401      	movs	r4, #1
    dae2:	e7f9      	b.n	dad8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000dae4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    dae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dae8:	461d      	mov	r5, r3
    daea:	4616      	mov	r6, r2
    daec:	9f06      	ldr	r7, [sp, #24]
    daee:	460b      	mov	r3, r1
    daf0:	4604      	mov	r4, r0
    daf2:	463a      	mov	r2, r7
    daf4:	4629      	mov	r1, r5
    daf6:	4630      	mov	r0, r6
    daf8:	f000 f839 	bl	db6e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dafc:	4283      	cmp	r3, r0
    dafe:	d201      	bcs.n	db04 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    db00:	219e      	movs	r1, #158	; 0x9e
    db02:	e012      	b.n	db2a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    db04:	07a0      	lsls	r0, r4, #30
    db06:	d001      	beq.n	db0c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    db08:	219f      	movs	r1, #159	; 0x9f
    db0a:	e00e      	b.n	db2a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    db0c:	2218      	movs	r2, #24
    db0e:	2100      	movs	r1, #0
    db10:	4620      	mov	r0, r4
    db12:	f003 faee 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    db16:	19a8      	adds	r0, r5, r6
    db18:	1d40      	adds	r0, r0, #5
    db1a:	4378      	muls	r0, r7
    db1c:	b280      	uxth	r0, r0
    db1e:	74e5      	strb	r5, [r4, #19]
    db20:	8060      	strh	r0, [r4, #2]
    db22:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    db26:	d903      	bls.n	db30 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    db28:	21a4      	movs	r1, #164	; 0xa4
    db2a:	2014      	movs	r0, #20
    db2c:	f7f2 ff76 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db30:	8026      	strh	r6, [r4, #0]
    db32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000db36 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    db36:	b570      	push	{r4, r5, r6, lr}
    db38:	460b      	mov	r3, r1
    db3a:	4604      	mov	r4, r0
    db3c:	f100 0118 	add.w	r1, r0, #24
    db40:	8902      	ldrh	r2, [r0, #8]
    db42:	8880      	ldrh	r0, [r0, #4]
    db44:	f3c2 050e 	ubfx	r5, r2, #0, #15
    db48:	440d      	add	r5, r1
    db4a:	4282      	cmp	r2, r0
    db4c:	d101      	bne.n	db52 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    db4e:	2000      	movs	r0, #0
    db50:	bd70      	pop	{r4, r5, r6, pc}
    db52:	b123      	cbz	r3, db5e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    db54:	7ce2      	ldrb	r2, [r4, #19]
    db56:	1ca9      	adds	r1, r5, #2
    db58:	4618      	mov	r0, r3
    db5a:	f003 fa50 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db5e:	882d      	ldrh	r5, [r5, #0]
    db60:	f104 0108 	add.w	r1, r4, #8
    db64:	4620      	mov	r0, r4
    db66:	f7ff fe2f 	bl	d7c8 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    db6a:	4628      	mov	r0, r5
    db6c:	bd70      	pop	{r4, r5, r6, pc}

0000db6e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    db6e:	4401      	add	r1, r0
    db70:	1d49      	adds	r1, r1, #5
    db72:	4351      	muls	r1, r2
    db74:	b28a      	uxth	r2, r1
    db76:	2100      	movs	r1, #0
    db78:	2845      	cmp	r0, #69	; 0x45
    db7a:	d202      	bcs.n	db82 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    db7c:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    db80:	b281      	uxth	r1, r0
    db82:	3218      	adds	r2, #24
    db84:	1850      	adds	r0, r2, r1
    db86:	b280      	uxth	r0, r0
    db88:	4770      	bx	lr

0000db8a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    db8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db8e:	4688      	mov	r8, r1
    db90:	88c1      	ldrh	r1, [r0, #6]
    db92:	4604      	mov	r4, r0
    db94:	8900      	ldrh	r0, [r0, #8]
    db96:	f3c1 060e 	ubfx	r6, r1, #0, #15
    db9a:	f104 0518 	add.w	r5, r4, #24
    db9e:	f3c0 070e 	ubfx	r7, r0, #0, #15
    dba2:	eb05 0906 	add.w	r9, r5, r6
    dba6:	f7ff fe30 	bl	d80a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    dbaa:	2200      	movs	r2, #0
    dbac:	b998      	cbnz	r0, dbd6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    dbae:	8820      	ldrh	r0, [r4, #0]
    dbb0:	2845      	cmp	r0, #69	; 0x45
    dbb2:	d200      	bcs.n	dbb6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    dbb4:	2045      	movs	r0, #69	; 0x45
    dbb6:	42b7      	cmp	r7, r6
    dbb8:	d906      	bls.n	dbc8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    dbba:	7ce3      	ldrb	r3, [r4, #19]
    dbbc:	1bb9      	subs	r1, r7, r6
    dbbe:	1ac9      	subs	r1, r1, r3
    dbc0:	1f49      	subs	r1, r1, #5
    dbc2:	4281      	cmp	r1, r0
    dbc4:	da00      	bge.n	dbc8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    dbc6:	4608      	mov	r0, r1
    dbc8:	89a1      	ldrh	r1, [r4, #12]
    dbca:	b111      	cbz	r1, dbd2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    dbcc:	f8b9 3000 	ldrh.w	r3, [r9]
    dbd0:	1ac0      	subs	r0, r0, r3
    dbd2:	4540      	cmp	r0, r8
    dbd4:	da03      	bge.n	dbde <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    dbd6:	8222      	strh	r2, [r4, #16]
    dbd8:	2000      	movs	r0, #0
    dbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dbde:	7ce0      	ldrb	r0, [r4, #19]
    dbe0:	4429      	add	r1, r5
    dbe2:	1d40      	adds	r0, r0, #5
    dbe4:	4430      	add	r0, r6
    dbe6:	4408      	add	r0, r1
    dbe8:	f8a4 8010 	strh.w	r8, [r4, #16]
    dbec:	1ec0      	subs	r0, r0, #3
    dbee:	e7f4      	b.n	dbda <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000dbf0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    dbf0:	b570      	push	{r4, r5, r6, lr}
    dbf2:	2300      	movs	r3, #0
    dbf4:	f1a1 0208 	sub.w	r2, r1, #8
    dbf8:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    dbfc:	42a2      	cmp	r2, r4
    dbfe:	d304      	bcc.n	dc0a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    dc00:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    dc04:	2015      	movs	r0, #21
    dc06:	f7f2 ff09 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc0a:	6802      	ldr	r2, [r0, #0]
    dc0c:	b90a      	cbnz	r2, dc12 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    dc0e:	e01e      	b.n	dc4e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    dc10:	4610      	mov	r0, r2
    dc12:	6802      	ldr	r2, [r0, #0]
    dc14:	8893      	ldrh	r3, [r2, #4]
    dc16:	428b      	cmp	r3, r1
    dc18:	d002      	beq.n	dc20 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    dc1a:	6813      	ldr	r3, [r2, #0]
    dc1c:	2b00      	cmp	r3, #0
    dc1e:	d1f7      	bne.n	dc10 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    dc20:	8894      	ldrh	r4, [r2, #4]
    dc22:	4613      	mov	r3, r2
    dc24:	428c      	cmp	r4, r1
    dc26:	d101      	bne.n	dc2c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    dc28:	6811      	ldr	r1, [r2, #0]
    dc2a:	e00d      	b.n	dc48 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    dc2c:	f101 0508 	add.w	r5, r1, #8
    dc30:	b2ae      	uxth	r6, r5
    dc32:	2500      	movs	r5, #0
    dc34:	42b4      	cmp	r4, r6
    dc36:	d309      	bcc.n	dc4c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    dc38:	1a64      	subs	r4, r4, r1
    dc3a:	4411      	add	r1, r2
    dc3c:	600d      	str	r5, [r1, #0]
    dc3e:	808c      	strh	r4, [r1, #4]
    dc40:	6802      	ldr	r2, [r0, #0]
    dc42:	6812      	ldr	r2, [r2, #0]
    dc44:	6002      	str	r2, [r0, #0]
    dc46:	600a      	str	r2, [r1, #0]
    dc48:	6001      	str	r1, [r0, #0]
    dc4a:	e000      	b.n	dc4e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    dc4c:	2300      	movs	r3, #0
    dc4e:	4618      	mov	r0, r3
    dc50:	bd70      	pop	{r4, r5, r6, pc}

0000dc52 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    dc52:	b510      	push	{r4, lr}
    dc54:	000c      	movs	r4, r1
    dc56:	d004      	beq.n	dc62 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    dc58:	2c08      	cmp	r4, #8
    dc5a:	d207      	bcs.n	dc6c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    dc5c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    dc60:	e00a      	b.n	dc78 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    dc62:	b108      	cbz	r0, dc68 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    dc64:	2100      	movs	r1, #0
    dc66:	6001      	str	r1, [r0, #0]
    dc68:	2000      	movs	r0, #0
    dc6a:	bd10      	pop	{r4, pc}
    dc6c:	b158      	cbz	r0, dc86 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    dc6e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    dc72:	d304      	bcc.n	dc7e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    dc74:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    dc78:	2015      	movs	r0, #21
    dc7a:	f7f2 fecf 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc7e:	b2a1      	uxth	r1, r4
    dc80:	6800      	ldr	r0, [r0, #0]
    dc82:	f000 f814 	bl	dcae <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    dc86:	1d20      	adds	r0, r4, #4
    dc88:	bd10      	pop	{r4, pc}

0000dc8a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    dc8a:	2100      	movs	r1, #0
    dc8c:	6802      	ldr	r2, [r0, #0]
    dc8e:	e003      	b.n	dc98 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    dc90:	8893      	ldrh	r3, [r2, #4]
    dc92:	6812      	ldr	r2, [r2, #0]
    dc94:	4419      	add	r1, r3
    dc96:	b289      	uxth	r1, r1
    dc98:	2a00      	cmp	r2, #0
    dc9a:	d1f9      	bne.n	dc90 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    dc9c:	f000 b807 	b.w	dcae <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000dca0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    dca0:	2300      	movs	r3, #0
    dca2:	600b      	str	r3, [r1, #0]
    dca4:	808a      	strh	r2, [r1, #4]
    dca6:	6802      	ldr	r2, [r0, #0]
    dca8:	600a      	str	r2, [r1, #0]
    dcaa:	6001      	str	r1, [r0, #0]
    dcac:	4770      	bx	lr
    dcae:	2300      	movs	r3, #0
    dcb0:	6043      	str	r3, [r0, #4]
    dcb2:	1d02      	adds	r2, r0, #4
    dcb4:	8101      	strh	r1, [r0, #8]
    dcb6:	6002      	str	r2, [r0, #0]
    dcb8:	4770      	bx	lr
    dcba:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    dcbe:	8159      	strh	r1, [r3, #10]
    dcc0:	4611      	mov	r1, r2
    dcc2:	f000 b814 	b.w	dcee <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    dcc6:	b170      	cbz	r0, dce6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x46>
    dcc8:	7882      	ldrb	r2, [r0, #2]
    dcca:	fbb1 f3f2 	udiv	r3, r1, r2
    dcce:	fb02 1213 	mls	r2, r2, r3, r1
    dcd2:	b2d2      	uxtb	r2, r2
    dcd4:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    dcd8:	895b      	ldrh	r3, [r3, #10]
    dcda:	428b      	cmp	r3, r1
    dcdc:	d101      	bne.n	dce2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    dcde:	4610      	mov	r0, r2
    dce0:	4770      	bx	lr
    dce2:	78c3      	ldrb	r3, [r0, #3]
    dce4:	b10b      	cbz	r3, dcea <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4a>
    dce6:	20ff      	movs	r0, #255	; 0xff
    dce8:	4770      	bx	lr
    dcea:	f7f3 b965 	b.w	fb8 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    dcee:	8802      	ldrh	r2, [r0, #0]
    dcf0:	fb01 0102 	mla	r1, r1, r2, r0
    dcf4:	7880      	ldrb	r0, [r0, #2]
    dcf6:	220a      	movs	r2, #10
    dcf8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    dcfc:	4408      	add	r0, r1
    dcfe:	4770      	bx	lr

0000dd00 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    dd00:	b51c      	push	{r2, r3, r4, lr}
    dd02:	4604      	mov	r4, r0
    dd04:	2000      	movs	r0, #0
    dd06:	9001      	str	r0, [sp, #4]
    dd08:	9000      	str	r0, [sp, #0]
    dd0a:	f88d 4006 	strb.w	r4, [sp, #6]
    dd0e:	e00a      	b.n	dd26 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    dd10:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    dd14:	4621      	mov	r1, r4
    dd16:	f7f3 f9f9 	bl	110c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    dd1a:	b120      	cbz	r0, dd26 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    dd1c:	f240 217e 	movw	r1, #638	; 0x27e
    dd20:	2017      	movs	r0, #23
    dd22:	f7f2 fe7b 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd26:	4668      	mov	r0, sp
    dd28:	f7f3 f9a0 	bl	106c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    dd2c:	2800      	cmp	r0, #0
    dd2e:	d0ef      	beq.n	dd10 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    dd30:	bd1c      	pop	{r2, r3, r4, pc}

0000dd32 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    dd32:	b570      	push	{r4, r5, r6, lr}
    dd34:	460e      	mov	r6, r1
    dd36:	461d      	mov	r5, r3
    dd38:	4611      	mov	r1, r2
    dd3a:	f000 f813 	bl	dd64 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    dd3e:	4604      	mov	r4, r0
    dd40:	4629      	mov	r1, r5
    dd42:	4630      	mov	r0, r6
    dd44:	f000 f804 	bl	dd50 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    dd48:	4420      	add	r0, r4
    dd4a:	1d00      	adds	r0, r0, #4
    dd4c:	b280      	uxth	r0, r0
    dd4e:	bd70      	pop	{r4, r5, r6, pc}
    dd50:	b510      	push	{r4, lr}
    dd52:	460a      	mov	r2, r1
    dd54:	2109      	movs	r1, #9
    dd56:	f7ff ff0a 	bl	db6e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dd5a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    dd5e:	1cc0      	adds	r0, r0, #3
    dd60:	4008      	ands	r0, r1
    dd62:	bd10      	pop	{r4, pc}
    dd64:	b510      	push	{r4, lr}
    dd66:	460a      	mov	r2, r1
    dd68:	210a      	movs	r1, #10
    dd6a:	f7ff ff00 	bl	db6e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dd6e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    dd72:	1cc0      	adds	r0, r0, #3
    dd74:	4008      	ands	r0, r1
    dd76:	bd10      	pop	{r4, pc}
    dd78:	2800      	cmp	r0, #0
    dd7a:	db09      	blt.n	dd90 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5e>
    dd7c:	f000 021f 	and.w	r2, r0, #31
    dd80:	2101      	movs	r1, #1
    dd82:	4091      	lsls	r1, r2
    dd84:	0940      	lsrs	r0, r0, #5
    dd86:	0080      	lsls	r0, r0, #2
    dd88:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dd8c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dd90:	4770      	bx	lr
    dd92:	2800      	cmp	r0, #0
    dd94:	db0d      	blt.n	ddb2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    dd96:	f000 021f 	and.w	r2, r0, #31
    dd9a:	2101      	movs	r1, #1
    dd9c:	4091      	lsls	r1, r2
    dd9e:	0940      	lsrs	r0, r0, #5
    dda0:	0080      	lsls	r0, r0, #2
    dda2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dda6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    ddaa:	f3bf 8f4f 	dsb	sy
    ddae:	f3bf 8f6f 	isb	sy
    ddb2:	4770      	bx	lr
    ddb4:	b510      	push	{r4, lr}
    ddb6:	200e      	movs	r0, #14
    ddb8:	f7ff ffeb 	bl	dd92 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    ddbc:	200e      	movs	r0, #14
    ddbe:	f7ff ffdb 	bl	dd78 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    ddc2:	200f      	movs	r0, #15
    ddc4:	f7ff ffe5 	bl	dd92 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    ddc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ddcc:	200f      	movs	r0, #15
    ddce:	f7ff bfd3 	b.w	dd78 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    ddd2:	2800      	cmp	r0, #0
    ddd4:	db09      	blt.n	ddea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    ddd6:	f000 021f 	and.w	r2, r0, #31
    ddda:	2101      	movs	r1, #1
    dddc:	4091      	lsls	r1, r2
    ddde:	0940      	lsrs	r0, r0, #5
    dde0:	0080      	lsls	r0, r0, #2
    dde2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dde6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ddea:	4770      	bx	lr
    ddec:	5840      	ldr	r0, [r0, r1]
    ddee:	2800      	cmp	r0, #0
    ddf0:	d000      	beq.n	ddf4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    ddf2:	2001      	movs	r0, #1
    ddf4:	4770      	bx	lr

0000ddf6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    ddf6:	b510      	push	{r4, lr}
    ddf8:	4604      	mov	r4, r0
    ddfa:	4620      	mov	r0, r4
    ddfc:	f7f3 fb1a 	bl	1434 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    de00:	2811      	cmp	r0, #17
    de02:	d0fa      	beq.n	ddfa <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    de04:	bd10      	pop	{r4, pc}

0000de06 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    de06:	b510      	push	{r4, lr}
    de08:	f7ff fff5 	bl	ddf6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    de0c:	2800      	cmp	r0, #0
    de0e:	d003      	beq.n	de18 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    de10:	21a9      	movs	r1, #169	; 0xa9
    de12:	201d      	movs	r0, #29
    de14:	f7f2 fe02 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de18:	bd10      	pop	{r4, pc}

0000de1a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    de1a:	f7f3 bc69 	b.w	16f0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000de1e <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    de1e:	f7f3 bc57 	b.w	16d0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000de22 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    de22:	b510      	push	{r4, lr}
    de24:	4050      	eors	r0, r2
    de26:	780a      	ldrb	r2, [r1, #0]
    de28:	781c      	ldrb	r4, [r3, #0]
    de2a:	4062      	eors	r2, r4
    de2c:	4410      	add	r0, r2
    de2e:	784a      	ldrb	r2, [r1, #1]
    de30:	785c      	ldrb	r4, [r3, #1]
    de32:	4062      	eors	r2, r4
    de34:	4410      	add	r0, r2
    de36:	788a      	ldrb	r2, [r1, #2]
    de38:	789c      	ldrb	r4, [r3, #2]
    de3a:	4062      	eors	r2, r4
    de3c:	4410      	add	r0, r2
    de3e:	78ca      	ldrb	r2, [r1, #3]
    de40:	78dc      	ldrb	r4, [r3, #3]
    de42:	4062      	eors	r2, r4
    de44:	4410      	add	r0, r2
    de46:	790a      	ldrb	r2, [r1, #4]
    de48:	791c      	ldrb	r4, [r3, #4]
    de4a:	7949      	ldrb	r1, [r1, #5]
    de4c:	4062      	eors	r2, r4
    de4e:	4410      	add	r0, r2
    de50:	795a      	ldrb	r2, [r3, #5]
    de52:	4051      	eors	r1, r2
    de54:	42c1      	cmn	r1, r0
    de56:	d101      	bne.n	de5c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    de58:	2001      	movs	r0, #1
    de5a:	bd10      	pop	{r4, pc}
    de5c:	2000      	movs	r0, #0
    de5e:	bd10      	pop	{r4, pc}

0000de60 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    de60:	b510      	push	{r4, lr}
    de62:	2900      	cmp	r1, #0
    de64:	4604      	mov	r4, r0
    de66:	f04f 0106 	mov.w	r1, #6
    de6a:	d002      	beq.n	de72 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    de6c:	f7f2 fe6a 	bl	b44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    de70:	e001      	b.n	de76 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    de72:	f7f2 fe75 	bl	b60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    de76:	7960      	ldrb	r0, [r4, #5]
    de78:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    de7c:	7160      	strb	r0, [r4, #5]
    de7e:	bd10      	pop	{r4, pc}

0000de80 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    de80:	4770      	bx	lr

0000de82 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    de82:	b530      	push	{r4, r5, lr}
    de84:	460c      	mov	r4, r1
    de86:	4605      	mov	r5, r0
    de88:	b08d      	sub	sp, #52	; 0x34
    de8a:	f04f 0103 	mov.w	r1, #3
    de8e:	f104 0003 	add.w	r0, r4, #3
    de92:	b112      	cbz	r2, de9a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    de94:	f7f2 fe56 	bl	b44 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    de98:	e001      	b.n	de9e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    de9a:	f7f2 fe61 	bl	b60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    de9e:	7960      	ldrb	r0, [r4, #5]
    dea0:	220d      	movs	r2, #13
    dea2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dea6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    deaa:	7160      	strb	r0, [r4, #5]
    deac:	2100      	movs	r1, #0
    deae:	a804      	add	r0, sp, #16
    deb0:	f003 f91f 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    deb4:	78e0      	ldrb	r0, [r4, #3]
    deb6:	f88d 001f 	strb.w	r0, [sp, #31]
    deba:	7920      	ldrb	r0, [r4, #4]
    debc:	f88d 001e 	strb.w	r0, [sp, #30]
    dec0:	7960      	ldrb	r0, [r4, #5]
    dec2:	f88d 001d 	strb.w	r0, [sp, #29]
    dec6:	2210      	movs	r2, #16
    dec8:	4629      	mov	r1, r5
    deca:	4668      	mov	r0, sp
    decc:	f003 f897 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ded0:	4668      	mov	r0, sp
    ded2:	f7ff ff98 	bl	de06 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ded6:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    deda:	7020      	strb	r0, [r4, #0]
    dedc:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    dee0:	7060      	strb	r0, [r4, #1]
    dee2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    dee6:	70a0      	strb	r0, [r4, #2]
    dee8:	b00d      	add	sp, #52	; 0x34
    deea:	bd30      	pop	{r4, r5, pc}

0000deec <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    deec:	b530      	push	{r4, r5, lr}
    deee:	b08d      	sub	sp, #52	; 0x34
    def0:	460c      	mov	r4, r1
    def2:	4605      	mov	r5, r0
    def4:	220d      	movs	r2, #13
    def6:	2100      	movs	r1, #0
    def8:	a804      	add	r0, sp, #16
    defa:	f003 f8fa 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    defe:	78e0      	ldrb	r0, [r4, #3]
    df00:	f88d 001f 	strb.w	r0, [sp, #31]
    df04:	7920      	ldrb	r0, [r4, #4]
    df06:	f88d 001e 	strb.w	r0, [sp, #30]
    df0a:	7960      	ldrb	r0, [r4, #5]
    df0c:	f88d 001d 	strb.w	r0, [sp, #29]
    df10:	2210      	movs	r2, #16
    df12:	4629      	mov	r1, r5
    df14:	4668      	mov	r0, sp
    df16:	f003 f872 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    df1a:	4668      	mov	r0, sp
    df1c:	f7ff ff73 	bl	de06 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    df20:	7820      	ldrb	r0, [r4, #0]
    df22:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    df26:	4288      	cmp	r0, r1
    df28:	d10c      	bne.n	df44 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    df2a:	7860      	ldrb	r0, [r4, #1]
    df2c:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    df30:	4288      	cmp	r0, r1
    df32:	d107      	bne.n	df44 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    df34:	78a0      	ldrb	r0, [r4, #2]
    df36:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    df3a:	4288      	cmp	r0, r1
    df3c:	d102      	bne.n	df44 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    df3e:	2001      	movs	r0, #1
    df40:	b00d      	add	sp, #52	; 0x34
    df42:	bd30      	pop	{r4, r5, pc}
    df44:	2000      	movs	r0, #0
    df46:	e7fb      	b.n	df40 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000df48 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>:
    df48:	f7f3 bf2a 	b.w	1da0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>
    df4c:	b510      	push	{r4, lr}
    df4e:	2801      	cmp	r0, #1
    df50:	d008      	beq.n	df64 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x1c>
    df52:	2802      	cmp	r0, #2
    df54:	d004      	beq.n	df60 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    df56:	f240 4121 	movw	r1, #1057	; 0x421
    df5a:	2006      	movs	r0, #6
    df5c:	f7f2 fd5e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df60:	2001      	movs	r0, #1
    df62:	bd10      	pop	{r4, pc}
    df64:	2000      	movs	r0, #0
    df66:	bd10      	pop	{r4, pc}
    df68:	2900      	cmp	r1, #0
    df6a:	d004      	beq.n	df76 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x2e>
    df6c:	2801      	cmp	r0, #1
    df6e:	d003      	beq.n	df78 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x30>
    df70:	2901      	cmp	r1, #1
    df72:	d001      	beq.n	df78 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x30>
    df74:	2002      	movs	r0, #2
    df76:	4770      	bx	lr
    df78:	2001      	movs	r0, #1
    df7a:	4770      	bx	lr
    df7c:	f7ff bd8f 	b.w	da9e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000df80 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    df80:	2101      	movs	r1, #1
    df82:	f7f4 ba79 	b.w	2478 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

0000df86 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    df86:	b510      	push	{r4, lr}
    df88:	f002 fcc0 	bl	1090c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    df8c:	b118      	cbz	r0, df96 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    df8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df92:	f7f9 bdf9 	b.w	7b88 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    df96:	20ff      	movs	r0, #255	; 0xff
    df98:	bd10      	pop	{r4, pc}

0000df9a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    df9a:	b510      	push	{r4, lr}
    df9c:	f7f4 fa98 	bl	24d0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    dfa0:	2808      	cmp	r0, #8
    dfa2:	d003      	beq.n	dfac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    dfa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dfa8:	f7f4 ba7e 	b.w	24a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    dfac:	bd10      	pop	{r4, pc}

0000dfae <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    dfae:	b510      	push	{r4, lr}
    dfb0:	f7f4 fa8e 	bl	24d0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    dfb4:	2808      	cmp	r0, #8
    dfb6:	d007      	beq.n	dfc8 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    dfb8:	f7f4 fa76 	bl	24a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    dfbc:	2808      	cmp	r0, #8
    dfbe:	d003      	beq.n	dfc8 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    dfc0:	f7f4 fae8 	bl	2594 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x128>
    dfc4:	2001      	movs	r0, #1
    dfc6:	bd10      	pop	{r4, pc}
    dfc8:	2000      	movs	r0, #0
    dfca:	bd10      	pop	{r4, pc}

0000dfcc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    dfcc:	b570      	push	{r4, r5, r6, lr}
    dfce:	460e      	mov	r6, r1
    dfd0:	b08c      	sub	sp, #48	; 0x30
    dfd2:	4614      	mov	r4, r2
    dfd4:	4601      	mov	r1, r0
    dfd6:	461d      	mov	r5, r3
    dfd8:	2210      	movs	r2, #16
    dfda:	4668      	mov	r0, sp
    dfdc:	f000 f988 	bl	e2f0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dfe0:	2210      	movs	r2, #16
    dfe2:	4631      	mov	r1, r6
    dfe4:	a804      	add	r0, sp, #16
    dfe6:	f000 f983 	bl	e2f0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dfea:	4668      	mov	r0, sp
    dfec:	f7ff ff0b 	bl	de06 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dff0:	a908      	add	r1, sp, #32
    dff2:	f04f 0210 	mov.w	r2, #16
    dff6:	4628      	mov	r0, r5
    dff8:	b11c      	cbz	r4, e002 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    dffa:	f000 f979 	bl	e2f0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dffe:	b00c      	add	sp, #48	; 0x30
    e000:	bd70      	pop	{r4, r5, r6, pc}
    e002:	f002 fffc 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e006:	e7fa      	b.n	dffe <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    e008:	0781      	lsls	r1, r0, #30
    e00a:	d501      	bpl.n	e010 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    e00c:	2002      	movs	r0, #2
    e00e:	4770      	bx	lr
    e010:	07c0      	lsls	r0, r0, #31
    e012:	d0fc      	beq.n	e00e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    e014:	2001      	movs	r0, #1
    e016:	4770      	bx	lr

0000e018 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    e018:	b570      	push	{r4, r5, r6, lr}
    e01a:	4606      	mov	r6, r0
    e01c:	7900      	ldrb	r0, [r0, #4]
    e01e:	0940      	lsrs	r0, r0, #5
    e020:	d10e      	bne.n	e040 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    e022:	2500      	movs	r5, #0
    e024:	462c      	mov	r4, r5
    e026:	5d30      	ldrb	r0, [r6, r4]
    e028:	f000 fcd8 	bl	e9dc <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    e02c:	1c64      	adds	r4, r4, #1
    e02e:	4428      	add	r0, r5
    e030:	b2e4      	uxtb	r4, r4
    e032:	b2c5      	uxtb	r5, r0
    e034:	2c05      	cmp	r4, #5
    e036:	d3f6      	bcc.n	e026 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
    e038:	2d01      	cmp	r5, #1
    e03a:	d901      	bls.n	e040 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    e03c:	2001      	movs	r0, #1
    e03e:	bd70      	pop	{r4, r5, r6, pc}
    e040:	2000      	movs	r0, #0
    e042:	bd70      	pop	{r4, r5, r6, pc}

0000e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    e044:	b510      	push	{r4, lr}
    e046:	460c      	mov	r4, r1
    e048:	2100      	movs	r1, #0
    e04a:	f7f2 ffc9 	bl	fe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e04e:	6060      	str	r0, [r4, #4]
    e050:	b110      	cbz	r0, e058 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    e052:	2000      	movs	r0, #0
    e054:	7020      	strb	r0, [r4, #0]
    e056:	bd10      	pop	{r4, pc}
    e058:	2002      	movs	r0, #2
    e05a:	bd10      	pop	{r4, pc}

0000e05c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    e05c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e060:	4348      	muls	r0, r1
    e062:	4770      	bx	lr

0000e064 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    e064:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e068:	fbb0 f0f1 	udiv	r0, r0, r1
    e06c:	b280      	uxth	r0, r0
    e06e:	4770      	bx	lr

0000e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    e070:	b510      	push	{r4, lr}
    e072:	f1a2 0310 	sub.w	r3, r2, #16
    e076:	290d      	cmp	r1, #13
    e078:	d258      	bcs.n	e12c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e07a:	e8df f001 	tbb	[pc, r1]
    e07e:	0907      	.short	0x0907
    e080:	1d1a150e 	.word	0x1d1a150e
    e084:	5937342c 	.word	0x5937342c
    e088:	0053423b 	.word	0x0053423b
    e08c:	b38a      	cbz	r2, e0f2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x82>
    e08e:	e04d      	b.n	e12c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e090:	2a06      	cmp	r2, #6
    e092:	d049      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e094:	2a07      	cmp	r2, #7
    e096:	d047      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e098:	e048      	b.n	e12c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e09a:	2a0b      	cmp	r2, #11
    e09c:	d044      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e09e:	2a0c      	cmp	r2, #12
    e0a0:	d042      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0a2:	2a0a      	cmp	r2, #10
    e0a4:	d040      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0a6:	e041      	b.n	e12c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0a8:	2a0d      	cmp	r2, #13
    e0aa:	d03d      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0ac:	2a0e      	cmp	r2, #14
    e0ae:	d03b      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0b0:	e03c      	b.n	e12c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0b2:	2b0c      	cmp	r3, #12
    e0b4:	d938      	bls.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0b6:	e039      	b.n	e12c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0b8:	2a13      	cmp	r2, #19
    e0ba:	d035      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0bc:	2a12      	cmp	r2, #18
    e0be:	d033      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0c0:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    e0c4:	b120      	cbz	r0, e0d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x60>
    e0c6:	2a13      	cmp	r2, #19
    e0c8:	d330      	bcc.n	e12c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0ca:	2a1b      	cmp	r2, #27
    e0cc:	d92c      	bls.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0ce:	e02d      	b.n	e12c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0d0:	2a17      	cmp	r2, #23
    e0d2:	d2fa      	bcs.n	e0ca <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x5a>
    e0d4:	e02a      	b.n	e12c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0d6:	2b03      	cmp	r3, #3
    e0d8:	d926      	bls.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0da:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    e0de:	b300      	cbz	r0, e122 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb2>
    e0e0:	2a1c      	cmp	r2, #28
    e0e2:	d921      	bls.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0e4:	e022      	b.n	e12c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0e6:	2a04      	cmp	r2, #4
    e0e8:	d01e      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0ea:	e01f      	b.n	e12c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0ec:	2a01      	cmp	r2, #1
    e0ee:	d01b      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0f0:	e01c      	b.n	e12c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0f2:	e019      	b.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0f4:	2a1d      	cmp	r2, #29
    e0f6:	d017      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0f8:	2a1e      	cmp	r2, #30
    e0fa:	d015      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0fc:	2a1f      	cmp	r2, #31
    e0fe:	d013      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e100:	e014      	b.n	e12c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e102:	2a20      	cmp	r2, #32
    e104:	d010      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e106:	2a21      	cmp	r2, #33	; 0x21
    e108:	d00e      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e10a:	2a22      	cmp	r2, #34	; 0x22
    e10c:	d00c      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e10e:	2a23      	cmp	r2, #35	; 0x23
    e110:	d00a      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e112:	2a24      	cmp	r2, #36	; 0x24
    e114:	d008      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e116:	2a25      	cmp	r2, #37	; 0x25
    e118:	d006      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e11a:	2a26      	cmp	r2, #38	; 0x26
    e11c:	d004      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e11e:	2a2e      	cmp	r2, #46	; 0x2e
    e120:	d002      	beq.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e122:	e003      	b.n	e12c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e124:	2a28      	cmp	r2, #40	; 0x28
    e126:	d101      	bne.n	e12c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e128:	2001      	movs	r0, #1
    e12a:	bd10      	pop	{r4, pc}
    e12c:	2000      	movs	r0, #0
    e12e:	bd10      	pop	{r4, pc}
    e130:	2a05      	cmp	r2, #5
    e132:	d1fb      	bne.n	e12c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e134:	e7f8      	b.n	e128 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>

0000e136 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    e136:	280b      	cmp	r0, #11
    e138:	d019      	beq.n	e16e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e13a:	280c      	cmp	r0, #12
    e13c:	d017      	beq.n	e16e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e13e:	280a      	cmp	r0, #10
    e140:	d015      	beq.n	e16e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e142:	280d      	cmp	r0, #13
    e144:	d013      	beq.n	e16e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e146:	280e      	cmp	r0, #14
    e148:	d011      	beq.n	e16e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e14a:	2820      	cmp	r0, #32
    e14c:	d00f      	beq.n	e16e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e14e:	2821      	cmp	r0, #33	; 0x21
    e150:	d00d      	beq.n	e16e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e152:	2822      	cmp	r0, #34	; 0x22
    e154:	d00b      	beq.n	e16e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e156:	2823      	cmp	r0, #35	; 0x23
    e158:	d009      	beq.n	e16e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e15a:	2824      	cmp	r0, #36	; 0x24
    e15c:	d007      	beq.n	e16e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e15e:	2825      	cmp	r0, #37	; 0x25
    e160:	d005      	beq.n	e16e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e162:	2826      	cmp	r0, #38	; 0x26
    e164:	d003      	beq.n	e16e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e166:	282e      	cmp	r0, #46	; 0x2e
    e168:	d001      	beq.n	e16e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e16a:	2000      	movs	r0, #0
    e16c:	4770      	bx	lr
    e16e:	2001      	movs	r0, #1
    e170:	4770      	bx	lr

0000e172 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    e172:	f011 0f0c 	tst.w	r1, #12
    e176:	d018      	beq.n	e1aa <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    e178:	074a      	lsls	r2, r1, #29
    e17a:	f44f 7116 	mov.w	r1, #600	; 0x258
    e17e:	2a00      	cmp	r2, #0
    e180:	da02      	bge.n	e188 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    e182:	f04f 0210 	mov.w	r2, #16
    e186:	e001      	b.n	e18c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    e188:	f04f 0240 	mov.w	r2, #64	; 0x40
    e18c:	da01      	bge.n	e192 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    e18e:	f04f 0196 	mov.w	r1, #150	; 0x96
    e192:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    e196:	eba0 0301 	sub.w	r3, r0, r1
    e19a:	4288      	cmp	r0, r1
    e19c:	d903      	bls.n	e1a6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e19e:	fb93 f0f2 	sdiv	r0, r3, r2
    e1a2:	b280      	uxth	r0, r0
    e1a4:	4770      	bx	lr
    e1a6:	2000      	movs	r0, #0
    e1a8:	4770      	bx	lr
    e1aa:	2902      	cmp	r1, #2
    e1ac:	d008      	beq.n	e1c0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e1ae:	2870      	cmp	r0, #112	; 0x70
    e1b0:	d9f9      	bls.n	e1a6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e1b2:	3870      	subs	r0, #112	; 0x70
    e1b4:	17c1      	asrs	r1, r0, #31
    e1b6:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    e1ba:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    e1be:	4770      	bx	lr
    e1c0:	283c      	cmp	r0, #60	; 0x3c
    e1c2:	d9f0      	bls.n	e1a6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e1c4:	383c      	subs	r0, #60	; 0x3c
    e1c6:	17c1      	asrs	r1, r0, #31
    e1c8:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    e1cc:	f3c0 008f 	ubfx	r0, r0, #2, #16
    e1d0:	4770      	bx	lr

0000e1d2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    e1d2:	6809      	ldr	r1, [r1, #0]
    e1d4:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    e1d8:	4770      	bx	lr

0000e1da <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    e1da:	2801      	cmp	r0, #1
    e1dc:	d002      	beq.n	e1e4 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    e1de:	2802      	cmp	r0, #2
    e1e0:	d000      	beq.n	e1e4 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    e1e2:	2000      	movs	r0, #0
    e1e4:	4770      	bx	lr

0000e1e6 <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>:
    e1e6:	f880 106e 	strb.w	r1, [r0, #110]	; 0x6e
    e1ea:	f001 bbf7 	b.w	f9dc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>

0000e1ee <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    e1ee:	b530      	push	{r4, r5, lr}
    e1f0:	242a      	movs	r4, #42	; 0x2a
    e1f2:	2523      	movs	r5, #35	; 0x23
    e1f4:	2a16      	cmp	r2, #22
    e1f6:	d109      	bne.n	e20c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    e1f8:	280b      	cmp	r0, #11
    e1fa:	d00b      	beq.n	e214 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e1fc:	280c      	cmp	r0, #12
    e1fe:	d009      	beq.n	e214 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e200:	280d      	cmp	r0, #13
    e202:	d007      	beq.n	e214 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e204:	280e      	cmp	r0, #14
    e206:	d005      	beq.n	e214 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e208:	2820      	cmp	r0, #32
    e20a:	d005      	beq.n	e218 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    e20c:	b171      	cbz	r1, e22c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    e20e:	2a16      	cmp	r2, #22
    e210:	d10c      	bne.n	e22c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    e212:	e004      	b.n	e21e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x30>
    e214:	701c      	strb	r4, [r3, #0]
    e216:	e000      	b.n	e21a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2c>
    e218:	701d      	strb	r5, [r3, #0]
    e21a:	2001      	movs	r0, #1
    e21c:	bd30      	pop	{r4, r5, pc}
    e21e:	7808      	ldrb	r0, [r1, #0]
    e220:	2801      	cmp	r0, #1
    e222:	d0f7      	beq.n	e214 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e224:	2800      	cmp	r0, #0
    e226:	d0f5      	beq.n	e214 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e228:	2816      	cmp	r0, #22
    e22a:	d0f5      	beq.n	e218 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    e22c:	2000      	movs	r0, #0
    e22e:	bd30      	pop	{r4, r5, pc}

0000e230 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    e230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e232:	b2cf      	uxtb	r7, r1
    e234:	4606      	mov	r6, r0
    e236:	f3c1 2407 	ubfx	r4, r1, #8, #8
    e23a:	4621      	mov	r1, r4
    e23c:	4638      	mov	r0, r7
    e23e:	f000 f89e 	bl	e37e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    e242:	b2f5      	uxtb	r5, r6
    e244:	f3c6 2607 	ubfx	r6, r6, #8, #8
    e248:	b920      	cbnz	r0, e254 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    e24a:	4631      	mov	r1, r6
    e24c:	4628      	mov	r0, r5
    e24e:	f000 f896 	bl	e37e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    e252:	b140      	cbz	r0, e266 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    e254:	4027      	ands	r7, r4
    e256:	4035      	ands	r5, r6
    e258:	403d      	ands	r5, r7
    e25a:	4644      	mov	r4, r8
    e25c:	f365 0407 	bfi	r4, r5, #0, #8
    e260:	f365 240f 	bfi	r4, r5, #8, #8
    e264:	e006      	b.n	e274 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    e266:	4025      	ands	r5, r4
    e268:	4644      	mov	r4, r8
    e26a:	f365 0407 	bfi	r4, r5, #0, #8
    e26e:	403e      	ands	r6, r7
    e270:	f366 240f 	bfi	r4, r6, #8, #8
    e274:	b2e0      	uxtb	r0, r4
    e276:	f7ff fec7 	bl	e008 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    e27a:	f88d 0000 	strb.w	r0, [sp]
    e27e:	f3c4 2007 	ubfx	r0, r4, #8, #8
    e282:	f7ff fec1 	bl	e008 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    e286:	f88d 0001 	strb.w	r0, [sp, #1]
    e28a:	f8bd 0000 	ldrh.w	r0, [sp]
    e28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e290 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    e290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e294:	4607      	mov	r7, r0
    e296:	460e      	mov	r6, r1
    e298:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    e29c:	f7fc fbf2 	bl	aa84 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    e2a0:	b198      	cbz	r0, e2ca <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    e2a2:	b31e      	cbz	r6, e2ec <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    e2a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    e2a8:	1b40      	subs	r0, r0, r5
    e2aa:	2300      	movs	r3, #0
    e2ac:	eb61 0104 	sbc.w	r1, r1, r4
    e2b0:	461a      	mov	r2, r3
    e2b2:	1a1b      	subs	r3, r3, r0
    e2b4:	418a      	sbcs	r2, r1
    e2b6:	da19      	bge.n	e2ec <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    e2b8:	1c42      	adds	r2, r0, #1
    e2ba:	f171 0100 	sbcs.w	r1, r1, #0
    e2be:	db07      	blt.n	e2d0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    e2c0:	f240 211a 	movw	r1, #538	; 0x21a
    e2c4:	2029      	movs	r0, #41	; 0x29
    e2c6:	f7f2 fba9 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2ca:	f44f 7104 	mov.w	r1, #528	; 0x210
    e2ce:	e7f9      	b.n	e2c4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    e2d0:	4430      	add	r0, r6
    e2d2:	1e40      	subs	r0, r0, #1
    e2d4:	fbb0 f1f6 	udiv	r1, r0, r6
    e2d8:	fb01 f006 	mul.w	r0, r1, r6
    e2dc:	1828      	adds	r0, r5, r0
    e2de:	f144 0400 	adc.w	r4, r4, #0
    e2e2:	e9c7 0404 	strd	r0, r4, [r7, #16]
    e2e6:	4608      	mov	r0, r1
    e2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e2ec:	2000      	movs	r0, #0
    e2ee:	e7fb      	b.n	e2e8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000e2f0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    e2f0:	b530      	push	{r4, r5, lr}
    e2f2:	4613      	mov	r3, r2
    e2f4:	e006      	b.n	e304 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    e2f6:	18cc      	adds	r4, r1, r3
    e2f8:	1ad5      	subs	r5, r2, r3
    e2fa:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    e2fe:	1e5b      	subs	r3, r3, #1
    e300:	5544      	strb	r4, [r0, r5]
    e302:	b2db      	uxtb	r3, r3
    e304:	2b00      	cmp	r3, #0
    e306:	d1f6      	bne.n	e2f6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    e308:	bd30      	pop	{r4, r5, pc}

0000e30a <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    e30a:	2300      	movs	r3, #0
    e30c:	6403      	str	r3, [r0, #64]	; 0x40
    e30e:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    e312:	f240 2371 	movw	r3, #625	; 0x271
    e316:	435a      	muls	r2, r3
    e318:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    e31c:	1e52      	subs	r2, r2, #1
    e31e:	fbb2 f1f1 	udiv	r1, r2, r1
    e322:	6441      	str	r1, [r0, #68]	; 0x44
    e324:	4770      	bx	lr

0000e326 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    e326:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e32a:	fbb0 f0f1 	udiv	r0, r0, r1
    e32e:	b280      	uxth	r0, r0
    e330:	4770      	bx	lr

0000e332 <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>:
    e332:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e336:	fbb0 f2f1 	udiv	r2, r0, r1
    e33a:	fb01 0112 	mls	r1, r1, r2, r0
    e33e:	1a40      	subs	r0, r0, r1
    e340:	4770      	bx	lr

0000e342 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e342:	f240 2171 	movw	r1, #625	; 0x271
    e346:	fb10 f001 	smulbb	r0, r0, r1
    e34a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e34e:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    e352:	4770      	bx	lr

0000e354 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    e354:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e358:	fbb0 f0f1 	udiv	r0, r0, r1
    e35c:	b2c0      	uxtb	r0, r0
    e35e:	4770      	bx	lr

0000e360 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e360:	b510      	push	{r4, lr}
    e362:	2300      	movs	r3, #0
    e364:	461a      	mov	r2, r3
    e366:	e003      	b.n	e370 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e368:	5c84      	ldrb	r4, [r0, r2]
    e36a:	4323      	orrs	r3, r4
    e36c:	1c52      	adds	r2, r2, #1
    e36e:	b2d2      	uxtb	r2, r2
    e370:	428a      	cmp	r2, r1
    e372:	d3f9      	bcc.n	e368 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e374:	b10b      	cbz	r3, e37a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e376:	2000      	movs	r0, #0
    e378:	bd10      	pop	{r4, pc}
    e37a:	2001      	movs	r0, #1
    e37c:	bd10      	pop	{r4, pc}
    e37e:	2801      	cmp	r0, #1
    e380:	d002      	beq.n	e388 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x28>
    e382:	2802      	cmp	r0, #2
    e384:	d003      	beq.n	e38e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x2e>
    e386:	e004      	b.n	e392 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x32>
    e388:	2901      	cmp	r1, #1
    e38a:	d004      	beq.n	e396 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x36>
    e38c:	e001      	b.n	e392 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x32>
    e38e:	2902      	cmp	r1, #2
    e390:	d001      	beq.n	e396 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x36>
    e392:	2000      	movs	r0, #0
    e394:	4770      	bx	lr
    e396:	2001      	movs	r0, #1
    e398:	4770      	bx	lr

0000e39a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    e39a:	2100      	movs	r1, #0
    e39c:	4608      	mov	r0, r1
    e39e:	f7f4 b9df 	b.w	2760 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    e3a2:	4401      	add	r1, r0
    e3a4:	2914      	cmp	r1, #20
    e3a6:	dd01      	ble.n	e3ac <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    e3a8:	2014      	movs	r0, #20
    e3aa:	4770      	bx	lr
    e3ac:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    e3b0:	4281      	cmp	r1, r0
    e3b2:	dbfa      	blt.n	e3aa <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    e3b4:	b248      	sxtb	r0, r1
    e3b6:	4770      	bx	lr

0000e3b8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    e3b8:	b570      	push	{r4, r5, r6, lr}
    e3ba:	4605      	mov	r5, r0
    e3bc:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    e3c0:	b286      	uxth	r6, r0
    e3c2:	4610      	mov	r0, r2
    e3c4:	7aec      	ldrb	r4, [r5, #11]
    e3c6:	4631      	mov	r1, r6
    e3c8:	f000 f863 	bl	e492 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    e3cc:	4070      	eors	r0, r6
    e3ce:	2125      	movs	r1, #37	; 0x25
    e3d0:	fbb0 f2f1 	udiv	r2, r0, r1
    e3d4:	fb01 0112 	mls	r1, r1, r2, r0
    e3d8:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    e3dc:	f001 0307 	and.w	r3, r1, #7
    e3e0:	7852      	ldrb	r2, [r2, #1]
    e3e2:	2601      	movs	r6, #1
    e3e4:	409e      	lsls	r6, r3
    e3e6:	4232      	tst	r2, r6
    e3e8:	d001      	beq.n	e3ee <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    e3ea:	4608      	mov	r0, r1
    e3ec:	bd70      	pop	{r4, r5, r6, pc}
    e3ee:	4344      	muls	r4, r0
    e3f0:	0c21      	lsrs	r1, r4, #16
    e3f2:	4628      	mov	r0, r5
    e3f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e3f8:	f7f4 ba24 	b.w	2844 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xac>

0000e3fc <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e3fc:	b510      	push	{r4, lr}
    e3fe:	4604      	mov	r4, r0
    e400:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    e404:	b108      	cbz	r0, e40a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e406:	2825      	cmp	r0, #37	; 0x25
    e408:	d901      	bls.n	e40e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e40a:	2012      	movs	r0, #18
    e40c:	bd10      	pop	{r4, pc}
    e40e:	b132      	cbz	r2, e41e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    e410:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    e414:	b128      	cbz	r0, e422 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    e416:	2801      	cmp	r0, #1
    e418:	d009      	beq.n	e42e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    e41a:	201f      	movs	r0, #31
    e41c:	bd10      	pop	{r4, pc}
    e41e:	2000      	movs	r0, #0
    e420:	bd10      	pop	{r4, pc}
    e422:	4620      	mov	r0, r4
    e424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e428:	4611      	mov	r1, r2
    e42a:	f7f4 b9c3 	b.w	27b4 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x1c>
    e42e:	8aa2      	ldrh	r2, [r4, #20]
    e430:	6949      	ldr	r1, [r1, #20]
    e432:	f104 0025 	add.w	r0, r4, #37	; 0x25
    e436:	f7ff ffbf 	bl	e3b8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e43a:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    e43e:	e7ee      	b.n	e41e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000e440 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e440:	b570      	push	{r4, r5, r6, lr}
    e442:	4604      	mov	r4, r0
    e444:	1c40      	adds	r0, r0, #1
    e446:	4288      	cmp	r0, r1
    e448:	d004      	beq.n	e454 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    e44a:	6808      	ldr	r0, [r1, #0]
    e44c:	f8c4 0001 	str.w	r0, [r4, #1]
    e450:	7908      	ldrb	r0, [r1, #4]
    e452:	7160      	strb	r0, [r4, #5]
    e454:	7960      	ldrb	r0, [r4, #5]
    e456:	f000 001f 	and.w	r0, r0, #31
    e45a:	7160      	strb	r0, [r4, #5]
    e45c:	2000      	movs	r0, #0
    e45e:	72e0      	strb	r0, [r4, #11]
    e460:	4605      	mov	r5, r0
    e462:	1966      	adds	r6, r4, r5
    e464:	7870      	ldrb	r0, [r6, #1]
    e466:	f000 fab9 	bl	e9dc <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    e46a:	71b0      	strb	r0, [r6, #6]
    e46c:	7ae1      	ldrb	r1, [r4, #11]
    e46e:	1c6d      	adds	r5, r5, #1
    e470:	4408      	add	r0, r1
    e472:	b2ed      	uxtb	r5, r5
    e474:	72e0      	strb	r0, [r4, #11]
    e476:	2d05      	cmp	r5, #5
    e478:	d3f3      	bcc.n	e462 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    e47a:	bd70      	pop	{r4, r5, r6, pc}
    e47c:	b2c1      	uxtb	r1, r0
    e47e:	fa91 f1a1 	rbit	r1, r1
    e482:	0a00      	lsrs	r0, r0, #8
    e484:	0e09      	lsrs	r1, r1, #24
    e486:	fa90 f0a0 	rbit	r0, r0
    e48a:	0e00      	lsrs	r0, r0, #24
    e48c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    e490:	4770      	bx	lr
    e492:	b570      	push	{r4, r5, r6, lr}
    e494:	460d      	mov	r5, r1
    e496:	4048      	eors	r0, r1
    e498:	2400      	movs	r4, #0
    e49a:	f7ff ffef 	bl	e47c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    e49e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    e4a2:	1c64      	adds	r4, r4, #1
    e4a4:	4428      	add	r0, r5
    e4a6:	b2e4      	uxtb	r4, r4
    e4a8:	b280      	uxth	r0, r0
    e4aa:	2c03      	cmp	r4, #3
    e4ac:	d3f5      	bcc.n	e49a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    e4ae:	bd70      	pop	{r4, r5, r6, pc}

0000e4b0 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>:
    e4b0:	7841      	ldrb	r1, [r0, #1]
    e4b2:	7800      	ldrb	r0, [r0, #0]
    e4b4:	f010 000f 	ands.w	r0, r0, #15
    e4b8:	d005      	beq.n	e4c6 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    e4ba:	2801      	cmp	r0, #1
    e4bc:	d007      	beq.n	e4ce <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x1e>
    e4be:	2802      	cmp	r0, #2
    e4c0:	d001      	beq.n	e4c6 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    e4c2:	2806      	cmp	r0, #6
    e4c4:	d105      	bne.n	e4d2 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    e4c6:	1f89      	subs	r1, r1, #6
    e4c8:	291f      	cmp	r1, #31
    e4ca:	d904      	bls.n	e4d6 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    e4cc:	e001      	b.n	e4d2 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    e4ce:	290c      	cmp	r1, #12
    e4d0:	d001      	beq.n	e4d6 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    e4d2:	2000      	movs	r0, #0
    e4d4:	4770      	bx	lr
    e4d6:	2001      	movs	r0, #1
    e4d8:	4770      	bx	lr

0000e4da <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>:
    e4da:	7800      	ldrb	r0, [r0, #0]
    e4dc:	09c0      	lsrs	r0, r0, #7
    e4de:	4770      	bx	lr

0000e4e0 <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>:
    e4e0:	f850 2f03 	ldr.w	r2, [r0, #3]!
    e4e4:	600a      	str	r2, [r1, #0]
    e4e6:	8880      	ldrh	r0, [r0, #4]
    e4e8:	8088      	strh	r0, [r1, #4]
    e4ea:	4770      	bx	lr

0000e4ec <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>:
    e4ec:	7800      	ldrb	r0, [r0, #0]
    e4ee:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e4f2:	4770      	bx	lr

0000e4f4 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>:
    e4f4:	7801      	ldrb	r1, [r0, #0]
    e4f6:	f001 010f 	and.w	r1, r1, #15
    e4fa:	2904      	cmp	r1, #4
    e4fc:	d105      	bne.n	e50a <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    e4fe:	7840      	ldrb	r0, [r0, #1]
    e500:	1f80      	subs	r0, r0, #6
    e502:	281f      	cmp	r0, #31
    e504:	d801      	bhi.n	e50a <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    e506:	2001      	movs	r0, #1
    e508:	4770      	bx	lr
    e50a:	2000      	movs	r0, #0
    e50c:	4770      	bx	lr

0000e50e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    e50e:	b510      	push	{r4, lr}
    e510:	7802      	ldrb	r2, [r0, #0]
    e512:	f001 030f 	and.w	r3, r1, #15
    e516:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    e51a:	431a      	orrs	r2, r3
    e51c:	7002      	strb	r2, [r0, #0]
    e51e:	2907      	cmp	r1, #7
    e520:	d20c      	bcs.n	e53c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    e522:	e8df f001 	tbb	[pc, r1]
    e526:	0604      	.short	0x0604
    e528:	08040604 	.word	0x08040604
    e52c:	0004      	.short	0x0004
    e52e:	2106      	movs	r1, #6
    e530:	e002      	b.n	e538 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e532:	210c      	movs	r1, #12
    e534:	e000      	b.n	e538 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e536:	2122      	movs	r1, #34	; 0x22
    e538:	7041      	strb	r1, [r0, #1]
    e53a:	bd10      	pop	{r4, pc}
    e53c:	21a8      	movs	r1, #168	; 0xa8
    e53e:	202a      	movs	r0, #42	; 0x2a
    e540:	f7f2 fa6c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e544 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    e544:	680a      	ldr	r2, [r1, #0]
    e546:	f840 2f09 	str.w	r2, [r0, #9]!
    e54a:	8889      	ldrh	r1, [r1, #4]
    e54c:	8081      	strh	r1, [r0, #4]
    e54e:	4770      	bx	lr

0000e550 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    e550:	7802      	ldrb	r2, [r0, #0]
    e552:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e556:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e55a:	7002      	strb	r2, [r0, #0]
    e55c:	4770      	bx	lr

0000e55e <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    e55e:	680a      	ldr	r2, [r1, #0]
    e560:	f840 2f03 	str.w	r2, [r0, #3]!
    e564:	8889      	ldrh	r1, [r1, #4]
    e566:	8081      	strh	r1, [r0, #4]
    e568:	4770      	bx	lr

0000e56a <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    e56a:	7802      	ldrb	r2, [r0, #0]
    e56c:	2340      	movs	r3, #64	; 0x40
    e56e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    e572:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e576:	430a      	orrs	r2, r1
    e578:	7002      	strb	r2, [r0, #0]
    e57a:	4770      	bx	lr

0000e57c <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>:
    e57c:	680a      	ldr	r2, [r1, #0]
    e57e:	6042      	str	r2, [r0, #4]
    e580:	7909      	ldrb	r1, [r1, #4]
    e582:	7201      	strb	r1, [r0, #8]
    e584:	4770      	bx	lr

0000e586 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>:
    e586:	72c1      	strb	r1, [r0, #11]
    e588:	0a09      	lsrs	r1, r1, #8
    e58a:	7301      	strb	r1, [r0, #12]
    e58c:	4770      	bx	lr

0000e58e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    e58e:	b510      	push	{r4, lr}
    e590:	29fb      	cmp	r1, #251	; 0xfb
    e592:	d904      	bls.n	e59e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    e594:	f240 61a1 	movw	r1, #1697	; 0x6a1
    e598:	202a      	movs	r0, #42	; 0x2a
    e59a:	f7f2 fa3f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e59e:	7041      	strb	r1, [r0, #1]
    e5a0:	bd10      	pop	{r4, pc}

0000e5a2 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>:
    e5a2:	8809      	ldrh	r1, [r1, #0]
    e5a4:	8181      	strh	r1, [r0, #12]
    e5a6:	4770      	bx	lr

0000e5a8 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>:
    e5a8:	6809      	ldr	r1, [r1, #0]
    e5aa:	f8c0 1016 	str.w	r1, [r0, #22]
    e5ae:	4770      	bx	lr

0000e5b0 <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>:
    e5b0:	680a      	ldr	r2, [r1, #0]
    e5b2:	6042      	str	r2, [r0, #4]
    e5b4:	6849      	ldr	r1, [r1, #4]
    e5b6:	6081      	str	r1, [r0, #8]
    e5b8:	4770      	bx	lr

0000e5ba <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>:
    e5ba:	680a      	ldr	r2, [r1, #0]
    e5bc:	f840 2f0e 	str.w	r2, [r0, #14]!
    e5c0:	6849      	ldr	r1, [r1, #4]
    e5c2:	6041      	str	r1, [r0, #4]
    e5c4:	4770      	bx	lr

0000e5c6 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>:
    e5c6:	68c0      	ldr	r0, [r0, #12]
    e5c8:	6008      	str	r0, [r1, #0]
    e5ca:	4770      	bx	lr

0000e5cc <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>:
    e5cc:	6842      	ldr	r2, [r0, #4]
    e5ce:	600a      	str	r2, [r1, #0]
    e5d0:	6880      	ldr	r0, [r0, #8]
    e5d2:	6048      	str	r0, [r1, #4]
    e5d4:	4770      	bx	lr

0000e5d6 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e5d6:	7800      	ldrb	r0, [r0, #0]
    e5d8:	f000 0003 	and.w	r0, r0, #3
    e5dc:	4770      	bx	lr

0000e5de <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e5de:	8880      	ldrh	r0, [r0, #4]
    e5e0:	4770      	bx	lr

0000e5e2 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e5e2:	88c0      	ldrh	r0, [r0, #6]
    e5e4:	4770      	bx	lr

0000e5e6 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e5e6:	8900      	ldrh	r0, [r0, #8]
    e5e8:	4770      	bx	lr

0000e5ea <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e5ea:	8940      	ldrh	r0, [r0, #10]
    e5ec:	4770      	bx	lr

0000e5ee <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e5ee:	8901      	ldrh	r1, [r0, #8]
    e5f0:	291b      	cmp	r1, #27
    e5f2:	d30c      	bcc.n	e60e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e5f4:	8941      	ldrh	r1, [r0, #10]
    e5f6:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e5fa:	4291      	cmp	r1, r2
    e5fc:	d307      	bcc.n	e60e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e5fe:	8881      	ldrh	r1, [r0, #4]
    e600:	291b      	cmp	r1, #27
    e602:	d304      	bcc.n	e60e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e604:	88c0      	ldrh	r0, [r0, #6]
    e606:	4290      	cmp	r0, r2
    e608:	d301      	bcc.n	e60e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e60a:	2001      	movs	r0, #1
    e60c:	4770      	bx	lr
    e60e:	2000      	movs	r0, #0
    e610:	4770      	bx	lr

0000e612 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e612:	7901      	ldrb	r1, [r0, #4]
    e614:	0749      	lsls	r1, r1, #29
    e616:	d004      	beq.n	e622 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e618:	7940      	ldrb	r0, [r0, #5]
    e61a:	0740      	lsls	r0, r0, #29
    e61c:	d001      	beq.n	e622 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e61e:	2001      	movs	r0, #1
    e620:	4770      	bx	lr
    e622:	2000      	movs	r0, #0
    e624:	4770      	bx	lr

0000e626 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>:
    e626:	7181      	strb	r1, [r0, #6]
    e628:	0a09      	lsrs	r1, r1, #8
    e62a:	71c1      	strb	r1, [r0, #7]
    e62c:	4770      	bx	lr

0000e62e <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>:
    e62e:	7101      	strb	r1, [r0, #4]
    e630:	4770      	bx	lr

0000e632 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>:
    e632:	7141      	strb	r1, [r0, #5]
    e634:	4770      	bx	lr

0000e636 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>:
    e636:	7901      	ldrb	r1, [r0, #4]
    e638:	0749      	lsls	r1, r1, #29
    e63a:	d004      	beq.n	e646 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e63c:	7940      	ldrb	r0, [r0, #5]
    e63e:	0740      	lsls	r0, r0, #29
    e640:	d001      	beq.n	e646 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e642:	2001      	movs	r0, #1
    e644:	4770      	bx	lr
    e646:	2000      	movs	r0, #0
    e648:	4770      	bx	lr

0000e64a <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e64a:	7900      	ldrb	r0, [r0, #4]
    e64c:	4770      	bx	lr

0000e64e <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e64e:	7101      	strb	r1, [r0, #4]
    e650:	4770      	bx	lr

0000e652 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e652:	7940      	ldrb	r0, [r0, #5]
    e654:	4770      	bx	lr

0000e656 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e656:	7141      	strb	r1, [r0, #5]
    e658:	4770      	bx	lr

0000e65a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e65a:	7802      	ldrb	r2, [r0, #0]
    e65c:	f001 0103 	and.w	r1, r1, #3
    e660:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e664:	430a      	orrs	r2, r1
    e666:	7002      	strb	r2, [r0, #0]
    e668:	4770      	bx	lr

0000e66a <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e66a:	7101      	strb	r1, [r0, #4]
    e66c:	0a09      	lsrs	r1, r1, #8
    e66e:	7141      	strb	r1, [r0, #5]
    e670:	4770      	bx	lr

0000e672 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e672:	7181      	strb	r1, [r0, #6]
    e674:	0a09      	lsrs	r1, r1, #8
    e676:	71c1      	strb	r1, [r0, #7]
    e678:	4770      	bx	lr

0000e67a <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e67a:	7201      	strb	r1, [r0, #8]
    e67c:	0a09      	lsrs	r1, r1, #8
    e67e:	7241      	strb	r1, [r0, #9]
    e680:	4770      	bx	lr

0000e682 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e682:	7281      	strb	r1, [r0, #10]
    e684:	0a09      	lsrs	r1, r1, #8
    e686:	72c1      	strb	r1, [r0, #11]
    e688:	4770      	bx	lr

0000e68a <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e68a:	7900      	ldrb	r0, [r0, #4]
    e68c:	4770      	bx	lr

0000e68e <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e68e:	7900      	ldrb	r0, [r0, #4]
    e690:	4770      	bx	lr

0000e692 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e692:	b510      	push	{r4, lr}
    e694:	7a01      	ldrb	r1, [r0, #8]
    e696:	b119      	cbz	r1, e6a0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e698:	2901      	cmp	r1, #1
    e69a:	d006      	beq.n	e6aa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e69c:	2000      	movs	r0, #0
    e69e:	bd10      	pop	{r4, pc}
    e6a0:	88c2      	ldrh	r2, [r0, #6]
    e6a2:	6803      	ldr	r3, [r0, #0]
    e6a4:	8880      	ldrh	r0, [r0, #4]
    e6a6:	2102      	movs	r1, #2
    e6a8:	e003      	b.n	e6b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e6aa:	88c2      	ldrh	r2, [r0, #6]
    e6ac:	6803      	ldr	r3, [r0, #0]
    e6ae:	8880      	ldrh	r0, [r0, #4]
    e6b0:	2101      	movs	r1, #1
    e6b2:	f7f4 f931 	bl	2918 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e6b6:	b908      	cbnz	r0, e6bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e6b8:	f7f4 f978 	bl	29ac <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e6bc:	2001      	movs	r0, #1
    e6be:	bd10      	pop	{r4, pc}

0000e6c0 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>:
    e6c0:	2203      	movs	r2, #3
    e6c2:	f000 b806 	b.w	e6d2 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>

0000e6c6 <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>:
    e6c6:	2203      	movs	r2, #3
    e6c8:	f000 b817 	b.w	e6fa <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000e6cc <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>:
    e6cc:	2204      	movs	r2, #4
    e6ce:	f000 b814 	b.w	e6fa <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000e6d2 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e6d2:	b508      	push	{r3, lr}
    e6d4:	7a03      	ldrb	r3, [r0, #8]
    e6d6:	f88d 3000 	strb.w	r3, [sp]
    e6da:	9b00      	ldr	r3, [sp, #0]
    e6dc:	9300      	str	r3, [sp, #0]
    e6de:	f89d 3000 	ldrb.w	r3, [sp]
    e6e2:	b123      	cbz	r3, e6ee <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e6e4:	f240 21c9 	movw	r1, #713	; 0x2c9
    e6e8:	2010      	movs	r0, #16
    e6ea:	f7f2 f997 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e6f2:	f7f4 baf3 	b.w	2cdc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x13c>

0000e6f6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e6f6:	f7f4 bb1f 	b.w	2d38 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x198>

0000e6fa <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e6fa:	7a03      	ldrb	r3, [r0, #8]
    e6fc:	b082      	sub	sp, #8
    e6fe:	f88d 3000 	strb.w	r3, [sp]
    e702:	9b00      	ldr	r3, [sp, #0]
    e704:	9300      	str	r3, [sp, #0]
    e706:	f89d 3000 	ldrb.w	r3, [sp]
    e70a:	b113      	cbz	r3, e712 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x18>
    e70c:	7202      	strb	r2, [r0, #8]
    e70e:	b002      	add	sp, #8
    e710:	4770      	bx	lr
    e712:	b002      	add	sp, #8
    e714:	f7f4 bae2 	b.w	2cdc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x13c>
    e718:	2000      	movs	r0, #0
    e71a:	7048      	strb	r0, [r1, #1]
    e71c:	2003      	movs	r0, #3
    e71e:	7008      	strb	r0, [r1, #0]
    e720:	2001      	movs	r0, #1
    e722:	7108      	strb	r0, [r1, #4]
    e724:	4770      	bx	lr

0000e726 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e726:	b510      	push	{r4, lr}
    e728:	888c      	ldrh	r4, [r1, #4]
    e72a:	890a      	ldrh	r2, [r1, #8]
    e72c:	884b      	ldrh	r3, [r1, #2]
    e72e:	88c9      	ldrh	r1, [r1, #6]
    e730:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e734:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e738:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e73c:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e740:	bd10      	pop	{r4, pc}

0000e742 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e742:	b570      	push	{r4, r5, r6, lr}
    e744:	4615      	mov	r5, r2
    e746:	460c      	mov	r4, r1
    e748:	f000 f8b8 	bl	e8bc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    e74c:	3096      	adds	r0, #150	; 0x96
    e74e:	4428      	add	r0, r5
    e750:	42a0      	cmp	r0, r4
    e752:	d801      	bhi.n	e758 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e754:	1a20      	subs	r0, r4, r0
    e756:	bd70      	pop	{r4, r5, r6, pc}
    e758:	2000      	movs	r0, #0
    e75a:	bd70      	pop	{r4, r5, r6, pc}

0000e75c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e760:	4604      	mov	r4, r0
    e762:	f000 f87f 	bl	e864 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x50>
    e766:	4680      	mov	r8, r0
    e768:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e76c:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e770:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e772:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e774:	4285      	cmp	r5, r0
    e776:	d300      	bcc.n	e77a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x1e>
    e778:	4605      	mov	r5, r0
    e77a:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e77e:	4620      	mov	r0, r4
    e780:	f000 f868 	bl	e854 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e784:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e788:	2902      	cmp	r1, #2
    e78a:	d108      	bne.n	e79e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    e78c:	42af      	cmp	r7, r5
    e78e:	d200      	bcs.n	e792 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    e790:	463d      	mov	r5, r7
    e792:	4286      	cmp	r6, r0
    e794:	d200      	bcs.n	e798 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    e796:	4630      	mov	r0, r6
    e798:	2100      	movs	r1, #0
    e79a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e79e:	86a5      	strh	r5, [r4, #52]	; 0x34
    e7a0:	8720      	strh	r0, [r4, #56]	; 0x38
    e7a2:	42bd      	cmp	r5, r7
    e7a4:	d101      	bne.n	e7aa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    e7a6:	42b0      	cmp	r0, r6
    e7a8:	d001      	beq.n	e7ae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e7aa:	2001      	movs	r0, #1
    e7ac:	e000      	b.n	e7b0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    e7ae:	2000      	movs	r0, #0
    e7b0:	ea40 0008 	orr.w	r0, r0, r8
    e7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e7b8 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e7b8:	221b      	movs	r2, #27
    e7ba:	8402      	strh	r2, [r0, #32]
    e7bc:	8382      	strh	r2, [r0, #28]
    e7be:	82c2      	strh	r2, [r0, #22]
    e7c0:	8282      	strh	r2, [r0, #20]
    e7c2:	8142      	strh	r2, [r0, #10]
    e7c4:	8202      	strh	r2, [r0, #16]
    e7c6:	8102      	strh	r2, [r0, #8]
    e7c8:	8542      	strh	r2, [r0, #42]	; 0x2a
    e7ca:	8582      	strh	r2, [r0, #44]	; 0x2c
    e7cc:	8482      	strh	r2, [r0, #36]	; 0x24
    e7ce:	2900      	cmp	r1, #0
    e7d0:	d10a      	bne.n	e7e8 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e7d2:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e7d6:	8441      	strh	r1, [r0, #34]	; 0x22
    e7d8:	83c1      	strh	r1, [r0, #30]
    e7da:	8341      	strh	r1, [r0, #26]
    e7dc:	8301      	strh	r1, [r0, #24]
    e7de:	81c1      	strh	r1, [r0, #14]
    e7e0:	8241      	strh	r1, [r0, #18]
    e7e2:	8181      	strh	r1, [r0, #12]
    e7e4:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e7e6:	8601      	strh	r1, [r0, #48]	; 0x30
    e7e8:	4770      	bx	lr

0000e7ea <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e7ea:	6800      	ldr	r0, [r0, #0]
    e7ec:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e7f0:	4290      	cmp	r0, r2
    e7f2:	d903      	bls.n	e7fc <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e7f4:	1a40      	subs	r0, r0, r1
    e7f6:	389c      	subs	r0, #156	; 0x9c
    e7f8:	0840      	lsrs	r0, r0, #1
    e7fa:	4770      	bx	lr
    e7fc:	2000      	movs	r0, #0
    e7fe:	4770      	bx	lr

0000e800 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>:
    e800:	6840      	ldr	r0, [r0, #4]
    e802:	4770      	bx	lr

0000e804 <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>:
    e804:	b570      	push	{r4, r5, r6, lr}
    e806:	460c      	mov	r4, r1
    e808:	4605      	mov	r5, r0
    e80a:	f000 f857 	bl	e8bc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    e80e:	4420      	add	r0, r4
    e810:	6328      	str	r0, [r5, #48]	; 0x30
    e812:	bd70      	pop	{r4, r5, r6, pc}

0000e814 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e814:	b510      	push	{r4, lr}
    e816:	9c02      	ldr	r4, [sp, #8]
    e818:	8281      	strh	r1, [r0, #20]
    e81a:	82c2      	strh	r2, [r0, #22]
    e81c:	8303      	strh	r3, [r0, #24]
    e81e:	8344      	strh	r4, [r0, #26]
    e820:	bd10      	pop	{r4, pc}
    e822:	1d00      	adds	r0, r0, #4
    e824:	b510      	push	{r4, lr}
    e826:	b280      	uxth	r0, r0
    e828:	2901      	cmp	r1, #1
    e82a:	d006      	beq.n	e83a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e82c:	2902      	cmp	r1, #2
    e82e:	d007      	beq.n	e840 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e830:	f240 2123 	movw	r1, #547	; 0x223
    e834:	2006      	movs	r0, #6
    e836:	f7f2 f8f1 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e83a:	00c0      	lsls	r0, r0, #3
    e83c:	3050      	adds	r0, #80	; 0x50
    e83e:	e001      	b.n	e844 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e840:	0080      	lsls	r0, r0, #2
    e842:	302c      	adds	r0, #44	; 0x2c
    e844:	b280      	uxth	r0, r0
    e846:	bd10      	pop	{r4, pc}
    e848:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    e84a:	8b00      	ldrh	r0, [r0, #24]
    e84c:	4281      	cmp	r1, r0
    e84e:	d200      	bcs.n	e852 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e850:	4608      	mov	r0, r1
    e852:	4770      	bx	lr
    e854:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e858:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e85c:	4281      	cmp	r1, r0
    e85e:	d200      	bcs.n	e862 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e860:	4608      	mov	r0, r1
    e862:	4770      	bx	lr
    e864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e868:	4606      	mov	r6, r0
    e86a:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
    e86e:	f8b0 803a 	ldrh.w	r8, [r0, #58]	; 0x3a
    e872:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
    e876:	f8b6 4040 	ldrh.w	r4, [r6, #64]	; 0x40
    e87a:	42a0      	cmp	r0, r4
    e87c:	d200      	bcs.n	e880 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x6c>
    e87e:	4604      	mov	r4, r0
    e880:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    e884:	4605      	mov	r5, r0
    e886:	f7ff ffdf 	bl	e848 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e88a:	4607      	mov	r7, r0
    e88c:	4628      	mov	r0, r5
    e88e:	f7ff ffdb 	bl	e848 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e892:	816c      	strh	r4, [r5, #10]
    e894:	81ef      	strh	r7, [r5, #14]
    e896:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
    e898:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
    e89a:	42a1      	cmp	r1, r4
    e89c:	d200      	bcs.n	e8a0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x8c>
    e89e:	4621      	mov	r1, r4
    e8a0:	4282      	cmp	r2, r0
    e8a2:	d300      	bcc.n	e8a6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x92>
    e8a4:	4610      	mov	r0, r2
    e8a6:	8229      	strh	r1, [r5, #16]
    e8a8:	8268      	strh	r0, [r5, #18]
    e8aa:	454c      	cmp	r4, r9
    e8ac:	d101      	bne.n	e8b2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x9e>
    e8ae:	4547      	cmp	r7, r8
    e8b0:	d002      	beq.n	e8b8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa4>
    e8b2:	2001      	movs	r0, #1
    e8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e8b8:	2000      	movs	r0, #0
    e8ba:	e7fb      	b.n	e8b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa0>
    e8bc:	2196      	movs	r1, #150	; 0x96
    e8be:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e8c2:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e8c6:	f000 b800 	b.w	e8ca <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xb6>
    e8ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8ce:	460d      	mov	r5, r1
    e8d0:	4606      	mov	r6, r0
    e8d2:	4698      	mov	r8, r3
    e8d4:	4617      	mov	r7, r2
    e8d6:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e8d8:	4611      	mov	r1, r2
    e8da:	f7ff ffa2 	bl	e822 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e8de:	4604      	mov	r4, r0
    e8e0:	4639      	mov	r1, r7
    e8e2:	4630      	mov	r0, r6
    e8e4:	f7ff ffb6 	bl	e854 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e8e8:	42a0      	cmp	r0, r4
    e8ea:	d200      	bcs.n	e8ee <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xda>
    e8ec:	4604      	mov	r4, r0
    e8ee:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e8f0:	4641      	mov	r1, r8
    e8f2:	f7ff ff96 	bl	e822 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e8f6:	8ff1      	ldrh	r1, [r6, #62]	; 0x3e
    e8f8:	4281      	cmp	r1, r0
    e8fa:	d200      	bcs.n	e8fe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e8fc:	4608      	mov	r0, r1
    e8fe:	4420      	add	r0, r4
    e900:	4428      	add	r0, r5
    e902:	1d80      	adds	r0, r0, #6
    e904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e908 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    e908:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e90c:	2700      	movs	r7, #0
    e90e:	463d      	mov	r5, r7
    e910:	2623      	movs	r6, #35	; 0x23
    e912:	46b8      	mov	r8, r7
    e914:	f7f4 fb34 	bl	2f80 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    e918:	4604      	mov	r4, r0
    e91a:	f7f4 faf9 	bl	2f10 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
    e91e:	b190      	cbz	r0, e946 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e920:	f8cd 8000 	str.w	r8, [sp]
    e924:	f8cd 8004 	str.w	r8, [sp, #4]
    e928:	e003      	b.n	e932 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x2a>
    e92a:	9800      	ldr	r0, [sp, #0]
    e92c:	6941      	ldr	r1, [r0, #20]
    e92e:	42a1      	cmp	r1, r4
    e930:	d009      	beq.n	e946 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e932:	4668      	mov	r0, sp
    e934:	f7f2 fb9a 	bl	106c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e938:	2800      	cmp	r0, #0
    e93a:	d0f6      	beq.n	e92a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x22>
    e93c:	4625      	mov	r5, r4
    e93e:	4620      	mov	r0, r4
    e940:	f7f4 fab0 	bl	2ea4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    e944:	4607      	mov	r7, r0
    e946:	1e76      	subs	r6, r6, #1
    e948:	d001      	beq.n	e94e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x46>
    e94a:	2f00      	cmp	r7, #0
    e94c:	d0e2      	beq.n	e914 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0xc>
    e94e:	b115      	cbz	r5, e956 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x4e>
    e950:	4628      	mov	r0, r5
    e952:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e956:	f240 1167 	movw	r1, #359	; 0x167
    e95a:	200f      	movs	r0, #15
    e95c:	f7f2 f85e 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e960:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e964:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e968:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e96c:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e970:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e974:	ea10 0f40 	tst.w	r0, r0, lsl #1
    e978:	d001      	beq.n	e97e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x76>
    e97a:	2000      	movs	r0, #0
    e97c:	4770      	bx	lr
    e97e:	2001      	movs	r0, #1
    e980:	4770      	bx	lr
    e982:	b510      	push	{r4, lr}
    e984:	4604      	mov	r4, r0
    e986:	2108      	movs	r1, #8
    e988:	4620      	mov	r0, r4
    e98a:	f7f2 f8e9 	bl	b60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e98e:	6820      	ldr	r0, [r4, #0]
    e990:	2800      	cmp	r0, #0
    e992:	d102      	bne.n	e99a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x92>
    e994:	6860      	ldr	r0, [r4, #4]
    e996:	2800      	cmp	r0, #0
    e998:	d0f5      	beq.n	e986 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7e>
    e99a:	bd10      	pop	{r4, pc}

0000e99c <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>:
    e99c:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
    e9a0:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    e9a4:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e9a8:	4408      	add	r0, r1
    e9aa:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
    e9ae:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
    e9b2:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e9b6:	4408      	add	r0, r1
    e9b8:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
    e9bc:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
    e9c0:	ea02 1010 	and.w	r0, r2, r0, lsr #4
    e9c4:	4408      	add	r0, r1
    e9c6:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
    e9ca:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
    e9ce:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    e9d2:	4408      	add	r0, r1
    e9d4:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    e9d8:	b2c0      	uxtb	r0, r0
    e9da:	4770      	bx	lr

0000e9dc <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e9dc:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e9e0:	2255      	movs	r2, #85	; 0x55
    e9e2:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e9e6:	4408      	add	r0, r1
    e9e8:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e9ec:	2233      	movs	r2, #51	; 0x33
    e9ee:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e9f2:	4408      	add	r0, r1
    e9f4:	f000 010f 	and.w	r1, r0, #15
    e9f8:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e9fc:	4770      	bx	lr

0000e9fe <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>:
    e9fe:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    ea02:	f7ff bfcb 	b.w	e99c <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>

0000ea06 <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>:
    ea06:	6840      	ldr	r0, [r0, #4]
    ea08:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
    ea0c:	f880 212a 	strb.w	r2, [r0, #298]	; 0x12a
    ea10:	4770      	bx	lr

0000ea12 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>:
    ea12:	6840      	ldr	r0, [r0, #4]
    ea14:	2100      	movs	r1, #0
    ea16:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    ea1a:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    ea1e:	f8a0 10dc 	strh.w	r1, [r0, #220]	; 0xdc
    ea22:	4770      	bx	lr

0000ea24 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    ea24:	b538      	push	{r3, r4, r5, lr}
    ea26:	f1a0 0236 	sub.w	r2, r0, #54	; 0x36
    ea2a:	2400      	movs	r4, #0
    ea2c:	8e93      	ldrh	r3, [r2, #52]	; 0x34
    ea2e:	38be      	subs	r0, #190	; 0xbe
    ea30:	b123      	cbz	r3, ea3c <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x18>
    ea32:	f88d 4001 	strb.w	r4, [sp, #1]
    ea36:	f88d 4000 	strb.w	r4, [sp]
    ea3a:	e01b      	b.n	ea74 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x50>
    ea3c:	8805      	ldrh	r5, [r0, #0]
    ea3e:	704c      	strb	r4, [r1, #1]
    ea40:	200c      	movs	r0, #12
    ea42:	7008      	strb	r0, [r1, #0]
    ea44:	710c      	strb	r4, [r1, #4]
    ea46:	f8a1 5005 	strh.w	r5, [r1, #5]
    ea4a:	f892 003f 	ldrb.w	r0, [r2, #63]	; 0x3f
    ea4e:	71c8      	strb	r0, [r1, #7]
    ea50:	4628      	mov	r0, r5
    ea52:	f7f2 fc47 	bl	12e4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ea56:	f7fe fee6 	bl	d826 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    ea5a:	b170      	cbz	r0, ea7a <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x56>
    ea5c:	4628      	mov	r0, r5
    ea5e:	f7ff f9dc 	bl	de1a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ea62:	2100      	movs	r1, #0
    ea64:	4628      	mov	r0, r5
    ea66:	f7f2 fb51 	bl	110c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ea6a:	f88d 4001 	strb.w	r4, [sp, #1]
    ea6e:	2004      	movs	r0, #4
    ea70:	f88d 0000 	strb.w	r0, [sp]
    ea74:	f8bd 0000 	ldrh.w	r0, [sp]
    ea78:	bd38      	pop	{r3, r4, r5, pc}
    ea7a:	2180      	movs	r1, #128	; 0x80
    ea7c:	2063      	movs	r0, #99	; 0x63
    ea7e:	f7f1 ffcd 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ea82 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>:
    ea82:	b570      	push	{r4, r5, r6, lr}
    ea84:	6844      	ldr	r4, [r0, #4]
    ea86:	460d      	mov	r5, r1
    ea88:	7803      	ldrb	r3, [r0, #0]
    ea8a:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
    ea8e:	3488      	adds	r4, #136	; 0x88
    ea90:	2101      	movs	r1, #1
    ea92:	4620      	mov	r0, r4
    ea94:	f7ff faec 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ea98:	b108      	cbz	r0, ea9e <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x1c>
    ea9a:	2000      	movs	r0, #0
    ea9c:	bd70      	pop	{r4, r5, r6, pc}
    ea9e:	4628      	mov	r0, r5
    eaa0:	f7ff fdf3 	bl	e68a <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    eaa4:	f884 0020 	strb.w	r0, [r4, #32]
    eaa8:	2006      	movs	r0, #6
    eaaa:	77e0      	strb	r0, [r4, #31]
    eaac:	e7f5      	b.n	ea9a <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x18>

0000eaae <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA>:
    eaae:	b510      	push	{r4, lr}
    eab0:	6844      	ldr	r4, [r0, #4]
    eab2:	7803      	ldrb	r3, [r0, #0]
    eab4:	2101      	movs	r1, #1
    eab6:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
    eaba:	3488      	adds	r4, #136	; 0x88
    eabc:	4620      	mov	r0, r4
    eabe:	f7ff fad7 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eac2:	2800      	cmp	r0, #0
    eac4:	d101      	bne.n	eaca <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA+0x1c>
    eac6:	2007      	movs	r0, #7
    eac8:	77e0      	strb	r0, [r4, #31]
    eaca:	bd10      	pop	{r4, pc}

0000eacc <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    eacc:	2200      	movs	r2, #0
    eace:	704a      	strb	r2, [r1, #1]
    ead0:	2309      	movs	r3, #9
    ead2:	700b      	strb	r3, [r1, #0]
    ead4:	f100 030a 	add.w	r3, r0, #10
    ead8:	f5a0 70e3 	sub.w	r0, r0, #454	; 0x1c6
    eadc:	84c2      	strh	r2, [r0, #38]	; 0x26
    eade:	6818      	ldr	r0, [r3, #0]
    eae0:	6048      	str	r0, [r1, #4]
    eae2:	6858      	ldr	r0, [r3, #4]
    eae4:	6088      	str	r0, [r1, #8]
    eae6:	8918      	ldrh	r0, [r3, #8]
    eae8:	8188      	strh	r0, [r1, #12]
    eaea:	710a      	strb	r2, [r1, #4]
    eaec:	4770      	bx	lr

0000eaee <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI>:
    eaee:	b510      	push	{r4, lr}
    eaf0:	6844      	ldr	r4, [r0, #4]
    eaf2:	7803      	ldrb	r3, [r0, #0]
    eaf4:	2100      	movs	r1, #0
    eaf6:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    eafa:	3488      	adds	r4, #136	; 0x88
    eafc:	4620      	mov	r0, r4
    eafe:	f7ff fab7 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eb02:	b110      	cbz	r0, eb0a <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI+0x1c>
    eb04:	201d      	movs	r0, #29
    eb06:	7760      	strb	r0, [r4, #29]
    eb08:	bd10      	pop	{r4, pc}
    eb0a:	2122      	movs	r1, #34	; 0x22
    eb0c:	2045      	movs	r0, #69	; 0x45
    eb0e:	f7f1 ff85 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eb12 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>:
    eb12:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb16:	4606      	mov	r6, r0
    eb18:	7803      	ldrb	r3, [r0, #0]
    eb1a:	6840      	ldr	r0, [r0, #4]
    eb1c:	468a      	mov	sl, r1
    eb1e:	f100 0488 	add.w	r4, r0, #136	; 0x88
    eb22:	4605      	mov	r5, r0
    eb24:	7f62      	ldrb	r2, [r4, #29]
    eb26:	210a      	movs	r1, #10
    eb28:	4620      	mov	r0, r4
    eb2a:	f7ff faa1 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eb2e:	b360      	cbz	r0, eb8a <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x78>
    eb30:	4650      	mov	r0, sl
    eb32:	f7ff fd5c 	bl	e5ee <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    eb36:	b1f0      	cbz	r0, eb76 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x64>
    eb38:	4650      	mov	r0, sl
    eb3a:	f7ff fd52 	bl	e5e2 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    eb3e:	4681      	mov	r9, r0
    eb40:	4650      	mov	r0, sl
    eb42:	f7ff fd52 	bl	e5ea <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    eb46:	4680      	mov	r8, r0
    eb48:	4650      	mov	r0, sl
    eb4a:	f7ff fd48 	bl	e5de <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    eb4e:	4607      	mov	r7, r0
    eb50:	4650      	mov	r0, sl
    eb52:	f7ff fd48 	bl	e5e6 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    eb56:	4601      	mov	r1, r0
    eb58:	4643      	mov	r3, r8
    eb5a:	463a      	mov	r2, r7
    eb5c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    eb60:	f8cd 9000 	str.w	r9, [sp]
    eb64:	f7ff fe56 	bl	e814 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    eb68:	4628      	mov	r0, r5
    eb6a:	f7ff fdf7 	bl	e75c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    eb6e:	2104      	movs	r1, #4
    eb70:	6870      	ldr	r0, [r6, #4]
    eb72:	f000 fb79 	bl	f268 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    eb76:	2000      	movs	r0, #0
    eb78:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
    eb7c:	7760      	strb	r0, [r4, #29]
    eb7e:	4630      	mov	r0, r6
    eb80:	f000 f805 	bl	eb8e <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    eb84:	2000      	movs	r0, #0
    eb86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb8a:	2001      	movs	r0, #1
    eb8c:	e7fb      	b.n	eb86 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x74>

0000eb8e <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>:
    eb8e:	6841      	ldr	r1, [r0, #4]
    eb90:	f501 72a9 	add.w	r2, r1, #338	; 0x152
    eb94:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    eb98:	2801      	cmp	r0, #1
    eb9a:	d004      	beq.n	eba6 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA+0x18>
    eb9c:	f831 0b2c 	ldrh.w	r0, [r1], #44
    eba0:	3218      	adds	r2, #24
    eba2:	f7f4 b8df 	b.w	2d64 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    eba6:	2002      	movs	r0, #2
    eba8:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    ebac:	4770      	bx	lr

0000ebae <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    ebae:	2200      	movs	r2, #0
    ebb0:	704a      	strb	r2, [r1, #1]
    ebb2:	220d      	movs	r2, #13
    ebb4:	700a      	strb	r2, [r1, #0]
    ebb6:	f100 020a 	add.w	r2, r0, #10
    ebba:	7a83      	ldrb	r3, [r0, #10]
    ebbc:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    ebc0:	710b      	strb	r3, [r1, #4]
    ebc2:	8800      	ldrh	r0, [r0, #0]
    ebc4:	80c8      	strh	r0, [r1, #6]
    ebc6:	7910      	ldrb	r0, [r2, #4]
    ebc8:	7208      	strb	r0, [r1, #8]
    ebca:	4770      	bx	lr

0000ebcc <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    ebcc:	2200      	movs	r2, #0
    ebce:	704a      	strb	r2, [r1, #1]
    ebd0:	220e      	movs	r2, #14
    ebd2:	700a      	strb	r2, [r1, #0]
    ebd4:	7a82      	ldrb	r2, [r0, #10]
    ebd6:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    ebda:	710a      	strb	r2, [r1, #4]
    ebdc:	8800      	ldrh	r0, [r0, #0]
    ebde:	80c8      	strh	r0, [r1, #6]
    ebe0:	4770      	bx	lr
    ebe2:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ebe6:	f001 0307 	and.w	r3, r1, #7
    ebea:	7802      	ldrb	r2, [r0, #0]
    ebec:	2101      	movs	r1, #1
    ebee:	4099      	lsls	r1, r3
    ebf0:	430a      	orrs	r2, r1
    ebf2:	7002      	strb	r2, [r0, #0]
    ebf4:	4770      	bx	lr

0000ebf6 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    ebf6:	b510      	push	{r4, lr}
    ebf8:	6844      	ldr	r4, [r0, #4]
    ebfa:	7803      	ldrb	r3, [r0, #0]
    ebfc:	2100      	movs	r1, #0
    ebfe:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    ec02:	3488      	adds	r4, #136	; 0x88
    ec04:	4620      	mov	r0, r4
    ec06:	f7ff fa33 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ec0a:	b110      	cbz	r0, ec12 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    ec0c:	2004      	movs	r0, #4
    ec0e:	7760      	strb	r0, [r4, #29]
    ec10:	bd10      	pop	{r4, pc}
    ec12:	21ab      	movs	r1, #171	; 0xab
    ec14:	201c      	movs	r0, #28
    ec16:	f7f1 ff01 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ec1a <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    ec1a:	b510      	push	{r4, lr}
    ec1c:	4604      	mov	r4, r0
    ec1e:	6840      	ldr	r0, [r0, #4]
    ec20:	2300      	movs	r3, #0
    ec22:	4619      	mov	r1, r3
    ec24:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    ec28:	3088      	adds	r0, #136	; 0x88
    ec2a:	f7ff fa21 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ec2e:	b120      	cbz	r0, ec3a <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x20>
    ec30:	6861      	ldr	r1, [r4, #4]
    ec32:	2000      	movs	r0, #0
    ec34:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    ec38:	bd10      	pop	{r4, pc}
    ec3a:	21b3      	movs	r1, #179	; 0xb3
    ec3c:	201c      	movs	r0, #28
    ec3e:	f7f1 feed 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec42:	2200      	movs	r2, #0
    ec44:	704a      	strb	r2, [r1, #1]
    ec46:	2208      	movs	r2, #8
    ec48:	700a      	strb	r2, [r1, #0]
    ec4a:	f850 2f09 	ldr.w	r2, [r0, #9]!
    ec4e:	604a      	str	r2, [r1, #4]
    ec50:	6842      	ldr	r2, [r0, #4]
    ec52:	608a      	str	r2, [r1, #8]
    ec54:	8902      	ldrh	r2, [r0, #8]
    ec56:	818a      	strh	r2, [r1, #12]
    ec58:	7a80      	ldrb	r0, [r0, #10]
    ec5a:	7388      	strb	r0, [r1, #14]
    ec5c:	4770      	bx	lr

0000ec5e <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    ec5e:	2200      	movs	r2, #0
    ec60:	704a      	strb	r2, [r1, #1]
    ec62:	2210      	movs	r2, #16
    ec64:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
    ec68:	700a      	strb	r2, [r1, #0]
    ec6a:	8800      	ldrh	r0, [r0, #0]
    ec6c:	8088      	strh	r0, [r1, #4]
    ec6e:	4770      	bx	lr

0000ec70 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA>:
    ec70:	b570      	push	{r4, r5, r6, lr}
    ec72:	6844      	ldr	r4, [r0, #4]
    ec74:	7803      	ldrb	r3, [r0, #0]
    ec76:	2501      	movs	r5, #1
    ec78:	f894 20a6 	ldrb.w	r2, [r4, #166]	; 0xa6
    ec7c:	3488      	adds	r4, #136	; 0x88
    ec7e:	2100      	movs	r1, #0
    ec80:	4620      	mov	r0, r4
    ec82:	f7ff f9f5 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ec86:	f090 0f01 	teq	r0, #1
    ec8a:	d001      	beq.n	ec90 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA+0x20>
    ec8c:	2001      	movs	r0, #1
    ec8e:	bd70      	pop	{r4, r5, r6, pc}
    ec90:	2000      	movs	r0, #0
    ec92:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
    ec96:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    ec9a:	2002      	movs	r0, #2
    ec9c:	77a0      	strb	r0, [r4, #30]
    ec9e:	2000      	movs	r0, #0
    eca0:	bd70      	pop	{r4, r5, r6, pc}

0000eca2 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA>:
    eca2:	b510      	push	{r4, lr}
    eca4:	6844      	ldr	r4, [r0, #4]
    eca6:	7803      	ldrb	r3, [r0, #0]
    eca8:	2100      	movs	r1, #0
    ecaa:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    ecae:	3488      	adds	r4, #136	; 0x88
    ecb0:	4620      	mov	r0, r4
    ecb2:	f7ff f9dd 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ecb6:	b110      	cbz	r0, ecbe <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA+0x1c>
    ecb8:	2005      	movs	r0, #5
    ecba:	7760      	strb	r0, [r4, #29]
    ecbc:	bd10      	pop	{r4, pc}
    ecbe:	216e      	movs	r1, #110	; 0x6e
    ecc0:	204b      	movs	r0, #75	; 0x4b
    ecc2:	f7f1 feab 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ecc6 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>:
    ecc6:	b510      	push	{r4, lr}
    ecc8:	6844      	ldr	r4, [r0, #4]
    ecca:	7803      	ldrb	r3, [r0, #0]
    eccc:	2109      	movs	r1, #9
    ecce:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    ecd2:	3488      	adds	r4, #136	; 0x88
    ecd4:	4620      	mov	r0, r4
    ecd6:	f7ff f9cb 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ecda:	2800      	cmp	r0, #0
    ecdc:	d005      	beq.n	ecea <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ+0x24>
    ecde:	2000      	movs	r0, #0
    ece0:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    ece4:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
    ece8:	7760      	strb	r0, [r4, #29]
    ecea:	bd10      	pop	{r4, pc}

0000ecec <sym_E2LE5OMX5VGHQ6BJ4G7CNEBI3KUUYONP2PS2EJQ>:
    ecec:	6840      	ldr	r0, [r0, #4]
    ecee:	2100      	movs	r1, #0
    ecf0:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    ecf4:	4770      	bx	lr

0000ecf6 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    ecf6:	b510      	push	{r4, lr}
    ecf8:	2300      	movs	r3, #0
    ecfa:	704b      	strb	r3, [r1, #1]
    ecfc:	2401      	movs	r4, #1
    ecfe:	700c      	strb	r4, [r1, #0]
    ed00:	f100 0209 	add.w	r2, r0, #9
    ed04:	710b      	strb	r3, [r1, #4]
    ed06:	f830 0ce8 	ldrh.w	r0, [r0, #-232]
    ed0a:	f8a1 0005 	strh.w	r0, [r1, #5]
    ed0e:	f812 0b01 	ldrb.w	r0, [r2], #1
    ed12:	71c8      	strb	r0, [r1, #7]
    ed14:	8810      	ldrh	r0, [r2, #0]
    ed16:	8108      	strh	r0, [r1, #8]
    ed18:	8850      	ldrh	r0, [r2, #2]
    ed1a:	8148      	strh	r0, [r1, #10]
    ed1c:	bd10      	pop	{r4, pc}

0000ed1e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    ed1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed22:	7803      	ldrb	r3, [r0, #0]
    ed24:	6840      	ldr	r0, [r0, #4]
    ed26:	2501      	movs	r5, #1
    ed28:	f100 0488 	add.w	r4, r0, #136	; 0x88
    ed2c:	f500 779c 	add.w	r7, r0, #312	; 0x138
    ed30:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    ed34:	f04f 0600 	mov.w	r6, #0
    ed38:	0780      	lsls	r0, r0, #30
    ed3a:	d410      	bmi.n	ed5e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x40>
    ed3c:	7f62      	ldrb	r2, [r4, #29]
    ed3e:	2100      	movs	r1, #0
    ed40:	4620      	mov	r0, r4
    ed42:	f7ff f995 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ed46:	b130      	cbz	r0, ed56 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x38>
    ed48:	7765      	strb	r5, [r4, #29]
    ed4a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
    ed4e:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
    ed52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed56:	216e      	movs	r1, #110	; 0x6e
    ed58:	2040      	movs	r0, #64	; 0x40
    ed5a:	f7f1 fe5f 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed5e:	2300      	movs	r3, #0
    ed60:	7fa2      	ldrb	r2, [r4, #30]
    ed62:	4619      	mov	r1, r3
    ed64:	4620      	mov	r0, r4
    ed66:	f7ff f983 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ed6a:	b108      	cbz	r0, ed70 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x52>
    ed6c:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
    ed70:	74be      	strb	r6, [r7, #18]
    ed72:	e7ee      	b.n	ed52 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x34>
    ed74:	2200      	movs	r2, #0
    ed76:	704a      	strb	r2, [r1, #1]
    ed78:	221d      	movs	r2, #29
    ed7a:	700a      	strb	r2, [r1, #0]
    ed7c:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ed80:	6048      	str	r0, [r1, #4]
    ed82:	4770      	bx	lr
    ed84:	b510      	push	{r4, lr}
    ed86:	4604      	mov	r4, r0
    ed88:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ed8c:	e9d4 1000 	ldrd	r1, r0, [r4]
    ed90:	4050      	eors	r0, r2
    ed92:	ea70 0101 	orns	r1, r0, r1
    ed96:	d008      	beq.n	edaa <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    ed98:	f001 ff8d 	bl	10cb6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ed9c:	e9d4 2300 	ldrd	r2, r3, [r4]
    eda0:	1a80      	subs	r0, r0, r2
    eda2:	4199      	sbcs	r1, r3
    eda4:	d301      	bcc.n	edaa <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    eda6:	2001      	movs	r0, #1
    eda8:	bd10      	pop	{r4, pc}
    edaa:	2000      	movs	r0, #0
    edac:	bd10      	pop	{r4, pc}

0000edae <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    edae:	b508      	push	{r3, lr}
    edb0:	f000 f804 	bl	edbc <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    edb4:	466a      	mov	r2, sp
    edb6:	f7f4 fb41 	bl	343c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    edba:	bd08      	pop	{r3, pc}
    edbc:	b530      	push	{r4, r5, lr}
    edbe:	784c      	ldrb	r4, [r1, #1]
    edc0:	4603      	mov	r3, r0
    edc2:	7808      	ldrb	r0, [r1, #0]
    edc4:	788d      	ldrb	r5, [r1, #2]
    edc6:	0e22      	lsrs	r2, r4, #24
    edc8:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    edcc:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    edd0:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    edd4:	78cd      	ldrb	r5, [r1, #3]
    edd6:	790c      	ldrb	r4, [r1, #4]
    edd8:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    eddc:	4322      	orrs	r2, r4
    edde:	7949      	ldrb	r1, [r1, #5]
    ede0:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    ede4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ede8:	4611      	mov	r1, r2
    edea:	2b01      	cmp	r3, #1
    edec:	d101      	bne.n	edf2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    edee:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    edf2:	bd30      	pop	{r4, r5, pc}
    edf4:	2801      	cmp	r0, #1
    edf6:	d102      	bne.n	edfe <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    edf8:	7948      	ldrb	r0, [r1, #5]
    edfa:	0980      	lsrs	r0, r0, #6
    edfc:	d001      	beq.n	ee02 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    edfe:	2000      	movs	r0, #0
    ee00:	4770      	bx	lr
    ee02:	2001      	movs	r0, #1
    ee04:	4770      	bx	lr
    ee06:	2801      	cmp	r0, #1
    ee08:	d106      	bne.n	ee18 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    ee0a:	7948      	ldrb	r0, [r1, #5]
    ee0c:	2101      	movs	r1, #1
    ee0e:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    ee12:	d101      	bne.n	ee18 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    ee14:	2001      	movs	r0, #1
    ee16:	4770      	bx	lr
    ee18:	2000      	movs	r0, #0
    ee1a:	4770      	bx	lr
    ee1c:	b118      	cbz	r0, ee26 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x78>
    ee1e:	2802      	cmp	r0, #2
    ee20:	d001      	beq.n	ee26 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x78>
    ee22:	2001      	movs	r0, #1
    ee24:	4770      	bx	lr
    ee26:	2000      	movs	r0, #0
    ee28:	4770      	bx	lr
    ee2a:	2802      	cmp	r0, #2
    ee2c:	d003      	beq.n	ee36 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x88>
    ee2e:	2803      	cmp	r0, #3
    ee30:	d001      	beq.n	ee36 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x88>
    ee32:	2000      	movs	r0, #0
    ee34:	4770      	bx	lr
    ee36:	2001      	movs	r0, #1
    ee38:	4770      	bx	lr

0000ee3a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    ee3a:	f7f5 bba7 	b.w	458c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58c>

0000ee3e <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    ee3e:	b510      	push	{r4, lr}
    ee40:	2000      	movs	r0, #0
    ee42:	f7f5 f9e7 	bl	4214 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x214>
    ee46:	f7f4 fd63 	bl	3910 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    ee4a:	f7f5 fbad 	bl	45a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a8>
    ee4e:	2000      	movs	r0, #0
    ee50:	bd10      	pop	{r4, pc}
    ee52:	b510      	push	{r4, lr}
    ee54:	f000 f83c 	bl	eed0 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x92>
    ee58:	2005      	movs	r0, #5
    ee5a:	bd10      	pop	{r4, pc}
    ee5c:	b510      	push	{r4, lr}
    ee5e:	f7f5 f9f3 	bl	4248 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x248>
    ee62:	f7f9 f851 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ee66:	2005      	movs	r0, #5
    ee68:	bd10      	pop	{r4, pc}
    ee6a:	b530      	push	{r4, r5, lr}
    ee6c:	b08b      	sub	sp, #44	; 0x2c
    ee6e:	4605      	mov	r5, r0
    ee70:	f7f5 f9ea 	bl	4248 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x248>
    ee74:	7828      	ldrb	r0, [r5, #0]
    ee76:	4669      	mov	r1, sp
    ee78:	f000 040f 	and.w	r4, r0, #15
    ee7c:	4622      	mov	r2, r4
    ee7e:	4628      	mov	r0, r5
    ee80:	f7f5 fd3e 	bl	4900 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    ee84:	2200      	movs	r2, #0
    ee86:	4621      	mov	r1, r4
    ee88:	4668      	mov	r0, sp
    ee8a:	f7f4 fdbf 	bl	3a0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>
    ee8e:	4621      	mov	r1, r4
    ee90:	4668      	mov	r0, sp
    ee92:	f7f5 f959 	bl	4148 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x148>
    ee96:	4604      	mov	r4, r0
    ee98:	f7f4 fd3a 	bl	3910 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    ee9c:	b00b      	add	sp, #44	; 0x2c
    ee9e:	4620      	mov	r0, r4
    eea0:	bd30      	pop	{r4, r5, pc}
    eea2:	f240 31af 	movw	r1, #943	; 0x3af
    eea6:	2032      	movs	r0, #50	; 0x32
    eea8:	f7f1 fdb8 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eeac:	b510      	push	{r4, lr}
    eeae:	f000 f80f 	bl	eed0 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x92>
    eeb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eeb6:	f7f5 bb7f 	b.w	45b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5b8>
    eeba:	b510      	push	{r4, lr}
    eebc:	f7f5 f9c4 	bl	4248 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x248>
    eec0:	f7f9 f822 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    eec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eec8:	f7f5 bb76 	b.w	45b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5b8>
    eecc:	f7f5 bb5e 	b.w	458c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58c>
    eed0:	b510      	push	{r4, lr}
    eed2:	f7f5 f9b9 	bl	4248 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x248>
    eed6:	f7f4 fd1b 	bl	3910 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    eeda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eede:	f7f9 b813 	b.w	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    eee2:	f7fe be52 	b.w	db8a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    eee6:	b570      	push	{r4, r5, r6, lr}
    eee8:	4614      	mov	r4, r2
    eeea:	461d      	mov	r5, r3
    eeec:	4606      	mov	r6, r0
    eeee:	f001 fee2 	bl	10cb6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    eef2:	1900      	adds	r0, r0, r4
    eef4:	4169      	adcs	r1, r5
    eef6:	e9c6 0100 	strd	r0, r1, [r6]
    eefa:	bd70      	pop	{r4, r5, r6, pc}

0000eefc <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    eefc:	b510      	push	{r4, lr}
    eefe:	f7f2 fa25 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ef02:	f000 f94f 	bl	f1a4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xf2>
    ef06:	4604      	mov	r4, r0
    ef08:	221c      	movs	r2, #28
    ef0a:	2100      	movs	r1, #0
    ef0c:	3009      	adds	r0, #9
    ef0e:	f002 f8f0 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ef12:	207f      	movs	r0, #127	; 0x7f
    ef14:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    ef18:	21ff      	movs	r1, #255	; 0xff
    ef1a:	75e1      	strb	r1, [r4, #23]
    ef1c:	72a1      	strb	r1, [r4, #10]
    ef1e:	7721      	strb	r1, [r4, #28]
    ef20:	7ce0      	ldrb	r0, [r4, #19]
    ef22:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    ef26:	3020      	adds	r0, #32
    ef28:	74e0      	strb	r0, [r4, #19]
    ef2a:	bd10      	pop	{r4, pc}

0000ef2c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    ef2c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ef30:	461d      	mov	r5, r3
    ef32:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    ef36:	4616      	mov	r6, r2
    ef38:	4688      	mov	r8, r1
    ef3a:	4681      	mov	r9, r0
    ef3c:	f7f2 fa06 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ef40:	4604      	mov	r4, r0
    ef42:	f7fe fceb 	bl	d91c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    ef46:	2801      	cmp	r0, #1
    ef48:	d066      	beq.n	f018 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xec>
    ef4a:	4620      	mov	r0, r4
    ef4c:	f000 f92a 	bl	f1a4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xf2>
    ef50:	4604      	mov	r4, r0
    ef52:	221c      	movs	r2, #28
    ef54:	2100      	movs	r1, #0
    ef56:	3009      	adds	r0, #9
    ef58:	f002 f8cb 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ef5c:	2701      	movs	r7, #1
    ef5e:	7267      	strb	r7, [r4, #9]
    ef60:	ea5f 0008 	movs.w	r0, r8
    ef64:	d009      	beq.n	ef7a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4e>
    ef66:	2801      	cmp	r0, #1
    ef68:	d00b      	beq.n	ef82 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x56>
    ef6a:	2802      	cmp	r0, #2
    ef6c:	d02d      	beq.n	efca <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9e>
    ef6e:	f1b8 0f06 	cmp.w	r8, #6
    ef72:	d02c      	beq.n	efce <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    ef74:	f240 312f 	movw	r1, #815	; 0x32f
    ef78:	e04b      	b.n	f012 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    ef7a:	7ce0      	ldrb	r0, [r4, #19]
    ef7c:	f040 0001 	orr.w	r0, r0, #1
    ef80:	e026      	b.n	efd0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa4>
    ef82:	7ce0      	ldrb	r0, [r4, #19]
    ef84:	f040 0005 	orr.w	r0, r0, #5
    ef88:	f040 0010 	orr.w	r0, r0, #16
    ef8c:	74e0      	strb	r0, [r4, #19]
    ef8e:	f104 030a 	add.w	r3, r4, #10
    ef92:	1c5a      	adds	r2, r3, #1
    ef94:	4648      	mov	r0, r9
    ef96:	990a      	ldr	r1, [sp, #40]	; 0x28
    ef98:	f000 f8e9 	bl	f16e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xbc>
    ef9c:	f884 a012 	strb.w	sl, [r4, #18]
    efa0:	7567      	strb	r7, [r4, #21]
    efa2:	2000      	movs	r0, #0
    efa4:	75a0      	strb	r0, [r4, #22]
    efa6:	20ff      	movs	r0, #255	; 0xff
    efa8:	75e0      	strb	r0, [r4, #23]
    efaa:	7ce1      	ldrb	r1, [r4, #19]
    efac:	0749      	lsls	r1, r1, #29
    efae:	d518      	bpl.n	efe2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    efb0:	f104 001d 	add.w	r0, r4, #29
    efb4:	1e41      	subs	r1, r0, #1
    efb6:	2d02      	cmp	r5, #2
    efb8:	d00d      	beq.n	efd6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    efba:	2d03      	cmp	r5, #3
    efbc:	d00b      	beq.n	efd6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    efbe:	f8d9 2008 	ldr.w	r2, [r9, #8]
    efc2:	6813      	ldr	r3, [r2, #0]
    efc4:	6003      	str	r3, [r0, #0]
    efc6:	8892      	ldrh	r2, [r2, #4]
    efc8:	e008      	b.n	efdc <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb0>
    efca:	7ce0      	ldrb	r0, [r4, #19]
    efcc:	e7dc      	b.n	ef88 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    efce:	7ce0      	ldrb	r0, [r4, #19]
    efd0:	f040 0002 	orr.w	r0, r0, #2
    efd4:	e7d8      	b.n	ef88 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    efd6:	6832      	ldr	r2, [r6, #0]
    efd8:	6002      	str	r2, [r0, #0]
    efda:	88b2      	ldrh	r2, [r6, #4]
    efdc:	8082      	strh	r2, [r0, #4]
    efde:	700d      	strb	r5, [r1, #0]
    efe0:	e000      	b.n	efe4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb8>
    efe2:	7720      	strb	r0, [r4, #28]
    efe4:	207f      	movs	r0, #127	; 0x7f
    efe6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    efea:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
    efee:	f7f2 f9a7 	bl	1340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    eff2:	4605      	mov	r5, r0
    eff4:	f7f2 f9aa 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    eff8:	2201      	movs	r2, #1
    effa:	4629      	mov	r1, r5
    effc:	f000 f8db 	bl	f1b6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x104>
    f000:	b128      	cbz	r0, f00e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe2>
    f002:	4620      	mov	r0, r4
    f004:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f008:	2100      	movs	r1, #0
    f00a:	f7f5 bc71 	b.w	48f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8f0>
    f00e:	f240 314f 	movw	r1, #847	; 0x34f
    f012:	2033      	movs	r0, #51	; 0x33
    f014:	f7f1 fd02 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f018:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000f01c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    f01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f020:	461e      	mov	r6, r3
    f022:	4617      	mov	r7, r2
    f024:	4689      	mov	r9, r1
    f026:	4682      	mov	sl, r0
    f028:	f8dd 8020 	ldr.w	r8, [sp, #32]
    f02c:	f7f2 f98e 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f030:	4604      	mov	r4, r0
    f032:	f7fe fc73 	bl	d91c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    f036:	2801      	cmp	r0, #1
    f038:	d039      	beq.n	f0ae <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x92>
    f03a:	4620      	mov	r0, r4
    f03c:	f000 f8b2 	bl	f1a4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xf2>
    f040:	4604      	mov	r4, r0
    f042:	221c      	movs	r2, #28
    f044:	2100      	movs	r1, #0
    f046:	3009      	adds	r0, #9
    f048:	f002 f853 	bl	110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f04c:	2501      	movs	r5, #1
    f04e:	f104 030a 	add.w	r3, r4, #10
    f052:	7265      	strb	r5, [r4, #9]
    f054:	1c5a      	adds	r2, r3, #1
    f056:	4649      	mov	r1, r9
    f058:	4650      	mov	r0, sl
    f05a:	f000 f888 	bl	f16e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xbc>
    f05e:	f884 8012 	strb.w	r8, [r4, #18]
    f062:	7ce0      	ldrb	r0, [r4, #19]
    f064:	21ff      	movs	r1, #255	; 0xff
    f066:	f367 0000 	bfi	r0, r7, #0, #1
    f06a:	f040 001a 	orr.w	r0, r0, #26
    f06e:	74e0      	strb	r0, [r4, #19]
    f070:	7565      	strb	r5, [r4, #21]
    f072:	2000      	movs	r0, #0
    f074:	75a0      	strb	r0, [r4, #22]
    f076:	75e1      	strb	r1, [r4, #23]
    f078:	7721      	strb	r1, [r4, #28]
    f07a:	207f      	movs	r0, #127	; 0x7f
    f07c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    f080:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    f084:	f7f2 f95c 	bl	1340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    f088:	4605      	mov	r5, r0
    f08a:	f7f2 f95f 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f08e:	2201      	movs	r2, #1
    f090:	4629      	mov	r1, r5
    f092:	f000 f890 	bl	f1b6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x104>
    f096:	b128      	cbz	r0, f0a4 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    f098:	4620      	mov	r0, r4
    f09a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f09e:	2100      	movs	r1, #0
    f0a0:	f7f5 bc26 	b.w	48f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8f0>
    f0a4:	f44f 715f 	mov.w	r1, #892	; 0x37c
    f0a8:	2033      	movs	r0, #51	; 0x33
    f0aa:	f7f1 fcb7 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f0b2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    f0b2:	f7ff bf23 	b.w	eefc <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    f0b6:	2200      	movs	r2, #0
    f0b8:	f000 b800 	b.w	f0bc <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa>
    f0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0c0:	b08c      	sub	sp, #48	; 0x30
    f0c2:	460f      	mov	r7, r1
    f0c4:	4680      	mov	r8, r0
    f0c6:	f7f2 f941 	bl	134c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f0ca:	4604      	mov	r4, r0
    f0cc:	f7fe fc77 	bl	d9be <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    f0d0:	0005      	movs	r5, r0
    f0d2:	d00c      	beq.n	f0ee <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x3c>
    f0d4:	4620      	mov	r0, r4
    f0d6:	4629      	mov	r1, r5
    f0d8:	aa0a      	add	r2, sp, #40	; 0x28
    f0da:	f7fe fc8e 	bl	d9fa <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    f0de:	4606      	mov	r6, r0
    f0e0:	f7f2 f92e 	bl	1340 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    f0e4:	42b0      	cmp	r0, r6
    f0e6:	d005      	beq.n	f0f4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x42>
    f0e8:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    f0ec:	e03c      	b.n	f168 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xb6>
    f0ee:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    f0f2:	e039      	b.n	f168 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xb6>
    f0f4:	4669      	mov	r1, sp
    f0f6:	980a      	ldr	r0, [sp, #40]	; 0x28
    f0f8:	f000 f85f 	bl	f1ba <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    f0fc:	1d3e      	adds	r6, r7, #4
    f0fe:	4628      	mov	r0, r5
    f100:	f7fe fc0a 	bl	d918 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    f104:	4605      	mov	r5, r0
    f106:	45a8      	cmp	r8, r5
    f108:	d002      	beq.n	f110 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x5e>
    f10a:	f240 11d5 	movw	r1, #469	; 0x1d5
    f10e:	e02b      	b.n	f168 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xb6>
    f110:	221c      	movs	r2, #28
    f112:	f105 0109 	add.w	r1, r5, #9
    f116:	4630      	mov	r0, r6
    f118:	f001 ff71 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f11c:	7ce8      	ldrb	r0, [r5, #19]
    f11e:	f04f 0500 	mov.w	r5, #0
    f122:	06c1      	lsls	r1, r0, #27
    f124:	d50d      	bpl.n	f142 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x90>
    f126:	0740      	lsls	r0, r0, #29
    f128:	d40a      	bmi.n	f140 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x8e>
    f12a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    f12e:	f106 001c 	add.w	r0, r6, #28
    f132:	9903      	ldr	r1, [sp, #12]
    f134:	f001 ff63 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f138:	f89d 0010 	ldrb.w	r0, [sp, #16]
    f13c:	7230      	strb	r0, [r6, #8]
    f13e:	e000      	b.n	f142 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x90>
    f140:	7235      	strb	r5, [r6, #8]
    f142:	707d      	strb	r5, [r7, #1]
    f144:	2005      	movs	r0, #5
    f146:	7038      	strb	r0, [r7, #0]
    f148:	4638      	mov	r0, r7
    f14a:	f7f5 fb61 	bl	4810 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x810>
    f14e:	4620      	mov	r0, r4
    f150:	f7fe fbfd 	bl	d94e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f154:	b130      	cbz	r0, f164 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xb2>
    f156:	4620      	mov	r0, r4
    f158:	2100      	movs	r1, #0
    f15a:	f7fe fcec 	bl	db36 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f15e:	b00c      	add	sp, #48	; 0x30
    f160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f164:	f44f 7105 	mov.w	r1, #532	; 0x214
    f168:	2033      	movs	r0, #51	; 0x33
    f16a:	f7f1 fc57 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f16e:	b510      	push	{r4, lr}
    f170:	461c      	mov	r4, r3
    f172:	460b      	mov	r3, r1
    f174:	29ff      	cmp	r1, #255	; 0xff
    f176:	d00d      	beq.n	f194 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xe2>
    f178:	4621      	mov	r1, r4
    f17a:	4618      	mov	r0, r3
    f17c:	f7f3 f8ba 	bl	22f4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    f180:	b120      	cbz	r0, f18c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xda>
    f182:	7820      	ldrb	r0, [r4, #0]
    f184:	f040 0002 	orr.w	r0, r0, #2
    f188:	7020      	strb	r0, [r4, #0]
    f18a:	bd10      	pop	{r4, pc}
    f18c:	21e4      	movs	r1, #228	; 0xe4
    f18e:	2033      	movs	r0, #51	; 0x33
    f190:	f7f1 fc44 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f194:	7c41      	ldrb	r1, [r0, #17]
    f196:	7021      	strb	r1, [r4, #0]
    f198:	6840      	ldr	r0, [r0, #4]
    f19a:	6801      	ldr	r1, [r0, #0]
    f19c:	6011      	str	r1, [r2, #0]
    f19e:	8880      	ldrh	r0, [r0, #4]
    f1a0:	8090      	strh	r0, [r2, #4]
    f1a2:	bd10      	pop	{r4, pc}
    f1a4:	b51c      	push	{r2, r3, r4, lr}
    f1a6:	4669      	mov	r1, sp
    f1a8:	aa01      	add	r2, sp, #4
    f1aa:	f7fe fc18 	bl	d9de <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    f1ae:	9800      	ldr	r0, [sp, #0]
    f1b0:	f7fe fbb2 	bl	d918 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    f1b4:	bd1c      	pop	{r2, r3, r4, pc}
    f1b6:	f7fe bb66 	b.w	d886 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000f1ba <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    f1ba:	7802      	ldrb	r2, [r0, #0]
    f1bc:	f002 020f 	and.w	r2, r2, #15
    f1c0:	f7f5 bb9e 	b.w	4900 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>

0000f1c4 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>:
    f1c4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f1c6:	256e      	movs	r5, #110	; 0x6e
    f1c8:	4668      	mov	r0, sp
    f1ca:	f7fd fd49 	bl	cc60 <mpsl_fem_pa_is_configured>
    f1ce:	f89d 0000 	ldrb.w	r0, [sp]
    f1d2:	b108      	cbz	r0, f1d8 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x14>
    f1d4:	2401      	movs	r4, #1
    f1d6:	e000      	b.n	f1da <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x16>
    f1d8:	2400      	movs	r4, #0
    f1da:	a801      	add	r0, sp, #4
    f1dc:	f7fd fd28 	bl	cc30 <mpsl_fem_lna_is_configured>
    f1e0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f1e4:	b100      	cbz	r0, f1e8 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x24>
    f1e6:	2001      	movs	r0, #1
    f1e8:	4304      	orrs	r4, r0
    f1ea:	d000      	beq.n	f1ee <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x2a>
    f1ec:	2578      	movs	r5, #120	; 0x78
    f1ee:	4628      	mov	r0, r5
    f1f0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f1f2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>:
    f1f2:	b510      	push	{r4, lr}
    f1f4:	f7ff ffe6 	bl	f1c4 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    f1f8:	306b      	adds	r0, #107	; 0x6b
    f1fa:	b280      	uxth	r0, r0
    f1fc:	bd10      	pop	{r4, pc}
    f1fe:	6980      	ldr	r0, [r0, #24]
    f200:	2800      	cmp	r0, #0
    f202:	d000      	beq.n	f206 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x14>
    f204:	2001      	movs	r0, #1
    f206:	4770      	bx	lr
    f208:	b510      	push	{r4, lr}
    f20a:	2802      	cmp	r0, #2
    f20c:	d007      	beq.n	f21e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2c>
    f20e:	2108      	movs	r1, #8
    f210:	2801      	cmp	r0, #1
    f212:	d006      	beq.n	f222 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x30>
    f214:	f44f 7182 	mov.w	r1, #260	; 0x104
    f218:	2005      	movs	r0, #5
    f21a:	f7f1 fbff 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f21e:	2104      	movs	r1, #4
    f220:	e7f6      	b.n	f210 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x1e>
    f222:	202a      	movs	r0, #42	; 0x2a
    f224:	2228      	movs	r2, #40	; 0x28
    f226:	fb11 2000 	smlabb	r0, r1, r0, r2
    f22a:	b280      	uxth	r0, r0
    f22c:	bd10      	pop	{r4, pc}
    f22e:	9800      	ldr	r0, [sp, #0]
    f230:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    f234:	1810      	adds	r0, r2, r0
    f236:	f143 0300 	adc.w	r3, r3, #0
    f23a:	1840      	adds	r0, r0, r1
    f23c:	f143 0100 	adc.w	r1, r3, #0
    f240:	3833      	subs	r0, #51	; 0x33
    f242:	f161 0100 	sbc.w	r1, r1, #0
    f246:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f24a:	1880      	adds	r0, r0, r2
    f24c:	f141 0100 	adc.w	r1, r1, #0
    f250:	4770      	bx	lr
    f252:	b510      	push	{r4, lr}
    f254:	f7ff ffb6 	bl	f1c4 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    f258:	f500 7083 	add.w	r0, r0, #262	; 0x106
    f25c:	b280      	uxth	r0, r0
    f25e:	bd10      	pop	{r4, pc}
    f260:	f7fb b96c 	b.w	a53c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f264:	1a10      	subs	r0, r2, r0
    f266:	4770      	bx	lr

0000f268 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    f268:	b510      	push	{r4, lr}
    f26a:	2905      	cmp	r1, #5
    f26c:	d22d      	bcs.n	f2ca <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    f26e:	e8df f001 	tbb	[pc, r1]
    f272:	0a05      	.short	0x0a05
    f274:	00280e03 	.word	0x00280e03
    f278:	2100      	movs	r1, #0
    f27a:	e000      	b.n	f27e <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    f27c:	2101      	movs	r1, #1
    f27e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f282:	f7f6 ba03 	b.w	568c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x140>
    f286:	2103      	movs	r1, #3
    f288:	f880 1248 	strb.w	r1, [r0, #584]	; 0x248
    f28c:	bd10      	pop	{r4, pc}
    f28e:	4604      	mov	r4, r0
    f290:	6900      	ldr	r0, [r0, #16]
    f292:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    f296:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    f29a:	6220      	str	r0, [r4, #32]
    f29c:	f8b4 0268 	ldrh.w	r0, [r4, #616]	; 0x268
    f2a0:	84a0      	strh	r0, [r4, #36]	; 0x24
    f2a2:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    f2a6:	6120      	str	r0, [r4, #16]
    f2a8:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    f2ac:	8320      	strh	r0, [r4, #24]
    f2ae:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    f2b2:	8360      	strh	r0, [r4, #26]
    f2b4:	4620      	mov	r0, r4
    f2b6:	f000 f83f 	bl	f338 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x54>
    f2ba:	2002      	movs	r0, #2
    f2bc:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    f2c0:	bd10      	pop	{r4, pc}
    f2c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f2c6:	f000 b837 	b.w	f338 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x54>
    f2ca:	f240 312b 	movw	r1, #811	; 0x32b
    f2ce:	2035      	movs	r0, #53	; 0x35
    f2d0:	f7f1 fba4 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f2d4 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    f2d4:	b510      	push	{r4, lr}
    f2d6:	f7f6 f951 	bl	557c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    f2da:	2000      	movs	r0, #0
    f2dc:	bd10      	pop	{r4, pc}

0000f2de <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
    f2de:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
    f2e2:	4770      	bx	lr

0000f2e4 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA>:
    f2e4:	b510      	push	{r4, lr}
    f2e6:	b086      	sub	sp, #24
    f2e8:	0004      	movs	r4, r0
    f2ea:	d005      	beq.n	f2f8 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x14>
    f2ec:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    f2f0:	b128      	cbz	r0, f2fe <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1a>
    f2f2:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    f2f6:	e015      	b.n	f324 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x40>
    f2f8:	f240 11b1 	movw	r1, #433	; 0x1b1
    f2fc:	e012      	b.n	f324 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x40>
    f2fe:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    f302:	2820      	cmp	r0, #32
    f304:	d011      	beq.n	f32a <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x46>
    f306:	2300      	movs	r3, #0
    f308:	2201      	movs	r2, #1
    f30a:	4621      	mov	r1, r4
    f30c:	4668      	mov	r0, sp
    f30e:	f000 f866 	bl	f3de <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xfa>
    f312:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    f316:	4669      	mov	r1, sp
    f318:	f000 f930 	bl	f57c <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x298>
    f31c:	2800      	cmp	r0, #0
    f31e:	d107      	bne.n	f330 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x4c>
    f320:	f240 11b7 	movw	r1, #439	; 0x1b7
    f324:	2035      	movs	r0, #53	; 0x35
    f326:	f7f1 fb79 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f32a:	f240 11b3 	movw	r1, #435	; 0x1b3
    f32e:	e7f9      	b.n	f324 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x40>
    f330:	b006      	add	sp, #24
    f332:	bd10      	pop	{r4, pc}
    f334:	2000      	movs	r0, #0
    f336:	4770      	bx	lr
    f338:	b510      	push	{r4, lr}
    f33a:	4604      	mov	r4, r0
    f33c:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    f340:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    f344:	f7f6 f9be 	bl	56c4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x178>
    f348:	4601      	mov	r1, r0
    f34a:	4620      	mov	r0, r4
    f34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f350:	f7ff ba58 	b.w	e804 <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>
    f354:	b510      	push	{r4, lr}
    f356:	0004      	movs	r4, r0
    f358:	d008      	beq.n	f36c <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x88>
    f35a:	2909      	cmp	r1, #9
    f35c:	d23b      	bcs.n	f3d6 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xf2>
    f35e:	e8df f001 	tbb	[pc, r1]
    f362:	1808      	.short	0x1808
    f364:	3a1c2020 	.word	0x3a1c2020
    f368:	00352e27 	.word	0x00352e27
    f36c:	f240 1101 	movw	r1, #257	; 0x101
    f370:	e02e      	b.n	f3d0 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xec>
    f372:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    f376:	b148      	cbz	r0, f38c <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xa8>
    f378:	4620      	mov	r0, r4
    f37a:	f7f6 fa89 	bl	5890 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    f37e:	2800      	cmp	r0, #0
    f380:	d02c      	beq.n	f3dc <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xf8>
    f382:	4620      	mov	r0, r4
    f384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f388:	f7f6 b936 	b.w	55f8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xac>
    f38c:	f240 1109 	movw	r1, #265	; 0x109
    f390:	e01e      	b.n	f3d0 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xec>
    f392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f396:	f000 b923 	b.w	f5e0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    f39a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f39e:	f7f9 b8dd 	b.w	855c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f3a2:	4620      	mov	r0, r4
    f3a4:	2201      	movs	r2, #1
    f3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3aa:	2100      	movs	r1, #0
    f3ac:	f000 b8cf 	b.w	f54e <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x26a>
    f3b0:	2001      	movs	r0, #1
    f3b2:	f7fa fe6b 	bl	a08c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f3b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3ba:	f7fe bdc5 	b.w	df48 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>
    f3be:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    f3c2:	2804      	cmp	r0, #4
    f3c4:	d00a      	beq.n	f3dc <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xf8>
    f3c6:	f240 112f 	movw	r1, #303	; 0x12f
    f3ca:	e001      	b.n	f3d0 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xec>
    f3cc:	f44f 719a 	mov.w	r1, #308	; 0x134
    f3d0:	2035      	movs	r0, #53	; 0x35
    f3d2:	f7f1 fb23 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3d6:	f44f 719c 	mov.w	r1, #312	; 0x138
    f3da:	e7f9      	b.n	f3d0 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xec>
    f3dc:	bd10      	pop	{r4, pc}
    f3de:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f3e2:	469a      	mov	sl, r3
    f3e4:	4691      	mov	r9, r2
    f3e6:	460c      	mov	r4, r1
    f3e8:	4606      	mov	r6, r0
    f3ea:	2500      	movs	r5, #0
    f3ec:	f7ff feea 	bl	f1c4 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    f3f0:	4680      	mov	r8, r0
    f3f2:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    f3f6:	280d      	cmp	r0, #13
    f3f8:	d017      	beq.n	f42a <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x146>
    f3fa:	280e      	cmp	r0, #14
    f3fc:	d015      	beq.n	f42a <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x146>
    f3fe:	2000      	movs	r0, #0
    f400:	4683      	mov	fp, r0
    f402:	f1ba 0f00 	cmp.w	sl, #0
    f406:	d003      	beq.n	f410 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x12c>
    f408:	2101      	movs	r1, #1
    f40a:	4620      	mov	r0, r4
    f40c:	f7f6 faba 	bl	5984 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    f410:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    f414:	2701      	movs	r7, #1
    f416:	b150      	cbz	r0, f42e <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x14a>
    f418:	2801      	cmp	r0, #1
    f41a:	d01a      	beq.n	f452 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x16e>
    f41c:	2802      	cmp	r0, #2
    f41e:	d012      	beq.n	f446 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x162>
    f420:	2803      	cmp	r0, #3
    f422:	d016      	beq.n	f452 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x16e>
    f424:	f44f 7119 	mov.w	r1, #612	; 0x264
    f428:	e08e      	b.n	f548 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x264>
    f42a:	2001      	movs	r0, #1
    f42c:	e7e8      	b.n	f400 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x11c>
    f42e:	f1b9 0f00 	cmp.w	r9, #0
    f432:	d005      	beq.n	f440 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x15c>
    f434:	f884 7248 	strb.w	r7, [r4, #584]	; 0x248
    f438:	4620      	mov	r0, r4
    f43a:	f7ff ff7d 	bl	f338 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x54>
    f43e:	e009      	b.n	f454 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x170>
    f440:	f44f 710b 	mov.w	r1, #556	; 0x22c
    f444:	e080      	b.n	f548 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x264>
    f446:	2003      	movs	r0, #3
    f448:	f8d4 5250 	ldr.w	r5, [r4, #592]	; 0x250
    f44c:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    f450:	e000      	b.n	f454 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x170>
    f452:	6925      	ldr	r5, [r4, #16]
    f454:	e9d4 108a 	ldrd	r1, r0, [r4, #552]	; 0x228
    f458:	f04f 0900 	mov.w	r9, #0
    f45c:	1949      	adds	r1, r1, r5
    f45e:	eb40 0009 	adc.w	r0, r0, r9
    f462:	e9c4 108a 	strd	r1, r0, [r4, #552]	; 0x228
    f466:	e9c6 1004 	strd	r1, r0, [r6, #16]
    f46a:	f886 9000 	strb.w	r9, [r6]
    f46e:	f8a6 8008 	strh.w	r8, [r6, #8]
    f472:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    f476:	280d      	cmp	r0, #13
    f478:	d02b      	beq.n	f4d2 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1ee>
    f47a:	280b      	cmp	r0, #11
    f47c:	d029      	beq.n	f4d2 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1ee>
    f47e:	2825      	cmp	r0, #37	; 0x25
    f480:	d027      	beq.n	f4d2 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1ee>
    f482:	2000      	movs	r0, #0
    f484:	4680      	mov	r8, r0
    f486:	4620      	mov	r0, r4
    f488:	f7f6 f948 	bl	571c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    f48c:	4601      	mov	r1, r0
    f48e:	f1a8 0001 	sub.w	r0, r8, #1
    f492:	4201      	tst	r1, r0
    f494:	d102      	bne.n	f49c <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1b8>
    f496:	f886 900a 	strb.w	r9, [r6, #10]
    f49a:	e005      	b.n	f4a8 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1c4>
    f49c:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    f4a0:	2801      	cmp	r0, #1
    f4a2:	d018      	beq.n	f4d6 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1f2>
    f4a4:	2002      	movs	r0, #2
    f4a6:	72b0      	strb	r0, [r6, #10]
    f4a8:	72f7      	strb	r7, [r6, #11]
    f4aa:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f4ae:	f7ff f9a7 	bl	e800 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    f4b2:	6070      	str	r0, [r6, #4]
    f4b4:	ea3a 000b 	bics.w	r0, sl, fp
    f4b8:	d042      	beq.n	f540 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x25c>
    f4ba:	4629      	mov	r1, r5
    f4bc:	4630      	mov	r0, r6
    f4be:	f7fe fee7 	bl	e290 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f4c2:	b287      	uxth	r7, r0
    f4c4:	4620      	mov	r0, r4
    f4c6:	f7f6 f929 	bl	571c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    f4ca:	f1b8 0f00 	cmp.w	r8, #0
    f4ce:	d004      	beq.n	f4da <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1f6>
    f4d0:	e018      	b.n	f504 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x220>
    f4d2:	2001      	movs	r0, #1
    f4d4:	e7d6      	b.n	f484 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1a0>
    f4d6:	72b7      	strb	r7, [r6, #10]
    f4d8:	e7e6      	b.n	f4a8 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x1c4>
    f4da:	42b8      	cmp	r0, r7
    f4dc:	d812      	bhi.n	f504 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x220>
    f4de:	f886 900a 	strb.w	r9, [r6, #10]
    f4e2:	e9d4 328a 	ldrd	r3, r2, [r4, #552]	; 0x228
    f4e6:	4607      	mov	r7, r0
    f4e8:	fb05 f107 	mul.w	r1, r5, r7
    f4ec:	1859      	adds	r1, r3, r1
    f4ee:	eb42 0209 	adc.w	r2, r2, r9
    f4f2:	e9c6 1204 	strd	r1, r2, [r6, #16]
    f4f6:	b32d      	cbz	r5, f544 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x260>
    f4f8:	4629      	mov	r1, r5
    f4fa:	4630      	mov	r0, r6
    f4fc:	f7fe fec8 	bl	e290 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f500:	4438      	add	r0, r7
    f502:	b287      	uxth	r7, r0
    f504:	4639      	mov	r1, r7
    f506:	4620      	mov	r0, r4
    f508:	f7f6 fa3c 	bl	5984 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    f50c:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    f510:	e9c4 018a 	strd	r0, r1, [r4, #552]	; 0x228
    f514:	6f20      	ldr	r0, [r4, #112]	; 0x70
    f516:	2800      	cmp	r0, #0
    f518:	d012      	beq.n	f540 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x25c>
    f51a:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    f51e:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
    f522:	1a80      	subs	r0, r0, r2
    f524:	b201      	sxth	r1, r0
    f526:	2900      	cmp	r1, #0
    f528:	dd0a      	ble.n	f540 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x25c>
    f52a:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    f52e:	4401      	add	r1, r0
    f530:	1e49      	subs	r1, r1, #1
    f532:	fb91 f1f0 	sdiv	r1, r1, r0
    f536:	b289      	uxth	r1, r1
    f538:	fb01 2000 	mla	r0, r1, r0, r2
    f53c:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    f540:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    f544:	f240 21a6 	movw	r1, #678	; 0x2a6
    f548:	2035      	movs	r0, #53	; 0x35
    f54a:	f7f1 fa67 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f54e:	b510      	push	{r4, lr}
    f550:	4613      	mov	r3, r2
    f552:	460a      	mov	r2, r1
    f554:	b086      	sub	sp, #24
    f556:	4604      	mov	r4, r0
    f558:	4601      	mov	r1, r0
    f55a:	4668      	mov	r0, sp
    f55c:	f7ff ff3f 	bl	f3de <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0xfa>
    f560:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    f564:	4669      	mov	r1, sp
    f566:	f000 f809 	bl	f57c <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x298>
    f56a:	2800      	cmp	r0, #0
    f56c:	d104      	bne.n	f578 <sym_YFJA2DR3B2GMOYCYI4FI6MGASQ2G5S4BSZFCCSA+0x294>
    f56e:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    f572:	2035      	movs	r0, #53	; 0x35
    f574:	f7f1 fa52 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f578:	b006      	add	sp, #24
    f57a:	bd10      	pop	{r4, pc}
    f57c:	f7fa bfde 	b.w	a53c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f580:	a62c0000 	.word	0xa62c0000
    f584:	a1e0      	.short	0xa1e0
    f586:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f58a:	f001 0307 	and.w	r3, r1, #7
    f58e:	7802      	ldrb	r2, [r0, #0]
    f590:	2101      	movs	r1, #1
    f592:	4099      	lsls	r1, r3
    f594:	438a      	bics	r2, r1
    f596:	7002      	strb	r2, [r0, #0]
    f598:	4770      	bx	lr

0000f59a <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    f59a:	b510      	push	{r4, lr}
    f59c:	460c      	mov	r4, r1
    f59e:	f7f1 fe2f 	bl	1200 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    f5a2:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    f5a6:	2820      	cmp	r0, #32
    f5a8:	d006      	beq.n	f5b8 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x1e>
    f5aa:	f7fb fd8f 	bl	b0cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f5ae:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    f5b2:	f7fb fd69 	bl	b088 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f5b6:	b158      	cbz	r0, f5d0 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x36>
    f5b8:	f504 700a 	add.w	r0, r4, #552	; 0x228
    f5bc:	4604      	mov	r4, r0
    f5be:	f7f7 fcf3 	bl	6fa8 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI>
    f5c2:	2800      	cmp	r0, #0
    f5c4:	d009      	beq.n	f5da <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x40>
    f5c6:	4620      	mov	r0, r4
    f5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5cc:	f7f7 bcfa 	b.w	6fc4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    f5d0:	f640 318a 	movw	r1, #2954	; 0xb8a
    f5d4:	2036      	movs	r0, #54	; 0x36
    f5d6:	f7f1 fa21 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5da:	bd10      	pop	{r4, pc}

0000f5dc <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    f5dc:	2000      	movs	r0, #0
    f5de:	4770      	bx	lr

0000f5e0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    f5e0:	b510      	push	{r4, lr}
    f5e2:	f7f6 fecb 	bl	637c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9f8>
    f5e6:	b128      	cbz	r0, f5f4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    f5e8:	2000      	movs	r0, #0
    f5ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5ee:	4601      	mov	r1, r0
    f5f0:	f7f6 be6c 	b.w	62cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x948>
    f5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5f8:	f7f2 ba08 	b.w	1a0c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>
    f5fc:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    f600:	28fe      	cmp	r0, #254	; 0xfe
    f602:	d001      	beq.n	f608 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    f604:	2001      	movs	r0, #1
    f606:	4770      	bx	lr
    f608:	2000      	movs	r0, #0
    f60a:	4770      	bx	lr
    f60c:	b510      	push	{r4, lr}
    f60e:	2801      	cmp	r0, #1
    f610:	d006      	beq.n	f620 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    f612:	2802      	cmp	r0, #2
    f614:	d004      	beq.n	f620 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    f616:	f240 21d7 	movw	r1, #727	; 0x2d7
    f61a:	2006      	movs	r0, #6
    f61c:	f7f1 f9fe 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f620:	bd10      	pop	{r4, pc}
    f622:	2801      	cmp	r0, #1
    f624:	d002      	beq.n	f62c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    f626:	2802      	cmp	r0, #2
    f628:	d105      	bne.n	f636 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    f62a:	e002      	b.n	f632 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    f62c:	2901      	cmp	r1, #1
    f62e:	d004      	beq.n	f63a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    f630:	e001      	b.n	f636 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    f632:	2902      	cmp	r1, #2
    f634:	d001      	beq.n	f63a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    f636:	2000      	movs	r0, #0
    f638:	4770      	bx	lr
    f63a:	2001      	movs	r0, #1
    f63c:	4770      	bx	lr
    f63e:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    f642:	428a      	cmp	r2, r1
    f644:	d301      	bcc.n	f64a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    f646:	1a51      	subs	r1, r2, r1
    f648:	e000      	b.n	f64c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    f64a:	2100      	movs	r1, #0
    f64c:	8b02      	ldrh	r2, [r0, #24]
    f64e:	1d52      	adds	r2, r2, #5
    f650:	428a      	cmp	r2, r1
    f652:	d302      	bcc.n	f65a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    f654:	2101      	movs	r1, #1
    f656:	f880 10d4 	strb.w	r1, [r0, #212]	; 0xd4
    f65a:	4770      	bx	lr
    f65c:	6841      	ldr	r1, [r0, #4]
    f65e:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    f662:	2a10      	cmp	r2, #16
    f664:	d001      	beq.n	f66a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x8a>
    f666:	2002      	movs	r0, #2
    f668:	4770      	bx	lr
    f66a:	2200      	movs	r2, #0
    f66c:	f881 20aa 	strb.w	r2, [r1, #170]	; 0xaa
    f670:	6840      	ldr	r0, [r0, #4]
    f672:	2113      	movs	r1, #19
    f674:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f678:	4610      	mov	r0, r2
    f67a:	4770      	bx	lr
    f67c:	b510      	push	{r4, lr}
    f67e:	4604      	mov	r4, r0
    f680:	6840      	ldr	r0, [r0, #4]
    f682:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    f686:	2917      	cmp	r1, #23
    f688:	d001      	beq.n	f68e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xae>
    f68a:	2002      	movs	r0, #2
    f68c:	bd10      	pop	{r4, pc}
    f68e:	f500 7388 	add.w	r3, r0, #272	; 0x110
    f692:	f200 2193 	addw	r1, r0, #659	; 0x293
    f696:	2200      	movs	r2, #0
    f698:	f200 2083 	addw	r0, r0, #643	; 0x283
    f69c:	f7fe fc96 	bl	dfcc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f6a0:	6862      	ldr	r2, [r4, #4]
    f6a2:	2000      	movs	r0, #0
    f6a4:	e9c2 0040 	strd	r0, r0, [r2, #256]	; 0x100
    f6a8:	6861      	ldr	r1, [r4, #4]
    f6aa:	2001      	movs	r0, #1
    f6ac:	f881 00aa 	strb.w	r0, [r1, #170]	; 0xaa
    f6b0:	6861      	ldr	r1, [r4, #4]
    f6b2:	2019      	movs	r0, #25
    f6b4:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f6b8:	2000      	movs	r0, #0
    f6ba:	bd10      	pop	{r4, pc}
    f6bc:	b510      	push	{r4, lr}
    f6be:	4604      	mov	r4, r0
    f6c0:	6840      	ldr	r0, [r0, #4]
    f6c2:	2300      	movs	r3, #0
    f6c4:	4619      	mov	r1, r3
    f6c6:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f6ca:	3088      	adds	r0, #136	; 0x88
    f6cc:	f7fe fcd0 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f6d0:	b120      	cbz	r0, f6dc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xfc>
    f6d2:	6861      	ldr	r1, [r4, #4]
    f6d4:	200b      	movs	r0, #11
    f6d6:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f6da:	bd10      	pop	{r4, pc}
    f6dc:	f44f 61da 	mov.w	r1, #1744	; 0x6d0
    f6e0:	2036      	movs	r0, #54	; 0x36
    f6e2:	f7f1 f99b 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6e6:	b510      	push	{r4, lr}
    f6e8:	4604      	mov	r4, r0
    f6ea:	6840      	ldr	r0, [r0, #4]
    f6ec:	2300      	movs	r3, #0
    f6ee:	4619      	mov	r1, r3
    f6f0:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f6f4:	3088      	adds	r0, #136	; 0x88
    f6f6:	f7fe fcbb 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f6fa:	b120      	cbz	r0, f706 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x126>
    f6fc:	6861      	ldr	r1, [r4, #4]
    f6fe:	200d      	movs	r0, #13
    f700:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f704:	bd10      	pop	{r4, pc}
    f706:	f240 61d6 	movw	r1, #1750	; 0x6d6
    f70a:	2036      	movs	r0, #54	; 0x36
    f70c:	f7f1 f986 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f710:	b510      	push	{r4, lr}
    f712:	4604      	mov	r4, r0
    f714:	6840      	ldr	r0, [r0, #4]
    f716:	2300      	movs	r3, #0
    f718:	4619      	mov	r1, r3
    f71a:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f71e:	3088      	adds	r0, #136	; 0x88
    f720:	f7fe fca6 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f724:	b918      	cbnz	r0, f72e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
    f726:	6860      	ldr	r0, [r4, #4]
    f728:	f890 00e6 	ldrb.w	r0, [r0, #230]	; 0xe6
    f72c:	b140      	cbz	r0, f740 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x160>
    f72e:	6861      	ldr	r1, [r4, #4]
    f730:	2001      	movs	r0, #1
    f732:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    f736:	6861      	ldr	r1, [r4, #4]
    f738:	2014      	movs	r0, #20
    f73a:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f73e:	bd10      	pop	{r4, pc}
    f740:	f240 61eb 	movw	r1, #1771	; 0x6eb
    f744:	2036      	movs	r0, #54	; 0x36
    f746:	f7f1 f969 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f74a:	f7ff ba54 	b.w	ebf6 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f74e:	b510      	push	{r4, lr}
    f750:	4604      	mov	r4, r0
    f752:	6840      	ldr	r0, [r0, #4]
    f754:	2300      	movs	r3, #0
    f756:	4619      	mov	r1, r3
    f758:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f75c:	3088      	adds	r0, #136	; 0x88
    f75e:	f7fe fc87 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f762:	b148      	cbz	r0, f778 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x198>
    f764:	6861      	ldr	r1, [r4, #4]
    f766:	2000      	movs	r0, #0
    f768:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f76c:	6860      	ldr	r0, [r4, #4]
    f76e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f772:	2104      	movs	r1, #4
    f774:	f7ff bd78 	b.w	f268 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    f778:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    f77c:	2036      	movs	r0, #54	; 0x36
    f77e:	f7f1 f94d 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f782:	f7ff ba4a 	b.w	ec1a <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f786:	b510      	push	{r4, lr}
    f788:	4604      	mov	r4, r0
    f78a:	6840      	ldr	r0, [r0, #4]
    f78c:	2300      	movs	r3, #0
    f78e:	4619      	mov	r1, r3
    f790:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f794:	3088      	adds	r0, #136	; 0x88
    f796:	f7fe fc6b 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f79a:	b140      	cbz	r0, f7ae <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1ce>
    f79c:	6861      	ldr	r1, [r4, #4]
    f79e:	2001      	movs	r0, #1
    f7a0:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    f7a4:	6861      	ldr	r1, [r4, #4]
    f7a6:	2010      	movs	r0, #16
    f7a8:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f7ac:	bd10      	pop	{r4, pc}
    f7ae:	f240 61dc 	movw	r1, #1756	; 0x6dc
    f7b2:	2036      	movs	r0, #54	; 0x36
    f7b4:	f7f1 f932 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7b8:	b510      	push	{r4, lr}
    f7ba:	6841      	ldr	r1, [r0, #4]
    f7bc:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    f7c0:	2a13      	cmp	r2, #19
    f7c2:	d004      	beq.n	f7ce <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1ee>
    f7c4:	f240 61e4 	movw	r1, #1764	; 0x6e4
    f7c8:	2036      	movs	r0, #54	; 0x36
    f7ca:	f7f1 f927 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7ce:	2201      	movs	r2, #1
    f7d0:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    f7d4:	6840      	ldr	r0, [r0, #4]
    f7d6:	2112      	movs	r1, #18
    f7d8:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f7dc:	bd10      	pop	{r4, pc}
    f7de:	b570      	push	{r4, r5, r6, lr}
    f7e0:	6841      	ldr	r1, [r0, #4]
    f7e2:	4604      	mov	r4, r0
    f7e4:	f891 0262 	ldrb.w	r0, [r1, #610]	; 0x262
    f7e8:	b910      	cbnz	r0, f7f0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x210>
    f7ea:	f891 0263 	ldrb.w	r0, [r1, #611]	; 0x263
    f7ee:	b178      	cbz	r0, f810 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x230>
    f7f0:	2000      	movs	r0, #0
    f7f2:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
    f7f6:	2225      	movs	r2, #37	; 0x25
    f7f8:	2500      	movs	r5, #0
    f7fa:	2b22      	cmp	r3, #34	; 0x22
    f7fc:	d00a      	beq.n	f814 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x234>
    f7fe:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
    f802:	2b24      	cmp	r3, #36	; 0x24
    f804:	d01b      	beq.n	f83e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x25e>
    f806:	f240 712f 	movw	r1, #1839	; 0x72f
    f80a:	2036      	movs	r0, #54	; 0x36
    f80c:	f7f1 f906 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f810:	2001      	movs	r0, #1
    f812:	e7ee      	b.n	f7f2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x212>
    f814:	b168      	cbz	r0, f832 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x252>
    f816:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    f81a:	6860      	ldr	r0, [r4, #4]
    f81c:	f890 0144 	ldrb.w	r0, [r0, #324]	; 0x144
    f820:	2801      	cmp	r0, #1
    f822:	d102      	bne.n	f82a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x24a>
    f824:	2000      	movs	r0, #0
    f826:	f7f6 ff6b 	bl	6700 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd7c>
    f82a:	6860      	ldr	r0, [r4, #4]
    f82c:	f880 5144 	strb.w	r5, [r0, #324]	; 0x144
    f830:	e001      	b.n	f836 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x256>
    f832:	f881 20a6 	strb.w	r2, [r1, #166]	; 0xa6
    f836:	6860      	ldr	r0, [r4, #4]
    f838:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    f83c:	bd70      	pop	{r4, r5, r6, pc}
    f83e:	b128      	cbz	r0, f84c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x26c>
    f840:	f881 50a5 	strb.w	r5, [r1, #165]	; 0xa5
    f844:	2000      	movs	r0, #0
    f846:	f7f6 ff5b 	bl	6700 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd7c>
    f84a:	e001      	b.n	f850 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x270>
    f84c:	f881 20a5 	strb.w	r2, [r1, #165]	; 0xa5
    f850:	6860      	ldr	r0, [r4, #4]
    f852:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f856:	bd70      	pop	{r4, r5, r6, pc}
    f858:	6842      	ldr	r2, [r0, #4]
    f85a:	2100      	movs	r1, #0
    f85c:	f892 3130 	ldrb.w	r3, [r2, #304]	; 0x130
    f860:	b12b      	cbz	r3, f86e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28e>
    f862:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
    f866:	6840      	ldr	r0, [r0, #4]
    f868:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    f86c:	4770      	bx	lr
    f86e:	f882 10a6 	strb.w	r1, [r2, #166]	; 0xa6
    f872:	6840      	ldr	r0, [r0, #4]
    f874:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    f878:	4770      	bx	lr
    f87a:	b510      	push	{r4, lr}
    f87c:	6840      	ldr	r0, [r0, #4]
    f87e:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    f882:	2919      	cmp	r1, #25
    f884:	d004      	beq.n	f890 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2b0>
    f886:	f240 61f4 	movw	r1, #1780	; 0x6f4
    f88a:	2036      	movs	r0, #54	; 0x36
    f88c:	f7f1 f8c6 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f890:	211b      	movs	r1, #27
    f892:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f896:	bd10      	pop	{r4, pc}
    f898:	6841      	ldr	r1, [r0, #4]
    f89a:	2200      	movs	r2, #0
    f89c:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
    f8a0:	2b03      	cmp	r3, #3
    f8a2:	d002      	beq.n	f8aa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2ca>
    f8a4:	f881 20e4 	strb.w	r2, [r1, #228]	; 0xe4
    f8a8:	4770      	bx	lr
    f8aa:	f881 20e0 	strb.w	r2, [r1, #224]	; 0xe0
    f8ae:	6840      	ldr	r0, [r0, #4]
    f8b0:	f880 20a5 	strb.w	r2, [r0, #165]	; 0xa5
    f8b4:	4770      	bx	lr
    f8b6:	f7ff ba32 	b.w	ed1e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f8ba:	b510      	push	{r4, lr}
    f8bc:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    f8c0:	b941      	cbnz	r1, f8d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f4>
    f8c2:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f8c6:	2300      	movs	r3, #0
    f8c8:	2106      	movs	r1, #6
    f8ca:	3088      	adds	r0, #136	; 0x88
    f8cc:	f7fe fbd0 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f8d0:	2800      	cmp	r0, #0
    f8d2:	d000      	beq.n	f8d6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f6>
    f8d4:	2001      	movs	r0, #1
    f8d6:	bd10      	pop	{r4, pc}

0000f8d8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    f8d8:	b510      	push	{r4, lr}
    f8da:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    f8de:	1ac3      	subs	r3, r0, r3
    f8e0:	eb61 0104 	sbc.w	r1, r1, r4
    f8e4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    f8e8:	17e0      	asrs	r0, r4, #31
    f8ea:	1ae4      	subs	r4, r4, r3
    f8ec:	4188      	sbcs	r0, r1
    f8ee:	da05      	bge.n	f8fc <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x24>
    f8f0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f8f4:	1a18      	subs	r0, r3, r0
    f8f6:	f171 0000 	sbcs.w	r0, r1, #0
    f8fa:	db03      	blt.n	f904 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x2c>
    f8fc:	21b6      	movs	r1, #182	; 0xb6
    f8fe:	2037      	movs	r0, #55	; 0x37
    f900:	f7f1 f88c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f904:	2900      	cmp	r1, #0
    f906:	da00      	bge.n	f90a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x32>
    f908:	425b      	negs	r3, r3
    f90a:	fbb3 f0f2 	udiv	r0, r3, r2
    f90e:	fb02 3010 	mls	r0, r2, r0, r3
    f912:	2900      	cmp	r1, #0
    f914:	da02      	bge.n	f91c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f916:	2800      	cmp	r0, #0
    f918:	d000      	beq.n	f91c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f91a:	1a10      	subs	r0, r2, r0
    f91c:	bd10      	pop	{r4, pc}
    f91e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f922:	f001 0107 	and.w	r1, r1, #7
    f926:	7800      	ldrb	r0, [r0, #0]
    f928:	40c8      	lsrs	r0, r1
    f92a:	f000 0001 	and.w	r0, r0, #1
    f92e:	4770      	bx	lr

0000f930 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f930:	b510      	push	{r4, lr}
    f932:	2801      	cmp	r0, #1
    f934:	d006      	beq.n	f944 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f936:	2802      	cmp	r0, #2
    f938:	d006      	beq.n	f948 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f93a:	f240 2175 	movw	r1, #629	; 0x275
    f93e:	2078      	movs	r0, #120	; 0x78
    f940:	f7f1 f86c 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f944:	2000      	movs	r0, #0
    f946:	bd10      	pop	{r4, pc}
    f948:	2001      	movs	r0, #1
    f94a:	bd10      	pop	{r4, pc}

0000f94c <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f94c:	207f      	movs	r0, #127	; 0x7f
    f94e:	f000 b88e 	b.w	fa6e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f952 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f952:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f956:	f000 b88a 	b.w	fa6e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f95a <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f95a:	b510      	push	{r4, lr}
    f95c:	4604      	mov	r4, r0
    f95e:	f7f8 f82d 	bl	79bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f962:	1e64      	subs	r4, r4, #1
    f964:	b2e2      	uxtb	r2, r4
    f966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f96a:	f000 b85d 	b.w	fa28 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>

0000f96e <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f96e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f972:	4607      	mov	r7, r0
    f974:	461e      	mov	r6, r3
    f976:	4690      	mov	r8, r2
    f978:	460c      	mov	r4, r1
    f97a:	4608      	mov	r0, r1
    f97c:	f7ff ffed 	bl	f95a <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f980:	b1f8      	cbz	r0, f9c2 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f982:	687d      	ldr	r5, [r7, #4]
    f984:	2121      	movs	r1, #33	; 0x21
    f986:	f105 00f6 	add.w	r0, r5, #246	; 0xf6
    f98a:	3588      	adds	r5, #136	; 0x88
    f98c:	f7ff ffc7 	bl	f91e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f990:	b1c8      	cbz	r0, f9c6 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f992:	1e64      	subs	r4, r4, #1
    f994:	f8d5 1072 	ldr.w	r1, [r5, #114]	; 0x72
    f998:	f8d5 006e 	ldr.w	r0, [r5, #110]	; 0x6e
    f99c:	b2e2      	uxtb	r2, r4
    f99e:	f000 f843 	bl	fa28 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>
    f9a2:	b180      	cbz	r0, f9c6 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f9a4:	6878      	ldr	r0, [r7, #4]
    f9a6:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    f9aa:	f88d 1000 	strb.w	r1, [sp]
    f9ae:	9900      	ldr	r1, [sp, #0]
    f9b0:	9100      	str	r1, [sp, #0]
    f9b2:	f89d 1000 	ldrb.w	r1, [sp]
    f9b6:	f200 104f 	addw	r0, r0, #335	; 0x14f
    f9ba:	b131      	cbz	r1, f9ca <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x5c>
    f9bc:	203a      	movs	r0, #58	; 0x3a
    f9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f9c2:	2011      	movs	r0, #17
    f9c4:	e7fb      	b.n	f9be <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f9c6:	201a      	movs	r0, #26
    f9c8:	e7f9      	b.n	f9be <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f9ca:	1c81      	adds	r1, r0, #2
    f9cc:	700e      	strb	r6, [r1, #0]
    f9ce:	2101      	movs	r1, #1
    f9d0:	40a1      	lsls	r1, r4
    f9d2:	7001      	strb	r1, [r0, #0]
    f9d4:	f880 8001 	strb.w	r8, [r0, #1]
    f9d8:	2000      	movs	r0, #0
    f9da:	e7f0      	b.n	f9be <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>

0000f9dc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9e0:	460d      	mov	r5, r1
    f9e2:	4606      	mov	r6, r0
    f9e4:	f7ff ffb2 	bl	f94c <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f9e8:	4607      	mov	r7, r0
    f9ea:	f7ff ffb2 	bl	f952 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f9ee:	2400      	movs	r4, #0
    f9f0:	4285      	cmp	r5, r0
    f9f2:	d100      	bne.n	f9f6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f9f4:	2401      	movs	r4, #1
    f9f6:	42bd      	cmp	r5, r7
    f9f8:	d101      	bne.n	f9fe <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f9fa:	f044 0402 	orr.w	r4, r4, #2
    f9fe:	f000 f826 	bl	fa4e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x72>
    fa02:	2200      	movs	r2, #0
    fa04:	4601      	mov	r1, r0
    fa06:	2301      	movs	r3, #1
    fa08:	fa03 f002 	lsl.w	r0, r3, r2
    fa0c:	4208      	tst	r0, r1
    fa0e:	d005      	beq.n	fa1c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    fa10:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    fa14:	f880 5079 	strb.w	r5, [r0, #121]	; 0x79
    fa18:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
    fa1c:	1c52      	adds	r2, r2, #1
    fa1e:	b2d2      	uxtb	r2, r2
    fa20:	2a02      	cmp	r2, #2
    fa22:	d3f1      	bcc.n	fa08 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    fa24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa28:	b510      	push	{r4, lr}
    fa2a:	4614      	mov	r4, r2
    fa2c:	4602      	mov	r2, r0
    fa2e:	2000      	movs	r0, #0
    fa30:	4603      	mov	r3, r0
    fa32:	2c02      	cmp	r4, #2
    fa34:	d205      	bcs.n	fa42 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>
    fa36:	4610      	mov	r0, r2
    fa38:	f000 f810 	bl	fa5c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    fa3c:	2101      	movs	r1, #1
    fa3e:	40a1      	lsls	r1, r4
    fa40:	b2cb      	uxtb	r3, r1
    fa42:	4203      	tst	r3, r0
    fa44:	d001      	beq.n	fa4a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6e>
    fa46:	2001      	movs	r0, #1
    fa48:	bd10      	pop	{r4, pc}
    fa4a:	2000      	movs	r0, #0
    fa4c:	bd10      	pop	{r4, pc}
    fa4e:	b510      	push	{r4, lr}
    fa50:	f7f7 ffb4 	bl	79bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fa54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa58:	f000 b800 	b.w	fa5c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    fa5c:	0a00      	lsrs	r0, r0, #8
    fa5e:	2201      	movs	r2, #1
    fa60:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    fa64:	07c0      	lsls	r0, r0, #31
    fa66:	d000      	beq.n	fa6a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x8e>
    fa68:	2203      	movs	r2, #3
    fa6a:	4610      	mov	r0, r2
    fa6c:	4770      	bx	lr
    fa6e:	b508      	push	{r3, lr}
    fa70:	2301      	movs	r3, #1
    fa72:	f640 1288 	movw	r2, #2440	; 0x988
    fa76:	4669      	mov	r1, sp
    fa78:	f7fd f8f8 	bl	cc6c <mpsl_fem_tx_power_split>
    fa7c:	bd08      	pop	{r3, pc}
    fa7e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fa82:	f001 0107 	and.w	r1, r1, #7
    fa86:	7800      	ldrb	r0, [r0, #0]
    fa88:	40c8      	lsrs	r0, r1
    fa8a:	f000 0001 	and.w	r0, r0, #1
    fa8e:	4770      	bx	lr
    fa90:	b118      	cbz	r0, fa9a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    fa92:	2802      	cmp	r0, #2
    fa94:	d001      	beq.n	fa9a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    fa96:	2001      	movs	r0, #1
    fa98:	4770      	bx	lr
    fa9a:	2000      	movs	r0, #0
    fa9c:	4770      	bx	lr

0000fa9e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    fa9e:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    faa0:	7881      	ldrb	r1, [r0, #2]
    faa2:	2500      	movs	r5, #0
    faa4:	4604      	mov	r4, r0
    faa6:	291a      	cmp	r1, #26
    faa8:	d024      	beq.n	faf4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    faaa:	dc0e      	bgt.n	faca <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    faac:	2916      	cmp	r1, #22
    faae:	d22b      	bcs.n	fb08 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fab0:	e8df f001 	tbb	[pc, r1]
    fab4:	2a2a2a2a 	.word	0x2a2a2a2a
    fab8:	2a2a202a 	.word	0x2a2a202a
    fabc:	2a2a2a2a 	.word	0x2a2a2a2a
    fac0:	2a2a2a2a 	.word	0x2a2a2a2a
    fac4:	202a2a2a 	.word	0x202a2a2a
    fac8:	2020      	.short	0x2020
    faca:	292a      	cmp	r1, #42	; 0x2a
    facc:	d01c      	beq.n	fb08 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    face:	dc0b      	bgt.n	fae8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    fad0:	f1a1 011e 	sub.w	r1, r1, #30
    fad4:	290c      	cmp	r1, #12
    fad6:	d217      	bcs.n	fb08 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fad8:	e8df f001 	tbb	[pc, r1]
    fadc:	16161616 	.word	0x16161616
    fae0:	16161616 	.word	0x16161616
    fae4:	0c161616 	.word	0x0c161616
    fae8:	393a      	subs	r1, #58	; 0x3a
    faea:	2902      	cmp	r1, #2
    faec:	d20c      	bcs.n	fb08 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    faee:	e8df f001 	tbb	[pc, r1]
    faf2:	010b      	.short	0x010b
    faf4:	8820      	ldrh	r0, [r4, #0]
    faf6:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    fafa:	d205      	bcs.n	fb08 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fafc:	4669      	mov	r1, sp
    fafe:	f7fe faa1 	bl	e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb02:	b118      	cbz	r0, fb0c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    fb04:	2002      	movs	r0, #2
    fb06:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fb08:	2012      	movs	r0, #18
    fb0a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fb0c:	9901      	ldr	r1, [sp, #4]
    fb0e:	f891 0138 	ldrb.w	r0, [r1, #312]	; 0x138
    fb12:	f88d 0008 	strb.w	r0, [sp, #8]
    fb16:	9802      	ldr	r0, [sp, #8]
    fb18:	9002      	str	r0, [sp, #8]
    fb1a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fb1e:	f501 719c 	add.w	r1, r1, #312	; 0x138
    fb22:	b108      	cbz	r0, fb28 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
    fb24:	200c      	movs	r0, #12
    fb26:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fb28:	78a0      	ldrb	r0, [r4, #2]
    fb2a:	7048      	strb	r0, [r1, #1]
    fb2c:	20ff      	movs	r0, #255	; 0xff
    fb2e:	7008      	strb	r0, [r1, #0]
    fb30:	4628      	mov	r0, r5
    fb32:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fb34 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    fb34:	b510      	push	{r4, lr}
    fb36:	4604      	mov	r4, r0
    fb38:	7800      	ldrb	r0, [r0, #0]
    fb3a:	b108      	cbz	r0, fb40 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0xc>
    fb3c:	2801      	cmp	r0, #1
    fb3e:	d116      	bne.n	fb6e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3a>
    fb40:	f000 fe13 	bl	1076a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x424>
    fb44:	b120      	cbz	r0, fb50 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x1c>
    fb46:	f7f2 fbcf 	bl	22e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fb4a:	b108      	cbz	r0, fb50 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x1c>
    fb4c:	200c      	movs	r0, #12
    fb4e:	bd10      	pop	{r4, pc}
    fb50:	7820      	ldrb	r0, [r4, #0]
    fb52:	f7ff ff9d 	bl	fa90 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fb56:	2801      	cmp	r0, #1
    fb58:	d10b      	bne.n	fb72 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3e>
    fb5a:	7820      	ldrb	r0, [r4, #0]
    fb5c:	f7ff ff98 	bl	fa90 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fb60:	2801      	cmp	r0, #1
    fb62:	d104      	bne.n	fb6e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3a>
    fb64:	79a0      	ldrb	r0, [r4, #6]
    fb66:	2103      	movs	r1, #3
    fb68:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    fb6c:	d001      	beq.n	fb72 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3e>
    fb6e:	2012      	movs	r0, #18
    fb70:	bd10      	pop	{r4, pc}
    fb72:	7820      	ldrb	r0, [r4, #0]
    fb74:	f7ff ff8c 	bl	fa90 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fb78:	1de2      	adds	r2, r4, #7
    fb7a:	f104 0317 	add.w	r3, r4, #23
    fb7e:	1c61      	adds	r1, r4, #1
    fb80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb84:	f7f2 bbd0 	b.w	2328 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000fb88 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fb88:	b510      	push	{r4, lr}
    fb8a:	4604      	mov	r4, r0
    fb8c:	f000 fe1e 	bl	107cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    fb90:	b108      	cbz	r0, fb96 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    fb92:	200c      	movs	r0, #12
    fb94:	bd10      	pop	{r4, pc}
    fb96:	7820      	ldrb	r0, [r4, #0]
    fb98:	b118      	cbz	r0, fba2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fb9a:	2801      	cmp	r0, #1
    fb9c:	d001      	beq.n	fba2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fb9e:	2012      	movs	r0, #18
    fba0:	bd10      	pop	{r4, pc}
    fba2:	f7ff ff75 	bl	fa90 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fba6:	1c61      	adds	r1, r4, #1
    fba8:	f7f3 fbde 	bl	3368 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    fbac:	b108      	cbz	r0, fbb2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fbae:	2000      	movs	r0, #0
    fbb0:	bd10      	pop	{r4, pc}
    fbb2:	2007      	movs	r0, #7
    fbb4:	bd10      	pop	{r4, pc}

0000fbb6 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    fbb6:	b510      	push	{r4, lr}
    fbb8:	f000 fdd7 	bl	1076a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x424>
    fbbc:	b120      	cbz	r0, fbc8 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fbbe:	f7f2 fb93 	bl	22e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fbc2:	b108      	cbz	r0, fbc8 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fbc4:	200c      	movs	r0, #12
    fbc6:	bd10      	pop	{r4, pc}
    fbc8:	f7f2 fc02 	bl	23d0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    fbcc:	2000      	movs	r0, #0
    fbce:	bd10      	pop	{r4, pc}

0000fbd0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fbd0:	b510      	push	{r4, lr}
    fbd2:	f000 fdfb 	bl	107cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    fbd6:	b108      	cbz	r0, fbdc <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fbd8:	200c      	movs	r0, #12
    fbda:	bd10      	pop	{r4, pc}
    fbdc:	f7f3 fc22 	bl	3424 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    fbe0:	2000      	movs	r0, #0
    fbe2:	f7f2 fc43 	bl	246c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    fbe6:	2000      	movs	r0, #0
    fbe8:	bd10      	pop	{r4, pc}

0000fbea <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    fbea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fbee:	4605      	mov	r5, r0
    fbf0:	f000 fb86 	bl	10300 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    fbf4:	2800      	cmp	r0, #0
    fbf6:	d112      	bne.n	fc1e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fbf8:	8828      	ldrh	r0, [r5, #0]
    fbfa:	2100      	movs	r1, #0
    fbfc:	f7f1 f9f0 	bl	fe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fc00:	0004      	movs	r4, r0
    fc02:	d00e      	beq.n	fc22 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    fc04:	f000 fd9b 	bl	1073e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f8>
    fc08:	b158      	cbz	r0, fc22 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    fc0a:	f894 0264 	ldrb.w	r0, [r4, #612]	; 0x264
    fc0e:	f88d 0000 	strb.w	r0, [sp]
    fc12:	9800      	ldr	r0, [sp, #0]
    fc14:	9000      	str	r0, [sp, #0]
    fc16:	f89d 0000 	ldrb.w	r0, [sp]
    fc1a:	b120      	cbz	r0, fc26 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    fc1c:	203a      	movs	r0, #58	; 0x3a
    fc1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fc22:	2002      	movs	r0, #2
    fc24:	e7fb      	b.n	fc1e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fc26:	f04f 0800 	mov.w	r8, #0
    fc2a:	88a8      	ldrh	r0, [r5, #4]
    fc2c:	f7fe fa16 	bl	e05c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    fc30:	4607      	mov	r7, r0
    fc32:	4601      	mov	r1, r0
    fc34:	2005      	movs	r0, #5
    fc36:	f7fe fb84 	bl	e342 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    fc3a:	4606      	mov	r6, r0
    fc3c:	4639      	mov	r1, r7
    fc3e:	2008      	movs	r0, #8
    fc40:	f7fe fb7f 	bl	e342 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    fc44:	42b0      	cmp	r0, r6
    fc46:	d301      	bcc.n	fc4c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    fc48:	42be      	cmp	r6, r7
    fc4a:	d301      	bcc.n	fc50 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    fc4c:	2012      	movs	r0, #18
    fc4e:	e7e6      	b.n	fc1e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fc50:	f8a4 6268 	strh.w	r6, [r4, #616]	; 0x268
    fc54:	e9c4 879b 	strd	r8, r7, [r4, #620]	; 0x26c
    fc58:	88e8      	ldrh	r0, [r5, #6]
    fc5a:	f8a4 0274 	strh.w	r0, [r4, #628]	; 0x274
    fc5e:	8928      	ldrh	r0, [r5, #8]
    fc60:	f8a4 0276 	strh.w	r0, [r4, #630]	; 0x276
    fc64:	f504 7419 	add.w	r4, r4, #612	; 0x264
    fc68:	20ff      	movs	r0, #255	; 0xff
    fc6a:	7020      	strb	r0, [r4, #0]
    fc6c:	2000      	movs	r0, #0
    fc6e:	e7d6      	b.n	fc1e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

0000fc70 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    fc70:	b508      	push	{r3, lr}
    fc72:	f7f4 ff9b 	bl	4bac <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    fc76:	2805      	cmp	r0, #5
    fc78:	d001      	beq.n	fc7e <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xe>
    fc7a:	200c      	movs	r0, #12
    fc7c:	bd08      	pop	{r3, pc}
    fc7e:	4668      	mov	r0, sp
    fc80:	f7f4 ff1a 	bl	4ab8 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
    fc84:	2800      	cmp	r0, #0
    fc86:	d1f9      	bne.n	fc7c <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xc>
    fc88:	f7f3 fce8 	bl	365c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>
    fc8c:	2000      	movs	r0, #0
    fc8e:	bd08      	pop	{r3, pc}

0000fc90 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fc90:	b510      	push	{r4, lr}
    fc92:	460b      	mov	r3, r1
    fc94:	2201      	movs	r2, #1
    fc96:	f100 0110 	add.w	r1, r0, #16
    fc9a:	f7fe f997 	bl	dfcc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fc9e:	2000      	movs	r0, #0
    fca0:	bd10      	pop	{r4, pc}

0000fca2 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fca2:	b510      	push	{r4, lr}
    fca4:	2108      	movs	r1, #8
    fca6:	f7f0 ff5b 	bl	b60 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fcaa:	2000      	movs	r0, #0
    fcac:	bd10      	pop	{r4, pc}

0000fcae <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fcae:	21fb      	movs	r1, #251	; 0xfb
    fcb0:	8001      	strh	r1, [r0, #0]
    fcb2:	f640 0248 	movw	r2, #2120	; 0x848
    fcb6:	8042      	strh	r2, [r0, #2]
    fcb8:	8081      	strh	r1, [r0, #4]
    fcba:	80c2      	strh	r2, [r0, #6]
    fcbc:	2000      	movs	r0, #0
    fcbe:	4770      	bx	lr

0000fcc0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fcc0:	b51c      	push	{r2, r3, r4, lr}
    fcc2:	8800      	ldrh	r0, [r0, #0]
    fcc4:	4669      	mov	r1, sp
    fcc6:	f7fe f9bd 	bl	e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fcca:	2800      	cmp	r0, #0
    fccc:	d10c      	bne.n	fce8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    fcce:	9c01      	ldr	r4, [sp, #4]
    fcd0:	f89d 0000 	ldrb.w	r0, [sp]
    fcd4:	f504 749c 	add.w	r4, r4, #312	; 0x138
    fcd8:	b918      	cbnz	r0, fce2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x22>
    fcda:	9801      	ldr	r0, [sp, #4]
    fcdc:	f000 fd2f 	bl	1073e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f8>
    fce0:	b118      	cbz	r0, fcea <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fce2:	7ce0      	ldrb	r0, [r4, #19]
    fce4:	b118      	cbz	r0, fcee <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    fce6:	203a      	movs	r0, #58	; 0x3a
    fce8:	bd1c      	pop	{r2, r3, r4, pc}
    fcea:	2002      	movs	r0, #2
    fcec:	bd1c      	pop	{r2, r3, r4, pc}
    fcee:	2001      	movs	r0, #1
    fcf0:	74e0      	strb	r0, [r4, #19]
    fcf2:	2000      	movs	r0, #0
    fcf4:	bd1c      	pop	{r2, r3, r4, pc}

0000fcf6 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    fcf6:	2108      	movs	r1, #8
    fcf8:	7001      	strb	r1, [r0, #0]
    fcfa:	2000      	movs	r0, #0
    fcfc:	4770      	bx	lr

0000fcfe <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fcfe:	b510      	push	{r4, lr}
    fd00:	4604      	mov	r4, r0
    fd02:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fd06:	f000 fd42 	bl	1078e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x448>
    fd0a:	f7f2 fd0b 	bl	2724 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fd0e:	7020      	strb	r0, [r4, #0]
    fd10:	f000 fd12 	bl	10738 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f2>
    fd14:	f7f2 fd06 	bl	2724 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fd18:	7060      	strb	r0, [r4, #1]
    fd1a:	2000      	movs	r0, #0
    fd1c:	bd10      	pop	{r4, pc}

0000fd1e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fd1e:	b510      	push	{r4, lr}
    fd20:	4604      	mov	r4, r0
    fd22:	f7f3 fb85 	bl	3430 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    fd26:	7020      	strb	r0, [r4, #0]
    fd28:	2000      	movs	r0, #0
    fd2a:	bd10      	pop	{r4, pc}

0000fd2c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    fd2c:	b510      	push	{r4, lr}
    fd2e:	4604      	mov	r4, r0
    fd30:	7800      	ldrb	r0, [r0, #0]
    fd32:	b108      	cbz	r0, fd38 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    fd34:	2801      	cmp	r0, #1
    fd36:	d110      	bne.n	fd5a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fd38:	f000 fd17 	bl	1076a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x424>
    fd3c:	b120      	cbz	r0, fd48 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fd3e:	f7f2 fad3 	bl	22e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fd42:	b108      	cbz	r0, fd48 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fd44:	200c      	movs	r0, #12
    fd46:	bd10      	pop	{r4, pc}
    fd48:	7820      	ldrb	r0, [r4, #0]
    fd4a:	f7ff fea1 	bl	fa90 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fd4e:	1c61      	adds	r1, r4, #1
    fd50:	f7fe f92d 	bl	dfae <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    fd54:	b108      	cbz	r0, fd5a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fd56:	2000      	movs	r0, #0
    fd58:	bd10      	pop	{r4, pc}
    fd5a:	2012      	movs	r0, #18
    fd5c:	bd10      	pop	{r4, pc}

0000fd5e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fd5e:	b510      	push	{r4, lr}
    fd60:	4604      	mov	r4, r0
    fd62:	f000 fd33 	bl	107cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    fd66:	b108      	cbz	r0, fd6c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fd68:	200c      	movs	r0, #12
    fd6a:	bd10      	pop	{r4, pc}
    fd6c:	7820      	ldrb	r0, [r4, #0]
    fd6e:	b108      	cbz	r0, fd74 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fd70:	2801      	cmp	r0, #1
    fd72:	d107      	bne.n	fd84 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fd74:	f7ff fe8c 	bl	fa90 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fd78:	1c61      	adds	r1, r4, #1
    fd7a:	f7f3 fb33 	bl	33e4 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    fd7e:	b108      	cbz	r0, fd84 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fd80:	2000      	movs	r0, #0
    fd82:	bd10      	pop	{r4, pc}
    fd84:	2012      	movs	r0, #18
    fd86:	bd10      	pop	{r4, pc}

0000fd88 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    fd88:	b510      	push	{r4, lr}
    fd8a:	4604      	mov	r4, r0
    fd8c:	f000 fced 	bl	1076a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x424>
    fd90:	b108      	cbz	r0, fd96 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    fd92:	200c      	movs	r0, #12
    fd94:	bd10      	pop	{r4, pc}
    fd96:	7820      	ldrb	r0, [r4, #0]
    fd98:	b100      	cbz	r0, fd9c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0x14>
    fd9a:	2001      	movs	r0, #1
    fd9c:	f7f2 fa9e 	bl	22dc <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    fda0:	2000      	movs	r0, #0
    fda2:	bd10      	pop	{r4, pc}

0000fda4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fda4:	b50e      	push	{r1, r2, r3, lr}
    fda6:	8882      	ldrh	r2, [r0, #4]
    fda8:	f244 2390 	movw	r3, #17040	; 0x4290
    fdac:	429a      	cmp	r2, r3
    fdae:	d901      	bls.n	fdb4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    fdb0:	2012      	movs	r0, #18
    fdb2:	bd0e      	pop	{r1, r2, r3, pc}
    fdb4:	f640 0348 	movw	r3, #2120	; 0x848
    fdb8:	429a      	cmp	r2, r3
    fdba:	d300      	bcc.n	fdbe <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fdbc:	461a      	mov	r2, r3
    fdbe:	8803      	ldrh	r3, [r0, #0]
    fdc0:	f8ad 3000 	strh.w	r3, [sp]
    fdc4:	8843      	ldrh	r3, [r0, #2]
    fdc6:	f8ad 3002 	strh.w	r3, [sp, #2]
    fdca:	f8ad 2004 	strh.w	r2, [sp, #4]
    fdce:	8843      	ldrh	r3, [r0, #2]
    fdd0:	f8ad 3006 	strh.w	r3, [sp, #6]
    fdd4:	f8ad 2008 	strh.w	r2, [sp, #8]
    fdd8:	8800      	ldrh	r0, [r0, #0]
    fdda:	8008      	strh	r0, [r1, #0]
    fddc:	4668      	mov	r0, sp
    fdde:	f7f7 fccd 	bl	777c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x284>
    fde2:	bd0e      	pop	{r1, r2, r3, pc}

0000fde4 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fde4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fde6:	4604      	mov	r4, r0
    fde8:	f10d 0007 	add.w	r0, sp, #7
    fdec:	9000      	str	r0, [sp, #0]
    fdee:	7922      	ldrb	r2, [r4, #4]
    fdf0:	78e1      	ldrb	r1, [r4, #3]
    fdf2:	78a0      	ldrb	r0, [r4, #2]
    fdf4:	f10d 0306 	add.w	r3, sp, #6
    fdf8:	f000 fcd1 	bl	1079e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x458>
    fdfc:	2800      	cmp	r0, #0
    fdfe:	d109      	bne.n	fe14 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    fe00:	8820      	ldrh	r0, [r4, #0]
    fe02:	f8ad 0004 	strh.w	r0, [sp, #4]
    fe06:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fe0a:	f8ad 0008 	strh.w	r0, [sp, #8]
    fe0e:	a801      	add	r0, sp, #4
    fe10:	f000 f994 	bl	1013c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fe14:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fe16 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    fe16:	b510      	push	{r4, lr}
    fe18:	4604      	mov	r4, r0
    fe1a:	f000 fca6 	bl	1076a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x424>
    fe1e:	b120      	cbz	r0, fe2a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fe20:	f7f2 fa62 	bl	22e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fe24:	b108      	cbz	r0, fe2a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fe26:	200c      	movs	r0, #12
    fe28:	bd10      	pop	{r4, pc}
    fe2a:	7820      	ldrb	r0, [r4, #0]
    fe2c:	f7ff fe30 	bl	fa90 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fe30:	79e2      	ldrb	r2, [r4, #7]
    fe32:	1c61      	adds	r1, r4, #1
    fe34:	f7f2 f9f8 	bl	2228 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    fe38:	b108      	cbz	r0, fe3e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    fe3a:	2000      	movs	r0, #0
    fe3c:	bd10      	pop	{r4, pc}
    fe3e:	2002      	movs	r0, #2
    fe40:	bd10      	pop	{r4, pc}

0000fe42 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fe42:	b510      	push	{r4, lr}
    fe44:	4604      	mov	r4, r0
    fe46:	2001      	movs	r0, #1
    fe48:	f000 faae 	bl	103a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x62>
    fe4c:	b128      	cbz	r0, fe5a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fe4e:	4621      	mov	r1, r4
    fe50:	2001      	movs	r0, #1
    fe52:	f7f1 fc73 	bl	173c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fe56:	2000      	movs	r0, #0
    fe58:	bd10      	pop	{r4, pc}
    fe5a:	200c      	movs	r0, #12
    fe5c:	bd10      	pop	{r4, pc}

0000fe5e <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    fe5e:	b510      	push	{r4, lr}
    fe60:	8800      	ldrh	r0, [r0, #0]
    fe62:	f7f2 facb 	bl	23fc <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    fe66:	b108      	cbz	r0, fe6c <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    fe68:	2000      	movs	r0, #0
    fe6a:	bd10      	pop	{r4, pc}
    fe6c:	2030      	movs	r0, #48	; 0x30
    fe6e:	bd10      	pop	{r4, pc}

0000fe70 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    fe70:	b51c      	push	{r2, r3, r4, lr}
    fe72:	7801      	ldrb	r1, [r0, #0]
    fe74:	f88d 1000 	strb.w	r1, [sp]
    fe78:	7840      	ldrb	r0, [r0, #1]
    fe7a:	f88d 0001 	strb.w	r0, [sp, #1]
    fe7e:	2000      	movs	r0, #0
    fe80:	f8ad 0002 	strh.w	r0, [sp, #2]
    fe84:	f8ad 0004 	strh.w	r0, [sp, #4]
    fe88:	4601      	mov	r1, r0
    fe8a:	4668      	mov	r0, sp
    fe8c:	f000 fadc 	bl	10448 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x102>
    fe90:	2800      	cmp	r0, #0
    fe92:	d102      	bne.n	fe9a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    fe94:	4668      	mov	r0, sp
    fe96:	f000 fab6 	bl	10406 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc0>
    fe9a:	bd1c      	pop	{r2, r3, r4, pc}

0000fe9c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    fe9c:	b500      	push	{lr}
    fe9e:	b087      	sub	sp, #28
    fea0:	7941      	ldrb	r1, [r0, #5]
    fea2:	f88d 1000 	strb.w	r1, [sp]
    fea6:	7981      	ldrb	r1, [r0, #6]
    fea8:	f88d 1001 	strb.w	r1, [sp, #1]
    feac:	2101      	movs	r1, #1
    feae:	f88d 1002 	strb.w	r1, [sp, #2]
    feb2:	7801      	ldrb	r1, [r0, #0]
    feb4:	f88d 1003 	strb.w	r1, [sp, #3]
    feb8:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    febc:	f240 2271 	movw	r2, #625	; 0x271
    fec0:	4351      	muls	r1, r2
    fec2:	9102      	str	r1, [sp, #8]
    fec4:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    fec8:	4350      	muls	r0, r2
    feca:	9004      	str	r0, [sp, #16]
    fecc:	2007      	movs	r0, #7
    fece:	f88d 0018 	strb.w	r0, [sp, #24]
    fed2:	2000      	movs	r0, #0
    fed4:	f88d 0019 	strb.w	r0, [sp, #25]
    fed8:	9804      	ldr	r0, [sp, #16]
    feda:	f7f7 fb55 	bl	7588 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x90>
    fede:	b140      	cbz	r0, fef2 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    fee0:	9802      	ldr	r0, [sp, #8]
    fee2:	f7f7 fb45 	bl	7570 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x78>
    fee6:	b120      	cbz	r0, fef2 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    fee8:	4668      	mov	r0, sp
    feea:	f7f7 fa1b 	bl	7324 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    feee:	b007      	add	sp, #28
    fef0:	bd00      	pop	{pc}
    fef2:	2030      	movs	r0, #48	; 0x30
    fef4:	e7fb      	b.n	feee <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000fef6 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    fef6:	b570      	push	{r4, r5, r6, lr}
    fef8:	4605      	mov	r5, r0
    fefa:	8800      	ldrh	r0, [r0, #0]
    fefc:	2100      	movs	r1, #0
    fefe:	f7f1 f86f 	bl	fe0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ff02:	0004      	movs	r4, r0
    ff04:	d007      	beq.n	ff16 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    ff06:	f000 fc1a 	bl	1073e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f8>
    ff0a:	b120      	cbz	r0, ff16 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    ff0c:	f894 0278 	ldrb.w	r0, [r4, #632]	; 0x278
    ff10:	b118      	cbz	r0, ff1a <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    ff12:	203a      	movs	r0, #58	; 0x3a
    ff14:	bd70      	pop	{r4, r5, r6, pc}
    ff16:	2002      	movs	r0, #2
    ff18:	bd70      	pop	{r4, r5, r6, pc}
    ff1a:	2100      	movs	r1, #0
    ff1c:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    ff20:	f7ff fdad 	bl	fa7e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    ff24:	2801      	cmp	r0, #1
    ff26:	d001      	beq.n	ff2c <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    ff28:	201a      	movs	r0, #26
    ff2a:	bd70      	pop	{r4, r5, r6, pc}
    ff2c:	f8d5 0002 	ldr.w	r0, [r5, #2]
    ff30:	f8c4 0279 	str.w	r0, [r4, #633]	; 0x279
    ff34:	f8d5 0006 	ldr.w	r0, [r5, #6]
    ff38:	f8c4 027d 	str.w	r0, [r4, #637]	; 0x27d
    ff3c:	8968      	ldrh	r0, [r5, #10]
    ff3e:	f8a4 0281 	strh.w	r0, [r4, #641]	; 0x281
    ff42:	2210      	movs	r2, #16
    ff44:	f105 010c 	add.w	r1, r5, #12
    ff48:	f204 2083 	addw	r0, r4, #643	; 0x283
    ff4c:	f001 f857 	bl	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ff50:	2001      	movs	r0, #1
    ff52:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
    ff56:	2000      	movs	r0, #0
    ff58:	bd70      	pop	{r4, r5, r6, pc}

0000ff5a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    ff5a:	b51c      	push	{r2, r3, r4, lr}
    ff5c:	8801      	ldrh	r1, [r0, #0]
    ff5e:	f8ad 1000 	strh.w	r1, [sp]
    ff62:	8841      	ldrh	r1, [r0, #2]
    ff64:	f8ad 1002 	strh.w	r1, [sp, #2]
    ff68:	8801      	ldrh	r1, [r0, #0]
    ff6a:	f8ad 1004 	strh.w	r1, [sp, #4]
    ff6e:	8840      	ldrh	r0, [r0, #2]
    ff70:	f8ad 0006 	strh.w	r0, [sp, #6]
    ff74:	4668      	mov	r0, sp
    ff76:	f7f7 fc85 	bl	7884 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x38c>
    ff7a:	bd1c      	pop	{r2, r3, r4, pc}

0000ff7c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    ff7c:	b510      	push	{r4, lr}
    ff7e:	f7f1 fc01 	bl	1784 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    ff82:	2000      	movs	r0, #0
    ff84:	bd10      	pop	{r4, pc}

0000ff86 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    ff86:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    ff8a:	4604      	mov	r4, r0
    ff8c:	7a40      	ldrb	r0, [r0, #9]
    ff8e:	0781      	lsls	r1, r0, #30
    ff90:	d502      	bpl.n	ff98 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x12>
    ff92:	f040 0001 	orr.w	r0, r0, #1
    ff96:	7260      	strb	r0, [r4, #9]
    ff98:	4620      	mov	r0, r4
    ff9a:	f000 fa75 	bl	10488 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x142>
    ff9e:	2800      	cmp	r0, #0
    ffa0:	d103      	bne.n	ffaa <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    ffa2:	f000 fbe9 	bl	10778 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
    ffa6:	b118      	cbz	r0, ffb0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a>
    ffa8:	200c      	movs	r0, #12
    ffaa:	b004      	add	sp, #16
    ffac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ffb0:	f7f3 fae2 	bl	3578 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>
    ffb4:	b910      	cbnz	r0, ffbc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x36>
    ffb6:	f7f3 fc53 	bl	3860 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    ffba:	b108      	cbz	r0, ffc0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3a>
    ffbc:	203a      	movs	r0, #58	; 0x3a
    ffbe:	e7f4      	b.n	ffaa <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    ffc0:	2103      	movs	r1, #3
    ffc2:	f104 0018 	add.w	r0, r4, #24
    ffc6:	f7f7 faeb 	bl	75a0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xa8>
    ffca:	2100      	movs	r1, #0
    ffcc:	4668      	mov	r0, sp
    ffce:	f7f1 f86f 	bl	10b0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    ffd2:	0006      	movs	r6, r0
    ffd4:	d008      	beq.n	ffe8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x62>
    ffd6:	2301      	movs	r3, #1
    ffd8:	4622      	mov	r2, r4
    ffda:	f8bd 1000 	ldrh.w	r1, [sp]
    ffde:	f7f7 faf3 	bl	75c8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xd0>
    ffe2:	0005      	movs	r5, r0
    ffe4:	d002      	beq.n	ffec <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x66>
    ffe6:	e071      	b.n	100cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x146>
    ffe8:	200d      	movs	r0, #13
    ffea:	e7de      	b.n	ffaa <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    ffec:	4630      	mov	r0, r6
    ffee:	f7f5 fa83 	bl	54f8 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>
    fff2:	0005      	movs	r5, r0
    fff4:	d16a      	bne.n	100cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x146>
    fff6:	7860      	ldrb	r0, [r4, #1]
    fff8:	f7f3 fb94 	bl	3724 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    fffc:	78a1      	ldrb	r1, [r4, #2]
    fffe:	7820      	ldrb	r0, [r4, #0]
   10000:	1ce2      	adds	r2, r4, #3
   10002:	f7f3 fb07 	bl	3614 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
   10006:	b148      	cbz	r0, 1001c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x96>
   10008:	f7f3 fa62 	bl	34d0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
   1000c:	78a1      	ldrb	r1, [r4, #2]
   1000e:	7820      	ldrb	r0, [r4, #0]
   10010:	1ce2      	adds	r2, r4, #3
   10012:	f7f3 fb3d 	bl	3690 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
   10016:	0005      	movs	r5, r0
   10018:	d002      	beq.n	10020 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x9a>
   1001a:	e057      	b.n	100cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x146>
   1001c:	2512      	movs	r5, #18
   1001e:	e055      	b.n	100cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x146>
   10020:	4631      	mov	r1, r6
   10022:	2003      	movs	r0, #3
   10024:	f7f3 fa9c 	bl	3560 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
   10028:	4605      	mov	r5, r0
   1002a:	78a0      	ldrb	r0, [r4, #2]
   1002c:	f7ff fd30 	bl	fa90 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
   10030:	1ce1      	adds	r1, r4, #3
   10032:	f7f3 fb4f 	bl	36d4 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>
   10036:	bb1d      	cbnz	r5, 10080 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfa>
   10038:	7820      	ldrb	r0, [r4, #0]
   1003a:	f04f 0800 	mov.w	r8, #0
   1003e:	2701      	movs	r7, #1
   10040:	bb20      	cbnz	r0, 1008c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x106>
   10042:	f894 a002 	ldrb.w	sl, [r4, #2]
   10046:	f104 0903 	add.w	r9, r4, #3
   1004a:	f8cd 8004 	str.w	r8, [sp, #4]
   1004e:	f8cd 8008 	str.w	r8, [sp, #8]
   10052:	e016      	b.n	10082 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfc>
   10054:	9d01      	ldr	r5, [sp, #4]
   10056:	42ae      	cmp	r6, r5
   10058:	d013      	beq.n	10082 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfc>
   1005a:	4650      	mov	r0, sl
   1005c:	f7ff fd18 	bl	fa90 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
   10060:	78aa      	ldrb	r2, [r5, #2]
   10062:	1ceb      	adds	r3, r5, #3
   10064:	4649      	mov	r1, r9
   10066:	f7fd fedc 	bl	de22 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
   1006a:	b150      	cbz	r0, 10082 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfc>
   1006c:	7a6a      	ldrb	r2, [r5, #9]
   1006e:	7a70      	ldrb	r0, [r6, #9]
   10070:	f105 030a 	add.w	r3, r5, #10
   10074:	f106 010a 	add.w	r1, r6, #10
   10078:	f7fd fed3 	bl	de22 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
   1007c:	b108      	cbz	r0, 10082 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfc>
   1007e:	250b      	movs	r5, #11
   10080:	e024      	b.n	100cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x146>
   10082:	a801      	add	r0, sp, #4
   10084:	f7f0 fff2 	bl	106c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10088:	2800      	cmp	r0, #0
   1008a:	d0e3      	beq.n	10054 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xce>
   1008c:	4638      	mov	r0, r7
   1008e:	f7f3 fa83 	bl	3598 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
   10092:	0005      	movs	r5, r0
   10094:	d11a      	bne.n	100cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x146>
   10096:	f88d 8004 	strb.w	r8, [sp, #4]
   1009a:	7a60      	ldrb	r0, [r4, #9]
   1009c:	07c0      	lsls	r0, r0, #31
   1009e:	d005      	beq.n	100ac <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x126>
   100a0:	68e0      	ldr	r0, [r4, #12]
   100a2:	9002      	str	r0, [sp, #8]
   100a4:	69a0      	ldr	r0, [r4, #24]
   100a6:	9003      	str	r0, [sp, #12]
   100a8:	f88d 7004 	strb.w	r7, [sp, #4]
   100ac:	a801      	add	r0, sp, #4
   100ae:	f7f4 fdcf 	bl	4c50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
   100b2:	4605      	mov	r5, r0
   100b4:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   100b8:	f7f3 fba8 	bl	380c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
   100bc:	b935      	cbnz	r5, 100cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x146>
   100be:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
   100c2:	4630      	mov	r0, r6
   100c4:	f7f4 fcb6 	bl	4a34 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
   100c8:	0005      	movs	r5, r0
   100ca:	d00c      	beq.n	100e6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x160>
   100cc:	8830      	ldrh	r0, [r6, #0]
   100ce:	f7fd fea4 	bl	de1a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   100d2:	8830      	ldrh	r0, [r6, #0]
   100d4:	2100      	movs	r1, #0
   100d6:	f7f1 f819 	bl	110c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   100da:	b120      	cbz	r0, 100e6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x160>
   100dc:	f241 216c 	movw	r1, #4716	; 0x126c
   100e0:	2039      	movs	r0, #57	; 0x39
   100e2:	f7f0 fc9b 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100e6:	4628      	mov	r0, r5
   100e8:	e75f      	b.n	ffaa <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>

000100ea <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   100ea:	b51c      	push	{r2, r3, r4, lr}
   100ec:	460c      	mov	r4, r1
   100ee:	4669      	mov	r1, sp
   100f0:	f7fd ffa8 	bl	e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   100f4:	2800      	cmp	r0, #0
   100f6:	d105      	bne.n	10104 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
   100f8:	2101      	movs	r1, #1
   100fa:	4622      	mov	r2, r4
   100fc:	9801      	ldr	r0, [sp, #4]
   100fe:	f000 fac5 	bl	1068c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x346>
   10102:	2000      	movs	r0, #0
   10104:	bd1c      	pop	{r2, r3, r4, pc}

00010106 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   10106:	b510      	push	{r4, lr}
   10108:	4604      	mov	r4, r0
   1010a:	f7f7 fbf1 	bl	78f0 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
   1010e:	b118      	cbz	r0, 10118 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
   10110:	2000      	movs	r0, #0
   10112:	f000 f949 	bl	103a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x62>
   10116:	b128      	cbz	r0, 10124 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
   10118:	4621      	mov	r1, r4
   1011a:	2000      	movs	r0, #0
   1011c:	f7f1 fb0e 	bl	173c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10120:	2000      	movs	r0, #0
   10122:	bd10      	pop	{r4, pc}
   10124:	200c      	movs	r0, #12
   10126:	bd10      	pop	{r4, pc}

00010128 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   10128:	b510      	push	{r4, lr}
   1012a:	7800      	ldrb	r0, [r0, #0]
   1012c:	b100      	cbz	r0, 10130 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   1012e:	2001      	movs	r0, #1
   10130:	f7f5 fa06 	bl	5540 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
   10134:	2000      	movs	r0, #0
   10136:	bd10      	pop	{r4, pc}

00010138 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   10138:	f7f7 bb20 	b.w	777c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x284>

0001013c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   1013c:	b510      	push	{r4, lr}
   1013e:	4604      	mov	r4, r0
   10140:	8880      	ldrh	r0, [r0, #4]
   10142:	b128      	cbz	r0, 10150 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10144:	2801      	cmp	r0, #1
   10146:	d003      	beq.n	10150 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10148:	2802      	cmp	r0, #2
   1014a:	d001      	beq.n	10150 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1014c:	2012      	movs	r0, #18
   1014e:	bd10      	pop	{r4, pc}
   10150:	78e0      	ldrb	r0, [r4, #3]
   10152:	f000 f935 	bl	103c0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x7a>
   10156:	b148      	cbz	r0, 1016c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10158:	78a0      	ldrb	r0, [r4, #2]
   1015a:	f000 f931 	bl	103c0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x7a>
   1015e:	b128      	cbz	r0, 1016c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10160:	4620      	mov	r0, r4
   10162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10166:	2101      	movs	r1, #1
   10168:	f000 b862 	b.w	10230 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   1016c:	2011      	movs	r0, #17
   1016e:	bd10      	pop	{r4, pc}

00010170 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   10170:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10172:	460c      	mov	r4, r1
   10174:	4605      	mov	r5, r0
   10176:	8800      	ldrh	r0, [r0, #0]
   10178:	4669      	mov	r1, sp
   1017a:	f7fd ff63 	bl	e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1017e:	2800      	cmp	r0, #0
   10180:	d106      	bne.n	10190 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10182:	9801      	ldr	r0, [sp, #4]
   10184:	8829      	ldrh	r1, [r5, #0]
   10186:	8021      	strh	r1, [r4, #0]
   10188:	f8b0 00d0 	ldrh.w	r0, [r0, #208]	; 0xd0
   1018c:	8060      	strh	r0, [r4, #2]
   1018e:	2000      	movs	r0, #0
   10190:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010192 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   10192:	b510      	push	{r4, lr}
   10194:	4604      	mov	r4, r0
   10196:	4601      	mov	r1, r0
   10198:	2000      	movs	r0, #0
   1019a:	f7f1 fab7 	bl	170c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   1019e:	b910      	cbnz	r0, 101a6 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   101a0:	2000      	movs	r0, #0
   101a2:	6020      	str	r0, [r4, #0]
   101a4:	80a0      	strh	r0, [r4, #4]
   101a6:	2000      	movs	r0, #0
   101a8:	bd10      	pop	{r4, pc}

000101aa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   101aa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   101ac:	460c      	mov	r4, r1
   101ae:	4605      	mov	r5, r0
   101b0:	8800      	ldrh	r0, [r0, #0]
   101b2:	4669      	mov	r1, sp
   101b4:	f7fd ff46 	bl	e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   101b8:	b108      	cbz	r0, 101be <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   101ba:	2002      	movs	r0, #2
   101bc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   101be:	78a8      	ldrb	r0, [r5, #2]
   101c0:	b158      	cbz	r0, 101da <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
   101c2:	f000 fab9 	bl	10738 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f2>
   101c6:	70a0      	strb	r0, [r4, #2]
   101c8:	8828      	ldrh	r0, [r5, #0]
   101ca:	8020      	strh	r0, [r4, #0]
   101cc:	f994 0002 	ldrsb.w	r0, [r4, #2]
   101d0:	f7f2 faa8 	bl	2724 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   101d4:	70a0      	strb	r0, [r4, #2]
   101d6:	2000      	movs	r0, #0
   101d8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   101da:	9801      	ldr	r0, [sp, #4]
   101dc:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   101e0:	e7f1      	b.n	101c6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

000101e2 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   101e2:	b510      	push	{r4, lr}
   101e4:	f7f7 fb8a 	bl	78fc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   101e8:	2000      	movs	r0, #0
   101ea:	bd10      	pop	{r4, pc}

000101ec <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   101ec:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   101f0:	4604      	mov	r4, r0
   101f2:	8840      	ldrh	r0, [r0, #2]
   101f4:	460d      	mov	r5, r1
   101f6:	b1b8      	cbz	r0, 10228 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   101f8:	8820      	ldrh	r0, [r4, #0]
   101fa:	4669      	mov	r1, sp
   101fc:	f7fd ff22 	bl	e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10200:	2800      	cmp	r0, #0
   10202:	d10f      	bne.n	10224 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   10204:	8820      	ldrh	r0, [r4, #0]
   10206:	8028      	strh	r0, [r5, #0]
   10208:	9e01      	ldr	r6, [sp, #4]
   1020a:	f106 0510 	add.w	r5, r6, #16
   1020e:	3688      	adds	r6, #136	; 0x88
   10210:	682f      	ldr	r7, [r5, #0]
   10212:	8862      	ldrh	r2, [r4, #2]
   10214:	4639      	mov	r1, r7
   10216:	4630      	mov	r0, r6
   10218:	f7fe f877 	bl	e30a <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   1021c:	6828      	ldr	r0, [r5, #0]
   1021e:	42b8      	cmp	r0, r7
   10220:	d1f6      	bne.n	10210 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   10222:	2000      	movs	r0, #0
   10224:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10228:	2012      	movs	r0, #18
   1022a:	e7fb      	b.n	10224 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0001022c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   1022c:	f000 b88b 	b.w	10346 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010230 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   10230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10234:	b085      	sub	sp, #20
   10236:	4688      	mov	r8, r1
   10238:	4606      	mov	r6, r0
   1023a:	8800      	ldrh	r0, [r0, #0]
   1023c:	a901      	add	r1, sp, #4
   1023e:	f7fd ff01 	bl	e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10242:	2800      	cmp	r0, #0
   10244:	d13b      	bne.n	102be <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10246:	9802      	ldr	r0, [sp, #8]
   10248:	4601      	mov	r1, r0
   1024a:	468a      	mov	sl, r1
   1024c:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
   10250:	f500 749c 	add.w	r4, r0, #312	; 0x138
   10254:	f88d 1000 	strb.w	r1, [sp]
   10258:	9900      	ldr	r1, [sp, #0]
   1025a:	9100      	str	r1, [sp, #0]
   1025c:	f89d 1000 	ldrb.w	r1, [sp]
   10260:	f04f 0900 	mov.w	r9, #0
   10264:	3088      	adds	r0, #136	; 0x88
   10266:	b121      	cbz	r1, 10272 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   10268:	f1b8 0f02 	cmp.w	r8, #2
   1026c:	d001      	beq.n	10272 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   1026e:	2701      	movs	r7, #1
   10270:	e000      	b.n	10274 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   10272:	2700      	movs	r7, #0
   10274:	7f81      	ldrb	r1, [r0, #30]
   10276:	2922      	cmp	r1, #34	; 0x22
   10278:	d100      	bne.n	1027c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
   1027a:	b13f      	cbz	r7, 1028c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   1027c:	2500      	movs	r5, #0
   1027e:	306e      	adds	r0, #110	; 0x6e
   10280:	2108      	movs	r1, #8
   10282:	4683      	mov	fp, r0
   10284:	f7ff fbfb 	bl	fa7e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   10288:	b110      	cbz	r0, 10290 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x60>
   1028a:	e007      	b.n	1029c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
   1028c:	2501      	movs	r5, #1
   1028e:	e7f6      	b.n	1027e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
   10290:	210b      	movs	r1, #11
   10292:	4658      	mov	r0, fp
   10294:	f7ff fbf3 	bl	fa7e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   10298:	b900      	cbnz	r0, 1029c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
   1029a:	b17d      	cbz	r5, 102bc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
   1029c:	a804      	add	r0, sp, #16
   1029e:	9000      	str	r0, [sp, #0]
   102a0:	f89d 0004 	ldrb.w	r0, [sp, #4]
   102a4:	ab03      	add	r3, sp, #12
   102a6:	4632      	mov	r2, r6
   102a8:	4651      	mov	r1, sl
   102aa:	f000 fa25 	bl	106f8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3b2>
   102ae:	0005      	movs	r5, r0
   102b0:	d105      	bne.n	102be <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   102b2:	340c      	adds	r4, #12
   102b4:	20ff      	movs	r0, #255	; 0xff
   102b6:	7060      	strb	r0, [r4, #1]
   102b8:	b937      	cbnz	r7, 102c8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
   102ba:	e003      	b.n	102c4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
   102bc:	201a      	movs	r0, #26
   102be:	b005      	add	sp, #20
   102c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   102c4:	7820      	ldrb	r0, [r4, #0]
   102c6:	b108      	cbz	r0, 102cc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
   102c8:	253a      	movs	r5, #58	; 0x3a
   102ca:	e012      	b.n	102f2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
   102cc:	f884 8000 	strb.w	r8, [r4]
   102d0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   102d4:	70a0      	strb	r0, [r4, #2]
   102d6:	f89d 1010 	ldrb.w	r1, [sp, #16]
   102da:	70e1      	strb	r1, [r4, #3]
   102dc:	f88d 0000 	strb.w	r0, [sp]
   102e0:	f88d 1001 	strb.w	r1, [sp, #1]
   102e4:	88b0      	ldrh	r0, [r6, #4]
   102e6:	f8ad 0002 	strh.w	r0, [sp, #2]
   102ea:	4669      	mov	r1, sp
   102ec:	4650      	mov	r0, sl
   102ee:	f7fd ff70 	bl	e1d2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   102f2:	f884 9001 	strb.w	r9, [r4, #1]
   102f6:	4628      	mov	r0, r5
   102f8:	e7e1      	b.n	102be <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>

000102fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   102fa:	2008      	movs	r0, #8
   102fc:	f7f7 bb52 	b.w	79a4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

00010300 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   10300:	b510      	push	{r4, lr}
   10302:	4604      	mov	r4, r0
   10304:	2000      	movs	r0, #0
   10306:	8822      	ldrh	r2, [r4, #0]
   10308:	b086      	sub	sp, #24
   1030a:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   1030e:	39ff      	subs	r1, #255	; 0xff
   10310:	d008      	beq.n	10324 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   10312:	a903      	add	r1, sp, #12
   10314:	4610      	mov	r0, r2
   10316:	f7fd fe95 	bl	e044 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1031a:	b110      	cbz	r0, 10322 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   1031c:	2002      	movs	r0, #2
   1031e:	b006      	add	sp, #24
   10320:	bd10      	pop	{r4, pc}
   10322:	9804      	ldr	r0, [sp, #16]
   10324:	8921      	ldrh	r1, [r4, #8]
   10326:	89a3      	ldrh	r3, [r4, #12]
   10328:	8962      	ldrh	r2, [r4, #10]
   1032a:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   1032e:	88e3      	ldrh	r3, [r4, #6]
   10330:	88a2      	ldrh	r2, [r4, #4]
   10332:	8861      	ldrh	r1, [r4, #2]
   10334:	f000 f97f 	bl	10636 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2f0>
   10338:	b108      	cbz	r0, 1033e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   1033a:	2000      	movs	r0, #0
   1033c:	e7ef      	b.n	1031e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   1033e:	2030      	movs	r0, #48	; 0x30
   10340:	e7ed      	b.n	1031e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

00010342 <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>:
   10342:	f7f5 ba8d 	b.w	5860 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

00010346 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   10346:	b510      	push	{r4, lr}
   10348:	f7fd fd9a 	bl	de80 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   1034c:	f7f1 ffb2 	bl	22b4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   10350:	f7f7 fb4a 	bl	79e8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   10354:	f7fe f9cf 	bl	e6f6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   10358:	f7fe f81f 	bl	e39a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
   1035c:	f7f3 f862 	bl	3424 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
   10360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10364:	f7f7 b8d6 	b.w	7514 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1c>
   10368:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1036c:	4288      	cmp	r0, r1
   1036e:	d303      	bcc.n	10378 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x32>
   10370:	f640 0148 	movw	r1, #2120	; 0x848
   10374:	4288      	cmp	r0, r1
   10376:	d300      	bcc.n	1037a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x34>
   10378:	4608      	mov	r0, r1
   1037a:	b280      	uxth	r0, r0
   1037c:	4770      	bx	lr
   1037e:	07c1      	lsls	r1, r0, #31
   10380:	d001      	beq.n	10386 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40>
   10382:	2001      	movs	r0, #1
   10384:	4770      	bx	lr
   10386:	0780      	lsls	r0, r0, #30
   10388:	d501      	bpl.n	1038e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48>
   1038a:	2002      	movs	r0, #2
   1038c:	4770      	bx	lr
   1038e:	2000      	movs	r0, #0
   10390:	4770      	bx	lr
   10392:	b510      	push	{r4, lr}
   10394:	2801      	cmp	r0, #1
   10396:	d006      	beq.n	103a6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x60>
   10398:	2802      	cmp	r0, #2
   1039a:	d004      	beq.n	103a6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x60>
   1039c:	f240 21d7 	movw	r1, #727	; 0x2d7
   103a0:	2006      	movs	r0, #6
   103a2:	f7f0 fb3b 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   103a6:	bd10      	pop	{r4, pc}
   103a8:	b510      	push	{r4, lr}
   103aa:	f000 f9e5 	bl	10778 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
   103ae:	b128      	cbz	r0, 103bc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x76>
   103b0:	f7f3 fa88 	bl	38c4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
   103b4:	2801      	cmp	r0, #1
   103b6:	d001      	beq.n	103bc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x76>
   103b8:	2000      	movs	r0, #0
   103ba:	bd10      	pop	{r4, pc}
   103bc:	2001      	movs	r0, #1
   103be:	bd10      	pop	{r4, pc}
   103c0:	b510      	push	{r4, lr}
   103c2:	0004      	movs	r4, r0
   103c4:	d005      	beq.n	103d2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8c>
   103c6:	f7f7 faff 	bl	79c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   103ca:	4384      	bics	r4, r0
   103cc:	d001      	beq.n	103d2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8c>
   103ce:	2000      	movs	r0, #0
   103d0:	bd10      	pop	{r4, pc}
   103d2:	2001      	movs	r0, #1
   103d4:	bd10      	pop	{r4, pc}
   103d6:	28fb      	cmp	r0, #251	; 0xfb
   103d8:	d803      	bhi.n	103e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
   103da:	f640 0048 	movw	r0, #2120	; 0x848
   103de:	4281      	cmp	r1, r0
   103e0:	d901      	bls.n	103e6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa0>
   103e2:	2011      	movs	r0, #17
   103e4:	4770      	bx	lr
   103e6:	2000      	movs	r0, #0
   103e8:	4770      	bx	lr
   103ea:	381b      	subs	r0, #27
   103ec:	28e1      	cmp	r0, #225	; 0xe1
   103ee:	d206      	bcs.n	103fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
   103f0:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   103f4:	d303      	bcc.n	103fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
   103f6:	f244 2090 	movw	r0, #17040	; 0x4290
   103fa:	4281      	cmp	r1, r0
   103fc:	d901      	bls.n	10402 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xbc>
   103fe:	2012      	movs	r0, #18
   10400:	4770      	bx	lr
   10402:	2000      	movs	r0, #0
   10404:	4770      	bx	lr
   10406:	b510      	push	{r4, lr}
   10408:	4604      	mov	r4, r0
   1040a:	7800      	ldrb	r0, [r0, #0]
   1040c:	2801      	cmp	r0, #1
   1040e:	d009      	beq.n	10424 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xde>
   10410:	f7f4 fbcc 	bl	4bac <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   10414:	2805      	cmp	r0, #5
   10416:	d003      	beq.n	10420 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xda>
   10418:	f7f4 fb90 	bl	4b3c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
   1041c:	2800      	cmp	r0, #0
   1041e:	d000      	beq.n	10422 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xdc>
   10420:	200c      	movs	r0, #12
   10422:	bd10      	pop	{r4, pc}
   10424:	f7f3 fa1c 	bl	3860 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
   10428:	b108      	cbz	r0, 1042e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe8>
   1042a:	203a      	movs	r0, #58	; 0x3a
   1042c:	bd10      	pop	{r4, pc}
   1042e:	f7f3 f9d1 	bl	37d4 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
   10432:	b138      	cbz	r0, 10444 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
   10434:	f7f3 f84c 	bl	34d0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
   10438:	88a1      	ldrh	r1, [r4, #4]
   1043a:	8860      	ldrh	r0, [r4, #2]
   1043c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10440:	f7f4 bb42 	b.w	4ac8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
   10444:	2012      	movs	r0, #18
   10446:	bd10      	pop	{r4, pc}
   10448:	7802      	ldrb	r2, [r0, #0]
   1044a:	2a01      	cmp	r2, #1
   1044c:	d001      	beq.n	10452 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10c>
   1044e:	b1ba      	cbz	r2, 10480 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13a>
   10450:	e018      	b.n	10484 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
   10452:	7842      	ldrb	r2, [r0, #1]
   10454:	b13a      	cbz	r2, 10466 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x120>
   10456:	2a01      	cmp	r2, #1
   10458:	d005      	beq.n	10466 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x120>
   1045a:	2a02      	cmp	r2, #2
   1045c:	d112      	bne.n	10484 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
   1045e:	b189      	cbz	r1, 10484 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
   10460:	8881      	ldrh	r1, [r0, #4]
   10462:	b179      	cbz	r1, 10484 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
   10464:	e000      	b.n	10468 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x122>
   10466:	b159      	cbz	r1, 10480 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13a>
   10468:	8841      	ldrh	r1, [r0, #2]
   1046a:	b149      	cbz	r1, 10480 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13a>
   1046c:	8880      	ldrh	r0, [r0, #4]
   1046e:	b138      	cbz	r0, 10480 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13a>
   10470:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   10474:	0049      	lsls	r1, r1, #1
   10476:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1047a:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
   1047e:	d201      	bcs.n	10484 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
   10480:	2000      	movs	r0, #0
   10482:	4770      	bx	lr
   10484:	2012      	movs	r0, #18
   10486:	4770      	bx	lr
   10488:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   1048c:	7a45      	ldrb	r5, [r0, #9]
   1048e:	4604      	mov	r4, r0
   10490:	0768      	lsls	r0, r5, #29
   10492:	d06c      	beq.n	1056e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   10494:	08e8      	lsrs	r0, r5, #3
   10496:	d16a      	bne.n	1056e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   10498:	2d02      	cmp	r5, #2
   1049a:	d068      	beq.n	1056e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   1049c:	f7f7 fa94 	bl	79c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   104a0:	ea25 0000 	bic.w	r0, r5, r0
   104a4:	0740      	lsls	r0, r0, #29
   104a6:	d102      	bne.n	104ae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x168>
   104a8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   104ac:	b110      	cbz	r0, 104b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x16e>
   104ae:	2011      	movs	r0, #17
   104b0:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   104b4:	2d01      	cmp	r5, #1
   104b6:	d15a      	bne.n	1056e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   104b8:	27ff      	movs	r7, #255	; 0xff
   104ba:	2101      	movs	r1, #1
   104bc:	69a0      	ldr	r0, [r4, #24]
   104be:	f7f7 f947 	bl	7750 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x258>
   104c2:	b3e8      	cbz	r0, 10540 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fa>
   104c4:	46a8      	mov	r8, r5
   104c6:	2600      	movs	r6, #0
   104c8:	4635      	mov	r5, r6
   104ca:	42bd      	cmp	r5, r7
   104cc:	d02f      	beq.n	1052e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e8>
   104ce:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   104d2:	6988      	ldr	r0, [r1, #24]
   104d4:	68c9      	ldr	r1, [r1, #12]
   104d6:	4288      	cmp	r0, r1
   104d8:	d849      	bhi.n	1056e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   104da:	4406      	add	r6, r0
   104dc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
   104e0:	4681      	mov	r9, r0
   104e2:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
   104e4:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   104e8:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   104ea:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   104ee:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   104f0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   104f2:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   104f4:	2000      	movs	r0, #0
   104f6:	f000 f89e 	bl	10636 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2f0>
   104fa:	b308      	cbz	r0, 10540 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fa>
   104fc:	b1bd      	cbz	r5, 1052e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e8>
   104fe:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
   10502:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
   10506:	4281      	cmp	r1, r0
   10508:	d131      	bne.n	1056e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   1050a:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
   1050e:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
   10512:	4281      	cmp	r1, r0
   10514:	d12b      	bne.n	1056e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   10516:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
   1051a:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
   1051e:	4281      	cmp	r1, r0
   10520:	d125      	bne.n	1056e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   10522:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
   10526:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
   1052a:	4281      	cmp	r1, r0
   1052c:	d11f      	bne.n	1056e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   1052e:	1c6d      	adds	r5, r5, #1
   10530:	b2ed      	uxtb	r5, r5
   10532:	4545      	cmp	r5, r8
   10534:	d3c9      	bcc.n	104ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>
   10536:	68e0      	ldr	r0, [r4, #12]
   10538:	42b0      	cmp	r0, r6
   1053a:	d318      	bcc.n	1056e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   1053c:	7820      	ldrb	r0, [r4, #0]
   1053e:	e000      	b.n	10542 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fc>
   10540:	e003      	b.n	1054a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x204>
   10542:	b120      	cbz	r0, 1054e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x208>
   10544:	2801      	cmp	r0, #1
   10546:	d112      	bne.n	1056e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   10548:	e004      	b.n	10554 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20e>
   1054a:	2030      	movs	r0, #48	; 0x30
   1054c:	e7b0      	b.n	104b0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x16a>
   1054e:	78a0      	ldrb	r0, [r4, #2]
   10550:	2800      	cmp	r0, #0
   10552:	d1f7      	bne.n	10544 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fe>
   10554:	7860      	ldrb	r0, [r4, #1]
   10556:	b128      	cbz	r0, 10564 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21e>
   10558:	2801      	cmp	r0, #1
   1055a:	d003      	beq.n	10564 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21e>
   1055c:	2802      	cmp	r0, #2
   1055e:	d001      	beq.n	10564 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21e>
   10560:	2803      	cmp	r0, #3
   10562:	d104      	bne.n	1056e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   10564:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   10568:	b108      	cbz	r0, 1056e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
   1056a:	2807      	cmp	r0, #7
   1056c:	d901      	bls.n	10572 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22c>
   1056e:	2012      	movs	r0, #18
   10570:	e79e      	b.n	104b0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x16a>
   10572:	2000      	movs	r0, #0
   10574:	e79c      	b.n	104b0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x16a>
   10576:	b570      	push	{r4, r5, r6, lr}
   10578:	4604      	mov	r4, r0
   1057a:	7800      	ldrb	r0, [r0, #0]
   1057c:	2500      	movs	r5, #0
   1057e:	2801      	cmp	r0, #1
   10580:	d004      	beq.n	1058c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x246>
   10582:	b118      	cbz	r0, 1058c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x246>
   10584:	2802      	cmp	r0, #2
   10586:	d001      	beq.n	1058c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x246>
   10588:	2803      	cmp	r0, #3
   1058a:	d139      	bne.n	10600 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
   1058c:	7860      	ldrb	r0, [r4, #1]
   1058e:	b128      	cbz	r0, 1059c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x256>
   10590:	2801      	cmp	r0, #1
   10592:	d003      	beq.n	1059c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x256>
   10594:	2802      	cmp	r0, #2
   10596:	d001      	beq.n	1059c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x256>
   10598:	2803      	cmp	r0, #3
   1059a:	d131      	bne.n	10600 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
   1059c:	7e60      	ldrb	r0, [r4, #25]
   1059e:	b948      	cbnz	r0, 105b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26e>
   105a0:	78a0      	ldrb	r0, [r4, #2]
   105a2:	2801      	cmp	r0, #1
   105a4:	d12c      	bne.n	10600 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
   105a6:	f7f7 fa0f 	bl	79c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   105aa:	4601      	mov	r1, r0
   105ac:	78a0      	ldrb	r0, [r4, #2]
   105ae:	ea30 0101 	bics.w	r1, r0, r1
   105b2:	d001      	beq.n	105b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x272>
   105b4:	2011      	movs	r0, #17
   105b6:	bd70      	pop	{r4, r5, r6, pc}
   105b8:	07c0      	lsls	r0, r0, #31
   105ba:	d006      	beq.n	105ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x284>
   105bc:	78e0      	ldrb	r0, [r4, #3]
   105be:	2301      	movs	r3, #1
   105c0:	6922      	ldr	r2, [r4, #16]
   105c2:	68a1      	ldr	r1, [r4, #8]
   105c4:	f000 f820 	bl	10608 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c2>
   105c8:	4605      	mov	r5, r0
   105ca:	78a0      	ldrb	r0, [r4, #2]
   105cc:	0780      	lsls	r0, r0, #30
   105ce:	d506      	bpl.n	105de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x298>
   105d0:	78e0      	ldrb	r0, [r4, #3]
   105d2:	2302      	movs	r3, #2
   105d4:	6922      	ldr	r2, [r4, #16]
   105d6:	68a1      	ldr	r1, [r4, #8]
   105d8:	f000 f816 	bl	10608 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c2>
   105dc:	4305      	orrs	r5, r0
   105de:	78a0      	ldrb	r0, [r4, #2]
   105e0:	0740      	lsls	r0, r0, #29
   105e2:	d506      	bpl.n	105f2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ac>
   105e4:	78e0      	ldrb	r0, [r4, #3]
   105e6:	2304      	movs	r3, #4
   105e8:	6922      	ldr	r2, [r4, #16]
   105ea:	68a1      	ldr	r1, [r4, #8]
   105ec:	f000 f80c 	bl	10608 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c2>
   105f0:	4305      	orrs	r5, r0
   105f2:	b10d      	cbz	r5, 105f8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
   105f4:	4628      	mov	r0, r5
   105f6:	bd70      	pop	{r4, r5, r6, pc}
   105f8:	7e20      	ldrb	r0, [r4, #24]
   105fa:	b108      	cbz	r0, 10600 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
   105fc:	2807      	cmp	r0, #7
   105fe:	d901      	bls.n	10604 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2be>
   10600:	2012      	movs	r0, #18
   10602:	bd70      	pop	{r4, r5, r6, pc}
   10604:	2000      	movs	r0, #0
   10606:	bd70      	pop	{r4, r5, r6, pc}
   10608:	b570      	push	{r4, r5, r6, lr}
   1060a:	4614      	mov	r4, r2
   1060c:	460d      	mov	r5, r1
   1060e:	b108      	cbz	r0, 10614 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ce>
   10610:	2801      	cmp	r0, #1
   10612:	d10a      	bne.n	1062a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e4>
   10614:	4619      	mov	r1, r3
   10616:	4610      	mov	r0, r2
   10618:	f7f7 f89a 	bl	7750 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x258>
   1061c:	b138      	cbz	r0, 1062e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
   1061e:	4628      	mov	r0, r5
   10620:	f7f6 ff9a 	bl	7558 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x60>
   10624:	b118      	cbz	r0, 1062e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
   10626:	42ac      	cmp	r4, r5
   10628:	d903      	bls.n	10632 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ec>
   1062a:	2012      	movs	r0, #18
   1062c:	bd70      	pop	{r4, r5, r6, pc}
   1062e:	2030      	movs	r0, #48	; 0x30
   10630:	bd70      	pop	{r4, r5, r6, pc}
   10632:	2000      	movs	r0, #0
   10634:	bd70      	pop	{r4, r5, r6, pc}
   10636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1063a:	461d      	mov	r5, r3
   1063c:	4610      	mov	r0, r2
   1063e:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
   10642:	1f8b      	subs	r3, r1, #6
   10644:	f640 427a 	movw	r2, #3194	; 0xc7a
   10648:	9e08      	ldr	r6, [sp, #32]
   1064a:	4293      	cmp	r3, r2
   1064c:	d81c      	bhi.n	10688 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x342>
   1064e:	1f83      	subs	r3, r0, #6
   10650:	4293      	cmp	r3, r2
   10652:	d819      	bhi.n	10688 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x342>
   10654:	4281      	cmp	r1, r0
   10656:	d817      	bhi.n	10688 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x342>
   10658:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   1065c:	d214      	bcs.n	10688 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x342>
   1065e:	f1a4 010a 	sub.w	r1, r4, #10
   10662:	1f12      	subs	r2, r2, #4
   10664:	4291      	cmp	r1, r2
   10666:	d80f      	bhi.n	10688 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x342>
   10668:	f7fd fcf8 	bl	e05c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   1066c:	1c6d      	adds	r5, r5, #1
   1066e:	4368      	muls	r0, r5
   10670:	f240 2171 	movw	r1, #625	; 0x271
   10674:	0040      	lsls	r0, r0, #1
   10676:	434c      	muls	r4, r1
   10678:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
   1067c:	d204      	bcs.n	10688 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x342>
   1067e:	42b7      	cmp	r7, r6
   10680:	d802      	bhi.n	10688 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x342>
   10682:	2001      	movs	r0, #1
   10684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10688:	2000      	movs	r0, #0
   1068a:	e7fb      	b.n	10684 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
   1068c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10690:	4606      	mov	r6, r0
   10692:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   10696:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   1069a:	4615      	mov	r5, r2
   1069c:	302c      	adds	r0, #44	; 0x2c
   1069e:	f7f4 ff55 	bl	554c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
   106a2:	4680      	mov	r8, r0
   106a4:	2102      	movs	r1, #2
   106a6:	f7fd fd64 	bl	e172 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   106aa:	4287      	cmp	r7, r0
   106ac:	d200      	bcs.n	106b0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36a>
   106ae:	4638      	mov	r0, r7
   106b0:	4607      	mov	r7, r0
   106b2:	2102      	movs	r1, #2
   106b4:	4640      	mov	r0, r8
   106b6:	f7fd fd5c 	bl	e172 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   106ba:	4284      	cmp	r4, r0
   106bc:	d200      	bcs.n	106c0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x37a>
   106be:	4620      	mov	r0, r4
   106c0:	8831      	ldrh	r1, [r6, #0]
   106c2:	8029      	strh	r1, [r5, #0]
   106c4:	2f1b      	cmp	r7, #27
   106c6:	d913      	bls.n	106f0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3aa>
   106c8:	2ffb      	cmp	r7, #251	; 0xfb
   106ca:	d300      	bcc.n	106ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x388>
   106cc:	27fb      	movs	r7, #251	; 0xfb
   106ce:	806f      	strh	r7, [r5, #2]
   106d0:	281b      	cmp	r0, #27
   106d2:	d90f      	bls.n	106f4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ae>
   106d4:	28fb      	cmp	r0, #251	; 0xfb
   106d6:	d300      	bcc.n	106da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x394>
   106d8:	20fb      	movs	r0, #251	; 0xfb
   106da:	80e8      	strh	r0, [r5, #6]
   106dc:	4640      	mov	r0, r8
   106de:	f7ff fe43 	bl	10368 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
   106e2:	80a8      	strh	r0, [r5, #4]
   106e4:	4640      	mov	r0, r8
   106e6:	f7ff fe3f 	bl	10368 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
   106ea:	8128      	strh	r0, [r5, #8]
   106ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   106f0:	271b      	movs	r7, #27
   106f2:	e7ec      	b.n	106ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x388>
   106f4:	201b      	movs	r0, #27
   106f6:	e7f0      	b.n	106da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x394>
   106f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106fc:	7890      	ldrb	r0, [r2, #2]
   106fe:	9e06      	ldr	r6, [sp, #24]
   10700:	461d      	mov	r5, r3
   10702:	4614      	mov	r4, r2
   10704:	b908      	cbnz	r0, 1070a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3c4>
   10706:	f7f7 f95f 	bl	79c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1070a:	78e4      	ldrb	r4, [r4, #3]
   1070c:	4607      	mov	r7, r0
   1070e:	b914      	cbnz	r4, 10716 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3d0>
   10710:	f7f7 f95a 	bl	79c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10714:	4604      	mov	r4, r0
   10716:	b16f      	cbz	r7, 10734 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ee>
   10718:	b164      	cbz	r4, 10734 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ee>
   1071a:	4638      	mov	r0, r7
   1071c:	f7ff fe2f 	bl	1037e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
   10720:	4620      	mov	r0, r4
   10722:	f7ff fe2c 	bl	1037e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
   10726:	b12f      	cbz	r7, 10734 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ee>
   10728:	b124      	cbz	r4, 10734 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ee>
   1072a:	702f      	strb	r7, [r5, #0]
   1072c:	7034      	strb	r4, [r6, #0]
   1072e:	2000      	movs	r0, #0
   10730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10734:	2009      	movs	r0, #9
   10736:	e7fb      	b.n	10730 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ea>
   10738:	207f      	movs	r0, #127	; 0x7f
   1073a:	f000 b828 	b.w	1078e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x448>
   1073e:	b508      	push	{r3, lr}
   10740:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
   10744:	f890 00c6 	ldrb.w	r0, [r0, #198]	; 0xc6
   10748:	f88d 0000 	strb.w	r0, [sp]
   1074c:	9800      	ldr	r0, [sp, #0]
   1074e:	9000      	str	r0, [sp, #0]
   10750:	f89d 0000 	ldrb.w	r0, [sp]
   10754:	b100      	cbz	r0, 10758 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x412>
   10756:	2001      	movs	r0, #1
   10758:	1e40      	subs	r0, r0, #1
   1075a:	4208      	tst	r0, r1
   1075c:	d003      	beq.n	10766 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x420>
   1075e:	2904      	cmp	r1, #4
   10760:	d001      	beq.n	10766 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x420>
   10762:	2001      	movs	r0, #1
   10764:	bd08      	pop	{r3, pc}
   10766:	2000      	movs	r0, #0
   10768:	bd08      	pop	{r3, pc}
   1076a:	b510      	push	{r4, lr}
   1076c:	f000 f804 	bl	10778 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
   10770:	2800      	cmp	r0, #0
   10772:	d000      	beq.n	10776 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x430>
   10774:	2001      	movs	r0, #1
   10776:	bd10      	pop	{r4, pc}
   10778:	b510      	push	{r4, lr}
   1077a:	f7f4 fa17 	bl	4bac <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   1077e:	2804      	cmp	r0, #4
   10780:	d003      	beq.n	1078a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x444>
   10782:	2805      	cmp	r0, #5
   10784:	d001      	beq.n	1078a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x444>
   10786:	2000      	movs	r0, #0
   10788:	bd10      	pop	{r4, pc}
   1078a:	2001      	movs	r0, #1
   1078c:	bd10      	pop	{r4, pc}
   1078e:	b508      	push	{r3, lr}
   10790:	f640 1288 	movw	r2, #2440	; 0x988
   10794:	2300      	movs	r3, #0
   10796:	4669      	mov	r1, sp
   10798:	f7fc fa68 	bl	cc6c <mpsl_fem_tx_power_split>
   1079c:	bd08      	pop	{r3, pc}
   1079e:	b530      	push	{r4, r5, lr}
   107a0:	f340 0400 	sbfx	r4, r0, #0, #1
   107a4:	f340 0040 	sbfx	r0, r0, #1, #1
   107a8:	1c40      	adds	r0, r0, #1
   107aa:	9d03      	ldr	r5, [sp, #12]
   107ac:	1c64      	adds	r4, r4, #1
   107ae:	d000      	beq.n	107b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x46c>
   107b0:	b119      	cbz	r1, 107ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x474>
   107b2:	b100      	cbz	r0, 107b6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
   107b4:	b10a      	cbz	r2, 107ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x474>
   107b6:	b91c      	cbnz	r4, 107c0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x47a>
   107b8:	e001      	b.n	107be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x478>
   107ba:	2011      	movs	r0, #17
   107bc:	bd30      	pop	{r4, r5, pc}
   107be:	2100      	movs	r1, #0
   107c0:	7019      	strb	r1, [r3, #0]
   107c2:	b900      	cbnz	r0, 107c6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x480>
   107c4:	2200      	movs	r2, #0
   107c6:	702a      	strb	r2, [r5, #0]
   107c8:	2000      	movs	r0, #0
   107ca:	bd30      	pop	{r4, r5, pc}
   107cc:	b510      	push	{r4, lr}
   107ce:	f7ff ffd3 	bl	10778 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
   107d2:	b120      	cbz	r0, 107de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x498>
   107d4:	f7f3 f87e 	bl	38d4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   107d8:	b108      	cbz	r0, 107de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x498>
   107da:	2001      	movs	r0, #1
   107dc:	bd10      	pop	{r4, pc}
   107de:	2000      	movs	r0, #0
   107e0:	bd10      	pop	{r4, pc}
   107e2:	6802      	ldr	r2, [r0, #0]
   107e4:	b912      	cbnz	r2, 107ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a6>
   107e6:	6001      	str	r1, [r0, #0]
   107e8:	4770      	bx	lr
   107ea:	4602      	mov	r2, r0
   107ec:	6850      	ldr	r0, [r2, #4]
   107ee:	b108      	cbz	r0, 107f4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ae>
   107f0:	428a      	cmp	r2, r1
   107f2:	d1fa      	bne.n	107ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a4>
   107f4:	428a      	cmp	r2, r1
   107f6:	d0f7      	beq.n	107e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a2>
   107f8:	6051      	str	r1, [r2, #4]
   107fa:	4770      	bx	lr
   107fc:	b510      	push	{r4, lr}
   107fe:	4604      	mov	r4, r0
   10800:	e002      	b.n	10808 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c2>
   10802:	6820      	ldr	r0, [r4, #0]
   10804:	4780      	blx	r0
   10806:	6864      	ldr	r4, [r4, #4]
   10808:	2c00      	cmp	r4, #0
   1080a:	d1fa      	bne.n	10802 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4bc>
   1080c:	bd10      	pop	{r4, pc}
   1080e:	b510      	push	{r4, lr}
   10810:	2000      	movs	r0, #0
   10812:	f7fd fa75 	bl	dd00 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10816:	f7f0 fd51 	bl	12bc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1081a:	f7f0 ff59 	bl	16d0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   1081e:	f7f1 f8e7 	bl	19f0 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
   10822:	2800      	cmp	r0, #0
   10824:	d003      	beq.n	1082e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4e8>
   10826:	21f2      	movs	r1, #242	; 0xf2
   10828:	2001      	movs	r0, #1
   1082a:	f7f0 f8f7 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1082e:	bd10      	pop	{r4, pc}
   10830:	b510      	push	{r4, lr}
   10832:	f000 f80a 	bl	1084a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x504>
   10836:	f7fe fed1 	bl	f5dc <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
   1083a:	2800      	cmp	r0, #0
   1083c:	d004      	beq.n	10848 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x502>
   1083e:	f44f 71ba 	mov.w	r1, #372	; 0x174
   10842:	2001      	movs	r0, #1
   10844:	f7f0 f8ea 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10848:	bd10      	pop	{r4, pc}
   1084a:	b510      	push	{r4, lr}
   1084c:	f7f4 f9f6 	bl	4c3c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
   10850:	b110      	cbz	r0, 10858 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x512>
   10852:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   10856:	e004      	b.n	10862 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x51c>
   10858:	f7fe fd3c 	bl	f2d4 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
   1085c:	b120      	cbz	r0, 10868 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x522>
   1085e:	f240 114f 	movw	r1, #335	; 0x14f
   10862:	2001      	movs	r0, #1
   10864:	f7f0 f8da 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10868:	f7f6 fd9a 	bl	73a0 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
   1086c:	f7f2 ff7c 	bl	3768 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   10870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10874:	f7f6 bbf6 	b.w	7064 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
   10878:	000b0001 	.word	0x000b0001
   1087c:	000a0002 	.word	0x000a0002
   10880:	00090005 	.word	0x00090005
   10884:	0008000a 	.word	0x0008000a
   10888:	00070014 	.word	0x00070014
   1088c:	0006001e 	.word	0x0006001e
   10890:	00050032 	.word	0x00050032
   10894:	0004004b 	.word	0x0004004b
   10898:	00030064 	.word	0x00030064
   1089c:	00020096 	.word	0x00020096
   108a0:	000100fa 	.word	0x000100fa
   108a4:	000001f4 	.word	0x000001f4

000108a8 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI>:
   108a8:	b510      	push	{r4, lr}
   108aa:	6844      	ldr	r4, [r0, #4]
   108ac:	7803      	ldrb	r3, [r0, #0]
   108ae:	2100      	movs	r1, #0
   108b0:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
   108b4:	3488      	adds	r4, #136	; 0x88
   108b6:	4620      	mov	r0, r4
   108b8:	f7fd fbda 	bl	e070 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   108bc:	b110      	cbz	r0, 108c4 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI+0x1c>
   108be:	2020      	movs	r0, #32
   108c0:	7760      	strb	r0, [r4, #29]
   108c2:	bd10      	pop	{r4, pc}
   108c4:	2180      	movs	r1, #128	; 0x80
   108c6:	207e      	movs	r0, #126	; 0x7e
   108c8:	f7f0 f8a8 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000108cc <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   108cc:	2200      	movs	r2, #0
   108ce:	704a      	strb	r2, [r1, #1]
   108d0:	2217      	movs	r2, #23
   108d2:	700a      	strb	r2, [r1, #0]
   108d4:	f8d0 200a 	ldr.w	r2, [r0, #10]
   108d8:	604a      	str	r2, [r1, #4]
   108da:	89c0      	ldrh	r0, [r0, #14]
   108dc:	8108      	strh	r0, [r1, #8]
   108de:	4770      	bx	lr
   108e0:	b510      	push	{r4, lr}
   108e2:	2801      	cmp	r0, #1
   108e4:	d006      	beq.n	108f4 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   108e6:	2802      	cmp	r0, #2
   108e8:	d004      	beq.n	108f4 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   108ea:	f240 21d7 	movw	r1, #727	; 0x2d7
   108ee:	2006      	movs	r0, #6
   108f0:	f7f0 f894 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   108f4:	bd10      	pop	{r4, pc}

000108f6 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   108f6:	b510      	push	{r4, lr}
   108f8:	f7f7 fc20 	bl	813c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   108fc:	f000 f81d 	bl	1093a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10900:	f7f7 f938 	bl	7b74 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10908:	f7f7 ba32 	b.w	7d70 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0001090c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   1090c:	b510      	push	{r4, lr}
   1090e:	24c8      	movs	r4, #200	; 0xc8
   10910:	1e64      	subs	r4, r4, #1
   10912:	b2e4      	uxtb	r4, r4
   10914:	f7f7 f94c 	bl	7bb0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10918:	2802      	cmp	r0, #2
   1091a:	d003      	beq.n	10924 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   1091c:	2801      	cmp	r0, #1
   1091e:	d000      	beq.n	10922 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10920:	2000      	movs	r0, #0
   10922:	bd10      	pop	{r4, pc}
   10924:	2c00      	cmp	r4, #0
   10926:	d1f3      	bne.n	10910 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10928:	21ed      	movs	r1, #237	; 0xed
   1092a:	203b      	movs	r0, #59	; 0x3b
   1092c:	f7f0 f876 	bl	a1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10930:	5840      	ldr	r0, [r0, r1]
   10932:	2800      	cmp	r0, #0
   10934:	d000      	beq.n	10938 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   10936:	2001      	movs	r0, #1
   10938:	4770      	bx	lr

0001093a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   1093a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1093e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10942:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10946:	f3bf 8f4f 	dsb	sy
   1094a:	f3bf 8f6f 	isb	sy
   1094e:	f7f7 baa9 	b.w	7ea4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   10952:	2800      	cmp	r0, #0
   10954:	db09      	blt.n	1096a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   10956:	f000 021f 	and.w	r2, r0, #31
   1095a:	2101      	movs	r1, #1
   1095c:	4091      	lsls	r1, r2
   1095e:	0940      	lsrs	r0, r0, #5
   10960:	0080      	lsls	r0, r0, #2
   10962:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10966:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1096a:	4770      	bx	lr
   1096c:	2800      	cmp	r0, #0
   1096e:	db0d      	blt.n	1098c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10970:	f000 021f 	and.w	r2, r0, #31
   10974:	2101      	movs	r1, #1
   10976:	4091      	lsls	r1, r2
   10978:	0940      	lsrs	r0, r0, #5
   1097a:	0080      	lsls	r0, r0, #2
   1097c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10980:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10984:	f3bf 8f4f 	dsb	sy
   10988:	f3bf 8f6f 	isb	sy
   1098c:	4770      	bx	lr
   1098e:	5840      	ldr	r0, [r0, r1]
   10990:	2800      	cmp	r0, #0
   10992:	d000      	beq.n	10996 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10994:	2001      	movs	r0, #1
   10996:	4770      	bx	lr
   10998:	5840      	ldr	r0, [r0, r1]
   1099a:	2800      	cmp	r0, #0
   1099c:	d000      	beq.n	109a0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   1099e:	2001      	movs	r0, #1
   109a0:	4770      	bx	lr

000109a2 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   109a2:	b510      	push	{r4, lr}
   109a4:	4604      	mov	r4, r0
   109a6:	4608      	mov	r0, r1
   109a8:	f7f7 fcee 	bl	8388 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   109ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   109b0:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   109b4:	fbb0 f0f1 	udiv	r0, r0, r1
   109b8:	1a20      	subs	r0, r4, r0
   109ba:	1e80      	subs	r0, r0, #2
   109bc:	bd10      	pop	{r4, pc}

000109be <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   109be:	b510      	push	{r4, lr}
   109c0:	4604      	mov	r4, r0
   109c2:	4608      	mov	r0, r1
   109c4:	f7f7 fce0 	bl	8388 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   109c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   109cc:	fbb0 f0f1 	udiv	r0, r0, r1
   109d0:	1a20      	subs	r0, r4, r0
   109d2:	bd10      	pop	{r4, pc}
   109d4:	2804      	cmp	r0, #4
   109d6:	d202      	bcs.n	109de <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   109d8:	f04f 0028 	mov.w	r0, #40	; 0x28
   109dc:	4770      	bx	lr
   109de:	d102      	bne.n	109e6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   109e0:	f04f 0010 	mov.w	r0, #16
   109e4:	4770      	bx	lr
   109e6:	f04f 0000 	mov.w	r0, #0
   109ea:	4770      	bx	lr
   109ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   109f0:	000d      	movs	r5, r1
   109f2:	4604      	mov	r4, r0
   109f4:	f04f 0602 	mov.w	r6, #2
   109f8:	f04f 0701 	mov.w	r7, #1
   109fc:	d008      	beq.n	10a10 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x52>
   109fe:	7828      	ldrb	r0, [r5, #0]
   10a00:	b1d0      	cbz	r0, 10a38 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   10a02:	2801      	cmp	r0, #1
   10a04:	d007      	beq.n	10a16 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x58>
   10a06:	2802      	cmp	r0, #2
   10a08:	d014      	beq.n	10a34 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   10a0a:	2803      	cmp	r0, #3
   10a0c:	d13e      	bne.n	10a8c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xce>
   10a0e:	e016      	b.n	10a3e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x80>
   10a10:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
   10a14:	e00e      	b.n	10a34 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   10a16:	6868      	ldr	r0, [r5, #4]
   10a18:	28c8      	cmp	r0, #200	; 0xc8
   10a1a:	d303      	bcc.n	10a24 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x66>
   10a1c:	2103      	movs	r1, #3
   10a1e:	f7f9 fb45 	bl	a0ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   10a22:	b108      	cbz	r0, 10a28 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x6a>
   10a24:	2600      	movs	r6, #0
   10a26:	e007      	b.n	10a38 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   10a28:	4620      	mov	r0, r4
   10a2a:	6869      	ldr	r1, [r5, #4]
   10a2c:	f000 f833 	bl	10a96 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd8>
   10a30:	2601      	movs	r6, #1
   10a32:	e001      	b.n	10a38 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   10a34:	f7f8 fb46 	bl	90c4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2bc>
   10a38:	4630      	mov	r0, r6
   10a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10a3e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   10a42:	2800      	cmp	r0, #0
   10a44:	d1f6      	bne.n	10a34 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   10a46:	6868      	ldr	r0, [r5, #4]
   10a48:	f7f8 fb0e 	bl	9068 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x260>
   10a4c:	b1f0      	cbz	r0, 10a8c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xce>
   10a4e:	6869      	ldr	r1, [r5, #4]
   10a50:	7808      	ldrb	r0, [r1, #0]
   10a52:	b130      	cbz	r0, 10a62 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xa4>
   10a54:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   10a58:	2805      	cmp	r0, #5
   10a5a:	d008      	beq.n	10a6e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xb0>
   10a5c:	f44f 71be 	mov.w	r1, #380	; 0x17c
   10a60:	e011      	b.n	10a86 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xc8>
   10a62:	4620      	mov	r0, r4
   10a64:	f000 f830 	bl	10ac8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x10a>
   10a68:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
   10a6c:	e7e2      	b.n	10a34 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   10a6e:	4620      	mov	r0, r4
   10a70:	f000 f843 	bl	10afa <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x13c>
   10a74:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   10a78:	4621      	mov	r1, r4
   10a7a:	f000 f80a 	bl	10a92 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
   10a7e:	2800      	cmp	r0, #0
   10a80:	d1d8      	bne.n	10a34 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   10a82:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   10a86:	206a      	movs	r0, #106	; 0x6a
   10a88:	f7fb ff32 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10a8c:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
   10a90:	e7d0      	b.n	10a34 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   10a92:	f7f9 bd53 	b.w	a53c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   10a96:	b510      	push	{r4, lr}
   10a98:	4602      	mov	r2, r0
   10a9a:	7803      	ldrb	r3, [r0, #0]
   10a9c:	6840      	ldr	r0, [r0, #4]
   10a9e:	2b01      	cmp	r3, #1
   10aa0:	4408      	add	r0, r1
   10aa2:	6050      	str	r0, [r2, #4]
   10aa4:	f1a0 0062 	sub.w	r0, r0, #98	; 0x62
   10aa8:	d007      	beq.n	10aba <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xfc>
   10aaa:	f7fa fd27 	bl	b4fc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   10aae:	2800      	cmp	r0, #0
   10ab0:	d109      	bne.n	10ac6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x108>
   10ab2:	21c1      	movs	r1, #193	; 0xc1
   10ab4:	206a      	movs	r0, #106	; 0x6a
   10ab6:	f7fb ff1b 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10aba:	f7fa fd1f 	bl	b4fc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   10abe:	2800      	cmp	r0, #0
   10ac0:	d101      	bne.n	10ac6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x108>
   10ac2:	21bc      	movs	r1, #188	; 0xbc
   10ac4:	e7f6      	b.n	10ab4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xf6>
   10ac6:	bd10      	pop	{r4, pc}
   10ac8:	2201      	movs	r2, #1
   10aca:	7002      	strb	r2, [r0, #0]
   10acc:	2200      	movs	r2, #0
   10ace:	72c2      	strb	r2, [r0, #11]
   10ad0:	790a      	ldrb	r2, [r1, #4]
   10ad2:	b172      	cbz	r2, 10af2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x134>
   10ad4:	2200      	movs	r2, #0
   10ad6:	8102      	strh	r2, [r0, #8]
   10ad8:	794a      	ldrb	r2, [r1, #5]
   10ada:	b162      	cbz	r2, 10af6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x138>
   10adc:	2203      	movs	r2, #3
   10ade:	7282      	strb	r2, [r0, #10]
   10ae0:	688a      	ldr	r2, [r1, #8]
   10ae2:	3273      	adds	r2, #115	; 0x73
   10ae4:	6042      	str	r2, [r0, #4]
   10ae6:	68c9      	ldr	r1, [r1, #12]
   10ae8:	6101      	str	r1, [r0, #16]
   10aea:	2103      	movs	r1, #3
   10aec:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10af0:	4770      	bx	lr
   10af2:	222b      	movs	r2, #43	; 0x2b
   10af4:	e7ef      	b.n	10ad6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x118>
   10af6:	2202      	movs	r2, #2
   10af8:	e7f1      	b.n	10ade <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x120>
   10afa:	b510      	push	{r4, lr}
   10afc:	2200      	movs	r2, #0
   10afe:	7002      	strb	r2, [r0, #0]
   10b00:	72c2      	strb	r2, [r0, #11]
   10b02:	790a      	ldrb	r2, [r1, #4]
   10b04:	b1a2      	cbz	r2, 10b30 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x172>
   10b06:	2200      	movs	r2, #0
   10b08:	8102      	strh	r2, [r0, #8]
   10b0a:	794a      	ldrb	r2, [r1, #5]
   10b0c:	b192      	cbz	r2, 10b34 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x176>
   10b0e:	2203      	movs	r2, #3
   10b10:	7282      	strb	r2, [r0, #10]
   10b12:	68ca      	ldr	r2, [r1, #12]
   10b14:	3273      	adds	r2, #115	; 0x73
   10b16:	6042      	str	r2, [r0, #4]
   10b18:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
   10b1c:	6889      	ldr	r1, [r1, #8]
   10b1e:	17cb      	asrs	r3, r1, #31
   10b20:	1861      	adds	r1, r4, r1
   10b22:	415a      	adcs	r2, r3
   10b24:	e9c0 1204 	strd	r1, r2, [r0, #16]
   10b28:	2104      	movs	r1, #4
   10b2a:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10b2e:	bd10      	pop	{r4, pc}
   10b30:	222b      	movs	r2, #43	; 0x2b
   10b32:	e7e9      	b.n	10b08 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x14a>
   10b34:	2202      	movs	r2, #2
   10b36:	e7eb      	b.n	10b10 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x152>
   10b38:	b570      	push	{r4, r5, r6, lr}
   10b3a:	4605      	mov	r5, r0
   10b3c:	460c      	mov	r4, r1
   10b3e:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
   10b42:	f7fa faa1 	bl	b088 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   10b46:	b178      	cbz	r0, 10b68 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x1aa>
   10b48:	4620      	mov	r0, r4
   10b4a:	f000 f810 	bl	10b6e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x1b0>
   10b4e:	6a22      	ldr	r2, [r4, #32]
   10b50:	2109      	movs	r1, #9
   10b52:	4628      	mov	r0, r5
   10b54:	4790      	blx	r2
   10b56:	2800      	cmp	r0, #0
   10b58:	d008      	beq.n	10b6c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x1ae>
   10b5a:	7800      	ldrb	r0, [r0, #0]
   10b5c:	2800      	cmp	r0, #0
   10b5e:	d005      	beq.n	10b6c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x1ae>
   10b60:	21dc      	movs	r1, #220	; 0xdc
   10b62:	206a      	movs	r0, #106	; 0x6a
   10b64:	f7fb fec4 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10b68:	21d8      	movs	r1, #216	; 0xd8
   10b6a:	e7fa      	b.n	10b62 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x1a4>
   10b6c:	bd70      	pop	{r4, r5, r6, pc}
   10b6e:	2100      	movs	r1, #0
   10b70:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10b74:	f800 1f24 	strb.w	r1, [r0, #36]!
   10b78:	7041      	strb	r1, [r0, #1]
   10b7a:	4770      	bx	lr

00010b7c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10b7c:	b570      	push	{r4, r5, r6, lr}
   10b7e:	f7f8 fafd 	bl	917c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10b82:	4605      	mov	r5, r0
   10b84:	2400      	movs	r4, #0
   10b86:	e006      	b.n	10b96 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   10b88:	4620      	mov	r0, r4
   10b8a:	f7f8 fafd 	bl	9188 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10b8e:	f7ff ffee 	bl	10b6e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x1b0>
   10b92:	1c64      	adds	r4, r4, #1
   10b94:	b2e4      	uxtb	r4, r4
   10b96:	42ac      	cmp	r4, r5
   10b98:	d3f6      	bcc.n	10b88 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10b9a:	bd70      	pop	{r4, r5, r6, pc}

00010b9c <mpsl_timeslot_request>:
   10b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ba0:	460d      	mov	r5, r1
   10ba2:	f7f8 faf1 	bl	9188 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10ba6:	0004      	movs	r4, r0
   10ba8:	d008      	beq.n	10bbc <mpsl_timeslot_request+0x20>
   10baa:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   10bae:	f06f 0622 	mvn.w	r6, #34	; 0x22
   10bb2:	2801      	cmp	r0, #1
   10bb4:	d006      	beq.n	10bc4 <mpsl_timeslot_request+0x28>
   10bb6:	2802      	cmp	r0, #2
   10bb8:	d111      	bne.n	10bde <mpsl_timeslot_request+0x42>
   10bba:	e003      	b.n	10bc4 <mpsl_timeslot_request+0x28>
   10bbc:	f06f 0001 	mvn.w	r0, #1
   10bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10bc4:	f06f 0715 	mvn.w	r7, #21
   10bc8:	b15d      	cbz	r5, 10be2 <mpsl_timeslot_request+0x46>
   10bca:	4628      	mov	r0, r5
   10bcc:	f7f8 fa4c 	bl	9068 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x260>
   10bd0:	b138      	cbz	r0, 10be2 <mpsl_timeslot_request+0x46>
   10bd2:	7828      	ldrb	r0, [r5, #0]
   10bd4:	b138      	cbz	r0, 10be6 <mpsl_timeslot_request+0x4a>
   10bd6:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   10bda:	2802      	cmp	r0, #2
   10bdc:	d008      	beq.n	10bf0 <mpsl_timeslot_request+0x54>
   10bde:	4630      	mov	r0, r6
   10be0:	e7ee      	b.n	10bc0 <mpsl_timeslot_request+0x24>
   10be2:	4638      	mov	r0, r7
   10be4:	e7ec      	b.n	10bc0 <mpsl_timeslot_request+0x24>
   10be6:	4629      	mov	r1, r5
   10be8:	4620      	mov	r0, r4
   10bea:	f7ff ff6d 	bl	10ac8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x10a>
   10bee:	e003      	b.n	10bf8 <mpsl_timeslot_request+0x5c>
   10bf0:	4629      	mov	r1, r5
   10bf2:	4620      	mov	r0, r4
   10bf4:	f7ff ff81 	bl	10afa <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x13c>
   10bf8:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   10bfc:	4621      	mov	r1, r4
   10bfe:	f7ff ff48 	bl	10a92 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
   10c02:	b108      	cbz	r0, 10c08 <mpsl_timeslot_request+0x6c>
   10c04:	2000      	movs	r0, #0
   10c06:	e7db      	b.n	10bc0 <mpsl_timeslot_request+0x24>
   10c08:	f240 21b1 	movw	r1, #689	; 0x2b1
   10c0c:	206a      	movs	r0, #106	; 0x6a
   10c0e:	f7fb fe6f 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

00010c12 <mpsl_timeslot_session_close>:
   10c12:	b510      	push	{r4, lr}
   10c14:	4604      	mov	r4, r0
   10c16:	f7f8 fab7 	bl	9188 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10c1a:	0001      	movs	r1, r0
   10c1c:	d005      	beq.n	10c2a <mpsl_timeslot_session_close+0x18>
   10c1e:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
   10c22:	f06f 0222 	mvn.w	r2, #34	; 0x22
   10c26:	b978      	cbnz	r0, 10c48 <mpsl_timeslot_session_close+0x36>
   10c28:	e002      	b.n	10c30 <mpsl_timeslot_session_close+0x1e>
   10c2a:	f06f 0001 	mvn.w	r0, #1
   10c2e:	bd10      	pop	{r4, pc}
   10c30:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
   10c34:	b140      	cbz	r0, 10c48 <mpsl_timeslot_session_close+0x36>
   10c36:	2802      	cmp	r0, #2
   10c38:	d008      	beq.n	10c4c <mpsl_timeslot_session_close+0x3a>
   10c3a:	2801      	cmp	r0, #1
   10c3c:	d006      	beq.n	10c4c <mpsl_timeslot_session_close+0x3a>
   10c3e:	2001      	movs	r0, #1
   10c40:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
   10c44:	2000      	movs	r0, #0
   10c46:	bd10      	pop	{r4, pc}
   10c48:	4610      	mov	r0, r2
   10c4a:	bd10      	pop	{r4, pc}
   10c4c:	4620      	mov	r0, r4
   10c4e:	f7ff ff73 	bl	10b38 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x17a>
   10c52:	e7f7      	b.n	10c44 <mpsl_timeslot_session_close+0x32>

00010c54 <mpsl_timeslot_session_count_set>:
   10c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c58:	460e      	mov	r6, r1
   10c5a:	4607      	mov	r7, r0
   10c5c:	f7f8 fa8e 	bl	917c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10c60:	4605      	mov	r5, r0
   10c62:	2400      	movs	r4, #0
   10c64:	e00b      	b.n	10c7e <mpsl_timeslot_session_count_set+0x2a>
   10c66:	4620      	mov	r0, r4
   10c68:	f7f8 fa8e 	bl	9188 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10c6c:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   10c70:	b118      	cbz	r0, 10c7a <mpsl_timeslot_session_count_set+0x26>
   10c72:	f04f 30ff 	mov.w	r0, #4294967295
   10c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c7a:	1c64      	adds	r4, r4, #1
   10c7c:	b2e4      	uxtb	r4, r4
   10c7e:	42ac      	cmp	r4, r5
   10c80:	d3f1      	bcc.n	10c66 <mpsl_timeslot_session_count_set+0x12>
   10c82:	2e08      	cmp	r6, #8
   10c84:	d902      	bls.n	10c8c <mpsl_timeslot_session_count_set+0x38>
   10c86:	f06f 0015 	mvn.w	r0, #21
   10c8a:	e7f4      	b.n	10c76 <mpsl_timeslot_session_count_set+0x22>
   10c8c:	b117      	cbz	r7, 10c94 <mpsl_timeslot_session_count_set+0x40>
   10c8e:	4631      	mov	r1, r6
   10c90:	4638      	mov	r0, r7
   10c92:	e001      	b.n	10c98 <mpsl_timeslot_session_count_set+0x44>
   10c94:	2100      	movs	r1, #0
   10c96:	4608      	mov	r0, r1
   10c98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10c9c:	f7f8 ba5a 	b.w	9154 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

00010ca0 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10ca0:	f7fa bec0 	b.w	ba24 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010ca4 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10ca4:	b510      	push	{r4, lr}
   10ca6:	2000      	movs	r0, #0
   10ca8:	f7fb fa18 	bl	c0dc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   10cac:	6800      	ldr	r0, [r0, #0]
   10cae:	2800      	cmp	r0, #0
   10cb0:	bf18      	it	ne
   10cb2:	2001      	movne	r0, #1
   10cb4:	bd10      	pop	{r4, pc}

00010cb6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
   10cb6:	f7fb b9eb 	b.w	c090 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

00010cba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10cba:	0a41      	lsrs	r1, r0, #9
   10cbc:	f643 5209 	movw	r2, #15625	; 0x3d09
   10cc0:	4351      	muls	r1, r2
   10cc2:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10cc6:	fb10 f002 	smulbb	r0, r0, r2
   10cca:	f500 7080 	add.w	r0, r0, #256	; 0x100
   10cce:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   10cd2:	4770      	bx	lr
   10cd4:	2800      	cmp	r0, #0
   10cd6:	db09      	blt.n	10cec <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   10cd8:	f000 021f 	and.w	r2, r0, #31
   10cdc:	2101      	movs	r1, #1
   10cde:	4091      	lsls	r1, r2
   10ce0:	0940      	lsrs	r0, r0, #5
   10ce2:	0080      	lsls	r0, r0, #2
   10ce4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10ce8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10cec:	4770      	bx	lr
   10cee:	2800      	cmp	r0, #0
   10cf0:	db0d      	blt.n	10d0e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   10cf2:	f000 021f 	and.w	r2, r0, #31
   10cf6:	2101      	movs	r1, #1
   10cf8:	4091      	lsls	r1, r2
   10cfa:	0940      	lsrs	r0, r0, #5
   10cfc:	0080      	lsls	r0, r0, #2
   10cfe:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10d02:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10d06:	f3bf 8f4f 	dsb	sy
   10d0a:	f3bf 8f6f 	isb	sy
   10d0e:	4770      	bx	lr
   10d10:	5840      	ldr	r0, [r0, r1]
   10d12:	2800      	cmp	r0, #0
   10d14:	d000      	beq.n	10d18 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   10d16:	2001      	movs	r0, #1
   10d18:	4770      	bx	lr
   10d1a:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   10d1e:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   10d22:	f002 0201 	and.w	r2, r2, #1
   10d26:	03c0      	lsls	r0, r0, #15
   10d28:	d503      	bpl.n	10d32 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10d2a:	428a      	cmp	r2, r1
   10d2c:	d101      	bne.n	10d32 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10d2e:	2001      	movs	r0, #1
   10d30:	4770      	bx	lr
   10d32:	2000      	movs	r0, #0
   10d34:	4770      	bx	lr

00010d36 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   10d36:	b510      	push	{r4, lr}
   10d38:	2101      	movs	r1, #1
   10d3a:	0788      	lsls	r0, r1, #30
   10d3c:	f7fb fd82 	bl	c844 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10d40:	2800      	cmp	r0, #0
   10d42:	d000      	beq.n	10d46 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10d44:	2001      	movs	r0, #1
   10d46:	bd10      	pop	{r4, pc}

00010d48 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10d48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10d4c:	2101      	movs	r1, #1
   10d4e:	6001      	str	r1, [r0, #0]
   10d50:	4770      	bx	lr

00010d52 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10d52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   10d56:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   10d5a:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   10d5e:	f002 0203 	and.w	r2, r2, #3
   10d62:	03c9      	lsls	r1, r1, #15
   10d64:	d503      	bpl.n	10d6e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10d66:	4282      	cmp	r2, r0
   10d68:	d101      	bne.n	10d6e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10d6a:	2001      	movs	r0, #1
   10d6c:	4770      	bx	lr
   10d6e:	2000      	movs	r0, #0
   10d70:	4770      	bx	lr

00010d72 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10d72:	b510      	push	{r4, lr}
   10d74:	2100      	movs	r1, #0
   10d76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10d7a:	f7fb fd63 	bl	c844 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10d7e:	2800      	cmp	r0, #0
   10d80:	d000      	beq.n	10d84 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10d82:	2001      	movs	r0, #1
   10d84:	bd10      	pop	{r4, pc}
   10d86:	2800      	cmp	r0, #0
   10d88:	db09      	blt.n	10d9e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10d8a:	f000 021f 	and.w	r2, r0, #31
   10d8e:	2101      	movs	r1, #1
   10d90:	4091      	lsls	r1, r2
   10d92:	0940      	lsrs	r0, r0, #5
   10d94:	0080      	lsls	r0, r0, #2
   10d96:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10d9a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10d9e:	4770      	bx	lr
   10da0:	2800      	cmp	r0, #0
   10da2:	db0d      	blt.n	10dc0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10da4:	f000 021f 	and.w	r2, r0, #31
   10da8:	2101      	movs	r1, #1
   10daa:	4091      	lsls	r1, r2
   10dac:	0940      	lsrs	r0, r0, #5
   10dae:	0080      	lsls	r0, r0, #2
   10db0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10db4:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10db8:	f3bf 8f4f 	dsb	sy
   10dbc:	f3bf 8f6f 	isb	sy
   10dc0:	4770      	bx	lr
   10dc2:	1000      	.short	0x1000
   10dc4:	00fa0002 	.word	0x00fa0002
   10dc8:	69750000 	.word	0x69750000
   10dcc:	47394db9 	.word	0x47394db9
   10dd0:	a7c8622b 	.word	0xa7c8622b
   10dd4:	fd9d6f42 	.word	0xfd9d6f42
   10dd8:	03ea5aa7 	.word	0x03ea5aa7
   10ddc:	32a8      	.short	0x32a8
   10dde:	2800      	cmp	r0, #0
   10de0:	db09      	blt.n	10df6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10de2:	f000 021f 	and.w	r2, r0, #31
   10de6:	2101      	movs	r1, #1
   10de8:	4091      	lsls	r1, r2
   10dea:	0940      	lsrs	r0, r0, #5
   10dec:	0080      	lsls	r0, r0, #2
   10dee:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10df2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10df6:	4770      	bx	lr

00010df8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10df8:	f3ef 8110 	mrs	r1, PRIMASK
   10dfc:	b672      	cpsid	i
   10dfe:	7802      	ldrb	r2, [r0, #0]
   10e00:	2a01      	cmp	r2, #1
   10e02:	d001      	beq.n	10e08 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10e04:	2201      	movs	r2, #1
   10e06:	e000      	b.n	10e0a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10e08:	2200      	movs	r2, #0
   10e0a:	2301      	movs	r3, #1
   10e0c:	7003      	strb	r3, [r0, #0]
   10e0e:	b901      	cbnz	r1, 10e12 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   10e10:	b662      	cpsie	i
   10e12:	b10a      	cbz	r2, 10e18 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10e14:	2000      	movs	r0, #0
   10e16:	4770      	bx	lr
   10e18:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10e1c:	4770      	bx	lr

00010e1e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   10e1e:	2100      	movs	r1, #0
   10e20:	7001      	strb	r1, [r0, #0]
   10e22:	4608      	mov	r0, r1
   10e24:	4770      	bx	lr

00010e26 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   10e26:	f3ef 8110 	mrs	r1, PRIMASK
   10e2a:	b672      	cpsid	i
   10e2c:	2200      	movs	r2, #0
   10e2e:	7002      	strb	r2, [r0, #0]
   10e30:	b901      	cbnz	r1, 10e34 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10e32:	b662      	cpsie	i
   10e34:	2000      	movs	r0, #0
   10e36:	4770      	bx	lr

00010e38 <mpsl_low_priority_process>:
   10e38:	f7fb be58 	b.w	caec <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010e3c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10e3c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e40:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10e44:	280f      	cmp	r0, #15
   10e46:	d001      	beq.n	10e4c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10e48:	2000      	movs	r0, #0
   10e4a:	4770      	bx	lr
   10e4c:	2001      	movs	r0, #1
   10e4e:	4770      	bx	lr

00010e50 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   10e50:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e54:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10e58:	280a      	cmp	r0, #10
   10e5a:	d001      	beq.n	10e60 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   10e5c:	2000      	movs	r0, #0
   10e5e:	4770      	bx	lr
   10e60:	2001      	movs	r0, #1
   10e62:	4770      	bx	lr

00010e64 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10e64:	b500      	push	{lr}
   10e66:	f7ff fff3 	bl	10e50 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10e6a:	b120      	cbz	r0, 10e76 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   10e6c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e70:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10e74:	b108      	cbz	r0, 10e7a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10e76:	2000      	movs	r0, #0
   10e78:	bd00      	pop	{pc}
   10e7a:	2001      	movs	r0, #1
   10e7c:	bd00      	pop	{pc}

00010e7e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   10e7e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e82:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10e86:	280e      	cmp	r0, #14
   10e88:	d001      	beq.n	10e8e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10e8a:	2000      	movs	r0, #0
   10e8c:	4770      	bx	lr
   10e8e:	2001      	movs	r0, #1
   10e90:	4770      	bx	lr

00010e92 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10e92:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e96:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10e9a:	2810      	cmp	r0, #16
   10e9c:	d001      	beq.n	10ea2 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   10e9e:	2000      	movs	r0, #0
   10ea0:	4770      	bx	lr
   10ea2:	2001      	movs	r0, #1
   10ea4:	4770      	bx	lr

00010ea6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10ea6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10eaa:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10eae:	2806      	cmp	r0, #6
   10eb0:	d003      	beq.n	10eba <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10eb2:	1c40      	adds	r0, r0, #1
   10eb4:	d001      	beq.n	10eba <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10eb6:	2000      	movs	r0, #0
   10eb8:	4770      	bx	lr
   10eba:	2001      	movs	r0, #1
   10ebc:	4770      	bx	lr

00010ebe <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   10ebe:	b500      	push	{lr}
   10ec0:	f7ff fff1 	bl	10ea6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10ec4:	b148      	cbz	r0, 10eda <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10ec6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10eca:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10ece:	2806      	cmp	r0, #6
   10ed0:	d303      	bcc.n	10eda <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10ed2:	1c40      	adds	r0, r0, #1
   10ed4:	d001      	beq.n	10eda <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10ed6:	2001      	movs	r0, #1
   10ed8:	bd00      	pop	{pc}
   10eda:	2000      	movs	r0, #0
   10edc:	bd00      	pop	{pc}

00010ede <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   10ede:	b500      	push	{lr}
   10ee0:	f7ff ffe1 	bl	10ea6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10ee4:	b138      	cbz	r0, 10ef6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10ee6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10eea:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10eee:	2806      	cmp	r0, #6
   10ef0:	d303      	bcc.n	10efa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10ef2:	1c40      	adds	r0, r0, #1
   10ef4:	d001      	beq.n	10efa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10ef6:	2000      	movs	r0, #0
   10ef8:	bd00      	pop	{pc}
   10efa:	2001      	movs	r0, #1
   10efc:	bd00      	pop	{pc}

00010efe <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   10efe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10f02:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10f06:	280d      	cmp	r0, #13
   10f08:	d001      	beq.n	10f0e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10f0a:	2000      	movs	r0, #0
   10f0c:	4770      	bx	lr
   10f0e:	2001      	movs	r0, #1
   10f10:	4770      	bx	lr

00010f12 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   10f12:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10f16:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10f1a:	2808      	cmp	r0, #8
   10f1c:	d001      	beq.n	10f22 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   10f1e:	2000      	movs	r0, #0
   10f20:	4770      	bx	lr
   10f22:	2001      	movs	r0, #1
   10f24:	4770      	bx	lr

00010f26 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   10f26:	f7fb be1b 	b.w	cb60 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010f2a <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   10f2a:	f7fb be19 	b.w	cb60 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010f2e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   10f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f32:	428a      	cmp	r2, r1
   10f34:	d803      	bhi.n	10f3e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   10f36:	2179      	movs	r1, #121	; 0x79
   10f38:	2096      	movs	r0, #150	; 0x96
   10f3a:	f7fb fcd9 	bl	c8f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10f3e:	fab2 f382 	clz	r3, r2
   10f42:	b143      	cbz	r3, 10f56 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
   10f44:	4099      	lsls	r1, r3
   10f46:	f1c3 0c20 	rsb	ip, r3, #32
   10f4a:	fa20 fc0c 	lsr.w	ip, r0, ip
   10f4e:	4098      	lsls	r0, r3
   10f50:	ea41 010c 	orr.w	r1, r1, ip
   10f54:	409a      	lsls	r2, r3
   10f56:	0c13      	lsrs	r3, r2, #16
   10f58:	fbb1 f5f3 	udiv	r5, r1, r3
   10f5c:	ea4f 4c10 	mov.w	ip, r0, lsr #16
   10f60:	b287      	uxth	r7, r0
   10f62:	fbb1 f0f3 	udiv	r0, r1, r3
   10f66:	fb03 1615 	mls	r6, r3, r5, r1
   10f6a:	b294      	uxth	r4, r2
   10f6c:	fb00 f504 	mul.w	r5, r0, r4
   10f70:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
   10f74:	42b5      	cmp	r5, r6
   10f76:	d905      	bls.n	10f84 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10f78:	1bad      	subs	r5, r5, r6
   10f7a:	4295      	cmp	r5, r2
   10f7c:	bf94      	ite	ls
   10f7e:	2501      	movls	r5, #1
   10f80:	2502      	movhi	r5, #2
   10f82:	1b40      	subs	r0, r0, r5
   10f84:	0409      	lsls	r1, r1, #16
   10f86:	0405      	lsls	r5, r0, #16
   10f88:	eb11 010c 	adds.w	r1, r1, ip
   10f8c:	fba0 0c02 	umull	r0, ip, r0, r2
   10f90:	1a09      	subs	r1, r1, r0
   10f92:	fbb1 f0f3 	udiv	r0, r1, r3
   10f96:	fbb1 fcf3 	udiv	ip, r1, r3
   10f9a:	fb03 131c 	mls	r3, r3, ip, r1
   10f9e:	fb00 f104 	mul.w	r1, r0, r4
   10fa2:	eb07 4303 	add.w	r3, r7, r3, lsl #16
   10fa6:	4299      	cmp	r1, r3
   10fa8:	d905      	bls.n	10fb6 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10faa:	1ac9      	subs	r1, r1, r3
   10fac:	4291      	cmp	r1, r2
   10fae:	bf94      	ite	ls
   10fb0:	2101      	movls	r1, #1
   10fb2:	2102      	movhi	r1, #2
   10fb4:	1a40      	subs	r0, r0, r1
   10fb6:	4328      	orrs	r0, r5
   10fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010fbc <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
   10fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10fc0:	461e      	mov	r6, r3
   10fc2:	4615      	mov	r5, r2
   10fc4:	4604      	mov	r4, r0
   10fc6:	9f06      	ldr	r7, [sp, #24]
   10fc8:	f7ff ffb1 	bl	10f2e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
   10fcc:	6030      	str	r0, [r6, #0]
   10fce:	fba0 0105 	umull	r0, r1, r0, r5
   10fd2:	1a20      	subs	r0, r4, r0
   10fd4:	6038      	str	r0, [r7, #0]
   10fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010fda <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
   10fda:	2a00      	cmp	r2, #0
   10fdc:	bf04      	itt	eq
   10fde:	2000      	moveq	r0, #0
   10fe0:	4770      	bxeq	lr
   10fe2:	1e52      	subs	r2, r2, #1
   10fe4:	d007      	beq.n	10ff6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
   10fe6:	7803      	ldrb	r3, [r0, #0]
   10fe8:	f891 c000 	ldrb.w	ip, [r1]
   10fec:	4563      	cmp	r3, ip
   10fee:	bf04      	itt	eq
   10ff0:	1c40      	addeq	r0, r0, #1
   10ff2:	1c49      	addeq	r1, r1, #1
   10ff4:	d0f5      	beq.n	10fe2 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
   10ff6:	7800      	ldrb	r0, [r0, #0]
   10ff8:	7809      	ldrb	r1, [r1, #0]
   10ffa:	1a40      	subs	r0, r0, r1
   10ffc:	4770      	bx	lr

00010ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   10ffe:	b4f0      	push	{r4, r5, r6, r7}
   11000:	ea80 0c01 	eor.w	ip, r0, r1
   11004:	4603      	mov	r3, r0
   11006:	f01c 0f03 	tst.w	ip, #3
   1100a:	d13c      	bne.n	11086 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1100c:	f013 0f03 	tst.w	r3, #3
   11010:	d00b      	beq.n	1102a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   11012:	2a00      	cmp	r2, #0
   11014:	bf04      	itt	eq
   11016:	bcf0      	popeq	{r4, r5, r6, r7}
   11018:	4770      	bxeq	lr
   1101a:	f811 cb01 	ldrb.w	ip, [r1], #1
   1101e:	f803 cb01 	strb.w	ip, [r3], #1
   11022:	1e52      	subs	r2, r2, #1
   11024:	f013 0f03 	tst.w	r3, #3
   11028:	d1f3      	bne.n	11012 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   1102a:	2a03      	cmp	r2, #3
   1102c:	d94f      	bls.n	110ce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   1102e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   11032:	d24c      	bcs.n	110ce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   11034:	f1c2 0c00 	rsb	ip, r2, #0
   11038:	ea4f 74ec 	mov.w	r4, ip, asr #31
   1103c:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   11040:	ea4f 0cac 	mov.w	ip, ip, asr #2
   11044:	f1cc 0c00 	rsb	ip, ip, #0
   11048:	f1bc 0f00 	cmp.w	ip, #0
   1104c:	dd1b      	ble.n	11086 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1104e:	1f0d      	subs	r5, r1, #4
   11050:	1f1c      	subs	r4, r3, #4
   11052:	f01c 0f01 	tst.w	ip, #1
   11056:	d003      	beq.n	11060 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   11058:	f855 6f04 	ldr.w	r6, [r5, #4]!
   1105c:	f844 6f04 	str.w	r6, [r4, #4]!
   11060:	ea5f 066c 	movs.w	r6, ip, asr #1
   11064:	d007      	beq.n	11076 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   11066:	686f      	ldr	r7, [r5, #4]
   11068:	6067      	str	r7, [r4, #4]
   1106a:	f855 7f08 	ldr.w	r7, [r5, #8]!
   1106e:	f844 7f08 	str.w	r7, [r4, #8]!
   11072:	1e76      	subs	r6, r6, #1
   11074:	d1f7      	bne.n	11066 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   11076:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   1107a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   1107e:	f1cc 0c00 	rsb	ip, ip, #0
   11082:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   11086:	2a00      	cmp	r2, #0
   11088:	bf04      	itt	eq
   1108a:	bcf0      	popeq	{r4, r5, r6, r7}
   1108c:	4770      	bxeq	lr
   1108e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   11092:	d226      	bcs.n	110e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   11094:	2a00      	cmp	r2, #0
   11096:	bfdc      	itt	le
   11098:	bcf0      	pople	{r4, r5, r6, r7}
   1109a:	4770      	bxle	lr
   1109c:	1e49      	subs	r1, r1, #1
   1109e:	1e5b      	subs	r3, r3, #1
   110a0:	f012 0f01 	tst.w	r2, #1
   110a4:	d003      	beq.n	110ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   110a6:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   110aa:	f803 cf01 	strb.w	ip, [r3, #1]!
   110ae:	1052      	asrs	r2, r2, #1
   110b0:	bf04      	itt	eq
   110b2:	bcf0      	popeq	{r4, r5, r6, r7}
   110b4:	4770      	bxeq	lr
   110b6:	f891 c001 	ldrb.w	ip, [r1, #1]
   110ba:	f883 c001 	strb.w	ip, [r3, #1]
   110be:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   110c2:	f803 cf02 	strb.w	ip, [r3, #2]!
   110c6:	1e52      	subs	r2, r2, #1
   110c8:	d1f5      	bne.n	110b6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   110ca:	bcf0      	pop	{r4, r5, r6, r7}
   110cc:	4770      	bx	lr
   110ce:	2a04      	cmp	r2, #4
   110d0:	d3d9      	bcc.n	11086 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   110d2:	f851 cb04 	ldr.w	ip, [r1], #4
   110d6:	1f12      	subs	r2, r2, #4
   110d8:	f843 cb04 	str.w	ip, [r3], #4
   110dc:	2a04      	cmp	r2, #4
   110de:	d2f8      	bcs.n	110d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   110e0:	e7d1      	b.n	11086 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   110e2:	f811 cb01 	ldrb.w	ip, [r1], #1
   110e6:	f803 cb01 	strb.w	ip, [r3], #1
   110ea:	1e52      	subs	r2, r2, #1
   110ec:	d1f9      	bne.n	110e2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   110ee:	bcf0      	pop	{r4, r5, r6, r7}
   110f0:	4770      	bx	lr

000110f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   110f2:	b470      	push	{r4, r5, r6}
   110f4:	4603      	mov	r3, r0
   110f6:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   110fa:	f010 0f03 	tst.w	r0, #3
   110fe:	d009      	beq.n	11114 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   11100:	2a00      	cmp	r2, #0
   11102:	bf04      	itt	eq
   11104:	bc70      	popeq	{r4, r5, r6}
   11106:	4770      	bxeq	lr
   11108:	f803 cb01 	strb.w	ip, [r3], #1
   1110c:	1e52      	subs	r2, r2, #1
   1110e:	f013 0f03 	tst.w	r3, #3
   11112:	d1f5      	bne.n	11100 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   11114:	b2c9      	uxtb	r1, r1
   11116:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1111a:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   1111e:	2a03      	cmp	r2, #3
   11120:	d939      	bls.n	11196 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   11122:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   11126:	d236      	bcs.n	11196 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   11128:	4251      	negs	r1, r2
   1112a:	17cc      	asrs	r4, r1, #31
   1112c:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   11130:	1089      	asrs	r1, r1, #2
   11132:	424e      	negs	r6, r1
   11134:	2e00      	cmp	r6, #0
   11136:	dd11      	ble.n	1115c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   11138:	1f19      	subs	r1, r3, #4
   1113a:	f016 0f01 	tst.w	r6, #1
   1113e:	bf18      	it	ne
   11140:	f841 5f04 	strne.w	r5, [r1, #4]!
   11144:	1074      	asrs	r4, r6, #1
   11146:	d004      	beq.n	11152 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   11148:	604d      	str	r5, [r1, #4]
   1114a:	f841 5f08 	str.w	r5, [r1, #8]!
   1114e:	1e64      	subs	r4, r4, #1
   11150:	d1fa      	bne.n	11148 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   11152:	4271      	negs	r1, r6
   11154:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   11158:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   1115c:	2a00      	cmp	r2, #0
   1115e:	bf04      	itt	eq
   11160:	bc70      	popeq	{r4, r5, r6}
   11162:	4770      	bxeq	lr
   11164:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   11168:	d21d      	bcs.n	111a6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   1116a:	2a00      	cmp	r2, #0
   1116c:	bfdc      	itt	le
   1116e:	bc70      	pople	{r4, r5, r6}
   11170:	4770      	bxle	lr
   11172:	1e59      	subs	r1, r3, #1
   11174:	f012 0f01 	tst.w	r2, #1
   11178:	bf18      	it	ne
   1117a:	f801 cf01 	strbne.w	ip, [r1, #1]!
   1117e:	1052      	asrs	r2, r2, #1
   11180:	bf04      	itt	eq
   11182:	bc70      	popeq	{r4, r5, r6}
   11184:	4770      	bxeq	lr
   11186:	f881 c001 	strb.w	ip, [r1, #1]
   1118a:	f801 cf02 	strb.w	ip, [r1, #2]!
   1118e:	1e52      	subs	r2, r2, #1
   11190:	d1f9      	bne.n	11186 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   11192:	bc70      	pop	{r4, r5, r6}
   11194:	4770      	bx	lr
   11196:	2a04      	cmp	r2, #4
   11198:	d3e0      	bcc.n	1115c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   1119a:	1f12      	subs	r2, r2, #4
   1119c:	f843 5b04 	str.w	r5, [r3], #4
   111a0:	2a04      	cmp	r2, #4
   111a2:	d2fa      	bcs.n	1119a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   111a4:	e7da      	b.n	1115c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   111a6:	f803 cb01 	strb.w	ip, [r3], #1
   111aa:	1e52      	subs	r2, r2, #1
   111ac:	d1fb      	bne.n	111a6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   111ae:	bc70      	pop	{r4, r5, r6}
   111b0:	4770      	bx	lr
   111b2:	f04f 30ff 	mov.w	r0, #4294967295
   111b6:	4770      	bx	lr
   111b8:	2000      	movs	r0, #0
   111ba:	4770      	bx	lr
   111bc:	2000      	movs	r0, #0
   111be:	4770      	bx	lr
   111c0:	f04f 30ff 	mov.w	r0, #4294967295
   111c4:	4770      	bx	lr
   111c6:	4770      	bx	lr
   111c8:	4770      	bx	lr
   111ca:	2000      	movs	r0, #0
   111cc:	4770      	bx	lr
   111ce:	2100      	movs	r1, #0
   111d0:	7001      	strb	r1, [r0, #0]
   111d2:	4770      	bx	lr
   111d4:	f04f 30ff 	mov.w	r0, #4294967295
   111d8:	4770      	bx	lr
   111da:	f04f 30ff 	mov.w	r0, #4294967295
   111de:	4770      	bx	lr
   111e0:	2100      	movs	r1, #0
   111e2:	7001      	strb	r1, [r0, #0]
   111e4:	4770      	bx	lr
   111e6:	f04f 30ff 	mov.w	r0, #4294967295
   111ea:	4770      	bx	lr
   111ec:	f04f 30ff 	mov.w	r0, #4294967295
   111f0:	4770      	bx	lr
   111f2:	7800      	ldrb	r0, [r0, #0]
   111f4:	2800      	cmp	r0, #0
   111f6:	d001      	beq.n	111fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   111f8:	f06f 0015 	mvn.w	r0, #21
   111fc:	4770      	bx	lr
   111fe:	2000      	movs	r0, #0
   11200:	4770      	bx	lr
   11202:	2200      	movs	r2, #0
   11204:	f000 b802 	b.w	1120c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00011208 <mpsl_fem_init>:
   11208:	f7f7 bd8c 	b.w	8d24 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0001120c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   1120c:	b570      	push	{r4, r5, r6, lr}
   1120e:	4614      	mov	r4, r2
   11210:	460d      	mov	r5, r1
   11212:	1b00      	subs	r0, r0, r4
   11214:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   11218:	4288      	cmp	r0, r1
   1121a:	da01      	bge.n	11220 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   1121c:	4608      	mov	r0, r1
   1121e:	e002      	b.n	11226 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   11220:	287f      	cmp	r0, #127	; 0x7f
   11222:	dd00      	ble.n	11226 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   11224:	207f      	movs	r0, #127	; 0x7f
   11226:	4619      	mov	r1, r3
   11228:	b240      	sxtb	r0, r0
   1122a:	f7f7 fdaf 	bl	8d8c <mpsl_tx_power_radio_supported_power_adjust>
   1122e:	7028      	strb	r0, [r5, #0]
   11230:	706c      	strb	r4, [r5, #1]
   11232:	2100      	movs	r1, #0
   11234:	4420      	add	r0, r4
   11236:	70a9      	strb	r1, [r5, #2]
   11238:	b240      	sxtb	r0, r0
   1123a:	bd70      	pop	{r4, r5, r6, pc}
   1123c:	1702080c 	.word	0x1702080c
   11240:	0201010d 	.word	0x0201010d
   11244:	01010909 	.word	0x01010909
   11248:	18090206 	.word	0x18090206
   1124c:	01010318 	.word	0x01010318
   11250:	03030909 	.word	0x03030909
   11254:	01020305 	.word	0x01020305
   11258:	24020223 	.word	0x24020223
   1125c:	04041009 	.word	0x04041009
   11260:	0b0b0505 	.word	0x0b0b0505
   11264:	0b04      	.short	0x0b04
   11266:	2b          	.byte	0x2b
   11267:	25          	.byte	0x25
   11268:	2726      	.short	0x2726
   1126a:	0301      	.short	0x0301
   1126c:	0101      	.short	0x0101
   1126e:	01          	.byte	0x01
   1126f:	d8          	.byte	0xd8
   11270:	f8f4f0ec 	.word	0xf8f4f0ec
   11274:	030200fc 	.word	0x030200fc
   11278:	07060504 	.word	0x07060504
   1127c:	00000008 	.word	0x00000008
	...
   11290:	01010100 	.word	0x01010100
   11294:	02020201 	.word	0x02020201
   11298:	03030302 	.word	0x03030302
   1129c:	04040403 	.word	0x04040403
   112a0:	05050504 	.word	0x05050504
   112a4:	07060605 	.word	0x07060605
   112a8:	0b0a0908 	.word	0x0b0a0908
   112ac:	00000d0c 	.word	0x00000d0c
	...
   112c0:	01010000 	.word	0x01010000
   112c4:	02020101 	.word	0x02020101
   112c8:	03030202 	.word	0x03030202
   112cc:	04040303 	.word	0x04040303
   112d0:	05050404 	.word	0x05050404
   112d4:	06060505 	.word	0x06060505
   112d8:	00090806 	.word	0x00090806
   112dc:	00000000 	.word	0x00000000

000112e0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   112e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   112e4:	4d47      	ldr	r5, [pc, #284]	; (11404 <bt_init+0x124>)
{
   112e6:	b083      	sub	sp, #12
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   112e8:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   112ec:	6899      	ldr	r1, [r3, #8]
   112ee:	f011 0101 	ands.w	r1, r1, #1
{
   112f2:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   112f4:	d124      	bne.n	11340 <bt_init+0x60>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   112f6:	1d3a      	adds	r2, r7, #4
   112f8:	f640 4003 	movw	r0, #3075	; 0xc03
   112fc:	f006 fa5e 	bl	177bc <bt_hci_cmd_send_sync>
		if (err) {
   11300:	4604      	mov	r4, r0
   11302:	2800      	cmp	r0, #0
   11304:	d178      	bne.n	113f8 <bt_init+0x118>
		hci_reset_complete(rsp);
   11306:	687c      	ldr	r4, [r7, #4]
	uint8_t status = buf->data[0];
   11308:	68e3      	ldr	r3, [r4, #12]
	if (status) {
   1130a:	781b      	ldrb	r3, [r3, #0]
   1130c:	b9ab      	cbnz	r3, 1133a <bt_init+0x5a>
		bt_scan_reset();
   1130e:	f007 fcd7 	bl	18cc0 <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11312:	f3bf 8f5b 	dmb	ish
   11316:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   1131a:	f3bf 8f5b 	dmb	ish
   1131e:	f105 02d4 	add.w	r2, r5, #212	; 0xd4
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11322:	f003 0309 	and.w	r3, r3, #9
   11326:	f3bf 8f5b 	dmb	ish
   1132a:	e852 1f00 	ldrex	r1, [r2]
   1132e:	e842 3000 	strex	r0, r3, [r2]
   11332:	2800      	cmp	r0, #0
   11334:	d1f9      	bne.n	1132a <bt_init+0x4a>
   11336:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   1133a:	4620      	mov	r0, r4
   1133c:	f00f fb70 	bl	20a20 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   11340:	1d3a      	adds	r2, r7, #4
   11342:	2100      	movs	r1, #0
   11344:	f241 0003 	movw	r0, #4099	; 0x1003
   11348:	f006 fa38 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   1134c:	4604      	mov	r4, r0
   1134e:	2800      	cmp	r0, #0
   11350:	d152      	bne.n	113f8 <bt_init+0x118>
	read_local_features_complete(rsp);
   11352:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   11354:	482c      	ldr	r0, [pc, #176]	; (11408 <bt_init+0x128>)
   11356:	68f1      	ldr	r1, [r6, #12]
   11358:	2208      	movs	r2, #8
   1135a:	3101      	adds	r1, #1
   1135c:	f01a fca0 	bl	2bca0 <memcpy>
	net_buf_unref(rsp);
   11360:	4630      	mov	r0, r6
   11362:	f00f fb5d 	bl	20a20 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   11366:	4621      	mov	r1, r4
   11368:	1d3a      	adds	r2, r7, #4
   1136a:	f241 0001 	movw	r0, #4097	; 0x1001
   1136e:	f006 fa25 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   11372:	4604      	mov	r4, r0
   11374:	2800      	cmp	r0, #0
   11376:	d13f      	bne.n	113f8 <bt_init+0x118>
	read_local_ver_complete(rsp);
   11378:	6878      	ldr	r0, [r7, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   1137a:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   1137c:	785a      	ldrb	r2, [r3, #1]
   1137e:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   11382:	885a      	ldrh	r2, [r3, #2]
   11384:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
   11388:	791a      	ldrb	r2, [r3, #4]
   1138a:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   1138e:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   11392:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   11396:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   1139a:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
   1139e:	f00f fb3f 	bl	20a20 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   113a2:	4621      	mov	r1, r4
   113a4:	1d3a      	adds	r2, r7, #4
   113a6:	f241 0002 	movw	r0, #4098	; 0x1002
   113aa:	f006 fa07 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   113ae:	4604      	mov	r4, r0
   113b0:	bb10      	cbnz	r0, 113f8 <bt_init+0x118>
	read_supported_commands_complete(rsp);
   113b2:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   113b4:	4815      	ldr	r0, [pc, #84]	; (1140c <bt_init+0x12c>)
   113b6:	68f1      	ldr	r1, [r6, #12]
   113b8:	2240      	movs	r2, #64	; 0x40
   113ba:	3101      	adds	r1, #1
   113bc:	f01a fc70 	bl	2bca0 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   113c0:	4812      	ldr	r0, [pc, #72]	; (1140c <bt_init+0x12c>)
   113c2:	f01a fcf4 	bl	2bdae <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
   113c6:	4630      	mov	r0, r6
   113c8:	f00f fb2a 	bl	20a20 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   113cc:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   113d0:	065a      	lsls	r2, r3, #25
   113d2:	d423      	bmi.n	1141c <bt_init+0x13c>
		LOG_ERR("Non-LE capable controller detected!");
   113d4:	466c      	mov	r4, sp
   113d6:	b088      	sub	sp, #32
   113d8:	466a      	mov	r2, sp
   113da:	4b0d      	ldr	r3, [pc, #52]	; (11410 <bt_init+0x130>)
   113dc:	6153      	str	r3, [r2, #20]
   113de:	4b0d      	ldr	r3, [pc, #52]	; (11414 <bt_init+0x134>)
   113e0:	6193      	str	r3, [r2, #24]
   113e2:	2303      	movs	r3, #3
   113e4:	f842 3f10 	str.w	r3, [r2, #16]!
   113e8:	480b      	ldr	r0, [pc, #44]	; (11418 <bt_init+0x138>)
   113ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   113ee:	f01a fdb8 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   113f2:	46a5      	mov	sp, r4
		return -ENODEV;
   113f4:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   113f8:	4620      	mov	r0, r4
   113fa:	370c      	adds	r7, #12
   113fc:	46bd      	mov	sp, r7
   113fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11402:	bf00      	nop
   11404:	20000388 	.word	0x20000388
   11408:	20000400 	.word	0x20000400
   1140c:	20000408 	.word	0x20000408
   11410:	0003260a 	.word	0x0003260a
   11414:	00032b0e 	.word	0x00032b0e
   11418:	0002fc14 	.word	0x0002fc14
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   1141c:	4621      	mov	r1, r4
   1141e:	1d3a      	adds	r2, r7, #4
   11420:	f242 0003 	movw	r0, #8195	; 0x2003
   11424:	f006 f9ca 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   11428:	4604      	mov	r4, r0
   1142a:	2800      	cmp	r0, #0
   1142c:	d1e4      	bne.n	113f8 <bt_init+0x118>
	read_le_features_complete(rsp);
   1142e:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   11430:	48ad      	ldr	r0, [pc, #692]	; (116e8 <bt_init+0x408>)
   11432:	68f1      	ldr	r1, [r6, #12]
   11434:	2208      	movs	r2, #8
   11436:	3101      	adds	r1, #1
   11438:	f01a fc32 	bl	2bca0 <memcpy>
	net_buf_unref(rsp);
   1143c:	4630      	mov	r0, r6
   1143e:	f00f faef 	bl	20a20 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   11442:	4621      	mov	r1, r4
   11444:	1d3a      	adds	r2, r7, #4
   11446:	f242 0002 	movw	r0, #8194	; 0x2002
   1144a:	f006 f9b7 	bl	177bc <bt_hci_cmd_send_sync>
		if (err) {
   1144e:	4604      	mov	r4, r0
   11450:	2800      	cmp	r0, #0
   11452:	d1d1      	bne.n	113f8 <bt_init+0x118>
		le_read_buffer_size_complete(rsp);
   11454:	687c      	ldr	r4, [r7, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   11456:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   11458:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1145c:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
   1145e:	b141      	cbz	r1, 11472 <bt_init+0x192>
   11460:	78d9      	ldrb	r1, [r3, #3]
   11462:	b131      	cbz	r1, 11472 <bt_init+0x192>
	bt_dev.le.acl_mtu = acl_mtu;
   11464:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   11468:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   1146a:	48a0      	ldr	r0, [pc, #640]	; (116ec <bt_init+0x40c>)
   1146c:	4611      	mov	r1, r2
   1146e:	f01d fdb0 	bl	2efd2 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   11472:	4620      	mov	r0, r4
   11474:	f00f fad4 	bl	20a20 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11478:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
   1147c:	f016 0620 	ands.w	r6, r6, #32
   11480:	d118      	bne.n	114b4 <bt_init+0x1d4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   11482:	2102      	movs	r1, #2
   11484:	f640 406d 	movw	r0, #3181	; 0xc6d
   11488:	f006 f83c 	bl	17504 <bt_hci_cmd_create>
		if (!buf) {
   1148c:	4604      	mov	r4, r0
   1148e:	2800      	cmp	r0, #0
   11490:	f000 80ca 	beq.w	11628 <bt_init+0x348>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   11494:	2102      	movs	r1, #2
   11496:	300c      	adds	r0, #12
   11498:	f01c ffcb 	bl	2e432 <net_buf_simple_add>
		cp_le->le = 0x01;
   1149c:	2301      	movs	r3, #1
   1149e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   114a0:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   114a2:	4621      	mov	r1, r4
   114a4:	4632      	mov	r2, r6
   114a6:	f640 406d 	movw	r0, #3181	; 0xc6d
   114aa:	f006 f987 	bl	177bc <bt_hci_cmd_send_sync>
		if (err) {
   114ae:	4604      	mov	r4, r0
   114b0:	2800      	cmp	r0, #0
   114b2:	d1a1      	bne.n	113f8 <bt_init+0x118>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   114b4:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
   114b8:	071b      	lsls	r3, r3, #28
   114ba:	d512      	bpl.n	114e2 <bt_init+0x202>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   114bc:	1d3a      	adds	r2, r7, #4
   114be:	2100      	movs	r1, #0
   114c0:	f242 001c 	movw	r0, #8220	; 0x201c
   114c4:	f006 f97a 	bl	177bc <bt_hci_cmd_send_sync>
		if (err) {
   114c8:	4604      	mov	r4, r0
   114ca:	2800      	cmp	r0, #0
   114cc:	d194      	bne.n	113f8 <bt_init+0x118>
		le_read_supp_states_complete(rsp);
   114ce:	6878      	ldr	r0, [r7, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   114d0:	68c3      	ldr	r3, [r0, #12]
   114d2:	f8d3 2001 	ldr.w	r2, [r3, #1]
   114d6:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   114da:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
   114de:	f00f fa9f 	bl	20a20 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   114e2:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   114e6:	069e      	lsls	r6, r3, #26
   114e8:	d522      	bpl.n	11530 <bt_init+0x250>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   114ea:	1cb9      	adds	r1, r7, #2
   114ec:	4638      	mov	r0, r7
   114ee:	f006 f9e9 	bl	178c4 <hci_le_read_max_data_len>
		if (err) {
   114f2:	4604      	mov	r4, r0
   114f4:	2800      	cmp	r0, #0
   114f6:	f47f af7f 	bne.w	113f8 <bt_init+0x118>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   114fa:	2104      	movs	r1, #4
   114fc:	f242 0024 	movw	r0, #8228	; 0x2024
   11500:	f006 f800 	bl	17504 <bt_hci_cmd_create>
		if (!buf) {
   11504:	4606      	mov	r6, r0
   11506:	2800      	cmp	r0, #0
   11508:	f000 808e 	beq.w	11628 <bt_init+0x348>
   1150c:	2104      	movs	r1, #4
   1150e:	300c      	adds	r0, #12
   11510:	f01c ff8f 	bl	2e432 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   11514:	883b      	ldrh	r3, [r7, #0]
   11516:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   11518:	887b      	ldrh	r3, [r7, #2]
   1151a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1151c:	4622      	mov	r2, r4
   1151e:	4631      	mov	r1, r6
   11520:	f242 0024 	movw	r0, #8228	; 0x2024
   11524:	f006 f94a 	bl	177bc <bt_hci_cmd_send_sync>
		if (err) {
   11528:	4604      	mov	r4, r0
   1152a:	2800      	cmp	r0, #0
   1152c:	f47f af64 	bne.w	113f8 <bt_init+0x118>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   11530:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   11534:	065c      	lsls	r4, r3, #25
   11536:	d510      	bpl.n	1155a <bt_init+0x27a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   11538:	1d3a      	adds	r2, r7, #4
   1153a:	2100      	movs	r1, #0
   1153c:	f242 002a 	movw	r0, #8234	; 0x202a
   11540:	f006 f93c 	bl	177bc <bt_hci_cmd_send_sync>
		if (err) {
   11544:	4604      	mov	r4, r0
   11546:	2800      	cmp	r0, #0
   11548:	f47f af56 	bne.w	113f8 <bt_init+0x118>
		le_read_resolving_list_size_complete(rsp);
   1154c:	6878      	ldr	r0, [r7, #4]
	bt_dev.le.rl_size = rp->rl_size;
   1154e:	68c3      	ldr	r3, [r0, #12]
   11550:	785b      	ldrb	r3, [r3, #1]
   11552:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
		net_buf_unref(rsp);
   11556:	f00f fa63 	bl	20a20 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1155a:	2108      	movs	r1, #8
   1155c:	f242 0001 	movw	r0, #8193	; 0x2001
   11560:	f005 ffd0 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   11564:	4604      	mov	r4, r0
   11566:	2800      	cmp	r0, #0
   11568:	d05e      	beq.n	11628 <bt_init+0x348>
   1156a:	2108      	movs	r1, #8
   1156c:	300c      	adds	r0, #12
   1156e:	f01c ff60 	bl	2e432 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   11572:	f895 10d8 	ldrb.w	r1, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   11576:	f011 0f40 	tst.w	r1, #64	; 0x40
   1157a:	4602      	mov	r2, r0
   1157c:	f240 2302 	movw	r3, #514	; 0x202
   11580:	bf08      	it	eq
   11582:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   11584:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   11586:	bf4c      	ite	mi
   11588:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   1158c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   11590:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   11592:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   11596:	bf48      	it	mi
   11598:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1159c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   115a0:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   115a4:	bf18      	it	ne
   115a6:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   115aa:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   115ae:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   115b0:	bf48      	it	mi
   115b2:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   115b6:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   115b8:	bf08      	it	eq
   115ba:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   115be:	2100      	movs	r1, #0
   115c0:	f01a fcde 	bl	2bf80 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   115c4:	4621      	mov	r1, r4
   115c6:	2200      	movs	r2, #0
   115c8:	f242 0001 	movw	r0, #8193	; 0x2001
   115cc:	f006 f8f6 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   115d0:	4604      	mov	r4, r0
   115d2:	2800      	cmp	r0, #0
   115d4:	f47f af10 	bne.w	113f8 <bt_init+0x118>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   115d8:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
   115dc:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
   115e0:	0698      	lsls	r0, r3, #26
   115e2:	d424      	bmi.n	1162e <bt_init+0x34e>
	if (bt_dev.le.acl_mtu) {
   115e4:	b9c9      	cbnz	r1, 1161a <bt_init+0x33a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   115e6:	1d3a      	adds	r2, r7, #4
   115e8:	f241 0005 	movw	r0, #4101	; 0x1005
   115ec:	f006 f8e6 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   115f0:	4604      	mov	r4, r0
   115f2:	2800      	cmp	r0, #0
   115f4:	f47f af00 	bne.w	113f8 <bt_init+0x118>
	if (bt_dev.le.acl_mtu) {
   115f8:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
   115fc:	687c      	ldr	r4, [r7, #4]
	if (bt_dev.le.acl_mtu) {
   115fe:	b94b      	cbnz	r3, 11614 <bt_init+0x334>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   11600:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   11602:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   11606:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   1160a:	889a      	ldrh	r2, [r3, #4]
   1160c:	4837      	ldr	r0, [pc, #220]	; (116ec <bt_init+0x40c>)
   1160e:	4611      	mov	r1, r2
   11610:	f01d fcdf 	bl	2efd2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   11614:	4620      	mov	r0, r4
   11616:	f00f fa03 	bl	20a20 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1161a:	2108      	movs	r1, #8
   1161c:	f640 4001 	movw	r0, #3073	; 0xc01
   11620:	f005 ff70 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   11624:	4604      	mov	r4, r0
   11626:	b9b8      	cbnz	r0, 11658 <bt_init+0x378>
		return -ENOBUFS;
   11628:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1162c:	e6e4      	b.n	113f8 <bt_init+0x118>
	else if (!bt_dev.le.acl_mtu) {
   1162e:	2900      	cmp	r1, #0
   11630:	d1f3      	bne.n	1161a <bt_init+0x33a>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   11632:	466c      	mov	r4, sp
   11634:	b088      	sub	sp, #32
   11636:	466a      	mov	r2, sp
   11638:	4b2d      	ldr	r3, [pc, #180]	; (116f0 <bt_init+0x410>)
   1163a:	6153      	str	r3, [r2, #20]
   1163c:	4b2d      	ldr	r3, [pc, #180]	; (116f4 <bt_init+0x414>)
   1163e:	6193      	str	r3, [r2, #24]
   11640:	2303      	movs	r3, #3
   11642:	f842 3f10 	str.w	r3, [r2, #16]!
   11646:	482c      	ldr	r0, [pc, #176]	; (116f8 <bt_init+0x418>)
   11648:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1164c:	f01a fc89 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   11650:	46a5      	mov	sp, r4
		return -EIO;
   11652:	f06f 0404 	mvn.w	r4, #4
   11656:	e6cf      	b.n	113f8 <bt_init+0x118>
   11658:	2108      	movs	r1, #8
   1165a:	300c      	adds	r0, #12
   1165c:	f01c fee9 	bl	2e432 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   11660:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   11664:	07d9      	lsls	r1, r3, #31
   11666:	4602      	mov	r2, r0
   11668:	d436      	bmi.n	116d8 <bt_init+0x3f8>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   1166a:	4824      	ldr	r0, [pc, #144]	; (116fc <bt_init+0x41c>)
   1166c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	sys_put_le64(mask, ev->events);
   11670:	f01a fc86 	bl	2bf80 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   11674:	4621      	mov	r1, r4
   11676:	2200      	movs	r2, #0
   11678:	f640 4001 	movw	r0, #3073	; 0xc01
   1167c:	f006 f89e 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   11680:	4604      	mov	r4, r0
   11682:	2800      	cmp	r0, #0
   11684:	f47f aeb8 	bne.w	113f8 <bt_init+0x118>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   11688:	4601      	mov	r1, r0
   1168a:	1d3a      	adds	r2, r7, #4
   1168c:	f64f 4001 	movw	r0, #64513	; 0xfc01
   11690:	f006 f894 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   11694:	4c1a      	ldr	r4, [pc, #104]	; (11700 <bt_init+0x420>)
   11696:	2800      	cmp	r0, #0
   11698:	d036      	beq.n	11708 <bt_init+0x428>
		LOG_WRN("Vendor HCI extensions not available");
   1169a:	466d      	mov	r5, sp
   1169c:	b088      	sub	sp, #32
   1169e:	466a      	mov	r2, sp
   116a0:	4b18      	ldr	r3, [pc, #96]	; (11704 <bt_init+0x424>)
   116a2:	4815      	ldr	r0, [pc, #84]	; (116f8 <bt_init+0x418>)
   116a4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   116a8:	2303      	movs	r3, #3
   116aa:	f842 3f10 	str.w	r3, [r2, #16]!
   116ae:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   116b2:	f01a fc56 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   116b6:	46ad      	mov	sp, r5
	err = bt_id_init();
   116b8:	f01a fde0 	bl	2c27c <bt_id_init>
	if (err) {
   116bc:	4604      	mov	r4, r0
   116be:	2800      	cmp	r0, #0
   116c0:	f47f ae9a 	bne.w	113f8 <bt_init+0x118>
		err = bt_conn_init();
   116c4:	f008 fe60 	bl	1a388 <bt_conn_init>
		if (err) {
   116c8:	4604      	mov	r4, r0
   116ca:	2800      	cmp	r0, #0
   116cc:	f47f ae94 	bne.w	113f8 <bt_init+0x118>
   116d0:	f006 fdaa 	bl	18228 <bt_init.part.0>
   116d4:	4604      	mov	r4, r0
   116d6:	e68f      	b.n	113f8 <bt_init+0x118>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   116d8:	a101      	add	r1, pc, #4	; (adr r1, 116e0 <bt_init+0x400>)
   116da:	e9d1 0100 	ldrd	r0, r1, [r1]
   116de:	e7c7      	b.n	11670 <bt_init+0x390>
   116e0:	02008890 	.word	0x02008890
   116e4:	20008000 	.word	0x20008000
   116e8:	20000460 	.word	0x20000460
   116ec:	20000490 	.word	0x20000490
   116f0:	00032632 	.word	0x00032632
   116f4:	00032b16 	.word	0x00032b16
   116f8:	0002fc14 	.word	0x0002fc14
   116fc:	02008810 	.word	0x02008810
   11700:	00032ae9 	.word	0x00032ae9
   11704:	00032659 	.word	0x00032659
	rp.info = (void *)rsp->data;
   11708:	687b      	ldr	r3, [r7, #4]
   1170a:	68de      	ldr	r6, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   1170c:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   11710:	2b03      	cmp	r3, #3
		return plat_str[platform];
   11712:	bf96      	itet	ls
   11714:	4a4f      	ldrls	r2, [pc, #316]	; (11854 <bt_init+0x574>)
	return "unknown";
   11716:	4950      	ldrhi	r1, [pc, #320]	; (11858 <bt_init+0x578>)
		return plat_str[platform];
   11718:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   1171c:	46e8      	mov	r8, sp
   1171e:	b08a      	sub	sp, #40	; 0x28
   11720:	466a      	mov	r2, sp
   11722:	484e      	ldr	r0, [pc, #312]	; (1185c <bt_init+0x57c>)
   11724:	e9c2 1307 	strd	r1, r3, [r2, #28]
   11728:	f240 3301 	movw	r3, #769	; 0x301
   1172c:	8493      	strh	r3, [r2, #36]	; 0x24
   1172e:	4b4c      	ldr	r3, [pc, #304]	; (11860 <bt_init+0x580>)
   11730:	e9c2 0405 	strd	r0, r4, [r2, #20]
   11734:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   11738:	f842 3f10 	str.w	r3, [r2, #16]!
   1173c:	4849      	ldr	r0, [pc, #292]	; (11864 <bt_init+0x584>)
   1173e:	f01a fc10 	bl	2bf62 <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   11742:	f8b6 2001 	ldrh.w	r2, [r6, #1]
	LOG_INF("HW Variant: %s (0x%04x)",
   11746:	f8b6 3003 	ldrh.w	r3, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   1174a:	2a02      	cmp	r2, #2
   1174c:	46c5      	mov	sp, r8
   1174e:	d157      	bne.n	11800 <bt_init+0x520>
	if (variant < ARRAY_SIZE(nordic_str)) {
   11750:	2b03      	cmp	r3, #3
   11752:	d855      	bhi.n	11800 <bt_init+0x520>
		return nordic_str[variant];
   11754:	4a44      	ldr	r2, [pc, #272]	; (11868 <bt_init+0x588>)
   11756:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
   1175a:	46e8      	mov	r8, sp
   1175c:	b08a      	sub	sp, #40	; 0x28
   1175e:	466a      	mov	r2, sp
   11760:	4842      	ldr	r0, [pc, #264]	; (1186c <bt_init+0x58c>)
   11762:	e9c2 1307 	strd	r1, r3, [r2, #28]
   11766:	f240 3301 	movw	r3, #769	; 0x301
   1176a:	8493      	strh	r3, [r2, #36]	; 0x24
   1176c:	4b3c      	ldr	r3, [pc, #240]	; (11860 <bt_init+0x580>)
   1176e:	e9c2 0405 	strd	r0, r4, [r2, #20]
   11772:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   11776:	f842 3f10 	str.w	r3, [r2, #16]!
   1177a:	483a      	ldr	r0, [pc, #232]	; (11864 <bt_init+0x584>)
   1177c:	f01a fbf1 	bl	2bf62 <z_log_msg_static_create.constprop.0>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   11780:	7973      	ldrb	r3, [r6, #5]
   11782:	f896 e006 	ldrb.w	lr, [r6, #6]
   11786:	f8b6 c007 	ldrh.w	ip, [r6, #7]
   1178a:	f8d6 0009 	ldr.w	r0, [r6, #9]
	if (variant < ARRAY_SIZE(var_str)) {
   1178e:	2b03      	cmp	r3, #3
   11790:	46c5      	mov	sp, r8
		return var_str[variant];
   11792:	bf96      	itet	ls
   11794:	4a36      	ldrls	r2, [pc, #216]	; (11870 <bt_init+0x590>)
	return "unknown";
   11796:	4930      	ldrhi	r1, [pc, #192]	; (11858 <bt_init+0x578>)
		return var_str[variant];
   11798:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   1179c:	466e      	mov	r6, sp
   1179e:	b08e      	sub	sp, #56	; 0x38
   117a0:	466a      	mov	r2, sp
   117a2:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 11874 <bt_init+0x594>
   117a6:	62d0      	str	r0, [r2, #44]	; 0x2c
   117a8:	e9c2 1307 	strd	r1, r3, [r2, #28]
   117ac:	f240 3301 	movw	r3, #769	; 0x301
   117b0:	8613      	strh	r3, [r2, #48]	; 0x30
   117b2:	4b31      	ldr	r3, [pc, #196]	; (11878 <bt_init+0x598>)
   117b4:	482b      	ldr	r0, [pc, #172]	; (11864 <bt_init+0x584>)
   117b6:	e9c2 8405 	strd	r8, r4, [r2, #20]
   117ba:	e9c2 ec09 	strd	lr, ip, [r2, #36]	; 0x24
   117be:	f244 41c0 	movw	r1, #17600	; 0x44c0
   117c2:	f842 3f10 	str.w	r3, [r2, #16]!
   117c6:	f01a fbcc 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   117ca:	46b5      	mov	sp, r6
	net_buf_unref(rsp);
   117cc:	6878      	ldr	r0, [r7, #4]
   117ce:	f00f f927 	bl	20a20 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   117d2:	1d3a      	adds	r2, r7, #4
   117d4:	2100      	movs	r1, #0
   117d6:	f64f 4002 	movw	r0, #64514	; 0xfc02
   117da:	f005 ffef 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   117de:	4680      	mov	r8, r0
   117e0:	b180      	cbz	r0, 11804 <bt_init+0x524>
		LOG_WRN("Failed to read supported vendor commands");
   117e2:	b088      	sub	sp, #32
   117e4:	466a      	mov	r2, sp
   117e6:	4b25      	ldr	r3, [pc, #148]	; (1187c <bt_init+0x59c>)
			LOG_WRN("Failed to read supported vendor features");
   117e8:	481e      	ldr	r0, [pc, #120]	; (11864 <bt_init+0x584>)
   117ea:	e9c2 3405 	strd	r3, r4, [r2, #20]
   117ee:	2303      	movs	r3, #3
   117f0:	f842 3f10 	str.w	r3, [r2, #16]!
   117f4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   117f8:	f01a fbb3 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   117fc:	46b5      	mov	sp, r6
			return;
   117fe:	e75b      	b.n	116b8 <bt_init+0x3d8>
		return "unknown";
   11800:	4915      	ldr	r1, [pc, #84]	; (11858 <bt_init+0x578>)
   11802:	e7aa      	b.n	1175a <bt_init+0x47a>
	rp.cmds = (void *)rsp->data;
   11804:	f8d7 9004 	ldr.w	r9, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   11808:	481d      	ldr	r0, [pc, #116]	; (11880 <bt_init+0x5a0>)
   1180a:	f8d9 100c 	ldr.w	r1, [r9, #12]
   1180e:	2202      	movs	r2, #2
   11810:	3101      	adds	r1, #1
   11812:	f01a fa45 	bl	2bca0 <memcpy>
	net_buf_unref(rsp);
   11816:	4648      	mov	r0, r9
   11818:	f00f f902 	bl	20a20 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   1181c:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   11820:	075b      	lsls	r3, r3, #29
   11822:	f57f af49 	bpl.w	116b8 <bt_init+0x3d8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   11826:	1d3a      	adds	r2, r7, #4
   11828:	4641      	mov	r1, r8
   1182a:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1182e:	f005 ffc5 	bl	177bc <bt_hci_cmd_send_sync>
		if (err) {
   11832:	b118      	cbz	r0, 1183c <bt_init+0x55c>
			LOG_WRN("Failed to read supported vendor features");
   11834:	b088      	sub	sp, #32
   11836:	466a      	mov	r2, sp
   11838:	4b12      	ldr	r3, [pc, #72]	; (11884 <bt_init+0x5a4>)
   1183a:	e7d5      	b.n	117e8 <bt_init+0x508>
		rp.feat = (void *)rsp->data;
   1183c:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   1183e:	4812      	ldr	r0, [pc, #72]	; (11888 <bt_init+0x5a8>)
   11840:	68e1      	ldr	r1, [r4, #12]
   11842:	2201      	movs	r2, #1
   11844:	4411      	add	r1, r2
   11846:	f01a fa2b 	bl	2bca0 <memcpy>
		net_buf_unref(rsp);
   1184a:	4620      	mov	r0, r4
   1184c:	f00f f8e8 	bl	20a20 <net_buf_unref>
   11850:	e732      	b.n	116b8 <bt_init+0x3d8>
   11852:	bf00      	nop
   11854:	00030198 	.word	0x00030198
   11858:	0003201a 	.word	0x0003201a
   1185c:	00032681 	.word	0x00032681
   11860:	01000005 	.word	0x01000005
   11864:	0002fc14 	.word	0x0002fc14
   11868:	00030188 	.word	0x00030188
   1186c:	0003269e 	.word	0x0003269e
   11870:	00030178 	.word	0x00030178
   11874:	000326ba 	.word	0x000326ba
   11878:	01000008 	.word	0x01000008
   1187c:	000326eb 	.word	0x000326eb
   11880:	20000449 	.word	0x20000449
   11884:	00032718 	.word	0x00032718
   11888:	20000448 	.word	0x20000448

0001188c <service_discover_func>:

// Service discovery callback
static uint8_t service_discover_func(struct bt_conn *conn,
                                const struct bt_gatt_attr *attr,
                                struct bt_gatt_discover_params *params)
{
   1188c:	b570      	push	{r4, r5, r6, lr}
   1188e:	4606      	mov	r6, r0
   11890:	4615      	mov	r5, r2
    int err;
    
    if (!attr) {
   11892:	460c      	mov	r4, r1
   11894:	b921      	cbnz	r1, 118a0 <service_discover_func+0x14>
        printk("Service Discovery complete, NUS service not found\n");
   11896:	4810      	ldr	r0, [pc, #64]	; (118d8 <service_discover_func+0x4c>)
   11898:	f017 fe3a 	bl	29510 <printk>
    if (err) {
        printk("Characteristic discover failed (err %d)\n", err);
    }
    
    return BT_GATT_ITER_STOP;
}
   1189c:	2000      	movs	r0, #0
   1189e:	bd70      	pop	{r4, r5, r6, pc}
    printk("NUS service found, handle range: %u to %u\n", 
   118a0:	89d2      	ldrh	r2, [r2, #14]
   118a2:	8a09      	ldrh	r1, [r1, #16]
   118a4:	480d      	ldr	r0, [pc, #52]	; (118dc <service_discover_func+0x50>)
   118a6:	f017 fe33 	bl	29510 <printk>
    discover_params.uuid = NULL; // Discover all characteristics
   118aa:	490d      	ldr	r1, [pc, #52]	; (118e0 <service_discover_func+0x54>)
   118ac:	2300      	movs	r3, #0
   118ae:	600b      	str	r3, [r1, #0]
    discover_params.start_handle = attr->handle + 1;
   118b0:	8a23      	ldrh	r3, [r4, #16]
   118b2:	3301      	adds	r3, #1
   118b4:	810b      	strh	r3, [r1, #8]
    discover_params.end_handle = params->end_handle;
   118b6:	89eb      	ldrh	r3, [r5, #14]
   118b8:	81cb      	strh	r3, [r1, #14]
    discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   118ba:	2303      	movs	r3, #3
   118bc:	740b      	strb	r3, [r1, #16]
    err = bt_gatt_discover(conn, &discover_params);
   118be:	4630      	mov	r0, r6
    discover_params.func = characteristic_discover_func;
   118c0:	4b08      	ldr	r3, [pc, #32]	; (118e4 <service_discover_func+0x58>)
   118c2:	604b      	str	r3, [r1, #4]
    err = bt_gatt_discover(conn, &discover_params);
   118c4:	f00b fda2 	bl	1d40c <bt_gatt_discover>
    if (err) {
   118c8:	4601      	mov	r1, r0
   118ca:	2800      	cmp	r0, #0
   118cc:	d0e6      	beq.n	1189c <service_discover_func+0x10>
        printk("Characteristic discover failed (err %d)\n", err);
   118ce:	4806      	ldr	r0, [pc, #24]	; (118e8 <service_discover_func+0x5c>)
   118d0:	f017 fe1e 	bl	29510 <printk>
   118d4:	e7e2      	b.n	1189c <service_discover_func+0x10>
   118d6:	bf00      	nop
   118d8:	000309ee 	.word	0x000309ee
   118dc:	00030a21 	.word	0x00030a21
   118e0:	20002d84 	.word	0x20002d84
   118e4:	000118ed 	.word	0x000118ed
   118e8:	00030a4c 	.word	0x00030a4c

000118ec <characteristic_discover_func>:
{
   118ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118f0:	4607      	mov	r7, r0
   118f2:	b08a      	sub	sp, #40	; 0x28
   118f4:	4616      	mov	r6, r2
    if (!attr) {
   118f6:	460c      	mov	r4, r1
   118f8:	2900      	cmp	r1, #0
   118fa:	d16d      	bne.n	119d8 <characteristic_discover_func+0xec>
        printk("Characteristic Discovery complete\n");
   118fc:	4859      	ldr	r0, [pc, #356]	; (11a64 <characteristic_discover_func+0x178>)
   118fe:	4d5a      	ldr	r5, [pc, #360]	; (11a68 <characteristic_discover_func+0x17c>)
   11900:	f017 fe06 	bl	29510 <printk>
        if (nus_rx_handle && nus_tx_handle) {
   11904:	4b59      	ldr	r3, [pc, #356]	; (11a6c <characteristic_discover_func+0x180>)
   11906:	881b      	ldrh	r3, [r3, #0]
   11908:	2b00      	cmp	r3, #0
   1190a:	d04f      	beq.n	119ac <characteristic_discover_func+0xc0>
   1190c:	f8df 8160 	ldr.w	r8, [pc, #352]	; 11a70 <characteristic_discover_func+0x184>
   11910:	f8b8 3000 	ldrh.w	r3, [r8]
   11914:	2b00      	cmp	r3, #0
   11916:	d049      	beq.n	119ac <characteristic_discover_func+0xc0>
            printk("Both RX and TX characteristics found, discovering descriptors\n");
   11918:	4856      	ldr	r0, [pc, #344]	; (11a74 <characteristic_discover_func+0x188>)
   1191a:	f017 fdf9 	bl	29510 <printk>
            discover_params.uuid = BT_UUID_GATT_CCC;
   1191e:	f642 1302 	movw	r3, #10498	; 0x2902
   11922:	f8ad 3016 	strh.w	r3, [sp, #22]
   11926:	ab05      	add	r3, sp, #20
   11928:	602b      	str	r3, [r5, #0]
            discover_params.start_handle = nus_tx_handle;
   1192a:	f8b8 3000 	ldrh.w	r3, [r8]
   1192e:	812b      	strh	r3, [r5, #8]
            discover_params.end_handle = 0xffff;
   11930:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11934:	81eb      	strh	r3, [r5, #14]
            discover_params.type = BT_GATT_DISCOVER_DESCRIPTOR;
   11936:	2304      	movs	r3, #4
   11938:	742b      	strb	r3, [r5, #16]
            err = bt_gatt_discover(conn, &discover_params);
   1193a:	4629      	mov	r1, r5
            discover_params.func = descriptor_discover_func;
   1193c:	4b4e      	ldr	r3, [pc, #312]	; (11a78 <characteristic_discover_func+0x18c>)
            discover_params.uuid = BT_UUID_GATT_CCC;
   1193e:	f88d 4014 	strb.w	r4, [sp, #20]
            err = bt_gatt_discover(conn, &discover_params);
   11942:	4638      	mov	r0, r7
            discover_params.func = descriptor_discover_func;
   11944:	606b      	str	r3, [r5, #4]
            err = bt_gatt_discover(conn, &discover_params);
   11946:	f00b fd61 	bl	1d40c <bt_gatt_discover>
            if (err) {
   1194a:	4601      	mov	r1, r0
   1194c:	b350      	cbz	r0, 119a4 <characteristic_discover_func+0xb8>
                memset(&nus_tx_subscribe_params, 0, sizeof(nus_tx_subscribe_params));
   1194e:	4d4b      	ldr	r5, [pc, #300]	; (11a7c <characteristic_discover_func+0x190>)
                printk("Descriptor discover failed (err %d)\n", err);
   11950:	484b      	ldr	r0, [pc, #300]	; (11a80 <characteristic_discover_func+0x194>)
   11952:	f017 fddd 	bl	29510 <printk>
                memset(&nus_tx_subscribe_params, 0, sizeof(nus_tx_subscribe_params));
   11956:	221c      	movs	r2, #28
   11958:	4621      	mov	r1, r4
   1195a:	4628      	mov	r0, r5
   1195c:	f01a f9ab 	bl	2bcb6 <memset>
                nus_tx_subscribe_params.value_handle = nus_tx_handle;
   11960:	f8b8 3000 	ldrh.w	r3, [r8]
   11964:	81ab      	strh	r3, [r5, #12]
                nus_tx_subscribe_params.notify = nus_notify_callback;
   11966:	4b47      	ldr	r3, [pc, #284]	; (11a84 <characteristic_discover_func+0x198>)
   11968:	602b      	str	r3, [r5, #0]
                err = bt_gatt_subscribe(conn, &nus_tx_subscribe_params);
   1196a:	4629      	mov	r1, r5
                nus_tx_subscribe_params.value = BT_GATT_CCC_NOTIFY;
   1196c:	2301      	movs	r3, #1
                err = bt_gatt_subscribe(conn, &nus_tx_subscribe_params);
   1196e:	4638      	mov	r0, r7
                nus_tx_subscribe_params.value = BT_GATT_CCC_NOTIFY;
   11970:	822b      	strh	r3, [r5, #16]
                nus_tx_subscribe_params.ccc_handle = 0; // Auto-discover
   11972:	81ec      	strh	r4, [r5, #14]
                err = bt_gatt_subscribe(conn, &nus_tx_subscribe_params);
   11974:	f00c f992 	bl	1dc9c <bt_gatt_subscribe>
                if (err && err != -EALREADY) {
   11978:	4601      	mov	r1, r0
   1197a:	b130      	cbz	r0, 1198a <characteristic_discover_func+0x9e>
   1197c:	f110 0f78 	cmn.w	r0, #120	; 0x78
   11980:	d003      	beq.n	1198a <characteristic_discover_func+0x9e>
                    printk("Subscribe failed (err %d)\n", err);
   11982:	4841      	ldr	r0, [pc, #260]	; (11a88 <characteristic_discover_func+0x19c>)
                printk("General characteristic discover failed (err %d)\n", err);
   11984:	f017 fdc4 	bl	29510 <printk>
   11988:	e00c      	b.n	119a4 <characteristic_discover_func+0xb8>
                    printk("Subscribed to NUS TX characteristic\n");
   1198a:	4840      	ldr	r0, [pc, #256]	; (11a8c <characteristic_discover_func+0x1a0>)
   1198c:	f017 fdc0 	bl	29510 <printk>
                    subscription_active = true;
   11990:	4b3f      	ldr	r3, [pc, #252]	; (11a90 <characteristic_discover_func+0x1a4>)
                    k_work_schedule_for_queue(&work_q, &send_test_message_work, K_MSEC(1000));
   11992:	4940      	ldr	r1, [pc, #256]	; (11a94 <characteristic_discover_func+0x1a8>)
   11994:	4840      	ldr	r0, [pc, #256]	; (11a98 <characteristic_discover_func+0x1ac>)
                    subscription_active = true;
   11996:	2201      	movs	r2, #1
   11998:	701a      	strb	r2, [r3, #0]
                    k_work_schedule_for_queue(&work_q, &send_test_message_work, K_MSEC(1000));
   1199a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1199e:	2300      	movs	r3, #0
   119a0:	f013 febe 	bl	25720 <k_work_schedule_for_queue>
        return BT_GATT_ITER_STOP;
   119a4:	2000      	movs	r0, #0
}
   119a6:	b00a      	add	sp, #40	; 0x28
   119a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            printk("Missing RX or TX characteristic, trying general discovery\n");
   119ac:	483b      	ldr	r0, [pc, #236]	; (11a9c <characteristic_discover_func+0x1b0>)
   119ae:	f017 fdaf 	bl	29510 <printk>
            discover_params.uuid = NULL;
   119b2:	2300      	movs	r3, #0
   119b4:	602b      	str	r3, [r5, #0]
            discover_params.start_handle = params->start_handle;
   119b6:	8933      	ldrh	r3, [r6, #8]
   119b8:	812b      	strh	r3, [r5, #8]
            discover_params.end_handle = params->end_handle;
   119ba:	89f3      	ldrh	r3, [r6, #14]
   119bc:	81eb      	strh	r3, [r5, #14]
            discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   119be:	2303      	movs	r3, #3
            err = bt_gatt_discover(conn, &discover_params);
   119c0:	4929      	ldr	r1, [pc, #164]	; (11a68 <characteristic_discover_func+0x17c>)
            discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   119c2:	742b      	strb	r3, [r5, #16]
            err = bt_gatt_discover(conn, &discover_params);
   119c4:	4638      	mov	r0, r7
            discover_params.func = characteristic_discover_func;
   119c6:	4b36      	ldr	r3, [pc, #216]	; (11aa0 <characteristic_discover_func+0x1b4>)
   119c8:	606b      	str	r3, [r5, #4]
            err = bt_gatt_discover(conn, &discover_params);
   119ca:	f00b fd1f 	bl	1d40c <bt_gatt_discover>
            if (err) {
   119ce:	4601      	mov	r1, r0
   119d0:	2800      	cmp	r0, #0
   119d2:	d0e7      	beq.n	119a4 <characteristic_discover_func+0xb8>
                printk("General characteristic discover failed (err %d)\n", err);
   119d4:	4833      	ldr	r0, [pc, #204]	; (11aa4 <characteristic_discover_func+0x1b8>)
   119d6:	e7d5      	b.n	11984 <characteristic_discover_func+0x98>
    if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   119d8:	7c13      	ldrb	r3, [r2, #16]
   119da:	2b03      	cmp	r3, #3
   119dc:	d101      	bne.n	119e2 <characteristic_discover_func+0xf6>
        struct bt_gatt_chrc *chrc = (struct bt_gatt_chrc *)attr->user_data;
   119de:	68ce      	ldr	r6, [r1, #12]
        if (chrc && chrc->uuid) {
   119e0:	b90e      	cbnz	r6, 119e6 <characteristic_discover_func+0xfa>
    return BT_GATT_ITER_CONTINUE;
   119e2:	2001      	movs	r0, #1
   119e4:	e7df      	b.n	119a6 <characteristic_discover_func+0xba>
        if (chrc && chrc->uuid) {
   119e6:	6837      	ldr	r7, [r6, #0]
   119e8:	2f00      	cmp	r7, #0
   119ea:	d0fa      	beq.n	119e2 <characteristic_discover_func+0xf6>
            if (bt_uuid_cmp(chrc->uuid, BT_UUID_NUS_RX) == 0) {
   119ec:	4b2e      	ldr	r3, [pc, #184]	; (11aa8 <characteristic_discover_func+0x1bc>)
   119ee:	466a      	mov	r2, sp
   119f0:	f103 0e10 	add.w	lr, r3, #16
   119f4:	4694      	mov	ip, r2
   119f6:	6818      	ldr	r0, [r3, #0]
   119f8:	6859      	ldr	r1, [r3, #4]
   119fa:	4615      	mov	r5, r2
   119fc:	c503      	stmia	r5!, {r0, r1}
   119fe:	3308      	adds	r3, #8
   11a00:	4573      	cmp	r3, lr
   11a02:	462a      	mov	r2, r5
   11a04:	d1f7      	bne.n	119f6 <characteristic_discover_func+0x10a>
   11a06:	781b      	ldrb	r3, [r3, #0]
   11a08:	702b      	strb	r3, [r5, #0]
   11a0a:	4661      	mov	r1, ip
   11a0c:	4638      	mov	r0, r7
   11a0e:	f01a fa06 	bl	2be1e <bt_uuid_cmp>
   11a12:	b940      	cbnz	r0, 11a26 <characteristic_discover_func+0x13a>
                printk("NUS RX characteristic found, handle: %u\n", attr->handle);
   11a14:	8a21      	ldrh	r1, [r4, #16]
   11a16:	4825      	ldr	r0, [pc, #148]	; (11aac <characteristic_discover_func+0x1c0>)
   11a18:	f017 fd7a 	bl	29510 <printk>
                nus_rx_handle = attr->handle + 1;  // Value handle is the next handle
   11a1c:	8a23      	ldrh	r3, [r4, #16]
   11a1e:	4a13      	ldr	r2, [pc, #76]	; (11a6c <characteristic_discover_func+0x180>)
   11a20:	3301      	adds	r3, #1
                nus_tx_handle = attr->handle + 1;  // Value handle is the next handle
   11a22:	8013      	strh	r3, [r2, #0]
   11a24:	e7dd      	b.n	119e2 <characteristic_discover_func+0xf6>
            else if (bt_uuid_cmp(chrc->uuid, BT_UUID_NUS_TX) == 0) {
   11a26:	4b22      	ldr	r3, [pc, #136]	; (11ab0 <characteristic_discover_func+0x1c4>)
   11a28:	6836      	ldr	r6, [r6, #0]
   11a2a:	aa05      	add	r2, sp, #20
   11a2c:	f103 0c10 	add.w	ip, r3, #16
   11a30:	4617      	mov	r7, r2
   11a32:	6818      	ldr	r0, [r3, #0]
   11a34:	6859      	ldr	r1, [r3, #4]
   11a36:	4615      	mov	r5, r2
   11a38:	c503      	stmia	r5!, {r0, r1}
   11a3a:	3308      	adds	r3, #8
   11a3c:	4563      	cmp	r3, ip
   11a3e:	462a      	mov	r2, r5
   11a40:	d1f7      	bne.n	11a32 <characteristic_discover_func+0x146>
   11a42:	781b      	ldrb	r3, [r3, #0]
   11a44:	702b      	strb	r3, [r5, #0]
   11a46:	4639      	mov	r1, r7
   11a48:	4630      	mov	r0, r6
   11a4a:	f01a f9e8 	bl	2be1e <bt_uuid_cmp>
   11a4e:	2800      	cmp	r0, #0
   11a50:	d1c7      	bne.n	119e2 <characteristic_discover_func+0xf6>
                printk("NUS TX characteristic found, handle: %u\n", attr->handle);
   11a52:	8a21      	ldrh	r1, [r4, #16]
   11a54:	4817      	ldr	r0, [pc, #92]	; (11ab4 <characteristic_discover_func+0x1c8>)
   11a56:	f017 fd5b 	bl	29510 <printk>
                nus_tx_handle = attr->handle + 1;  // Value handle is the next handle
   11a5a:	8a23      	ldrh	r3, [r4, #16]
   11a5c:	4a04      	ldr	r2, [pc, #16]	; (11a70 <characteristic_discover_func+0x184>)
   11a5e:	3301      	adds	r3, #1
   11a60:	e7df      	b.n	11a22 <characteristic_discover_func+0x136>
   11a62:	bf00      	nop
   11a64:	00030a75 	.word	0x00030a75
   11a68:	20002d84 	.word	0x20002d84
   11a6c:	2000430c 	.word	0x2000430c
   11a70:	2000430a 	.word	0x2000430a
   11a74:	00030a98 	.word	0x00030a98
   11a78:	00011c49 	.word	0x00011c49
   11a7c:	20002d68 	.word	0x20002d68
   11a80:	00030ad7 	.word	0x00030ad7
   11a84:	00011bd5 	.word	0x00011bd5
   11a88:	00030afc 	.word	0x00030afc
   11a8c:	00030b17 	.word	0x00030b17
   11a90:	2000432a 	.word	0x2000432a
   11a94:	20001920 	.word	0x20001920
   11a98:	20001980 	.word	0x20001980
   11a9c:	00030b3c 	.word	0x00030b3c
   11aa0:	000118ed 	.word	0x000118ed
   11aa4:	00030b77 	.word	0x00030b77
   11aa8:	0002fdb0 	.word	0x0002fdb0
   11aac:	00030ba8 	.word	0x00030ba8
   11ab0:	0002fdc1 	.word	0x0002fdc1
   11ab4:	00030bd1 	.word	0x00030bd1

00011ab8 <start_scan_handler>:
        }
    }
}

static void start_scan_handler(struct k_work *work)
{
   11ab8:	b530      	push	{r4, r5, lr}
    int err;

    // Check if we're already scanning
    if (is_scanning) {
   11aba:	4c1e      	ldr	r4, [pc, #120]	; (11b34 <start_scan_handler+0x7c>)
   11abc:	7823      	ldrb	r3, [r4, #0]
{
   11abe:	b087      	sub	sp, #28
    if (is_scanning) {
   11ac0:	b12b      	cbz	r3, 11ace <start_scan_handler+0x16>
        printk("Already scanning, skipping scan start\n");
   11ac2:	481d      	ldr	r0, [pc, #116]	; (11b38 <start_scan_handler+0x80>)
    }

    // Mark scanning as started
    is_scanning = true;
    printk("Scanning for RentScan device started successfully\n");
}
   11ac4:	b007      	add	sp, #28
   11ac6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        printk("Already connected, skipping scan start\n");
   11aca:	f017 bd21 	b.w	29510 <printk>
    if (default_conn) {
   11ace:	4b1b      	ldr	r3, [pc, #108]	; (11b3c <start_scan_handler+0x84>)
   11ad0:	681d      	ldr	r5, [r3, #0]
   11ad2:	b10d      	cbz	r5, 11ad8 <start_scan_handler+0x20>
        printk("Already connected, skipping scan start\n");
   11ad4:	481a      	ldr	r0, [pc, #104]	; (11b40 <start_scan_handler+0x88>)
   11ad6:	e7f5      	b.n	11ac4 <start_scan_handler+0xc>
    printk("Starting BLE scan with scan_type=active...\n");
   11ad8:	481a      	ldr	r0, [pc, #104]	; (11b44 <start_scan_handler+0x8c>)
   11ada:	f017 fd19 	bl	29510 <printk>
    struct bt_le_scan_param scan_param = {
   11ade:	4629      	mov	r1, r5
   11ae0:	2214      	movs	r2, #20
   11ae2:	a801      	add	r0, sp, #4
   11ae4:	f01a f8e7 	bl	2bcb6 <memset>
   11ae8:	2501      	movs	r5, #1
   11aea:	4b17      	ldr	r3, [pc, #92]	; (11b48 <start_scan_handler+0x90>)
    err = bt_le_scan_start(&scan_param, device_found);
   11aec:	4917      	ldr	r1, [pc, #92]	; (11b4c <start_scan_handler+0x94>)
    struct bt_le_scan_param scan_param = {
   11aee:	f88d 5004 	strb.w	r5, [sp, #4]
    err = bt_le_scan_start(&scan_param, device_found);
   11af2:	a801      	add	r0, sp, #4
    struct bt_le_scan_param scan_param = {
   11af4:	9303      	str	r3, [sp, #12]
    err = bt_le_scan_start(&scan_param, device_found);
   11af6:	f007 fa31 	bl	18f5c <bt_le_scan_start>
    if (err) {
   11afa:	4601      	mov	r1, r0
   11afc:	b1a0      	cbz	r0, 11b28 <start_scan_handler+0x70>
        if (err == -EAGAIN) {
   11afe:	f110 0f0b 	cmn.w	r0, #11
   11b02:	d10b      	bne.n	11b1c <start_scan_handler+0x64>
            printk("Scan start failed with EAGAIN, trying again in 2 seconds\n");
   11b04:	4812      	ldr	r0, [pc, #72]	; (11b50 <start_scan_handler+0x98>)
   11b06:	f017 fd03 	bl	29510 <printk>
            k_work_schedule_for_queue(&work_q, &start_scan_work, K_MSEC(2000));
   11b0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
            k_work_schedule_for_queue(&work_q, &start_scan_work, K_MSEC(3000));
   11b0e:	4911      	ldr	r1, [pc, #68]	; (11b54 <start_scan_handler+0x9c>)
   11b10:	4811      	ldr	r0, [pc, #68]	; (11b58 <start_scan_handler+0xa0>)
   11b12:	2300      	movs	r3, #0
   11b14:	f013 fe04 	bl	25720 <k_work_schedule_for_queue>
}
   11b18:	b007      	add	sp, #28
   11b1a:	bd30      	pop	{r4, r5, pc}
            printk("Scanning failed to start (err %d), retrying in 3 seconds\n", err);
   11b1c:	480f      	ldr	r0, [pc, #60]	; (11b5c <start_scan_handler+0xa4>)
   11b1e:	f017 fcf7 	bl	29510 <printk>
            k_work_schedule_for_queue(&work_q, &start_scan_work, K_MSEC(3000));
   11b22:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
   11b26:	e7f2      	b.n	11b0e <start_scan_handler+0x56>
    printk("Scanning for RentScan device started successfully\n");
   11b28:	480d      	ldr	r0, [pc, #52]	; (11b60 <start_scan_handler+0xa8>)
    is_scanning = true;
   11b2a:	7025      	strb	r5, [r4, #0]
    printk("Scanning for RentScan device started successfully\n");
   11b2c:	f017 fcf0 	bl	29510 <printk>
   11b30:	e7f2      	b.n	11b18 <start_scan_handler+0x60>
   11b32:	bf00      	nop
   11b34:	2000432c 	.word	0x2000432c
   11b38:	00030bfa 	.word	0x00030bfa
   11b3c:	20002d98 	.word	0x20002d98
   11b40:	00030c21 	.word	0x00030c21
   11b44:	00030c49 	.word	0x00030c49
   11b48:	00300060 	.word	0x00300060
   11b4c:	00011e6d 	.word	0x00011e6d
   11b50:	00030c75 	.word	0x00030c75
   11b54:	20001950 	.word	0x20001950
   11b58:	20001980 	.word	0x20001980
   11b5c:	00030caf 	.word	0x00030caf
   11b60:	00030ce9 	.word	0x00030ce9

00011b64 <check_device_name>:
{
   11b64:	b570      	push	{r4, r5, r6, lr}
    if (data->type == BT_DATA_NAME_COMPLETE || data->type == BT_DATA_NAME_SHORTENED) {
   11b66:	7803      	ldrb	r3, [r0, #0]
   11b68:	3b08      	subs	r3, #8
   11b6a:	2b01      	cmp	r3, #1
{
   11b6c:	4604      	mov	r4, r0
    if (data->type == BT_DATA_NAME_COMPLETE || data->type == BT_DATA_NAME_SHORTENED) {
   11b6e:	d901      	bls.n	11b74 <check_device_name+0x10>
    return true; // Continue parsing all advertising data
   11b70:	2001      	movs	r0, #1
}
   11b72:	bd70      	pop	{r4, r5, r6, pc}
        printk("Found device with name: ");
   11b74:	4811      	ldr	r0, [pc, #68]	; (11bbc <check_device_name+0x58>)
            printk("%c", data->data[i]);
   11b76:	4e12      	ldr	r6, [pc, #72]	; (11bc0 <check_device_name+0x5c>)
        printk("Found device with name: ");
   11b78:	f017 fcca 	bl	29510 <printk>
        for (size_t i = 0; i < data->data_len; i++) {
   11b7c:	2500      	movs	r5, #0
   11b7e:	7863      	ldrb	r3, [r4, #1]
   11b80:	42ab      	cmp	r3, r5
   11b82:	d814      	bhi.n	11bae <check_device_name+0x4a>
        printk("\n");
   11b84:	480f      	ldr	r0, [pc, #60]	; (11bc4 <check_device_name+0x60>)
   11b86:	f017 fcc3 	bl	29510 <printk>
        if (data->data_len == 8 && memcmp(data->data, "RentScan", 8) == 0) {
   11b8a:	7862      	ldrb	r2, [r4, #1]
   11b8c:	2a08      	cmp	r2, #8
   11b8e:	d1ef      	bne.n	11b70 <check_device_name+0xc>
   11b90:	6860      	ldr	r0, [r4, #4]
   11b92:	490d      	ldr	r1, [pc, #52]	; (11bc8 <check_device_name+0x64>)
   11b94:	f01a f85d 	bl	2bc52 <memcmp>
   11b98:	4604      	mov	r4, r0
   11b9a:	2800      	cmp	r0, #0
   11b9c:	d1e8      	bne.n	11b70 <check_device_name+0xc>
            printk("Found RentScan device!\n");
   11b9e:	480b      	ldr	r0, [pc, #44]	; (11bcc <check_device_name+0x68>)
   11ba0:	f017 fcb6 	bl	29510 <printk>
            device_found_flag = true;
   11ba4:	4b0a      	ldr	r3, [pc, #40]	; (11bd0 <check_device_name+0x6c>)
   11ba6:	2201      	movs	r2, #1
   11ba8:	701a      	strb	r2, [r3, #0]
            return false; // Stop parsing, we found what we need
   11baa:	4620      	mov	r0, r4
   11bac:	e7e1      	b.n	11b72 <check_device_name+0xe>
            printk("%c", data->data[i]);
   11bae:	6863      	ldr	r3, [r4, #4]
   11bb0:	4630      	mov	r0, r6
   11bb2:	5d59      	ldrb	r1, [r3, r5]
   11bb4:	f017 fcac 	bl	29510 <printk>
        for (size_t i = 0; i < data->data_len; i++) {
   11bb8:	3501      	adds	r5, #1
   11bba:	e7e0      	b.n	11b7e <check_device_name+0x1a>
   11bbc:	00030d1c 	.word	0x00030d1c
   11bc0:	00030d35 	.word	0x00030d35
   11bc4:	000315af 	.word	0x000315af
   11bc8:	00030d38 	.word	0x00030d38
   11bcc:	00030d41 	.word	0x00030d41
   11bd0:	2000432d 	.word	0x2000432d

00011bd4 <nus_notify_callback>:
{
   11bd4:	b570      	push	{r4, r5, r6, lr}
   11bd6:	4e16      	ldr	r6, [pc, #88]	; (11c30 <nus_notify_callback+0x5c>)
   11bd8:	b092      	sub	sp, #72	; 0x48
   11bda:	461c      	mov	r4, r3
    if (!data) {
   11bdc:	4615      	mov	r5, r2
   11bde:	b932      	cbnz	r2, 11bee <nus_notify_callback+0x1a>
        printk("Unsubscribed from NUS TX\n");
   11be0:	4814      	ldr	r0, [pc, #80]	; (11c34 <nus_notify_callback+0x60>)
   11be2:	f017 fc95 	bl	29510 <printk>
        subscription_active = false;
   11be6:	7035      	strb	r5, [r6, #0]
}
   11be8:	2001      	movs	r0, #1
   11bea:	b012      	add	sp, #72	; 0x48
   11bec:	bd70      	pop	{r4, r5, r6, pc}
    memcpy(msg, data, MIN(length, sizeof(msg) - 1));
   11bee:	2c40      	cmp	r4, #64	; 0x40
    connection_stable = true;
   11bf0:	4a11      	ldr	r2, [pc, #68]	; (11c38 <nus_notify_callback+0x64>)
    memcpy(msg, data, MIN(length, sizeof(msg) - 1));
   11bf2:	bf28      	it	cs
   11bf4:	2440      	movcs	r4, #64	; 0x40
    connection_stable = true;
   11bf6:	2301      	movs	r3, #1
   11bf8:	7013      	strb	r3, [r2, #0]
    memcpy(msg, data, MIN(length, sizeof(msg) - 1));
   11bfa:	4629      	mov	r1, r5
   11bfc:	4622      	mov	r2, r4
   11bfe:	a801      	add	r0, sp, #4
    subscription_active = true;
   11c00:	7033      	strb	r3, [r6, #0]
    memcpy(msg, data, MIN(length, sizeof(msg) - 1));
   11c02:	f01a f84d 	bl	2bca0 <memcpy>
    msg[MIN(length, sizeof(msg) - 1)] = '\0';
   11c06:	f104 0348 	add.w	r3, r4, #72	; 0x48
   11c0a:	eb0d 0403 	add.w	r4, sp, r3
    printk("Received from peripheral: %s\n", msg);
   11c0e:	480b      	ldr	r0, [pc, #44]	; (11c3c <nus_notify_callback+0x68>)
    msg[MIN(length, sizeof(msg) - 1)] = '\0';
   11c10:	2300      	movs	r3, #0
    printk("Received from peripheral: %s\n", msg);
   11c12:	a901      	add	r1, sp, #4
    msg[MIN(length, sizeof(msg) - 1)] = '\0';
   11c14:	f804 3c44 	strb.w	r3, [r4, #-68]
    printk("Received from peripheral: %s\n", msg);
   11c18:	f017 fc7a 	bl	29510 <printk>
    if (strstr(msg, "RENTAL START") != NULL) {
   11c1c:	4908      	ldr	r1, [pc, #32]	; (11c40 <nus_notify_callback+0x6c>)
   11c1e:	a801      	add	r0, sp, #4
   11c20:	f019 ffbd 	bl	2bb9e <strstr>
   11c24:	2800      	cmp	r0, #0
   11c26:	d0df      	beq.n	11be8 <nus_notify_callback+0x14>
        printk("Rental data detected!\n");
   11c28:	4806      	ldr	r0, [pc, #24]	; (11c44 <nus_notify_callback+0x70>)
   11c2a:	f017 fc71 	bl	29510 <printk>
   11c2e:	e7db      	b.n	11be8 <nus_notify_callback+0x14>
   11c30:	2000432a 	.word	0x2000432a
   11c34:	00030d59 	.word	0x00030d59
   11c38:	2000432b 	.word	0x2000432b
   11c3c:	00030d73 	.word	0x00030d73
   11c40:	00030d91 	.word	0x00030d91
   11c44:	00030d9e 	.word	0x00030d9e

00011c48 <descriptor_discover_func>:
{
   11c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c4c:	4606      	mov	r6, r0
   11c4e:	b086      	sub	sp, #24
    if (!attr) {
   11c50:	460c      	mov	r4, r1
   11c52:	2900      	cmp	r1, #0
   11c54:	d14f      	bne.n	11cf6 <descriptor_discover_func+0xae>
        if (nus_tx_handle) {
   11c56:	4f34      	ldr	r7, [pc, #208]	; (11d28 <descriptor_discover_func+0xe0>)
        printk("Descriptor Discovery complete\n");
   11c58:	4834      	ldr	r0, [pc, #208]	; (11d2c <descriptor_discover_func+0xe4>)
   11c5a:	f017 fc59 	bl	29510 <printk>
        if (nus_tx_handle) {
   11c5e:	883b      	ldrh	r3, [r7, #0]
   11c60:	b38b      	cbz	r3, 11cc6 <descriptor_discover_func+0x7e>
            memset(&nus_tx_subscribe_params, 0, sizeof(nus_tx_subscribe_params));
   11c62:	4d33      	ldr	r5, [pc, #204]	; (11d30 <descriptor_discover_func+0xe8>)
            printk("Setting up subscription to NUS TX characteristic\n");
   11c64:	4833      	ldr	r0, [pc, #204]	; (11d34 <descriptor_discover_func+0xec>)
            if (nus_tx_ccc_handle) {
   11c66:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 11d38 <descriptor_discover_func+0xf0>
            printk("Setting up subscription to NUS TX characteristic\n");
   11c6a:	f017 fc51 	bl	29510 <printk>
            memset(&nus_tx_subscribe_params, 0, sizeof(nus_tx_subscribe_params));
   11c6e:	221c      	movs	r2, #28
   11c70:	4621      	mov	r1, r4
   11c72:	4628      	mov	r0, r5
   11c74:	f01a f81f 	bl	2bcb6 <memset>
            nus_tx_subscribe_params.value_handle = nus_tx_handle;
   11c78:	883b      	ldrh	r3, [r7, #0]
   11c7a:	81ab      	strh	r3, [r5, #12]
            nus_tx_subscribe_params.notify = nus_notify_callback;
   11c7c:	4b2f      	ldr	r3, [pc, #188]	; (11d3c <descriptor_discover_func+0xf4>)
   11c7e:	602b      	str	r3, [r5, #0]
            err = bt_gatt_subscribe(conn, &nus_tx_subscribe_params);
   11c80:	4629      	mov	r1, r5
   11c82:	f8b8 3000 	ldrh.w	r3, [r8]
   11c86:	81eb      	strh	r3, [r5, #14]
            nus_tx_subscribe_params.value = BT_GATT_CCC_NOTIFY;
   11c88:	2701      	movs	r7, #1
            err = bt_gatt_subscribe(conn, &nus_tx_subscribe_params);
   11c8a:	4630      	mov	r0, r6
            nus_tx_subscribe_params.value = BT_GATT_CCC_NOTIFY;
   11c8c:	822f      	strh	r7, [r5, #16]
            err = bt_gatt_subscribe(conn, &nus_tx_subscribe_params);
   11c8e:	f00c f805 	bl	1dc9c <bt_gatt_subscribe>
            if (err && err != -EALREADY) {
   11c92:	4601      	mov	r1, r0
   11c94:	b308      	cbz	r0, 11cda <descriptor_discover_func+0x92>
   11c96:	f110 0f78 	cmn.w	r0, #120	; 0x78
   11c9a:	d01e      	beq.n	11cda <descriptor_discover_func+0x92>
                printk("Subscribe failed (err %d)\n", err);
   11c9c:	4828      	ldr	r0, [pc, #160]	; (11d40 <descriptor_discover_func+0xf8>)
   11c9e:	f017 fc37 	bl	29510 <printk>
                if (nus_tx_ccc_handle) {
   11ca2:	f8b8 1000 	ldrh.w	r1, [r8]
   11ca6:	b171      	cbz	r1, 11cc6 <descriptor_discover_func+0x7e>
 */
static inline int bt_gatt_write_without_response(struct bt_conn *conn,
						 uint16_t handle, const void *data,
						 uint16_t length, bool sign)
{
	return bt_gatt_write_without_response_cb(conn, handle, data, length,
   11ca8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11cac:	9400      	str	r4, [sp, #0]
   11cae:	2302      	movs	r3, #2
   11cb0:	aa05      	add	r2, sp, #20
   11cb2:	4630      	mov	r0, r6
                    uint16_t ccc_value = BT_GATT_CCC_NOTIFY;
   11cb4:	f8ad 7014 	strh.w	r7, [sp, #20]
   11cb8:	f00b ff90 	bl	1dbdc <bt_gatt_write_without_response_cb>
                    if (err) {
   11cbc:	4601      	mov	r1, r0
   11cbe:	b130      	cbz	r0, 11cce <descriptor_discover_func+0x86>
                        printk("Failed to write CCC (err %d)\n", err);
   11cc0:	4820      	ldr	r0, [pc, #128]	; (11d44 <descriptor_discover_func+0xfc>)
   11cc2:	f017 fc25 	bl	29510 <printk>
        return BT_GATT_ITER_STOP;
   11cc6:	2000      	movs	r0, #0
}
   11cc8:	b006      	add	sp, #24
   11cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        printk("Wrote CCC directly\n");
   11cce:	481e      	ldr	r0, [pc, #120]	; (11d48 <descriptor_discover_func+0x100>)
   11cd0:	f017 fc1e 	bl	29510 <printk>
                        subscription_active = true;
   11cd4:	4b1d      	ldr	r3, [pc, #116]	; (11d4c <descriptor_discover_func+0x104>)
   11cd6:	701f      	strb	r7, [r3, #0]
   11cd8:	e7f5      	b.n	11cc6 <descriptor_discover_func+0x7e>
                printk("Subscribed to NUS TX characteristic\n");
   11cda:	481d      	ldr	r0, [pc, #116]	; (11d50 <descriptor_discover_func+0x108>)
   11cdc:	f017 fc18 	bl	29510 <printk>
                subscription_active = true;
   11ce0:	4b1a      	ldr	r3, [pc, #104]	; (11d4c <descriptor_discover_func+0x104>)
                k_work_schedule_for_queue(&work_q, &send_test_message_work, K_MSEC(1000));
   11ce2:	491c      	ldr	r1, [pc, #112]	; (11d54 <descriptor_discover_func+0x10c>)
   11ce4:	481c      	ldr	r0, [pc, #112]	; (11d58 <descriptor_discover_func+0x110>)
                subscription_active = true;
   11ce6:	2201      	movs	r2, #1
   11ce8:	701a      	strb	r2, [r3, #0]
                k_work_schedule_for_queue(&work_q, &send_test_message_work, K_MSEC(1000));
   11cea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11cee:	2300      	movs	r3, #0
   11cf0:	f013 fd16 	bl	25720 <k_work_schedule_for_queue>
   11cf4:	e7e7      	b.n	11cc6 <descriptor_discover_func+0x7e>
    printk("Descriptor found, handle: %u\n", attr->handle);
   11cf6:	8a09      	ldrh	r1, [r1, #16]
   11cf8:	4818      	ldr	r0, [pc, #96]	; (11d5c <descriptor_discover_func+0x114>)
   11cfa:	f017 fc09 	bl	29510 <printk>
    if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) == 0) {
   11cfe:	2300      	movs	r3, #0
   11d00:	f88d 3014 	strb.w	r3, [sp, #20]
   11d04:	6820      	ldr	r0, [r4, #0]
   11d06:	f642 1302 	movw	r3, #10498	; 0x2902
   11d0a:	a905      	add	r1, sp, #20
   11d0c:	f8ad 3016 	strh.w	r3, [sp, #22]
   11d10:	f01a f885 	bl	2be1e <bt_uuid_cmp>
   11d14:	b930      	cbnz	r0, 11d24 <descriptor_discover_func+0xdc>
        printk("CCC descriptor found, handle: %u\n", attr->handle);
   11d16:	8a21      	ldrh	r1, [r4, #16]
   11d18:	4811      	ldr	r0, [pc, #68]	; (11d60 <descriptor_discover_func+0x118>)
   11d1a:	f017 fbf9 	bl	29510 <printk>
        nus_tx_ccc_handle = attr->handle;
   11d1e:	4b06      	ldr	r3, [pc, #24]	; (11d38 <descriptor_discover_func+0xf0>)
   11d20:	8a22      	ldrh	r2, [r4, #16]
   11d22:	801a      	strh	r2, [r3, #0]
    return BT_GATT_ITER_CONTINUE;
   11d24:	2001      	movs	r0, #1
   11d26:	e7cf      	b.n	11cc8 <descriptor_discover_func+0x80>
   11d28:	2000430a 	.word	0x2000430a
   11d2c:	00030db5 	.word	0x00030db5
   11d30:	20002d68 	.word	0x20002d68
   11d34:	00030dd4 	.word	0x00030dd4
   11d38:	20004308 	.word	0x20004308
   11d3c:	00011bd5 	.word	0x00011bd5
   11d40:	00030afc 	.word	0x00030afc
   11d44:	00030e06 	.word	0x00030e06
   11d48:	00030e24 	.word	0x00030e24
   11d4c:	2000432a 	.word	0x2000432a
   11d50:	00030b17 	.word	0x00030b17
   11d54:	20001920 	.word	0x20001920
   11d58:	20001980 	.word	0x20001980
   11d5c:	00030e38 	.word	0x00030e38
   11d60:	00030e56 	.word	0x00030e56

00011d64 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11d64:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   11d66:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11d68:	b08a      	sub	sp, #40	; 0x28
   11d6a:	4604      	mov	r4, r0
   11d6c:	460e      	mov	r6, r1
   11d6e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   11d70:	2b03      	cmp	r3, #3
   11d72:	d820      	bhi.n	11db6 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   11d74:	e8df f003 	tbb	[pc, r3]
   11d78:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   11d7c:	4911      	ldr	r1, [pc, #68]	; (11dc4 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   11d7e:	4628      	mov	r0, r5
   11d80:	f019 ff2d 	bl	2bbde <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11d84:	9505      	str	r5, [sp, #20]
   11d86:	7863      	ldrb	r3, [r4, #1]
   11d88:	9304      	str	r3, [sp, #16]
   11d8a:	78a3      	ldrb	r3, [r4, #2]
   11d8c:	9303      	str	r3, [sp, #12]
   11d8e:	78e3      	ldrb	r3, [r4, #3]
   11d90:	9302      	str	r3, [sp, #8]
   11d92:	7923      	ldrb	r3, [r4, #4]
   11d94:	9301      	str	r3, [sp, #4]
   11d96:	7963      	ldrb	r3, [r4, #5]
   11d98:	9300      	str	r3, [sp, #0]
   11d9a:	79a3      	ldrb	r3, [r4, #6]
   11d9c:	4a0a      	ldr	r2, [pc, #40]	; (11dc8 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   11d9e:	211e      	movs	r1, #30
   11da0:	4630      	mov	r0, r6
   11da2:	f017 fbc2 	bl	2952a <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   11da6:	b00a      	add	sp, #40	; 0x28
   11da8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   11daa:	4908      	ldr	r1, [pc, #32]	; (11dcc <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   11dac:	e7e7      	b.n	11d7e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   11dae:	4908      	ldr	r1, [pc, #32]	; (11dd0 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   11db0:	e7e5      	b.n	11d7e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   11db2:	4908      	ldr	r1, [pc, #32]	; (11dd4 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   11db4:	e7e3      	b.n	11d7e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11db6:	4a08      	ldr	r2, [pc, #32]	; (11dd8 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   11db8:	210a      	movs	r1, #10
   11dba:	4628      	mov	r0, r5
   11dbc:	f017 fbb5 	bl	2952a <snprintk>
		break;
   11dc0:	e7e0      	b.n	11d84 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   11dc2:	bf00      	nop
   11dc4:	00030e78 	.word	0x00030e78
   11dc8:	00030e9a 	.word	0x00030e9a
   11dcc:	00030e7f 	.word	0x00030e7f
   11dd0:	00030e86 	.word	0x00030e86
   11dd4:	00030e90 	.word	0x00030e90
   11dd8:	000342a1 	.word	0x000342a1

00011ddc <disconnected>:
{
   11ddc:	b570      	push	{r4, r5, r6, lr}
   11dde:	b088      	sub	sp, #32
   11de0:	460d      	mov	r5, r1
   11de2:	4604      	mov	r4, r0
    if (default_conn != conn) {
   11de4:	4e16      	ldr	r6, [pc, #88]	; (11e40 <disconnected+0x64>)
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11de6:	f01a fbda 	bl	2c59e <bt_conn_get_dst>
   11dea:	4669      	mov	r1, sp
   11dec:	f7ff ffba 	bl	11d64 <bt_addr_le_to_str.constprop.0.isra.0>
    printk("Disconnected from %s (reason 0x%02x)\n", addr, reason);
   11df0:	4814      	ldr	r0, [pc, #80]	; (11e44 <disconnected+0x68>)
   11df2:	462a      	mov	r2, r5
   11df4:	4669      	mov	r1, sp
   11df6:	f017 fb8b 	bl	29510 <printk>
    if (default_conn != conn) {
   11dfa:	6830      	ldr	r0, [r6, #0]
   11dfc:	42a0      	cmp	r0, r4
   11dfe:	d11d      	bne.n	11e3c <disconnected+0x60>
    bt_conn_unref(default_conn);
   11e00:	f01a faf8 	bl	2c3f4 <bt_conn_unref>
    nus_rx_handle = 0;
   11e04:	4b10      	ldr	r3, [pc, #64]	; (11e48 <disconnected+0x6c>)
    default_conn = NULL;
   11e06:	2400      	movs	r4, #0
    nus_rx_handle = 0;
   11e08:	801c      	strh	r4, [r3, #0]
    nus_tx_handle = 0;
   11e0a:	4b10      	ldr	r3, [pc, #64]	; (11e4c <disconnected+0x70>)
    default_conn = NULL;
   11e0c:	6034      	str	r4, [r6, #0]
    nus_tx_handle = 0;
   11e0e:	801c      	strh	r4, [r3, #0]
    nus_tx_ccc_handle = 0;
   11e10:	4b0f      	ldr	r3, [pc, #60]	; (11e50 <disconnected+0x74>)
   11e12:	801c      	strh	r4, [r3, #0]
    connection_stable = false;
   11e14:	4b0f      	ldr	r3, [pc, #60]	; (11e54 <disconnected+0x78>)
   11e16:	701c      	strb	r4, [r3, #0]
    subscription_active = false;
   11e18:	4b0f      	ldr	r3, [pc, #60]	; (11e58 <disconnected+0x7c>)
    if (reason != BT_HCI_ERR_REMOTE_USER_TERM_CONN && 
   11e1a:	2d13      	cmp	r5, #19
    subscription_active = false;
   11e1c:	701c      	strb	r4, [r3, #0]
    if (reason != BT_HCI_ERR_REMOTE_USER_TERM_CONN && 
   11e1e:	d00d      	beq.n	11e3c <disconnected+0x60>
   11e20:	2d16      	cmp	r5, #22
   11e22:	d00b      	beq.n	11e3c <disconnected+0x60>
        printk("Unexpected disconnection, restarting scan...\n");
   11e24:	480d      	ldr	r0, [pc, #52]	; (11e5c <disconnected+0x80>)
   11e26:	f017 fb73 	bl	29510 <printk>
        is_scanning = false;
   11e2a:	4b0d      	ldr	r3, [pc, #52]	; (11e60 <disconnected+0x84>)
        k_work_schedule_for_queue(&work_q, &start_scan_work, K_MSEC(2000));
   11e2c:	490d      	ldr	r1, [pc, #52]	; (11e64 <disconnected+0x88>)
        is_scanning = false;
   11e2e:	701c      	strb	r4, [r3, #0]
        k_work_schedule_for_queue(&work_q, &start_scan_work, K_MSEC(2000));
   11e30:	480d      	ldr	r0, [pc, #52]	; (11e68 <disconnected+0x8c>)
   11e32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11e36:	2300      	movs	r3, #0
   11e38:	f013 fc72 	bl	25720 <k_work_schedule_for_queue>
}
   11e3c:	b008      	add	sp, #32
   11e3e:	bd70      	pop	{r4, r5, r6, pc}
   11e40:	20002d98 	.word	0x20002d98
   11e44:	00030ebd 	.word	0x00030ebd
   11e48:	2000430c 	.word	0x2000430c
   11e4c:	2000430a 	.word	0x2000430a
   11e50:	20004308 	.word	0x20004308
   11e54:	2000432b 	.word	0x2000432b
   11e58:	2000432a 	.word	0x2000432a
   11e5c:	00030ee3 	.word	0x00030ee3
   11e60:	2000432c 	.word	0x2000432c
   11e64:	20001950 	.word	0x20001950
   11e68:	20001980 	.word	0x20001980

00011e6c <device_found>:
{
   11e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e6e:	b091      	sub	sp, #68	; 0x44
   11e70:	460f      	mov	r7, r1
   11e72:	461c      	mov	r4, r3
    bt_addr_le_to_str(addr, dev, sizeof(dev));
   11e74:	a908      	add	r1, sp, #32
{
   11e76:	4615      	mov	r5, r2
   11e78:	4606      	mov	r6, r0
    bt_addr_le_to_str(addr, dev, sizeof(dev));
   11e7a:	f7ff ff73 	bl	11d64 <bt_addr_le_to_str.constprop.0.isra.0>
    printk("[DEVICE]: %s, AD evt type %u, AD data len %u, RSSI %i\n",
   11e7e:	9700      	str	r7, [sp, #0]
   11e80:	88a3      	ldrh	r3, [r4, #4]
   11e82:	4820      	ldr	r0, [pc, #128]	; (11f04 <device_found+0x98>)
   11e84:	462a      	mov	r2, r5
   11e86:	a908      	add	r1, sp, #32
   11e88:	f017 fb42 	bl	29510 <printk>
    if ((type == BT_GAP_ADV_TYPE_ADV_IND ||
   11e8c:	2d01      	cmp	r5, #1
   11e8e:	d814      	bhi.n	11eba <device_found+0x4e>
         type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) && ad->len > 0) {
   11e90:	88a3      	ldrh	r3, [r4, #4]
   11e92:	b193      	cbz	r3, 11eba <device_found+0x4e>
        device_found_flag = false;
   11e94:	4d1c      	ldr	r5, [pc, #112]	; (11f08 <device_found+0x9c>)
        bt_data_parse(ad, check_device_name, NULL);
   11e96:	491d      	ldr	r1, [pc, #116]	; (11f0c <device_found+0xa0>)
        device_found_flag = false;
   11e98:	2200      	movs	r2, #0
        bt_data_parse(ad, check_device_name, NULL);
   11e9a:	4620      	mov	r0, r4
        device_found_flag = false;
   11e9c:	702a      	strb	r2, [r5, #0]
        bt_data_parse(ad, check_device_name, NULL);
   11e9e:	f004 fd7b 	bl	16998 <bt_data_parse>
        if (device_found_flag) {
   11ea2:	782b      	ldrb	r3, [r5, #0]
   11ea4:	b14b      	cbz	r3, 11eba <device_found+0x4e>
            printk("Stopping scan to connect...\n");
   11ea6:	481a      	ldr	r0, [pc, #104]	; (11f10 <device_found+0xa4>)
   11ea8:	f017 fb32 	bl	29510 <printk>
            err = bt_le_scan_stop();
   11eac:	f007 f8d2 	bl	19054 <bt_le_scan_stop>
            if (err) {
   11eb0:	4601      	mov	r1, r0
   11eb2:	b120      	cbz	r0, 11ebe <device_found+0x52>
                printk("Stop LE scan failed (err %d)\n", err);
   11eb4:	4817      	ldr	r0, [pc, #92]	; (11f14 <device_found+0xa8>)
   11eb6:	f017 fb2b 	bl	29510 <printk>
}
   11eba:	b011      	add	sp, #68	; 0x44
   11ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            is_scanning = false;
   11ebe:	4b16      	ldr	r3, [pc, #88]	; (11f18 <device_found+0xac>)
   11ec0:	7018      	strb	r0, [r3, #0]
            printk("Initiating connection to RentScan device...\n");
   11ec2:	4816      	ldr	r0, [pc, #88]	; (11f1c <device_found+0xb0>)
   11ec4:	f017 fb24 	bl	29510 <printk>
            struct bt_le_conn_param *param = BT_LE_CONN_PARAM_DEFAULT;
   11ec8:	4a15      	ldr	r2, [pc, #84]	; (11f20 <device_found+0xb4>)
   11eca:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   11ece:	e9cd 2302 	strd	r2, r3, [sp, #8]
            err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN, param, &default_conn);
   11ed2:	4b14      	ldr	r3, [pc, #80]	; (11f24 <device_found+0xb8>)
   11ed4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11ed6:	ac04      	add	r4, sp, #16
   11ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   11edc:	4621      	mov	r1, r4
   11ede:	4b12      	ldr	r3, [pc, #72]	; (11f28 <device_found+0xbc>)
   11ee0:	aa02      	add	r2, sp, #8
   11ee2:	4630      	mov	r0, r6
   11ee4:	f008 f82c 	bl	19f40 <bt_conn_le_create>
            if (err) {
   11ee8:	4601      	mov	r1, r0
   11eea:	2800      	cmp	r0, #0
   11eec:	d0e5      	beq.n	11eba <device_found+0x4e>
                printk("Create conn failed (err %d)\n", err);
   11eee:	480f      	ldr	r0, [pc, #60]	; (11f2c <device_found+0xc0>)
   11ef0:	f017 fb0e 	bl	29510 <printk>
                k_work_schedule_for_queue(&work_q, &start_scan_work, K_MSEC(1000));
   11ef4:	490e      	ldr	r1, [pc, #56]	; (11f30 <device_found+0xc4>)
   11ef6:	480f      	ldr	r0, [pc, #60]	; (11f34 <device_found+0xc8>)
   11ef8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11efc:	2300      	movs	r3, #0
   11efe:	f013 fc0f 	bl	25720 <k_work_schedule_for_queue>
   11f02:	e7da      	b.n	11eba <device_found+0x4e>
   11f04:	00030f11 	.word	0x00030f11
   11f08:	2000432d 	.word	0x2000432d
   11f0c:	00011b65 	.word	0x00011b65
   11f10:	00030f48 	.word	0x00030f48
   11f14:	00030f65 	.word	0x00030f65
   11f18:	2000432c 	.word	0x2000432c
   11f1c:	00030f83 	.word	0x00030f83
   11f20:	00280018 	.word	0x00280018
   11f24:	0002fdd4 	.word	0x0002fdd4
   11f28:	20002d98 	.word	0x20002d98
   11f2c:	00030fb0 	.word	0x00030fb0
   11f30:	20001950 	.word	0x20001950
   11f34:	20001980 	.word	0x20001980

00011f38 <send_to_peripheral>:
{
   11f38:	b530      	push	{r4, r5, lr}
    if (!default_conn || !nus_rx_handle) {
   11f3a:	4a11      	ldr	r2, [pc, #68]	; (11f80 <send_to_peripheral+0x48>)
{
   11f3c:	4605      	mov	r5, r0
    if (!default_conn || !nus_rx_handle) {
   11f3e:	6810      	ldr	r0, [r2, #0]
{
   11f40:	b085      	sub	sp, #20
   11f42:	460b      	mov	r3, r1
    if (!default_conn || !nus_rx_handle) {
   11f44:	b110      	cbz	r0, 11f4c <send_to_peripheral+0x14>
   11f46:	4a0f      	ldr	r2, [pc, #60]	; (11f84 <send_to_peripheral+0x4c>)
   11f48:	8811      	ldrh	r1, [r2, #0]
   11f4a:	b939      	cbnz	r1, 11f5c <send_to_peripheral+0x24>
        printk("Not connected or NUS RX handle not found\n");
   11f4c:	480e      	ldr	r0, [pc, #56]	; (11f88 <send_to_peripheral+0x50>)
   11f4e:	f017 fadf 	bl	29510 <printk>
        return -EINVAL;
   11f52:	f06f 0415 	mvn.w	r4, #21
}
   11f56:	4620      	mov	r0, r4
   11f58:	b005      	add	sp, #20
   11f5a:	bd30      	pop	{r4, r5, pc}
   11f5c:	2200      	movs	r2, #0
   11f5e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   11f62:	9200      	str	r2, [sp, #0]
   11f64:	462a      	mov	r2, r5
   11f66:	f00b fe39 	bl	1dbdc <bt_gatt_write_without_response_cb>
    if (err) {
   11f6a:	4604      	mov	r4, r0
   11f6c:	b120      	cbz	r0, 11f78 <send_to_peripheral+0x40>
        printk("Failed to send message (err %d)\n", err);
   11f6e:	4601      	mov	r1, r0
   11f70:	4806      	ldr	r0, [pc, #24]	; (11f8c <send_to_peripheral+0x54>)
        printk("Sent to peripheral: %s\n", data);
   11f72:	f017 facd 	bl	29510 <printk>
   11f76:	e7ee      	b.n	11f56 <send_to_peripheral+0x1e>
   11f78:	4805      	ldr	r0, [pc, #20]	; (11f90 <send_to_peripheral+0x58>)
   11f7a:	4629      	mov	r1, r5
   11f7c:	e7f9      	b.n	11f72 <send_to_peripheral+0x3a>
   11f7e:	bf00      	nop
   11f80:	20002d98 	.word	0x20002d98
   11f84:	2000430c 	.word	0x2000430c
   11f88:	00030fcd 	.word	0x00030fcd
   11f8c:	00030ff7 	.word	0x00030ff7
   11f90:	00031018 	.word	0x00031018

00011f94 <send_test_message_handler>:
{
   11f94:	b510      	push	{r4, lr}
    if (default_conn && nus_rx_handle) {
   11f96:	4b12      	ldr	r3, [pc, #72]	; (11fe0 <send_test_message_handler+0x4c>)
   11f98:	681b      	ldr	r3, [r3, #0]
   11f9a:	b1e3      	cbz	r3, 11fd6 <send_test_message_handler+0x42>
   11f9c:	4b11      	ldr	r3, [pc, #68]	; (11fe4 <send_test_message_handler+0x50>)
   11f9e:	881b      	ldrh	r3, [r3, #0]
   11fa0:	b1cb      	cbz	r3, 11fd6 <send_test_message_handler+0x42>
        int err = send_to_peripheral(test_msg, strlen(test_msg));
   11fa2:	4811      	ldr	r0, [pc, #68]	; (11fe8 <send_test_message_handler+0x54>)
   11fa4:	f019 fe25 	bl	2bbf2 <strlen>
   11fa8:	b281      	uxth	r1, r0
   11faa:	480f      	ldr	r0, [pc, #60]	; (11fe8 <send_test_message_handler+0x54>)
   11fac:	f7ff ffc4 	bl	11f38 <send_to_peripheral>
        if (err) {
   11fb0:	4601      	mov	r1, r0
   11fb2:	b158      	cbz	r0, 11fcc <send_test_message_handler+0x38>
            printk("Failed to send test message (err %d)\n", err);
   11fb4:	480d      	ldr	r0, [pc, #52]	; (11fec <send_test_message_handler+0x58>)
   11fb6:	f017 faab 	bl	29510 <printk>
}
   11fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        k_work_schedule_for_queue(&work_q, &send_test_message_work, K_MSEC(2000));
   11fbe:	490c      	ldr	r1, [pc, #48]	; (11ff0 <send_test_message_handler+0x5c>)
   11fc0:	480c      	ldr	r0, [pc, #48]	; (11ff4 <send_test_message_handler+0x60>)
   11fc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11fc6:	2300      	movs	r3, #0
   11fc8:	f013 bbaa 	b.w	25720 <k_work_schedule_for_queue>
}
   11fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Test message sent successfully\n");
   11fd0:	4809      	ldr	r0, [pc, #36]	; (11ff8 <send_test_message_handler+0x64>)
   11fd2:	f017 ba9d 	b.w	29510 <printk>
        printk("Not connected, delaying test message\n");
   11fd6:	4809      	ldr	r0, [pc, #36]	; (11ffc <send_test_message_handler+0x68>)
   11fd8:	f017 fa9a 	bl	29510 <printk>
   11fdc:	e7ed      	b.n	11fba <send_test_message_handler+0x26>
   11fde:	bf00      	nop
   11fe0:	20002d98 	.word	0x20002d98
   11fe4:	2000430c 	.word	0x2000430c
   11fe8:	00031030 	.word	0x00031030
   11fec:	00031044 	.word	0x00031044
   11ff0:	20001920 	.word	0x20001920
   11ff4:	20001980 	.word	0x20001980
   11ff8:	0003106a 	.word	0x0003106a
   11ffc:	0003108a 	.word	0x0003108a

00012000 <connected>:
{
   12000:	b5f0      	push	{r4, r5, r6, r7, lr}
   12002:	b08f      	sub	sp, #60	; 0x3c
   12004:	460c      	mov	r4, r1
   12006:	4606      	mov	r6, r0
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   12008:	f01a fac9 	bl	2c59e <bt_conn_get_dst>
   1200c:	a906      	add	r1, sp, #24
   1200e:	f7ff fea9 	bl	11d64 <bt_addr_le_to_str.constprop.0.isra.0>
    if (conn_err) {
   12012:	4d2c      	ldr	r5, [pc, #176]	; (120c4 <connected+0xc4>)
   12014:	b1c4      	cbz	r4, 12048 <connected+0x48>
        printk("Failed to connect to %s (err %u)\n", addr, conn_err);
   12016:	482c      	ldr	r0, [pc, #176]	; (120c8 <connected+0xc8>)
   12018:	4622      	mov	r2, r4
   1201a:	a906      	add	r1, sp, #24
   1201c:	f017 fa78 	bl	29510 <printk>
        if (default_conn) {
   12020:	6828      	ldr	r0, [r5, #0]
   12022:	b118      	cbz	r0, 1202c <connected+0x2c>
            bt_conn_unref(default_conn);
   12024:	f01a f9e6 	bl	2c3f4 <bt_conn_unref>
            default_conn = NULL;
   12028:	2300      	movs	r3, #0
   1202a:	602b      	str	r3, [r5, #0]
        is_scanning = false;
   1202c:	4a27      	ldr	r2, [pc, #156]	; (120cc <connected+0xcc>)
        k_work_schedule_for_queue(&work_q, &start_scan_work, K_MSEC(1000));
   1202e:	4928      	ldr	r1, [pc, #160]	; (120d0 <connected+0xd0>)
   12030:	4828      	ldr	r0, [pc, #160]	; (120d4 <connected+0xd4>)
        is_scanning = false;
   12032:	2300      	movs	r3, #0
   12034:	7013      	strb	r3, [r2, #0]
        connection_stable = false;
   12036:	4a28      	ldr	r2, [pc, #160]	; (120d8 <connected+0xd8>)
   12038:	7013      	strb	r3, [r2, #0]
        k_work_schedule_for_queue(&work_q, &start_scan_work, K_MSEC(1000));
   1203a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1203e:	2300      	movs	r3, #0
   12040:	f013 fb6e 	bl	25720 <k_work_schedule_for_queue>
}
   12044:	b00f      	add	sp, #60	; 0x3c
   12046:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printk("Connected to RentScan device: %s\n", addr);
   12048:	4824      	ldr	r0, [pc, #144]	; (120dc <connected+0xdc>)
   1204a:	a906      	add	r1, sp, #24
   1204c:	f017 fa60 	bl	29510 <printk>
    if (conn == default_conn) {
   12050:	682b      	ldr	r3, [r5, #0]
   12052:	42b3      	cmp	r3, r6
   12054:	d1f6      	bne.n	12044 <connected+0x44>
        nus_rx_handle = 0;
   12056:	4b22      	ldr	r3, [pc, #136]	; (120e0 <connected+0xe0>)
   12058:	801c      	strh	r4, [r3, #0]
        nus_tx_handle = 0;
   1205a:	4b22      	ldr	r3, [pc, #136]	; (120e4 <connected+0xe4>)
   1205c:	801c      	strh	r4, [r3, #0]
        nus_tx_ccc_handle = 0;
   1205e:	4b22      	ldr	r3, [pc, #136]	; (120e8 <connected+0xe8>)
   12060:	801c      	strh	r4, [r3, #0]
        subscription_active = false;
   12062:	4b22      	ldr	r3, [pc, #136]	; (120ec <connected+0xec>)
   12064:	701c      	strb	r4, [r3, #0]
	return z_impl_k_sleep(timeout);
   12066:	2100      	movs	r1, #0
   12068:	f641 109a 	movw	r0, #6554	; 0x199a
   1206c:	f013 fe7e 	bl	25d6c <z_impl_k_sleep>
        memset(&discover_params, 0, sizeof(discover_params));
   12070:	2214      	movs	r2, #20
   12072:	481f      	ldr	r0, [pc, #124]	; (120f0 <connected+0xf0>)
   12074:	4621      	mov	r1, r4
   12076:	f019 fe1e 	bl	2bcb6 <memset>
        discover_params.uuid = BT_UUID_NUS_SERVICE;
   1207a:	4b1e      	ldr	r3, [pc, #120]	; (120f4 <connected+0xf4>)
   1207c:	aa01      	add	r2, sp, #4
   1207e:	f103 0710 	add.w	r7, r3, #16
   12082:	4616      	mov	r6, r2
   12084:	6818      	ldr	r0, [r3, #0]
   12086:	6859      	ldr	r1, [r3, #4]
   12088:	4614      	mov	r4, r2
   1208a:	c403      	stmia	r4!, {r0, r1}
   1208c:	3308      	adds	r3, #8
   1208e:	42bb      	cmp	r3, r7
   12090:	4622      	mov	r2, r4
   12092:	d1f7      	bne.n	12084 <connected+0x84>
   12094:	4916      	ldr	r1, [pc, #88]	; (120f0 <connected+0xf0>)
   12096:	781b      	ldrb	r3, [r3, #0]
   12098:	7023      	strb	r3, [r4, #0]
        discover_params.func = service_discover_func;
   1209a:	4b17      	ldr	r3, [pc, #92]	; (120f8 <connected+0xf8>)
   1209c:	604b      	str	r3, [r1, #4]
        discover_params.start_handle = 0x0001;
   1209e:	2301      	movs	r3, #1
   120a0:	810b      	strh	r3, [r1, #8]
        discover_params.end_handle = 0xffff;
   120a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   120a6:	81cb      	strh	r3, [r1, #14]
        err = bt_gatt_discover(default_conn, &discover_params);
   120a8:	6828      	ldr	r0, [r5, #0]
        discover_params.uuid = BT_UUID_NUS_SERVICE;
   120aa:	600e      	str	r6, [r1, #0]
        discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   120ac:	2300      	movs	r3, #0
   120ae:	740b      	strb	r3, [r1, #16]
        err = bt_gatt_discover(default_conn, &discover_params);
   120b0:	f00b f9ac 	bl	1d40c <bt_gatt_discover>
        if (err) {
   120b4:	4601      	mov	r1, r0
   120b6:	2800      	cmp	r0, #0
   120b8:	d0c4      	beq.n	12044 <connected+0x44>
            printk("Service discover failed (err %d)\n", err);
   120ba:	4810      	ldr	r0, [pc, #64]	; (120fc <connected+0xfc>)
   120bc:	f017 fa28 	bl	29510 <printk>
            return;
   120c0:	e7c0      	b.n	12044 <connected+0x44>
   120c2:	bf00      	nop
   120c4:	20002d98 	.word	0x20002d98
   120c8:	000310b0 	.word	0x000310b0
   120cc:	2000432c 	.word	0x2000432c
   120d0:	20001950 	.word	0x20001950
   120d4:	20001980 	.word	0x20001980
   120d8:	2000432b 	.word	0x2000432b
   120dc:	000310d2 	.word	0x000310d2
   120e0:	2000430c 	.word	0x2000430c
   120e4:	2000430a 	.word	0x2000430a
   120e8:	20004308 	.word	0x20004308
   120ec:	2000432a 	.word	0x2000432a
   120f0:	20002d84 	.word	0x20002d84
   120f4:	0002fde4 	.word	0x0002fde4
   120f8:	0001188d 	.word	0x0001188d
   120fc:	000310f4 	.word	0x000310f4

00012100 <main>:
    // Start scanning
    start_scan();
}

void main(void)
{
   12100:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    printk("RentScan Central Application\n");
   12104:	483e      	ldr	r0, [pc, #248]	; (12200 <main+0x100>)
    
    // Initialize the work queue
    k_work_queue_start(&work_q, work_q_stack,
   12106:	2400      	movs	r4, #0
    printk("RentScan Central Application\n");
   12108:	f017 fa02 	bl	29510 <printk>
    k_work_queue_start(&work_q, work_q_stack,
   1210c:	f06f 0301 	mvn.w	r3, #1
   12110:	f44f 6200 	mov.w	r2, #2048	; 0x800
   12114:	493b      	ldr	r1, [pc, #236]	; (12204 <main+0x104>)
   12116:	483c      	ldr	r0, [pc, #240]	; (12208 <main+0x108>)
   12118:	9400      	str	r4, [sp, #0]
   1211a:	f013 fac9 	bl	256b0 <k_work_queue_start>
                      K_THREAD_STACK_SIZEOF(work_q_stack),
                      CONFIG_SYSTEM_WORKQUEUE_PRIORITY - 1, NULL);
    
    // Initialize delayed work items
    k_work_init_delayable(&start_scan_work, start_scan_handler);
   1211e:	493b      	ldr	r1, [pc, #236]	; (1220c <main+0x10c>)
   12120:	483b      	ldr	r0, [pc, #236]	; (12210 <main+0x110>)
   12122:	f01d f81d 	bl	2f160 <k_work_init_delayable>
    k_work_init_delayable(&send_test_message_work, send_test_message_handler);
   12126:	493b      	ldr	r1, [pc, #236]	; (12214 <main+0x114>)
   12128:	483b      	ldr	r0, [pc, #236]	; (12218 <main+0x118>)
   1212a:	f01d f819 	bl	2f160 <k_work_init_delayable>
    printk("Initializing BT subsystem...\n");
   1212e:	483b      	ldr	r0, [pc, #236]	; (1221c <main+0x11c>)
   12130:	f017 f9ee 	bl	29510 <printk>
    int err = bt_enable(NULL);
   12134:	4620      	mov	r0, r4
   12136:	f006 f8ab 	bl	18290 <bt_enable>
    if (err) {
   1213a:	4601      	mov	r1, r0
   1213c:	b190      	cbz	r0, 12164 <main+0x64>
        printk("Bluetooth init failed (err %d)\n", err);
   1213e:	4838      	ldr	r0, [pc, #224]	; (12220 <main+0x120>)
   12140:	f017 f9e6 	bl	29510 <printk>
    
    // Start the initialization process
    init_bt();
    
    // Main application loop - now just wait for NFC events
    printk("Waiting for NFC events from peripheral...\n");
   12144:	4837      	ldr	r0, [pc, #220]	; (12224 <main+0x124>)
    
    while (1) {
        // Periodically check connection status
        if (default_conn) {
   12146:	4d38      	ldr	r5, [pc, #224]	; (12228 <main+0x128>)
            if (subscription_active) {
   12148:	4e38      	ldr	r6, [pc, #224]	; (1222c <main+0x12c>)
                printk("Connection active with notifications enabled\n");
            } else {
                printk("Connected but notifications not enabled. Trying to send a test message...\n");
   1214a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 12230 <main+0x130>
    printk("Waiting for NFC events from peripheral...\n");
   1214e:	f017 f9df 	bl	29510 <printk>
        if (default_conn) {
   12152:	682b      	ldr	r3, [r5, #0]
   12154:	2b00      	cmp	r3, #0
   12156:	d04b      	beq.n	121f0 <main+0xf0>
            if (subscription_active) {
   12158:	7833      	ldrb	r3, [r6, #0]
   1215a:	b1cb      	cbz	r3, 12190 <main+0x90>
                printk("Connection active with notifications enabled\n");
   1215c:	4835      	ldr	r0, [pc, #212]	; (12234 <main+0x134>)
                    
                    int err = bt_gatt_subscribe(default_conn, &nus_tx_subscribe_params);
                    if (err && err != -EALREADY) {
                        printk("Subscribe failed (err %d)\n", err);
                    } else {
                        printk("Subscription attempt made\n");
   1215e:	f017 f9d7 	bl	29510 <printk>
   12162:	e045      	b.n	121f0 <main+0xf0>
    printk("Bluetooth initialized successfully\n");
   12164:	4834      	ldr	r0, [pc, #208]	; (12238 <main+0x138>)
   12166:	f017 f9d3 	bl	29510 <printk>
    err = settings_load();
   1216a:	f018 fa86 	bl	2a67a <settings_load>
    if (err) {
   1216e:	4601      	mov	r1, r0
   12170:	b110      	cbz	r0, 12178 <main+0x78>
        printk("Failed to load settings (err %d)\n", err);
   12172:	4832      	ldr	r0, [pc, #200]	; (1223c <main+0x13c>)
   12174:	f017 f9cc 	bl	29510 <printk>
   12178:	2100      	movs	r1, #0
   1217a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   1217e:	f013 fdf5 	bl	25d6c <z_impl_k_sleep>
    k_work_schedule_for_queue(&work_q, &start_scan_work, K_NO_WAIT);
   12182:	4923      	ldr	r1, [pc, #140]	; (12210 <main+0x110>)
   12184:	4820      	ldr	r0, [pc, #128]	; (12208 <main+0x108>)
   12186:	2200      	movs	r2, #0
   12188:	2300      	movs	r3, #0
   1218a:	f013 fac9 	bl	25720 <k_work_schedule_for_queue>
   1218e:	e7d9      	b.n	12144 <main+0x44>
                printk("Connected but notifications not enabled. Trying to send a test message...\n");
   12190:	4648      	mov	r0, r9
   12192:	f017 f9bd 	bl	29510 <printk>
                send_to_peripheral(hello_msg, strlen(hello_msg));
   12196:	482a      	ldr	r0, [pc, #168]	; (12240 <main+0x140>)
                if (nus_tx_handle && !subscription_active) {
   12198:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 12244 <main+0x144>
                send_to_peripheral(hello_msg, strlen(hello_msg));
   1219c:	f019 fd29 	bl	2bbf2 <strlen>
   121a0:	b281      	uxth	r1, r0
   121a2:	4827      	ldr	r0, [pc, #156]	; (12240 <main+0x140>)
   121a4:	f7ff fec8 	bl	11f38 <send_to_peripheral>
                if (nus_tx_handle && !subscription_active) {
   121a8:	f8b8 3000 	ldrh.w	r3, [r8]
   121ac:	b303      	cbz	r3, 121f0 <main+0xf0>
   121ae:	7833      	ldrb	r3, [r6, #0]
   121b0:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   121b4:	b9e3      	cbnz	r3, 121f0 <main+0xf0>
                    memset(&nus_tx_subscribe_params, 0, sizeof(nus_tx_subscribe_params));
   121b6:	4c24      	ldr	r4, [pc, #144]	; (12248 <main+0x148>)
                    printk("Re-subscribing to notifications...\n");
   121b8:	4824      	ldr	r0, [pc, #144]	; (1224c <main+0x14c>)
   121ba:	f017 f9a9 	bl	29510 <printk>
                    memset(&nus_tx_subscribe_params, 0, sizeof(nus_tx_subscribe_params));
   121be:	221c      	movs	r2, #28
   121c0:	4639      	mov	r1, r7
   121c2:	4620      	mov	r0, r4
   121c4:	f019 fd77 	bl	2bcb6 <memset>
                    nus_tx_subscribe_params.value_handle = nus_tx_handle;
   121c8:	f8b8 3000 	ldrh.w	r3, [r8]
   121cc:	81a3      	strh	r3, [r4, #12]
                    nus_tx_subscribe_params.notify = nus_notify_callback;
   121ce:	4b20      	ldr	r3, [pc, #128]	; (12250 <main+0x150>)
   121d0:	6023      	str	r3, [r4, #0]
                    int err = bt_gatt_subscribe(default_conn, &nus_tx_subscribe_params);
   121d2:	4621      	mov	r1, r4
                    nus_tx_subscribe_params.value = BT_GATT_CCC_NOTIFY;
   121d4:	2301      	movs	r3, #1
                    int err = bt_gatt_subscribe(default_conn, &nus_tx_subscribe_params);
   121d6:	6828      	ldr	r0, [r5, #0]
                    nus_tx_subscribe_params.value = BT_GATT_CCC_NOTIFY;
   121d8:	8223      	strh	r3, [r4, #16]
                    nus_tx_subscribe_params.ccc_handle = 0; // Auto-discover
   121da:	81e7      	strh	r7, [r4, #14]
                    int err = bt_gatt_subscribe(default_conn, &nus_tx_subscribe_params);
   121dc:	f00b fd5e 	bl	1dc9c <bt_gatt_subscribe>
                    if (err && err != -EALREADY) {
   121e0:	4601      	mov	r1, r0
   121e2:	b158      	cbz	r0, 121fc <main+0xfc>
   121e4:	f110 0f78 	cmn.w	r0, #120	; 0x78
   121e8:	d008      	beq.n	121fc <main+0xfc>
                        printk("Subscribe failed (err %d)\n", err);
   121ea:	481a      	ldr	r0, [pc, #104]	; (12254 <main+0x154>)
   121ec:	f017 f990 	bl	29510 <printk>
   121f0:	2100      	movs	r1, #0
   121f2:	f44f 3020 	mov.w	r0, #163840	; 0x28000
   121f6:	f013 fdb9 	bl	25d6c <z_impl_k_sleep>
    while (1) {
   121fa:	e7aa      	b.n	12152 <main+0x52>
                        printk("Subscription attempt made\n");
   121fc:	4816      	ldr	r0, [pc, #88]	; (12258 <main+0x158>)
   121fe:	e7ae      	b.n	1215e <main+0x5e>
   12200:	00031116 	.word	0x00031116
   12204:	200049c0 	.word	0x200049c0
   12208:	20001980 	.word	0x20001980
   1220c:	00011ab9 	.word	0x00011ab9
   12210:	20001950 	.word	0x20001950
   12214:	00011f95 	.word	0x00011f95
   12218:	20001920 	.word	0x20001920
   1221c:	00031134 	.word	0x00031134
   12220:	00031152 	.word	0x00031152
   12224:	000311b8 	.word	0x000311b8
   12228:	20002d98 	.word	0x20002d98
   1222c:	2000432a 	.word	0x2000432a
   12230:	00031211 	.word	0x00031211
   12234:	000311e3 	.word	0x000311e3
   12238:	00031172 	.word	0x00031172
   1223c:	00031196 	.word	0x00031196
   12240:	0003125c 	.word	0x0003125c
   12244:	2000430a 	.word	0x2000430a
   12248:	20002d68 	.word	0x20002d68
   1224c:	0003126f 	.word	0x0003126f
   12250:	00011bd5 	.word	0x00011bd5
   12254:	00030afc 	.word	0x00030afc
   12258:	00031293 	.word	0x00031293

0001225c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   1225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12260:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   12262:	0784      	lsls	r4, r0, #30
{
   12264:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   12266:	f002 0304 	and.w	r3, r2, #4
   1226a:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1226c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   12270:	f103 0301 	add.w	r3, r3, #1
   12274:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
   12278:	9203      	str	r2, [sp, #12]
   1227a:	4605      	mov	r5, r0
   1227c:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1227e:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   12280:	f040 81be 	bne.w	12600 <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   12284:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   12286:	b130      	cbz	r0, 12296 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   12288:	2907      	cmp	r1, #7
   1228a:	d809      	bhi.n	122a0 <cbvprintf_package+0x44>
		return -ENOSPC;
   1228c:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   12290:	b011      	add	sp, #68	; 0x44
   12292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   12296:	f001 0607 	and.w	r6, r1, #7
   1229a:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   1229c:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   122a0:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   122a2:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
   122a6:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
   122a8:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   122ac:	f04f 33ff 	mov.w	r3, #4294967295
   122b0:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   122b2:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   122b6:	464f      	mov	r7, r9
	bool parsing = false;
   122b8:	46cb      	mov	fp, r9
	size = sizeof(char *);
   122ba:	4653      	mov	r3, sl
			if (buf0 != NULL) {
   122bc:	b10d      	cbz	r5, 122c2 <cbvprintf_package+0x66>
				*(const char **)buf = s;
   122be:	9a00      	ldr	r2, [sp, #0]
   122c0:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   122c2:	9805      	ldr	r0, [sp, #20]
   122c4:	2800      	cmp	r0, #0
   122c6:	f300 80eb 	bgt.w	124a0 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   122ca:	489a      	ldr	r0, [pc, #616]	; (12534 <cbvprintf_package+0x2d8>)
   122cc:	9a00      	ldr	r2, [sp, #0]
   122ce:	4282      	cmp	r2, r0
   122d0:	d303      	bcc.n	122da <cbvprintf_package+0x7e>
   122d2:	4899      	ldr	r0, [pc, #612]	; (12538 <cbvprintf_package+0x2dc>)
   122d4:	4282      	cmp	r2, r0
   122d6:	f0c0 80e3 	bcc.w	124a0 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   122da:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   122dc:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   122e0:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   122e2:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   122e6:	f100 8106 	bmi.w	124f6 <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   122ea:	2f0f      	cmp	r7, #15
   122ec:	f200 80b4 	bhi.w	12458 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   122f0:	2d00      	cmp	r5, #0
   122f2:	f000 8108 	beq.w	12506 <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
   122f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
   122fa:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   122fe:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   12300:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   12304:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   12308:	9804      	ldr	r0, [sp, #16]
   1230a:	3001      	adds	r0, #1
   1230c:	9004      	str	r0, [sp, #16]
   1230e:	e0ea      	b.n	124e6 <cbvprintf_package+0x28a>
			switch (*fmt) {
   12310:	287a      	cmp	r0, #122	; 0x7a
   12312:	d860      	bhi.n	123d6 <cbvprintf_package+0x17a>
   12314:	284b      	cmp	r0, #75	; 0x4b
   12316:	d80e      	bhi.n	12336 <cbvprintf_package+0xda>
   12318:	2847      	cmp	r0, #71	; 0x47
   1231a:	d85c      	bhi.n	123d6 <cbvprintf_package+0x17a>
   1231c:	2829      	cmp	r0, #41	; 0x29
   1231e:	d82f      	bhi.n	12380 <cbvprintf_package+0x124>
   12320:	2825      	cmp	r0, #37	; 0x25
   12322:	d055      	beq.n	123d0 <cbvprintf_package+0x174>
   12324:	d857      	bhi.n	123d6 <cbvprintf_package+0x17a>
   12326:	2820      	cmp	r0, #32
   12328:	d07d      	beq.n	12426 <cbvprintf_package+0x1ca>
   1232a:	3823      	subs	r0, #35	; 0x23
   1232c:	f1d0 0b00 	rsbs	fp, r0, #0
   12330:	eb4b 0b00 	adc.w	fp, fp, r0
   12334:	e077      	b.n	12426 <cbvprintf_package+0x1ca>
   12336:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   1233a:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   1233e:	d84a      	bhi.n	123d6 <cbvprintf_package+0x17a>
   12340:	e8df f00c 	tbb	[pc, ip]
   12344:	49494971 	.word	0x49494971
   12348:	49494949 	.word	0x49494949
   1234c:	49494949 	.word	0x49494949
   12350:	4949494c 	.word	0x4949494c
   12354:	49494949 	.word	0x49494949
   12358:	4c495a49 	.word	0x4c495a49
   1235c:	5a5a5a4c 	.word	0x5a5a5a4c
   12360:	496e4c71 	.word	0x496e4c71
   12364:	4c184971 	.word	0x4c184971
   12368:	83494918 	.word	0x83494918
   1236c:	49494c80 	.word	0x49494c80
   12370:	494c      	.short	0x494c
   12372:	80          	.byte	0x80
   12373:	00          	.byte	0x00
   12374:	2000      	movs	r0, #0
   12376:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   1237a:	f04f 0a04 	mov.w	sl, #4
   1237e:	e039      	b.n	123f4 <cbvprintf_package+0x198>
			switch (*fmt) {
   12380:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   12384:	fa5f fc8c 	uxtb.w	ip, ip
   12388:	2201      	movs	r2, #1
   1238a:	fa02 fc0c 	lsl.w	ip, r2, ip
   1238e:	ea1c 0f0e 	tst.w	ip, lr
   12392:	d148      	bne.n	12426 <cbvprintf_package+0x1ca>
   12394:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   12398:	d12e      	bne.n	123f8 <cbvprintf_package+0x19c>
   1239a:	ea1c 0b02 	ands.w	fp, ip, r2
   1239e:	d042      	beq.n	12426 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
   123a0:	3c01      	subs	r4, #1
   123a2:	4454      	add	r4, sl
   123a4:	f1ca 0c00 	rsb	ip, sl, #0
   123a8:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   123ac:	2d00      	cmp	r5, #0
   123ae:	d061      	beq.n	12474 <cbvprintf_package+0x218>
   123b0:	eba3 0c05 	sub.w	ip, r3, r5
   123b4:	44a4      	add	ip, r4
   123b6:	45b4      	cmp	ip, r6
   123b8:	f63f af68 	bhi.w	1228c <cbvprintf_package+0x30>
		if (is_str_arg) {
   123bc:	2800      	cmp	r0, #0
   123be:	d168      	bne.n	12492 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   123c0:	2b04      	cmp	r3, #4
   123c2:	d147      	bne.n	12454 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
   123c4:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   123c8:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   123ca:	3404      	adds	r4, #4
   123cc:	2304      	movs	r3, #4
   123ce:	e02a      	b.n	12426 <cbvprintf_package+0x1ca>
				arg_idx--;
   123d0:	9a01      	ldr	r2, [sp, #4]
   123d2:	3a01      	subs	r2, #1
   123d4:	9201      	str	r2, [sp, #4]
				parsing = false;
   123d6:	f04f 0b00 	mov.w	fp, #0
				continue;
   123da:	e024      	b.n	12426 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
   123dc:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   123e0:	286c      	cmp	r0, #108	; 0x6c
   123e2:	d134      	bne.n	1244e <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
   123e4:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   123e8:	2000      	movs	r0, #0
   123ea:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   123ec:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   123ee:	d1c4      	bne.n	1237a <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
   123f0:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   123f4:	4653      	mov	r3, sl
   123f6:	e7d3      	b.n	123a0 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
   123f8:	f108 0807 	add.w	r8, r8, #7
   123fc:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   12400:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   12402:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
   12406:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   1240a:	b135      	cbz	r5, 1241a <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
   1240c:	9806      	ldr	r0, [sp, #24]
   1240e:	4420      	add	r0, r4
   12410:	42b0      	cmp	r0, r6
   12412:	f63f af3b 	bhi.w	1228c <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   12416:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   1241a:	3408      	adds	r4, #8
				parsing = false;
   1241c:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
   12420:	f04f 0a08 	mov.w	sl, #8
   12424:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   12426:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1242a:	2800      	cmp	r0, #0
   1242c:	d078      	beq.n	12520 <cbvprintf_package+0x2c4>
			if (!parsing) {
   1242e:	f1bb 0f00 	cmp.w	fp, #0
   12432:	f47f af6d 	bne.w	12310 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
   12436:	2825      	cmp	r0, #37	; 0x25
   12438:	d1f5      	bne.n	12426 <cbvprintf_package+0x1ca>
					arg_idx++;
   1243a:	9b01      	ldr	r3, [sp, #4]
   1243c:	3301      	adds	r3, #1
   1243e:	9301      	str	r3, [sp, #4]
					parsing = true;
   12440:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
   12444:	f04f 0a04 	mov.w	sl, #4
   12448:	e7ec      	b.n	12424 <cbvprintf_package+0x1c8>
			switch (*fmt) {
   1244a:	4658      	mov	r0, fp
   1244c:	e793      	b.n	12376 <cbvprintf_package+0x11a>
   1244e:	2000      	movs	r0, #0
				parsing = false;
   12450:	4683      	mov	fp, r0
   12452:	e7a5      	b.n	123a0 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
   12454:	2b08      	cmp	r3, #8
   12456:	d002      	beq.n	1245e <cbvprintf_package+0x202>
					return -EINVAL;
   12458:	f06f 0015 	mvn.w	r0, #21
   1245c:	e718      	b.n	12290 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
   1245e:	f108 0807 	add.w	r8, r8, #7
   12462:	f028 0807 	bic.w	r8, r8, #7
   12466:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
   1246a:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
   1246e:	3408      	adds	r4, #8
   12470:	2308      	movs	r3, #8
   12472:	e7d8      	b.n	12426 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
   12474:	b968      	cbnz	r0, 12492 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   12476:	2b04      	cmp	r3, #4
   12478:	d102      	bne.n	12480 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
   1247a:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   1247e:	e7a4      	b.n	123ca <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
   12480:	2b08      	cmp	r3, #8
   12482:	d1e9      	bne.n	12458 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
   12484:	f108 0807 	add.w	r8, r8, #7
   12488:	f028 0807 	bic.w	r8, r8, #7
   1248c:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   12490:	e7ed      	b.n	1246e <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12492:	9a05      	ldr	r2, [sp, #20]
   12494:	3a01      	subs	r2, #1
   12496:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
   12498:	f858 2b04 	ldr.w	r2, [r8], #4
   1249c:	9200      	str	r2, [sp, #0]
   1249e:	e70d      	b.n	122bc <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   124a0:	9a03      	ldr	r2, [sp, #12]
   124a2:	0790      	lsls	r0, r2, #30
   124a4:	d520      	bpl.n	124e8 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   124a6:	eba4 0e05 	sub.w	lr, r4, r5
   124aa:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   124ae:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   124b2:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   124b6:	d2cf      	bcs.n	12458 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   124b8:	2f0f      	cmp	r7, #15
   124ba:	d8cd      	bhi.n	12458 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   124bc:	b1f5      	cbz	r5, 124fc <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   124be:	f107 0240 	add.w	r2, r7, #64	; 0x40
   124c2:	eb0d 0e02 	add.w	lr, sp, r2
   124c6:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   124c8:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   124ca:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   124ce:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   124d2:	f1bc 0f00 	cmp.w	ip, #0
   124d6:	f43f af17 	beq.w	12308 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   124da:	f060 007f 	orn	r0, r0, #127	; 0x7f
   124de:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   124e2:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   124e6:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   124e8:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   124ec:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   124ee:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   124f0:	f64f 7eda 	movw	lr, #65498	; 0xffda
   124f4:	e797      	b.n	12426 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   124f6:	f04f 0c00 	mov.w	ip, #0
   124fa:	e7da      	b.n	124b2 <cbvprintf_package+0x256>
				} else if (is_ro) {
   124fc:	f1bc 0f00 	cmp.w	ip, #0
   12500:	d001      	beq.n	12506 <cbvprintf_package+0x2aa>
					len += 1;
   12502:	3601      	adds	r6, #1
   12504:	e7ef      	b.n	124e6 <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
   12506:	9802      	ldr	r0, [sp, #8]
					len += 2;
   12508:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   1250a:	2800      	cmp	r0, #0
   1250c:	d1eb      	bne.n	124e6 <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
   1250e:	9800      	ldr	r0, [sp, #0]
   12510:	e9cd 3106 	strd	r3, r1, [sp, #24]
   12514:	f019 fb6d 	bl	2bbf2 <strlen>
   12518:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   1251c:	4406      	add	r6, r0
   1251e:	e7e2      	b.n	124e6 <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
   12520:	1b63      	subs	r3, r4, r5
   12522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   12526:	d297      	bcs.n	12458 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
   12528:	b945      	cbnz	r5, 1253c <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   1252a:	f1a6 0408 	sub.w	r4, r6, #8
   1252e:	18e0      	adds	r0, r4, r3
   12530:	e6ae      	b.n	12290 <cbvprintf_package+0x34>
   12532:	bf00      	nop
   12534:	0002f824 	.word	0x0002f824
   12538:	00034f60 	.word	0x00034f60
	if (rws_pos_en) {
   1253c:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   1253e:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   12540:	089b      	lsrs	r3, r3, #2
   12542:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   12544:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   12548:	b1c2      	cbz	r2, 1257c <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   1254a:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   1254c:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   12550:	f1b9 0f00 	cmp.w	r9, #0
   12554:	d005      	beq.n	12562 <cbvprintf_package+0x306>
   12556:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   12558:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   1255a:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   1255e:	4297      	cmp	r7, r2
   12560:	d10e      	bne.n	12580 <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
   12562:	f1c5 0301 	rsb	r3, r5, #1
   12566:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
   1256a:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   1256e:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   12570:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   12574:	4557      	cmp	r7, sl
   12576:	d112      	bne.n	1259e <cbvprintf_package+0x342>
	return BUF_OFFSET;
   12578:	1b60      	subs	r0, r4, r5
   1257a:	e689      	b.n	12290 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   1257c:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   1257e:	e7e5      	b.n	1254c <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   12580:	f810 3b01 	ldrb.w	r3, [r0], #1
   12584:	0619      	lsls	r1, r3, #24
   12586:	d508      	bpl.n	1259a <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
   12588:	eb04 0e0c 	add.w	lr, r4, ip
   1258c:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   1258e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   12592:	f63f ae7b 	bhi.w	1228c <cbvprintf_package+0x30>
			*buf++ = pos;
   12596:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   1259a:	3201      	adds	r2, #1
   1259c:	e7df      	b.n	1255e <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   1259e:	f1b9 0f00 	cmp.w	r9, #0
   125a2:	d003      	beq.n	125ac <cbvprintf_package+0x350>
   125a4:	f998 2000 	ldrsb.w	r2, [r8]
   125a8:	2a00      	cmp	r2, #0
   125aa:	db17      	blt.n	125dc <cbvprintf_package+0x380>
		if (rws_pos_en) {
   125ac:	9b02      	ldr	r3, [sp, #8]
   125ae:	b1d3      	cbz	r3, 125e6 <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
   125b0:	f81a 200b 	ldrb.w	r2, [sl, fp]
   125b4:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   125b8:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   125ba:	9b01      	ldr	r3, [sp, #4]
   125bc:	1898      	adds	r0, r3, r2
   125be:	4420      	add	r0, r4
   125c0:	42b0      	cmp	r0, r6
   125c2:	f63f ae63 	bhi.w	1228c <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   125c6:	f898 0000 	ldrb.w	r0, [r8]
   125ca:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
   125ce:	9900      	ldr	r1, [sp, #0]
   125d0:	9203      	str	r2, [sp, #12]
   125d2:	4620      	mov	r0, r4
   125d4:	f019 fb64 	bl	2bca0 <memcpy>
		buf += size;
   125d8:	9a03      	ldr	r2, [sp, #12]
   125da:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   125dc:	f10a 0a01 	add.w	sl, sl, #1
   125e0:	f108 0801 	add.w	r8, r8, #1
   125e4:	e7c6      	b.n	12574 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   125e6:	f898 2000 	ldrb.w	r2, [r8]
   125ea:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   125ee:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   125f0:	9b02      	ldr	r3, [sp, #8]
   125f2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   125f6:	9800      	ldr	r0, [sp, #0]
   125f8:	f019 fafb 	bl	2bbf2 <strlen>
   125fc:	1c42      	adds	r2, r0, #1
   125fe:	e7dc      	b.n	125ba <cbvprintf_package+0x35e>
		return -EFAULT;
   12600:	f06f 000d 	mvn.w	r0, #13
   12604:	e644      	b.n	12290 <cbvprintf_package+0x34>
   12606:	bf00      	nop

00012608 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   12608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1260c:	b095      	sub	sp, #84	; 0x54
   1260e:	af00      	add	r7, sp, #0
   12610:	4604      	mov	r4, r0
   12612:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
   12616:	61bb      	str	r3, [r7, #24]
   12618:	f3cb 03c0 	ubfx	r3, fp, #3, #1
   1261c:	627a      	str	r2, [r7, #36]	; 0x24
   1261e:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   12620:	6239      	str	r1, [r7, #32]
   12622:	b951      	cbnz	r1, 1263a <cbprintf_package_convert+0x32>
	buf += ros_nbr;
   12624:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   12626:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   12628:	7880      	ldrb	r0, [r0, #2]
   1262a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1262e:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
   12630:	6a3b      	ldr	r3, [r7, #32]
   12632:	429e      	cmp	r6, r3
   12634:	d81a      	bhi.n	1266c <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
   12636:	1b03      	subs	r3, r0, r4
   12638:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   1263a:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   1263e:	78e3      	ldrb	r3, [r4, #3]
   12640:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
   12642:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
   12644:	f1ba 0f00 	cmp.w	sl, #0
   12648:	d002      	beq.n	12650 <cbprintf_package_convert+0x48>
   1264a:	f01b 0f01 	tst.w	fp, #1
   1264e:	d117      	bne.n	12680 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
   12650:	697b      	ldr	r3, [r7, #20]
   12652:	bb5b      	cbnz	r3, 126ac <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
   12654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12656:	b11b      	cbz	r3, 12660 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
   12658:	69ba      	ldr	r2, [r7, #24]
   1265a:	6a39      	ldr	r1, [r7, #32]
   1265c:	4620      	mov	r0, r4
   1265e:	4798      	blx	r3
		}

		return in_len;
   12660:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   12662:	4628      	mov	r0, r5
   12664:	3754      	adds	r7, #84	; 0x54
   12666:	46bd      	mov	sp, r7
   12668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   1266c:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
   1266e:	4628      	mov	r0, r5
   12670:	f019 fabf 	bl	2bbf2 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
   12674:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
   12676:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
   12678:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
   1267a:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
   1267c:	623b      	str	r3, [r7, #32]
   1267e:	e7d7      	b.n	12630 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
   12680:	f894 8000 	ldrb.w	r8, [r4]
   12684:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   12686:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   12688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
   1268a:	ea4f 0288 	mov.w	r2, r8, lsl #2
   1268e:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
   12690:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   12694:	2b00      	cmp	r3, #0
   12696:	f040 8103 	bne.w	128a0 <cbprintf_package_convert+0x298>
		out_len = (int)in_len;
   1269a:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
   1269c:	46c1      	mov	r9, r8
   1269e:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
   126a2:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   126a4:	454b      	cmp	r3, r9
   126a6:	d150      	bne.n	1274a <cbprintf_package_convert+0x142>
   126a8:	44d0      	add	r8, sl
   126aa:	e013      	b.n	126d4 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
   126ac:	f01b 0f02 	tst.w	fp, #2
   126b0:	d0d0      	beq.n	12654 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
   126b2:	f894 8000 	ldrb.w	r8, [r4]
   126b6:	ea4f 0388 	mov.w	r3, r8, lsl #2
   126ba:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   126bc:	6863      	ldr	r3, [r4, #4]
   126be:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   126c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   126c2:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   126c6:	2b00      	cmp	r3, #0
   126c8:	d17a      	bne.n	127c0 <cbprintf_package_convert+0x1b8>
		out_len = (int)in_len;
   126ca:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   126cc:	f1ba 0f00 	cmp.w	sl, #0
   126d0:	d150      	bne.n	12774 <cbprintf_package_convert+0x16c>
	size_t strl_cnt = 0;
   126d2:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
   126d4:	f01b 0f05 	tst.w	fp, #5
   126d8:	bf0c      	ite	eq
   126da:	2302      	moveq	r3, #2
   126dc:	2301      	movne	r3, #1
   126de:	627b      	str	r3, [r7, #36]	; 0x24
   126e0:	697b      	ldr	r3, [r7, #20]
   126e2:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   126e6:	f00b 0302 	and.w	r3, fp, #2
   126ea:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
   126ec:	45d0      	cmp	r8, sl
   126ee:	d0b8      	beq.n	12662 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
   126f0:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
   126f4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   126f8:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
   126fc:	4bad      	ldr	r3, [pc, #692]	; (129b4 <cbprintf_package_convert+0x3ac>)
   126fe:	4599      	cmp	r9, r3
   12700:	d302      	bcc.n	12708 <cbprintf_package_convert+0x100>
   12702:	4bad      	ldr	r3, [pc, #692]	; (129b8 <cbprintf_package_convert+0x3b0>)
   12704:	4599      	cmp	r9, r3
   12706:	d33b      	bcc.n	12780 <cbprintf_package_convert+0x178>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   12708:	693b      	ldr	r3, [r7, #16]
   1270a:	2b00      	cmp	r3, #0
   1270c:	d045      	beq.n	1279a <cbprintf_package_convert+0x192>
   1270e:	69f8      	ldr	r0, [r7, #28]
   12710:	f016 fe49 	bl	293a6 <is_ptr>
   12714:	2800      	cmp	r0, #0
   12716:	d040      	beq.n	1279a <cbprintf_package_convert+0x192>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   12718:	46e9      	mov	r9, sp
   1271a:	b08a      	sub	sp, #40	; 0x28
   1271c:	466a      	mov	r2, sp
   1271e:	4ba7      	ldr	r3, [pc, #668]	; (129bc <cbprintf_package_convert+0x3b4>)
   12720:	6153      	str	r3, [r2, #20]
   12722:	4ba7      	ldr	r3, [pc, #668]	; (129c0 <cbprintf_package_convert+0x3b8>)
   12724:	6193      	str	r3, [r2, #24]
   12726:	69fb      	ldr	r3, [r7, #28]
   12728:	e9c2 3107 	strd	r3, r1, [r2, #28]
   1272c:	f240 3301 	movw	r3, #769	; 0x301
   12730:	8493      	strh	r3, [r2, #36]	; 0x24
   12732:	4ba4      	ldr	r3, [pc, #656]	; (129c4 <cbprintf_package_convert+0x3bc>)
   12734:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   12738:	48a3      	ldr	r0, [pc, #652]	; (129c8 <cbprintf_package_convert+0x3c0>)
   1273a:	2300      	movs	r3, #0
   1273c:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   12740:	f001 fc76 	bl	14030 <z_impl_z_log_msg_static_create>
				out_len -= 2;
   12744:	3d02      	subs	r5, #2
   12746:	46cd      	mov	sp, r9
				continue;
   12748:	e7d0      	b.n	126ec <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
   1274a:	f819 2b01 	ldrb.w	r2, [r9], #1
   1274e:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   12750:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   12754:	f019 fa4d 	bl	2bbf2 <strlen>
				if (strl && strl_cnt < strl_len) {
   12758:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   1275c:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   1275e:	b13a      	cbz	r2, 12770 <cbprintf_package_convert+0x168>
   12760:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   12764:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
   12766:	bf3e      	ittt	cc
   12768:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
   1276a:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
   1276e:	3601      	addcc	r6, #1
				out_len += len;
   12770:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   12772:	e797      	b.n	126a4 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12774:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
   12778:	bf1c      	itt	ne
   1277a:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   1277c:	44d0      	addne	r8, sl
   1277e:	e7a9      	b.n	126d4 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   12780:	693b      	ldr	r3, [r7, #16]
   12782:	b123      	cbz	r3, 1278e <cbprintf_package_convert+0x186>
   12784:	69f8      	ldr	r0, [r7, #28]
   12786:	f016 fe0e 	bl	293a6 <is_ptr>
   1278a:	2800      	cmp	r0, #0
   1278c:	d1c4      	bne.n	12718 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   1278e:	f01b 0f01 	tst.w	fp, #1
   12792:	d105      	bne.n	127a0 <cbprintf_package_convert+0x198>
					out_len -= drop_ro_str_pos ? 2 : 1;
   12794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12796:	1aed      	subs	r5, r5, r3
   12798:	e7a8      	b.n	126ec <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   1279a:	6a3b      	ldr	r3, [r7, #32]
   1279c:	2b00      	cmp	r3, #0
   1279e:	d0a5      	beq.n	126ec <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
   127a0:	4648      	mov	r0, r9
   127a2:	f019 fa26 	bl	2bbf2 <strlen>
				if (strl && strl_cnt < strl_len) {
   127a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   127a8:	b143      	cbz	r3, 127bc <cbprintf_package_convert+0x1b4>
   127aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   127ae:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   127b0:	bf3f      	itttt	cc
   127b2:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   127b4:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   127b6:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   127ba:	3601      	addcc	r6, #1
				out_len += (len - 1);
   127bc:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
   127be:	e795      	b.n	126ec <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   127c0:	f1ba 0f00 	cmp.w	sl, #0
   127c4:	d071      	beq.n	128aa <cbprintf_package_convert+0x2a2>
   127c6:	f01b 0604 	ands.w	r6, fp, #4
   127ca:	d071      	beq.n	128b0 <cbprintf_package_convert+0x2a8>
		keep_cnt = ros_nbr;
   127cc:	46d1      	mov	r9, sl
		scpy_cnt = 0;
   127ce:	2600      	movs	r6, #0
		dst = keep_str_pos;
   127d0:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
   127d4:	4652      	mov	r2, sl
   127d6:	4641      	mov	r1, r8
   127d8:	f019 fa62 	bl	2bca0 <memcpy>
	str_pos += ros_nbr;
   127dc:	697b      	ldr	r3, [r7, #20]
   127de:	005b      	lsls	r3, r3, #1
   127e0:	60bb      	str	r3, [r7, #8]
   127e2:	697b      	ldr	r3, [r7, #20]
   127e4:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
   127e6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   127ea:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   127ec:	f00b 0302 	and.w	r3, fp, #2
   127f0:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   127f2:	697b      	ldr	r3, [r7, #20]
   127f4:	4598      	cmp	r8, r3
   127f6:	d15d      	bne.n	128b4 <cbprintf_package_convert+0x2ac>
	out_desc.len = in_desc->len;
   127f8:	7823      	ldrb	r3, [r4, #0]
   127fa:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   127fc:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   127fe:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12802:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   12806:	bf0c      	ite	eq
   12808:	ea4f 0159 	moveq.w	r1, r9, lsr #1
   1280c:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1280e:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12812:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12814:	f040 809d 	bne.w	12952 <cbprintf_package_convert+0x34a>
   12818:	f01b 0f04 	tst.w	fp, #4
   1281c:	bf14      	ite	ne
   1281e:	4648      	movne	r0, r9
   12820:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   12822:	f894 b002 	ldrb.w	fp, [r4, #2]
   12826:	f894 8003 	ldrb.w	r8, [r4, #3]
   1282a:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
   1282c:	7062      	strb	r2, [r4, #1]
   1282e:	70a0      	strb	r0, [r4, #2]
   12830:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   12832:	69ba      	ldr	r2, [r7, #24]
   12834:	68f9      	ldr	r1, [r7, #12]
   12836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12838:	4620      	mov	r0, r4
   1283a:	4798      	blx	r3
	if (rv < 0) {
   1283c:	1e05      	subs	r5, r0, #0
   1283e:	f6ff af10 	blt.w	12662 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
   12842:	69fb      	ldr	r3, [r7, #28]
   12844:	7023      	strb	r3, [r4, #0]
   12846:	693b      	ldr	r3, [r7, #16]
   12848:	7063      	strb	r3, [r4, #1]
   1284a:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   1284e:	69ba      	ldr	r2, [r7, #24]
   12850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   12852:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   12856:	4649      	mov	r1, r9
   12858:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1285c:	4798      	blx	r3
	if (rv < 0) {
   1285e:	f1b0 0800 	subs.w	r8, r0, #0
   12862:	f2c0 80a3 	blt.w	129ac <cbprintf_package_convert+0x3a4>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   12866:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
   12868:	69ba      	ldr	r2, [r7, #24]
   1286a:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   1286c:	eba3 010a 	sub.w	r1, r3, sl
   12870:	68fb      	ldr	r3, [r7, #12]
   12872:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   12874:	68bb      	ldr	r3, [r7, #8]
   12876:	1ac9      	subs	r1, r1, r3
   12878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1287a:	4798      	blx	r3
	if (rv < 0) {
   1287c:	2800      	cmp	r0, #0
   1287e:	f2c0 8097 	blt.w	129b0 <cbprintf_package_convert+0x3a8>
	out_len += rv;
   12882:	44a8      	add	r8, r5
	out_len += rv;
   12884:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   12888:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   1288c:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   12890:	45b3      	cmp	fp, r6
   12892:	d360      	bcc.n	12956 <cbprintf_package_convert+0x34e>
	(void)cb(NULL, 0, ctx);
   12894:	2100      	movs	r1, #0
   12896:	69ba      	ldr	r2, [r7, #24]
   12898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1289a:	4608      	mov	r0, r1
   1289c:	4798      	blx	r3
	return out_len;
   1289e:	e6e0      	b.n	12662 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
   128a0:	f107 0030 	add.w	r0, r7, #48	; 0x30
   128a4:	f04f 0900 	mov.w	r9, #0
   128a8:	e794      	b.n	127d4 <cbprintf_package_convert+0x1cc>
		scpy_cnt = 0;
   128aa:	4656      	mov	r6, sl
		keep_cnt = 0;
   128ac:	46d1      	mov	r9, sl
   128ae:	e795      	b.n	127dc <cbprintf_package_convert+0x1d4>
   128b0:	46b1      	mov	r9, r6
   128b2:	e793      	b.n	127dc <cbprintf_package_convert+0x1d4>
		uint8_t arg_idx = *str_pos++;
   128b4:	f818 1b02 	ldrb.w	r1, [r8], #2
   128b8:	4a3e      	ldr	r2, [pc, #248]	; (129b4 <cbprintf_package_convert+0x3ac>)
		uint8_t arg_pos = *str_pos++;
   128ba:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   128be:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   128c2:	4293      	cmp	r3, r2
   128c4:	d302      	bcc.n	128cc <cbprintf_package_convert+0x2c4>
   128c6:	4a3c      	ldr	r2, [pc, #240]	; (129b8 <cbprintf_package_convert+0x3b0>)
   128c8:	4293      	cmp	r3, r2
   128ca:	d31c      	bcc.n	12906 <cbprintf_package_convert+0x2fe>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   128cc:	693b      	ldr	r3, [r7, #16]
   128ce:	b123      	cbz	r3, 128da <cbprintf_package_convert+0x2d2>
   128d0:	69f8      	ldr	r0, [r7, #28]
   128d2:	f016 fd68 	bl	293a6 <is_ptr>
   128d6:	2800      	cmp	r0, #0
   128d8:	d18b      	bne.n	127f2 <cbprintf_package_convert+0x1ea>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   128da:	687b      	ldr	r3, [r7, #4]
   128dc:	b9f3      	cbnz	r3, 1291c <cbprintf_package_convert+0x314>
				keep_str_pos[keep_cnt++] = arg_idx;
   128de:	f109 0228 	add.w	r2, r9, #40	; 0x28
   128e2:	f107 0028 	add.w	r0, r7, #40	; 0x28
   128e6:	4402      	add	r2, r0
   128e8:	f109 0301 	add.w	r3, r9, #1
   128ec:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   128f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
   128f4:	fa52 f383 	uxtab	r3, r2, r3
   128f8:	f109 0902 	add.w	r9, r9, #2
   128fc:	fa5f f989 	uxtb.w	r9, r9
   12900:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   12904:	e775      	b.n	127f2 <cbprintf_package_convert+0x1ea>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   12906:	693b      	ldr	r3, [r7, #16]
   12908:	b12b      	cbz	r3, 12916 <cbprintf_package_convert+0x30e>
   1290a:	69f8      	ldr	r0, [r7, #28]
   1290c:	f016 fd4b 	bl	293a6 <is_ptr>
   12910:	2800      	cmp	r0, #0
   12912:	f47f af6e 	bne.w	127f2 <cbprintf_package_convert+0x1ea>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   12916:	f01b 0f01 	tst.w	fp, #1
   1291a:	d009      	beq.n	12930 <cbprintf_package_convert+0x328>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   1291c:	f106 0228 	add.w	r2, r6, #40	; 0x28
   12920:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12924:	1c73      	adds	r3, r6, #1
   12926:	1856      	adds	r6, r2, r1
   12928:	f806 5c20 	strb.w	r5, [r6, #-32]
   1292c:	b2de      	uxtb	r6, r3
   1292e:	e760      	b.n	127f2 <cbprintf_package_convert+0x1ea>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12930:	f01b 0f04 	tst.w	fp, #4
   12934:	f43f af5d 	beq.w	127f2 <cbprintf_package_convert+0x1ea>
				keep_str_pos[keep_cnt++] = arg_pos;
   12938:	f109 0228 	add.w	r2, r9, #40	; 0x28
   1293c:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12940:	f109 0301 	add.w	r3, r9, #1
   12944:	eb02 0901 	add.w	r9, r2, r1
   12948:	f809 5c10 	strb.w	r5, [r9, #-16]
   1294c:	fa5f f983 	uxtb.w	r9, r3
   12950:	e74f      	b.n	127f2 <cbprintf_package_convert+0x1ea>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12952:	2000      	movs	r0, #0
   12954:	e765      	b.n	12822 <cbprintf_package_convert+0x21a>
		uint8_t loc = cpy_str_pos[i];
   12956:	f81b 300a 	ldrb.w	r3, [fp, sl]
   1295a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   1295e:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   12962:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   12964:	b1fb      	cbz	r3, 129a6 <cbprintf_package_convert+0x39e>
   12966:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   1296a:	69ba      	ldr	r2, [r7, #24]
   1296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1296e:	2101      	movs	r1, #1
   12970:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   12974:	4798      	blx	r3
		if (rv < 0) {
   12976:	2800      	cmp	r0, #0
   12978:	db1a      	blt.n	129b0 <cbprintf_package_convert+0x3a8>
		out_len += rv;
   1297a:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   1297c:	f1b8 0f00 	cmp.w	r8, #0
   12980:	d106      	bne.n	12990 <cbprintf_package_convert+0x388>
   12982:	4648      	mov	r0, r9
   12984:	f019 f935 	bl	2bbf2 <strlen>
   12988:	f100 0801 	add.w	r8, r0, #1
   1298c:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   12990:	69ba      	ldr	r2, [r7, #24]
   12992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12994:	4641      	mov	r1, r8
   12996:	4648      	mov	r0, r9
   12998:	4798      	blx	r3
		if (rv < 0) {
   1299a:	2800      	cmp	r0, #0
   1299c:	db08      	blt.n	129b0 <cbprintf_package_convert+0x3a8>
		out_len += rv;
   1299e:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   129a0:	f10b 0b01 	add.w	fp, fp, #1
   129a4:	e774      	b.n	12890 <cbprintf_package_convert+0x288>
		uint16_t str_len = strl ? strl[i] : 0;
   129a6:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   129aa:	e7de      	b.n	1296a <cbprintf_package_convert+0x362>
   129ac:	4645      	mov	r5, r8
   129ae:	e658      	b.n	12662 <cbprintf_package_convert+0x5a>
   129b0:	4605      	mov	r5, r0
   129b2:	e656      	b.n	12662 <cbprintf_package_convert+0x5a>
   129b4:	0002f824 	.word	0x0002f824
   129b8:	00034f60 	.word	0x00034f60
   129bc:	000312ae 	.word	0x000312ae
   129c0:	00031355 	.word	0x00031355
   129c4:	01000005 	.word	0x01000005
   129c8:	0002fc74 	.word	0x0002fc74

000129cc <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   129cc:	4b01      	ldr	r3, [pc, #4]	; (129d4 <__printk_hook_install+0x8>)
   129ce:	6018      	str	r0, [r3, #0]
}
   129d0:	4770      	bx	lr
   129d2:	bf00      	nop
   129d4:	200004f0 	.word	0x200004f0

000129d8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   129d8:	b530      	push	{r4, r5, lr}
   129da:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   129dc:	2500      	movs	r5, #0
   129de:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   129e2:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   129e4:	9500      	str	r5, [sp, #0]
   129e6:	a903      	add	r1, sp, #12
   129e8:	4805      	ldr	r0, [pc, #20]	; (12a00 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   129ea:	9505      	str	r5, [sp, #20]
   129ec:	f000 f92e 	bl	12c4c <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   129f0:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   129f4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   129f6:	bfb8      	it	lt
   129f8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   129fa:	b007      	add	sp, #28
   129fc:	bd30      	pop	{r4, r5, pc}
   129fe:	bf00      	nop
   12a00:	000294e7 	.word	0x000294e7

00012a04 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12a08:	8b05      	ldrh	r5, [r0, #24]
{
   12a0a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12a0c:	0728      	lsls	r0, r5, #28
{
   12a0e:	4690      	mov	r8, r2
	if (processing) {
   12a10:	d411      	bmi.n	12a36 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   12a12:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12a14:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   12a18:	f040 80cd 	bne.w	12bb6 <process_event+0x1b2>
			evt = process_recheck(mgr);
   12a1c:	4620      	mov	r0, r4
   12a1e:	f016 ff60 	bl	298e2 <process_recheck>
		}

		if (evt == EVT_NOP) {
   12a22:	b178      	cbz	r0, 12a44 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   12a24:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12a26:	8b21      	ldrh	r1, [r4, #24]
   12a28:	2804      	cmp	r0, #4
   12a2a:	d811      	bhi.n	12a50 <process_event+0x4c>
   12a2c:	e8df f000 	tbb	[pc, r0]
   12a30:	856d10c3 	.word	0x856d10c3
   12a34:	95          	.byte	0x95
   12a35:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   12a36:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12a38:	bf0c      	ite	eq
   12a3a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12a3e:	f045 0520 	orrne.w	r5, r5, #32
   12a42:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   12a44:	f388 8811 	msr	BASEPRI, r8
   12a48:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   12a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12a50:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12a54:	45aa      	cmp	sl, r5
   12a56:	f000 80a6 	beq.w	12ba6 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   12a5a:	2700      	movs	r7, #0
   12a5c:	46b9      	mov	r9, r7
   12a5e:	463e      	mov	r6, r7
   12a60:	68a3      	ldr	r3, [r4, #8]
   12a62:	2b00      	cmp	r3, #0
   12a64:	f000 80bd 	beq.w	12be2 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12a68:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12a6c:	8321      	strh	r1, [r4, #24]
   12a6e:	f388 8811 	msr	BASEPRI, r8
   12a72:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   12a76:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12a78:	2900      	cmp	r1, #0
   12a7a:	f000 80bb 	beq.w	12bf4 <process_event+0x1f0>
	return node->next;
   12a7e:	680d      	ldr	r5, [r1, #0]
   12a80:	2900      	cmp	r1, #0
   12a82:	f000 80b7 	beq.w	12bf4 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   12a86:	f8d1 8004 	ldr.w	r8, [r1, #4]
   12a8a:	4633      	mov	r3, r6
   12a8c:	4652      	mov	r2, sl
   12a8e:	4620      	mov	r0, r4
   12a90:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12a92:	2d00      	cmp	r5, #0
   12a94:	d076      	beq.n	12b84 <process_event+0x180>
   12a96:	682b      	ldr	r3, [r5, #0]
   12a98:	4629      	mov	r1, r5
   12a9a:	461d      	mov	r5, r3
   12a9c:	e7f0      	b.n	12a80 <process_event+0x7c>
   12a9e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   12aa2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   12aa4:	2a01      	cmp	r2, #1
   12aa6:	d81b      	bhi.n	12ae0 <process_event+0xdc>
	list->head = NULL;
   12aa8:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12aaa:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   12aae:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   12ab0:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12ab2:	b289      	uxth	r1, r1
	list->tail = NULL;
   12ab4:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   12ab8:	d109      	bne.n	12ace <process_event+0xca>
   12aba:	463b      	mov	r3, r7
   12abc:	e003      	b.n	12ac6 <process_event+0xc2>
				mgr->refs += 1U;
   12abe:	8b62      	ldrh	r2, [r4, #26]
   12ac0:	3201      	adds	r2, #1
   12ac2:	8362      	strh	r2, [r4, #26]
	return node->next;
   12ac4:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12ac6:	2b00      	cmp	r3, #0
   12ac8:	d1f9      	bne.n	12abe <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12aca:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   12ace:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12ad0:	4620      	mov	r0, r4
   12ad2:	f016 ff06 	bl	298e2 <process_recheck>
   12ad6:	2800      	cmp	r0, #0
   12ad8:	d07b      	beq.n	12bd2 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12ada:	f041 0120 	orr.w	r1, r1, #32
   12ade:	e077      	b.n	12bd0 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12ae0:	2b04      	cmp	r3, #4
   12ae2:	d10a      	bne.n	12afa <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12ae4:	f021 0107 	bic.w	r1, r1, #7
   12ae8:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12aea:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12aec:	4620      	mov	r0, r4
   12aee:	f016 fef8 	bl	298e2 <process_recheck>
   12af2:	b110      	cbz	r0, 12afa <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12af4:	f041 0120 	orr.w	r1, r1, #32
   12af8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12afa:	8b21      	ldrh	r1, [r4, #24]
   12afc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12b00:	45aa      	cmp	sl, r5
   12b02:	d050      	beq.n	12ba6 <process_event+0x1a2>
   12b04:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   12b06:	46b9      	mov	r9, r7
   12b08:	e7aa      	b.n	12a60 <process_event+0x5c>
			transit = mgr->transitions->start;
   12b0a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12b0c:	f021 0107 	bic.w	r1, r1, #7
   12b10:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   12b14:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   12b16:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   12b1a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   12b1c:	d12d      	bne.n	12b7a <process_event+0x176>
		    || (transit != NULL)) {
   12b1e:	f1b9 0f00 	cmp.w	r9, #0
   12b22:	d040      	beq.n	12ba6 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12b24:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12b28:	8321      	strh	r1, [r4, #24]
   12b2a:	f388 8811 	msr	BASEPRI, r8
   12b2e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   12b32:	493a      	ldr	r1, [pc, #232]	; (12c1c <process_event+0x218>)
   12b34:	4620      	mov	r0, r4
   12b36:	47c8      	blx	r9
   12b38:	e029      	b.n	12b8e <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12b3a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   12b3e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12b40:	f041 0104 	orr.w	r1, r1, #4
   12b44:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   12b46:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   12b48:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   12b4c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   12b4e:	d0e6      	beq.n	12b1e <process_event+0x11a>
   12b50:	2700      	movs	r7, #0
		res = 0;
   12b52:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12b54:	f04f 0a04 	mov.w	sl, #4
   12b58:	e782      	b.n	12a60 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12b5a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   12b5e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12b60:	f041 0105 	orr.w	r1, r1, #5
   12b64:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   12b66:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   12b68:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   12b6c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   12b6e:	d0d6      	beq.n	12b1e <process_event+0x11a>
   12b70:	2700      	movs	r7, #0
		res = 0;
   12b72:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12b74:	f04f 0a05 	mov.w	sl, #5
   12b78:	e772      	b.n	12a60 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   12b7a:	2700      	movs	r7, #0
		res = 0;
   12b7c:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12b7e:	f04f 0a06 	mov.w	sl, #6
   12b82:	e76d      	b.n	12a60 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12b84:	462b      	mov	r3, r5
   12b86:	e787      	b.n	12a98 <process_event+0x94>
			if (transit != NULL) {
   12b88:	f1b9 0f00 	cmp.w	r9, #0
   12b8c:	d1d1      	bne.n	12b32 <process_event+0x12e>
	__asm__ volatile(
   12b8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12b92:	f3ef 8811 	mrs	r8, BASEPRI
   12b96:	f383 8812 	msr	BASEPRI_MAX, r3
   12b9a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   12b9e:	8b23      	ldrh	r3, [r4, #24]
   12ba0:	f023 0308 	bic.w	r3, r3, #8
   12ba4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   12ba6:	8b25      	ldrh	r5, [r4, #24]
   12ba8:	06ea      	lsls	r2, r5, #27
   12baa:	d52e      	bpl.n	12c0a <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12bac:	f025 0310 	bic.w	r3, r5, #16
   12bb0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   12bb2:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   12bb6:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12bb8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   12bba:	2e00      	cmp	r6, #0
   12bbc:	f6bf af6f 	bge.w	12a9e <process_event+0x9a>
	list->head = NULL;
   12bc0:	2300      	movs	r3, #0
		*clients = mgr->clients;
   12bc2:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   12bc4:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12bc8:	f021 0107 	bic.w	r1, r1, #7
   12bcc:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12bd0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12bd2:	8b21      	ldrh	r1, [r4, #24]
   12bd4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12bd8:	45aa      	cmp	sl, r5
   12bda:	f04f 0900 	mov.w	r9, #0
   12bde:	f47f af3f 	bne.w	12a60 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   12be2:	2f00      	cmp	r7, #0
   12be4:	d09b      	beq.n	12b1e <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12be6:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12bea:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   12bec:	f388 8811 	msr	BASEPRI, r8
   12bf0:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   12bf4:	2f00      	cmp	r7, #0
   12bf6:	d0c7      	beq.n	12b88 <process_event+0x184>
	return node->next;
   12bf8:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   12bfa:	4639      	mov	r1, r7
   12bfc:	4633      	mov	r3, r6
   12bfe:	4652      	mov	r2, sl
   12c00:	4620      	mov	r0, r4
   12c02:	f016 fe9a 	bl	2993a <notify_one>
	list->head = node;
   12c06:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   12c08:	e7f4      	b.n	12bf4 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   12c0a:	06ab      	lsls	r3, r5, #26
   12c0c:	f57f af1a 	bpl.w	12a44 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12c10:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12c14:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   12c16:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   12c1a:	e6ff      	b.n	12a1c <process_event+0x18>
   12c1c:	00029967 	.word	0x00029967

00012c20 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   12c20:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   12c22:	4c09      	ldr	r4, [pc, #36]	; (12c48 <crc8_ccitt+0x28>)
   12c24:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   12c26:	4291      	cmp	r1, r2
   12c28:	d100      	bne.n	12c2c <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   12c2a:	bd10      	pop	{r4, pc}
		val ^= p[i];
   12c2c:	f811 3b01 	ldrb.w	r3, [r1], #1
   12c30:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   12c32:	0903      	lsrs	r3, r0, #4
   12c34:	0100      	lsls	r0, r0, #4
   12c36:	5ce3      	ldrb	r3, [r4, r3]
   12c38:	b2c0      	uxtb	r0, r0
   12c3a:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   12c3c:	0918      	lsrs	r0, r3, #4
   12c3e:	011b      	lsls	r3, r3, #4
   12c40:	5c20      	ldrb	r0, [r4, r0]
   12c42:	b2db      	uxtb	r3, r3
   12c44:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
   12c46:	e7ee      	b.n	12c26 <crc8_ccitt+0x6>
   12c48:	0003137f 	.word	0x0003137f

00012c4c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   12c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c50:	4681      	mov	r9, r0
   12c52:	b095      	sub	sp, #84	; 0x54
   12c54:	468b      	mov	fp, r1
   12c56:	4617      	mov	r7, r2
   12c58:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   12c5a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   12c5c:	7838      	ldrb	r0, [r7, #0]
   12c5e:	b908      	cbnz	r0, 12c64 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   12c60:	4628      	mov	r0, r5
   12c62:	e358      	b.n	13316 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   12c64:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   12c66:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   12c68:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   12c6a:	d006      	beq.n	12c7a <z_cbvprintf_impl+0x2e>
			OUTC('%');
   12c6c:	4659      	mov	r1, fp
   12c6e:	47c8      	blx	r9
   12c70:	2800      	cmp	r0, #0
   12c72:	f2c0 8350 	blt.w	13316 <z_cbvprintf_impl+0x6ca>
   12c76:	3501      	adds	r5, #1
		if (bps == NULL) {
   12c78:	e1fb      	b.n	13072 <z_cbvprintf_impl+0x426>
		} state = {
   12c7a:	2218      	movs	r2, #24
   12c7c:	2100      	movs	r1, #0
   12c7e:	a80e      	add	r0, sp, #56	; 0x38
   12c80:	f019 f819 	bl	2bcb6 <memset>
	if (*sp == '%') {
   12c84:	787b      	ldrb	r3, [r7, #1]
   12c86:	2b25      	cmp	r3, #37	; 0x25
   12c88:	d07d      	beq.n	12d86 <z_cbvprintf_impl+0x13a>
   12c8a:	2300      	movs	r3, #0
   12c8c:	1c78      	adds	r0, r7, #1
   12c8e:	4698      	mov	r8, r3
   12c90:	469e      	mov	lr, r3
   12c92:	469c      	mov	ip, r3
   12c94:	461e      	mov	r6, r3
   12c96:	4601      	mov	r1, r0
		switch (*sp) {
   12c98:	f810 2b01 	ldrb.w	r2, [r0], #1
   12c9c:	2a2b      	cmp	r2, #43	; 0x2b
   12c9e:	f000 80a1 	beq.w	12de4 <z_cbvprintf_impl+0x198>
   12ca2:	f200 8098 	bhi.w	12dd6 <z_cbvprintf_impl+0x18a>
   12ca6:	2a20      	cmp	r2, #32
   12ca8:	f000 809f 	beq.w	12dea <z_cbvprintf_impl+0x19e>
   12cac:	2a23      	cmp	r2, #35	; 0x23
   12cae:	f000 809f 	beq.w	12df0 <z_cbvprintf_impl+0x1a4>
   12cb2:	b12b      	cbz	r3, 12cc0 <z_cbvprintf_impl+0x74>
   12cb4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12cbc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   12cc0:	f1b8 0f00 	cmp.w	r8, #0
   12cc4:	d005      	beq.n	12cd2 <z_cbvprintf_impl+0x86>
   12cc6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12cca:	f043 0320 	orr.w	r3, r3, #32
   12cce:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   12cd2:	f1be 0f00 	cmp.w	lr, #0
   12cd6:	d005      	beq.n	12ce4 <z_cbvprintf_impl+0x98>
   12cd8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12cdc:	f043 0310 	orr.w	r3, r3, #16
   12ce0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   12ce4:	f1bc 0f00 	cmp.w	ip, #0
   12ce8:	d005      	beq.n	12cf6 <z_cbvprintf_impl+0xaa>
   12cea:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12cee:	f043 0308 	orr.w	r3, r3, #8
   12cf2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   12cf6:	b12e      	cbz	r6, 12d04 <z_cbvprintf_impl+0xb8>
   12cf8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12cfc:	f043 0304 	orr.w	r3, r3, #4
   12d00:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   12d04:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12d08:	f003 0044 	and.w	r0, r3, #68	; 0x44
   12d0c:	2844      	cmp	r0, #68	; 0x44
   12d0e:	d103      	bne.n	12d18 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   12d10:	f36f 1386 	bfc	r3, #6, #1
   12d14:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   12d18:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   12d1c:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   12d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12d22:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   12d26:	d17f      	bne.n	12e28 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   12d28:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12d2c:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   12d30:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   12d32:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   12d36:	781a      	ldrb	r2, [r3, #0]
   12d38:	2a2e      	cmp	r2, #46	; 0x2e
   12d3a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12d3e:	bf0c      	ite	eq
   12d40:	2101      	moveq	r1, #1
   12d42:	2100      	movne	r1, #0
   12d44:	f361 0241 	bfi	r2, r1, #1, #1
   12d48:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   12d4c:	d178      	bne.n	12e40 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   12d4e:	785a      	ldrb	r2, [r3, #1]
   12d50:	2a2a      	cmp	r2, #42	; 0x2a
   12d52:	d06e      	beq.n	12e32 <z_cbvprintf_impl+0x1e6>
	++sp;
   12d54:	3301      	adds	r3, #1
	size_t val = 0;
   12d56:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12d58:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   12d5c:	4619      	mov	r1, r3
   12d5e:	f811 0b01 	ldrb.w	r0, [r1], #1
   12d62:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   12d66:	2e09      	cmp	r6, #9
   12d68:	f240 8095 	bls.w	12e96 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   12d6c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   12d70:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   12d72:	f3c1 0040 	ubfx	r0, r1, #1, #1
   12d76:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   12d7a:	460a      	mov	r2, r1
   12d7c:	f360 0241 	bfi	r2, r0, #1, #1
   12d80:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   12d84:	e05c      	b.n	12e40 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   12d86:	1cba      	adds	r2, r7, #2
   12d88:	9203      	str	r2, [sp, #12]
   12d8a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   12d8e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   12d92:	07da      	lsls	r2, r3, #31
   12d94:	f140 812e 	bpl.w	12ff4 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   12d98:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   12d9c:	f1b8 0f00 	cmp.w	r8, #0
   12da0:	da07      	bge.n	12db2 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   12da2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   12da6:	f042 0204 	orr.w	r2, r2, #4
   12daa:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   12dae:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   12db2:	075e      	lsls	r6, r3, #29
   12db4:	f140 8127 	bpl.w	13006 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   12db8:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   12dbc:	f1ba 0f00 	cmp.w	sl, #0
   12dc0:	f280 8126 	bge.w	13010 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   12dc4:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   12dc8:	f36f 0341 	bfc	r3, #1, #1
   12dcc:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   12dd0:	f04f 3aff 	mov.w	sl, #4294967295
   12dd4:	e11c      	b.n	13010 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   12dd6:	2a2d      	cmp	r2, #45	; 0x2d
   12dd8:	d00d      	beq.n	12df6 <z_cbvprintf_impl+0x1aa>
   12dda:	2a30      	cmp	r2, #48	; 0x30
   12ddc:	f47f af69 	bne.w	12cb2 <z_cbvprintf_impl+0x66>
   12de0:	2301      	movs	r3, #1
	} while (loop);
   12de2:	e758      	b.n	12c96 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   12de4:	f04f 0c01 	mov.w	ip, #1
   12de8:	e755      	b.n	12c96 <z_cbvprintf_impl+0x4a>
   12dea:	f04f 0e01 	mov.w	lr, #1
   12dee:	e752      	b.n	12c96 <z_cbvprintf_impl+0x4a>
   12df0:	f04f 0801 	mov.w	r8, #1
   12df4:	e74f      	b.n	12c96 <z_cbvprintf_impl+0x4a>
   12df6:	2601      	movs	r6, #1
   12df8:	e74d      	b.n	12c96 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   12dfa:	fb0e 6202 	mla	r2, lr, r2, r6
   12dfe:	3a30      	subs	r2, #48	; 0x30
   12e00:	4603      	mov	r3, r0
   12e02:	4618      	mov	r0, r3
   12e04:	f810 6b01 	ldrb.w	r6, [r0], #1
   12e08:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   12e0c:	f1bc 0f09 	cmp.w	ip, #9
   12e10:	d9f3      	bls.n	12dfa <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   12e12:	4299      	cmp	r1, r3
   12e14:	d08f      	beq.n	12d36 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   12e16:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   12e1a:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   12e1c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   12e1e:	f362 0141 	bfi	r1, r2, #1, #1
   12e22:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   12e26:	e786      	b.n	12d36 <z_cbvprintf_impl+0xea>
   12e28:	460b      	mov	r3, r1
	size_t val = 0;
   12e2a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12e2c:	f04f 0e0a 	mov.w	lr, #10
   12e30:	e7e7      	b.n	12e02 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   12e32:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12e36:	f042 0204 	orr.w	r2, r2, #4
   12e3a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   12e3e:	3302      	adds	r3, #2
	switch (*sp) {
   12e40:	781a      	ldrb	r2, [r3, #0]
   12e42:	2a6c      	cmp	r2, #108	; 0x6c
   12e44:	d047      	beq.n	12ed6 <z_cbvprintf_impl+0x28a>
   12e46:	d82b      	bhi.n	12ea0 <z_cbvprintf_impl+0x254>
   12e48:	2a68      	cmp	r2, #104	; 0x68
   12e4a:	d031      	beq.n	12eb0 <z_cbvprintf_impl+0x264>
   12e4c:	2a6a      	cmp	r2, #106	; 0x6a
   12e4e:	d04b      	beq.n	12ee8 <z_cbvprintf_impl+0x29c>
   12e50:	2a4c      	cmp	r2, #76	; 0x4c
   12e52:	d051      	beq.n	12ef8 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   12e54:	461a      	mov	r2, r3
   12e56:	f812 3b01 	ldrb.w	r3, [r2], #1
   12e5a:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   12e5c:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   12e5e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   12e62:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   12e66:	f200 80be 	bhi.w	12fe6 <z_cbvprintf_impl+0x39a>
   12e6a:	2b6d      	cmp	r3, #109	; 0x6d
   12e6c:	d851      	bhi.n	12f12 <z_cbvprintf_impl+0x2c6>
   12e6e:	2b69      	cmp	r3, #105	; 0x69
   12e70:	f200 80b9 	bhi.w	12fe6 <z_cbvprintf_impl+0x39a>
   12e74:	2b57      	cmp	r3, #87	; 0x57
   12e76:	d867      	bhi.n	12f48 <z_cbvprintf_impl+0x2fc>
   12e78:	2b41      	cmp	r3, #65	; 0x41
   12e7a:	d003      	beq.n	12e84 <z_cbvprintf_impl+0x238>
   12e7c:	3b45      	subs	r3, #69	; 0x45
   12e7e:	2b02      	cmp	r3, #2
   12e80:	f200 80b1 	bhi.w	12fe6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   12e84:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12e88:	2204      	movs	r2, #4
   12e8a:	f362 0302 	bfi	r3, r2, #0, #3
   12e8e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   12e92:	2301      	movs	r3, #1
			break;
   12e94:	e073      	b.n	12f7e <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   12e96:	fb0c 0202 	mla	r2, ip, r2, r0
   12e9a:	3a30      	subs	r2, #48	; 0x30
   12e9c:	460b      	mov	r3, r1
   12e9e:	e75d      	b.n	12d5c <z_cbvprintf_impl+0x110>
	switch (*sp) {
   12ea0:	2a74      	cmp	r2, #116	; 0x74
   12ea2:	d025      	beq.n	12ef0 <z_cbvprintf_impl+0x2a4>
   12ea4:	2a7a      	cmp	r2, #122	; 0x7a
   12ea6:	d1d5      	bne.n	12e54 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   12ea8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12eac:	2106      	movs	r1, #6
   12eae:	e00c      	b.n	12eca <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   12eb0:	785a      	ldrb	r2, [r3, #1]
   12eb2:	2a68      	cmp	r2, #104	; 0x68
   12eb4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12eb8:	d106      	bne.n	12ec8 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   12eba:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   12ebc:	f361 02c6 	bfi	r2, r1, #3, #4
   12ec0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   12ec4:	3302      	adds	r3, #2
   12ec6:	e7c5      	b.n	12e54 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   12ec8:	2102      	movs	r1, #2
   12eca:	f361 02c6 	bfi	r2, r1, #3, #4
   12ece:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   12ed2:	3301      	adds	r3, #1
   12ed4:	e7be      	b.n	12e54 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   12ed6:	785a      	ldrb	r2, [r3, #1]
   12ed8:	2a6c      	cmp	r2, #108	; 0x6c
   12eda:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12ede:	d101      	bne.n	12ee4 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   12ee0:	2104      	movs	r1, #4
   12ee2:	e7eb      	b.n	12ebc <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   12ee4:	2103      	movs	r1, #3
   12ee6:	e7f0      	b.n	12eca <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   12ee8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12eec:	2105      	movs	r1, #5
   12eee:	e7ec      	b.n	12eca <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   12ef0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12ef4:	2107      	movs	r1, #7
   12ef6:	e7e8      	b.n	12eca <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   12ef8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   12efc:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   12f00:	f022 0202 	bic.w	r2, r2, #2
   12f04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   12f08:	f042 0202 	orr.w	r2, r2, #2
   12f0c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   12f10:	e7df      	b.n	12ed2 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   12f12:	3b6e      	subs	r3, #110	; 0x6e
   12f14:	b2d9      	uxtb	r1, r3
   12f16:	2301      	movs	r3, #1
   12f18:	408b      	lsls	r3, r1
   12f1a:	f240 4182 	movw	r1, #1154	; 0x482
   12f1e:	420b      	tst	r3, r1
   12f20:	d137      	bne.n	12f92 <z_cbvprintf_impl+0x346>
   12f22:	f013 0f24 	tst.w	r3, #36	; 0x24
   12f26:	d151      	bne.n	12fcc <z_cbvprintf_impl+0x380>
   12f28:	07d8      	lsls	r0, r3, #31
   12f2a:	d55c      	bpl.n	12fe6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   12f2c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12f30:	2103      	movs	r1, #3
   12f32:	f361 0302 	bfi	r3, r1, #0, #3
   12f36:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   12f3a:	f002 0378 	and.w	r3, r2, #120	; 0x78
   12f3e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   12f42:	424b      	negs	r3, r1
   12f44:	414b      	adcs	r3, r1
   12f46:	e01a      	b.n	12f7e <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   12f48:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   12f4c:	b2c9      	uxtb	r1, r1
   12f4e:	2001      	movs	r0, #1
   12f50:	fa00 f101 	lsl.w	r1, r0, r1
   12f54:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   12f58:	d194      	bne.n	12e84 <z_cbvprintf_impl+0x238>
   12f5a:	f640 0601 	movw	r6, #2049	; 0x801
   12f5e:	4231      	tst	r1, r6
   12f60:	d11d      	bne.n	12f9e <z_cbvprintf_impl+0x352>
   12f62:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   12f66:	d03e      	beq.n	12fe6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   12f68:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12f6c:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12f70:	f002 0278 	and.w	r2, r2, #120	; 0x78
   12f74:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   12f76:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   12f7a:	d034      	beq.n	12fe6 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   12f7c:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   12f7e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   12f82:	f3c2 0140 	ubfx	r1, r2, #1, #1
   12f86:	430b      	orrs	r3, r1
   12f88:	f363 0241 	bfi	r2, r3, #1, #1
   12f8c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   12f90:	e6fd      	b.n	12d8e <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   12f92:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12f96:	2102      	movs	r1, #2
   12f98:	f361 0302 	bfi	r3, r1, #0, #3
   12f9c:	e7e8      	b.n	12f70 <z_cbvprintf_impl+0x324>
   12f9e:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   12fa2:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   12fa4:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   12fa8:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12fac:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12fae:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   12fb2:	bf02      	ittt	eq
   12fb4:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   12fb8:	f041 0101 	orreq.w	r1, r1, #1
   12fbc:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   12fc0:	2b63      	cmp	r3, #99	; 0x63
   12fc2:	d1db      	bne.n	12f7c <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   12fc4:	1e13      	subs	r3, r2, #0
   12fc6:	bf18      	it	ne
   12fc8:	2301      	movne	r3, #1
   12fca:	e7d8      	b.n	12f7e <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   12fcc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12fd0:	2103      	movs	r1, #3
   12fd2:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   12fd6:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   12fda:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   12fde:	bf14      	ite	ne
   12fe0:	2301      	movne	r3, #1
   12fe2:	2300      	moveq	r3, #0
   12fe4:	e7cb      	b.n	12f7e <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   12fe6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12fea:	f043 0301 	orr.w	r3, r3, #1
   12fee:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   12ff2:	e7c3      	b.n	12f7c <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   12ff4:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   12ff8:	2a00      	cmp	r2, #0
			width = conv->width_value;
   12ffa:	bfb4      	ite	lt
   12ffc:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   13000:	f04f 38ff 	movge.w	r8, #4294967295
   13004:	e6d5      	b.n	12db2 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   13006:	0798      	lsls	r0, r3, #30
   13008:	f57f aee2 	bpl.w	12dd0 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   1300c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   13010:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   13014:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   13016:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   1301a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   1301e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   13022:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   13024:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   13028:	d133      	bne.n	13092 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   1302a:	1ecb      	subs	r3, r1, #3
   1302c:	2b04      	cmp	r3, #4
   1302e:	d804      	bhi.n	1303a <z_cbvprintf_impl+0x3ee>
   13030:	e8df f003 	tbb	[pc, r3]
   13034:	21464621 	.word	0x21464621
   13038:	21          	.byte	0x21
   13039:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   1303a:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   1303c:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   1303e:	ea4f 72e3 	mov.w	r2, r3, asr #31
   13042:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   13046:	d11c      	bne.n	13082 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   13048:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   1304c:	17da      	asrs	r2, r3, #31
   1304e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   13052:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   13054:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   13058:	f013 0603 	ands.w	r6, r3, #3
   1305c:	d050      	beq.n	13100 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   1305e:	9b03      	ldr	r3, [sp, #12]
   13060:	463a      	mov	r2, r7
   13062:	4659      	mov	r1, fp
   13064:	4648      	mov	r0, r9
   13066:	f016 fd6a 	bl	29b3e <outs>
   1306a:	2800      	cmp	r0, #0
   1306c:	f2c0 8153 	blt.w	13316 <z_cbvprintf_impl+0x6ca>
   13070:	4405      	add	r5, r0
			continue;
   13072:	9f03      	ldr	r7, [sp, #12]
   13074:	e5f2      	b.n	12c5c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13076:	f854 3b04 	ldr.w	r3, [r4], #4
   1307a:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   1307c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   13080:	e7e8      	b.n	13054 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   13082:	2902      	cmp	r1, #2
   13084:	d1e5      	bne.n	13052 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   13086:	b21a      	sxth	r2, r3
   13088:	f343 33c0 	sbfx	r3, r3, #15, #1
   1308c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   13090:	e7df      	b.n	13052 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   13092:	2b02      	cmp	r3, #2
   13094:	d124      	bne.n	130e0 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   13096:	1ecb      	subs	r3, r1, #3
   13098:	2b04      	cmp	r3, #4
   1309a:	d804      	bhi.n	130a6 <z_cbvprintf_impl+0x45a>
   1309c:	e8df f003 	tbb	[pc, r3]
   130a0:	18101018 	.word	0x18101018
   130a4:	18          	.byte	0x18
   130a5:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   130a6:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   130a8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   130ac:	f04f 0200 	mov.w	r2, #0
   130b0:	d014      	beq.n	130dc <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   130b2:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   130b4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   130b8:	d1cc      	bne.n	13054 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   130ba:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   130bc:	930e      	str	r3, [sp, #56]	; 0x38
   130be:	e7c9      	b.n	13054 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   130c0:	3407      	adds	r4, #7
   130c2:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   130c6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   130ca:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   130ce:	e7c1      	b.n	13054 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   130d0:	f854 3b04 	ldr.w	r3, [r4], #4
   130d4:	930e      	str	r3, [sp, #56]	; 0x38
   130d6:	2300      	movs	r3, #0
   130d8:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   130da:	e7bb      	b.n	13054 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   130dc:	b2db      	uxtb	r3, r3
   130de:	e7cd      	b.n	1307c <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   130e0:	2b04      	cmp	r3, #4
   130e2:	d108      	bne.n	130f6 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   130e4:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   130e6:	f024 0407 	bic.w	r4, r4, #7
   130ea:	e9d4 2300 	ldrd	r2, r3, [r4]
   130ee:	3408      	adds	r4, #8
   130f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   130f4:	e7ae      	b.n	13054 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   130f6:	2b03      	cmp	r3, #3
   130f8:	d1ac      	bne.n	13054 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   130fa:	f854 3b04 	ldr.w	r3, [r4], #4
   130fe:	e7dd      	b.n	130bc <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   13100:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   13104:	2878      	cmp	r0, #120	; 0x78
   13106:	d8b4      	bhi.n	13072 <z_cbvprintf_impl+0x426>
   13108:	2862      	cmp	r0, #98	; 0x62
   1310a:	d81c      	bhi.n	13146 <z_cbvprintf_impl+0x4fa>
   1310c:	2825      	cmp	r0, #37	; 0x25
   1310e:	f43f adad 	beq.w	12c6c <z_cbvprintf_impl+0x20>
   13112:	2858      	cmp	r0, #88	; 0x58
   13114:	d1ad      	bne.n	13072 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   13116:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1311a:	9300      	str	r3, [sp, #0]
   1311c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   13120:	ab08      	add	r3, sp, #32
   13122:	aa10      	add	r2, sp, #64	; 0x40
   13124:	f016 fcc5 	bl	29ab2 <encode_uint>
			if (precision >= 0) {
   13128:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   1312c:	4607      	mov	r7, r0
			if (precision >= 0) {
   1312e:	f280 809a 	bge.w	13266 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   13132:	2f00      	cmp	r7, #0
   13134:	d09d      	beq.n	13072 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   13136:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1313a:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   1313c:	2e00      	cmp	r6, #0
   1313e:	f000 80c1 	beq.w	132c4 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   13142:	3001      	adds	r0, #1
   13144:	e0be      	b.n	132c4 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   13146:	3863      	subs	r0, #99	; 0x63
   13148:	2815      	cmp	r0, #21
   1314a:	d892      	bhi.n	13072 <z_cbvprintf_impl+0x426>
   1314c:	a201      	add	r2, pc, #4	; (adr r2, 13154 <z_cbvprintf_impl+0x508>)
   1314e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   13152:	bf00      	nop
   13154:	00013229 	.word	0x00013229
   13158:	0001323b 	.word	0x0001323b
   1315c:	00013073 	.word	0x00013073
   13160:	00013073 	.word	0x00013073
   13164:	00013073 	.word	0x00013073
   13168:	00013073 	.word	0x00013073
   1316c:	0001323b 	.word	0x0001323b
   13170:	00013073 	.word	0x00013073
   13174:	00013073 	.word	0x00013073
   13178:	00013073 	.word	0x00013073
   1317c:	00013073 	.word	0x00013073
   13180:	000132c9 	.word	0x000132c9
   13184:	00013261 	.word	0x00013261
   13188:	00013287 	.word	0x00013287
   1318c:	00013073 	.word	0x00013073
   13190:	00013073 	.word	0x00013073
   13194:	000131ad 	.word	0x000131ad
   13198:	00013073 	.word	0x00013073
   1319c:	00013261 	.word	0x00013261
   131a0:	00013073 	.word	0x00013073
   131a4:	00013073 	.word	0x00013073
   131a8:	00013261 	.word	0x00013261
			if (precision >= 0) {
   131ac:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   131b0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   131b2:	db35      	blt.n	13220 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   131b4:	4651      	mov	r1, sl
   131b6:	4638      	mov	r0, r7
   131b8:	f018 fd22 	bl	2bc00 <strnlen>
			bpe = bps + len;
   131bc:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   131c0:	2f00      	cmp	r7, #0
   131c2:	f43f af56 	beq.w	13072 <z_cbvprintf_impl+0x426>
		char sign = 0;
   131c6:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   131c8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   131cc:	f013 0210 	ands.w	r2, r3, #16
   131d0:	9205      	str	r2, [sp, #20]
   131d2:	f000 8093 	beq.w	132fc <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   131d6:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   131d8:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   131da:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   131dc:	bf48      	it	mi
   131de:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   131e0:	9204      	str	r2, [sp, #16]
   131e2:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   131e4:	bf48      	it	mi
   131e6:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   131e8:	f1b8 0f00 	cmp.w	r8, #0
   131ec:	f340 80a0 	ble.w	13330 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   131f0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   131f4:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   131f8:	f3c2 0380 	ubfx	r3, r2, #2, #1
   131fc:	0750      	lsls	r0, r2, #29
   131fe:	9306      	str	r3, [sp, #24]
   13200:	f100 8096 	bmi.w	13330 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   13204:	0651      	lsls	r1, r2, #25
   13206:	f140 8089 	bpl.w	1331c <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   1320a:	b13e      	cbz	r6, 1321c <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   1320c:	4659      	mov	r1, fp
   1320e:	4630      	mov	r0, r6
   13210:	47c8      	blx	r9
   13212:	2800      	cmp	r0, #0
   13214:	db7f      	blt.n	13316 <z_cbvprintf_impl+0x6ca>
   13216:	9b06      	ldr	r3, [sp, #24]
   13218:	3501      	adds	r5, #1
   1321a:	461e      	mov	r6, r3
					pad = '0';
   1321c:	2230      	movs	r2, #48	; 0x30
   1321e:	e07e      	b.n	1331e <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   13220:	4638      	mov	r0, r7
   13222:	f018 fce6 	bl	2bbf2 <strlen>
   13226:	e7c9      	b.n	131bc <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   13228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1322a:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   1322e:	2600      	movs	r6, #0
			bps = buf;
   13230:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   13232:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   13236:	2001      	movs	r0, #1
   13238:	e7c6      	b.n	131c8 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   1323a:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   1323c:	bf5c      	itt	pl
   1323e:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   13242:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   13244:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   13248:	bf48      	it	mi
   1324a:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   1324c:	2b00      	cmp	r3, #0
   1324e:	f6bf af62 	bge.w	13116 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   13252:	4252      	negs	r2, r2
   13254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   13258:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   1325c:	262d      	movs	r6, #45	; 0x2d
   1325e:	e75a      	b.n	13116 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   13260:	2600      	movs	r6, #0
   13262:	e758      	b.n	13116 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   13264:	2600      	movs	r6, #0
				conv->flag_zero = false;
   13266:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   1326a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1326e:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   13270:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   13274:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   13276:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   1327a:	f67f af5a 	bls.w	13132 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   1327e:	ebaa 0303 	sub.w	r3, sl, r3
   13282:	9311      	str	r3, [sp, #68]	; 0x44
   13284:	e755      	b.n	13132 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   13286:	980e      	ldr	r0, [sp, #56]	; 0x38
   13288:	b390      	cbz	r0, 132f0 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1328a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1328e:	9300      	str	r3, [sp, #0]
   13290:	aa10      	add	r2, sp, #64	; 0x40
   13292:	ab08      	add	r3, sp, #32
   13294:	2100      	movs	r1, #0
   13296:	f016 fc0c 	bl	29ab2 <encode_uint>
				conv->altform_0c = true;
   1329a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   1329e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   132a2:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   132a6:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   132aa:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   132ae:	4607      	mov	r7, r0
				conv->altform_0c = true;
   132b0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   132b4:	dad6      	bge.n	13264 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   132b6:	2800      	cmp	r0, #0
   132b8:	f43f aedb 	beq.w	13072 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   132bc:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   132c0:	1a18      	subs	r0, r3, r0
		char sign = 0;
   132c2:	2600      	movs	r6, #0
   132c4:	469a      	mov	sl, r3
   132c6:	e77f      	b.n	131c8 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   132c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   132ca:	2907      	cmp	r1, #7
   132cc:	f63f aed1 	bhi.w	13072 <z_cbvprintf_impl+0x426>
   132d0:	e8df f001 	tbb	[pc, r1]
   132d4:	0c06040c 	.word	0x0c06040c
   132d8:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   132dc:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   132de:	e6c8      	b.n	13072 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   132e0:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   132e2:	e6c6      	b.n	13072 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   132e4:	17ea      	asrs	r2, r5, #31
   132e6:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   132ea:	e6c2      	b.n	13072 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   132ec:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   132ee:	e6c0      	b.n	13072 <z_cbvprintf_impl+0x426>
   132f0:	4f2e      	ldr	r7, [pc, #184]	; (133ac <z_cbvprintf_impl+0x760>)
		char sign = 0;
   132f2:	4606      	mov	r6, r0
			bpe = bps + 5;
   132f4:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   132f8:	2005      	movs	r0, #5
   132fa:	e765      	b.n	131c8 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   132fc:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   132fe:	bf48      	it	mi
   13300:	3001      	addmi	r0, #1
   13302:	e769      	b.n	131d8 <z_cbvprintf_impl+0x58c>
   13304:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   13306:	4610      	mov	r0, r2
   13308:	9206      	str	r2, [sp, #24]
   1330a:	4659      	mov	r1, fp
   1330c:	47c8      	blx	r9
   1330e:	2800      	cmp	r0, #0
   13310:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   13314:	da04      	bge.n	13320 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   13316:	b015      	add	sp, #84	; 0x54
   13318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1331c:	2220      	movs	r2, #32
					pad = '0';
   1331e:	4643      	mov	r3, r8
				while (width-- > 0) {
   13320:	4619      	mov	r1, r3
   13322:	2900      	cmp	r1, #0
   13324:	f103 33ff 	add.w	r3, r3, #4294967295
   13328:	dcec      	bgt.n	13304 <z_cbvprintf_impl+0x6b8>
   1332a:	4445      	add	r5, r8
   1332c:	1a6d      	subs	r5, r5, r1
   1332e:	4698      	mov	r8, r3
		if (sign != 0) {
   13330:	b12e      	cbz	r6, 1333e <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   13332:	4659      	mov	r1, fp
   13334:	4630      	mov	r0, r6
   13336:	47c8      	blx	r9
   13338:	2800      	cmp	r0, #0
   1333a:	dbec      	blt.n	13316 <z_cbvprintf_impl+0x6ca>
   1333c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1333e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   13342:	06da      	lsls	r2, r3, #27
   13344:	d401      	bmi.n	1334a <z_cbvprintf_impl+0x6fe>
   13346:	071b      	lsls	r3, r3, #28
   13348:	d505      	bpl.n	13356 <z_cbvprintf_impl+0x70a>
				OUTC('0');
   1334a:	4659      	mov	r1, fp
   1334c:	2030      	movs	r0, #48	; 0x30
   1334e:	47c8      	blx	r9
   13350:	2800      	cmp	r0, #0
   13352:	dbe0      	blt.n	13316 <z_cbvprintf_impl+0x6ca>
   13354:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   13356:	9b05      	ldr	r3, [sp, #20]
   13358:	b133      	cbz	r3, 13368 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   1335a:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   1335e:	4659      	mov	r1, fp
   13360:	47c8      	blx	r9
   13362:	2800      	cmp	r0, #0
   13364:	dbd7      	blt.n	13316 <z_cbvprintf_impl+0x6ca>
   13366:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   13368:	9e04      	ldr	r6, [sp, #16]
   1336a:	442e      	add	r6, r5
   1336c:	e005      	b.n	1337a <z_cbvprintf_impl+0x72e>
				OUTC('0');
   1336e:	4659      	mov	r1, fp
   13370:	2030      	movs	r0, #48	; 0x30
   13372:	47c8      	blx	r9
   13374:	2800      	cmp	r0, #0
   13376:	dbce      	blt.n	13316 <z_cbvprintf_impl+0x6ca>
   13378:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1337a:	1b73      	subs	r3, r6, r5
   1337c:	2b00      	cmp	r3, #0
   1337e:	dcf6      	bgt.n	1336e <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   13380:	4653      	mov	r3, sl
   13382:	463a      	mov	r2, r7
   13384:	4659      	mov	r1, fp
   13386:	4648      	mov	r0, r9
   13388:	f016 fbd9 	bl	29b3e <outs>
   1338c:	2800      	cmp	r0, #0
   1338e:	dbc2      	blt.n	13316 <z_cbvprintf_impl+0x6ca>
   13390:	4405      	add	r5, r0
		while (width > 0) {
   13392:	44a8      	add	r8, r5
   13394:	eba8 0305 	sub.w	r3, r8, r5
   13398:	2b00      	cmp	r3, #0
   1339a:	f77f ae6a 	ble.w	13072 <z_cbvprintf_impl+0x426>
			OUTC(' ');
   1339e:	4659      	mov	r1, fp
   133a0:	2020      	movs	r0, #32
   133a2:	47c8      	blx	r9
   133a4:	2800      	cmp	r0, #0
   133a6:	dbb6      	blt.n	13316 <z_cbvprintf_impl+0x6ca>
   133a8:	3501      	adds	r5, #1
			--width;
   133aa:	e7f3      	b.n	13394 <z_cbvprintf_impl+0x748>
   133ac:	0003138f 	.word	0x0003138f

000133b0 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   133b0:	b508      	push	{r3, lr}
   133b2:	4604      	mov	r4, r0
	__asm__ volatile(
   133b4:	f04f 0240 	mov.w	r2, #64	; 0x40
   133b8:	f3ef 8311 	mrs	r3, BASEPRI
   133bc:	f382 8812 	msr	BASEPRI_MAX, r2
   133c0:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
   133c4:	f00f fa32 	bl	2282c <sys_clock_disable>
	}

	sys_arch_reboot(type);
   133c8:	4620      	mov	r0, r4
   133ca:	f002 fe85 	bl	160d8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   133ce:	4803      	ldr	r0, [pc, #12]	; (133dc <sys_reboot+0x2c>)
   133d0:	f016 f89e 	bl	29510 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   133d4:	f001 ff72 	bl	152bc <arch_cpu_idle>
   133d8:	e7fc      	b.n	133d4 <sys_reboot+0x24>
   133da:	bf00      	nop
   133dc:	00031395 	.word	0x00031395

000133e0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   133e0:	f010 bbbc 	b.w	23b5c <SystemInit>

000133e4 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   133e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   133e8:	460f      	mov	r7, r1
   133ea:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   133ec:	2108      	movs	r1, #8
   133ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   133f0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 13444 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   133f4:	f016 feac 	bl	2a150 <nvs_al_size.isra.0>
	*addr -= ate_size;
   133f8:	683c      	ldr	r4, [r7, #0]
   133fa:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   133fc:	4680      	mov	r8, r0
	*addr -= ate_size;
   133fe:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   13400:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   13404:	42ac      	cmp	r4, r5
   13406:	d803      	bhi.n	13410 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   13408:	2000      	movs	r0, #0
}
   1340a:	b003      	add	sp, #12
   1340c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   13410:	2308      	movs	r3, #8
   13412:	466a      	mov	r2, sp
   13414:	4621      	mov	r1, r4
   13416:	4630      	mov	r0, r6
   13418:	f016 fe0a 	bl	2a030 <nvs_flash_rd>
		if (rc) {
   1341c:	2800      	cmp	r0, #0
   1341e:	d1f4      	bne.n	1340a <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   13420:	4669      	mov	r1, sp
   13422:	4630      	mov	r0, r6
   13424:	f016 fe9e 	bl	2a164 <nvs_ate_valid>
   13428:	b140      	cbz	r0, 1343c <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   1342a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1342e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   13432:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   13434:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   13438:	4413      	add	r3, r2
   1343a:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   1343c:	eba4 0408 	sub.w	r4, r4, r8
   13440:	e7e0      	b.n	13404 <nvs_recover_last_ate+0x20>
   13442:	bf00      	nop
   13444:	ffff0000 	.word	0xffff0000

00013448 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   13448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1344c:	b089      	sub	sp, #36	; 0x24
   1344e:	4604      	mov	r4, r0
   13450:	af00      	add	r7, sp, #0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   13452:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_init(mutex);
   13456:	4640      	mov	r0, r8
   13458:	f01b fd1d 	bl	2ee96 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   1345c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   1345e:	6883      	ldr	r3, [r0, #8]
   13460:	68db      	ldr	r3, [r3, #12]
   13462:	4798      	blx	r3
   13464:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   13466:	b9b0      	cbnz	r0, 13496 <nvs_mount+0x4e>
		LOG_ERR("Could not obtain flash parameters");
   13468:	466c      	mov	r4, sp
   1346a:	b088      	sub	sp, #32
   1346c:	466a      	mov	r2, sp
   1346e:	4b97      	ldr	r3, [pc, #604]	; (136cc <nvs_mount+0x284>)

	write_block_size = flash_get_write_block_size(fs->flash_device);

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
		LOG_ERR("Unsupported write block size");
   13470:	6153      	str	r3, [r2, #20]
   13472:	4b97      	ldr	r3, [pc, #604]	; (136d0 <nvs_mount+0x288>)
   13474:	6193      	str	r3, [r2, #24]
   13476:	2303      	movs	r3, #3
   13478:	f842 3f10 	str.w	r3, [r2, #16]!
   1347c:	4895      	ldr	r0, [pc, #596]	; (136d4 <nvs_mount+0x28c>)
   1347e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13482:	f016 fe62 	bl	2a14a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   13486:	f06f 0515 	mvn.w	r5, #21
   1348a:	46a5      	mov	sp, r4
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   1348c:	4628      	mov	r0, r5
   1348e:	3724      	adds	r7, #36	; 0x24
   13490:	46bd      	mov	sp, r7
   13492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   13496:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   13498:	6883      	ldr	r3, [r0, #8]
   1349a:	68db      	ldr	r3, [r3, #12]
   1349c:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   1349e:	6803      	ldr	r3, [r0, #0]
   134a0:	3b01      	subs	r3, #1
   134a2:	2b1f      	cmp	r3, #31
   134a4:	d904      	bls.n	134b0 <nvs_mount+0x68>
		LOG_ERR("Unsupported write block size");
   134a6:	466c      	mov	r4, sp
   134a8:	b088      	sub	sp, #32
   134aa:	466a      	mov	r2, sp
   134ac:	4b8a      	ldr	r3, [pc, #552]	; (136d8 <nvs_mount+0x290>)
   134ae:	e7df      	b.n	13470 <nvs_mount+0x28>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   134b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   134b2:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   134b4:	f107 0214 	add.w	r2, r7, #20
   134b8:	f01b f97c 	bl	2e7b4 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   134bc:	b120      	cbz	r0, 134c8 <nvs_mount+0x80>
		LOG_ERR("Unable to get page info");
   134be:	466c      	mov	r4, sp
   134c0:	b088      	sub	sp, #32
   134c2:	466a      	mov	r2, sp
   134c4:	4b85      	ldr	r3, [pc, #532]	; (136dc <nvs_mount+0x294>)
   134c6:	e7d3      	b.n	13470 <nvs_mount+0x28>
	if (!fs->sector_size || fs->sector_size % info.size) {
   134c8:	89a5      	ldrh	r5, [r4, #12]
   134ca:	b12d      	cbz	r5, 134d8 <nvs_mount+0x90>
   134cc:	69bb      	ldr	r3, [r7, #24]
   134ce:	fbb5 f2f3 	udiv	r2, r5, r3
   134d2:	fb03 5512 	mls	r5, r3, r2, r5
   134d6:	b125      	cbz	r5, 134e2 <nvs_mount+0x9a>
		LOG_ERR("Invalid sector size");
   134d8:	466c      	mov	r4, sp
   134da:	b088      	sub	sp, #32
   134dc:	466a      	mov	r2, sp
   134de:	4b80      	ldr	r3, [pc, #512]	; (136e0 <nvs_mount+0x298>)
   134e0:	e7c6      	b.n	13470 <nvs_mount+0x28>
	if (fs->sector_count < 2) {
   134e2:	89e3      	ldrh	r3, [r4, #14]
   134e4:	2b01      	cmp	r3, #1
   134e6:	d804      	bhi.n	134f2 <nvs_mount+0xaa>
		LOG_ERR("Configuration error - sector count");
   134e8:	466c      	mov	r4, sp
   134ea:	b088      	sub	sp, #32
   134ec:	466a      	mov	r2, sp
   134ee:	4b7d      	ldr	r3, [pc, #500]	; (136e4 <nvs_mount+0x29c>)
   134f0:	e7be      	b.n	13470 <nvs_mount+0x28>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   134f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   134f4:	603d      	str	r5, [r7, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   134f6:	f893 a004 	ldrb.w	sl, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   134fa:	f04f 33ff 	mov.w	r3, #4294967295
   134fe:	f04f 32ff 	mov.w	r2, #4294967295
   13502:	4640      	mov	r0, r8
   13504:	f011 fe46 	bl	25194 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13508:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1350a:	2108      	movs	r1, #8
   1350c:	f016 fe20 	bl	2a150 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   13510:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13512:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   13514:	89e3      	ldrh	r3, [r4, #14]
   13516:	fa1f fb85 	uxth.w	fp, r5
   1351a:	455b      	cmp	r3, fp
   1351c:	d808      	bhi.n	13530 <nvs_mount+0xe8>
	if (closed_sectors == fs->sector_count) {
   1351e:	89e3      	ldrh	r3, [r4, #14]
   13520:	454b      	cmp	r3, r9
   13522:	d123      	bne.n	1356c <nvs_mount+0x124>
	return z_impl_k_mutex_unlock(mutex);
   13524:	4640      	mov	r0, r8
   13526:	f011 feaf 	bl	25288 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
   1352a:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   1352e:	e7ad      	b.n	1348c <nvs_mount+0x44>
		       (uint16_t)(fs->sector_size - ate_size);
   13530:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   13532:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   13534:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   13536:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1353a:	4652      	mov	r2, sl
   1353c:	2308      	movs	r3, #8
   1353e:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   13540:	6039      	str	r1, [r7, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13542:	f016 fdba 	bl	2a0ba <nvs_flash_cmp_const>
		if (rc) {
   13546:	b178      	cbz	r0, 13568 <nvs_mount+0x120>
			nvs_sector_advance(fs, &addr);
   13548:	4639      	mov	r1, r7
   1354a:	4620      	mov	r0, r4
   1354c:	f016 fd7e 	bl	2a04c <nvs_sector_advance>
			closed_sectors++;
   13550:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13554:	6839      	ldr	r1, [r7, #0]
   13556:	2308      	movs	r3, #8
   13558:	4652      	mov	r2, sl
   1355a:	4620      	mov	r0, r4
			closed_sectors++;
   1355c:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13560:	f016 fdab 	bl	2a0ba <nvs_flash_cmp_const>
			if (!rc) {
   13564:	2800      	cmp	r0, #0
   13566:	d0da      	beq.n	1351e <nvs_mount+0xd6>
	for (i = 0; i < fs->sector_count; i++) {
   13568:	3501      	adds	r5, #1
   1356a:	e7d3      	b.n	13514 <nvs_mount+0xcc>
	if (i == fs->sector_count) {
   1356c:	455b      	cmp	r3, fp
   1356e:	d10b      	bne.n	13588 <nvs_mount+0x140>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   13570:	6839      	ldr	r1, [r7, #0]
   13572:	2308      	movs	r3, #8
   13574:	4652      	mov	r2, sl
   13576:	1b89      	subs	r1, r1, r6
   13578:	4620      	mov	r0, r4
   1357a:	f016 fd9e 	bl	2a0ba <nvs_flash_cmp_const>
		if (!rc) {
   1357e:	b918      	cbnz	r0, 13588 <nvs_mount+0x140>
			nvs_sector_advance(fs, &addr);
   13580:	4639      	mov	r1, r7
   13582:	4620      	mov	r0, r4
   13584:	f016 fd62 	bl	2a04c <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
   13588:	4639      	mov	r1, r7
   1358a:	4620      	mov	r0, r4
   1358c:	f7ff ff2a 	bl	133e4 <nvs_recover_last_ate>
	if (rc) {
   13590:	4605      	mov	r5, r0
   13592:	b118      	cbz	r0, 1359c <nvs_mount+0x154>
   13594:	4640      	mov	r0, r8
   13596:	f011 fe77 	bl	25288 <z_impl_k_mutex_unlock>
	if (rc) {
   1359a:	e777      	b.n	1348c <nvs_mount+0x44>
	fs->ate_wra = addr;
   1359c:	683b      	ldr	r3, [r7, #0]
   1359e:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   135a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
   135a4:	ea4f 4909 	mov.w	r9, r9, lsl #16
   135a8:	f8c4 9008 	str.w	r9, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   135ac:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   135b0:	4299      	cmp	r1, r3
   135b2:	d30f      	bcc.n	135d4 <nvs_mount+0x18c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   135b4:	2308      	movs	r3, #8
   135b6:	1d3a      	adds	r2, r7, #4
   135b8:	4620      	mov	r0, r4
   135ba:	f016 fd39 	bl	2a030 <nvs_flash_rd>
		if (rc) {
   135be:	4605      	mov	r5, r0
   135c0:	2800      	cmp	r0, #0
   135c2:	d1e7      	bne.n	13594 <nvs_mount+0x14c>
   135c4:	1d3b      	adds	r3, r7, #4
		if (data8[i] != value) {
   135c6:	f813 2b01 	ldrb.w	r2, [r3], #1
   135ca:	4592      	cmp	sl, r2
   135cc:	d149      	bne.n	13662 <nvs_mount+0x21a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   135ce:	3501      	adds	r5, #1
   135d0:	2d08      	cmp	r5, #8
   135d2:	d1f8      	bne.n	135c6 <nvs_mount+0x17e>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   135d4:	6863      	ldr	r3, [r4, #4]
   135d6:	0c1b      	lsrs	r3, r3, #16
   135d8:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   135da:	4639      	mov	r1, r7
   135dc:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
   135de:	603b      	str	r3, [r7, #0]
	nvs_sector_advance(fs, &addr);
   135e0:	f016 fd34 	bl	2a04c <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   135e4:	89a3      	ldrh	r3, [r4, #12]
   135e6:	6839      	ldr	r1, [r7, #0]
   135e8:	4652      	mov	r2, sl
   135ea:	4620      	mov	r0, r4
   135ec:	f016 fd65 	bl	2a0ba <nvs_flash_cmp_const>
	if (rc < 0) {
   135f0:	1e05      	subs	r5, r0, #0
   135f2:	dbcf      	blt.n	13594 <nvs_mount+0x14c>
		addr = fs->ate_wra + ate_size;
   135f4:	6863      	ldr	r3, [r4, #4]
	if (rc) {
   135f6:	f000 808b 	beq.w	13710 <nvs_mount+0x2c8>
		addr = fs->ate_wra + ate_size;
   135fa:	eb06 0903 	add.w	r9, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   135fe:	f64f 7aff 	movw	sl, #65535	; 0xffff
   13602:	89a3      	ldrh	r3, [r4, #12]
		addr = fs->ate_wra + ate_size;
   13604:	f8c7 9000 	str.w	r9, [r7]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   13608:	fa1f f289 	uxth.w	r2, r9
   1360c:	1b9b      	subs	r3, r3, r6
   1360e:	429a      	cmp	r2, r3
   13610:	d341      	bcc.n	13696 <nvs_mount+0x24e>
		LOG_INF("No GC Done marker found: restarting gc");
   13612:	466d      	mov	r5, sp
   13614:	b088      	sub	sp, #32
   13616:	466a      	mov	r2, sp
   13618:	4b33      	ldr	r3, [pc, #204]	; (136e8 <nvs_mount+0x2a0>)
   1361a:	6153      	str	r3, [r2, #20]
   1361c:	4b33      	ldr	r3, [pc, #204]	; (136ec <nvs_mount+0x2a4>)
   1361e:	6193      	str	r3, [r2, #24]
   13620:	2303      	movs	r3, #3
   13622:	f842 3f10 	str.w	r3, [r2, #16]!
   13626:	482b      	ldr	r0, [pc, #172]	; (136d4 <nvs_mount+0x28c>)
   13628:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1362c:	f016 fd8d 	bl	2a14a <z_log_msg_static_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   13630:	4620      	mov	r0, r4
   13632:	46ad      	mov	sp, r5
   13634:	6861      	ldr	r1, [r4, #4]
   13636:	f016 fd65 	bl	2a104 <nvs_flash_erase_sector>
		if (rc) {
   1363a:	4605      	mov	r5, r0
   1363c:	2800      	cmp	r0, #0
   1363e:	d1a9      	bne.n	13594 <nvs_mount+0x14c>
		fs->ate_wra &= ADDR_SECT_MASK;
   13640:	6863      	ldr	r3, [r4, #4]
   13642:	4a2b      	ldr	r2, [pc, #172]	; (136f0 <nvs_mount+0x2a8>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   13644:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   13646:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   13648:	440b      	add	r3, r1
   1364a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   1364e:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   13650:	4013      	ands	r3, r2
   13652:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   13654:	4620      	mov	r0, r4
   13656:	f016 fe67 	bl	2a328 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
   1365a:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   1365c:	2d00      	cmp	r5, #0
   1365e:	d073      	beq.n	13748 <nvs_mount+0x300>
   13660:	e798      	b.n	13594 <nvs_mount+0x14c>
		if (nvs_ate_valid(fs, &last_ate)) {
   13662:	1d39      	adds	r1, r7, #4
   13664:	4620      	mov	r0, r4
   13666:	f016 fd7d 	bl	2a164 <nvs_ate_valid>
   1366a:	6862      	ldr	r2, [r4, #4]
   1366c:	b910      	cbnz	r0, 13674 <nvs_mount+0x22c>
		fs->ate_wra -= ate_size;
   1366e:	1b92      	subs	r2, r2, r6
   13670:	6062      	str	r2, [r4, #4]
   13672:	e79b      	b.n	135ac <nvs_mount+0x164>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13674:	893d      	ldrh	r5, [r7, #8]
   13676:	88f9      	ldrh	r1, [r7, #6]
   13678:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   1367a:	f8c4 9008 	str.w	r9, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1367e:	4429      	add	r1, r5
   13680:	f016 fd66 	bl	2a150 <nvs_al_size.isra.0>
   13684:	4448      	add	r0, r9
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   13686:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13688:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1368a:	d1f0      	bne.n	1366e <nvs_mount+0x226>
   1368c:	2d00      	cmp	r5, #0
   1368e:	d0ee      	beq.n	1366e <nvs_mount+0x226>
				rc = -ESPIPE;
   13690:	f06f 051c 	mvn.w	r5, #28
   13694:	e0a5      	b.n	137e2 <nvs_mount+0x39a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   13696:	2308      	movs	r3, #8
   13698:	f107 020c 	add.w	r2, r7, #12
   1369c:	4649      	mov	r1, r9
   1369e:	4620      	mov	r0, r4
   136a0:	f016 fcc6 	bl	2a030 <nvs_flash_rd>
			if (rc) {
   136a4:	4605      	mov	r5, r0
   136a6:	2800      	cmp	r0, #0
   136a8:	f47f af74 	bne.w	13594 <nvs_mount+0x14c>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   136ac:	f107 010c 	add.w	r1, r7, #12
   136b0:	4620      	mov	r0, r4
   136b2:	f016 fd57 	bl	2a164 <nvs_ate_valid>
   136b6:	b130      	cbz	r0, 136c6 <nvs_mount+0x27e>
   136b8:	89bb      	ldrh	r3, [r7, #12]
   136ba:	4553      	cmp	r3, sl
   136bc:	d103      	bne.n	136c6 <nvs_mount+0x27e>
			    (gc_done_ate.id == 0xffff) &&
   136be:	8a3b      	ldrh	r3, [r7, #16]
   136c0:	2b00      	cmp	r3, #0
   136c2:	f000 8094 	beq.w	137ee <nvs_mount+0x3a6>
			addr += ate_size;
   136c6:	44b1      	add	r9, r6
   136c8:	e79b      	b.n	13602 <nvs_mount+0x1ba>
   136ca:	bf00      	nop
   136cc:	000313d6 	.word	0x000313d6
   136d0:	00031526 	.word	0x00031526
   136d4:	0002fc9c 	.word	0x0002fc9c
   136d8:	000313fc 	.word	0x000313fc
   136dc:	0003141d 	.word	0x0003141d
   136e0:	00031439 	.word	0x00031439
   136e4:	00031451 	.word	0x00031451
   136e8:	000314be 	.word	0x000314be
   136ec:	0003151a 	.word	0x0003151a
   136f0:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   136f4:	1a5b      	subs	r3, r3, r1
   136f6:	4652      	mov	r2, sl
   136f8:	4620      	mov	r0, r4
   136fa:	f016 fcde 	bl	2a0ba <nvs_flash_cmp_const>
		if (rc < 0) {
   136fe:	1e05      	subs	r5, r0, #0
   13700:	f6ff af48 	blt.w	13594 <nvs_mount+0x14c>
		if (!rc) {
   13704:	d008      	beq.n	13718 <nvs_mount+0x2d0>
		fs->data_wra += fs->flash_parameters->write_block_size;
   13706:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   13708:	68a3      	ldr	r3, [r4, #8]
   1370a:	6812      	ldr	r2, [r2, #0]
   1370c:	4413      	add	r3, r2
   1370e:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   13710:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   13714:	428b      	cmp	r3, r1
   13716:	d8ed      	bhi.n	136f4 <nvs_mount+0x2ac>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13718:	6861      	ldr	r1, [r4, #4]
   1371a:	89a3      	ldrh	r3, [r4, #12]
   1371c:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   13720:	429a      	cmp	r2, r3
   13722:	d19b      	bne.n	1365c <nvs_mount+0x214>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   13724:	f8df 9100 	ldr.w	r9, [pc, #256]	; 13828 <nvs_mount+0x3e0>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13728:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   1372a:	ea01 0209 	and.w	r2, r1, r9
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1372e:	4293      	cmp	r3, r2
   13730:	d094      	beq.n	1365c <nvs_mount+0x214>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   13732:	4620      	mov	r0, r4
   13734:	f016 fce6 	bl	2a104 <nvs_flash_erase_sector>
		if (rc) {
   13738:	4605      	mov	r5, r0
   1373a:	2800      	cmp	r0, #0
   1373c:	f47f af2a 	bne.w	13594 <nvs_mount+0x14c>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   13740:	6863      	ldr	r3, [r4, #4]
   13742:	ea03 0309 	and.w	r3, r3, r9
   13746:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   13748:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   1374a:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   1374c:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   13750:	429a      	cmp	r2, r3
   13752:	d042      	beq.n	137da <nvs_mount+0x392>
   13754:	4640      	mov	r0, r8
   13756:	f011 fd97 	bl	25288 <z_impl_k_mutex_unlock>
	fs->ready = true;
   1375a:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   1375c:	46e8      	mov	r8, sp
   1375e:	b08a      	sub	sp, #40	; 0x28
	fs->ready = true;
   13760:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   13762:	89e2      	ldrh	r2, [r4, #14]
   13764:	89a3      	ldrh	r3, [r4, #12]
   13766:	466d      	mov	r5, sp
   13768:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 1382c <nvs_mount+0x3e4>
   1376c:	4930      	ldr	r1, [pc, #192]	; (13830 <nvs_mount+0x3e8>)
   1376e:	6169      	str	r1, [r5, #20]
   13770:	462e      	mov	r6, r5
   13772:	f04f 0905 	mov.w	r9, #5
   13776:	e9c5 a206 	strd	sl, r2, [r5, #24]
   1377a:	622b      	str	r3, [r5, #32]
   1377c:	f846 9f10 	str.w	r9, [r6, #16]!
   13780:	482c      	ldr	r0, [pc, #176]	; (13834 <nvs_mount+0x3ec>)
   13782:	4632      	mov	r2, r6
   13784:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   13788:	f016 fcdf 	bl	2a14a <z_log_msg_static_create.constprop.0>
   1378c:	46c5      	mov	sp, r8
	LOG_INF("alloc wra: %d, %x",
   1378e:	6863      	ldr	r3, [r4, #4]
   13790:	46ad      	mov	sp, r5
   13792:	4a29      	ldr	r2, [pc, #164]	; (13838 <nvs_mount+0x3f0>)
   13794:	4827      	ldr	r0, [pc, #156]	; (13834 <nvs_mount+0x3ec>)
   13796:	f8c5 9010 	str.w	r9, [r5, #16]
   1379a:	e9c5 2a05 	strd	r2, sl, [r5, #20]
   1379e:	0c1a      	lsrs	r2, r3, #16
   137a0:	b29b      	uxth	r3, r3
   137a2:	61ea      	str	r2, [r5, #28]
   137a4:	622b      	str	r3, [r5, #32]
   137a6:	4632      	mov	r2, r6
   137a8:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   137ac:	f016 fccd 	bl	2a14a <z_log_msg_static_create.constprop.0>
   137b0:	46c5      	mov	sp, r8
	LOG_INF("data wra: %d, %x",
   137b2:	68a3      	ldr	r3, [r4, #8]
   137b4:	46ad      	mov	sp, r5
   137b6:	4a21      	ldr	r2, [pc, #132]	; (1383c <nvs_mount+0x3f4>)
   137b8:	f8c5 9010 	str.w	r9, [r5, #16]
   137bc:	e9c5 2a05 	strd	r2, sl, [r5, #20]
   137c0:	0c1a      	lsrs	r2, r3, #16
   137c2:	b29b      	uxth	r3, r3
   137c4:	61ea      	str	r2, [r5, #28]
   137c6:	622b      	str	r3, [r5, #32]
   137c8:	481a      	ldr	r0, [pc, #104]	; (13834 <nvs_mount+0x3ec>)
   137ca:	4632      	mov	r2, r6
   137cc:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   137d0:	f016 fcbb 	bl	2a14a <z_log_msg_static_create.constprop.0>
	return 0;
   137d4:	2500      	movs	r5, #0
   137d6:	46c5      	mov	sp, r8
   137d8:	e658      	b.n	1348c <nvs_mount+0x44>
		rc = nvs_add_gc_done_ate(fs);
   137da:	4620      	mov	r0, r4
   137dc:	f016 fd8f 	bl	2a2fe <nvs_add_gc_done_ate>
   137e0:	4605      	mov	r5, r0
   137e2:	4640      	mov	r0, r8
   137e4:	f011 fd50 	bl	25288 <z_impl_k_mutex_unlock>
	if (rc) {
   137e8:	2d00      	cmp	r5, #0
   137ea:	d0b6      	beq.n	1375a <nvs_mount+0x312>
   137ec:	e64e      	b.n	1348c <nvs_mount+0x44>
			LOG_INF("GC Done marker found");
   137ee:	466d      	mov	r5, sp
   137f0:	b088      	sub	sp, #32
   137f2:	466a      	mov	r2, sp
   137f4:	4b12      	ldr	r3, [pc, #72]	; (13840 <nvs_mount+0x3f8>)
   137f6:	6153      	str	r3, [r2, #20]
   137f8:	4b12      	ldr	r3, [pc, #72]	; (13844 <nvs_mount+0x3fc>)
   137fa:	6193      	str	r3, [r2, #24]
   137fc:	2303      	movs	r3, #3
   137fe:	f842 3f10 	str.w	r3, [r2, #16]!
   13802:	480c      	ldr	r0, [pc, #48]	; (13834 <nvs_mount+0x3ec>)
   13804:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   13808:	f016 fc9f 	bl	2a14a <z_log_msg_static_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   1380c:	6863      	ldr	r3, [r4, #4]
   1380e:	0c1b      	lsrs	r3, r3, #16
   13810:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   13812:	4639      	mov	r1, r7
   13814:	4620      	mov	r0, r4
   13816:	46ad      	mov	sp, r5
			addr = fs->ate_wra & ADDR_SECT_MASK;
   13818:	603b      	str	r3, [r7, #0]
			nvs_sector_advance(fs, &addr);
   1381a:	f016 fc17 	bl	2a04c <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   1381e:	6839      	ldr	r1, [r7, #0]
   13820:	4620      	mov	r0, r4
   13822:	f016 fc6f 	bl	2a104 <nvs_flash_erase_sector>
   13826:	e718      	b.n	1365a <nvs_mount+0x212>
   13828:	ffff0000 	.word	0xffff0000
   1382c:	00031526 	.word	0x00031526
   13830:	00031478 	.word	0x00031478
   13834:	0002fc9c 	.word	0x0002fc9c
   13838:	00031493 	.word	0x00031493
   1383c:	000314a9 	.word	0x000314a9
   13840:	000314e9 	.word	0x000314e9
   13844:	0003151a 	.word	0x0003151a

00013848 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   13848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1384c:	b089      	sub	sp, #36	; 0x24
   1384e:	461d      	mov	r5, r3
   13850:	af00      	add	r7, sp, #0
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   13852:	7c03      	ldrb	r3, [r0, #16]
{
   13854:	6079      	str	r1, [r7, #4]
   13856:	4604      	mov	r4, r0
   13858:	4691      	mov	r9, r2
	if (!fs->ready) {
   1385a:	b9b3      	cbnz	r3, 1388a <nvs_write+0x42>
		LOG_ERR("NVS not initialized");
   1385c:	466c      	mov	r4, sp
   1385e:	b088      	sub	sp, #32
   13860:	466a      	mov	r2, sp
   13862:	4b69      	ldr	r3, [pc, #420]	; (13a08 <nvs_write+0x1c0>)
   13864:	6153      	str	r3, [r2, #20]
   13866:	4b69      	ldr	r3, [pc, #420]	; (13a0c <nvs_write+0x1c4>)
   13868:	6193      	str	r3, [r2, #24]
   1386a:	2303      	movs	r3, #3
   1386c:	f842 3f10 	str.w	r3, [r2, #16]!
   13870:	4867      	ldr	r0, [pc, #412]	; (13a10 <nvs_write+0x1c8>)
   13872:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13876:	f016 fc68 	bl	2a14a <z_log_msg_static_create.constprop.0>
		return -EACCES;
   1387a:	f06f 060c 	mvn.w	r6, #12
   1387e:	46a5      	mov	sp, r4
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   13880:	4630      	mov	r0, r6
   13882:	3724      	adds	r7, #36	; 0x24
   13884:	46bd      	mov	sp, r7
   13886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1388a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   1388c:	2108      	movs	r1, #8
   1388e:	4610      	mov	r0, r2
   13890:	f016 fc5e 	bl	2a150 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   13894:	4629      	mov	r1, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13896:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   13898:	4610      	mov	r0, r2
   1389a:	f016 fc59 	bl	2a150 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   1389e:	89a3      	ldrh	r3, [r4, #12]
   138a0:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   138a4:	42ab      	cmp	r3, r5
	data_size = nvs_al_size(fs, len);
   138a6:	4680      	mov	r8, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   138a8:	f0c0 80ab 	bcc.w	13a02 <nvs_write+0x1ba>
   138ac:	b11d      	cbz	r5, 138b6 <nvs_write+0x6e>
	    ((len > 0) && (data == NULL))) {
   138ae:	f1b9 0f00 	cmp.w	r9, #0
   138b2:	f000 80a6 	beq.w	13a02 <nvs_write+0x1ba>
	wlk_addr = fs->ate_wra;
   138b6:	6863      	ldr	r3, [r4, #4]
   138b8:	60fb      	str	r3, [r7, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   138ba:	f107 0210 	add.w	r2, r7, #16
   138be:	f107 010c 	add.w	r1, r7, #12
   138c2:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   138c4:	f8d7 b00c 	ldr.w	fp, [r7, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   138c8:	f016 fc84 	bl	2a1d4 <nvs_prev_ate>
		if (rc) {
   138cc:	4606      	mov	r6, r0
   138ce:	2800      	cmp	r0, #0
   138d0:	d1d6      	bne.n	13880 <nvs_write+0x38>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   138d2:	8a3b      	ldrh	r3, [r7, #16]
   138d4:	687a      	ldr	r2, [r7, #4]
   138d6:	4293      	cmp	r3, r2
   138d8:	d005      	beq.n	138e6 <nvs_write+0x9e>
		if (wlk_addr == fs->ate_wra) {
   138da:	6862      	ldr	r2, [r4, #4]
   138dc:	68fb      	ldr	r3, [r7, #12]
   138de:	429a      	cmp	r2, r3
   138e0:	d1eb      	bne.n	138ba <nvs_write+0x72>
		if (len == 0) {
   138e2:	b9dd      	cbnz	r5, 1391c <nvs_write+0xd4>
   138e4:	e7cc      	b.n	13880 <nvs_write+0x38>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   138e6:	f107 0110 	add.w	r1, r7, #16
   138ea:	4620      	mov	r0, r4
   138ec:	f016 fc3a 	bl	2a164 <nvs_ate_valid>
   138f0:	2800      	cmp	r0, #0
   138f2:	d0f2      	beq.n	138da <nvs_write+0x92>
		rd_addr += wlk_ate.offset;
   138f4:	8a78      	ldrh	r0, [r7, #18]
			if (wlk_ate.len == 0U) {
   138f6:	8abb      	ldrh	r3, [r7, #20]
		if (len == 0) {
   138f8:	b175      	cbz	r5, 13918 <nvs_write+0xd0>
		} else if (len == wlk_ate.len) {
   138fa:	42ab      	cmp	r3, r5
   138fc:	d10e      	bne.n	1391c <nvs_write+0xd4>
		rd_addr &= ADDR_SECT_MASK;
   138fe:	ea4f 411b 	mov.w	r1, fp, lsr #16
   13902:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   13904:	4401      	add	r1, r0
   13906:	462b      	mov	r3, r5
   13908:	464a      	mov	r2, r9
   1390a:	4620      	mov	r0, r4
   1390c:	f016 fbab 	bl	2a066 <nvs_flash_block_cmp>
			if (rc <= 0) {
   13910:	2800      	cmp	r0, #0
   13912:	dc03      	bgt.n	1391c <nvs_write+0xd4>
   13914:	4606      	mov	r6, r0
   13916:	e7b3      	b.n	13880 <nvs_write+0x38>
			if (wlk_ate.len == 0U) {
   13918:	2b00      	cmp	r3, #0
   1391a:	d0b1      	beq.n	13880 <nvs_write+0x38>
	if (data_size) {
   1391c:	f1b8 0f00 	cmp.w	r8, #0
   13920:	d13e      	bne.n	139a0 <nvs_write+0x158>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   13922:	f104 0314 	add.w	r3, r4, #20
   13926:	603b      	str	r3, [r7, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   13928:	f04f 32ff 	mov.w	r2, #4294967295
   1392c:	f04f 33ff 	mov.w	r3, #4294967295
   13930:	f104 0014 	add.w	r0, r4, #20
   13934:	f011 fc2e 	bl	25194 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   13938:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 13a14 <nvs_write+0x1cc>
		if (gc_count == fs->sector_count) {
   1393c:	89e3      	ldrh	r3, [r4, #14]
   1393e:	429e      	cmp	r6, r3
   13940:	d05c      	beq.n	139fc <nvs_write+0x1b4>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   13942:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   13946:	eb08 0103 	add.w	r1, r8, r3
   1394a:	428a      	cmp	r2, r1
   1394c:	d32c      	bcc.n	139a8 <nvs_write+0x160>
	entry.id = id;
   1394e:	687a      	ldr	r2, [r7, #4]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   13950:	837b      	strh	r3, [r7, #26]
	entry.part = 0xff;
   13952:	23ff      	movs	r3, #255	; 0xff
	entry.id = id;
   13954:	833a      	strh	r2, [r7, #24]
	entry.part = 0xff;
   13956:	77bb      	strb	r3, [r7, #30]
	nvs_ate_crc8_update(&entry);
   13958:	f107 0018 	add.w	r0, r7, #24
	entry.len = (uint16_t)len;
   1395c:	83bd      	strh	r5, [r7, #28]
	nvs_ate_crc8_update(&entry);
   1395e:	f016 fbeb 	bl	2a138 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   13962:	68a1      	ldr	r1, [r4, #8]
   13964:	462b      	mov	r3, r5
   13966:	464a      	mov	r2, r9
   13968:	4620      	mov	r0, r4
   1396a:	f016 fc7d 	bl	2a268 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   1396e:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   13970:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   13972:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   13974:	f016 fbec 	bl	2a150 <nvs_al_size.isra.0>
   13978:	68a2      	ldr	r2, [r4, #8]
   1397a:	4402      	add	r2, r0
   1397c:	60a2      	str	r2, [r4, #8]
	if (rc) {
   1397e:	f1ba 0f00 	cmp.w	sl, #0
   13982:	d108      	bne.n	13996 <nvs_write+0x14e>
	rc = nvs_flash_ate_wrt(fs, &entry);
   13984:	f107 0118 	add.w	r1, r7, #24
   13988:	4620      	mov	r0, r4
   1398a:	f016 fca7 	bl	2a2dc <nvs_flash_ate_wrt>
	rc = len;
   1398e:	2800      	cmp	r0, #0
   13990:	bf14      	ite	ne
   13992:	4682      	movne	sl, r0
   13994:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   13996:	6838      	ldr	r0, [r7, #0]
   13998:	f011 fc76 	bl	25288 <z_impl_k_mutex_unlock>
	return rc;
   1399c:	4656      	mov	r6, sl
   1399e:	e76f      	b.n	13880 <nvs_write+0x38>
		required_space = data_size + ate_size;
   139a0:	44d0      	add	r8, sl
   139a2:	fa1f f888 	uxth.w	r8, r8
   139a6:	e7bc      	b.n	13922 <nvs_write+0xda>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   139a8:	2108      	movs	r1, #8
   139aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   139ac:	f016 fbd0 	bl	2a150 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   139b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   139b4:	833b      	strh	r3, [r7, #24]
	close_ate.len = 0U;
   139b6:	2300      	movs	r3, #0
   139b8:	83bb      	strh	r3, [r7, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   139ba:	1813      	adds	r3, r2, r0
   139bc:	837b      	strh	r3, [r7, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   139be:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   139c0:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   139c4:	441a      	add	r2, r3
   139c6:	1a10      	subs	r0, r2, r0
   139c8:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   139ca:	f107 0018 	add.w	r0, r7, #24
   139ce:	f016 fbb3 	bl	2a138 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   139d2:	f107 0118 	add.w	r1, r7, #24
   139d6:	4620      	mov	r0, r4
   139d8:	f016 fc80 	bl	2a2dc <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   139dc:	1d21      	adds	r1, r4, #4
   139de:	4620      	mov	r0, r4
   139e0:	f016 fb34 	bl	2a04c <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   139e4:	6863      	ldr	r3, [r4, #4]
   139e6:	ea03 030b 	and.w	r3, r3, fp
   139ea:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   139ec:	4620      	mov	r0, r4
   139ee:	f016 fc9b 	bl	2a328 <nvs_gc>
		if (rc) {
   139f2:	4682      	mov	sl, r0
   139f4:	2800      	cmp	r0, #0
   139f6:	d1ce      	bne.n	13996 <nvs_write+0x14e>
		gc_count++;
   139f8:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   139fa:	e79f      	b.n	1393c <nvs_write+0xf4>
			rc = -ENOSPC;
   139fc:	f06f 0a1b 	mvn.w	sl, #27
   13a00:	e7c9      	b.n	13996 <nvs_write+0x14e>
		return -EINVAL;
   13a02:	f06f 0615 	mvn.w	r6, #21
   13a06:	e73b      	b.n	13880 <nvs_write+0x38>
   13a08:	000313be 	.word	0x000313be
   13a0c:	00031510 	.word	0x00031510
   13a10:	0002fc9c 	.word	0x0002fc9c
   13a14:	ffff0000 	.word	0xffff0000

00013a18 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   13a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a1c:	b085      	sub	sp, #20
   13a1e:	461e      	mov	r6, r3
   13a20:	af00      	add	r7, sp, #0
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   13a22:	7c03      	ldrb	r3, [r0, #16]
{
   13a24:	f8b7 a038 	ldrh.w	sl, [r7, #56]	; 0x38
   13a28:	4604      	mov	r4, r0
   13a2a:	4688      	mov	r8, r1
   13a2c:	4691      	mov	r9, r2
	if (!fs->ready) {
   13a2e:	b9ab      	cbnz	r3, 13a5c <nvs_read_hist+0x44>
		LOG_ERR("NVS not initialized");
   13a30:	466c      	mov	r4, sp
   13a32:	b088      	sub	sp, #32
   13a34:	466a      	mov	r2, sp
   13a36:	4b30      	ldr	r3, [pc, #192]	; (13af8 <nvs_read_hist+0xe0>)
   13a38:	6153      	str	r3, [r2, #20]
   13a3a:	4b30      	ldr	r3, [pc, #192]	; (13afc <nvs_read_hist+0xe4>)
   13a3c:	6193      	str	r3, [r2, #24]
   13a3e:	2303      	movs	r3, #3
   13a40:	482f      	ldr	r0, [pc, #188]	; (13b00 <nvs_read_hist+0xe8>)
   13a42:	f842 3f10 	str.w	r3, [r2, #16]!
   13a46:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13a4a:	f016 fb7e 	bl	2a14a <z_log_msg_static_create.constprop.0>
		return -EACCES;
   13a4e:	f06f 000c 	mvn.w	r0, #12
   13a52:	46a5      	mov	sp, r4

	return wlk_ate.len;

err:
	return rc;
}
   13a54:	3714      	adds	r7, #20
   13a56:	46bd      	mov	sp, r7
   13a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13a5c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   13a5e:	2108      	movs	r1, #8
   13a60:	f016 fb76 	bl	2a150 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   13a64:	89a3      	ldrh	r3, [r4, #12]
   13a66:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   13a6a:	42b3      	cmp	r3, r6
   13a6c:	d340      	bcc.n	13af0 <nvs_read_hist+0xd8>
	wlk_addr = fs->ate_wra;
   13a6e:	f8d4 b004 	ldr.w	fp, [r4, #4]
   13a72:	f8c7 b004 	str.w	fp, [r7, #4]
	cnt_his = 0U;
   13a76:	2500      	movs	r5, #0
	while (cnt_his <= cnt) {
   13a78:	4555      	cmp	r5, sl
   13a7a:	4659      	mov	r1, fp
		rd_addr = wlk_addr;
   13a7c:	f8d7 b004 	ldr.w	fp, [r7, #4]
	while (cnt_his <= cnt) {
   13a80:	d908      	bls.n	13a94 <nvs_read_hist+0x7c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   13a82:	6863      	ldr	r3, [r4, #4]
   13a84:	455b      	cmp	r3, fp
   13a86:	d11e      	bne.n	13ac6 <nvs_read_hist+0xae>
   13a88:	893b      	ldrh	r3, [r7, #8]
   13a8a:	4543      	cmp	r3, r8
   13a8c:	d01b      	beq.n	13ac6 <nvs_read_hist+0xae>
		return -ENOENT;
   13a8e:	f06f 0001 	mvn.w	r0, #1
   13a92:	e7df      	b.n	13a54 <nvs_read_hist+0x3c>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13a94:	f107 0208 	add.w	r2, r7, #8
   13a98:	1d39      	adds	r1, r7, #4
   13a9a:	4620      	mov	r0, r4
   13a9c:	f016 fb9a 	bl	2a1d4 <nvs_prev_ate>
		if (rc) {
   13aa0:	2800      	cmp	r0, #0
   13aa2:	d1d7      	bne.n	13a54 <nvs_read_hist+0x3c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   13aa4:	893b      	ldrh	r3, [r7, #8]
   13aa6:	4543      	cmp	r3, r8
   13aa8:	d107      	bne.n	13aba <nvs_read_hist+0xa2>
   13aaa:	f107 0108 	add.w	r1, r7, #8
   13aae:	4620      	mov	r0, r4
   13ab0:	f016 fb58 	bl	2a164 <nvs_ate_valid>
   13ab4:	b108      	cbz	r0, 13aba <nvs_read_hist+0xa2>
			cnt_his++;
   13ab6:	3501      	adds	r5, #1
   13ab8:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   13aba:	6862      	ldr	r2, [r4, #4]
   13abc:	687b      	ldr	r3, [r7, #4]
   13abe:	429a      	cmp	r2, r3
   13ac0:	d1da      	bne.n	13a78 <nvs_read_hist+0x60>
		rd_addr = wlk_addr;
   13ac2:	4659      	mov	r1, fp
   13ac4:	e7e0      	b.n	13a88 <nvs_read_hist+0x70>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   13ac6:	89bb      	ldrh	r3, [r7, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   13ac8:	2b00      	cmp	r3, #0
   13aca:	d0e0      	beq.n	13a8e <nvs_read_hist+0x76>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   13acc:	45aa      	cmp	sl, r5
   13ace:	d8de      	bhi.n	13a8e <nvs_read_hist+0x76>
	rd_addr += wlk_ate.offset;
   13ad0:	8978      	ldrh	r0, [r7, #10]
	rd_addr &= ADDR_SECT_MASK;
   13ad2:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   13ad4:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   13ad6:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   13ada:	bf28      	it	cs
   13adc:	4633      	movcs	r3, r6
   13ade:	4401      	add	r1, r0
   13ae0:	464a      	mov	r2, r9
   13ae2:	4620      	mov	r0, r4
   13ae4:	f016 faa4 	bl	2a030 <nvs_flash_rd>
	if (rc) {
   13ae8:	2800      	cmp	r0, #0
   13aea:	d1b3      	bne.n	13a54 <nvs_read_hist+0x3c>
	return wlk_ate.len;
   13aec:	89b8      	ldrh	r0, [r7, #12]
   13aee:	e7b1      	b.n	13a54 <nvs_read_hist+0x3c>
		return -EINVAL;
   13af0:	f06f 0015 	mvn.w	r0, #21
   13af4:	e7ae      	b.n	13a54 <nvs_read_hist+0x3c>
   13af6:	bf00      	nop
   13af8:	000313be 	.word	0x000313be
   13afc:	00031502 	.word	0x00031502
   13b00:	0002fc9c 	.word	0x0002fc9c

00013b04 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   13b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13b08:	f8df 8058 	ldr.w	r8, [pc, #88]	; 13b64 <activate_foreach_backend+0x60>
{
   13b0c:	4604      	mov	r4, r0
	while (mask_cpy) {
   13b0e:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   13b10:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   13b14:	b914      	cbnz	r4, 13b1c <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   13b16:	4638      	mov	r0, r7
   13b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   13b1c:	fa94 f5a4 	rbit	r5, r4
   13b20:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   13b24:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13b28:	012e      	lsls	r6, r5, #4
   13b2a:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   13b2e:	ea6f 0a03 	mvn.w	sl, r3
   13b32:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13b36:	7b2b      	ldrb	r3, [r5, #12]
   13b38:	2b00      	cmp	r3, #0
   13b3a:	d0eb      	beq.n	13b14 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   13b3c:	f858 3006 	ldr.w	r3, [r8, r6]
   13b40:	691b      	ldr	r3, [r3, #16]
   13b42:	b94b      	cbnz	r3, 13b58 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   13b44:	4446      	add	r6, r8
			log_backend_enable(backend,
   13b46:	2204      	movs	r2, #4
   13b48:	6873      	ldr	r3, [r6, #4]
   13b4a:	4628      	mov	r0, r5
   13b4c:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   13b4e:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   13b52:	f000 fa59 	bl	14008 <log_backend_enable>
   13b56:	e7dd      	b.n	13b14 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   13b58:	4628      	mov	r0, r5
   13b5a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13b5c:	2800      	cmp	r0, #0
   13b5e:	d1d9      	bne.n	13b14 <activate_foreach_backend+0x10>
   13b60:	e7f0      	b.n	13b44 <activate_foreach_backend+0x40>
   13b62:	bf00      	nop
   13b64:	0002fd14 	.word	0x0002fd14

00013b68 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
   13b68:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   13b6a:	4910      	ldr	r1, [pc, #64]	; (13bac <enable_logger+0x44>)
   13b6c:	4810      	ldr	r0, [pc, #64]	; (13bb0 <enable_logger+0x48>)
{
   13b6e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   13b70:	2200      	movs	r2, #0
   13b72:	f01b fcb9 	bl	2f4e8 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13b76:	4d0f      	ldr	r5, [pc, #60]	; (13bb4 <enable_logger+0x4c>)
   13b78:	490f      	ldr	r1, [pc, #60]	; (13bb8 <enable_logger+0x50>)
   13b7a:	2200      	movs	r2, #0
   13b7c:	2300      	movs	r3, #0
   13b7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13b82:	2400      	movs	r4, #0
   13b84:	230e      	movs	r3, #14
   13b86:	e9cd 3403 	strd	r3, r4, [sp, #12]
   13b8a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   13b8e:	4b0b      	ldr	r3, [pc, #44]	; (13bbc <enable_logger+0x54>)
   13b90:	9400      	str	r4, [sp, #0]
   13b92:	f44f 7240 	mov.w	r2, #768	; 0x300
   13b96:	4628      	mov	r0, r5
   13b98:	f011 fa58 	bl	2504c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13b9c:	4908      	ldr	r1, [pc, #32]	; (13bc0 <enable_logger+0x58>)
   13b9e:	4628      	mov	r0, r5
   13ba0:	f01b f963 	bl	2ee6a <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   13ba4:	4620      	mov	r0, r4
   13ba6:	b009      	add	sp, #36	; 0x24
   13ba8:	bd30      	pop	{r4, r5, pc}
   13baa:	bf00      	nop
   13bac:	00013bc5 	.word	0x00013bc5
   13bb0:	20001ea8 	.word	0x20001ea8
   13bb4:	20001a20 	.word	0x20001a20
   13bb8:	20005200 	.word	0x20005200
   13bbc:	00013eb5 	.word	0x00013eb5
   13bc0:	00031537 	.word	0x00031537

00013bc4 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   13bc4:	4801      	ldr	r0, [pc, #4]	; (13bcc <log_process_thread_timer_expiry_fn+0x8>)
   13bc6:	f011 bbcf 	b.w	25368 <z_impl_k_sem_give>
   13bca:	bf00      	nop
   13bcc:	20000970 	.word	0x20000970

00013bd0 <z_log_init>:
{
   13bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13bd4:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
   13bd6:	481f      	ldr	r0, [pc, #124]	; (13c54 <z_log_init+0x84>)
{
   13bd8:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   13bda:	f016 fc91 	bl	2a500 <atomic_inc>
   13bde:	4606      	mov	r6, r0
   13be0:	2800      	cmp	r0, #0
   13be2:	d030      	beq.n	13c46 <z_log_init+0x76>
	uint32_t mask = 0;
   13be4:	2500      	movs	r5, #0
}
   13be6:	4628      	mov	r0, r5
   13be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   13bec:	7b23      	ldrb	r3, [r4, #12]
   13bee:	b173      	cbz	r3, 13c0e <z_log_init+0x3e>
	if (backend->api->init) {
   13bf0:	6823      	ldr	r3, [r4, #0]
   13bf2:	68db      	ldr	r3, [r3, #12]
   13bf4:	b10b      	cbz	r3, 13bfa <z_log_init+0x2a>
		backend->api->init(backend);
   13bf6:	4620      	mov	r0, r4
   13bf8:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   13bfa:	6823      	ldr	r3, [r4, #0]
   13bfc:	691b      	ldr	r3, [r3, #16]
   13bfe:	b9d3      	cbnz	r3, 13c36 <z_log_init+0x66>
				log_backend_enable(backend,
   13c00:	6863      	ldr	r3, [r4, #4]
   13c02:	2204      	movs	r2, #4
   13c04:	6819      	ldr	r1, [r3, #0]
   13c06:	4620      	mov	r0, r4
   13c08:	f000 f9fe 	bl	14008 <log_backend_enable>
			i++;
   13c0c:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13c0e:	3410      	adds	r4, #16
   13c10:	454c      	cmp	r4, r9
   13c12:	d3eb      	bcc.n	13bec <z_log_init+0x1c>
	if (blocking) {
   13c14:	f1b8 0f00 	cmp.w	r8, #0
   13c18:	d0e5      	beq.n	13be6 <z_log_init+0x16>
		while (mask) {
   13c1a:	2d00      	cmp	r5, #0
   13c1c:	d0e2      	beq.n	13be4 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
   13c1e:	4628      	mov	r0, r5
   13c20:	f7ff ff70 	bl	13b04 <activate_foreach_backend>
   13c24:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   13c26:	2f00      	cmp	r7, #0
   13c28:	d0f7      	beq.n	13c1a <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
   13c2a:	2100      	movs	r1, #0
   13c2c:	f44f 70a4 	mov.w	r0, #328	; 0x148
   13c30:	f012 f89c 	bl	25d6c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   13c34:	e7f1      	b.n	13c1a <z_log_init+0x4a>
		return backend->api->is_ready(backend);
   13c36:	4620      	mov	r0, r4
   13c38:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   13c3a:	2800      	cmp	r0, #0
   13c3c:	d0e0      	beq.n	13c00 <z_log_init+0x30>
				mask |= BIT(i);
   13c3e:	fa0a f306 	lsl.w	r3, sl, r6
   13c42:	431d      	orrs	r5, r3
   13c44:	e7e2      	b.n	13c0c <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13c46:	4c04      	ldr	r4, [pc, #16]	; (13c58 <z_log_init+0x88>)
   13c48:	f8df 9010 	ldr.w	r9, [pc, #16]	; 13c5c <z_log_init+0x8c>
	uint32_t mask = 0;
   13c4c:	4605      	mov	r5, r0
				mask |= BIT(i);
   13c4e:	f04f 0a01 	mov.w	sl, #1
   13c52:	e7dd      	b.n	13c10 <z_log_init+0x40>
   13c54:	20002dac 	.word	0x20002dac
   13c58:	0002fd14 	.word	0x0002fd14
   13c5c:	0002fd34 	.word	0x0002fd34

00013c60 <log_format_func_t_get>:
}
   13c60:	4b01      	ldr	r3, [pc, #4]	; (13c68 <log_format_func_t_get+0x8>)
   13c62:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13c66:	4770      	bx	lr
   13c68:	0002febc 	.word	0x0002febc

00013c6c <log_set_timestamp_func>:
{
   13c6c:	b508      	push	{r3, lr}
   13c6e:	4603      	mov	r3, r0
   13c70:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   13c72:	b12b      	cbz	r3, 13c80 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   13c74:	4a04      	ldr	r2, [pc, #16]	; (13c88 <log_set_timestamp_func+0x1c>)
   13c76:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   13c78:	f000 fc7c 	bl	14574 <log_output_timestamp_freq_set>
	return 0;
   13c7c:	2000      	movs	r0, #0
}
   13c7e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   13c80:	f06f 0015 	mvn.w	r0, #21
   13c84:	e7fb      	b.n	13c7e <log_set_timestamp_func+0x12>
   13c86:	bf00      	nop
   13c88:	200004f4 	.word	0x200004f4

00013c8c <z_log_notify_backend_enabled>:
{
   13c8c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   13c8e:	4c04      	ldr	r4, [pc, #16]	; (13ca0 <z_log_notify_backend_enabled+0x14>)
   13c90:	7823      	ldrb	r3, [r4, #0]
   13c92:	b913      	cbnz	r3, 13c9a <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   13c94:	4803      	ldr	r0, [pc, #12]	; (13ca4 <z_log_notify_backend_enabled+0x18>)
   13c96:	f011 fb67 	bl	25368 <z_impl_k_sem_give>
	backend_attached = true;
   13c9a:	2301      	movs	r3, #1
   13c9c:	7023      	strb	r3, [r4, #0]
}
   13c9e:	bd10      	pop	{r4, pc}
   13ca0:	2000432e 	.word	0x2000432e
   13ca4:	20000970 	.word	0x20000970

00013ca8 <z_log_dropped>:
{
   13ca8:	b510      	push	{r4, lr}
   13caa:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   13cac:	4808      	ldr	r0, [pc, #32]	; (13cd0 <z_log_dropped+0x28>)
   13cae:	f016 fc27 	bl	2a500 <atomic_inc>
	if (buffered) {
   13cb2:	b15c      	cbz	r4, 13ccc <z_log_dropped+0x24>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13cb4:	f3bf 8f5b 	dmb	ish
   13cb8:	4b06      	ldr	r3, [pc, #24]	; (13cd4 <z_log_dropped+0x2c>)
   13cba:	e853 1f00 	ldrex	r1, [r3]
   13cbe:	3901      	subs	r1, #1
   13cc0:	e843 1200 	strex	r2, r1, [r3]
   13cc4:	2a00      	cmp	r2, #0
   13cc6:	d1f8      	bne.n	13cba <z_log_dropped+0x12>
   13cc8:	f3bf 8f5b 	dmb	ish
}
   13ccc:	bd10      	pop	{r4, pc}
   13cce:	bf00      	nop
   13cd0:	20002da4 	.word	0x20002da4
   13cd4:	20002da8 	.word	0x20002da8

00013cd8 <z_log_dropped_read_and_clear>:
}
   13cd8:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13cda:	4b06      	ldr	r3, [pc, #24]	; (13cf4 <z_log_dropped_read_and_clear+0x1c>)
   13cdc:	f3bf 8f5b 	dmb	ish
   13ce0:	4601      	mov	r1, r0
   13ce2:	e853 0f00 	ldrex	r0, [r3]
   13ce6:	e843 1200 	strex	r2, r1, [r3]
   13cea:	2a00      	cmp	r2, #0
   13cec:	d1f9      	bne.n	13ce2 <z_log_dropped_read_and_clear+0xa>
   13cee:	f3bf 8f5b 	dmb	ish
   13cf2:	4770      	bx	lr
   13cf4:	20002da4 	.word	0x20002da4

00013cf8 <dropped_notify>:
{
   13cf8:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   13cfa:	f7ff ffed 	bl	13cd8 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13cfe:	4c08      	ldr	r4, [pc, #32]	; (13d20 <dropped_notify+0x28>)
   13d00:	4e08      	ldr	r6, [pc, #32]	; (13d24 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   13d02:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13d04:	42b4      	cmp	r4, r6
   13d06:	d300      	bcc.n	13d0a <dropped_notify+0x12>
}
   13d08:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   13d0a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   13d0c:	795b      	ldrb	r3, [r3, #5]
   13d0e:	b12b      	cbz	r3, 13d1c <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
   13d10:	6823      	ldr	r3, [r4, #0]
   13d12:	685b      	ldr	r3, [r3, #4]
   13d14:	b113      	cbz	r3, 13d1c <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
   13d16:	4629      	mov	r1, r5
   13d18:	4620      	mov	r0, r4
   13d1a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13d1c:	3410      	adds	r4, #16
   13d1e:	e7f1      	b.n	13d04 <dropped_notify+0xc>
   13d20:	0002fd14 	.word	0x0002fd14
   13d24:	0002fd34 	.word	0x0002fd34

00013d28 <z_log_msg_init>:
{
   13d28:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   13d2a:	4c04      	ldr	r4, [pc, #16]	; (13d3c <z_log_msg_init+0x14>)
   13d2c:	4904      	ldr	r1, [pc, #16]	; (13d40 <z_log_msg_init+0x18>)
   13d2e:	4620      	mov	r0, r4
   13d30:	f016 f823 	bl	29d7a <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   13d34:	4b03      	ldr	r3, [pc, #12]	; (13d44 <z_log_msg_init+0x1c>)
   13d36:	601c      	str	r4, [r3, #0]
}
   13d38:	bd10      	pop	{r4, pc}
   13d3a:	bf00      	nop
   13d3c:	20000838 	.word	0x20000838
   13d40:	0002fea8 	.word	0x0002fea8
   13d44:	20002d9c 	.word	0x20002d9c

00013d48 <log_core_init>:
	panic_mode = false;
   13d48:	4a08      	ldr	r2, [pc, #32]	; (13d6c <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
   13d4a:	4809      	ldr	r0, [pc, #36]	; (13d70 <log_core_init+0x28>)
{
   13d4c:	b508      	push	{r3, lr}
	panic_mode = false;
   13d4e:	2300      	movs	r3, #0
   13d50:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   13d52:	4a08      	ldr	r2, [pc, #32]	; (13d74 <log_core_init+0x2c>)
   13d54:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
   13d56:	4a08      	ldr	r2, [pc, #32]	; (13d78 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
   13d58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
   13d5c:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   13d5e:	f7ff ff85 	bl	13c6c <log_set_timestamp_func>
}
   13d62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   13d66:	f7ff bfdf 	b.w	13d28 <z_log_msg_init>
   13d6a:	bf00      	nop
   13d6c:	2000432f 	.word	0x2000432f
   13d70:	0002a4fd 	.word	0x0002a4fd
   13d74:	20002da4 	.word	0x20002da4
   13d78:	20002da8 	.word	0x20002da8

00013d7c <z_log_msg_alloc>:
{
   13d7c:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   13d7e:	2200      	movs	r2, #0
   13d80:	4801      	ldr	r0, [pc, #4]	; (13d88 <z_log_msg_alloc+0xc>)
   13d82:	2300      	movs	r3, #0
   13d84:	f016 b81a 	b.w	29dbc <mpsc_pbuf_alloc>
   13d88:	20000838 	.word	0x20000838

00013d8c <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   13d8c:	4801      	ldr	r0, [pc, #4]	; (13d94 <z_log_msg_local_claim+0x8>)
   13d8e:	f016 b8b3 	b.w	29ef8 <mpsc_pbuf_claim>
   13d92:	bf00      	nop
   13d94:	20000838 	.word	0x20000838

00013d98 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   13d98:	4b02      	ldr	r3, [pc, #8]	; (13da4 <z_log_msg_free+0xc>)
{
   13d9a:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   13d9c:	6818      	ldr	r0, [r3, #0]
   13d9e:	f016 b8fd 	b.w	29f9c <mpsc_pbuf_free>
   13da2:	bf00      	nop
   13da4:	20002d9c 	.word	0x20002d9c

00013da8 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   13da8:	4801      	ldr	r0, [pc, #4]	; (13db0 <z_log_msg_pending+0x8>)
   13daa:	f016 b933 	b.w	2a014 <mpsc_pbuf_is_pending>
   13dae:	bf00      	nop
   13db0:	20000838 	.word	0x20000838

00013db4 <z_impl_log_process>:
{
   13db4:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   13db6:	4b28      	ldr	r3, [pc, #160]	; (13e58 <z_impl_log_process+0xa4>)
   13db8:	7818      	ldrb	r0, [r3, #0]
   13dba:	2800      	cmp	r0, #0
   13dbc:	d04b      	beq.n	13e56 <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
   13dbe:	f7ff ffe5 	bl	13d8c <z_log_msg_local_claim>
	if (msg) {
   13dc2:	4605      	mov	r5, r0
   13dc4:	b190      	cbz	r0, 13dec <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13dc6:	f3bf 8f5b 	dmb	ish
   13dca:	4b24      	ldr	r3, [pc, #144]	; (13e5c <z_impl_log_process+0xa8>)
   13dcc:	e853 1f00 	ldrex	r1, [r3]
   13dd0:	3901      	subs	r1, #1
   13dd2:	e843 1200 	strex	r2, r1, [r3]
   13dd6:	2a00      	cmp	r2, #0
   13dd8:	d1f8      	bne.n	13dcc <z_impl_log_process+0x18>
   13dda:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13dde:	4c20      	ldr	r4, [pc, #128]	; (13e60 <z_impl_log_process+0xac>)
   13de0:	4e20      	ldr	r6, [pc, #128]	; (13e64 <z_impl_log_process+0xb0>)
   13de2:	42b4      	cmp	r4, r6
   13de4:	d32d      	bcc.n	13e42 <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
   13de6:	4628      	mov	r0, r5
   13de8:	f7ff ffd6 	bl	13d98 <z_log_msg_free>
	return dropped_cnt > 0;
   13dec:	4b1e      	ldr	r3, [pc, #120]	; (13e68 <z_impl_log_process+0xb4>)
   13dee:	4c1f      	ldr	r4, [pc, #124]	; (13e6c <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
   13df0:	681b      	ldr	r3, [r3, #0]
   13df2:	2b00      	cmp	r3, #0
   13df4:	dd19      	ble.n	13e2a <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
   13df6:	f01b fb4f 	bl	2f498 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   13dfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13dfe:	fba0 0302 	umull	r0, r3, r0, r2
   13e02:	fb02 3101 	mla	r1, r2, r1, r3
   13e06:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   13e08:	e9d4 2000 	ldrd	r2, r0, [r4]
   13e0c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   13e10:	1a9b      	subs	r3, r3, r2
   13e12:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   13e16:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   13e1a:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   13e1e:	4293      	cmp	r3, r2
   13e20:	f171 0100 	sbcs.w	r1, r1, #0
   13e24:	d301      	bcc.n	13e2a <z_impl_log_process+0x76>
				dropped_notify();
   13e26:	f7ff ff67 	bl	13cf8 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   13e2a:	e9d4 3200 	ldrd	r3, r2, [r4]
   13e2e:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   13e32:	f142 0200 	adc.w	r2, r2, #0
   13e36:	e9c4 3200 	strd	r3, r2, [r4]
}
   13e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   13e3e:	f7ff bfb3 	b.w	13da8 <z_log_msg_pending>
	return backend->cb->active;
   13e42:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   13e44:	795b      	ldrb	r3, [r3, #5]
   13e46:	b123      	cbz	r3, 13e52 <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
   13e48:	6823      	ldr	r3, [r4, #0]
   13e4a:	4629      	mov	r1, r5
   13e4c:	681b      	ldr	r3, [r3, #0]
   13e4e:	4620      	mov	r0, r4
   13e50:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13e52:	3410      	adds	r4, #16
   13e54:	e7c5      	b.n	13de2 <z_impl_log_process+0x2e>
}
   13e56:	bd70      	pop	{r4, r5, r6, pc}
   13e58:	2000432e 	.word	0x2000432e
   13e5c:	20002da8 	.word	0x20002da8
   13e60:	0002fd14 	.word	0x0002fd14
   13e64:	0002fd34 	.word	0x0002fd34
   13e68:	20002da4 	.word	0x20002da4
   13e6c:	20001ea0 	.word	0x20001ea0

00013e70 <z_impl_log_panic>:
{
   13e70:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   13e72:	4d0d      	ldr	r5, [pc, #52]	; (13ea8 <z_impl_log_panic+0x38>)
   13e74:	7829      	ldrb	r1, [r5, #0]
   13e76:	b961      	cbnz	r1, 13e92 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
   13e78:	2001      	movs	r0, #1
   13e7a:	f7ff fea9 	bl	13bd0 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13e7e:	4c0b      	ldr	r4, [pc, #44]	; (13eac <z_impl_log_panic+0x3c>)
   13e80:	4e0b      	ldr	r6, [pc, #44]	; (13eb0 <z_impl_log_panic+0x40>)
   13e82:	42b4      	cmp	r4, r6
   13e84:	d306      	bcc.n	13e94 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   13e86:	f7ff ff95 	bl	13db4 <z_impl_log_process>
		while (log_process() == true) {
   13e8a:	2800      	cmp	r0, #0
   13e8c:	d1fb      	bne.n	13e86 <z_impl_log_panic+0x16>
	panic_mode = true;
   13e8e:	2301      	movs	r3, #1
   13e90:	702b      	strb	r3, [r5, #0]
}
   13e92:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   13e94:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   13e96:	795b      	ldrb	r3, [r3, #5]
   13e98:	b11b      	cbz	r3, 13ea2 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   13e9a:	6823      	ldr	r3, [r4, #0]
   13e9c:	4620      	mov	r0, r4
   13e9e:	689b      	ldr	r3, [r3, #8]
   13ea0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13ea2:	3410      	adds	r4, #16
   13ea4:	e7ed      	b.n	13e82 <z_impl_log_panic+0x12>
   13ea6:	bf00      	nop
   13ea8:	2000432f 	.word	0x2000432f
   13eac:	0002fd14 	.word	0x0002fd14
   13eb0:	0002fd34 	.word	0x0002fd34

00013eb4 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   13eb4:	2100      	movs	r1, #0
{
   13eb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
   13eba:	4608      	mov	r0, r1
   13ebc:	f7ff fe88 	bl	13bd0 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13ec0:	4604      	mov	r4, r0
   13ec2:	b348      	cbz	r0, 13f18 <log_process_thread_func+0x64>
   13ec4:	f240 6867 	movw	r8, #1639	; 0x667
   13ec8:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   13ecc:	f011 ff68 	bl	25da0 <z_impl_z_current_get>
	proc_tid = process_tid;
   13ed0:	4b1a      	ldr	r3, [pc, #104]	; (13f3c <log_process_thread_func+0x88>)
   13ed2:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13ed4:	b130      	cbz	r0, 13ee4 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   13ed6:	4b1a      	ldr	r3, [pc, #104]	; (13f40 <log_process_thread_func+0x8c>)
	    process_tid &&
   13ed8:	681b      	ldr	r3, [r3, #0]
   13eda:	2b09      	cmp	r3, #9
   13edc:	dd02      	ble.n	13ee4 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   13ede:	4819      	ldr	r0, [pc, #100]	; (13f44 <log_process_thread_func+0x90>)
   13ee0:	f011 fa42 	bl	25368 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13ee4:	4f18      	ldr	r7, [pc, #96]	; (13f48 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   13ee6:	f8df a05c 	ldr.w	sl, [pc, #92]	; 13f44 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13eea:	2500      	movs	r5, #0
		if (activate_mask) {
   13eec:	b144      	cbz	r4, 13f00 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
   13eee:	4620      	mov	r0, r4
   13ef0:	f7ff fe08 	bl	13b04 <activate_foreach_backend>
			if (!activate_mask) {
   13ef4:	4604      	mov	r4, r0
   13ef6:	b918      	cbnz	r0, 13f00 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
   13ef8:	f04f 38ff 	mov.w	r8, #4294967295
   13efc:	f04f 39ff 	mov.w	r9, #4294967295
   13f00:	f7ff ff58 	bl	13db4 <z_impl_log_process>
		if (log_process() == false) {
   13f04:	4606      	mov	r6, r0
   13f06:	b928      	cbnz	r0, 13f14 <log_process_thread_func+0x60>
			if (processed_any) {
   13f08:	b9b5      	cbnz	r5, 13f38 <log_process_thread_func+0x84>
   13f0a:	4642      	mov	r2, r8
   13f0c:	464b      	mov	r3, r9
   13f0e:	4650      	mov	r0, sl
   13f10:	f011 fa50 	bl	253b4 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13f14:	4635      	mov	r5, r6
   13f16:	e7e9      	b.n	13eec <log_process_thread_func+0x38>
   13f18:	f04f 38ff 	mov.w	r8, #4294967295
   13f1c:	f04f 39ff 	mov.w	r9, #4294967295
   13f20:	e7d4      	b.n	13ecc <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   13f22:	682b      	ldr	r3, [r5, #0]
   13f24:	699b      	ldr	r3, [r3, #24]
   13f26:	b11b      	cbz	r3, 13f30 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
   13f28:	2200      	movs	r2, #0
   13f2a:	4611      	mov	r1, r2
   13f2c:	4628      	mov	r0, r5
   13f2e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13f30:	3510      	adds	r5, #16
   13f32:	42bd      	cmp	r5, r7
   13f34:	d3f5      	bcc.n	13f22 <log_process_thread_func+0x6e>
   13f36:	e7e8      	b.n	13f0a <log_process_thread_func+0x56>
   13f38:	4d04      	ldr	r5, [pc, #16]	; (13f4c <log_process_thread_func+0x98>)
   13f3a:	e7fa      	b.n	13f32 <log_process_thread_func+0x7e>
   13f3c:	20002da0 	.word	0x20002da0
   13f40:	20002da8 	.word	0x20002da8
   13f44:	20000970 	.word	0x20000970
   13f48:	0002fd34 	.word	0x0002fd34
   13f4c:	0002fd14 	.word	0x0002fd14

00013f50 <z_log_msg_post_finalize>:
{
   13f50:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   13f52:	4818      	ldr	r0, [pc, #96]	; (13fb4 <z_log_msg_post_finalize+0x64>)
   13f54:	f016 fad4 	bl	2a500 <atomic_inc>
	if (panic_mode) {
   13f58:	4b17      	ldr	r3, [pc, #92]	; (13fb8 <z_log_msg_post_finalize+0x68>)
   13f5a:	781b      	ldrb	r3, [r3, #0]
   13f5c:	b17b      	cbz	r3, 13f7e <z_log_msg_post_finalize+0x2e>
   13f5e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13f62:	f3ef 8411 	mrs	r4, BASEPRI
   13f66:	f383 8812 	msr	BASEPRI_MAX, r3
   13f6a:	f3bf 8f6f 	isb	sy
   13f6e:	f7ff ff21 	bl	13db4 <z_impl_log_process>
	__asm__ volatile(
   13f72:	f384 8811 	msr	BASEPRI, r4
   13f76:	f3bf 8f6f 	isb	sy
}
   13f7a:	b002      	add	sp, #8
   13f7c:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   13f7e:	4b0f      	ldr	r3, [pc, #60]	; (13fbc <z_log_msg_post_finalize+0x6c>)
   13f80:	681b      	ldr	r3, [r3, #0]
   13f82:	2b00      	cmp	r3, #0
   13f84:	d0f9      	beq.n	13f7a <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
   13f86:	b950      	cbnz	r0, 13f9e <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
   13f88:	2200      	movs	r2, #0
   13f8a:	2300      	movs	r3, #0
   13f8c:	e9cd 2300 	strd	r2, r3, [sp]
   13f90:	480b      	ldr	r0, [pc, #44]	; (13fc0 <z_log_msg_post_finalize+0x70>)
   13f92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13f96:	2300      	movs	r3, #0
   13f98:	f012 f946 	bl	26228 <z_impl_k_timer_start>
   13f9c:	e7ed      	b.n	13f7a <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13f9e:	280a      	cmp	r0, #10
   13fa0:	d1eb      	bne.n	13f7a <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
   13fa2:	4807      	ldr	r0, [pc, #28]	; (13fc0 <z_log_msg_post_finalize+0x70>)
   13fa4:	f01b faac 	bl	2f500 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   13fa8:	4806      	ldr	r0, [pc, #24]	; (13fc4 <z_log_msg_post_finalize+0x74>)
}
   13faa:	b002      	add	sp, #8
   13fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13fb0:	f011 b9da 	b.w	25368 <z_impl_k_sem_give>
   13fb4:	20002da8 	.word	0x20002da8
   13fb8:	2000432f 	.word	0x2000432f
   13fbc:	20002da0 	.word	0x20002da0
   13fc0:	20001ea8 	.word	0x20001ea8
   13fc4:	20000970 	.word	0x20000970

00013fc8 <z_log_msg_commit>:
{
   13fc8:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   13fca:	4b06      	ldr	r3, [pc, #24]	; (13fe4 <z_log_msg_commit+0x1c>)
   13fcc:	681b      	ldr	r3, [r3, #0]
{
   13fce:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   13fd0:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   13fd2:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   13fd4:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   13fd6:	4804      	ldr	r0, [pc, #16]	; (13fe8 <z_log_msg_commit+0x20>)
   13fd8:	f015 ff6e 	bl	29eb8 <mpsc_pbuf_commit>
}
   13fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   13fe0:	f7ff bfb6 	b.w	13f50 <z_log_msg_post_finalize>
   13fe4:	200004f4 	.word	0x200004f4
   13fe8:	20000838 	.word	0x20000838

00013fec <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   13fec:	4a04      	ldr	r2, [pc, #16]	; (14000 <log_source_name_get+0x14>)
   13fee:	4b05      	ldr	r3, [pc, #20]	; (14004 <log_source_name_get+0x18>)
   13ff0:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   13ff2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   13ff6:	bf34      	ite	cc
   13ff8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   13ffc:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   13ffe:	4770      	bx	lr
   14000:	0002fbcc 	.word	0x0002fbcc
   14004:	0002fd14 	.word	0x0002fd14

00014008 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   14008:	4b08      	ldr	r3, [pc, #32]	; (1402c <log_backend_enable+0x24>)
   1400a:	1ac3      	subs	r3, r0, r3
{
   1400c:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   1400e:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
   14010:	6844      	ldr	r4, [r0, #4]
   14012:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   14014:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   14016:	6843      	ldr	r3, [r0, #4]
   14018:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   1401a:	6843      	ldr	r3, [r0, #4]
   1401c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   1401e:	6843      	ldr	r3, [r0, #4]
   14020:	2201      	movs	r2, #1
   14022:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   14024:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
   14026:	f7ff be31 	b.w	13c8c <z_log_notify_backend_enabled>
   1402a:	bf00      	nop
   1402c:	0002fd14 	.word	0x0002fd14

00014030 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   14030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14034:	b08f      	sub	sp, #60	; 0x3c
   14036:	af04      	add	r7, sp, #16
   14038:	f3c1 284a 	ubfx	r8, r1, #9, #11
   1403c:	60b8      	str	r0, [r7, #8]
   1403e:	460d      	mov	r5, r1
   14040:	4691      	mov	r9, r2
   14042:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   14044:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   14046:	f1b8 0f00 	cmp.w	r8, #0
   1404a:	d065      	beq.n	14118 <z_impl_z_log_msg_static_create+0xe8>
	struct z_cbprintf_buf_desc buf_desc = {
   1404c:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
   1404e:	f107 0314 	add.w	r3, r7, #20
   14052:	f04f 0b04 	mov.w	fp, #4
   14056:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   1405a:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
   1405e:	e9c7 6607 	strd	r6, r6, [r7, #28]
   14062:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   14064:	9301      	str	r3, [sp, #4]
   14066:	f8cd b008 	str.w	fp, [sp, #8]
   1406a:	f8cd a000 	str.w	sl, [sp]
   1406e:	f107 031c 	add.w	r3, r7, #28
   14072:	68f9      	ldr	r1, [r7, #12]
   14074:	4632      	mov	r2, r6
   14076:	4648      	mov	r0, r9
   14078:	f7fe fac6 	bl	12608 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
   1407c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   14080:	4603      	mov	r3, r0
   14082:	d31e      	bcc.n	140c2 <z_impl_z_log_msg_static_create+0x92>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
   14084:	466c      	mov	r4, sp
   14086:	b08a      	sub	sp, #40	; 0x28
   14088:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1408c:	ab04      	add	r3, sp, #16
   1408e:	4827      	ldr	r0, [pc, #156]	; (1412c <z_impl_z_log_msg_static_create+0xfc>)
   14090:	6158      	str	r0, [r3, #20]
   14092:	4827      	ldr	r0, [pc, #156]	; (14130 <z_impl_z_log_msg_static_create+0x100>)
   14094:	e9c3 0106 	strd	r0, r1, [r3, #24]
   14098:	f240 71ff 	movw	r1, #2047	; 0x7ff
   1409c:	6219      	str	r1, [r3, #32]
   1409e:	461a      	mov	r2, r3
   140a0:	f240 3101 	movw	r1, #769	; 0x301
   140a4:	8499      	strh	r1, [r3, #36]	; 0x24
   140a6:	4b23      	ldr	r3, [pc, #140]	; (14134 <z_impl_z_log_msg_static_create+0x104>)
   140a8:	f842 3f10 	str.w	r3, [r2, #16]!
   140ac:	4822      	ldr	r0, [pc, #136]	; (14138 <z_impl_z_log_msg_static_create+0x108>)
   140ae:	4633      	mov	r3, r6
   140b0:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   140b4:	f7ff ffbc 	bl	14030 <z_impl_z_log_msg_static_create>
   140b8:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
   140ba:	372c      	adds	r7, #44	; 0x2c
   140bc:	46bd      	mov	sp, r7
   140be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
   140c2:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   140c6:	f104 0017 	add.w	r0, r4, #23
   140ca:	4418      	add	r0, r3
   140cc:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   140d0:	0880      	lsrs	r0, r0, #2
   140d2:	603b      	str	r3, [r7, #0]
   140d4:	f7ff fe52 	bl	13d7c <z_log_msg_alloc>
   140d8:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
   140dc:	4604      	mov	r4, r0
   140de:	b190      	cbz	r0, 14106 <z_impl_z_log_msg_static_create+0xd6>
	struct z_cbprintf_buf_desc buf_desc = {
   140e0:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
   140e2:	4a16      	ldr	r2, [pc, #88]	; (1413c <z_impl_z_log_msg_static_create+0x10c>)
	struct z_cbprintf_buf_desc buf_desc = {
   140e4:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
   140e8:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
   140ec:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
   140f0:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   140f2:	e9cd a300 	strd	sl, r3, [sp]
   140f6:	f8cd b008 	str.w	fp, [sp, #8]
   140fa:	68f9      	ldr	r1, [r7, #12]
   140fc:	f107 031c 	add.w	r3, r7, #28
   14100:	4648      	mov	r0, r9
   14102:	f7fe fa81 	bl	12608 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
   14106:	f368 2553 	bfi	r5, r8, #9, #11
   1410a:	687b      	ldr	r3, [r7, #4]
   1410c:	68b9      	ldr	r1, [r7, #8]
   1410e:	462a      	mov	r2, r5
   14110:	4620      	mov	r0, r4
   14112:	f016 fa2b 	bl	2a56c <z_log_msg_finalize>
   14116:	e7d0      	b.n	140ba <z_impl_z_log_msg_static_create+0x8a>
   14118:	f104 0017 	add.w	r0, r4, #23
   1411c:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   14120:	0880      	lsrs	r0, r0, #2
   14122:	f7ff fe2b 	bl	13d7c <z_log_msg_alloc>
   14126:	4604      	mov	r4, r0
   14128:	e7ed      	b.n	14106 <z_impl_z_log_msg_static_create+0xd6>
   1412a:	bf00      	nop
   1412c:	0003154c 	.word	0x0003154c
   14130:	0003158f 	.word	0x0003158f
   14134:	01000005 	.word	0x01000005
   14138:	0002fca4 	.word	0x0002fca4
   1413c:	0002a541 	.word	0x0002a541

00014140 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   14140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14144:	b087      	sub	sp, #28
   14146:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   1414a:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   1414e:	4604      	mov	r4, r0
   14150:	460f      	mov	r7, r1
   14152:	4693      	mov	fp, r2
   14154:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   14156:	b3a6      	cbz	r6, 141c2 <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   14158:	2110      	movs	r1, #16
   1415a:	f8cd 9000 	str.w	r9, [sp]
   1415e:	4633      	mov	r3, r6
   14160:	4652      	mov	r2, sl
   14162:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   14164:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   14168:	f7fe f878 	bl	1225c <cbvprintf_package>
   1416c:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   1416e:	f105 0017 	add.w	r0, r5, #23
   14172:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   14174:	4b14      	ldr	r3, [pc, #80]	; (141c8 <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   14176:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   14178:	f004 0407 	and.w	r4, r4, #7
   1417c:	f00b 0b07 	and.w	fp, fp, #7
   14180:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   14182:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   14186:	ea03 2341 	and.w	r3, r3, r1, lsl #9
   1418a:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   1418e:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   14190:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   14192:	f7ff fdf3 	bl	13d7c <z_log_msg_alloc>
	struct log_msg_desc desc =
   14196:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   1419a:	4605      	mov	r5, r0
   1419c:	b140      	cbz	r0, 141b0 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   1419e:	b13e      	cbz	r6, 141b0 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   141a0:	9903      	ldr	r1, [sp, #12]
   141a2:	f8cd 9000 	str.w	r9, [sp]
   141a6:	4633      	mov	r3, r6
   141a8:	4652      	mov	r2, sl
   141aa:	3010      	adds	r0, #16
   141ac:	f7fe f856 	bl	1225c <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   141b0:	4643      	mov	r3, r8
   141b2:	4622      	mov	r2, r4
   141b4:	4639      	mov	r1, r7
   141b6:	4628      	mov	r0, r5
	}
}
   141b8:	b007      	add	sp, #28
   141ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   141be:	f016 b9d5 	b.w	2a56c <z_log_msg_finalize>
		plen = 0;
   141c2:	4631      	mov	r1, r6
   141c4:	e7d3      	b.n	1416e <z_impl_z_log_msg_runtime_vcreate+0x2e>
   141c6:	bf00      	nop
   141c8:	000ffe00 	.word	0x000ffe00

000141cc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   141cc:	b40e      	push	{r1, r2, r3}
   141ce:	b503      	push	{r0, r1, lr}
   141d0:	ab03      	add	r3, sp, #12
   141d2:	4601      	mov	r1, r0
   141d4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   141d8:	4804      	ldr	r0, [pc, #16]	; (141ec <print_formatted+0x20>)
	va_start(args, fmt);
   141da:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   141dc:	f016 f9ec 	bl	2a5b8 <cbvprintf>
	va_end(args);

	return length;
}
   141e0:	b002      	add	sp, #8
   141e2:	f85d eb04 	ldr.w	lr, [sp], #4
   141e6:	b003      	add	sp, #12
   141e8:	4770      	bx	lr
   141ea:	bf00      	nop
   141ec:	0002a5e1 	.word	0x0002a5e1

000141f0 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   141f0:	06ca      	lsls	r2, r1, #27
   141f2:	d405      	bmi.n	14200 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   141f4:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   141f6:	bf4c      	ite	mi
   141f8:	4902      	ldrmi	r1, [pc, #8]	; (14204 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   141fa:	4903      	ldrpl	r1, [pc, #12]	; (14208 <newline_print+0x18>)
   141fc:	f7ff bfe6 	b.w	141cc <print_formatted>
	}
}
   14200:	4770      	bx	lr
   14202:	bf00      	nop
   14204:	000315af 	.word	0x000315af
   14208:	000315ae 	.word	0x000315ae

0001420c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   1420c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14210:	b089      	sub	sp, #36	; 0x24
   14212:	469b      	mov	fp, r3
   14214:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   14218:	9304      	str	r3, [sp, #16]
   1421a:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
   1421e:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   14220:	9b04      	ldr	r3, [sp, #16]
{
   14222:	9206      	str	r2, [sp, #24]
   14224:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
   14228:	4604      	mov	r4, r0
   1422a:	460d      	mov	r5, r1
	if (!raw_string) {
   1422c:	2b00      	cmp	r3, #0
   1422e:	f000 8087 	beq.w	14340 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   14232:	f006 0308 	and.w	r3, r6, #8
   14236:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   14238:	f016 f980 	bl	2a53c <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   1423c:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
   14240:	4602      	mov	r2, r0
   14242:	2800      	cmp	r0, #0
   14244:	d04b      	beq.n	142de <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
   14246:	4986      	ldr	r1, [pc, #536]	; (14460 <log_output_process+0x254>)
   14248:	4620      	mov	r0, r4
   1424a:	f7ff ffbf 	bl	141cc <print_formatted>
   1424e:	4680      	mov	r8, r0
	if (stamp) {
   14250:	f1ba 0f00 	cmp.w	sl, #0
   14254:	d008      	beq.n	14268 <log_output_process+0x5c>
	if (!format) {
   14256:	f016 0f44 	tst.w	r6, #68	; 0x44
   1425a:	d142      	bne.n	142e2 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
   1425c:	4981      	ldr	r1, [pc, #516]	; (14464 <log_output_process+0x258>)
   1425e:	462a      	mov	r2, r5
   14260:	4620      	mov	r0, r4
   14262:	f7ff ffb3 	bl	141cc <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   14266:	4480      	add	r8, r0
	if (color) {
   14268:	f006 0301 	and.w	r3, r6, #1
   1426c:	b15b      	cbz	r3, 14286 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
   1426e:	4b7e      	ldr	r3, [pc, #504]	; (14468 <log_output_process+0x25c>)
   14270:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
   14272:	497e      	ldr	r1, [pc, #504]	; (1446c <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
   14274:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   14278:	4b7d      	ldr	r3, [pc, #500]	; (14470 <log_output_process+0x264>)
   1427a:	4620      	mov	r0, r4
   1427c:	2a00      	cmp	r2, #0
   1427e:	bf08      	it	eq
   14280:	461a      	moveq	r2, r3
   14282:	f7ff ffa3 	bl	141cc <print_formatted>
	if (level_on) {
   14286:	f006 0308 	and.w	r3, r6, #8
   1428a:	2b00      	cmp	r3, #0
   1428c:	d055      	beq.n	1433a <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
   1428e:	4b79      	ldr	r3, [pc, #484]	; (14474 <log_output_process+0x268>)
   14290:	9a04      	ldr	r2, [sp, #16]
   14292:	4979      	ldr	r1, [pc, #484]	; (14478 <log_output_process+0x26c>)
   14294:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14298:	4620      	mov	r0, r4
   1429a:	f7ff ff97 	bl	141cc <print_formatted>
   1429e:	4605      	mov	r5, r0
	if (domain) {
   142a0:	9b06      	ldr	r3, [sp, #24]
   142a2:	b12b      	cbz	r3, 142b0 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
   142a4:	4975      	ldr	r1, [pc, #468]	; (1447c <log_output_process+0x270>)
   142a6:	461a      	mov	r2, r3
   142a8:	4620      	mov	r0, r4
   142aa:	f7ff ff8f 	bl	141cc <print_formatted>
   142ae:	4405      	add	r5, r0
	if (source) {
   142b0:	f1bb 0f00 	cmp.w	fp, #0
   142b4:	d005      	beq.n	142c2 <log_output_process+0xb6>
		total += print_formatted(output,
   142b6:	4972      	ldr	r1, [pc, #456]	; (14480 <log_output_process+0x274>)
   142b8:	465a      	mov	r2, fp
   142ba:	4620      	mov	r0, r4
   142bc:	f7ff ff86 	bl	141cc <print_formatted>
   142c0:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   142c2:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   142c4:	f1b9 0f00 	cmp.w	r9, #0
   142c8:	d149      	bne.n	1435e <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   142ca:	2f00      	cmp	r7, #0
   142cc:	d14f      	bne.n	1436e <log_output_process+0x162>
	if (color) {
   142ce:	07f3      	lsls	r3, r6, #31
   142d0:	f100 80c0 	bmi.w	14454 <log_output_process+0x248>
	newline_print(output, flags);
   142d4:	4631      	mov	r1, r6
   142d6:	4620      	mov	r0, r4
   142d8:	f7ff ff8a 	bl	141f0 <newline_print>
}
   142dc:	e0b4      	b.n	14448 <log_output_process+0x23c>
	uint32_t length = 0U;
   142de:	4680      	mov	r8, r0
   142e0:	e7b6      	b.n	14250 <log_output_process+0x44>
	} else if (freq != 0U) {
   142e2:	4b68      	ldr	r3, [pc, #416]	; (14484 <log_output_process+0x278>)
   142e4:	6818      	ldr	r0, [r3, #0]
   142e6:	2800      	cmp	r0, #0
   142e8:	d0bd      	beq.n	14266 <log_output_process+0x5a>
		timestamp /= timestamp_div;
   142ea:	4b67      	ldr	r3, [pc, #412]	; (14488 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   142ec:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   142f0:	681b      	ldr	r3, [r3, #0]
   142f2:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   142f6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   142fa:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   142fe:	fb00 5513 	mls	r5, r0, r3, r5
   14302:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
   14306:	fb0e f505 	mul.w	r5, lr, r5
   1430a:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
   1430e:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14310:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
   14314:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14318:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
   1431c:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14320:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
   14324:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14326:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   1432a:	4958      	ldr	r1, [pc, #352]	; (1448c <log_output_process+0x280>)
   1432c:	e9cd c501 	strd	ip, r5, [sp, #4]
   14330:	4652      	mov	r2, sl
   14332:	4620      	mov	r0, r4
   14334:	f7ff ff4a 	bl	141cc <print_formatted>
   14338:	e795      	b.n	14266 <log_output_process+0x5a>
	int total = 0;
   1433a:	f006 0508 	and.w	r5, r6, #8
   1433e:	e7af      	b.n	142a0 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   14340:	f1bb 0f01 	cmp.w	fp, #1
   14344:	d106      	bne.n	14354 <log_output_process+0x148>
	if (package) {
   14346:	f1b9 0f00 	cmp.w	r9, #0
   1434a:	d164      	bne.n	14416 <log_output_process+0x20a>
	if (data_len) {
   1434c:	2f00      	cmp	r7, #0
   1434e:	d07b      	beq.n	14448 <log_output_process+0x23c>
		prefix_offset = 0;
   14350:	2500      	movs	r5, #0
   14352:	e00c      	b.n	1436e <log_output_process+0x162>
	if (package) {
   14354:	f1b9 0f00 	cmp.w	r9, #0
   14358:	d0f8      	beq.n	1434c <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1435a:	484d      	ldr	r0, [pc, #308]	; (14490 <log_output_process+0x284>)
   1435c:	e05c      	b.n	14418 <log_output_process+0x20c>
		cb = out_func;
   1435e:	484d      	ldr	r0, [pc, #308]	; (14494 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   14360:	494d      	ldr	r1, [pc, #308]	; (14498 <log_output_process+0x28c>)
   14362:	464b      	mov	r3, r9
   14364:	4622      	mov	r2, r4
   14366:	f014 ffed 	bl	29344 <cbpprintf_external>
	if (data_len) {
   1436a:	2f00      	cmp	r7, #0
   1436c:	d068      	beq.n	14440 <log_output_process+0x234>
		print_formatted(output, " ");
   1436e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 1449c <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
   14372:	f8df a12c 	ldr.w	sl, [pc, #300]	; 144a0 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   14376:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   14378:	4631      	mov	r1, r6
   1437a:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1437c:	46b8      	mov	r8, r7
   1437e:	bf28      	it	cs
   14380:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
   14384:	f7ff ff34 	bl	141f0 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   14388:	f04f 0b00 	mov.w	fp, #0
   1438c:	455d      	cmp	r5, fp
   1438e:	dc45      	bgt.n	1441c <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
   14390:	9b05      	ldr	r3, [sp, #20]
   14392:	4651      	mov	r1, sl
   14394:	781a      	ldrb	r2, [r3, #0]
   14396:	4620      	mov	r0, r4
   14398:	f7ff ff18 	bl	141cc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1439c:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
   143a0:	f01b 0f07 	tst.w	fp, #7
   143a4:	d103      	bne.n	143ae <log_output_process+0x1a2>
			print_formatted(output, " ");
   143a6:	4649      	mov	r1, r9
   143a8:	4620      	mov	r0, r4
   143aa:	f7ff ff0f 	bl	141cc <print_formatted>
		if (i < length) {
   143ae:	45d8      	cmp	r8, fp
   143b0:	d93b      	bls.n	1442a <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
   143b2:	9b05      	ldr	r3, [sp, #20]
   143b4:	4651      	mov	r1, sl
   143b6:	f813 200b 	ldrb.w	r2, [r3, fp]
   143ba:	4620      	mov	r0, r4
   143bc:	f7ff ff06 	bl	141cc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   143c0:	f10b 0b01 	add.w	fp, fp, #1
   143c4:	f1bb 0f10 	cmp.w	fp, #16
   143c8:	d1ea      	bne.n	143a0 <log_output_process+0x194>
	print_formatted(output, "|");
   143ca:	4936      	ldr	r1, [pc, #216]	; (144a4 <log_output_process+0x298>)
   143cc:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   143ce:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
   143d2:	f7ff fefb 	bl	141cc <print_formatted>
		if (i < length) {
   143d6:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
   143d8:	9b05      	ldr	r3, [sp, #20]
   143da:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
   143dc:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
   143e0:	295f      	cmp	r1, #95	; 0x5f
   143e2:	bf28      	it	cs
   143e4:	222e      	movcs	r2, #46	; 0x2e
   143e6:	4930      	ldr	r1, [pc, #192]	; (144a8 <log_output_process+0x29c>)
   143e8:	4620      	mov	r0, r4
   143ea:	f7ff feef 	bl	141cc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   143ee:	f10b 0b01 	add.w	fp, fp, #1
   143f2:	f1bb 0f10 	cmp.w	fp, #16
   143f6:	d01d      	beq.n	14434 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
   143f8:	f01b 0f07 	tst.w	fp, #7
   143fc:	d103      	bne.n	14406 <log_output_process+0x1fa>
			print_formatted(output, " ");
   143fe:	4649      	mov	r1, r9
   14400:	4620      	mov	r0, r4
   14402:	f7ff fee3 	bl	141cc <print_formatted>
		if (i < length) {
   14406:	45d8      	cmp	r8, fp
   14408:	465a      	mov	r2, fp
   1440a:	d8e5      	bhi.n	143d8 <log_output_process+0x1cc>
			print_formatted(output, " ");
   1440c:	4649      	mov	r1, r9
   1440e:	4620      	mov	r0, r4
   14410:	f7ff fedc 	bl	141cc <print_formatted>
   14414:	e7eb      	b.n	143ee <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   14416:	481f      	ldr	r0, [pc, #124]	; (14494 <log_output_process+0x288>)
		prefix_offset = 0;
   14418:	9d04      	ldr	r5, [sp, #16]
   1441a:	e7a1      	b.n	14360 <log_output_process+0x154>
		print_formatted(output, " ");
   1441c:	4649      	mov	r1, r9
   1441e:	4620      	mov	r0, r4
   14420:	f7ff fed4 	bl	141cc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   14424:	f10b 0b01 	add.w	fp, fp, #1
   14428:	e7b0      	b.n	1438c <log_output_process+0x180>
			print_formatted(output, "   ");
   1442a:	4920      	ldr	r1, [pc, #128]	; (144ac <log_output_process+0x2a0>)
   1442c:	4620      	mov	r0, r4
   1442e:	f7ff fecd 	bl	141cc <print_formatted>
   14432:	e7c5      	b.n	143c0 <log_output_process+0x1b4>
		data += length;
   14434:	9b05      	ldr	r3, [sp, #20]
	} while (len);
   14436:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
   1443a:	4443      	add	r3, r8
   1443c:	9305      	str	r3, [sp, #20]
	} while (len);
   1443e:	d19a      	bne.n	14376 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   14440:	9b04      	ldr	r3, [sp, #16]
   14442:	2b00      	cmp	r3, #0
   14444:	f47f af43 	bne.w	142ce <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   14448:	4620      	mov	r0, r4
}
   1444a:	b009      	add	sp, #36	; 0x24
   1444c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   14450:	f016 b8b9 	b.w	2a5c6 <log_output_flush>
		print_formatted(output, "%s", log_color);
   14454:	4a06      	ldr	r2, [pc, #24]	; (14470 <log_output_process+0x264>)
   14456:	4905      	ldr	r1, [pc, #20]	; (1446c <log_output_process+0x260>)
   14458:	4620      	mov	r0, r4
   1445a:	f7ff feb7 	bl	141cc <print_formatted>
}
   1445e:	e739      	b.n	142d4 <log_output_process+0xc8>
   14460:	000315b6 	.word	0x000315b6
   14464:	000315ba 	.word	0x000315ba
   14468:	0002fecc 	.word	0x0002fecc
   1446c:	00032569 	.word	0x00032569
   14470:	000315b1 	.word	0x000315b1
   14474:	0002fee0 	.word	0x0002fee0
   14478:	000315df 	.word	0x000315df
   1447c:	000315e5 	.word	0x000315e5
   14480:	000315e9 	.word	0x000315e9
   14484:	20002db4 	.word	0x20002db4
   14488:	20002db0 	.word	0x20002db0
   1448c:	000315c3 	.word	0x000315c3
   14490:	0002a617 	.word	0x0002a617
   14494:	0002a5e1 	.word	0x0002a5e1
   14498:	0002a5b9 	.word	0x0002a5b9
   1449c:	000315f6 	.word	0x000315f6
   144a0:	000315ee 	.word	0x000315ee
   144a4:	000315f8 	.word	0x000315f8
   144a8:	00030d35 	.word	0x00030d35
   144ac:	000315f4 	.word	0x000315f4

000144b0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   144b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   144b4:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   144b6:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   144b8:	688e      	ldr	r6, [r1, #8]
   144ba:	b086      	sub	sp, #24
   144bc:	4605      	mov	r5, r0
   144be:	460c      	mov	r4, r1
   144c0:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   144c2:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   144c6:	b15b      	cbz	r3, 144e0 <log_output_msg_process+0x30>
   144c8:	4a13      	ldr	r2, [pc, #76]	; (14518 <log_output_msg_process+0x68>)
   144ca:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   144cc:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   144d0:	2900      	cmp	r1, #0
   144d2:	db1f      	blt.n	14514 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   144d4:	7820      	ldrb	r0, [r4, #0]
   144d6:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   144da:	f7ff fd87 	bl	13fec <log_source_name_get>
   144de:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   144e0:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   144e2:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   144e4:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   144e8:	9700      	str	r7, [sp, #0]
   144ea:	f3c2 224a 	ubfx	r2, r2, #9, #11
   144ee:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   144f0:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   144f4:	f3c0 100b 	ubfx	r0, r0, #4, #12
   144f8:	bf08      	it	eq
   144fa:	2100      	moveq	r1, #0
   144fc:	e9cd 0803 	strd	r0, r8, [sp, #12]
   14500:	e9cd 1401 	strd	r1, r4, [sp, #4]
   14504:	2200      	movs	r2, #0
   14506:	4631      	mov	r1, r6
   14508:	4628      	mov	r0, r5
   1450a:	f7ff fe7f 	bl	1420c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   1450e:	b006      	add	sp, #24
   14510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   14514:	2300      	movs	r3, #0
   14516:	e7e3      	b.n	144e0 <log_output_msg_process+0x30>
   14518:	0002fbcc 	.word	0x0002fbcc

0001451c <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   1451c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1451e:	f242 730f 	movw	r3, #9999	; 0x270f
   14522:	428b      	cmp	r3, r1
   14524:	bf28      	it	cs
   14526:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   14528:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1452a:	4a0f      	ldr	r2, [pc, #60]	; (14568 <log_output_dropped_process+0x4c>)
{
   1452c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1452e:	2105      	movs	r1, #5
   14530:	4668      	mov	r0, sp
   14532:	f014 fffa 	bl	2952a <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   14536:	6863      	ldr	r3, [r4, #4]
   14538:	490c      	ldr	r1, [pc, #48]	; (1456c <log_output_dropped_process+0x50>)
   1453a:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1453c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1453e:	220b      	movs	r2, #11
   14540:	4628      	mov	r0, r5
   14542:	f016 f82c 	bl	2a59e <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   14546:	6863      	ldr	r3, [r4, #4]
   14548:	4632      	mov	r2, r6
   1454a:	4669      	mov	r1, sp
   1454c:	4628      	mov	r0, r5
   1454e:	685b      	ldr	r3, [r3, #4]
   14550:	f016 f825 	bl	2a59e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   14554:	6863      	ldr	r3, [r4, #4]
   14556:	4906      	ldr	r1, [pc, #24]	; (14570 <log_output_dropped_process+0x54>)
   14558:	685b      	ldr	r3, [r3, #4]
   1455a:	221b      	movs	r2, #27
   1455c:	4628      	mov	r0, r5
   1455e:	f016 f81e 	bl	2a59e <buffer_write>
		     output->control_block->ctx);
}
   14562:	b002      	add	sp, #8
   14564:	bd70      	pop	{r4, r5, r6, pc}
   14566:	bf00      	nop
   14568:	00034d94 	.word	0x00034d94
   1456c:	00031616 	.word	0x00031616
   14570:	000315fa 	.word	0x000315fa

00014574 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   14574:	4a07      	ldr	r2, [pc, #28]	; (14594 <log_output_timestamp_freq_set+0x20>)
   14576:	2100      	movs	r1, #0
   14578:	2301      	movs	r3, #1
   1457a:	4290      	cmp	r0, r2
   1457c:	d806      	bhi.n	1458c <log_output_timestamp_freq_set+0x18>
   1457e:	4a06      	ldr	r2, [pc, #24]	; (14598 <log_output_timestamp_freq_set+0x24>)
   14580:	b901      	cbnz	r1, 14584 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   14582:	2301      	movs	r3, #1
   14584:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   14586:	4b05      	ldr	r3, [pc, #20]	; (1459c <log_output_timestamp_freq_set+0x28>)
   14588:	6018      	str	r0, [r3, #0]
}
   1458a:	4770      	bx	lr
		frequency /= 2U;
   1458c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1458e:	005b      	lsls	r3, r3, #1
   14590:	2101      	movs	r1, #1
   14592:	e7f2      	b.n	1457a <log_output_timestamp_freq_set+0x6>
   14594:	000f4240 	.word	0x000f4240
   14598:	20002db0 	.word	0x20002db0
   1459c:	20002db4 	.word	0x20002db4

000145a0 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   145a0:	4b01      	ldr	r3, [pc, #4]	; (145a8 <log_backend_rtt_init+0x8>)
   145a2:	2201      	movs	r2, #1
   145a4:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   145a6:	4770      	bx	lr
   145a8:	20004330 	.word	0x20004330

000145ac <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   145ac:	4b01      	ldr	r3, [pc, #4]	; (145b4 <format_set+0x8>)
	return 0;
}
   145ae:	2000      	movs	r0, #0
	log_format_current = log_type;
   145b0:	6019      	str	r1, [r3, #0]
}
   145b2:	4770      	bx	lr
   145b4:	20002dcc 	.word	0x20002dcc

000145b8 <panic>:
	panic_mode = true;
   145b8:	4b02      	ldr	r3, [pc, #8]	; (145c4 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   145ba:	4803      	ldr	r0, [pc, #12]	; (145c8 <panic+0x10>)
   145bc:	2201      	movs	r2, #1
   145be:	701a      	strb	r2, [r3, #0]
   145c0:	f016 b801 	b.w	2a5c6 <log_output_flush>
   145c4:	20004331 	.word	0x20004331
   145c8:	0002ff10 	.word	0x0002ff10

000145cc <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   145cc:	4801      	ldr	r0, [pc, #4]	; (145d4 <dropped+0x8>)
   145ce:	f7ff bfa5 	b.w	1451c <log_output_dropped_process>
   145d2:	bf00      	nop
   145d4:	0002ff10 	.word	0x0002ff10

000145d8 <process>:
{
   145d8:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   145da:	4b06      	ldr	r3, [pc, #24]	; (145f4 <process+0x1c>)
   145dc:	6818      	ldr	r0, [r3, #0]
{
   145de:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   145e0:	f7ff fb3e 	bl	13c60 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   145e4:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   145e6:	4603      	mov	r3, r0
}
   145e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   145ec:	4802      	ldr	r0, [pc, #8]	; (145f8 <process+0x20>)
   145ee:	220f      	movs	r2, #15
   145f0:	4718      	bx	r3
   145f2:	bf00      	nop
   145f4:	20002dcc 	.word	0x20002dcc
   145f8:	0002ff10 	.word	0x0002ff10

000145fc <on_failed_write>:
	if (retry_cnt == 0) {
   145fc:	b910      	cbnz	r0, 14604 <on_failed_write+0x8>
		host_present = false;
   145fe:	4b07      	ldr	r3, [pc, #28]	; (1461c <on_failed_write+0x20>)
   14600:	7018      	strb	r0, [r3, #0]
}
   14602:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   14604:	4b06      	ldr	r3, [pc, #24]	; (14620 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
   14606:	781b      	ldrb	r3, [r3, #0]
   14608:	b11b      	cbz	r3, 14612 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   1460a:	f241 3088 	movw	r0, #5000	; 0x1388
   1460e:	f01a bf45 	b.w	2f49c <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   14612:	20a4      	movs	r0, #164	; 0xa4
   14614:	2100      	movs	r1, #0
   14616:	f011 bba9 	b.w	25d6c <z_impl_k_sleep>
   1461a:	bf00      	nop
   1461c:	20004330 	.word	0x20004330
   14620:	20004331 	.word	0x20004331

00014624 <data_out_block_mode>:
{
   14624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   14628:	f8df 9074 	ldr.w	r9, [pc, #116]	; 146a0 <data_out_block_mode+0x7c>
   1462c:	4f1d      	ldr	r7, [pc, #116]	; (146a4 <data_out_block_mode+0x80>)
{
   1462e:	4680      	mov	r8, r0
   14630:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   14632:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   14634:	f899 5000 	ldrb.w	r5, [r9]
   14638:	b995      	cbnz	r5, 14660 <data_out_block_mode+0x3c>
			RTT_LOCK();
   1463a:	f010 faf5 	bl	24c28 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1463e:	4628      	mov	r0, r5
   14640:	4632      	mov	r2, r6
   14642:	4641      	mov	r1, r8
   14644:	f010 fa9e 	bl	24b84 <SEGGER_RTT_WriteSkipNoLock>
   14648:	4605      	mov	r5, r0
			RTT_UNLOCK();
   1464a:	f010 faf7 	bl	24c3c <zephyr_rtt_mutex_unlock>
		if (ret) {
   1464e:	b1e5      	cbz	r5, 1468a <data_out_block_mode+0x66>
	host_present = true;
   14650:	2301      	movs	r3, #1
   14652:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
   14654:	f899 3000 	ldrb.w	r3, [r9]
   14658:	b973      	cbnz	r3, 14678 <data_out_block_mode+0x54>
}
   1465a:	4630      	mov	r0, r6
   1465c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   14660:	4632      	mov	r2, r6
   14662:	4641      	mov	r1, r8
   14664:	2000      	movs	r0, #0
   14666:	f010 fa8d 	bl	24b84 <SEGGER_RTT_WriteSkipNoLock>
   1466a:	4605      	mov	r5, r0
   1466c:	e7ef      	b.n	1464e <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
   1466e:	4620      	mov	r0, r4
   14670:	f7ff ffc4 	bl	145fc <on_failed_write>
   14674:	1e65      	subs	r5, r4, #1
   14676:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   14678:	2000      	movs	r0, #0
   1467a:	f010 facb 	bl	24c14 <SEGGER_RTT_HasDataUp>
   1467e:	2800      	cmp	r0, #0
   14680:	d0eb      	beq.n	1465a <data_out_block_mode+0x36>
   14682:	783b      	ldrb	r3, [r7, #0]
   14684:	2b00      	cmp	r3, #0
   14686:	d1f2      	bne.n	1466e <data_out_block_mode+0x4a>
   14688:	e7e7      	b.n	1465a <data_out_block_mode+0x36>
		} else if (host_present) {
   1468a:	783b      	ldrb	r3, [r7, #0]
   1468c:	2b00      	cmp	r3, #0
   1468e:	d0e4      	beq.n	1465a <data_out_block_mode+0x36>
			retry_cnt--;
   14690:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
   14692:	4620      	mov	r0, r4
   14694:	f7ff ffb2 	bl	145fc <on_failed_write>
	} while ((ret == 0) && host_present);
   14698:	783b      	ldrb	r3, [r7, #0]
   1469a:	2b00      	cmp	r3, #0
   1469c:	d1ca      	bne.n	14634 <data_out_block_mode+0x10>
   1469e:	e7dc      	b.n	1465a <data_out_block_mode+0x36>
   146a0:	20004331 	.word	0x20004331
   146a4:	20004330 	.word	0x20004330

000146a8 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   146a8:	4b01      	ldr	r3, [pc, #4]	; (146b0 <format_set+0x8>)
	return 0;
}
   146aa:	2000      	movs	r0, #0
	log_format_current = log_type;
   146ac:	6019      	str	r1, [r3, #0]
}
   146ae:	4770      	bx	lr
   146b0:	20002de4 	.word	0x20002de4

000146b4 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
   146b4:	4b02      	ldr	r3, [pc, #8]	; (146c0 <panic+0xc>)
	log_output_flush(output);
   146b6:	4803      	ldr	r0, [pc, #12]	; (146c4 <panic+0x10>)
   146b8:	2201      	movs	r2, #1
   146ba:	701a      	strb	r2, [r3, #0]
   146bc:	f015 bf83 	b.w	2a5c6 <log_output_flush>
   146c0:	20004343 	.word	0x20004343
   146c4:	0002ff3c 	.word	0x0002ff3c

000146c8 <dropped>:
	log_output_dropped_process(output, cnt);
   146c8:	4801      	ldr	r0, [pc, #4]	; (146d0 <dropped+0x8>)
   146ca:	f7ff bf27 	b.w	1451c <log_output_dropped_process>
   146ce:	bf00      	nop
   146d0:	0002ff3c 	.word	0x0002ff3c

000146d4 <process>:
{
   146d4:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   146d6:	4b06      	ldr	r3, [pc, #24]	; (146f0 <process+0x1c>)
   146d8:	6818      	ldr	r0, [r3, #0]
{
   146da:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   146dc:	f7ff fac0 	bl	13c60 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   146e0:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   146e2:	4603      	mov	r3, r0
}
   146e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   146e8:	4802      	ldr	r0, [pc, #8]	; (146f4 <process+0x20>)
   146ea:	220f      	movs	r2, #15
   146ec:	4718      	bx	r3
   146ee:	bf00      	nop
   146f0:	20002de4 	.word	0x20002de4
   146f4:	0002ff3c 	.word	0x0002ff3c

000146f8 <char_out>:
{
   146f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   146fa:	4f07      	ldr	r7, [pc, #28]	; (14718 <char_out+0x20>)
   146fc:	460d      	mov	r5, r1
   146fe:	4604      	mov	r4, r0
   14700:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   14702:	42b4      	cmp	r4, r6
   14704:	d101      	bne.n	1470a <char_out+0x12>
}
   14706:	4628      	mov	r0, r5
   14708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   1470a:	f814 1b01 	ldrb.w	r1, [r4], #1
   1470e:	68bb      	ldr	r3, [r7, #8]
   14710:	4801      	ldr	r0, [pc, #4]	; (14718 <char_out+0x20>)
   14712:	685b      	ldr	r3, [r3, #4]
   14714:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   14716:	e7f4      	b.n	14702 <char_out+0xa>
   14718:	0002f97c 	.word	0x0002f97c

0001471c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   1471c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14720:	4605      	mov	r5, r0
	__asm__ volatile(
   14722:	f04f 0340 	mov.w	r3, #64	; 0x40
   14726:	f3ef 8611 	mrs	r6, BASEPRI
   1472a:	f383 8812 	msr	BASEPRI_MAX, r3
   1472e:	f3bf 8f6f 	isb	sy
	return list->head;
   14732:	4b0e      	ldr	r3, [pc, #56]	; (1476c <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   14734:	4f0e      	ldr	r7, [pc, #56]	; (14770 <pm_state_notify+0x54>)
   14736:	681c      	ldr	r4, [r3, #0]
   14738:	f8df 8038 	ldr.w	r8, [pc, #56]	; 14774 <pm_state_notify+0x58>
   1473c:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14740:	b92c      	cbnz	r4, 1474e <pm_state_notify+0x32>
	__asm__ volatile(
   14742:	f386 8811 	msr	BASEPRI, r6
   14746:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1474a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   1474e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   14752:	2d00      	cmp	r5, #0
   14754:	bf18      	it	ne
   14756:	4613      	movne	r3, r2
		if (callback) {
   14758:	b12b      	cbz	r3, 14766 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1475a:	f898 2010 	ldrb.w	r2, [r8, #16]
   1475e:	fb09 f202 	mul.w	r2, r9, r2
   14762:	5cb8      	ldrb	r0, [r7, r2]
   14764:	4798      	blx	r3
	return node->next;
   14766:	6824      	ldr	r4, [r4, #0]
   14768:	e7ea      	b.n	14740 <pm_state_notify+0x24>
   1476a:	bf00      	nop
   1476c:	20002e00 	.word	0x20002e00
   14770:	20002df4 	.word	0x20002df4
   14774:	20003804 	.word	0x20003804

00014778 <pm_system_resume>:

void pm_system_resume(void)
{
   14778:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1477a:	4b19      	ldr	r3, [pc, #100]	; (147e0 <pm_system_resume+0x68>)
   1477c:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1477e:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14782:	f004 031f 	and.w	r3, r4, #31
   14786:	2201      	movs	r2, #1
   14788:	409a      	lsls	r2, r3
   1478a:	4b16      	ldr	r3, [pc, #88]	; (147e4 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1478c:	0961      	lsrs	r1, r4, #5
   1478e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14792:	43d0      	mvns	r0, r2
   14794:	e853 1f00 	ldrex	r1, [r3]
   14798:	ea01 0500 	and.w	r5, r1, r0
   1479c:	e843 5600 	strex	r6, r5, [r3]
   147a0:	2e00      	cmp	r6, #0
   147a2:	d1f7      	bne.n	14794 <pm_system_resume+0x1c>
   147a4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   147a8:	420a      	tst	r2, r1
   147aa:	d013      	beq.n	147d4 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   147ac:	4b0e      	ldr	r3, [pc, #56]	; (147e8 <pm_system_resume+0x70>)
   147ae:	4d0f      	ldr	r5, [pc, #60]	; (147ec <pm_system_resume+0x74>)
   147b0:	b18b      	cbz	r3, 147d6 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   147b2:	230c      	movs	r3, #12
   147b4:	4363      	muls	r3, r4
   147b6:	18ea      	adds	r2, r5, r3
   147b8:	5ce8      	ldrb	r0, [r5, r3]
   147ba:	7851      	ldrb	r1, [r2, #1]
   147bc:	f017 fa93 	bl	2bce6 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   147c0:	2000      	movs	r0, #0
   147c2:	f7ff ffab 	bl	1471c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   147c6:	230c      	movs	r3, #12
   147c8:	435c      	muls	r4, r3
   147ca:	192a      	adds	r2, r5, r4
   147cc:	2300      	movs	r3, #0
   147ce:	512b      	str	r3, [r5, r4]
   147d0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   147d4:	bd70      	pop	{r4, r5, r6, pc}
   147d6:	f383 8811 	msr	BASEPRI, r3
   147da:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   147de:	e7ef      	b.n	147c0 <pm_system_resume+0x48>
   147e0:	20003804 	.word	0x20003804
   147e4:	20002e08 	.word	0x20002e08
   147e8:	0002bce7 	.word	0x0002bce7
   147ec:	20002df4 	.word	0x20002df4

000147f0 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   147f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   147f4:	4b35      	ldr	r3, [pc, #212]	; (148cc <pm_system_suspend+0xdc>)
{
   147f6:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   147f8:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   147fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   147fe:	f3ef 8811 	mrs	r8, BASEPRI
   14802:	f383 8812 	msr	BASEPRI_MAX, r3
   14806:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   1480a:	240c      	movs	r4, #12
   1480c:	4b30      	ldr	r3, [pc, #192]	; (148d0 <pm_system_suspend+0xe0>)
   1480e:	4e31      	ldr	r6, [pc, #196]	; (148d4 <pm_system_suspend+0xe4>)
   14810:	436c      	muls	r4, r5
   14812:	191a      	adds	r2, r3, r4
   14814:	5d19      	ldrb	r1, [r3, r4]
   14816:	2900      	cmp	r1, #0
   14818:	d04c      	beq.n	148b4 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   1481a:	ca07      	ldmia	r2, {r0, r1, r2}
   1481c:	eb06 0c04 	add.w	ip, r6, r4
   14820:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   14824:	2200      	movs	r2, #0
   14826:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   14828:	f388 8811 	msr	BASEPRI, r8
   1482c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   14830:	230c      	movs	r3, #12
   14832:	436b      	muls	r3, r5
   14834:	18f2      	adds	r2, r6, r3
   14836:	5cf0      	ldrb	r0, [r6, r3]
   14838:	2800      	cmp	r0, #0
   1483a:	d039      	beq.n	148b0 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1483c:	1c7b      	adds	r3, r7, #1
   1483e:	d010      	beq.n	14862 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
   14840:	f8d2 c008 	ldr.w	ip, [r2, #8]
   14844:	4c24      	ldr	r4, [pc, #144]	; (148d8 <pm_system_suspend+0xe8>)
   14846:	4a25      	ldr	r2, [pc, #148]	; (148dc <pm_system_suspend+0xec>)
   14848:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1484c:	2100      	movs	r1, #0
   1484e:	fbec 4100 	umlal	r4, r1, ip, r0
   14852:	2300      	movs	r3, #0
   14854:	4620      	mov	r0, r4
   14856:	f7eb fc53 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   1485a:	2101      	movs	r1, #1
   1485c:	1a38      	subs	r0, r7, r0
   1485e:	f00d ffa9 	bl	227b4 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   14862:	f011 f9c9 	bl	25bf8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   14866:	2001      	movs	r0, #1
   14868:	f7ff ff58 	bl	1471c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1486c:	f3bf 8f5b 	dmb	ish
   14870:	4b1b      	ldr	r3, [pc, #108]	; (148e0 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14872:	096a      	lsrs	r2, r5, #5
   14874:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   14878:	f005 011f 	and.w	r1, r5, #31
   1487c:	2201      	movs	r2, #1
   1487e:	408a      	lsls	r2, r1
   14880:	e853 0f00 	ldrex	r0, [r3]
   14884:	4310      	orrs	r0, r2
   14886:	e843 0100 	strex	r1, r0, [r3]
   1488a:	2900      	cmp	r1, #0
   1488c:	d1f8      	bne.n	14880 <pm_system_suspend+0x90>
   1488e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   14892:	4b14      	ldr	r3, [pc, #80]	; (148e4 <pm_system_suspend+0xf4>)
   14894:	b13b      	cbz	r3, 148a6 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   14896:	230c      	movs	r3, #12
   14898:	fb03 f005 	mul.w	r0, r3, r5
   1489c:	1833      	adds	r3, r6, r0
   1489e:	5c30      	ldrb	r0, [r6, r0]
   148a0:	7859      	ldrb	r1, [r3, #1]
   148a2:	f017 fa14 	bl	2bcce <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   148a6:	f7ff ff67 	bl	14778 <pm_system_resume>
	k_sched_unlock();
   148aa:	f011 f9b9 	bl	25c20 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   148ae:	2001      	movs	r0, #1
}
   148b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   148b4:	4601      	mov	r1, r0
   148b6:	4628      	mov	r0, r5
   148b8:	f000 f816 	bl	148e8 <pm_policy_next_state>
		if (info != NULL) {
   148bc:	2800      	cmp	r0, #0
   148be:	d0b3      	beq.n	14828 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   148c0:	c807      	ldmia	r0, {r0, r1, r2}
   148c2:	4434      	add	r4, r6
   148c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   148c8:	e7ae      	b.n	14828 <pm_system_suspend+0x38>
   148ca:	bf00      	nop
   148cc:	20003804 	.word	0x20003804
   148d0:	20002de8 	.word	0x20002de8
   148d4:	20002df4 	.word	0x20002df4
   148d8:	000f423f 	.word	0x000f423f
   148dc:	000f4240 	.word	0x000f4240
   148e0:	20002e08 	.word	0x20002e08
   148e4:	0002bccf 	.word	0x0002bccf

000148e8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   148e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148ec:	b085      	sub	sp, #20
   148ee:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   148f0:	a903      	add	r1, sp, #12
   148f2:	f000 f843 	bl	1497c <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   148f6:	4b1e      	ldr	r3, [pc, #120]	; (14970 <pm_policy_next_state+0x88>)
   148f8:	9d03      	ldr	r5, [sp, #12]
   148fa:	f8d3 a000 	ldr.w	sl, [r3]
   148fe:	f8df 8074 	ldr.w	r8, [pc, #116]	; 14974 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14902:	1e43      	subs	r3, r0, #1
   14904:	b21b      	sxth	r3, r3
   14906:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   1490a:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1490c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   14910:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   14914:	f04f 0b00 	mov.w	fp, #0
   14918:	b924      	cbnz	r4, 14924 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   1491a:	46a1      	mov	r9, r4
}
   1491c:	4648      	mov	r0, r9
   1491e:	b005      	add	sp, #20
   14920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14924:	6868      	ldr	r0, [r5, #4]
   14926:	4a14      	ldr	r2, [pc, #80]	; (14978 <pm_policy_next_state+0x90>)
   14928:	46c4      	mov	ip, r8
   1492a:	4659      	mov	r1, fp
   1492c:	fbe0 c107 	umlal	ip, r1, r0, r7
   14930:	2300      	movs	r3, #0
   14932:	4660      	mov	r0, ip
   14934:	f7eb fbe4 	bl	100 <__aeabi_uldivmod>
   14938:	9001      	str	r0, [sp, #4]
   1493a:	68a8      	ldr	r0, [r5, #8]
   1493c:	4a0e      	ldr	r2, [pc, #56]	; (14978 <pm_policy_next_state+0x90>)
   1493e:	46c4      	mov	ip, r8
   14940:	4659      	mov	r1, fp
   14942:	fbe0 c107 	umlal	ip, r1, r0, r7
   14946:	2300      	movs	r3, #0
   14948:	4660      	mov	r0, ip
   1494a:	f7eb fbd9 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1494e:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   14952:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14954:	d001      	beq.n	1495a <pm_policy_next_state+0x72>
   14956:	4582      	cmp	sl, r0
   14958:	d905      	bls.n	14966 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   1495a:	1c73      	adds	r3, r6, #1
   1495c:	d0de      	beq.n	1491c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   1495e:	9b01      	ldr	r3, [sp, #4]
   14960:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   14962:	42b0      	cmp	r0, r6
   14964:	d9da      	bls.n	1491c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14966:	3c01      	subs	r4, #1
   14968:	b2a4      	uxth	r4, r4
   1496a:	3d0c      	subs	r5, #12
   1496c:	e7d4      	b.n	14918 <pm_policy_next_state+0x30>
   1496e:	bf00      	nop
   14970:	200004f8 	.word	0x200004f8
   14974:	000f423f 	.word	0x000f423f
   14978:	000f4240 	.word	0x000f4240

0001497c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   1497c:	b908      	cbnz	r0, 14982 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   1497e:	4b02      	ldr	r3, [pc, #8]	; (14988 <pm_state_cpu_get_all+0xc>)
   14980:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   14982:	2000      	movs	r0, #0
   14984:	4770      	bx	lr
   14986:	bf00      	nop
   14988:	0002ff4c 	.word	0x0002ff4c

0001498c <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
   1498c:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
   1498e:	4b11      	ldr	r3, [pc, #68]	; (149d4 <flash_area_open+0x48>)
   14990:	681c      	ldr	r4, [r3, #0]
{
   14992:	460d      	mov	r5, r1
	if (flash_map == NULL) {
   14994:	b1dc      	cbz	r4, 149ce <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   14996:	4b10      	ldr	r3, [pc, #64]	; (149d8 <flash_area_open+0x4c>)
   14998:	6819      	ldr	r1, [r3, #0]
   1499a:	2300      	movs	r3, #0
   1499c:	428b      	cmp	r3, r1
   1499e:	db02      	blt.n	149a6 <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   149a0:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   149a4:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   149a6:	4622      	mov	r2, r4
   149a8:	f812 6b10 	ldrb.w	r6, [r2], #16
   149ac:	4286      	cmp	r6, r0
   149ae:	d002      	beq.n	149b6 <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
   149b0:	3301      	adds	r3, #1
   149b2:	4614      	mov	r4, r2
   149b4:	e7f2      	b.n	1499c <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   149b6:	68e0      	ldr	r0, [r4, #12]
   149b8:	b910      	cbnz	r0, 149c0 <flash_area_open+0x34>
		return -ENODEV;
   149ba:	f06f 0012 	mvn.w	r0, #18
   149be:	e7f1      	b.n	149a4 <flash_area_open+0x18>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   149c0:	f01a f97f 	bl	2ecc2 <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   149c4:	2800      	cmp	r0, #0
   149c6:	d0f8      	beq.n	149ba <flash_area_open+0x2e>
	*fap = area;
   149c8:	602c      	str	r4, [r5, #0]
	return 0;
   149ca:	2000      	movs	r0, #0
   149cc:	e7ea      	b.n	149a4 <flash_area_open+0x18>
		return -EACCES;
   149ce:	f06f 000c 	mvn.w	r0, #12
   149d2:	e7e7      	b.n	149a4 <flash_area_open+0x18>
   149d4:	200004fc 	.word	0x200004fc
   149d8:	0002ff4c 	.word	0x0002ff4c

000149dc <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   149dc:	b570      	push	{r4, r5, r6, lr}
   149de:	b088      	sub	sp, #32
   149e0:	4605      	mov	r5, r0
   149e2:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   149e4:	b2c0      	uxtb	r0, r0
   149e6:	4669      	mov	r1, sp
{
   149e8:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   149ea:	f7ff ffcf 	bl	1498c <flash_area_open>
	if (rc < 0 || fa == NULL) {
   149ee:	2800      	cmp	r0, #0
   149f0:	db1b      	blt.n	14a2a <flash_area_get_sectors+0x4e>
   149f2:	9800      	ldr	r0, [sp, #0]
   149f4:	b1c8      	cbz	r0, 14a2a <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
   149f6:	6843      	ldr	r3, [r0, #4]
   149f8:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   149fa:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   149fc:	6822      	ldr	r2, [r4, #0]
	cb_data->area_idx = idx;
   149fe:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   14a00:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   14a04:	2300      	movs	r3, #0
	cb_data->status = 0;
   14a06:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   14a0a:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
   14a0c:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
   14a0e:	f015 fe11 	bl	2a634 <flash_area_close>
	if (flash_dev == NULL) {
   14a12:	b16d      	cbz	r5, 14a30 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
   14a14:	4628      	mov	r0, r5
   14a16:	4908      	ldr	r1, [pc, #32]	; (14a38 <flash_area_get_sectors+0x5c>)
   14a18:	aa01      	add	r2, sp, #4
   14a1a:	f019 fecf 	bl	2e7bc <flash_page_foreach>
	if (cb_data->status == 0) {
   14a1e:	9807      	ldr	r0, [sp, #28]
   14a20:	b908      	cbnz	r0, 14a26 <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
   14a22:	9b05      	ldr	r3, [sp, #20]
   14a24:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   14a26:	b008      	add	sp, #32
   14a28:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   14a2a:	f06f 0015 	mvn.w	r0, #21
   14a2e:	e7fa      	b.n	14a26 <flash_area_get_sectors+0x4a>
		return -ENODEV;
   14a30:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   14a34:	e7f7      	b.n	14a26 <flash_area_get_sectors+0x4a>
   14a36:	bf00      	nop
   14a38:	0002a637 	.word	0x0002a637

00014a3c <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   14a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   14a40:	4b0f      	ldr	r3, [pc, #60]	; (14a80 <settings_save_one+0x44>)
   14a42:	681c      	ldr	r4, [r3, #0]
{
   14a44:	4605      	mov	r5, r0
   14a46:	460e      	mov	r6, r1
   14a48:	4617      	mov	r7, r2
	if (!cs) {
   14a4a:	b1ac      	cbz	r4, 14a78 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   14a4c:	f04f 32ff 	mov.w	r2, #4294967295
   14a50:	f04f 33ff 	mov.w	r3, #4294967295
   14a54:	480b      	ldr	r0, [pc, #44]	; (14a84 <settings_save_one+0x48>)
   14a56:	f010 fb9d 	bl	25194 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   14a5a:	6863      	ldr	r3, [r4, #4]
   14a5c:	4632      	mov	r2, r6
   14a5e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   14a62:	4629      	mov	r1, r5
   14a64:	463b      	mov	r3, r7
   14a66:	4620      	mov	r0, r4
   14a68:	47c0      	blx	r8
   14a6a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   14a6c:	4805      	ldr	r0, [pc, #20]	; (14a84 <settings_save_one+0x48>)
   14a6e:	f010 fc0b 	bl	25288 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   14a72:	4620      	mov	r0, r4
   14a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   14a78:	f06f 0401 	mvn.w	r4, #1
   14a7c:	e7f9      	b.n	14a72 <settings_save_one+0x36>
   14a7e:	bf00      	nop
   14a80:	20002e0c 	.word	0x20002e0c
   14a84:	20000948 	.word	0x20000948

00014a88 <settings_src_register>:
	parent->next = child;
   14a88:	2300      	movs	r3, #0
   14a8a:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   14a8c:	4b04      	ldr	r3, [pc, #16]	; (14aa0 <settings_src_register+0x18>)
   14a8e:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   14a90:	b912      	cbnz	r2, 14a98 <settings_src_register+0x10>
	list->head = node;
   14a92:	e9c3 0000 	strd	r0, r0, [r3]
}
   14a96:	4770      	bx	lr
	parent->next = child;
   14a98:	6010      	str	r0, [r2, #0]
	list->tail = node;
   14a9a:	6058      	str	r0, [r3, #4]
}
   14a9c:	4770      	bx	lr
   14a9e:	bf00      	nop
   14aa0:	20002e10 	.word	0x20002e10

00014aa4 <settings_dst_register>:
	settings_save_dst = cs;
   14aa4:	4b01      	ldr	r3, [pc, #4]	; (14aac <settings_dst_register+0x8>)
   14aa6:	6018      	str	r0, [r3, #0]
}
   14aa8:	4770      	bx	lr
   14aaa:	bf00      	nop
   14aac:	20002e0c 	.word	0x20002e0c

00014ab0 <settings_load_subtree>:
{
   14ab0:	b530      	push	{r4, r5, lr}
   14ab2:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   14ab4:	2300      	movs	r3, #0
{
   14ab6:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   14ab8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   14abc:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   14abe:	f04f 33ff 	mov.w	r3, #4294967295
   14ac2:	480c      	ldr	r0, [pc, #48]	; (14af4 <settings_load_subtree+0x44>)
   14ac4:	f04f 32ff 	mov.w	r2, #4294967295
   14ac8:	f010 fb64 	bl	25194 <z_impl_k_mutex_lock>
	return list->head;
   14acc:	4b0a      	ldr	r3, [pc, #40]	; (14af8 <settings_load_subtree+0x48>)
   14ace:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   14ad0:	b94c      	cbnz	r4, 14ae6 <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
   14ad2:	4628      	mov	r0, r5
   14ad4:	f000 f8e4 	bl	14ca0 <settings_commit_subtree>
   14ad8:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   14ada:	4806      	ldr	r0, [pc, #24]	; (14af4 <settings_load_subtree+0x44>)
   14adc:	f010 fbd4 	bl	25288 <z_impl_k_mutex_unlock>
}
   14ae0:	4620      	mov	r0, r4
   14ae2:	b005      	add	sp, #20
   14ae4:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
   14ae6:	6863      	ldr	r3, [r4, #4]
   14ae8:	4620      	mov	r0, r4
   14aea:	681b      	ldr	r3, [r3, #0]
   14aec:	a901      	add	r1, sp, #4
   14aee:	4798      	blx	r3
	return node->next;
   14af0:	6824      	ldr	r4, [r4, #0]
   14af2:	e7ed      	b.n	14ad0 <settings_load_subtree+0x20>
   14af4:	20000948 	.word	0x20000948
   14af8:	20002e10 	.word	0x20002e10

00014afc <settings_load_subtree_direct>:
{
   14afc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   14afe:	e9cd 0101 	strd	r0, r1, [sp, #4]
   14b02:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   14b04:	f04f 33ff 	mov.w	r3, #4294967295
   14b08:	480a      	ldr	r0, [pc, #40]	; (14b34 <settings_load_subtree_direct+0x38>)
   14b0a:	f04f 32ff 	mov.w	r2, #4294967295
   14b0e:	f010 fb41 	bl	25194 <z_impl_k_mutex_lock>
	return list->head;
   14b12:	4b09      	ldr	r3, [pc, #36]	; (14b38 <settings_load_subtree_direct+0x3c>)
   14b14:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   14b16:	b92c      	cbnz	r4, 14b24 <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
   14b18:	4806      	ldr	r0, [pc, #24]	; (14b34 <settings_load_subtree_direct+0x38>)
   14b1a:	f010 fbb5 	bl	25288 <z_impl_k_mutex_unlock>
}
   14b1e:	4620      	mov	r0, r4
   14b20:	b004      	add	sp, #16
   14b22:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
   14b24:	6863      	ldr	r3, [r4, #4]
   14b26:	4620      	mov	r0, r4
   14b28:	681b      	ldr	r3, [r3, #0]
   14b2a:	a901      	add	r1, sp, #4
   14b2c:	4798      	blx	r3
	return node->next;
   14b2e:	6824      	ldr	r4, [r4, #0]
   14b30:	e7f1      	b.n	14b16 <settings_load_subtree_direct+0x1a>
   14b32:	bf00      	nop
   14b34:	20000948 	.word	0x20000948
   14b38:	20002e10 	.word	0x20002e10

00014b3c <settings_store_init>:
	list->head = NULL;
   14b3c:	4b02      	ldr	r3, [pc, #8]	; (14b48 <settings_store_init+0xc>)
   14b3e:	2200      	movs	r2, #0
	list->tail = NULL;
   14b40:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   14b44:	4770      	bx	lr
   14b46:	bf00      	nop
   14b48:	20002e10 	.word	0x20002e10

00014b4c <settings_init>:
	list->head = NULL;
   14b4c:	4b02      	ldr	r3, [pc, #8]	; (14b58 <settings_init+0xc>)
   14b4e:	2200      	movs	r2, #0
	list->tail = NULL;
   14b50:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   14b54:	f7ff bff2 	b.w	14b3c <settings_store_init>
   14b58:	20002e18 	.word	0x20002e18

00014b5c <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   14b5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14b60:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   14b62:	460c      	mov	r4, r1
   14b64:	b109      	cbz	r1, 14b6a <settings_parse_and_lookup+0xe>
		*next = NULL;
   14b66:	2300      	movs	r3, #0
   14b68:	600b      	str	r3, [r1, #0]
{
   14b6a:	4d1f      	ldr	r5, [pc, #124]	; (14be8 <settings_parse_and_lookup+0x8c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14b6c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 14bec <settings_parse_and_lookup+0x90>
{
   14b70:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14b72:	454d      	cmp	r5, r9
   14b74:	d30f      	bcc.n	14b96 <settings_parse_and_lookup+0x3a>
	return list->head;
   14b76:	4b1e      	ldr	r3, [pc, #120]	; (14bf0 <settings_parse_and_lookup+0x94>)
   14b78:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14b7a:	b385      	cbz	r5, 14bde <settings_parse_and_lookup+0x82>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   14b7c:	f855 8c14 	ldr.w	r8, [r5, #-20]
   14b80:	aa01      	add	r2, sp, #4
   14b82:	4641      	mov	r1, r8
   14b84:	4638      	mov	r0, r7
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14b86:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   14b88:	f015 fd7e 	bl	2a688 <settings_name_steq>
   14b8c:	b310      	cbz	r0, 14bd4 <settings_parse_and_lookup+0x78>
			continue;
		}
		if (!bestmatch) {
   14b8e:	b9d6      	cbnz	r6, 14bc6 <settings_parse_and_lookup+0x6a>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   14b90:	bb14      	cbnz	r4, 14bd8 <settings_parse_and_lookup+0x7c>
{
   14b92:	462e      	mov	r6, r5
   14b94:	e01e      	b.n	14bd4 <settings_parse_and_lookup+0x78>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   14b96:	f8d5 8000 	ldr.w	r8, [r5]
   14b9a:	aa01      	add	r2, sp, #4
   14b9c:	4641      	mov	r1, r8
   14b9e:	4638      	mov	r0, r7
   14ba0:	f015 fd72 	bl	2a688 <settings_name_steq>
   14ba4:	b150      	cbz	r0, 14bbc <settings_parse_and_lookup+0x60>
		if (!bestmatch) {
   14ba6:	b916      	cbnz	r6, 14bae <settings_parse_and_lookup+0x52>
			if (next) {
   14ba8:	b954      	cbnz	r4, 14bc0 <settings_parse_and_lookup+0x64>
{
   14baa:	462e      	mov	r6, r5
   14bac:	e006      	b.n	14bbc <settings_parse_and_lookup+0x60>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   14bae:	6831      	ldr	r1, [r6, #0]
   14bb0:	2200      	movs	r2, #0
   14bb2:	4640      	mov	r0, r8
   14bb4:	f015 fd68 	bl	2a688 <settings_name_steq>
   14bb8:	2800      	cmp	r0, #0
   14bba:	d1f5      	bne.n	14ba8 <settings_parse_and_lookup+0x4c>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14bbc:	3514      	adds	r5, #20
   14bbe:	e7d8      	b.n	14b72 <settings_parse_and_lookup+0x16>
				*next = tmpnext;
   14bc0:	9b01      	ldr	r3, [sp, #4]
   14bc2:	6023      	str	r3, [r4, #0]
   14bc4:	e7f1      	b.n	14baa <settings_parse_and_lookup+0x4e>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   14bc6:	6831      	ldr	r1, [r6, #0]
   14bc8:	2200      	movs	r2, #0
   14bca:	4640      	mov	r0, r8
   14bcc:	f015 fd5c 	bl	2a688 <settings_name_steq>
   14bd0:	2800      	cmp	r0, #0
   14bd2:	d1dd      	bne.n	14b90 <settings_parse_and_lookup+0x34>
	return node->next;
   14bd4:	696d      	ldr	r5, [r5, #20]
   14bd6:	e7d0      	b.n	14b7a <settings_parse_and_lookup+0x1e>
				*next = tmpnext;
   14bd8:	9b01      	ldr	r3, [sp, #4]
   14bda:	6023      	str	r3, [r4, #0]
   14bdc:	e7d9      	b.n	14b92 <settings_parse_and_lookup+0x36>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   14bde:	4630      	mov	r0, r6
   14be0:	b003      	add	sp, #12
   14be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14be6:	bf00      	nop
   14be8:	0002fd34 	.word	0x0002fd34
   14bec:	0002fdac 	.word	0x0002fdac
   14bf0:	20002e18 	.word	0x20002e18

00014bf4 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   14bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14bf8:	b084      	sub	sp, #16
   14bfa:	af02      	add	r7, sp, #8
   14bfc:	4604      	mov	r4, r0
   14bfe:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
	int rc;
	const char *name_key = name;
   14c02:	6078      	str	r0, [r7, #4]
{
   14c04:	460d      	mov	r5, r1
   14c06:	4616      	mov	r6, r2
   14c08:	4698      	mov	r8, r3

	if (load_arg && load_arg->subtree &&
   14c0a:	f1b9 0f00 	cmp.w	r9, #0
   14c0e:	d007      	beq.n	14c20 <settings_call_set_handler+0x2c>
   14c10:	f8d9 1000 	ldr.w	r1, [r9]
   14c14:	bb41      	cbnz	r1, 14c68 <settings_call_set_handler+0x74>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
   14c16:	f8d9 a004 	ldr.w	sl, [r9, #4]
   14c1a:	f1ba 0f00 	cmp.w	sl, #0
   14c1e:	d12a      	bne.n	14c76 <settings_call_set_handler+0x82>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
	} else {
		struct settings_handler_static *ch;

		ch = settings_parse_and_lookup(name, &name_key);
   14c20:	1d39      	adds	r1, r7, #4
   14c22:	4620      	mov	r0, r4
   14c24:	f7ff ff9a 	bl	14b5c <settings_parse_and_lookup>
		if (!ch) {
   14c28:	b318      	cbz	r0, 14c72 <settings_call_set_handler+0x7e>
			return 0;
		}

		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   14c2a:	f8d0 9008 	ldr.w	r9, [r0, #8]
   14c2e:	6878      	ldr	r0, [r7, #4]
   14c30:	4643      	mov	r3, r8
   14c32:	4632      	mov	r2, r6
   14c34:	4629      	mov	r1, r5
   14c36:	47c8      	blx	r9

		if (rc != 0) {
   14c38:	b1d8      	cbz	r0, 14c72 <settings_call_set_handler+0x7e>
			LOG_ERR("set-value failure. key: %s error(%d)",
   14c3a:	466d      	mov	r5, sp
   14c3c:	b08a      	sub	sp, #40	; 0x28
   14c3e:	aa02      	add	r2, sp, #8
   14c40:	4b13      	ldr	r3, [pc, #76]	; (14c90 <settings_call_set_handler+0x9c>)
   14c42:	6153      	str	r3, [r2, #20]
   14c44:	4b13      	ldr	r3, [pc, #76]	; (14c94 <settings_call_set_handler+0xa0>)
   14c46:	6210      	str	r0, [r2, #32]
   14c48:	e9c2 3406 	strd	r3, r4, [r2, #24]
   14c4c:	f240 3301 	movw	r3, #769	; 0x301
   14c50:	8493      	strh	r3, [r2, #36]	; 0x24
   14c52:	4b11      	ldr	r3, [pc, #68]	; (14c98 <settings_call_set_handler+0xa4>)
   14c54:	f842 3f10 	str.w	r3, [r2, #16]!
   14c58:	4810      	ldr	r0, [pc, #64]	; (14c9c <settings_call_set_handler+0xa8>)
   14c5a:	2300      	movs	r3, #0
   14c5c:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   14c60:	f7ff f9e6 	bl	14030 <z_impl_z_log_msg_static_create>
   14c64:	46ad      	mov	sp, r5
				name, rc);
			/* Ignoring the error */
			rc = 0;
   14c66:	e004      	b.n	14c72 <settings_call_set_handler+0x7e>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   14c68:	1d3a      	adds	r2, r7, #4
   14c6a:	f015 fd0d 	bl	2a688 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   14c6e:	2800      	cmp	r0, #0
   14c70:	d1d1      	bne.n	14c16 <settings_call_set_handler+0x22>
		return 0;
   14c72:	2000      	movs	r0, #0
   14c74:	e007      	b.n	14c86 <settings_call_set_handler+0x92>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   14c76:	f8d9 3008 	ldr.w	r3, [r9, #8]
   14c7a:	9300      	str	r3, [sp, #0]
   14c7c:	6878      	ldr	r0, [r7, #4]
   14c7e:	4643      	mov	r3, r8
   14c80:	4632      	mov	r2, r6
   14c82:	4629      	mov	r1, r5
   14c84:	47d0      	blx	sl
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   14c86:	3708      	adds	r7, #8
   14c88:	46bd      	mov	sp, r7
   14c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14c8e:	bf00      	nop
   14c90:	0003166f 	.word	0x0003166f
   14c94:	00031698 	.word	0x00031698
   14c98:	01000005 	.word	0x01000005
   14c9c:	0002fcfc 	.word	0x0002fcfc

00014ca0 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   14ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14ca2:	4c18      	ldr	r4, [pc, #96]	; (14d04 <settings_commit_subtree+0x64>)
   14ca4:	4f18      	ldr	r7, [pc, #96]	; (14d08 <settings_commit_subtree+0x68>)
{
   14ca6:	4606      	mov	r6, r0
	rc = 0;
   14ca8:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14caa:	42bc      	cmp	r4, r7
   14cac:	d308      	bcc.n	14cc0 <settings_commit_subtree+0x20>
	return list->head;
   14cae:	4b17      	ldr	r3, [pc, #92]	; (14d0c <settings_commit_subtree+0x6c>)
   14cb0:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14cb2:	b32c      	cbz	r4, 14d00 <settings_commit_subtree+0x60>
   14cb4:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14cb6:	b9b6      	cbnz	r6, 14ce6 <settings_commit_subtree+0x46>
			continue;
		}
		if (ch->h_commit) {
   14cb8:	68e3      	ldr	r3, [r4, #12]
   14cba:	b9e3      	cbnz	r3, 14cf6 <settings_commit_subtree+0x56>
	return node->next;
   14cbc:	6964      	ldr	r4, [r4, #20]
   14cbe:	e7f8      	b.n	14cb2 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14cc0:	b92e      	cbnz	r6, 14cce <settings_commit_subtree+0x2e>
		if (ch->h_commit) {
   14cc2:	68e3      	ldr	r3, [r4, #12]
   14cc4:	b95b      	cbnz	r3, 14cde <settings_commit_subtree+0x3e>
{
   14cc6:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14cc8:	3414      	adds	r4, #20
   14cca:	4605      	mov	r5, r0
   14ccc:	e7ed      	b.n	14caa <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14cce:	6820      	ldr	r0, [r4, #0]
   14cd0:	2200      	movs	r2, #0
   14cd2:	4631      	mov	r1, r6
   14cd4:	f015 fcd8 	bl	2a688 <settings_name_steq>
   14cd8:	2800      	cmp	r0, #0
   14cda:	d1f2      	bne.n	14cc2 <settings_commit_subtree+0x22>
   14cdc:	e7f3      	b.n	14cc6 <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   14cde:	4798      	blx	r3
			if (!rc) {
   14ce0:	2d00      	cmp	r5, #0
   14ce2:	d1f0      	bne.n	14cc6 <settings_commit_subtree+0x26>
   14ce4:	e7f0      	b.n	14cc8 <settings_commit_subtree+0x28>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14ce6:	6820      	ldr	r0, [r4, #0]
   14ce8:	2200      	movs	r2, #0
   14cea:	4631      	mov	r1, r6
   14cec:	f015 fccc 	bl	2a688 <settings_name_steq>
   14cf0:	2800      	cmp	r0, #0
   14cf2:	d1e1      	bne.n	14cb8 <settings_commit_subtree+0x18>
   14cf4:	e7e2      	b.n	14cbc <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
   14cf6:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   14cf8:	2d00      	cmp	r5, #0
   14cfa:	bf08      	it	eq
   14cfc:	4605      	moveq	r5, r0
   14cfe:	e7dd      	b.n	14cbc <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   14d00:	4628      	mov	r0, r5
   14d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14d04:	0002fd34 	.word	0x0002fd34
   14d08:	0002fdac 	.word	0x0002fdac
   14d0c:	20002e18 	.word	0x20002e18

00014d10 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   14d10:	b538      	push	{r3, r4, r5, lr}

	int err = 0;

	k_mutex_lock(&settings_lock, K_FOREVER);

	if (!settings_subsys_initialized) {
   14d12:	4d0c      	ldr	r5, [pc, #48]	; (14d44 <settings_subsys_init+0x34>)
	return z_impl_k_mutex_lock(mutex, timeout);
   14d14:	480c      	ldr	r0, [pc, #48]	; (14d48 <settings_subsys_init+0x38>)
   14d16:	f04f 33ff 	mov.w	r3, #4294967295
   14d1a:	f04f 32ff 	mov.w	r2, #4294967295
   14d1e:	f010 fa39 	bl	25194 <z_impl_k_mutex_lock>
   14d22:	782b      	ldrb	r3, [r5, #0]
   14d24:	b93b      	cbnz	r3, 14d36 <settings_subsys_init+0x26>
		settings_init();
   14d26:	f7ff ff11 	bl	14b4c <settings_init>

		err = settings_backend_init();
   14d2a:	f000 f86d 	bl	14e08 <settings_backend_init>

		if (!err) {
   14d2e:	4604      	mov	r4, r0
   14d30:	b910      	cbnz	r0, 14d38 <settings_subsys_init+0x28>
			settings_subsys_initialized = true;
   14d32:	2301      	movs	r3, #1
   14d34:	702b      	strb	r3, [r5, #0]
	int err = 0;
   14d36:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   14d38:	4803      	ldr	r0, [pc, #12]	; (14d48 <settings_subsys_init+0x38>)
   14d3a:	f010 faa5 	bl	25288 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&settings_lock);

	return err;
}
   14d3e:	4620      	mov	r0, r4
   14d40:	bd38      	pop	{r3, r4, r5, pc}
   14d42:	bf00      	nop
   14d44:	20004344 	.word	0x20004344
   14d48:	20000948 	.word	0x20000948

00014d4c <settings_nvs_load>:
}
#endif /* CONFIG_SETTINGS_NVS_NAME_CACHE */

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   14d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   14d50:	8f04      	ldrh	r4, [r0, #56]	; 0x38

#if CONFIG_SETTINGS_NVS_NAME_CACHE
		settings_nvs_cache_add(cf, name, name_id);
#endif

		ret = settings_call_set_handler(
   14d52:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 14e04 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   14d56:	3401      	adds	r4, #1
{
   14d58:	b098      	sub	sp, #96	; 0x60
   14d5a:	4680      	mov	r8, r0
   14d5c:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   14d5e:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   14d60:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   14d64:	1e65      	subs	r5, r4, #1
   14d66:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   14d68:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   14d6c:	d047      	beq.n	14dfe <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   14d6e:	234a      	movs	r3, #74	; 0x4a
   14d70:	aa05      	add	r2, sp, #20
   14d72:	4629      	mov	r1, r5
   14d74:	4630      	mov	r0, r6
   14d76:	f015 fba8 	bl	2a4ca <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   14d7a:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   14d7e:	343f      	adds	r4, #63	; 0x3f
   14d80:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   14d82:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   14d84:	4621      	mov	r1, r4
   14d86:	2301      	movs	r3, #1
   14d88:	f10d 020b 	add.w	r2, sp, #11
   14d8c:	4630      	mov	r0, r6
   14d8e:	f015 fb9c 	bl	2a4ca <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   14d92:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   14d94:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   14d96:	dc03      	bgt.n	14da0 <settings_nvs_load+0x54>
   14d98:	2800      	cmp	r0, #0
   14d9a:	dc03      	bgt.n	14da4 <settings_nvs_load+0x58>
{
   14d9c:	462c      	mov	r4, r5
   14d9e:	e7e1      	b.n	14d64 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   14da0:	2800      	cmp	r0, #0
   14da2:	dc16      	bgt.n	14dd2 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   14da4:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   14da8:	42ab      	cmp	r3, r5
   14daa:	d109      	bne.n	14dc0 <settings_nvs_load+0x74>
				cf->last_name_id--;
   14dac:	4642      	mov	r2, r8
   14dae:	1e6b      	subs	r3, r5, #1
   14db0:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   14db4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   14db8:	2302      	movs	r3, #2
   14dba:	4630      	mov	r0, r6
   14dbc:	f7fe fd44 	bl	13848 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   14dc0:	4629      	mov	r1, r5
   14dc2:	4630      	mov	r0, r6
   14dc4:	f015 fb7d 	bl	2a4c2 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   14dc8:	4621      	mov	r1, r4
   14dca:	4630      	mov	r0, r6
   14dcc:	f015 fb79 	bl	2a4c2 <nvs_delete>
			continue;
   14dd0:	e7e4      	b.n	14d9c <settings_nvs_load+0x50>
		name[rc1] = '\0';
   14dd2:	f107 0360 	add.w	r3, r7, #96	; 0x60
   14dd6:	eb0d 0703 	add.w	r7, sp, r3
   14dda:	2300      	movs	r3, #0
   14ddc:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   14de0:	4652      	mov	r2, sl
   14de2:	f8cd 9000 	str.w	r9, [sp]
   14de6:	ab03      	add	r3, sp, #12
   14de8:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   14dea:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   14dec:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   14df0:	f7ff ff00 	bl	14bf4 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   14df4:	2800      	cmp	r0, #0
   14df6:	d0d1      	beq.n	14d9c <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   14df8:	b018      	add	sp, #96	; 0x60
   14dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14dfe:	2000      	movs	r0, #0
	return ret;
   14e00:	e7fa      	b.n	14df8 <settings_nvs_load+0xac>
   14e02:	bf00      	nop
   14e04:	0002a6f9 	.word	0x0002a6f9

00014e08 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   14e08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   14e0a:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   14e0c:	4669      	mov	r1, sp
   14e0e:	2003      	movs	r0, #3
	uint32_t sector_cnt = 1;
   14e10:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   14e12:	f7ff fdbb 	bl	1498c <flash_area_open>
	if (rc) {
   14e16:	4604      	mov	r4, r0
   14e18:	bb60      	cbnz	r0, 14e74 <settings_backend_init+0x6c>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   14e1a:	aa02      	add	r2, sp, #8
   14e1c:	a901      	add	r1, sp, #4
   14e1e:	2003      	movs	r0, #3
   14e20:	f7ff fddc 	bl	149dc <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc != 0 && rc != -ENOMEM) {
   14e24:	4604      	mov	r4, r0
   14e26:	b110      	cbz	r0, 14e2e <settings_backend_init+0x26>
   14e28:	f110 0f0c 	cmn.w	r0, #12
   14e2c:	d122      	bne.n	14e74 <settings_backend_init+0x6c>
		return rc;
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   14e2e:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   14e30:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   14e34:	d223      	bcs.n	14e7e <settings_backend_init+0x76>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   14e36:	9a00      	ldr	r2, [sp, #0]
   14e38:	2300      	movs	r3, #0
   14e3a:	6894      	ldr	r4, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   14e3c:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   14e3e:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   14e40:	4284      	cmp	r4, r0
   14e42:	d31a      	bcc.n	14e7a <settings_backend_init+0x72>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   14e44:	3301      	adds	r3, #1
   14e46:	2b08      	cmp	r3, #8
   14e48:	d1f9      	bne.n	14e3e <settings_backend_init+0x36>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   14e4a:	4d0e      	ldr	r5, [pc, #56]	; (14e84 <settings_backend_init+0x7c>)
   14e4c:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   14e4e:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   14e50:	6853      	ldr	r3, [r2, #4]
   14e52:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   14e54:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev = fa->fa_dev;
   14e56:	68d3      	ldr	r3, [r2, #12]
   14e58:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   14e5a:	f015 fce7 	bl	2a82c <settings_nvs_backend_init>
	if (rc) {
   14e5e:	4604      	mov	r4, r0
   14e60:	b940      	cbnz	r0, 14e74 <settings_backend_init+0x6c>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   14e62:	4e09      	ldr	r6, [pc, #36]	; (14e88 <settings_backend_init+0x80>)
   14e64:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   14e66:	4628      	mov	r0, r5
   14e68:	f7ff fe0e 	bl	14a88 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   14e6c:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   14e6e:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   14e70:	f7ff fe18 	bl	14aa4 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   14e74:	4620      	mov	r0, r4
   14e76:	b004      	add	sp, #16
   14e78:	bd70      	pop	{r4, r5, r6, pc}
   14e7a:	b29b      	uxth	r3, r3
   14e7c:	e7e5      	b.n	14e4a <settings_backend_init+0x42>
		return -EDOM;
   14e7e:	f06f 0420 	mvn.w	r4, #32
   14e82:	e7f7      	b.n	14e74 <settings_backend_init+0x6c>
   14e84:	20002e20 	.word	0x20002e20
   14e88:	20000500 	.word	0x20000500

00014e8c <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   14e8c:	4b01      	ldr	r3, [pc, #4]	; (14e94 <uECC_get_rng+0x8>)
   14e8e:	6818      	ldr	r0, [r3, #0]
   14e90:	4770      	bx	lr
   14e92:	bf00      	nop
   14e94:	20000514 	.word	0x20000514

00014e98 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   14e98:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   14e9a:	2208      	movs	r2, #8
{
   14e9c:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   14e9e:	f015 fe9c 	bl	2abda <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   14ea2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   14ea4:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   14ea6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   14ea8:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   14eaa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   14eac:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   14eae:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   14eb0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   14eb2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   14eb4:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   14eb6:	4613      	mov	r3, r2
   14eb8:	466a      	mov	r2, sp
{
   14eba:	460c      	mov	r4, r1
   14ebc:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
   14ebe:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   14ec0:	4611      	mov	r1, r2
   14ec2:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
   14ec4:	e9cd 7701 	strd	r7, r7, [sp, #4]
   14ec8:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   14eca:	f015 fd94 	bl	2a9f6 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14ece:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   14ed0:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14ed2:	4630      	mov	r0, r6
   14ed4:	f015 fd8f 	bl	2a9f6 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   14ed8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   14eda:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
   14edc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14ede:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
   14ee0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   14ee2:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
   14ee4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14ee6:	4405      	add	r5, r0
	tmp[7] = 0;
   14ee8:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   14eec:	4610      	mov	r0, r2
   14eee:	4611      	mov	r1, r2
   14ef0:	f015 fd81 	bl	2a9f6 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14ef4:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   14ef6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14ef8:	4630      	mov	r0, r6
   14efa:	f015 fd7c 	bl	2a9f6 <uECC_vli_add>
   14efe:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
   14f00:	6a20      	ldr	r0, [r4, #32]
   14f02:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
   14f04:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14f06:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
   14f08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   14f0a:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   14f0c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   14f0e:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
   14f10:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   14f12:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14f14:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   14f16:	e9cd 7704 	strd	r7, r7, [sp, #16]
   14f1a:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14f1c:	f015 fd6b 	bl	2a9f6 <uECC_vli_add>
   14f20:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
   14f22:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14f24:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
   14f26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   14f28:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
   14f2c:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
   14f2e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   14f30:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
   14f32:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
   14f36:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
   14f38:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   14f3c:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
   14f3e:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
   14f42:	6a20      	ldr	r0, [r4, #32]
   14f44:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14f46:	4630      	mov	r0, r6
   14f48:	f015 fd55 	bl	2a9f6 <uECC_vli_add>
   14f4c:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
   14f4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   14f50:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
   14f52:	6b20      	ldr	r0, [r4, #48]	; 0x30
   14f54:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
   14f56:	6b60      	ldr	r0, [r4, #52]	; 0x34
   14f58:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   14f5a:	6a20      	ldr	r0, [r4, #32]
   14f5c:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
   14f5e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   14f60:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   14f62:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   14f64:	e9cd 7704 	strd	r7, r7, [sp, #16]
   14f68:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   14f6a:	f015 fe69 	bl	2ac40 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   14f6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14f70:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   14f72:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14f74:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   14f76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14f78:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   14f7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14f7c:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   14f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14f80:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   14f82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14f84:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   14f86:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   14f88:	2308      	movs	r3, #8
   14f8a:	4630      	mov	r0, r6
   14f8c:	f015 fe58 	bl	2ac40 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   14f90:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14f92:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   14f94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14f96:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   14f98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14f9a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   14f9c:	6a23      	ldr	r3, [r4, #32]
   14f9e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   14fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14fa2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   14fa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   14fa6:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   14faa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14fac:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   14fae:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   14fb0:	2308      	movs	r3, #8
   14fb2:	4630      	mov	r0, r6
   14fb4:	f015 fe44 	bl	2ac40 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   14fb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14fba:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   14fbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   14fbe:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   14fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14fc4:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   14fc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14fc8:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   14fca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14fcc:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
	tmp[7] = product[13];
   14fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14fd0:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   14fd2:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   14fd4:	2308      	movs	r3, #8
   14fd6:	4630      	mov	r0, r6
   14fd8:	f015 fe32 	bl	2ac40 <uECC_vli_sub>

	if (carry < 0) {
   14fdc:	1a2d      	subs	r5, r5, r0
   14fde:	d410      	bmi.n	15002 <vli_mmod_fast_secp256r1+0x16a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   14fe0:	4c0d      	ldr	r4, [pc, #52]	; (15018 <vli_mmod_fast_secp256r1+0x180>)
		while (carry || 
   14fe2:	b935      	cbnz	r5, 14ff2 <vli_mmod_fast_secp256r1+0x15a>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   14fe4:	2208      	movs	r2, #8
   14fe6:	4631      	mov	r1, r6
   14fe8:	4620      	mov	r0, r4
   14fea:	f015 fe02 	bl	2abf2 <uECC_vli_cmp_unsafe>
		while (carry || 
   14fee:	2801      	cmp	r0, #1
   14ff0:	d00f      	beq.n	15012 <vli_mmod_fast_secp256r1+0x17a>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   14ff2:	2308      	movs	r3, #8
   14ff4:	4622      	mov	r2, r4
   14ff6:	4631      	mov	r1, r6
   14ff8:	4630      	mov	r0, r6
   14ffa:	f015 fe21 	bl	2ac40 <uECC_vli_sub>
   14ffe:	1a2d      	subs	r5, r5, r0
   15000:	e7ef      	b.n	14fe2 <vli_mmod_fast_secp256r1+0x14a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   15002:	4a05      	ldr	r2, [pc, #20]	; (15018 <vli_mmod_fast_secp256r1+0x180>)
   15004:	2308      	movs	r3, #8
   15006:	4631      	mov	r1, r6
   15008:	4630      	mov	r0, r6
   1500a:	f015 fcf4 	bl	2a9f6 <uECC_vli_add>
		while (carry < 0);
   1500e:	182d      	adds	r5, r5, r0
   15010:	d4f8      	bmi.n	15004 <vli_mmod_fast_secp256r1+0x16c>
		}
	}
}
   15012:	b009      	add	sp, #36	; 0x24
   15014:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15016:	bf00      	nop
   15018:	0002ff94 	.word	0x0002ff94

0001501c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   1501c:	4904      	ldr	r1, [pc, #16]	; (15030 <sub_bytes+0x14>)
   1501e:	1e43      	subs	r3, r0, #1
   15020:	300f      	adds	r0, #15
   15022:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   15026:	5c8a      	ldrb	r2, [r1, r2]
   15028:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1502a:	4283      	cmp	r3, r0
   1502c:	d1f9      	bne.n	15022 <sub_bytes+0x6>
	}
}
   1502e:	4770      	bx	lr
   15030:	000316c3 	.word	0x000316c3

00015034 <tc_aes128_set_encrypt_key>:
{
   15034:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   15036:	4e26      	ldr	r6, [pc, #152]	; (150d0 <tc_aes128_set_encrypt_key+0x9c>)
{
   15038:	4607      	mov	r7, r0
   1503a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   1503c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   1503e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   15040:	ad01      	add	r5, sp, #4
   15042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15044:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   15046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15048:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1504c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   15050:	4638      	mov	r0, r7
   15052:	2f00      	cmp	r7, #0
   15054:	d038      	beq.n	150c8 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   15056:	2c00      	cmp	r4, #0
   15058:	d038      	beq.n	150cc <tc_aes128_set_encrypt_key+0x98>
   1505a:	1f38      	subs	r0, r7, #4
   1505c:	4621      	mov	r1, r4
   1505e:	4602      	mov	r2, r0
   15060:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   15062:	784b      	ldrb	r3, [r1, #1]
   15064:	780d      	ldrb	r5, [r1, #0]
   15066:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   15068:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   1506c:	78cd      	ldrb	r5, [r1, #3]
   1506e:	432b      	orrs	r3, r5
   15070:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   15072:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   15074:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   15078:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1507a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1507e:	d1f0      	bne.n	15062 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   15080:	4c14      	ldr	r4, [pc, #80]	; (150d4 <tc_aes128_set_encrypt_key+0xa0>)
   15082:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   15084:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   15086:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   15088:	d116      	bne.n	150b8 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1508a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1508e:	5ca5      	ldrb	r5, [r4, r2]
   15090:	0e1a      	lsrs	r2, r3, #24
   15092:	5ca2      	ldrb	r2, [r4, r2]
   15094:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   15098:	f3c3 2507 	ubfx	r5, r3, #8, #8
   1509c:	b2db      	uxtb	r3, r3
   1509e:	5d65      	ldrb	r5, [r4, r5]
   150a0:	5ce3      	ldrb	r3, [r4, r3]
   150a2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   150a6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   150aa:	f021 0303 	bic.w	r3, r1, #3
   150ae:	3330      	adds	r3, #48	; 0x30
   150b0:	446b      	add	r3, sp
   150b2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   150b6:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   150b8:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   150bc:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   150be:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   150c0:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   150c2:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   150c4:	d1de      	bne.n	15084 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   150c6:	2001      	movs	r0, #1
}
   150c8:	b00d      	add	sp, #52	; 0x34
   150ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   150cc:	4620      	mov	r0, r4
   150ce:	e7fb      	b.n	150c8 <tc_aes128_set_encrypt_key+0x94>
   150d0:	0002fdf8 	.word	0x0002fdf8
   150d4:	000316c3 	.word	0x000316c3

000150d8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   150d8:	4801      	ldr	r0, [pc, #4]	; (150e0 <nrf_cc3xx_platform_abort_init+0x8>)
   150da:	f011 bd31 	b.w	26b40 <nrf_cc3xx_platform_set_abort>
   150de:	bf00      	nop
   150e0:	00030040 	.word	0x00030040

000150e4 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   150e4:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   150e6:	4604      	mov	r4, r0
   150e8:	b918      	cbnz	r0, 150f2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   150ea:	4b0f      	ldr	r3, [pc, #60]	; (15128 <mutex_free_platform+0x44>)
   150ec:	480f      	ldr	r0, [pc, #60]	; (1512c <mutex_free_platform+0x48>)
   150ee:	685b      	ldr	r3, [r3, #4]
   150f0:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   150f2:	6861      	ldr	r1, [r4, #4]
   150f4:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   150f8:	d00f      	beq.n	1511a <mutex_free_platform+0x36>
   150fa:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   150fe:	d00c      	beq.n	1511a <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   15100:	4d0b      	ldr	r5, [pc, #44]	; (15130 <mutex_free_platform+0x4c>)
   15102:	42a9      	cmp	r1, r5
   15104:	d009      	beq.n	1511a <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   15106:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   1510a:	d007      	beq.n	1511c <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   1510c:	4809      	ldr	r0, [pc, #36]	; (15134 <mutex_free_platform+0x50>)
   1510e:	4621      	mov	r1, r4
   15110:	f019 fe7c 	bl	2ee0c <k_mem_slab_free>
        mutex->mutex = NULL;
   15114:	2300      	movs	r3, #0
   15116:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   15118:	6065      	str	r5, [r4, #4]
}
   1511a:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   1511c:	6820      	ldr	r0, [r4, #0]
   1511e:	2214      	movs	r2, #20
   15120:	f016 fdc9 	bl	2bcb6 <memset>
   15124:	e7f8      	b.n	15118 <mutex_free_platform+0x34>
   15126:	bf00      	nop
   15128:	20000764 	.word	0x20000764
   1512c:	000317c3 	.word	0x000317c3
   15130:	a95c5f2c 	.word	0xa95c5f2c
   15134:	20003360 	.word	0x20003360

00015138 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   15138:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   1513a:	b320      	cbz	r0, 15186 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   1513c:	6843      	ldr	r3, [r0, #4]
   1513e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   15142:	d110      	bne.n	15166 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15144:	2201      	movs	r2, #1
   15146:	6803      	ldr	r3, [r0, #0]
   15148:	f3bf 8f5b 	dmb	ish
   1514c:	e853 1f00 	ldrex	r1, [r3]
   15150:	2900      	cmp	r1, #0
   15152:	d103      	bne.n	1515c <mutex_lock_platform+0x24>
   15154:	e843 2000 	strex	r0, r2, [r3]
   15158:	2800      	cmp	r0, #0
   1515a:	d1f7      	bne.n	1514c <mutex_lock_platform+0x14>
   1515c:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   15160:	d10d      	bne.n	1517e <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   15162:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   15164:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   15166:	4a09      	ldr	r2, [pc, #36]	; (1518c <mutex_lock_platform+0x54>)
   15168:	4293      	cmp	r3, r2
   1516a:	d00a      	beq.n	15182 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   1516c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1516e:	f04f 32ff 	mov.w	r2, #4294967295
   15172:	f04f 33ff 	mov.w	r3, #4294967295
   15176:	f010 f80d 	bl	25194 <z_impl_k_mutex_lock>
        if (ret == 0) {
   1517a:	2800      	cmp	r0, #0
   1517c:	d0f1      	beq.n	15162 <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1517e:	4804      	ldr	r0, [pc, #16]	; (15190 <mutex_lock_platform+0x58>)
   15180:	e7f0      	b.n	15164 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   15182:	4804      	ldr	r0, [pc, #16]	; (15194 <mutex_lock_platform+0x5c>)
   15184:	e7ee      	b.n	15164 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   15186:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1518a:	e7eb      	b.n	15164 <mutex_lock_platform+0x2c>
   1518c:	a95c5f2c 	.word	0xa95c5f2c
   15190:	ffff8fe9 	.word	0xffff8fe9
   15194:	ffff8fea 	.word	0xffff8fea

00015198 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   15198:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   1519a:	b1d8      	cbz	r0, 151d4 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   1519c:	6843      	ldr	r3, [r0, #4]
   1519e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   151a2:	d110      	bne.n	151c6 <mutex_unlock_platform+0x2e>
   151a4:	2200      	movs	r2, #0
   151a6:	6803      	ldr	r3, [r0, #0]
   151a8:	f3bf 8f5b 	dmb	ish
   151ac:	e853 1f00 	ldrex	r1, [r3]
   151b0:	2901      	cmp	r1, #1
   151b2:	d103      	bne.n	151bc <mutex_unlock_platform+0x24>
   151b4:	e843 2000 	strex	r0, r2, [r3]
   151b8:	2800      	cmp	r0, #0
   151ba:	d1f7      	bne.n	151ac <mutex_unlock_platform+0x14>
   151bc:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   151c0:	d10b      	bne.n	151da <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   151c2:	2000      	movs	r0, #0
    }
}
   151c4:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   151c6:	4a07      	ldr	r2, [pc, #28]	; (151e4 <mutex_unlock_platform+0x4c>)
   151c8:	4293      	cmp	r3, r2
   151ca:	d008      	beq.n	151de <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   151cc:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   151ce:	f010 f85b 	bl	25288 <z_impl_k_mutex_unlock>
   151d2:	e7f6      	b.n	151c2 <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   151d4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   151d8:	e7f4      	b.n	151c4 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   151da:	4803      	ldr	r0, [pc, #12]	; (151e8 <mutex_unlock_platform+0x50>)
   151dc:	e7f2      	b.n	151c4 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   151de:	4803      	ldr	r0, [pc, #12]	; (151ec <mutex_unlock_platform+0x54>)
   151e0:	e7f0      	b.n	151c4 <mutex_unlock_platform+0x2c>
   151e2:	bf00      	nop
   151e4:	a95c5f2c 	.word	0xa95c5f2c
   151e8:	ffff8fe9 	.word	0xffff8fe9
   151ec:	ffff8fea 	.word	0xffff8fea

000151f0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   151f0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   151f2:	4604      	mov	r4, r0
   151f4:	b918      	cbnz	r0, 151fe <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   151f6:	4b1d      	ldr	r3, [pc, #116]	; (1526c <mutex_init_platform+0x7c>)
   151f8:	481d      	ldr	r0, [pc, #116]	; (15270 <mutex_init_platform+0x80>)
   151fa:	685b      	ldr	r3, [r3, #4]
   151fc:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   151fe:	6863      	ldr	r3, [r4, #4]
   15200:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   15204:	d02f      	beq.n	15266 <mutex_init_platform+0x76>
   15206:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   1520a:	d02c      	beq.n	15266 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   1520c:	4a19      	ldr	r2, [pc, #100]	; (15274 <mutex_init_platform+0x84>)
   1520e:	4293      	cmp	r3, r2
   15210:	d119      	bne.n	15246 <mutex_init_platform+0x56>
   15212:	6823      	ldr	r3, [r4, #0]
   15214:	bb03      	cbnz	r3, 15258 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   15216:	4818      	ldr	r0, [pc, #96]	; (15278 <mutex_init_platform+0x88>)
   15218:	f04f 32ff 	mov.w	r2, #4294967295
   1521c:	f04f 33ff 	mov.w	r3, #4294967295
   15220:	4621      	mov	r1, r4
   15222:	f00f feb3 	bl	24f8c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   15226:	b908      	cbnz	r0, 1522c <mutex_init_platform+0x3c>
   15228:	6823      	ldr	r3, [r4, #0]
   1522a:	b91b      	cbnz	r3, 15234 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   1522c:	4b0f      	ldr	r3, [pc, #60]	; (1526c <mutex_init_platform+0x7c>)
   1522e:	4813      	ldr	r0, [pc, #76]	; (1527c <mutex_init_platform+0x8c>)
   15230:	685b      	ldr	r3, [r3, #4]
   15232:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   15234:	6820      	ldr	r0, [r4, #0]
   15236:	2214      	movs	r2, #20
   15238:	2100      	movs	r1, #0
   1523a:	f016 fd3c 	bl	2bcb6 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   1523e:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   15242:	6063      	str	r3, [r4, #4]
   15244:	e008      	b.n	15258 <mutex_init_platform+0x68>
    switch(flags){
   15246:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   1524a:	d80d      	bhi.n	15268 <mutex_init_platform+0x78>
   1524c:	2b3a      	cmp	r3, #58	; 0x3a
   1524e:	d003      	beq.n	15258 <mutex_init_platform+0x68>
   15250:	f640 62ba 	movw	r2, #3770	; 0xeba
   15254:	4293      	cmp	r3, r2
   15256:	d1de      	bne.n	15216 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   15258:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   1525a:	f019 fe1c 	bl	2ee96 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   1525e:	6863      	ldr	r3, [r4, #4]
   15260:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   15264:	6063      	str	r3, [r4, #4]
}
   15266:	bd10      	pop	{r4, pc}
    switch(flags){
   15268:	4a05      	ldr	r2, [pc, #20]	; (15280 <mutex_init_platform+0x90>)
   1526a:	e7f3      	b.n	15254 <mutex_init_platform+0x64>
   1526c:	20000764 	.word	0x20000764
   15270:	000317c3 	.word	0x000317c3
   15274:	a95c5f2c 	.word	0xa95c5f2c
   15278:	20003360 	.word	0x20003360
   1527c:	000317e9 	.word	0x000317e9
   15280:	3a00003a 	.word	0x3a00003a

00015284 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   15284:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   15286:	4906      	ldr	r1, [pc, #24]	; (152a0 <nrf_cc3xx_platform_mutex_init+0x1c>)
   15288:	4806      	ldr	r0, [pc, #24]	; (152a4 <nrf_cc3xx_platform_mutex_init+0x20>)
   1528a:	2340      	movs	r3, #64	; 0x40
   1528c:	2214      	movs	r2, #20
   1528e:	f019 fdaf 	bl	2edf0 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   15292:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   15296:	4904      	ldr	r1, [pc, #16]	; (152a8 <nrf_cc3xx_platform_mutex_init+0x24>)
   15298:	4804      	ldr	r0, [pc, #16]	; (152ac <nrf_cc3xx_platform_mutex_init+0x28>)
   1529a:	f011 bd15 	b.w	26cc8 <nrf_cc3xx_platform_set_mutexes>
   1529e:	bf00      	nop
   152a0:	20002e60 	.word	0x20002e60
   152a4:	20003360 	.word	0x20003360
   152a8:	00030048 	.word	0x00030048
   152ac:	0003005c 	.word	0x0003005c

000152b0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   152b0:	4901      	ldr	r1, [pc, #4]	; (152b8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   152b2:	2210      	movs	r2, #16
	str	r2, [r1]
   152b4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   152b6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   152b8:	e000ed10 	.word	0xe000ed10

000152bc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   152bc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   152be:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   152c0:	f380 8811 	msr	BASEPRI, r0
	isb
   152c4:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   152c8:	f3bf 8f4f 	dsb	sy
   152cc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   152ce:	b662      	cpsie	i
	isb
   152d0:	f3bf 8f6f 	isb	sy

	bx	lr
   152d4:	4770      	bx	lr
   152d6:	bf00      	nop

000152d8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   152d8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   152da:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   152dc:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   152e0:	f3bf 8f4f 	dsb	sy
   152e4:	bf20      	wfe

	msr	BASEPRI, r0
   152e6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   152ea:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   152ec:	4770      	bx	lr
   152ee:	bf00      	nop

000152f0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   152f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152f4:	4682      	mov	sl, r0
   152f6:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   152f8:	460c      	mov	r4, r1
   152fa:	2900      	cmp	r1, #0
   152fc:	d052      	beq.n	153a4 <z_arm_fatal_error+0xb4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   152fe:	466e      	mov	r6, sp
   15300:	b08a      	sub	sp, #40	; 0x28
   15302:	e9d1 1200 	ldrd	r1, r2, [r1]
   15306:	68a3      	ldr	r3, [r4, #8]
   15308:	466d      	mov	r5, sp
   1530a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 153b4 <z_arm_fatal_error+0xc4>
   1530e:	482a      	ldr	r0, [pc, #168]	; (153b8 <z_arm_fatal_error+0xc8>)
   15310:	6168      	str	r0, [r5, #20]
   15312:	46a8      	mov	r8, r5
   15314:	f04f 0b06 	mov.w	fp, #6
   15318:	e9c5 9106 	strd	r9, r1, [r5, #24]
   1531c:	e9c5 2308 	strd	r2, r3, [r5, #32]
   15320:	f848 bf10 	str.w	fp, [r8, #16]!
   15324:	4825      	ldr	r0, [pc, #148]	; (153bc <z_arm_fatal_error+0xcc>)
   15326:	4642      	mov	r2, r8
   15328:	2300      	movs	r3, #0
   1532a:	f44f 5141 	mov.w	r1, #12352	; 0x3040
   1532e:	f7fe fe7f 	bl	14030 <z_impl_z_log_msg_static_create>
   15332:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   15334:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   15338:	6963      	ldr	r3, [r4, #20]
   1533a:	46ad      	mov	sp, r5
   1533c:	4820      	ldr	r0, [pc, #128]	; (153c0 <z_arm_fatal_error+0xd0>)
   1533e:	626b      	str	r3, [r5, #36]	; 0x24
   15340:	e9c5 0905 	strd	r0, r9, [r5, #20]
   15344:	e9c5 1207 	strd	r1, r2, [r5, #28]
   15348:	f8c5 b010 	str.w	fp, [r5, #16]
   1534c:	481b      	ldr	r0, [pc, #108]	; (153bc <z_arm_fatal_error+0xcc>)
   1534e:	2300      	movs	r3, #0
   15350:	4642      	mov	r2, r8
   15352:	f44f 5141 	mov.w	r1, #12352	; 0x3040
   15356:	f7fe fe6b 	bl	14030 <z_impl_z_log_msg_static_create>
   1535a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1535c:	b088      	sub	sp, #32
   1535e:	69e3      	ldr	r3, [r4, #28]
   15360:	466d      	mov	r5, sp
   15362:	4a18      	ldr	r2, [pc, #96]	; (153c4 <z_arm_fatal_error+0xd4>)
   15364:	61eb      	str	r3, [r5, #28]
   15366:	46a8      	mov	r8, r5
   15368:	f04f 0b04 	mov.w	fp, #4
   1536c:	e9c5 2905 	strd	r2, r9, [r5, #20]
   15370:	f848 bf10 	str.w	fp, [r8, #16]!
   15374:	4811      	ldr	r0, [pc, #68]	; (153bc <z_arm_fatal_error+0xcc>)
   15376:	2300      	movs	r3, #0
   15378:	4642      	mov	r2, r8
   1537a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1537e:	f7fe fe57 	bl	14030 <z_impl_z_log_msg_static_create>
   15382:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   15384:	69a3      	ldr	r3, [r4, #24]
   15386:	46ad      	mov	sp, r5
   15388:	4a0f      	ldr	r2, [pc, #60]	; (153c8 <z_arm_fatal_error+0xd8>)
   1538a:	61eb      	str	r3, [r5, #28]
   1538c:	e9c5 2905 	strd	r2, r9, [r5, #20]
   15390:	f8c5 b010 	str.w	fp, [r5, #16]
   15394:	4809      	ldr	r0, [pc, #36]	; (153bc <z_arm_fatal_error+0xcc>)
   15396:	2300      	movs	r3, #0
   15398:	4642      	mov	r2, r8
   1539a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1539e:	f7fe fe47 	bl	14030 <z_impl_z_log_msg_static_create>
   153a2:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   153a4:	4621      	mov	r1, r4
   153a6:	4650      	mov	r0, sl
   153a8:	f00f fc54 	bl	24c54 <z_fatal_error>
}
   153ac:	46bd      	mov	sp, r7
   153ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153b2:	bf00      	nop
   153b4:	000318c1 	.word	0x000318c1
   153b8:	00031816 	.word	0x00031816
   153bc:	0002fce4 	.word	0x0002fce4
   153c0:	00031849 	.word	0x00031849
   153c4:	0003187c 	.word	0x0003187c
   153c8:	0003188f 	.word	0x0003188f

000153cc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   153cc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   153ce:	2800      	cmp	r0, #0
   153d0:	db07      	blt.n	153e2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   153d2:	4a04      	ldr	r2, [pc, #16]	; (153e4 <arch_irq_enable+0x18>)
   153d4:	0941      	lsrs	r1, r0, #5
   153d6:	2301      	movs	r3, #1
   153d8:	f000 001f 	and.w	r0, r0, #31
   153dc:	4083      	lsls	r3, r0
   153de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   153e2:	4770      	bx	lr
   153e4:	e000e100 	.word	0xe000e100

000153e8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   153e8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   153ea:	2800      	cmp	r0, #0
   153ec:	db0c      	blt.n	15408 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   153ee:	0943      	lsrs	r3, r0, #5
   153f0:	4906      	ldr	r1, [pc, #24]	; (1540c <arch_irq_disable+0x24>)
   153f2:	f000 001f 	and.w	r0, r0, #31
   153f6:	3320      	adds	r3, #32
   153f8:	2201      	movs	r2, #1
   153fa:	4082      	lsls	r2, r0
   153fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   15400:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15404:	f3bf 8f6f 	isb	sy
}
   15408:	4770      	bx	lr
   1540a:	bf00      	nop
   1540c:	e000e100 	.word	0xe000e100

00015410 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   15410:	4b05      	ldr	r3, [pc, #20]	; (15428 <arch_irq_is_enabled+0x18>)
   15412:	0942      	lsrs	r2, r0, #5
   15414:	f000 001f 	and.w	r0, r0, #31
   15418:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1541c:	2301      	movs	r3, #1
   1541e:	fa03 f000 	lsl.w	r0, r3, r0
}
   15422:	4010      	ands	r0, r2
   15424:	4770      	bx	lr
   15426:	bf00      	nop
   15428:	e000e100 	.word	0xe000e100

0001542c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1542c:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1542e:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
   15430:	bf54      	ite	pl
   15432:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   15434:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   15436:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15438:	bfac      	ite	ge
   1543a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1543e:	4a07      	ldrlt	r2, [pc, #28]	; (1545c <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15440:	ea4f 1341 	mov.w	r3, r1, lsl #5
   15444:	bfac      	ite	ge
   15446:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1544a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1544e:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15450:	bfb4      	ite	lt
   15452:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15454:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   15458:	4770      	bx	lr
   1545a:	bf00      	nop
   1545c:	e000ed14 	.word	0xe000ed14

00015460 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   15460:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   15462:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   15464:	4b04      	ldr	r3, [pc, #16]	; (15478 <_arch_isr_direct_pm+0x18>)
   15466:	695a      	ldr	r2, [r3, #20]
   15468:	b11a      	cbz	r2, 15472 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   1546a:	2200      	movs	r2, #0
   1546c:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
   1546e:	f019 fd03 	bl	2ee78 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   15472:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   15474:	bd08      	pop	{r3, pc}
   15476:	bf00      	nop
   15478:	20003804 	.word	0x20003804

0001547c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1547c:	bf30      	wfi
    b z_SysNmiOnReset
   1547e:	f7ff bffd 	b.w	1547c <z_SysNmiOnReset>
   15482:	bf00      	nop

00015484 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   15484:	4a0b      	ldr	r2, [pc, #44]	; (154b4 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   15486:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   15488:	4b0b      	ldr	r3, [pc, #44]	; (154b8 <z_arm_prep_c+0x34>)
   1548a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1548e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   15490:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15494:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   15498:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1549c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   154a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   154a4:	f00f fc98 	bl	24dd8 <z_bss_zero>
	z_data_copy();
   154a8:	f010 fcf2 	bl	25e90 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   154ac:	f000 fc5c 	bl	15d68 <z_arm_interrupt_init>
	z_cstart();
   154b0:	f00f fcd6 	bl	24e60 <z_cstart>
   154b4:	00000000 	.word	0x00000000
   154b8:	e000ed00 	.word	0xe000ed00

000154bc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   154bc:	4a09      	ldr	r2, [pc, #36]	; (154e4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   154be:	490a      	ldr	r1, [pc, #40]	; (154e8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   154c0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   154c2:	6809      	ldr	r1, [r1, #0]
   154c4:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   154c6:	4909      	ldr	r1, [pc, #36]	; (154ec <arch_swap+0x30>)
	_current->arch.basepri = key;
   154c8:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   154ca:	684b      	ldr	r3, [r1, #4]
   154cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   154d0:	604b      	str	r3, [r1, #4]
   154d2:	2300      	movs	r3, #0
   154d4:	f383 8811 	msr	BASEPRI, r3
   154d8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   154dc:	6893      	ldr	r3, [r2, #8]
}
   154de:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   154e0:	4770      	bx	lr
   154e2:	bf00      	nop
   154e4:	20003804 	.word	0x20003804
   154e8:	00030720 	.word	0x00030720
   154ec:	e000ed00 	.word	0xe000ed00

000154f0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   154f0:	4912      	ldr	r1, [pc, #72]	; (1553c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   154f2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   154f4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   154f8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   154fa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   154fe:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15502:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   15504:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   15508:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1550c:	4f0c      	ldr	r7, [pc, #48]	; (15540 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1550e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   15512:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   15514:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   15516:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   15518:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1551a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1551c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1551e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   15522:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   15524:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   15526:	f000 fcbb 	bl	15ea0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1552a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1552e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   15532:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   15536:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1553a:	4770      	bx	lr
    ldr r1, =_kernel
   1553c:	20003804 	.word	0x20003804
    ldr v4, =_SCS_ICSR
   15540:	e000ed04 	.word	0xe000ed04

00015544 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   15544:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   15548:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1554a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1554e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   15552:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   15554:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   15558:	2902      	cmp	r1, #2
    beq _oops
   1555a:	d0ff      	beq.n	1555c <_oops>

0001555c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1555c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   1555e:	f016 fa95 	bl	2ba8c <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   15562:	bd01      	pop	{r0, pc}

00015564 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   15564:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   15568:	9b00      	ldr	r3, [sp, #0]
   1556a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   1556e:	490a      	ldr	r1, [pc, #40]	; (15598 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   15570:	9b01      	ldr	r3, [sp, #4]
   15572:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   15576:	9b02      	ldr	r3, [sp, #8]
   15578:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   1557c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   15580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   15584:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   15588:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   1558c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1558e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   15590:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   15592:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   15594:	4770      	bx	lr
   15596:	bf00      	nop
   15598:	00029545 	.word	0x00029545

0001559c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   1559c:	4a09      	ldr	r2, [pc, #36]	; (155c4 <z_check_thread_stack_fail+0x28>)
{
   1559e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   155a0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   155a2:	b170      	cbz	r0, 155c2 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   155a4:	f113 0f16 	cmn.w	r3, #22
   155a8:	6e80      	ldr	r0, [r0, #104]	; 0x68
   155aa:	d005      	beq.n	155b8 <z_check_thread_stack_fail+0x1c>
   155ac:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   155b0:	429a      	cmp	r2, r3
   155b2:	d805      	bhi.n	155c0 <z_check_thread_stack_fail+0x24>
   155b4:	4283      	cmp	r3, r0
   155b6:	d203      	bcs.n	155c0 <z_check_thread_stack_fail+0x24>
		return 0;
   155b8:	4281      	cmp	r1, r0
   155ba:	bf28      	it	cs
   155bc:	2000      	movcs	r0, #0
   155be:	4770      	bx	lr
   155c0:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   155c2:	4770      	bx	lr
   155c4:	20003804 	.word	0x20003804

000155c8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   155c8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   155ca:	4b09      	ldr	r3, [pc, #36]	; (155f0 <arch_switch_to_main_thread+0x28>)
{
   155cc:	460d      	mov	r5, r1
   155ce:	4614      	mov	r4, r2
	_current = main_thread;
   155d0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   155d2:	f000 fc65 	bl	15ea0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   155d6:	4620      	mov	r0, r4
   155d8:	f385 8809 	msr	PSP, r5
   155dc:	2100      	movs	r1, #0
   155de:	b663      	cpsie	if
   155e0:	f381 8811 	msr	BASEPRI, r1
   155e4:	f3bf 8f6f 	isb	sy
   155e8:	2200      	movs	r2, #0
   155ea:	2300      	movs	r3, #0
   155ec:	f013 ffaa 	bl	29544 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   155f0:	20003804 	.word	0x20003804

000155f4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   155f4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   155f6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   155f8:	4a0b      	ldr	r2, [pc, #44]	; (15628 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   155fa:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   155fc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   155fe:	bf1e      	ittt	ne
	movne	r1, #0
   15600:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   15602:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   15604:	f019 fc38 	blne	2ee78 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   15608:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1560a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1560e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   15612:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   15616:	4905      	ldr	r1, [pc, #20]	; (1562c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   15618:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1561a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1561c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1561e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   15622:	4903      	ldr	r1, [pc, #12]	; (15630 <_isr_wrapper+0x3c>)
	bx r1
   15624:	4708      	bx	r1
   15626:	0000      	.short	0x0000
	ldr r2, =_kernel
   15628:	20003804 	.word	0x20003804
	ldr r1, =_sw_isr_table
   1562c:	0002f9c4 	.word	0x0002f9c4
	ldr r1, =z_arm_int_exit
   15630:	00015635 	.word	0x00015635

00015634 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   15634:	4b04      	ldr	r3, [pc, #16]	; (15648 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   15636:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   15638:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   1563a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1563c:	d003      	beq.n	15646 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1563e:	4903      	ldr	r1, [pc, #12]	; (1564c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   15640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   15644:	600a      	str	r2, [r1, #0]

00015646 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   15646:	4770      	bx	lr
	ldr r3, =_kernel
   15648:	20003804 	.word	0x20003804
	ldr r1, =_SCS_ICSR
   1564c:	e000ed04 	.word	0xe000ed04

00015650 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   15650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15654:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
   15656:	466e      	mov	r6, sp
   15658:	b088      	sub	sp, #32
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1565a:	4680      	mov	r8, r0
   1565c:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   1565e:	466a      	mov	r2, sp
   15660:	4b55      	ldr	r3, [pc, #340]	; (157b8 <bus_fault.constprop.0+0x168>)
   15662:	4c56      	ldr	r4, [pc, #344]	; (157bc <bus_fault.constprop.0+0x16c>)
   15664:	6153      	str	r3, [r2, #20]
   15666:	f04f 0903 	mov.w	r9, #3
   1566a:	6194      	str	r4, [r2, #24]
   1566c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15670:	f842 9f10 	str.w	r9, [r2, #16]!
   15674:	4852      	ldr	r0, [pc, #328]	; (157c0 <bus_fault.constprop.0+0x170>)
   15676:	f016 fa18 	bl	2baaa <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1567a:	4b52      	ldr	r3, [pc, #328]	; (157c4 <bus_fault.constprop.0+0x174>)
   1567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1567e:	04d9      	lsls	r1, r3, #19
   15680:	46b5      	mov	sp, r6
   15682:	f140 8082 	bpl.w	1578a <bus_fault.constprop.0+0x13a>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
   15686:	b088      	sub	sp, #32
   15688:	466a      	mov	r2, sp
   1568a:	4b4f      	ldr	r3, [pc, #316]	; (157c8 <bus_fault.constprop.0+0x178>)
   1568c:	484c      	ldr	r0, [pc, #304]	; (157c0 <bus_fault.constprop.0+0x170>)
   1568e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15692:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15696:	f842 9f10 	str.w	r9, [r2, #16]!
   1569a:	f016 fa06 	bl	2baaa <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
   1569e:	2017      	movs	r0, #23
   156a0:	46b5      	mov	sp, r6
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   156a2:	4b48      	ldr	r3, [pc, #288]	; (157c4 <bus_fault.constprop.0+0x174>)
   156a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   156a6:	051a      	lsls	r2, r3, #20
   156a8:	d50f      	bpl.n	156ca <bus_fault.constprop.0+0x7a>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   156aa:	466e      	mov	r6, sp
   156ac:	b088      	sub	sp, #32
   156ae:	466a      	mov	r2, sp
   156b0:	4b46      	ldr	r3, [pc, #280]	; (157cc <bus_fault.constprop.0+0x17c>)
   156b2:	4843      	ldr	r0, [pc, #268]	; (157c0 <bus_fault.constprop.0+0x170>)
   156b4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   156b8:	2303      	movs	r3, #3
   156ba:	f842 3f10 	str.w	r3, [r2, #16]!
   156be:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   156c2:	f016 f9f2 	bl	2baaa <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
   156c6:	2018      	movs	r0, #24
   156c8:	46b5      	mov	sp, r6
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   156ca:	4e3e      	ldr	r6, [pc, #248]	; (157c4 <bus_fault.constprop.0+0x174>)
   156cc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   156ce:	059b      	lsls	r3, r3, #22
   156d0:	d529      	bpl.n	15726 <bus_fault.constprop.0+0xd6>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
   156d2:	46e9      	mov	r9, sp
   156d4:	b088      	sub	sp, #32
   156d6:	466a      	mov	r2, sp
   156d8:	4b3d      	ldr	r3, [pc, #244]	; (157d0 <bus_fault.constprop.0+0x180>)
   156da:	4839      	ldr	r0, [pc, #228]	; (157c0 <bus_fault.constprop.0+0x170>)
   156dc:	e9c2 3405 	strd	r3, r4, [r2, #20]
   156e0:	2303      	movs	r3, #3
   156e2:	f842 3f10 	str.w	r3, [r2, #16]!
   156e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   156ea:	f016 f9de 	bl	2baaa <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   156ee:	6bb3      	ldr	r3, [r6, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   156f0:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   156f2:	0410      	lsls	r0, r2, #16
   156f4:	46cd      	mov	sp, r9
   156f6:	d515      	bpl.n	15724 <bus_fault.constprop.0+0xd4>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   156f8:	b088      	sub	sp, #32
   156fa:	466a      	mov	r2, sp
   156fc:	4935      	ldr	r1, [pc, #212]	; (157d4 <bus_fault.constprop.0+0x184>)
   156fe:	61d3      	str	r3, [r2, #28]
   15700:	2304      	movs	r3, #4
   15702:	e9c2 1405 	strd	r1, r4, [r2, #20]
   15706:	482e      	ldr	r0, [pc, #184]	; (157c0 <bus_fault.constprop.0+0x170>)
   15708:	f842 3f10 	str.w	r3, [r2, #16]!
   1570c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15710:	f016 f9cb 	bl	2baaa <z_log_msg_static_create.constprop.0>
   15714:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
   15716:	f1b8 0f00 	cmp.w	r8, #0
   1571a:	d003      	beq.n	15724 <bus_fault.constprop.0+0xd4>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1571c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1571e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   15722:	62b3      	str	r3, [r6, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   15724:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   15726:	4b27      	ldr	r3, [pc, #156]	; (157c4 <bus_fault.constprop.0+0x174>)
   15728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1572a:	0559      	lsls	r1, r3, #21
   1572c:	d50f      	bpl.n	1574e <bus_fault.constprop.0+0xfe>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
   1572e:	466e      	mov	r6, sp
   15730:	b088      	sub	sp, #32
   15732:	466a      	mov	r2, sp
   15734:	4b28      	ldr	r3, [pc, #160]	; (157d8 <bus_fault.constprop.0+0x188>)
   15736:	4822      	ldr	r0, [pc, #136]	; (157c0 <bus_fault.constprop.0+0x170>)
   15738:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1573c:	2303      	movs	r3, #3
   1573e:	f842 3f10 	str.w	r3, [r2, #16]!
   15742:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15746:	f016 f9b0 	bl	2baaa <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   1574a:	201a      	movs	r0, #26
   1574c:	46b5      	mov	sp, r6
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1574e:	4b1d      	ldr	r3, [pc, #116]	; (157c4 <bus_fault.constprop.0+0x174>)
   15750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15752:	05d2      	lsls	r2, r2, #23
   15754:	d51b      	bpl.n	1578e <bus_fault.constprop.0+0x13e>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
   15756:	466e      	mov	r6, sp
   15758:	b088      	sub	sp, #32
   1575a:	466a      	mov	r2, sp
   1575c:	4b1f      	ldr	r3, [pc, #124]	; (157dc <bus_fault.constprop.0+0x18c>)
   1575e:	4818      	ldr	r0, [pc, #96]	; (157c0 <bus_fault.constprop.0+0x170>)
   15760:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15764:	2303      	movs	r3, #3
   15766:	f842 3f10 	str.w	r3, [r2, #16]!
   1576a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1576e:	f016 f99c 	bl	2baaa <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   15772:	201b      	movs	r0, #27
   15774:	46b5      	mov	sp, r6
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   15776:	4a13      	ldr	r2, [pc, #76]	; (157c4 <bus_fault.constprop.0+0x174>)
   15778:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1577a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1577e:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   15780:	2300      	movs	r3, #0
   15782:	702b      	strb	r3, [r5, #0]

	return reason;
}
   15784:	46bd      	mov	sp, r7
   15786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   1578a:	2016      	movs	r0, #22
   1578c:	e789      	b.n	156a2 <bus_fault.constprop.0+0x52>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15790:	049b      	lsls	r3, r3, #18
   15792:	d5f0      	bpl.n	15776 <bus_fault.constprop.0+0x126>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15794:	466e      	mov	r6, sp
   15796:	b088      	sub	sp, #32
   15798:	466a      	mov	r2, sp
   1579a:	4b11      	ldr	r3, [pc, #68]	; (157e0 <bus_fault.constprop.0+0x190>)
   1579c:	4808      	ldr	r0, [pc, #32]	; (157c0 <bus_fault.constprop.0+0x170>)
   1579e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   157a2:	2303      	movs	r3, #3
   157a4:	f842 3f10 	str.w	r3, [r2, #16]!
   157a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   157ac:	f016 f97d 	bl	2baaa <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   157b0:	201c      	movs	r0, #28
   157b2:	46b5      	mov	sp, r6
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   157b4:	e7df      	b.n	15776 <bus_fault.constprop.0+0x126>
   157b6:	bf00      	nop
   157b8:	000318ca 	.word	0x000318ca
   157bc:	00031ca5 	.word	0x00031ca5
   157c0:	0002fce4 	.word	0x0002fce4
   157c4:	e000ed00 	.word	0xe000ed00
   157c8:	000318e4 	.word	0x000318e4
   157cc:	000318f9 	.word	0x000318f9
   157d0:	00031910 	.word	0x00031910
   157d4:	0003192d 	.word	0x0003192d
   157d8:	00031946 	.word	0x00031946
   157dc:	00031965 	.word	0x00031965
   157e0:	00031981 	.word	0x00031981

000157e4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   157e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   157e6:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   157e8:	466d      	mov	r5, sp
   157ea:	b088      	sub	sp, #32
   157ec:	466a      	mov	r2, sp
   157ee:	4b47      	ldr	r3, [pc, #284]	; (1590c <usage_fault.constprop.0+0x128>)
   157f0:	4c47      	ldr	r4, [pc, #284]	; (15910 <usage_fault.constprop.0+0x12c>)
   157f2:	6153      	str	r3, [r2, #20]
   157f4:	2603      	movs	r6, #3
   157f6:	6194      	str	r4, [r2, #24]
   157f8:	4846      	ldr	r0, [pc, #280]	; (15914 <usage_fault.constprop.0+0x130>)
   157fa:	f842 6f10 	str.w	r6, [r2, #16]!
   157fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15802:	f016 f952 	bl	2baaa <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15806:	4b44      	ldr	r3, [pc, #272]	; (15918 <usage_fault.constprop.0+0x134>)
   15808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1580a:	019b      	lsls	r3, r3, #6
   1580c:	46ad      	mov	sp, r5
   1580e:	d57a      	bpl.n	15906 <usage_fault.constprop.0+0x122>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
   15810:	b088      	sub	sp, #32
   15812:	466a      	mov	r2, sp
   15814:	4b41      	ldr	r3, [pc, #260]	; (1591c <usage_fault.constprop.0+0x138>)
   15816:	483f      	ldr	r0, [pc, #252]	; (15914 <usage_fault.constprop.0+0x130>)
   15818:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1581c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15820:	f842 6f10 	str.w	r6, [r2, #16]!
   15824:	f016 f941 	bl	2baaa <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
   15828:	201e      	movs	r0, #30
   1582a:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1582c:	4b3a      	ldr	r3, [pc, #232]	; (15918 <usage_fault.constprop.0+0x134>)
   1582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15830:	01de      	lsls	r6, r3, #7
   15832:	d50f      	bpl.n	15854 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
   15834:	466d      	mov	r5, sp
   15836:	b088      	sub	sp, #32
   15838:	466a      	mov	r2, sp
   1583a:	4b39      	ldr	r3, [pc, #228]	; (15920 <usage_fault.constprop.0+0x13c>)
   1583c:	4835      	ldr	r0, [pc, #212]	; (15914 <usage_fault.constprop.0+0x130>)
   1583e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15842:	2303      	movs	r3, #3
   15844:	f842 3f10 	str.w	r3, [r2, #16]!
   15848:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1584c:	f016 f92d 	bl	2baaa <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   15850:	201f      	movs	r0, #31
   15852:	46ad      	mov	sp, r5
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   15854:	4b30      	ldr	r3, [pc, #192]	; (15918 <usage_fault.constprop.0+0x134>)
   15856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15858:	031d      	lsls	r5, r3, #12
   1585a:	d50f      	bpl.n	1587c <usage_fault.constprop.0+0x98>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
   1585c:	466d      	mov	r5, sp
   1585e:	b088      	sub	sp, #32
   15860:	466a      	mov	r2, sp
   15862:	4b30      	ldr	r3, [pc, #192]	; (15924 <usage_fault.constprop.0+0x140>)
   15864:	482b      	ldr	r0, [pc, #172]	; (15914 <usage_fault.constprop.0+0x130>)
   15866:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1586a:	2303      	movs	r3, #3
   1586c:	f842 3f10 	str.w	r3, [r2, #16]!
   15870:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15874:	f016 f919 	bl	2baaa <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   15878:	2021      	movs	r0, #33	; 0x21
   1587a:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1587c:	4b26      	ldr	r3, [pc, #152]	; (15918 <usage_fault.constprop.0+0x134>)
   1587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15880:	0359      	lsls	r1, r3, #13
   15882:	d50f      	bpl.n	158a4 <usage_fault.constprop.0+0xc0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   15884:	466d      	mov	r5, sp
   15886:	b088      	sub	sp, #32
   15888:	466a      	mov	r2, sp
   1588a:	4b27      	ldr	r3, [pc, #156]	; (15928 <usage_fault.constprop.0+0x144>)
   1588c:	4821      	ldr	r0, [pc, #132]	; (15914 <usage_fault.constprop.0+0x130>)
   1588e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15892:	2303      	movs	r3, #3
   15894:	f842 3f10 	str.w	r3, [r2, #16]!
   15898:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1589c:	f016 f905 	bl	2baaa <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   158a0:	2022      	movs	r0, #34	; 0x22
   158a2:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   158a4:	4b1c      	ldr	r3, [pc, #112]	; (15918 <usage_fault.constprop.0+0x134>)
   158a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   158a8:	039a      	lsls	r2, r3, #14
   158aa:	d50f      	bpl.n	158cc <usage_fault.constprop.0+0xe8>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
   158ac:	466d      	mov	r5, sp
   158ae:	b088      	sub	sp, #32
   158b0:	466a      	mov	r2, sp
   158b2:	4b1e      	ldr	r3, [pc, #120]	; (1592c <usage_fault.constprop.0+0x148>)
   158b4:	4817      	ldr	r0, [pc, #92]	; (15914 <usage_fault.constprop.0+0x130>)
   158b6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   158ba:	2303      	movs	r3, #3
   158bc:	f842 3f10 	str.w	r3, [r2, #16]!
   158c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   158c4:	f016 f8f1 	bl	2baaa <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   158c8:	2023      	movs	r0, #35	; 0x23
   158ca:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   158cc:	4b12      	ldr	r3, [pc, #72]	; (15918 <usage_fault.constprop.0+0x134>)
   158ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   158d0:	03db      	lsls	r3, r3, #15
   158d2:	d50f      	bpl.n	158f4 <usage_fault.constprop.0+0x110>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   158d4:	466d      	mov	r5, sp
   158d6:	b088      	sub	sp, #32
   158d8:	466a      	mov	r2, sp
   158da:	4b15      	ldr	r3, [pc, #84]	; (15930 <usage_fault.constprop.0+0x14c>)
   158dc:	480d      	ldr	r0, [pc, #52]	; (15914 <usage_fault.constprop.0+0x130>)
   158de:	e9c2 3405 	strd	r3, r4, [r2, #20]
   158e2:	2303      	movs	r3, #3
   158e4:	f842 3f10 	str.w	r3, [r2, #16]!
   158e8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   158ec:	f016 f8dd 	bl	2baaa <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   158f0:	2024      	movs	r0, #36	; 0x24
   158f2:	46ad      	mov	sp, r5
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   158f4:	4a08      	ldr	r2, [pc, #32]	; (15918 <usage_fault.constprop.0+0x134>)
   158f6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   158f8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   158fc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   15900:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   15902:	46bd      	mov	sp, r7
   15904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   15906:	201d      	movs	r0, #29
   15908:	e790      	b.n	1582c <usage_fault.constprop.0+0x48>
   1590a:	bf00      	nop
   1590c:	000319b4 	.word	0x000319b4
   15910:	00031c99 	.word	0x00031c99
   15914:	0002fce4 	.word	0x0002fce4
   15918:	e000ed00 	.word	0xe000ed00
   1591c:	000319d0 	.word	0x000319d0
   15920:	000319e7 	.word	0x000319e7
   15924:	00031a05 	.word	0x00031a05
   15928:	00031a27 	.word	0x00031a27
   1592c:	00031a50 	.word	0x00031a50
   15930:	00031a6e 	.word	0x00031a6e

00015934 <mem_manage_fault>:
{
   15934:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15938:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
   1593a:	466c      	mov	r4, sp
   1593c:	b088      	sub	sp, #32
{
   1593e:	4691      	mov	r9, r2
   15940:	4682      	mov	sl, r0
   15942:	468b      	mov	fp, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   15944:	466a      	mov	r2, sp
   15946:	4b5c      	ldr	r3, [pc, #368]	; (15ab8 <mem_manage_fault+0x184>)
   15948:	4d5c      	ldr	r5, [pc, #368]	; (15abc <mem_manage_fault+0x188>)
   1594a:	6153      	str	r3, [r2, #20]
   1594c:	2603      	movs	r6, #3
   1594e:	6195      	str	r5, [r2, #24]
   15950:	485b      	ldr	r0, [pc, #364]	; (15ac0 <mem_manage_fault+0x18c>)
   15952:	f842 6f10 	str.w	r6, [r2, #16]!
   15956:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1595a:	f016 f8a6 	bl	2baaa <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1595e:	4b59      	ldr	r3, [pc, #356]	; (15ac4 <mem_manage_fault+0x190>)
   15960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15962:	06db      	lsls	r3, r3, #27
   15964:	46a5      	mov	sp, r4
   15966:	d552      	bpl.n	15a0e <mem_manage_fault+0xda>
		PR_FAULT_INFO("  Stacking error (context area might be"
   15968:	b088      	sub	sp, #32
   1596a:	466a      	mov	r2, sp
   1596c:	4b56      	ldr	r3, [pc, #344]	; (15ac8 <mem_manage_fault+0x194>)
   1596e:	4854      	ldr	r0, [pc, #336]	; (15ac0 <mem_manage_fault+0x18c>)
   15970:	e9c2 3505 	strd	r3, r5, [r2, #20]
   15974:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15978:	f842 6f10 	str.w	r6, [r2, #16]!
   1597c:	f016 f895 	bl	2baaa <z_log_msg_static_create.constprop.0>
   15980:	46a5      	mov	sp, r4
		reason = K_ERR_ARM_MEM_STACKING;
   15982:	2411      	movs	r4, #17
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   15984:	4b4f      	ldr	r3, [pc, #316]	; (15ac4 <mem_manage_fault+0x190>)
   15986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15988:	0718      	lsls	r0, r3, #28
   1598a:	d50f      	bpl.n	159ac <mem_manage_fault+0x78>
		PR_FAULT_INFO("  Unstacking error");
   1598c:	466c      	mov	r4, sp
   1598e:	b088      	sub	sp, #32
   15990:	466a      	mov	r2, sp
   15992:	4b4e      	ldr	r3, [pc, #312]	; (15acc <mem_manage_fault+0x198>)
   15994:	484a      	ldr	r0, [pc, #296]	; (15ac0 <mem_manage_fault+0x18c>)
   15996:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1599a:	2303      	movs	r3, #3
   1599c:	f842 3f10 	str.w	r3, [r2, #16]!
   159a0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   159a4:	f016 f881 	bl	2baaa <z_log_msg_static_create.constprop.0>
   159a8:	46a5      	mov	sp, r4
		reason = K_ERR_ARM_MEM_UNSTACKING;
   159aa:	2412      	movs	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   159ac:	4e45      	ldr	r6, [pc, #276]	; (15ac4 <mem_manage_fault+0x190>)
   159ae:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   159b0:	0799      	lsls	r1, r3, #30
   159b2:	d52e      	bpl.n	15a12 <mem_manage_fault+0xde>
		PR_FAULT_INFO("  Data Access Violation");
   159b4:	466c      	mov	r4, sp
   159b6:	b088      	sub	sp, #32
   159b8:	466a      	mov	r2, sp
   159ba:	4b45      	ldr	r3, [pc, #276]	; (15ad0 <mem_manage_fault+0x19c>)
   159bc:	4840      	ldr	r0, [pc, #256]	; (15ac0 <mem_manage_fault+0x18c>)
   159be:	e9c2 3505 	strd	r3, r5, [r2, #20]
   159c2:	2303      	movs	r3, #3
   159c4:	f842 3f10 	str.w	r3, [r2, #16]!
   159c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   159cc:	f016 f86d 	bl	2baaa <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   159d0:	f8d6 8034 	ldr.w	r8, [r6, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   159d4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   159d6:	061a      	lsls	r2, r3, #24
   159d8:	46a5      	mov	sp, r4
   159da:	d569      	bpl.n	15ab0 <mem_manage_fault+0x17c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   159dc:	b088      	sub	sp, #32
   159de:	466a      	mov	r2, sp
   159e0:	4b3c      	ldr	r3, [pc, #240]	; (15ad4 <mem_manage_fault+0x1a0>)
   159e2:	f8c2 801c 	str.w	r8, [r2, #28]
   159e6:	e9c2 3505 	strd	r3, r5, [r2, #20]
   159ea:	2304      	movs	r3, #4
   159ec:	f842 3f10 	str.w	r3, [r2, #16]!
   159f0:	4833      	ldr	r0, [pc, #204]	; (15ac0 <mem_manage_fault+0x18c>)
   159f2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   159f6:	f016 f858 	bl	2baaa <z_log_msg_static_create.constprop.0>
   159fa:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
   159fc:	f1bb 0f00 	cmp.w	fp, #0
   15a00:	d003      	beq.n	15a0a <mem_manage_fault+0xd6>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   15a02:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   15a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   15a08:	62b3      	str	r3, [r6, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   15a0a:	2413      	movs	r4, #19
   15a0c:	e003      	b.n	15a16 <mem_manage_fault+0xe2>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   15a0e:	2410      	movs	r4, #16
   15a10:	e7b8      	b.n	15984 <mem_manage_fault+0x50>
	uint32_t mmfar = -EINVAL;
   15a12:	f06f 0815 	mvn.w	r8, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   15a16:	4b2b      	ldr	r3, [pc, #172]	; (15ac4 <mem_manage_fault+0x190>)
   15a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15a1a:	07db      	lsls	r3, r3, #31
   15a1c:	d50f      	bpl.n	15a3e <mem_manage_fault+0x10a>
		PR_FAULT_INFO("  Instruction Access Violation");
   15a1e:	466c      	mov	r4, sp
   15a20:	b088      	sub	sp, #32
   15a22:	466a      	mov	r2, sp
   15a24:	4b2c      	ldr	r3, [pc, #176]	; (15ad8 <mem_manage_fault+0x1a4>)
   15a26:	4826      	ldr	r0, [pc, #152]	; (15ac0 <mem_manage_fault+0x18c>)
   15a28:	e9c2 3505 	strd	r3, r5, [r2, #20]
   15a2c:	2303      	movs	r3, #3
   15a2e:	f842 3f10 	str.w	r3, [r2, #16]!
   15a32:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15a36:	f016 f838 	bl	2baaa <z_log_msg_static_create.constprop.0>
   15a3a:	46a5      	mov	sp, r4
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   15a3c:	2414      	movs	r4, #20
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   15a3e:	4b21      	ldr	r3, [pc, #132]	; (15ac4 <mem_manage_fault+0x190>)
   15a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15a42:	069e      	lsls	r6, r3, #26
   15a44:	d50f      	bpl.n	15a66 <mem_manage_fault+0x132>
		PR_FAULT_INFO(
   15a46:	466c      	mov	r4, sp
   15a48:	b088      	sub	sp, #32
   15a4a:	466a      	mov	r2, sp
   15a4c:	4b23      	ldr	r3, [pc, #140]	; (15adc <mem_manage_fault+0x1a8>)
   15a4e:	481c      	ldr	r0, [pc, #112]	; (15ac0 <mem_manage_fault+0x18c>)
   15a50:	e9c2 3505 	strd	r3, r5, [r2, #20]
   15a54:	2303      	movs	r3, #3
   15a56:	f842 3f10 	str.w	r3, [r2, #16]!
   15a5a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15a5e:	f016 f824 	bl	2baaa <z_log_msg_static_create.constprop.0>
   15a62:	46a5      	mov	sp, r4
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   15a64:	2415      	movs	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   15a66:	4b17      	ldr	r3, [pc, #92]	; (15ac4 <mem_manage_fault+0x190>)
   15a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15a6a:	06d5      	lsls	r5, r2, #27
   15a6c:	d402      	bmi.n	15a74 <mem_manage_fault+0x140>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   15a6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   15a70:	0790      	lsls	r0, r2, #30
   15a72:	d50a      	bpl.n	15a8a <mem_manage_fault+0x156>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   15a74:	685b      	ldr	r3, [r3, #4]
   15a76:	0519      	lsls	r1, r3, #20
   15a78:	d507      	bpl.n	15a8a <mem_manage_fault+0x156>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   15a7a:	4651      	mov	r1, sl
   15a7c:	4640      	mov	r0, r8
   15a7e:	f7ff fd8d 	bl	1559c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   15a82:	b110      	cbz	r0, 15a8a <mem_manage_fault+0x156>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   15a84:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   15a88:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   15a8a:	4b0e      	ldr	r3, [pc, #56]	; (15ac4 <mem_manage_fault+0x190>)
   15a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15a8e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   15a90:	bf42      	ittt	mi
   15a92:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   15a94:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   15a98:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   15a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15a9c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   15aa0:	629a      	str	r2, [r3, #40]	; 0x28
}
   15aa2:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
   15aa4:	2300      	movs	r3, #0
   15aa6:	f889 3000 	strb.w	r3, [r9]
}
   15aaa:	46bd      	mov	sp, r7
   15aac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t mmfar = -EINVAL;
   15ab0:	f06f 0815 	mvn.w	r8, #21
   15ab4:	e7a9      	b.n	15a0a <mem_manage_fault+0xd6>
   15ab6:	bf00      	nop
   15ab8:	00031a9d 	.word	0x00031a9d
   15abc:	00031caf 	.word	0x00031caf
   15ac0:	0002fce4 	.word	0x0002fce4
   15ac4:	e000ed00 	.word	0xe000ed00
   15ac8:	00031ab7 	.word	0x00031ab7
   15acc:	000318f9 	.word	0x000318f9
   15ad0:	00031aee 	.word	0x00031aee
   15ad4:	00031b0a 	.word	0x00031b0a
   15ad8:	00031b24 	.word	0x00031b24
   15adc:	00031981 	.word	0x00031981

00015ae0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   15ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15ae4:	4b86      	ldr	r3, [pc, #536]	; (15d00 <z_arm_fault+0x220>)
{
   15ae6:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15ae8:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   15aec:	af00      	add	r7, sp, #0
   15aee:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15af0:	f3c8 0408 	ubfx	r4, r8, #0, #9
   15af4:	2600      	movs	r6, #0
   15af6:	f386 8811 	msr	BASEPRI, r6
   15afa:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   15afe:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   15b02:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   15b06:	d113      	bne.n	15b30 <z_arm_fault+0x50>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   15b08:	f002 030c 	and.w	r3, r2, #12
   15b0c:	2b08      	cmp	r3, #8
   15b0e:	d11e      	bne.n	15b4e <z_arm_fault+0x6e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   15b10:	466d      	mov	r5, sp
   15b12:	b088      	sub	sp, #32
   15b14:	466a      	mov	r2, sp
   15b16:	4b7b      	ldr	r3, [pc, #492]	; (15d04 <z_arm_fault+0x224>)
   15b18:	6153      	str	r3, [r2, #20]
   15b1a:	4b7b      	ldr	r3, [pc, #492]	; (15d08 <z_arm_fault+0x228>)
   15b1c:	6193      	str	r3, [r2, #24]
   15b1e:	2303      	movs	r3, #3
   15b20:	f842 3f10 	str.w	r3, [r2, #16]!
   15b24:	4879      	ldr	r0, [pc, #484]	; (15d0c <z_arm_fault+0x22c>)
   15b26:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15b2a:	f015 ffbe 	bl	2baaa <z_log_msg_static_create.constprop.0>
   15b2e:	46ad      	mov	sp, r5
	*nested_exc = false;
   15b30:	2600      	movs	r6, #0
		return NULL;
   15b32:	4635      	mov	r5, r6
	*recoverable = false;
   15b34:	2300      	movs	r3, #0
   15b36:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   15b38:	1ee3      	subs	r3, r4, #3
   15b3a:	2b09      	cmp	r3, #9
   15b3c:	f200 80c1 	bhi.w	15cc2 <z_arm_fault+0x1e2>
   15b40:	e8df f003 	tbb	[pc, r3]
   15b44:	a3aaa70a 	.word	0xa3aaa70a
   15b48:	bfbfbfbf 	.word	0xbfbfbfbf
   15b4c:	adbf      	.short	0xadbf
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   15b4e:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   15b50:	bf4c      	ite	mi
   15b52:	460d      	movmi	r5, r1
			*nested_exc = true;
   15b54:	2601      	movpl	r6, #1
   15b56:	e7ed      	b.n	15b34 <z_arm_fault+0x54>
	PR_FAULT_INFO("***** HARD FAULT *****");
   15b58:	46e8      	mov	r8, sp
   15b5a:	b088      	sub	sp, #32
   15b5c:	466a      	mov	r2, sp
   15b5e:	4b6c      	ldr	r3, [pc, #432]	; (15d10 <z_arm_fault+0x230>)
   15b60:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 15d14 <z_arm_fault+0x234>
   15b64:	6153      	str	r3, [r2, #20]
   15b66:	f04f 0a03 	mov.w	sl, #3
   15b6a:	f8c2 9018 	str.w	r9, [r2, #24]
   15b6e:	4867      	ldr	r0, [pc, #412]	; (15d0c <z_arm_fault+0x22c>)
   15b70:	f842 af10 	str.w	sl, [r2, #16]!
   15b74:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15b78:	f015 ff97 	bl	2baaa <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   15b7c:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   15b7e:	4c60      	ldr	r4, [pc, #384]	; (15d00 <z_arm_fault+0x220>)
	*recoverable = false;
   15b80:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   15b82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15b84:	079a      	lsls	r2, r3, #30
   15b86:	46c5      	mov	sp, r8
   15b88:	d50d      	bpl.n	15ba6 <z_arm_fault+0xc6>
		PR_EXC("  Bus fault on vector table read");
   15b8a:	b088      	sub	sp, #32
   15b8c:	466a      	mov	r2, sp
   15b8e:	4b62      	ldr	r3, [pc, #392]	; (15d18 <z_arm_fault+0x238>)
		PR_EXC("  Debug event");
   15b90:	e9c2 3905 	strd	r3, r9, [r2, #20]
   15b94:	f842 af10 	str.w	sl, [r2, #16]!
   15b98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	PR_FAULT_INFO("***** %s %d) *****",
   15b9c:	485b      	ldr	r0, [pc, #364]	; (15d0c <z_arm_fault+0x22c>)
   15b9e:	f015 ff84 	bl	2baaa <z_log_msg_static_create.constprop.0>
   15ba2:	46c5      	mov	sp, r8
}
   15ba4:	e08b      	b.n	15cbe <z_arm_fault+0x1de>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   15ba6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15ba8:	2b00      	cmp	r3, #0
   15baa:	da03      	bge.n	15bb4 <z_arm_fault+0xd4>
		PR_EXC("  Debug event");
   15bac:	b088      	sub	sp, #32
   15bae:	466a      	mov	r2, sp
   15bb0:	4b5a      	ldr	r3, [pc, #360]	; (15d1c <z_arm_fault+0x23c>)
   15bb2:	e7ed      	b.n	15b90 <z_arm_fault+0xb0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   15bb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15bb6:	005b      	lsls	r3, r3, #1
   15bb8:	f140 8081 	bpl.w	15cbe <z_arm_fault+0x1de>
		PR_EXC("  Fault escalation (see below)");
   15bbc:	b088      	sub	sp, #32
   15bbe:	466a      	mov	r2, sp
   15bc0:	4b57      	ldr	r3, [pc, #348]	; (15d20 <z_arm_fault+0x240>)
   15bc2:	4852      	ldr	r0, [pc, #328]	; (15d0c <z_arm_fault+0x22c>)
   15bc4:	e9c2 3905 	strd	r3, r9, [r2, #20]
   15bc8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15bcc:	f842 af10 	str.w	sl, [r2, #16]!
   15bd0:	f015 ff6b 	bl	2baaa <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   15bd4:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   15bd6:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   15bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15bdc:	46c5      	mov	sp, r8
   15bde:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   15be0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15be4:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   15be8:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   15bea:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   15bee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   15bf2:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   15bf4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15bf8:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   15bfc:	f64d 7302 	movw	r3, #57090	; 0xdf02
   15c00:	429a      	cmp	r2, r3
   15c02:	d008      	beq.n	15c16 <z_arm_fault+0x136>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   15c04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15c06:	b2db      	uxtb	r3, r3
   15c08:	b393      	cbz	r3, 15c70 <z_arm_fault+0x190>
			reason = mem_manage_fault(esf, 1, recoverable);
   15c0a:	1dfa      	adds	r2, r7, #7
   15c0c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   15c0e:	4628      	mov	r0, r5
   15c10:	f7ff fe90 	bl	15934 <mem_manage_fault>
   15c14:	e03b      	b.n	15c8e <z_arm_fault+0x1ae>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   15c16:	b088      	sub	sp, #32
   15c18:	682b      	ldr	r3, [r5, #0]
   15c1a:	466a      	mov	r2, sp
   15c1c:	4941      	ldr	r1, [pc, #260]	; (15d24 <z_arm_fault+0x244>)
   15c1e:	61d3      	str	r3, [r2, #28]
   15c20:	2304      	movs	r3, #4
   15c22:	e9c2 1905 	strd	r1, r9, [r2, #20]
   15c26:	4839      	ldr	r0, [pc, #228]	; (15d0c <z_arm_fault+0x22c>)
   15c28:	f842 3f10 	str.w	r3, [r2, #16]!
   15c2c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15c30:	f015 ff3b 	bl	2baaa <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
   15c34:	682c      	ldr	r4, [r5, #0]
   15c36:	46c5      	mov	sp, r8
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   15c38:	79fb      	ldrb	r3, [r7, #7]
   15c3a:	b9ab      	cbnz	r3, 15c68 <z_arm_fault+0x188>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   15c3c:	2220      	movs	r2, #32
   15c3e:	4629      	mov	r1, r5
   15c40:	f107 0008 	add.w	r0, r7, #8
   15c44:	f016 f82c 	bl	2bca0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   15c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c4a:	2e00      	cmp	r6, #0
   15c4c:	d052      	beq.n	15cf4 <z_arm_fault+0x214>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   15c4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   15c52:	b922      	cbnz	r2, 15c5e <z_arm_fault+0x17e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   15c54:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   15c58:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15c5c:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   15c5e:	f107 0108 	add.w	r1, r7, #8
   15c62:	4620      	mov	r0, r4
   15c64:	f7ff fb44 	bl	152f0 <z_arm_fatal_error>
}
   15c68:	3728      	adds	r7, #40	; 0x28
   15c6a:	46bd      	mov	sp, r7
   15c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   15c70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15c72:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   15c76:	d004      	beq.n	15c82 <z_arm_fault+0x1a2>
			reason = bus_fault(esf, 1, recoverable);
   15c78:	1df9      	adds	r1, r7, #7
   15c7a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   15c7c:	f7ff fce8 	bl	15650 <bus_fault.constprop.0>
   15c80:	e005      	b.n	15c8e <z_arm_fault+0x1ae>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   15c82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   15c88:	d319      	bcc.n	15cbe <z_arm_fault+0x1de>
			reason = usage_fault(esf);
   15c8a:	f7ff fdab 	bl	157e4 <usage_fault.constprop.0>
   15c8e:	4604      	mov	r4, r0
   15c90:	e7d2      	b.n	15c38 <z_arm_fault+0x158>
		reason = mem_manage_fault(esf, 0, recoverable);
   15c92:	1dfa      	adds	r2, r7, #7
   15c94:	2100      	movs	r1, #0
   15c96:	e7ba      	b.n	15c0e <z_arm_fault+0x12e>
		reason = bus_fault(esf, 0, recoverable);
   15c98:	1df9      	adds	r1, r7, #7
   15c9a:	2000      	movs	r0, #0
   15c9c:	e7ee      	b.n	15c7c <z_arm_fault+0x19c>
	PR_FAULT_INFO(
   15c9e:	466c      	mov	r4, sp
   15ca0:	b088      	sub	sp, #32
   15ca2:	466a      	mov	r2, sp
   15ca4:	4b20      	ldr	r3, [pc, #128]	; (15d28 <z_arm_fault+0x248>)
   15ca6:	6153      	str	r3, [r2, #20]
   15ca8:	4b20      	ldr	r3, [pc, #128]	; (15d2c <z_arm_fault+0x24c>)
   15caa:	6193      	str	r3, [r2, #24]
   15cac:	2303      	movs	r3, #3
   15cae:	f842 3f10 	str.w	r3, [r2, #16]!
   15cb2:	4816      	ldr	r0, [pc, #88]	; (15d0c <z_arm_fault+0x22c>)
   15cb4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15cb8:	f015 fef7 	bl	2baaa <z_log_msg_static_create.constprop.0>
   15cbc:	46a5      	mov	sp, r4
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   15cbe:	2400      	movs	r4, #0
   15cc0:	e7ba      	b.n	15c38 <z_arm_fault+0x158>
	PR_FAULT_INFO("***** %s %d) *****",
   15cc2:	4a1b      	ldr	r2, [pc, #108]	; (15d30 <z_arm_fault+0x250>)
   15cc4:	4b1b      	ldr	r3, [pc, #108]	; (15d34 <z_arm_fault+0x254>)
   15cc6:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   15cca:	46e8      	mov	r8, sp
   15ccc:	b08a      	sub	sp, #40	; 0x28
   15cce:	bf18      	it	ne
   15cd0:	4613      	movne	r3, r2
   15cd2:	466a      	mov	r2, sp
   15cd4:	4918      	ldr	r1, [pc, #96]	; (15d38 <z_arm_fault+0x258>)
   15cd6:	6151      	str	r1, [r2, #20]
   15cd8:	4918      	ldr	r1, [pc, #96]	; (15d3c <z_arm_fault+0x25c>)
   15cda:	e9c2 1306 	strd	r1, r3, [r2, #24]
   15cde:	f240 3301 	movw	r3, #769	; 0x301
   15ce2:	8493      	strh	r3, [r2, #36]	; 0x24
   15ce4:	3c10      	subs	r4, #16
   15ce6:	4b16      	ldr	r3, [pc, #88]	; (15d40 <z_arm_fault+0x260>)
   15ce8:	6214      	str	r4, [r2, #32]
   15cea:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   15cee:	f842 3f10 	str.w	r3, [r2, #16]!
   15cf2:	e753      	b.n	15b9c <z_arm_fault+0xbc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15cf4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   15cf8:	f023 0301 	bic.w	r3, r3, #1
   15cfc:	e7ae      	b.n	15c5c <z_arm_fault+0x17c>
   15cfe:	bf00      	nop
   15d00:	e000ed00 	.word	0xe000ed00
   15d04:	00031b75 	.word	0x00031b75
   15d08:	00031ccb 	.word	0x00031ccb
   15d0c:	0002fce4 	.word	0x0002fce4
   15d10:	00031ba4 	.word	0x00031ba4
   15d14:	00031cc0 	.word	0x00031cc0
   15d18:	00031bbf 	.word	0x00031bbf
   15d1c:	00031be4 	.word	0x00031be4
   15d20:	00031bf6 	.word	0x00031bf6
   15d24:	00031c19 	.word	0x00031c19
   15d28:	00031c39 	.word	0x00031c39
   15d2c:	00031c8b 	.word	0x00031c8b
   15d30:	00031b5c 	.word	0x00031b5c
   15d34:	00031b47 	.word	0x00031b47
   15d38:	00031c61 	.word	0x00031c61
   15d3c:	00031c78 	.word	0x00031c78
   15d40:	01000005 	.word	0x01000005

00015d44 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   15d44:	4a02      	ldr	r2, [pc, #8]	; (15d50 <z_arm_fault_init+0xc>)
   15d46:	6953      	ldr	r3, [r2, #20]
   15d48:	f043 0310 	orr.w	r3, r3, #16
   15d4c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   15d4e:	4770      	bx	lr
   15d50:	e000ed00 	.word	0xe000ed00

00015d54 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   15d54:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   15d58:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   15d5c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   15d5e:	4672      	mov	r2, lr
	bl z_arm_fault
   15d60:	f7ff febe 	bl	15ae0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   15d64:	bd01      	pop	{r0, pc}
   15d66:	bf00      	nop

00015d68 <z_arm_interrupt_init>:
   15d68:	4804      	ldr	r0, [pc, #16]	; (15d7c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   15d6a:	2300      	movs	r3, #0
   15d6c:	2140      	movs	r1, #64	; 0x40
   15d6e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   15d70:	3301      	adds	r3, #1
   15d72:	2b30      	cmp	r3, #48	; 0x30
   15d74:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   15d78:	d1f9      	bne.n	15d6e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   15d7a:	4770      	bx	lr
   15d7c:	e000e100 	.word	0xe000e100

00015d80 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   15d80:	2000      	movs	r0, #0
    msr CONTROL, r0
   15d82:	f380 8814 	msr	CONTROL, r0
    isb
   15d86:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   15d8a:	f7fd fb29 	bl	133e0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   15d8e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   15d90:	490d      	ldr	r1, [pc, #52]	; (15dc8 <__start+0x48>)
    str r0, [r1]
   15d92:	6008      	str	r0, [r1, #0]
    dsb
   15d94:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15d98:	480c      	ldr	r0, [pc, #48]	; (15dcc <__start+0x4c>)
    msr msp, r0
   15d9a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   15d9e:	f000 f82b 	bl	15df8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15da2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   15da4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   15da8:	4809      	ldr	r0, [pc, #36]	; (15dd0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   15daa:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   15dae:	1840      	adds	r0, r0, r1
    msr PSP, r0
   15db0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   15db4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   15db8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   15dba:	4308      	orrs	r0, r1
    msr CONTROL, r0
   15dbc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   15dc0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   15dc4:	f7ff fb5e 	bl	15484 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   15dc8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15dcc:	20008400 	.word	0x20008400
    ldr r0, =z_interrupt_stacks
   15dd0:	20007240 	.word	0x20007240

00015dd4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   15dd4:	4907      	ldr	r1, [pc, #28]	; (15df4 <z_arm_clear_arm_mpu_config+0x20>)
   15dd6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   15dda:	2300      	movs	r3, #0
	int num_regions =
   15ddc:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   15de0:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   15de2:	4293      	cmp	r3, r2
   15de4:	db00      	blt.n	15de8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   15de6:	4770      	bx	lr
  MPU->RNR = rnr;
   15de8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   15dec:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   15df0:	3301      	adds	r3, #1
   15df2:	e7f6      	b.n	15de2 <z_arm_clear_arm_mpu_config+0xe>
   15df4:	e000ed00 	.word	0xe000ed00

00015df8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   15df8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   15dfa:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   15dfc:	2300      	movs	r3, #0
   15dfe:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   15e02:	f7ff ffe7 	bl	15dd4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   15e06:	4b14      	ldr	r3, [pc, #80]	; (15e58 <z_arm_init_arch_hw_at_boot+0x60>)
   15e08:	f04f 32ff 	mov.w	r2, #4294967295
   15e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   15e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   15e14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   15e18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   15e1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   15e20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   15e24:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   15e28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   15e2c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   15e30:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   15e34:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   15e38:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   15e3c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   15e40:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   15e44:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   15e48:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   15e4c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   15e4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15e52:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   15e56:	bd08      	pop	{r3, pc}
   15e58:	e000e100 	.word	0xe000e100

00015e5c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   15e5c:	4b08      	ldr	r3, [pc, #32]	; (15e80 <z_impl_k_thread_abort+0x24>)
   15e5e:	689b      	ldr	r3, [r3, #8]
   15e60:	4283      	cmp	r3, r0
   15e62:	d10b      	bne.n	15e7c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15e64:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   15e68:	b143      	cbz	r3, 15e7c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15e6a:	4b06      	ldr	r3, [pc, #24]	; (15e84 <z_impl_k_thread_abort+0x28>)
   15e6c:	685a      	ldr	r2, [r3, #4]
   15e6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   15e72:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   15e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   15e76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   15e7a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   15e7c:	f00f bf96 	b.w	25dac <z_thread_abort>
   15e80:	20003804 	.word	0x20003804
   15e84:	e000ed00 	.word	0xe000ed00

00015e88 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   15e88:	4b02      	ldr	r3, [pc, #8]	; (15e94 <z_arm_configure_static_mpu_regions+0xc>)
   15e8a:	4a03      	ldr	r2, [pc, #12]	; (15e98 <z_arm_configure_static_mpu_regions+0x10>)
   15e8c:	4803      	ldr	r0, [pc, #12]	; (15e9c <z_arm_configure_static_mpu_regions+0x14>)
   15e8e:	2101      	movs	r1, #1
   15e90:	f000 b89a 	b.w	15fc8 <arm_core_mpu_configure_static_mpu_regions>
   15e94:	20040000 	.word	0x20040000
   15e98:	20000000 	.word	0x20000000
   15e9c:	0003006c 	.word	0x0003006c

00015ea0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   15ea0:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   15ea2:	4b05      	ldr	r3, [pc, #20]	; (15eb8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   15ea4:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   15ea6:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   15ea8:	4a04      	ldr	r2, [pc, #16]	; (15ebc <z_arm_configure_dynamic_mpu_regions+0x1c>)
   15eaa:	2140      	movs	r1, #64	; 0x40
   15eac:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   15eb0:	4618      	mov	r0, r3
   15eb2:	2101      	movs	r1, #1
   15eb4:	f000 b892 	b.w	15fdc <arm_core_mpu_configure_dynamic_mpu_regions>
   15eb8:	2000337c 	.word	0x2000337c
   15ebc:	150b0000 	.word	0x150b0000

00015ec0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   15ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   15ec4:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 15f84 <mpu_configure_regions+0xc4>
   15ec8:	469c      	mov	ip, r3
   15eca:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   15ecc:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   15ece:	2300      	movs	r3, #0
   15ed0:	428b      	cmp	r3, r1
   15ed2:	da1c      	bge.n	15f0e <mpu_configure_regions+0x4e>
		if (regions[i].size == 0U) {
   15ed4:	6844      	ldr	r4, [r0, #4]
   15ed6:	2c00      	cmp	r4, #0
   15ed8:	d051      	beq.n	15f7e <mpu_configure_regions+0xbe>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   15eda:	f1bc 0f00 	cmp.w	ip, #0
   15ede:	d01f      	beq.n	15f20 <mpu_configure_regions+0x60>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   15ee0:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   15ee2:	4234      	tst	r4, r6
   15ee4:	d017      	beq.n	15f16 <mpu_configure_regions+0x56>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   15ee6:	466c      	mov	r4, sp
   15ee8:	b088      	sub	sp, #32
   15eea:	466a      	mov	r2, sp
   15eec:	4926      	ldr	r1, [pc, #152]	; (15f88 <mpu_configure_regions+0xc8>)
   15eee:	6151      	str	r1, [r2, #20]
   15ef0:	4926      	ldr	r1, [pc, #152]	; (15f8c <mpu_configure_regions+0xcc>)
   15ef2:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15ef6:	2304      	movs	r3, #4
   15ef8:	f842 3f10 	str.w	r3, [r2, #16]!
   15efc:	4824      	ldr	r0, [pc, #144]	; (15f90 <mpu_configure_regions+0xd0>)
   15efe:	2300      	movs	r3, #0
   15f00:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15f04:	f7fe f894 	bl	14030 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   15f08:	f06f 0515 	mvn.w	r5, #21
   15f0c:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   15f0e:	4628      	mov	r0, r5
   15f10:	46bd      	mov	sp, r7
   15f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   15f16:	2c1f      	cmp	r4, #31
   15f18:	d9e5      	bls.n	15ee6 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   15f1a:	6802      	ldr	r2, [r0, #0]
		&&
   15f1c:	4216      	tst	r6, r2
   15f1e:	d1e2      	bne.n	15ee6 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   15f20:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   15f22:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   15f24:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   15f26:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   15f2a:	d916      	bls.n	15f5a <mpu_configure_regions+0x9a>
	if (size > (1UL << 31)) {
   15f2c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   15f30:	d815      	bhi.n	15f5e <mpu_configure_regions+0x9e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   15f32:	3c01      	subs	r4, #1
   15f34:	fab4 f484 	clz	r4, r4
   15f38:	f1c4 041f 	rsb	r4, r4, #31
   15f3c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   15f3e:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   15f42:	ea46 0604 	orr.w	r6, r6, r4
   15f46:	d90c      	bls.n	15f62 <mpu_configure_regions+0xa2>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15f48:	466c      	mov	r4, sp
   15f4a:	b088      	sub	sp, #32
   15f4c:	466a      	mov	r2, sp
   15f4e:	4b11      	ldr	r3, [pc, #68]	; (15f94 <mpu_configure_regions+0xd4>)
   15f50:	6153      	str	r3, [r2, #20]
   15f52:	4b11      	ldr	r3, [pc, #68]	; (15f98 <mpu_configure_regions+0xd8>)
   15f54:	e9c2 3506 	strd	r3, r5, [r2, #24]
   15f58:	e7cd      	b.n	15ef6 <mpu_configure_regions+0x36>
		return REGION_32B;
   15f5a:	2408      	movs	r4, #8
   15f5c:	e7ef      	b.n	15f3e <mpu_configure_regions+0x7e>
		return REGION_4G;
   15f5e:	243e      	movs	r4, #62	; 0x3e
   15f60:	e7ed      	b.n	15f3e <mpu_configure_regions+0x7e>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15f62:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   15f66:	432a      	orrs	r2, r5
   15f68:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15f6c:	f046 0601 	orr.w	r6, r6, #1
   15f70:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15f74:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   15f78:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15f7a:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   15f7e:	3301      	adds	r3, #1
   15f80:	300c      	adds	r0, #12
   15f82:	e7a5      	b.n	15ed0 <mpu_configure_regions+0x10>
   15f84:	e000ed00 	.word	0xe000ed00
   15f88:	00031cd7 	.word	0x00031cd7
   15f8c:	00031d41 	.word	0x00031d41
   15f90:	0002fcc4 	.word	0x0002fcc4
   15f94:	00031cfe 	.word	0x00031cfe
   15f98:	00031d28 	.word	0x00031d28

00015f9c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   15f9c:	4b04      	ldr	r3, [pc, #16]	; (15fb0 <arm_core_mpu_enable+0x14>)
   15f9e:	2205      	movs	r2, #5
   15fa0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   15fa4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15fa8:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   15fac:	4770      	bx	lr
   15fae:	bf00      	nop
   15fb0:	e000ed00 	.word	0xe000ed00

00015fb4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   15fb4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15fb8:	4b02      	ldr	r3, [pc, #8]	; (15fc4 <arm_core_mpu_disable+0x10>)
   15fba:	2200      	movs	r2, #0
   15fbc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   15fc0:	4770      	bx	lr
   15fc2:	bf00      	nop
   15fc4:	e000ed00 	.word	0xe000ed00

00015fc8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   15fc8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   15fca:	4c03      	ldr	r4, [pc, #12]	; (15fd8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   15fcc:	2301      	movs	r3, #1
   15fce:	7822      	ldrb	r2, [r4, #0]
   15fd0:	f7ff ff76 	bl	15ec0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15fd4:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   15fd6:	bd10      	pop	{r4, pc}
   15fd8:	20004345 	.word	0x20004345

00015fdc <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   15fdc:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   15fde:	4a09      	ldr	r2, [pc, #36]	; (16004 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   15fe0:	2300      	movs	r3, #0
   15fe2:	7812      	ldrb	r2, [r2, #0]
   15fe4:	f7ff ff6c 	bl	15ec0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   15fe8:	f110 0f16 	cmn.w	r0, #22
   15fec:	d003      	beq.n	15ff6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   15fee:	4b06      	ldr	r3, [pc, #24]	; (16008 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
   15ff0:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   15ff2:	2807      	cmp	r0, #7
   15ff4:	dd00      	ble.n	15ff8 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   15ff6:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   15ff8:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   15ffc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   16000:	3001      	adds	r0, #1
   16002:	e7f6      	b.n	15ff2 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   16004:	20004345 	.word	0x20004345
   16008:	e000ed00 	.word	0xe000ed00

0001600c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1600c:	4914      	ldr	r1, [pc, #80]	; (16060 <z_arm_mpu_init+0x54>)
   1600e:	6808      	ldr	r0, [r1, #0]
   16010:	2808      	cmp	r0, #8
{
   16012:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   16014:	d821      	bhi.n	1605a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   16016:	f7ff ffcd 	bl	15fb4 <arm_core_mpu_disable>
   1601a:	4c12      	ldr	r4, [pc, #72]	; (16064 <z_arm_mpu_init+0x58>)
   1601c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1601e:	2200      	movs	r2, #0
   16020:	4290      	cmp	r0, r2
   16022:	f101 010c 	add.w	r1, r1, #12
   16026:	d105      	bne.n	16034 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   16028:	4b0f      	ldr	r3, [pc, #60]	; (16068 <z_arm_mpu_init+0x5c>)
   1602a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   1602c:	f7ff ffb6 	bl	15f9c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   16030:	2000      	movs	r0, #0
}
   16032:	bd10      	pop	{r4, pc}
   16034:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16038:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   1603c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   16040:	4313      	orrs	r3, r2
   16042:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16046:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1604a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1604e:	f043 0301 	orr.w	r3, r3, #1
   16052:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   16056:	3201      	adds	r2, #1
   16058:	e7e2      	b.n	16020 <z_arm_mpu_init+0x14>
		return -1;
   1605a:	f04f 30ff 	mov.w	r0, #4294967295
   1605e:	e7e8      	b.n	16032 <z_arm_mpu_init+0x26>
   16060:	00030078 	.word	0x00030078
   16064:	e000ed00 	.word	0xe000ed00
   16068:	20004345 	.word	0x20004345

0001606c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   1606c:	4b01      	ldr	r3, [pc, #4]	; (16074 <__stdout_hook_install+0x8>)
   1606e:	6018      	str	r0, [r3, #0]
}
   16070:	4770      	bx	lr
   16072:	bf00      	nop
   16074:	20000538 	.word	0x20000538

00016078 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
   16078:	b510      	push	{r4, lr}
	__asm__ volatile(
   1607a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1607e:	f3ef 8011 	mrs	r0, BASEPRI
   16082:	f383 8812 	msr	BASEPRI_MAX, r3
   16086:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1608a:	4a11      	ldr	r2, [pc, #68]	; (160d0 <nordicsemi_nrf52_init+0x58>)
   1608c:	2301      	movs	r3, #1
   1608e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   16092:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   16096:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1609a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1609e:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   160a2:	2c08      	cmp	r4, #8
   160a4:	d108      	bne.n	160b8 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   160a6:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   160aa:	2905      	cmp	r1, #5
   160ac:	d804      	bhi.n	160b8 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   160ae:	4c09      	ldr	r4, [pc, #36]	; (160d4 <nordicsemi_nrf52_init+0x5c>)
   160b0:	5c61      	ldrb	r1, [r4, r1]
   160b2:	b109      	cbz	r1, 160b8 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   160b4:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   160b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   160bc:	2201      	movs	r2, #1
   160be:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   160c2:	f380 8811 	msr	BASEPRI, r0
   160c6:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   160ca:	2000      	movs	r0, #0
   160cc:	bd10      	pop	{r4, pc}
   160ce:	bf00      	nop
   160d0:	4001e000 	.word	0x4001e000
   160d4:	00031d66 	.word	0x00031d66

000160d8 <sys_arch_reboot>:
    *p_gpregret = val;
   160d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   160dc:	b2c0      	uxtb	r0, r0
   160de:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   160e2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   160e6:	4905      	ldr	r1, [pc, #20]	; (160fc <sys_arch_reboot+0x24>)
   160e8:	4b05      	ldr	r3, [pc, #20]	; (16100 <sys_arch_reboot+0x28>)
   160ea:	68ca      	ldr	r2, [r1, #12]
   160ec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   160f0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   160f2:	60cb      	str	r3, [r1, #12]
   160f4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   160f8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   160fa:	e7fd      	b.n	160f8 <sys_arch_reboot+0x20>
   160fc:	e000ed00 	.word	0xe000ed00
   16100:	05fa0004 	.word	0x05fa0004

00016104 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   16104:	b120      	cbz	r0, 16110 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   16106:	4b03      	ldr	r3, [pc, #12]	; (16114 <arch_busy_wait+0x10>)
   16108:	0180      	lsls	r0, r0, #6
   1610a:	f043 0301 	orr.w	r3, r3, #1
   1610e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   16110:	4770      	bx	lr
   16112:	bf00      	nop
   16114:	0002fea0 	.word	0x0002fea0

00016118 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
   16118:	b508      	push	{r3, lr}
   1611a:	4804      	ldr	r0, [pc, #16]	; (1612c <xoshiro128_initialize+0x14>)
   1611c:	f018 fdd1 	bl	2ecc2 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   16120:	2800      	cmp	r0, #0
}
   16122:	bf0c      	ite	eq
   16124:	f06f 0012 	mvneq.w	r0, #18
   16128:	2000      	movne	r0, #0
   1612a:	bd08      	pop	{r3, pc}
   1612c:	0002f964 	.word	0x0002f964

00016130 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   16130:	4b0e      	ldr	r3, [pc, #56]	; (1616c <bt_hex+0x3c>)
   16132:	2940      	cmp	r1, #64	; 0x40
{
   16134:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   16136:	bf28      	it	cs
   16138:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   1613a:	4c0d      	ldr	r4, [pc, #52]	; (16170 <bt_hex+0x40>)
   1613c:	1846      	adds	r6, r0, r1
   1613e:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   16140:	42b0      	cmp	r0, r6
   16142:	f103 0302 	add.w	r3, r3, #2
   16146:	d104      	bne.n	16152 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   16148:	2300      	movs	r3, #0
   1614a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   1614e:	4807      	ldr	r0, [pc, #28]	; (1616c <bt_hex+0x3c>)
   16150:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   16152:	7802      	ldrb	r2, [r0, #0]
   16154:	0912      	lsrs	r2, r2, #4
   16156:	5ca2      	ldrb	r2, [r4, r2]
   16158:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   1615c:	f810 2b01 	ldrb.w	r2, [r0], #1
   16160:	f002 020f 	and.w	r2, r2, #15
   16164:	5ca2      	ldrb	r2, [r4, r2]
   16166:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1616a:	e7e9      	b.n	16140 <bt_hex+0x10>
   1616c:	20004364 	.word	0x20004364
   16170:	00031d83 	.word	0x00031d83

00016174 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   16174:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   16176:	7803      	ldrb	r3, [r0, #0]
   16178:	b08b      	sub	sp, #44	; 0x2c
   1617a:	4604      	mov	r4, r0
   1617c:	ad07      	add	r5, sp, #28
   1617e:	2b03      	cmp	r3, #3
   16180:	d821      	bhi.n	161c6 <bt_addr_le_str+0x52>
   16182:	e8df f003 	tbb	[pc, r3]
   16186:	1a02      	.short	0x1a02
   16188:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   1618a:	4912      	ldr	r1, [pc, #72]	; (161d4 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   1618c:	4628      	mov	r0, r5
   1618e:	f015 fd26 	bl	2bbde <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   16192:	9505      	str	r5, [sp, #20]
   16194:	7863      	ldrb	r3, [r4, #1]
   16196:	9304      	str	r3, [sp, #16]
   16198:	78a3      	ldrb	r3, [r4, #2]
   1619a:	9303      	str	r3, [sp, #12]
   1619c:	78e3      	ldrb	r3, [r4, #3]
   1619e:	9302      	str	r3, [sp, #8]
   161a0:	7923      	ldrb	r3, [r4, #4]
   161a2:	9301      	str	r3, [sp, #4]
   161a4:	7963      	ldrb	r3, [r4, #5]
   161a6:	9300      	str	r3, [sp, #0]
   161a8:	79a3      	ldrb	r3, [r4, #6]
   161aa:	4a0b      	ldr	r2, [pc, #44]	; (161d8 <bt_addr_le_str+0x64>)
   161ac:	480b      	ldr	r0, [pc, #44]	; (161dc <bt_addr_le_str+0x68>)
   161ae:	211e      	movs	r1, #30
   161b0:	f013 f9bb 	bl	2952a <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   161b4:	4809      	ldr	r0, [pc, #36]	; (161dc <bt_addr_le_str+0x68>)
   161b6:	b00b      	add	sp, #44	; 0x2c
   161b8:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   161ba:	4909      	ldr	r1, [pc, #36]	; (161e0 <bt_addr_le_str+0x6c>)
   161bc:	e7e6      	b.n	1618c <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   161be:	4909      	ldr	r1, [pc, #36]	; (161e4 <bt_addr_le_str+0x70>)
   161c0:	e7e4      	b.n	1618c <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   161c2:	4909      	ldr	r1, [pc, #36]	; (161e8 <bt_addr_le_str+0x74>)
   161c4:	e7e2      	b.n	1618c <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   161c6:	4a09      	ldr	r2, [pc, #36]	; (161ec <bt_addr_le_str+0x78>)
   161c8:	210a      	movs	r1, #10
   161ca:	4628      	mov	r0, r5
   161cc:	f013 f9ad 	bl	2952a <snprintk>
		break;
   161d0:	e7df      	b.n	16192 <bt_addr_le_str+0x1e>
   161d2:	bf00      	nop
   161d4:	00030e78 	.word	0x00030e78
   161d8:	00030e9a 	.word	0x00030e9a
   161dc:	20004346 	.word	0x20004346
   161e0:	00030e7f 	.word	0x00030e7f
   161e4:	00030e86 	.word	0x00030e86
   161e8:	00030e90 	.word	0x00030e90
   161ec:	000342a1 	.word	0x000342a1

000161f0 <ecc_process>:

	bt_recv(buf);
}

static void ecc_process(struct k_work *work)
{
   161f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   161f4:	4d6e      	ldr	r5, [pc, #440]	; (163b0 <ecc_process+0x1c0>)
   161f6:	f3bf 8f5b 	dmb	ish
   161fa:	682c      	ldr	r4, [r5, #0]
   161fc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   16200:	f014 0401 	ands.w	r4, r4, #1
{
   16204:	af00      	add	r7, sp, #0
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   16206:	d068      	beq.n	162da <ecc_process+0xea>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   16208:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 163b4 <ecc_process+0x1c4>
   1620c:	4c6a      	ldr	r4, [pc, #424]	; (163b8 <ecc_process+0x1c8>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   1620e:	4e6b      	ldr	r6, [pc, #428]	; (163bc <ecc_process+0x1cc>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   16210:	486b      	ldr	r0, [pc, #428]	; (163c0 <ecc_process+0x1d0>)
   16212:	4642      	mov	r2, r8
   16214:	4621      	mov	r1, r4
   16216:	f014 fb42 	bl	2a89e <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   1621a:	4603      	mov	r3, r0
   1621c:	2800      	cmp	r0, #0
   1621e:	d149      	bne.n	162b4 <ecc_process+0xc4>
			LOG_ERR("Failed to create ECC public/private pair");
   16220:	466c      	mov	r4, sp
   16222:	b088      	sub	sp, #32
   16224:	466a      	mov	r2, sp
   16226:	4967      	ldr	r1, [pc, #412]	; (163c4 <ecc_process+0x1d4>)
   16228:	6151      	str	r1, [r2, #20]
   1622a:	4967      	ldr	r1, [pc, #412]	; (163c8 <ecc_process+0x1d8>)
   1622c:	6191      	str	r1, [r2, #24]
   1622e:	2103      	movs	r1, #3
   16230:	f842 1f10 	str.w	r1, [r2, #16]!
   16234:	4865      	ldr	r0, [pc, #404]	; (163cc <ecc_process+0x1dc>)
   16236:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1623a:	f7fd fef9 	bl	14030 <z_impl_z_log_msg_static_create>
			return BT_HCI_ERR_UNSPECIFIED;
   1623e:	f04f 081f 	mov.w	r8, #31
   16242:	46a5      	mov	sp, r4
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   16244:	f04f 32ff 	mov.w	r2, #4294967295
   16248:	f04f 33ff 	mov.w	r3, #4294967295
   1624c:	2001      	movs	r0, #1
   1624e:	f000 fb47 	bl	168e0 <bt_buf_get_rx>
   16252:	f100 060c 	add.w	r6, r0, #12
   16256:	2102      	movs	r1, #2
   16258:	4604      	mov	r4, r0
   1625a:	4630      	mov	r0, r6
   1625c:	f018 f8e9 	bl	2e432 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   16260:	233e      	movs	r3, #62	; 0x3e
   16262:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   16264:	2342      	movs	r3, #66	; 0x42
   16266:	7043      	strb	r3, [r0, #1]
   16268:	2101      	movs	r1, #1
   1626a:	4630      	mov	r0, r6
   1626c:	f018 f8e1 	bl	2e432 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   16270:	2308      	movs	r3, #8
   16272:	7003      	strb	r3, [r0, #0]
   16274:	2141      	movs	r1, #65	; 0x41
   16276:	4630      	mov	r0, r6
   16278:	f018 f8db 	bl	2e432 <net_buf_simple_add>
   1627c:	4606      	mov	r6, r0
	evt->status = status;
   1627e:	f800 8b01 	strb.w	r8, [r0], #1
	if (status) {
   16282:	f1b8 0f00 	cmp.w	r8, #0
   16286:	d01f      	beq.n	162c8 <ecc_process+0xd8>
		(void)memset(evt->key, 0, sizeof(evt->key));
   16288:	2240      	movs	r2, #64	; 0x40
   1628a:	2100      	movs	r1, #0
   1628c:	f015 fd13 	bl	2bcb6 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16290:	f3bf 8f5b 	dmb	ish
   16294:	e855 3f00 	ldrex	r3, [r5]
   16298:	f023 0301 	bic.w	r3, r3, #1
   1629c:	e845 3200 	strex	r2, r3, [r5]
   162a0:	2a00      	cmp	r2, #0
   162a2:	d1f7      	bne.n	16294 <ecc_process+0xa4>
   162a4:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   162a8:	4620      	mov	r0, r4
	bt_recv(buf);
   162aa:	f001 febb 	bl	18024 <bt_recv>
	} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
		emulate_le_generate_dhkey();
	} else {
		__ASSERT(0, "Unhandled ECC command");
	}
}
   162ae:	46bd      	mov	sp, r7
   162b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   162b4:	2220      	movs	r2, #32
   162b6:	4631      	mov	r1, r6
   162b8:	4620      	mov	r0, r4
   162ba:	f015 fcca 	bl	2bc52 <memcmp>
   162be:	2800      	cmp	r0, #0
   162c0:	d0a6      	beq.n	16210 <ecc_process+0x20>
	return 0;
   162c2:	f04f 0800 	mov.w	r8, #0
   162c6:	e7bd      	b.n	16244 <ecc_process+0x54>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   162c8:	493d      	ldr	r1, [pc, #244]	; (163c0 <ecc_process+0x1d0>)
   162ca:	f015 fd66 	bl	2bd9a <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   162ce:	3120      	adds	r1, #32
   162d0:	f106 0021 	add.w	r0, r6, #33	; 0x21
   162d4:	f015 fd61 	bl	2bd9a <sys_memcpy_swap.constprop.0>
   162d8:	e7da      	b.n	16290 <ecc_process+0xa0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   162da:	f3bf 8f5b 	dmb	ish
   162de:	682b      	ldr	r3, [r5, #0]
   162e0:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   162e4:	079b      	lsls	r3, r3, #30
   162e6:	d5e2      	bpl.n	162ae <ecc_process+0xbe>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   162e8:	4932      	ldr	r1, [pc, #200]	; (163b4 <ecc_process+0x1c4>)
   162ea:	4835      	ldr	r0, [pc, #212]	; (163c0 <ecc_process+0x1d0>)
   162ec:	f015 f995 	bl	2b61a <uECC_valid_public_key>
	if (ret < 0) {
   162f0:	2800      	cmp	r0, #0
   162f2:	da44      	bge.n	1637e <ecc_process+0x18e>
		LOG_ERR("public key is not valid (ret %d)", ret);
   162f4:	466e      	mov	r6, sp
   162f6:	b088      	sub	sp, #32
   162f8:	466a      	mov	r2, sp
   162fa:	4b35      	ldr	r3, [pc, #212]	; (163d0 <ecc_process+0x1e0>)
   162fc:	6153      	str	r3, [r2, #20]
   162fe:	4b35      	ldr	r3, [pc, #212]	; (163d4 <ecc_process+0x1e4>)
   16300:	e9c2 3006 	strd	r3, r0, [r2, #24]
   16304:	2304      	movs	r3, #4
   16306:	f842 3f10 	str.w	r3, [r2, #16]!
   1630a:	4830      	ldr	r0, [pc, #192]	; (163cc <ecc_process+0x1dc>)
   1630c:	4623      	mov	r3, r4
   1630e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16312:	f7fd fe8d 	bl	14030 <z_impl_z_log_msg_static_create>
   16316:	46b5      	mov	sp, r6
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   16318:	f04f 32ff 	mov.w	r2, #4294967295
   1631c:	f04f 33ff 	mov.w	r3, #4294967295
   16320:	2001      	movs	r0, #1
   16322:	f000 fadd 	bl	168e0 <bt_buf_get_rx>
   16326:	f100 080c 	add.w	r8, r0, #12
   1632a:	2102      	movs	r1, #2
   1632c:	4606      	mov	r6, r0
   1632e:	4640      	mov	r0, r8
   16330:	f018 f87f 	bl	2e432 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   16334:	233e      	movs	r3, #62	; 0x3e
   16336:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   16338:	2322      	movs	r3, #34	; 0x22
   1633a:	7043      	strb	r3, [r0, #1]
   1633c:	2101      	movs	r1, #1
   1633e:	4640      	mov	r0, r8
   16340:	f018 f877 	bl	2e432 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   16344:	2309      	movs	r3, #9
   16346:	7003      	strb	r3, [r0, #0]
   16348:	2121      	movs	r1, #33	; 0x21
   1634a:	4640      	mov	r0, r8
   1634c:	f018 f871 	bl	2e432 <net_buf_simple_add>
   16350:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   16352:	3001      	adds	r0, #1
   16354:	bb34      	cbnz	r4, 163a4 <ecc_process+0x1b4>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   16356:	221f      	movs	r2, #31
   16358:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1635a:	21ff      	movs	r1, #255	; 0xff
   1635c:	2220      	movs	r2, #32
   1635e:	f015 fcaa 	bl	2bcb6 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16362:	f3bf 8f5b 	dmb	ish
   16366:	e855 3f00 	ldrex	r3, [r5]
   1636a:	f023 0302 	bic.w	r3, r3, #2
   1636e:	e845 3200 	strex	r2, r3, [r5]
   16372:	2a00      	cmp	r2, #0
   16374:	d1f7      	bne.n	16366 <ecc_process+0x176>
   16376:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   1637a:	4630      	mov	r0, r6
   1637c:	e795      	b.n	162aa <ecc_process+0xba>
		ret = uECC_shared_secret(ecc.public_key_be,
   1637e:	490e      	ldr	r1, [pc, #56]	; (163b8 <ecc_process+0x1c8>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16380:	f3bf 8f5b 	dmb	ish
   16384:	682b      	ldr	r3, [r5, #0]
   16386:	480d      	ldr	r0, [pc, #52]	; (163bc <ecc_process+0x1cc>)
   16388:	f3bf 8f5b 	dmb	ish
   1638c:	f013 0f04 	tst.w	r3, #4
   16390:	f101 0220 	add.w	r2, r1, #32
   16394:	4b07      	ldr	r3, [pc, #28]	; (163b4 <ecc_process+0x1c4>)
   16396:	bf18      	it	ne
   16398:	4601      	movne	r1, r0
   1639a:	4610      	mov	r0, r2
   1639c:	f014 face 	bl	2a93c <uECC_shared_secret>
   163a0:	4604      	mov	r4, r0
   163a2:	e7b9      	b.n	16318 <ecc_process+0x128>
		evt->status = 0U;
   163a4:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   163a6:	4906      	ldr	r1, [pc, #24]	; (163c0 <ecc_process+0x1d0>)
		evt->status = 0U;
   163a8:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   163aa:	f015 fcf6 	bl	2bd9a <sys_memcpy_swap.constprop.0>
   163ae:	e7d8      	b.n	16362 <ecc_process+0x172>
   163b0:	20003388 	.word	0x20003388
   163b4:	00030098 	.word	0x00030098
   163b8:	200043e5 	.word	0x200043e5
   163bc:	00031e15 	.word	0x00031e15
   163c0:	20004405 	.word	0x20004405
   163c4:	00031d9b 	.word	0x00031d9b
   163c8:	00031e07 	.word	0x00031e07
   163cc:	0002fc1c 	.word	0x0002fc1c
   163d0:	00031dc8 	.word	0x00031dc8
   163d4:	00031ded 	.word	0x00031ded

000163d8 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   163d8:	b570      	push	{r4, r5, r6, lr}
   163da:	4c21      	ldr	r4, [pc, #132]	; (16460 <le_gen_dhkey+0x88>)
   163dc:	f3bf 8f5b 	dmb	ish
   163e0:	6823      	ldr	r3, [r4, #0]
   163e2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   163e6:	07da      	lsls	r2, r3, #31
{
   163e8:	4606      	mov	r6, r0
   163ea:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   163ec:	d501      	bpl.n	163f2 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   163ee:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	bt_long_wq_submit(&ecc_work);

	return BT_HCI_ERR_SUCCESS;
}
   163f0:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   163f2:	2901      	cmp	r1, #1
   163f4:	d831      	bhi.n	1645a <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   163f6:	f3bf 8f5b 	dmb	ish
   163fa:	e854 3f00 	ldrex	r3, [r4]
   163fe:	f043 0202 	orr.w	r2, r3, #2
   16402:	e844 2100 	strex	r1, r2, [r4]
   16406:	2900      	cmp	r1, #0
   16408:	d1f7      	bne.n	163fa <le_gen_dhkey+0x22>
   1640a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   1640e:	079b      	lsls	r3, r3, #30
   16410:	d4ed      	bmi.n	163ee <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   16412:	4814      	ldr	r0, [pc, #80]	; (16464 <le_gen_dhkey+0x8c>)
   16414:	4631      	mov	r1, r6
   16416:	f015 fcc0 	bl	2bd9a <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   1641a:	4813      	ldr	r0, [pc, #76]	; (16468 <le_gen_dhkey+0x90>)
   1641c:	f106 0120 	add.w	r1, r6, #32
   16420:	f015 fcbb 	bl	2bd9a <sys_memcpy_swap.constprop.0>
   16424:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   16428:	b175      	cbz	r5, 16448 <le_gen_dhkey+0x70>
   1642a:	e854 3f00 	ldrex	r3, [r4]
   1642e:	f043 0304 	orr.w	r3, r3, #4
   16432:	e844 3200 	strex	r2, r3, [r4]
   16436:	2a00      	cmp	r2, #0
   16438:	d1f7      	bne.n	1642a <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1643a:	f3bf 8f5b 	dmb	ish
	bt_long_wq_submit(&ecc_work);
   1643e:	480b      	ldr	r0, [pc, #44]	; (1646c <le_gen_dhkey+0x94>)
   16440:	f000 fa12 	bl	16868 <bt_long_wq_submit>
   16444:	2000      	movs	r0, #0
   16446:	e7d3      	b.n	163f0 <le_gen_dhkey+0x18>
   16448:	e854 3f00 	ldrex	r3, [r4]
   1644c:	f023 0304 	bic.w	r3, r3, #4
   16450:	e844 3200 	strex	r2, r3, [r4]
   16454:	2a00      	cmp	r2, #0
   16456:	d0f0      	beq.n	1643a <le_gen_dhkey+0x62>
   16458:	e7f6      	b.n	16448 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   1645a:	2012      	movs	r0, #18
   1645c:	e7c8      	b.n	163f0 <le_gen_dhkey+0x18>
   1645e:	bf00      	nop
   16460:	20003388 	.word	0x20003388
   16464:	20004405 	.word	0x20004405
   16468:	20004425 	.word	0x20004425
   1646c:	2000053c 	.word	0x2000053c

00016470 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   16470:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16472:	7e06      	ldrb	r6, [r0, #24]
   16474:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   16476:	b976      	cbnz	r6, 16496 <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   16478:	68c3      	ldr	r3, [r0, #12]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   1647a:	881d      	ldrh	r5, [r3, #0]
   1647c:	f242 0226 	movw	r2, #8230	; 0x2026
   16480:	4295      	cmp	r5, r2
   16482:	d045      	beq.n	16510 <bt_hci_ecc_send+0xa0>
   16484:	d80f      	bhi.n	164a6 <bt_hci_ecc_send+0x36>
   16486:	f242 0201 	movw	r2, #8193	; 0x2001
   1648a:	4295      	cmp	r5, r2
   1648c:	d04f      	beq.n	1652e <bt_hci_ecc_send+0xbe>
   1648e:	f242 0325 	movw	r3, #8229	; 0x2025
   16492:	429d      	cmp	r5, r3
   16494:	d013      	beq.n	164be <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   16496:	4b2a      	ldr	r3, [pc, #168]	; (16540 <bt_hci_ecc_send+0xd0>)
   16498:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   1649c:	4620      	mov	r0, r4
   1649e:	695b      	ldr	r3, [r3, #20]
}
   164a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   164a4:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   164a6:	f242 035e 	movw	r3, #8286	; 0x205e
   164aa:	429d      	cmp	r5, r3
   164ac:	d1f3      	bne.n	16496 <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   164ae:	2103      	movs	r1, #3
   164b0:	300c      	adds	r0, #12
   164b2:	f017 ffe7 	bl	2e484 <net_buf_simple_pull>
	cmd = (void *)buf->data;
   164b6:	68e0      	ldr	r0, [r4, #12]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   164b8:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   164bc:	e02e      	b.n	1651c <bt_hci_ecc_send+0xac>
   164be:	2103      	movs	r1, #3
   164c0:	300c      	adds	r0, #12
   164c2:	f017 ffdf 	bl	2e484 <net_buf_simple_pull>
	net_buf_unref(buf);
   164c6:	4620      	mov	r0, r4
   164c8:	f00a faaa 	bl	20a20 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   164cc:	f3bf 8f5b 	dmb	ish
   164d0:	4b1c      	ldr	r3, [pc, #112]	; (16544 <bt_hci_ecc_send+0xd4>)
   164d2:	681a      	ldr	r2, [r3, #0]
   164d4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   164d8:	0792      	lsls	r2, r2, #30
   164da:	d507      	bpl.n	164ec <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   164dc:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   164de:	4631      	mov	r1, r6
   164e0:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   164e4:	f015 fc35 	bl	2bd52 <send_cmd_status>
}
   164e8:	2000      	movs	r0, #0
   164ea:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   164ec:	f3bf 8f5b 	dmb	ish
   164f0:	e853 2f00 	ldrex	r2, [r3]
   164f4:	f042 0101 	orr.w	r1, r2, #1
   164f8:	e843 1000 	strex	r0, r1, [r3]
   164fc:	2800      	cmp	r0, #0
   164fe:	d1f7      	bne.n	164f0 <bt_hci_ecc_send+0x80>
   16500:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   16504:	07d3      	lsls	r3, r2, #31
   16506:	d4e9      	bmi.n	164dc <bt_hci_ecc_send+0x6c>
		bt_long_wq_submit(&ecc_work);
   16508:	480f      	ldr	r0, [pc, #60]	; (16548 <bt_hci_ecc_send+0xd8>)
   1650a:	f000 f9ad 	bl	16868 <bt_long_wq_submit>
		status = BT_HCI_ERR_SUCCESS;
   1650e:	e7e6      	b.n	164de <bt_hci_ecc_send+0x6e>
   16510:	2103      	movs	r1, #3
   16512:	300c      	adds	r0, #12
   16514:	f017 ffb6 	bl	2e484 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   16518:	68e0      	ldr	r0, [r4, #12]
   1651a:	4631      	mov	r1, r6
   1651c:	f7ff ff5c 	bl	163d8 <le_gen_dhkey>
   16520:	4606      	mov	r6, r0
	net_buf_unref(buf);
   16522:	4620      	mov	r0, r4
   16524:	f00a fa7c 	bl	20a20 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   16528:	4631      	mov	r1, r6
   1652a:	4628      	mov	r0, r5
   1652c:	e7da      	b.n	164e4 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   1652e:	78da      	ldrb	r2, [r3, #3]
   16530:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16534:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   16536:	791a      	ldrb	r2, [r3, #4]
   16538:	f022 0201 	bic.w	r2, r2, #1
   1653c:	711a      	strb	r2, [r3, #4]
}
   1653e:	e7aa      	b.n	16496 <bt_hci_ecc_send+0x26>
   16540:	20000388 	.word	0x20000388
   16544:	20003388 	.word	0x20003388
   16548:	2000053c 	.word	0x2000053c

0001654c <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   1654c:	b5b0      	push	{r4, r5, r7, lr}
   1654e:	af00      	add	r7, sp, #0
	int err;
	LOG_INF("Saving ID");
   16550:	466c      	mov	r4, sp
   16552:	b088      	sub	sp, #32
   16554:	466a      	mov	r2, sp
   16556:	4b14      	ldr	r3, [pc, #80]	; (165a8 <save_id+0x5c>)
   16558:	6153      	str	r3, [r2, #20]
   1655a:	4d14      	ldr	r5, [pc, #80]	; (165ac <save_id+0x60>)
   1655c:	6195      	str	r5, [r2, #24]
   1655e:	2303      	movs	r3, #3
   16560:	f842 3f10 	str.w	r3, [r2, #16]!
   16564:	4812      	ldr	r0, [pc, #72]	; (165b0 <save_id+0x64>)
   16566:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1656a:	2300      	movs	r3, #0
   1656c:	f7fd fd60 	bl	14030 <z_impl_z_log_msg_static_create>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   16570:	4910      	ldr	r1, [pc, #64]	; (165b4 <save_id+0x68>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   16572:	4811      	ldr	r0, [pc, #68]	; (165b8 <save_id+0x6c>)
   16574:	79ca      	ldrb	r2, [r1, #7]
   16576:	46a5      	mov	sp, r4
   16578:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   1657c:	f7fe fa5e 	bl	14a3c <settings_save_one>
	if (err) {
   16580:	b178      	cbz	r0, 165a2 <save_id+0x56>
		LOG_ERR("Failed to save ID (err %d)", err);
   16582:	b088      	sub	sp, #32
   16584:	466a      	mov	r2, sp
   16586:	4b0d      	ldr	r3, [pc, #52]	; (165bc <save_id+0x70>)
   16588:	61d0      	str	r0, [r2, #28]
   1658a:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1658e:	2304      	movs	r3, #4
   16590:	f842 3f10 	str.w	r3, [r2, #16]!
   16594:	4806      	ldr	r0, [pc, #24]	; (165b0 <save_id+0x64>)
   16596:	2300      	movs	r3, #0
   16598:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1659c:	f7fd fd48 	bl	14030 <z_impl_z_log_msg_static_create>
   165a0:	46a5      	mov	sp, r4
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		LOG_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   165a2:	46bd      	mov	sp, r7
   165a4:	bdb0      	pop	{r4, r5, r7, pc}
   165a6:	bf00      	nop
   165a8:	00031e40 	.word	0x00031e40
   165ac:	00031fac 	.word	0x00031fac
   165b0:	0002fc64 	.word	0x0002fc64
   165b4:	20000388 	.word	0x20000388
   165b8:	00031e4e 	.word	0x00031e4e
   165bc:	00031e54 	.word	0x00031e54

000165c0 <set_setting>:
{
   165c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   165c4:	4c37      	ldr	r4, [pc, #220]	; (166a4 <set_setting+0xe4>)
   165c6:	b082      	sub	sp, #8
   165c8:	f3bf 8f5b 	dmb	ish
   165cc:	4698      	mov	r8, r3
   165ce:	6823      	ldr	r3, [r4, #0]
   165d0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   165d4:	07d9      	lsls	r1, r3, #31
{
   165d6:	af00      	add	r7, sp, #0
   165d8:	4605      	mov	r5, r0
   165da:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   165dc:	d538      	bpl.n	16650 <set_setting+0x90>
	if (!name) {
   165de:	b998      	cbnz	r0, 16608 <set_setting+0x48>
		LOG_ERR("Insufficient number of arguments");
   165e0:	466c      	mov	r4, sp
   165e2:	b088      	sub	sp, #32
   165e4:	466a      	mov	r2, sp
   165e6:	4b30      	ldr	r3, [pc, #192]	; (166a8 <set_setting+0xe8>)
   165e8:	6153      	str	r3, [r2, #20]
   165ea:	4b30      	ldr	r3, [pc, #192]	; (166ac <set_setting+0xec>)
   165ec:	6193      	str	r3, [r2, #24]
   165ee:	2303      	movs	r3, #3
   165f0:	f842 3f10 	str.w	r3, [r2, #16]!
   165f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   165f8:	4603      	mov	r3, r0
   165fa:	482d      	ldr	r0, [pc, #180]	; (166b0 <set_setting+0xf0>)
   165fc:	f7fd fd18 	bl	14030 <z_impl_z_log_msg_static_create>
   16600:	46a5      	mov	sp, r4
		return -ENOENT;
   16602:	f06f 0001 	mvn.w	r0, #1
   16606:	e024      	b.n	16652 <set_setting+0x92>
	len = settings_name_next(name, &next);
   16608:	1d39      	adds	r1, r7, #4
   1660a:	f014 f861 	bl	2a6d0 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   1660e:	4929      	ldr	r1, [pc, #164]	; (166b4 <set_setting+0xf4>)
	len = settings_name_next(name, &next);
   16610:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   16612:	4628      	mov	r0, r5
   16614:	f015 fb09 	bl	2bc2a <strncmp>
   16618:	4603      	mov	r3, r0
   1661a:	2800      	cmp	r0, #0
   1661c:	d1f1      	bne.n	16602 <set_setting+0x42>
   1661e:	f3bf 8f5b 	dmb	ish
   16622:	6822      	ldr	r2, [r4, #0]
   16624:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   16628:	f3c2 05c0 	ubfx	r5, r2, #3, #1
   1662c:	0712      	lsls	r2, r2, #28
   1662e:	d514      	bpl.n	1665a <set_setting+0x9a>
			LOG_WRN("Ignoring identities stored in flash");
   16630:	466c      	mov	r4, sp
   16632:	b088      	sub	sp, #32
   16634:	466a      	mov	r2, sp
   16636:	4920      	ldr	r1, [pc, #128]	; (166b8 <set_setting+0xf8>)
   16638:	6151      	str	r1, [r2, #20]
   1663a:	491c      	ldr	r1, [pc, #112]	; (166ac <set_setting+0xec>)
   1663c:	6191      	str	r1, [r2, #24]
   1663e:	2103      	movs	r1, #3
   16640:	f842 1f10 	str.w	r1, [r2, #16]!
   16644:	481a      	ldr	r0, [pc, #104]	; (166b0 <set_setting+0xf0>)
   16646:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1664a:	f7fd fcf1 	bl	14030 <z_impl_z_log_msg_static_create>
   1664e:	46a5      	mov	sp, r4
		return 0;
   16650:	2000      	movs	r0, #0
}
   16652:	3708      	adds	r7, #8
   16654:	46bd      	mov	sp, r7
   16656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   1665a:	3cd4      	subs	r4, #212	; 0xd4
   1665c:	2207      	movs	r2, #7
   1665e:	4621      	mov	r1, r4
   16660:	4640      	mov	r0, r8
   16662:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   16664:	2806      	cmp	r0, #6
   16666:	d817      	bhi.n	16698 <set_setting+0xd8>
				LOG_ERR("Invalid length ID address in storage");
   16668:	466e      	mov	r6, sp
   1666a:	b088      	sub	sp, #32
   1666c:	466a      	mov	r2, sp
   1666e:	4b13      	ldr	r3, [pc, #76]	; (166bc <set_setting+0xfc>)
   16670:	6153      	str	r3, [r2, #20]
   16672:	4b0e      	ldr	r3, [pc, #56]	; (166ac <set_setting+0xec>)
   16674:	6193      	str	r3, [r2, #24]
   16676:	2303      	movs	r3, #3
   16678:	f842 3f10 	str.w	r3, [r2, #16]!
   1667c:	480c      	ldr	r0, [pc, #48]	; (166b0 <set_setting+0xf0>)
   1667e:	462b      	mov	r3, r5
   16680:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16684:	f7fd fcd4 	bl	14030 <z_impl_z_log_msg_static_create>
			(void)memset(bt_dev.id_addr, 0,
   16688:	2207      	movs	r2, #7
   1668a:	46b5      	mov	sp, r6
   1668c:	4629      	mov	r1, r5
   1668e:	4620      	mov	r0, r4
   16690:	f015 fb11 	bl	2bcb6 <memset>
			bt_dev.id_count = 0U;
   16694:	71e5      	strb	r5, [r4, #7]
   16696:	e7db      	b.n	16650 <set_setting+0x90>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   16698:	2307      	movs	r3, #7
   1669a:	fbb0 f0f3 	udiv	r0, r0, r3
   1669e:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   166a0:	e7d6      	b.n	16650 <set_setting+0x90>
   166a2:	bf00      	nop
   166a4:	2000045c 	.word	0x2000045c
   166a8:	00031e73 	.word	0x00031e73
   166ac:	00031f90 	.word	0x00031f90
   166b0:	0002fc64 	.word	0x0002fc64
   166b4:	00030e8d 	.word	0x00030e8d
   166b8:	00031e98 	.word	0x00031e98
   166bc:	00031ec0 	.word	0x00031ec0

000166c0 <bt_settings_encode_key>:
{
   166c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   166c4:	b088      	sub	sp, #32
		snprintk(path, path_size,
   166c6:	799c      	ldrb	r4, [r3, #6]
{
   166c8:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   166cc:	795d      	ldrb	r5, [r3, #5]
   166ce:	791e      	ldrb	r6, [r3, #4]
   166d0:	78df      	ldrb	r7, [r3, #3]
   166d2:	f893 c002 	ldrb.w	ip, [r3, #2]
   166d6:	f893 e001 	ldrb.w	lr, [r3, #1]
   166da:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   166dc:	f1b8 0f00 	cmp.w	r8, #0
   166e0:	d00e      	beq.n	16700 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   166e2:	e9cd 3806 	strd	r3, r8, [sp, #24]
   166e6:	e9cd ce04 	strd	ip, lr, [sp, #16]
   166ea:	4613      	mov	r3, r2
   166ec:	e9cd 6702 	strd	r6, r7, [sp, #8]
   166f0:	e9cd 4500 	strd	r4, r5, [sp]
   166f4:	4a08      	ldr	r2, [pc, #32]	; (16718 <bt_settings_encode_key+0x58>)
   166f6:	f012 ff18 	bl	2952a <snprintk>
}
   166fa:	b008      	add	sp, #32
   166fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   16700:	e9cd e305 	strd	lr, r3, [sp, #20]
   16704:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   16708:	4613      	mov	r3, r2
   1670a:	e9cd 5601 	strd	r5, r6, [sp, #4]
   1670e:	4a03      	ldr	r2, [pc, #12]	; (1671c <bt_settings_encode_key+0x5c>)
   16710:	9400      	str	r4, [sp, #0]
   16712:	f012 ff0a 	bl	2952a <snprintk>
}
   16716:	e7f0      	b.n	166fa <bt_settings_encode_key+0x3a>
   16718:	00031ee9 	.word	0x00031ee9
   1671c:	00031f0d 	.word	0x00031f0d

00016720 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   16720:	4801      	ldr	r0, [pc, #4]	; (16728 <bt_settings_save_id+0x8>)
   16722:	f00e bfbf 	b.w	256a4 <k_work_submit>
   16726:	bf00      	nop
   16728:	2000054c 	.word	0x2000054c

0001672c <commit_settings>:
}

static int commit_settings(void)
{
   1672c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16730:	4d27      	ldr	r5, [pc, #156]	; (167d0 <commit_settings+0xa4>)
   16732:	f3bf 8f5b 	dmb	ish
   16736:	682b      	ldr	r3, [r5, #0]
   16738:	f3bf 8f5b 	dmb	ish
	int err;

	LOG_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1673c:	f013 0f01 	tst.w	r3, #1
{
   16740:	af00      	add	r7, sp, #0
   16742:	462e      	mov	r6, r5
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16744:	d042      	beq.n	167cc <commit_settings+0xa0>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   16746:	f815 8ccd 	ldrb.w	r8, [r5, #-205]
   1674a:	f1a5 09d4 	sub.w	r9, r5, #212	; 0xd4
   1674e:	f1b8 0f00 	cmp.w	r8, #0
   16752:	d122      	bne.n	1679a <commit_settings+0x6e>
		err = bt_setup_public_id_addr();
   16754:	f002 f95e 	bl	18a14 <bt_setup_public_id_addr>
		if (err) {
   16758:	4604      	mov	r4, r0
   1675a:	b1a0      	cbz	r0, 16786 <commit_settings+0x5a>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			LOG_ERR("Unable to setup an identity address");
   1675c:	466d      	mov	r5, sp
   1675e:	b088      	sub	sp, #32
   16760:	466a      	mov	r2, sp
   16762:	4b1c      	ldr	r3, [pc, #112]	; (167d4 <commit_settings+0xa8>)
   16764:	6153      	str	r3, [r2, #20]
   16766:	4b1c      	ldr	r3, [pc, #112]	; (167d8 <commit_settings+0xac>)
   16768:	6193      	str	r3, [r2, #24]
   1676a:	2303      	movs	r3, #3
   1676c:	f842 3f10 	str.w	r3, [r2, #16]!
   16770:	481a      	ldr	r0, [pc, #104]	; (167dc <commit_settings+0xb0>)
   16772:	4643      	mov	r3, r8
   16774:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16778:	f7fd fc5a 	bl	14030 <z_impl_z_log_msg_static_create>
   1677c:	46ad      	mov	sp, r5
		LOG_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   1677e:	4620      	mov	r0, r4
   16780:	46bd      	mov	sp, r7
   16782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!bt_dev.id_count) {
   16786:	f899 8007 	ldrb.w	r8, [r9, #7]
   1678a:	f1b8 0f00 	cmp.w	r8, #0
   1678e:	d104      	bne.n	1679a <commit_settings+0x6e>
		err = bt_setup_random_id_addr();
   16790:	f002 f9b4 	bl	18afc <bt_setup_random_id_addr>
		if (err) {
   16794:	4604      	mov	r4, r0
   16796:	2800      	cmp	r0, #0
   16798:	d1e0      	bne.n	1675c <commit_settings+0x30>
   1679a:	f3bf 8f5b 	dmb	ish
   1679e:	682b      	ldr	r3, [r5, #0]
   167a0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   167a4:	075a      	lsls	r2, r3, #29
   167a6:	d401      	bmi.n	167ac <commit_settings+0x80>
		bt_finalize_init();
   167a8:	f001 fc88 	bl	180bc <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   167ac:	f3bf 8f5b 	dmb	ish
   167b0:	e856 3f00 	ldrex	r3, [r6]
   167b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   167b8:	e846 2100 	strex	r1, r2, [r6]
   167bc:	2900      	cmp	r1, #0
   167be:	d1f7      	bne.n	167b0 <commit_settings+0x84>
   167c0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   167c4:	03db      	lsls	r3, r3, #15
   167c6:	d501      	bpl.n	167cc <commit_settings+0xa0>
		bt_settings_save_id();
   167c8:	f7ff ffaa 	bl	16720 <bt_settings_save_id>
		return 0;
   167cc:	2400      	movs	r4, #0
   167ce:	e7d6      	b.n	1677e <commit_settings+0x52>
   167d0:	2000045c 	.word	0x2000045c
   167d4:	00031f2e 	.word	0x00031f2e
   167d8:	00031f9c 	.word	0x00031f9c
   167dc:	0002fc64 	.word	0x0002fc64

000167e0 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set_setting, commit_settings, NULL);

int bt_settings_init(void)
{
   167e0:	b5b0      	push	{r4, r5, r7, lr}
   167e2:	af00      	add	r7, sp, #0
	int err;

	LOG_DBG("");

	err = settings_subsys_init();
   167e4:	f7fe fa94 	bl	14d10 <settings_subsys_init>
	if (err) {
   167e8:	4604      	mov	r4, r0
   167ea:	b188      	cbz	r0, 16810 <bt_settings_init+0x30>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
   167ec:	466d      	mov	r5, sp
   167ee:	b088      	sub	sp, #32
   167f0:	466a      	mov	r2, sp
   167f2:	4b09      	ldr	r3, [pc, #36]	; (16818 <bt_settings_init+0x38>)
   167f4:	6153      	str	r3, [r2, #20]
   167f6:	4b09      	ldr	r3, [pc, #36]	; (1681c <bt_settings_init+0x3c>)
   167f8:	e9c2 3006 	strd	r3, r0, [r2, #24]
   167fc:	2304      	movs	r3, #4
   167fe:	f842 3f10 	str.w	r3, [r2, #16]!
   16802:	4807      	ldr	r0, [pc, #28]	; (16820 <bt_settings_init+0x40>)
   16804:	2300      	movs	r3, #0
   16806:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1680a:	f7fd fc11 	bl	14030 <z_impl_z_log_msg_static_create>
   1680e:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   16810:	4620      	mov	r0, r4
   16812:	46bd      	mov	sp, r7
   16814:	bdb0      	pop	{r4, r5, r7, pc}
   16816:	bf00      	nop
   16818:	00031f56 	.word	0x00031f56
   1681c:	00031f7f 	.word	0x00031f7f
   16820:	0002fc64 	.word	0x0002fc64

00016824 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
   16824:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   16826:	4d0a      	ldr	r5, [pc, #40]	; (16850 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   16828:	4b0a      	ldr	r3, [pc, #40]	; (16854 <long_wq_init+0x30>)
{
   1682a:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   1682c:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   1682e:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   16830:	9302      	str	r3, [sp, #8]
   16832:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   16834:	f018 fc8e 	bl	2f154 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   16838:	ab02      	add	r3, sp, #8
   1683a:	9300      	str	r3, [sp, #0]
   1683c:	4628      	mov	r0, r5
   1683e:	4906      	ldr	r1, [pc, #24]	; (16858 <long_wq_init+0x34>)
   16840:	230a      	movs	r3, #10
   16842:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   16846:	f00e ff33 	bl	256b0 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   1684a:	4620      	mov	r0, r4
   1684c:	b005      	add	sp, #20
   1684e:	bd30      	pop	{r4, r5, pc}
   16850:	20001ee0 	.word	0x20001ee0
   16854:	00031fc3 	.word	0x00031fc3
   16858:	20005540 	.word	0x20005540

0001685c <bt_long_wq_schedule>:
{
   1685c:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   1685e:	4801      	ldr	r0, [pc, #4]	; (16864 <bt_long_wq_schedule+0x8>)
   16860:	f00e bf5e 	b.w	25720 <k_work_schedule_for_queue>
   16864:	20001ee0 	.word	0x20001ee0

00016868 <bt_long_wq_submit>:
{
   16868:	4601      	mov	r1, r0
	return k_work_submit_to_queue(&bt_long_wq, work);
   1686a:	4801      	ldr	r0, [pc, #4]	; (16870 <bt_long_wq_submit+0x8>)
   1686c:	f018 bc61 	b.w	2f132 <k_work_submit_to_queue>
   16870:	20001ee0 	.word	0x20001ee0

00016874 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   16874:	b430      	push	{r4, r5}
   16876:	4603      	mov	r3, r0
   16878:	4608      	mov	r0, r1
	switch (src->type) {
   1687a:	781a      	ldrb	r2, [r3, #0]
   1687c:	2a01      	cmp	r2, #1
   1687e:	d013      	beq.n	168a8 <uuid_to_uuid128+0x34>
   16880:	2a02      	cmp	r2, #2
   16882:	d026      	beq.n	168d2 <uuid_to_uuid128+0x5e>
   16884:	b972      	cbnz	r2, 168a4 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   16886:	4a15      	ldr	r2, [pc, #84]	; (168dc <uuid_to_uuid128+0x68>)
   16888:	f102 0410 	add.w	r4, r2, #16
   1688c:	f852 5b04 	ldr.w	r5, [r2], #4
   16890:	f841 5b04 	str.w	r5, [r1], #4
   16894:	42a2      	cmp	r2, r4
   16896:	d1f9      	bne.n	1688c <uuid_to_uuid128+0x18>
   16898:	7812      	ldrb	r2, [r2, #0]
   1689a:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   1689c:	885b      	ldrh	r3, [r3, #2]
	dst[0] = val;
   1689e:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   168a0:	0a1b      	lsrs	r3, r3, #8
   168a2:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   168a4:	bc30      	pop	{r4, r5}
   168a6:	4770      	bx	lr
		*dst = uuid128_base;
   168a8:	4a0c      	ldr	r2, [pc, #48]	; (168dc <uuid_to_uuid128+0x68>)
   168aa:	f102 0410 	add.w	r4, r2, #16
   168ae:	f852 5b04 	ldr.w	r5, [r2], #4
   168b2:	f841 5b04 	str.w	r5, [r1], #4
   168b6:	42a2      	cmp	r2, r4
   168b8:	d1f9      	bne.n	168ae <uuid_to_uuid128+0x3a>
   168ba:	7812      	ldrb	r2, [r2, #0]
   168bc:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   168be:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   168c0:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   168c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   168c6:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   168c8:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   168ca:	0a1b      	lsrs	r3, r3, #8
   168cc:	7382      	strb	r2, [r0, #14]
   168ce:	7403      	strb	r3, [r0, #16]
}
   168d0:	e7e8      	b.n	168a4 <uuid_to_uuid128+0x30>
}
   168d2:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   168d4:	2211      	movs	r2, #17
   168d6:	4619      	mov	r1, r3
   168d8:	f015 b9e2 	b.w	2bca0 <memcpy>
   168dc:	00031fcc 	.word	0x00031fcc

000168e0 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   168e0:	b538      	push	{r3, r4, r5, lr}
   168e2:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   168e4:	4805      	ldr	r0, [pc, #20]	; (168fc <bt_buf_get_rx+0x1c>)
   168e6:	f017 fd3e 	bl	2e366 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   168ea:	4604      	mov	r4, r0
   168ec:	b120      	cbz	r0, 168f8 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   168ee:	2100      	movs	r1, #0
   168f0:	300c      	adds	r0, #12
   168f2:	f017 fd9a 	bl	2e42a <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   168f6:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   168f8:	4620      	mov	r0, r4
   168fa:	bd38      	pop	{r3, r4, r5, pc}
   168fc:	20000a80 	.word	0x20000a80

00016900 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   16900:	b570      	push	{r4, r5, r6, lr}
   16902:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16904:	480d      	ldr	r0, [pc, #52]	; (1693c <bt_buf_get_cmd_complete+0x3c>)
   16906:	f3bf 8f5b 	dmb	ish
   1690a:	460b      	mov	r3, r1
   1690c:	2100      	movs	r1, #0
   1690e:	e850 4f00 	ldrex	r4, [r0]
   16912:	e840 1500 	strex	r5, r1, [r0]
   16916:	2d00      	cmp	r5, #0
   16918:	d1f9      	bne.n	1690e <bt_buf_get_cmd_complete+0xe>
   1691a:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
   1691e:	b924      	cbnz	r4, 1692a <bt_buf_get_cmd_complete+0x2a>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   16920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   16924:	2001      	movs	r0, #1
   16926:	f7ff bfdb 	b.w	168e0 <bt_buf_get_rx>
   1692a:	2301      	movs	r3, #1
   1692c:	f104 000c 	add.w	r0, r4, #12
   16930:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
   16932:	8221      	strh	r1, [r4, #16]
   16934:	f017 fd79 	bl	2e42a <net_buf_simple_reserve>
}
   16938:	4620      	mov	r0, r4
   1693a:	bd70      	pop	{r4, r5, r6, pc}
   1693c:	200004c8 	.word	0x200004c8

00016940 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   16940:	b570      	push	{r4, r5, r6, lr}
   16942:	4604      	mov	r4, r0
	switch (evt) {
   16944:	2c0f      	cmp	r4, #15
{
   16946:	460d      	mov	r5, r1
   16948:	4610      	mov	r0, r2
   1694a:	4619      	mov	r1, r3
	switch (evt) {
   1694c:	d805      	bhi.n	1695a <bt_buf_get_evt+0x1a>
   1694e:	2c0d      	cmp	r4, #13
   16950:	d90d      	bls.n	1696e <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   16952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   16956:	f7ff bfd3 	b.w	16900 <bt_buf_get_cmd_complete>
	switch (evt) {
   1695a:	2c13      	cmp	r4, #19
   1695c:	d107      	bne.n	1696e <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   1695e:	480c      	ldr	r0, [pc, #48]	; (16990 <bt_buf_get_evt+0x50>)
   16960:	f017 fd01 	bl	2e366 <net_buf_alloc_fixed>
			if (buf) {
   16964:	4604      	mov	r4, r0
   16966:	b938      	cbnz	r0, 16978 <bt_buf_get_evt+0x38>
{
   16968:	2400      	movs	r4, #0
}
   1696a:	4620      	mov	r0, r4
   1696c:	bd70      	pop	{r4, r5, r6, pc}
   1696e:	4602      	mov	r2, r0
   16970:	460b      	mov	r3, r1
		if (discardable) {
   16972:	b145      	cbz	r5, 16986 <bt_buf_get_evt+0x46>
   16974:	4807      	ldr	r0, [pc, #28]	; (16994 <bt_buf_get_evt+0x54>)
   16976:	e7f3      	b.n	16960 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   16978:	2100      	movs	r1, #0
   1697a:	300c      	adds	r0, #12
   1697c:	f017 fd55 	bl	2e42a <net_buf_simple_reserve>
   16980:	2301      	movs	r3, #1
   16982:	7623      	strb	r3, [r4, #24]
}
   16984:	e7f1      	b.n	1696a <bt_buf_get_evt+0x2a>
}
   16986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1698a:	2001      	movs	r0, #1
   1698c:	f7ff bfa8 	b.w	168e0 <bt_buf_get_rx>
   16990:	20000aac 	.word	0x20000aac
   16994:	200009fc 	.word	0x200009fc

00016998 <bt_data_parse>:
LOG_MODULE_REGISTER(bt_data);

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   16998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1699c:	b082      	sub	sp, #8
   1699e:	4605      	mov	r5, r0
   169a0:	af00      	add	r7, sp, #0
   169a2:	460e      	mov	r6, r1
   169a4:	4690      	mov	r8, r2
	while (ad->len > 1) {
   169a6:	88ab      	ldrh	r3, [r5, #4]
   169a8:	2b01      	cmp	r3, #1
   169aa:	d91a      	bls.n	169e2 <bt_data_parse+0x4a>
		struct bt_data data;
		uint8_t len;

		len = net_buf_simple_pull_u8(ad);
   169ac:	4628      	mov	r0, r5
   169ae:	f017 fd79 	bl	2e4a4 <net_buf_simple_pull_u8>
		if (len == 0U) {
   169b2:	4604      	mov	r4, r0
   169b4:	b1a8      	cbz	r0, 169e2 <bt_data_parse+0x4a>
			/* Early termination */
			return;
		}

		if (len > ad->len) {
   169b6:	88ab      	ldrh	r3, [r5, #4]
   169b8:	4298      	cmp	r0, r3
   169ba:	d916      	bls.n	169ea <bt_data_parse+0x52>
			LOG_WRN("malformed advertising data %u / %u",
   169bc:	466d      	mov	r5, sp
   169be:	b08a      	sub	sp, #40	; 0x28
   169c0:	466a      	mov	r2, sp
   169c2:	4913      	ldr	r1, [pc, #76]	; (16a10 <bt_data_parse+0x78>)
   169c4:	6151      	str	r1, [r2, #20]
   169c6:	4913      	ldr	r1, [pc, #76]	; (16a14 <bt_data_parse+0x7c>)
   169c8:	6213      	str	r3, [r2, #32]
   169ca:	2305      	movs	r3, #5
   169cc:	e9c2 1006 	strd	r1, r0, [r2, #24]
   169d0:	f842 3f10 	str.w	r3, [r2, #16]!
   169d4:	4810      	ldr	r0, [pc, #64]	; (16a18 <bt_data_parse+0x80>)
   169d6:	2300      	movs	r3, #0
   169d8:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   169dc:	f7fd fb28 	bl	14030 <z_impl_z_log_msg_static_create>
   169e0:	46ad      	mov	sp, r5
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   169e2:	3708      	adds	r7, #8
   169e4:	46bd      	mov	sp, r7
   169e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.type = net_buf_simple_pull_u8(ad);
   169ea:	4628      	mov	r0, r5
   169ec:	f017 fd5a 	bl	2e4a4 <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   169f0:	3c01      	subs	r4, #1
		data.data = ad->data;
   169f2:	682b      	ldr	r3, [r5, #0]
		data.type = net_buf_simple_pull_u8(ad);
   169f4:	7038      	strb	r0, [r7, #0]
		if (!func(&data, user_data)) {
   169f6:	4641      	mov	r1, r8
   169f8:	4638      	mov	r0, r7
		data.data_len = len - 1;
   169fa:	707c      	strb	r4, [r7, #1]
		data.data = ad->data;
   169fc:	607b      	str	r3, [r7, #4]
		if (!func(&data, user_data)) {
   169fe:	47b0      	blx	r6
   16a00:	2800      	cmp	r0, #0
   16a02:	d0ee      	beq.n	169e2 <bt_data_parse+0x4a>
		net_buf_simple_pull(ad, len - 1);
   16a04:	4621      	mov	r1, r4
   16a06:	4628      	mov	r0, r5
   16a08:	f017 fd3c 	bl	2e484 <net_buf_simple_pull>
   16a0c:	e7cb      	b.n	169a6 <bt_data_parse+0xe>
   16a0e:	bf00      	nop
   16a10:	00031fdd 	.word	0x00031fdd
   16a14:	00032004 	.word	0x00032004
   16a18:	0002fbf4 	.word	0x0002fbf4

00016a1c <ver_str>:
{
   16a1c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   16a1e:	4d0c      	ldr	r5, [pc, #48]	; (16a50 <ver_str+0x34>)
{
   16a20:	4606      	mov	r6, r0
	const char * const str[] = {
   16a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   16a24:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   16a26:	466c      	mov	r4, sp
   16a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16a32:	e895 0003 	ldmia.w	r5, {r0, r1}
	if (ver < ARRAY_SIZE(str)) {
   16a36:	2e0d      	cmp	r6, #13
	const char * const str[] = {
   16a38:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
   16a3c:	bf9b      	ittet	ls
   16a3e:	ab0e      	addls	r3, sp, #56	; 0x38
   16a40:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   16a44:	4803      	ldrhi	r0, [pc, #12]	; (16a54 <ver_str+0x38>)
		return str[ver];
   16a46:	f856 0c38 	ldrls.w	r0, [r6, #-56]
}
   16a4a:	b00e      	add	sp, #56	; 0x38
   16a4c:	bd70      	pop	{r4, r5, r6, pc}
   16a4e:	bf00      	nop
   16a50:	0002fe24 	.word	0x0002fe24
   16a54:	0003201a 	.word	0x0003201a

00016a58 <hci_disconn_complete_prio>:
{
   16a58:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   16a5a:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16a5c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   16a60:	781b      	ldrb	r3, [r3, #0]
   16a62:	b963      	cbnz	r3, 16a7e <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   16a64:	4620      	mov	r0, r4
   16a66:	f002 ff89 	bl	1997c <bt_conn_lookup_handle>
	if (!conn) {
   16a6a:	4605      	mov	r5, r0
   16a6c:	b940      	cbnz	r0, 16a80 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   16a6e:	4b08      	ldr	r3, [pc, #32]	; (16a90 <hci_disconn_complete_prio+0x38>)
   16a70:	881a      	ldrh	r2, [r3, #0]
   16a72:	b922      	cbnz	r2, 16a7e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   16a74:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   16a78:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   16a7c:	8018      	strh	r0, [r3, #0]
}
   16a7e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16a80:	2101      	movs	r1, #1
   16a82:	f002 ff83 	bl	1998c <bt_conn_set_state>
	bt_conn_unref(conn);
   16a86:	4628      	mov	r0, r5
}
   16a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   16a8c:	f015 bcb2 	b.w	2c3f4 <bt_conn_unref>
   16a90:	2000430e 	.word	0x2000430e

00016a94 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   16a94:	b580      	push	{r7, lr}
   16a96:	af00      	add	r7, sp, #0
		LOG_ERR("Unable to allocate buffer");
   16a98:	b088      	sub	sp, #32
   16a9a:	466a      	mov	r2, sp
   16a9c:	4b06      	ldr	r3, [pc, #24]	; (16ab8 <le_conn_param_neg_reply.part.0+0x24>)
   16a9e:	6153      	str	r3, [r2, #20]
   16aa0:	4b06      	ldr	r3, [pc, #24]	; (16abc <le_conn_param_neg_reply.part.0+0x28>)
   16aa2:	6193      	str	r3, [r2, #24]
   16aa4:	2303      	movs	r3, #3
   16aa6:	f842 3f10 	str.w	r3, [r2, #16]!
   16aaa:	4805      	ldr	r0, [pc, #20]	; (16ac0 <le_conn_param_neg_reply.part.0+0x2c>)
   16aac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16ab0:	f015 fa57 	bl	2bf62 <z_log_msg_static_create.constprop.0>
}
   16ab4:	46bd      	mov	sp, r7
   16ab6:	bd80      	pop	{r7, pc}
   16ab8:	00032022 	.word	0x00032022
   16abc:	00032915 	.word	0x00032915
   16ac0:	0002fc14 	.word	0x0002fc14

00016ac4 <le_conn_update_complete>:
{
   16ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ac6:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   16ac8:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   16aca:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   16ace:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16ad0:	4630      	mov	r0, r6
   16ad2:	f002 ff53 	bl	1997c <bt_conn_lookup_handle>
	if (!conn) {
   16ad6:	4604      	mov	r4, r0
   16ad8:	b998      	cbnz	r0, 16b02 <le_conn_update_complete+0x3e>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16ada:	466c      	mov	r4, sp
   16adc:	b088      	sub	sp, #32
   16ade:	466a      	mov	r2, sp
   16ae0:	4b1e      	ldr	r3, [pc, #120]	; (16b5c <le_conn_update_complete+0x98>)
   16ae2:	6153      	str	r3, [r2, #20]
   16ae4:	4b1e      	ldr	r3, [pc, #120]	; (16b60 <le_conn_update_complete+0x9c>)
   16ae6:	481f      	ldr	r0, [pc, #124]	; (16b64 <le_conn_update_complete+0xa0>)
   16ae8:	e9c2 3606 	strd	r3, r6, [r2, #24]
   16aec:	2304      	movs	r3, #4
   16aee:	f842 3f10 	str.w	r3, [r2, #16]!
   16af2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16af6:	f015 fa34 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   16afa:	46a5      	mov	sp, r4
}
   16afc:	370c      	adds	r7, #12
   16afe:	46bd      	mov	sp, r7
   16b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   16b02:	782b      	ldrb	r3, [r5, #0]
   16b04:	2b1a      	cmp	r3, #26
   16b06:	d117      	bne.n	16b38 <le_conn_update_complete+0x74>
   16b08:	78c3      	ldrb	r3, [r0, #3]
   16b0a:	2b01      	cmp	r3, #1
   16b0c:	d122      	bne.n	16b54 <le_conn_update_complete+0x90>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   16b0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   16b12:	3004      	adds	r0, #4
   16b14:	f015 fa16 	bl	2bf44 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   16b18:	0543      	lsls	r3, r0, #21
   16b1a:	d40d      	bmi.n	16b38 <le_conn_update_complete+0x74>
		param.interval_min = conn->le.interval_min;
   16b1c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   16b20:	603b      	str	r3, [r7, #0]
		bt_l2cap_update_conn_param(conn, &param);
   16b22:	4639      	mov	r1, r7
		param.latency = conn->le.pending_latency;
   16b24:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   16b28:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   16b2a:	4620      	mov	r0, r4
   16b2c:	f003 fe04 	bl	1a738 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   16b30:	4620      	mov	r0, r4
   16b32:	f015 fc5f 	bl	2c3f4 <bt_conn_unref>
   16b36:	e7e1      	b.n	16afc <le_conn_update_complete+0x38>
		if (!evt->status) {
   16b38:	782b      	ldrb	r3, [r5, #0]
   16b3a:	b95b      	cbnz	r3, 16b54 <le_conn_update_complete+0x90>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   16b3c:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   16b40:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   16b44:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   16b48:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16b4c:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   16b50:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		notify_le_param_updated(conn);
   16b54:	4620      	mov	r0, r4
   16b56:	f003 f85d 	bl	19c14 <notify_le_param_updated>
   16b5a:	e7e9      	b.n	16b30 <le_conn_update_complete+0x6c>
   16b5c:	00032040 	.word	0x00032040
   16b60:	000328e5 	.word	0x000328e5
   16b64:	0002fc14 	.word	0x0002fc14

00016b68 <rx_queue_put>:
{
   16b68:	b598      	push	{r3, r4, r7, lr}
   16b6a:	4601      	mov	r1, r0
   16b6c:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   16b6e:	480e      	ldr	r0, [pc, #56]	; (16ba8 <rx_queue_put+0x40>)
   16b70:	f017 fc00 	bl	2e374 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   16b74:	490d      	ldr	r1, [pc, #52]	; (16bac <rx_queue_put+0x44>)
   16b76:	480e      	ldr	r0, [pc, #56]	; (16bb0 <rx_queue_put+0x48>)
   16b78:	f018 fadb 	bl	2f132 <k_work_submit_to_queue>
	if (err < 0) {
   16b7c:	2800      	cmp	r0, #0
   16b7e:	da10      	bge.n	16ba2 <rx_queue_put+0x3a>
		LOG_ERR("Could not submit rx_work: %d", err);
   16b80:	466c      	mov	r4, sp
   16b82:	b088      	sub	sp, #32
   16b84:	466a      	mov	r2, sp
   16b86:	4b0b      	ldr	r3, [pc, #44]	; (16bb4 <rx_queue_put+0x4c>)
   16b88:	6153      	str	r3, [r2, #20]
   16b8a:	4b0b      	ldr	r3, [pc, #44]	; (16bb8 <rx_queue_put+0x50>)
   16b8c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   16b90:	2304      	movs	r3, #4
   16b92:	f842 3f10 	str.w	r3, [r2, #16]!
   16b96:	4809      	ldr	r0, [pc, #36]	; (16bbc <rx_queue_put+0x54>)
   16b98:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16b9c:	f015 f9e1 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   16ba0:	46a5      	mov	sp, r4
}
   16ba2:	46bd      	mov	sp, r7
   16ba4:	bd98      	pop	{r3, r4, r7, pc}
   16ba6:	bf00      	nop
   16ba8:	200004cc 	.word	0x200004cc
   16bac:	20000598 	.word	0x20000598
   16bb0:	20002000 	.word	0x20002000
   16bb4:	00032068 	.word	0x00032068
   16bb8:	00032a0a 	.word	0x00032a0a
   16bbc:	0002fc14 	.word	0x0002fc14

00016bc0 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   16bc0:	b5b0      	push	{r4, r5, r7, lr}
   16bc2:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   16bc4:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   16bc6:	af00      	add	r7, sp, #0
   16bc8:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   16bca:	4629      	mov	r1, r5
   16bcc:	68d8      	ldr	r0, [r3, #12]
   16bce:	f7ff faaf 	bl	16130 <bt_hex>
   16bd2:	b08c      	sub	sp, #48	; 0x30
   16bd4:	466a      	mov	r2, sp
   16bd6:	4b0a      	ldr	r3, [pc, #40]	; (16c00 <handle_event.part.0+0x40>)
   16bd8:	6153      	str	r3, [r2, #20]
   16bda:	4b0a      	ldr	r3, [pc, #40]	; (16c04 <handle_event.part.0+0x44>)
   16bdc:	e9c2 3406 	strd	r3, r4, [r2, #24]
   16be0:	f240 5303 	movw	r3, #1283	; 0x503
   16be4:	8513      	strh	r3, [r2, #40]	; 0x28
   16be6:	4b08      	ldr	r3, [pc, #32]	; (16c08 <handle_event.part.0+0x48>)
   16be8:	e9c2 5008 	strd	r5, r0, [r2, #32]
   16bec:	f44f 5152 	mov.w	r1, #13440	; 0x3480
   16bf0:	f842 3f10 	str.w	r3, [r2, #16]!
   16bf4:	4805      	ldr	r0, [pc, #20]	; (16c0c <handle_event.part.0+0x4c>)
   16bf6:	f015 f9b4 	bl	2bf62 <z_log_msg_static_create.constprop.0>
}
   16bfa:	46bd      	mov	sp, r7
   16bfc:	bdb0      	pop	{r4, r5, r7, pc}
   16bfe:	bf00      	nop
   16c00:	00032089 	.word	0x00032089
   16c04:	00032a33 	.word	0x00032a33
   16c08:	01000006 	.word	0x01000006
   16c0c:	0002fc14 	.word	0x0002fc14

00016c10 <handle_event>:
{
   16c10:	b5b0      	push	{r4, r5, r7, lr}
   16c12:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   16c16:	af00      	add	r7, sp, #0
   16c18:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
   16c1a:	4293      	cmp	r3, r2
   16c1c:	d103      	bne.n	16c26 <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   16c1e:	4620      	mov	r0, r4
   16c20:	f7ff ffce 	bl	16bc0 <handle_event.part.0>
}
   16c24:	e01a      	b.n	16c5c <handle_event+0x4c>
		if (handler->event != event) {
   16c26:	4610      	mov	r0, r2
   16c28:	f810 5b08 	ldrb.w	r5, [r0], #8
   16c2c:	42a5      	cmp	r5, r4
   16c2e:	d11b      	bne.n	16c68 <handle_event+0x58>
		if (buf->len < handler->min_len) {
   16c30:	8a0b      	ldrh	r3, [r1, #16]
   16c32:	7850      	ldrb	r0, [r2, #1]
   16c34:	4298      	cmp	r0, r3
   16c36:	d913      	bls.n	16c60 <handle_event+0x50>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   16c38:	466d      	mov	r5, sp
   16c3a:	b08a      	sub	sp, #40	; 0x28
   16c3c:	466a      	mov	r2, sp
   16c3e:	490b      	ldr	r1, [pc, #44]	; (16c6c <handle_event+0x5c>)
   16c40:	6151      	str	r1, [r2, #20]
   16c42:	490b      	ldr	r1, [pc, #44]	; (16c70 <handle_event+0x60>)
   16c44:	6214      	str	r4, [r2, #32]
   16c46:	e9c2 1306 	strd	r1, r3, [r2, #24]
   16c4a:	2305      	movs	r3, #5
   16c4c:	f842 3f10 	str.w	r3, [r2, #16]!
   16c50:	4808      	ldr	r0, [pc, #32]	; (16c74 <handle_event+0x64>)
   16c52:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   16c56:	f015 f984 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   16c5a:	46ad      	mov	sp, r5
}
   16c5c:	46bd      	mov	sp, r7
   16c5e:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   16c60:	6853      	ldr	r3, [r2, #4]
   16c62:	4608      	mov	r0, r1
   16c64:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   16c66:	e7f9      	b.n	16c5c <handle_event+0x4c>
   16c68:	4602      	mov	r2, r0
   16c6a:	e7d6      	b.n	16c1a <handle_event+0xa>
   16c6c:	000320af 	.word	0x000320af
   16c70:	00032a1f 	.word	0x00032a1f
   16c74:	0002fc14 	.word	0x0002fc14

00016c78 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   16c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   16c7a:	4859      	ldr	r0, [pc, #356]	; (16de0 <rx_work_handler+0x168>)
{
   16c7c:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   16c7e:	f017 fb8f 	bl	2e3a0 <net_buf_slist_get>
	if (!buf) {
   16c82:	4604      	mov	r4, r0
   16c84:	2800      	cmp	r0, #0
   16c86:	d070      	beq.n	16d6a <rx_work_handler+0xf2>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16c88:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   16c8a:	2b01      	cmp	r3, #1
   16c8c:	d06f      	beq.n	16d6e <rx_work_handler+0xf6>
   16c8e:	2b03      	cmp	r3, #3
   16c90:	f040 809f 	bne.w	16dd2 <rx_work_handler+0x15a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16c94:	8a03      	ldrh	r3, [r0, #16]
   16c96:	2b03      	cmp	r3, #3
   16c98:	d80c      	bhi.n	16cb4 <rx_work_handler+0x3c>
   16c9a:	4a52      	ldr	r2, [pc, #328]	; (16de4 <rx_work_handler+0x16c>)
   16c9c:	4952      	ldr	r1, [pc, #328]	; (16de8 <rx_work_handler+0x170>)
   16c9e:	4853      	ldr	r0, [pc, #332]	; (16dec <rx_work_handler+0x174>)
   16ca0:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   16ca4:	f012 ff62 	bl	29b6c <assert_print>
   16ca8:	4040      	eors	r0, r0
   16caa:	f380 8811 	msr	BASEPRI, r0
   16cae:	f04f 0003 	mov.w	r0, #3
   16cb2:	df02      	svc	2
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   16cb4:	2104      	movs	r1, #4
   16cb6:	f104 000c 	add.w	r0, r4, #12
   16cba:	f017 fbeb 	bl	2e494 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   16cbe:	8a21      	ldrh	r1, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   16cc0:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   16cc2:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   16cc4:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   16cc6:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   16cca:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   16ccc:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   16cce:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   16cd0:	d012      	beq.n	16cf8 <rx_work_handler+0x80>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   16cd2:	466d      	mov	r5, sp
   16cd4:	b08a      	sub	sp, #40	; 0x28
   16cd6:	466a      	mov	r2, sp
   16cd8:	4845      	ldr	r0, [pc, #276]	; (16df0 <rx_work_handler+0x178>)
   16cda:	6150      	str	r0, [r2, #20]
   16cdc:	4845      	ldr	r0, [pc, #276]	; (16df4 <rx_work_handler+0x17c>)
   16cde:	6213      	str	r3, [r2, #32]
   16ce0:	2305      	movs	r3, #5
   16ce2:	e9c2 0106 	strd	r0, r1, [r2, #24]
   16ce6:	f842 3f10 	str.w	r3, [r2, #16]!
   16cea:	f44f 5121 	mov.w	r1, #10304	; 0x2840
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   16cee:	4842      	ldr	r0, [pc, #264]	; (16df8 <rx_work_handler+0x180>)
   16cf0:	f015 f937 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   16cf4:	46ad      	mov	sp, r5
   16cf6:	e068      	b.n	16dca <rx_work_handler+0x152>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   16cf8:	f002 fe40 	bl	1997c <bt_conn_lookup_handle>
	if (!conn) {
   16cfc:	4605      	mov	r5, r0
   16cfe:	b970      	cbnz	r0, 16d1e <rx_work_handler+0xa6>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   16d00:	466d      	mov	r5, sp
   16d02:	b088      	sub	sp, #32
   16d04:	8b63      	ldrh	r3, [r4, #26]
   16d06:	466a      	mov	r2, sp
   16d08:	493c      	ldr	r1, [pc, #240]	; (16dfc <rx_work_handler+0x184>)
   16d0a:	6151      	str	r1, [r2, #20]
   16d0c:	4939      	ldr	r1, [pc, #228]	; (16df4 <rx_work_handler+0x17c>)
	switch (bt_buf_get_type(buf)) {
   16d0e:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   16d12:	2304      	movs	r3, #4
   16d14:	f842 3f10 	str.w	r3, [r2, #16]!
   16d18:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16d1c:	e7e7      	b.n	16cee <rx_work_handler+0x76>
	acl(buf)->index = bt_conn_index(conn);
   16d1e:	f002 ff57 	bl	19bd0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   16d22:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   16d24:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   16d26:	4621      	mov	r1, r4
   16d28:	4628      	mov	r0, r5
   16d2a:	f002 fcab 	bl	19684 <bt_conn_recv>
	bt_conn_unref(conn);
   16d2e:	4628      	mov	r0, r5
   16d30:	f015 fb60 	bl	2c3f4 <bt_conn_unref>
	return list->head;
   16d34:	4b32      	ldr	r3, [pc, #200]	; (16e00 <rx_work_handler+0x188>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   16d36:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   16d3a:	b1b3      	cbz	r3, 16d6a <rx_work_handler+0xf2>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   16d3c:	4931      	ldr	r1, [pc, #196]	; (16e04 <rx_work_handler+0x18c>)
   16d3e:	4832      	ldr	r0, [pc, #200]	; (16e08 <rx_work_handler+0x190>)
   16d40:	f018 f9f7 	bl	2f132 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   16d44:	2800      	cmp	r0, #0
   16d46:	da10      	bge.n	16d6a <rx_work_handler+0xf2>
			LOG_ERR("Could not submit rx_work: %d", err);
   16d48:	466c      	mov	r4, sp
   16d4a:	b088      	sub	sp, #32
   16d4c:	466a      	mov	r2, sp
   16d4e:	4b2f      	ldr	r3, [pc, #188]	; (16e0c <rx_work_handler+0x194>)
   16d50:	6153      	str	r3, [r2, #20]
   16d52:	4b2f      	ldr	r3, [pc, #188]	; (16e10 <rx_work_handler+0x198>)
   16d54:	e9c2 3006 	strd	r3, r0, [r2, #24]
   16d58:	2304      	movs	r3, #4
   16d5a:	f842 3f10 	str.w	r3, [r2, #16]!
   16d5e:	4826      	ldr	r0, [pc, #152]	; (16df8 <rx_work_handler+0x180>)
   16d60:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16d64:	f015 f8fd 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   16d68:	46a5      	mov	sp, r4
		}
	}
}
   16d6a:	46bd      	mov	sp, r7
   16d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16d6e:	8a03      	ldrh	r3, [r0, #16]
   16d70:	2b01      	cmp	r3, #1
   16d72:	d80c      	bhi.n	16d8e <rx_work_handler+0x116>
   16d74:	4a1b      	ldr	r2, [pc, #108]	; (16de4 <rx_work_handler+0x16c>)
   16d76:	491c      	ldr	r1, [pc, #112]	; (16de8 <rx_work_handler+0x170>)
   16d78:	481c      	ldr	r0, [pc, #112]	; (16dec <rx_work_handler+0x174>)
   16d7a:	f640 2347 	movw	r3, #2631	; 0xa47
   16d7e:	f012 fef5 	bl	29b6c <assert_print>
   16d82:	4040      	eors	r0, r0
   16d84:	f380 8811 	msr	BASEPRI, r0
   16d88:	f04f 0003 	mov.w	r0, #3
   16d8c:	df02      	svc	2
   16d8e:	2102      	movs	r1, #2
   16d90:	f104 000c 	add.w	r0, r4, #12
   16d94:	f017 fb7e 	bl	2e494 <net_buf_simple_pull_mem>
   16d98:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   16d9a:	7800      	ldrb	r0, [r0, #0]
   16d9c:	f015 f8a4 	bl	2bee8 <bt_hci_evt_get_flags>
   16da0:	0783      	lsls	r3, r0, #30
   16da2:	d40c      	bmi.n	16dbe <rx_work_handler+0x146>
   16da4:	4a0f      	ldr	r2, [pc, #60]	; (16de4 <rx_work_handler+0x16c>)
   16da6:	491b      	ldr	r1, [pc, #108]	; (16e14 <rx_work_handler+0x19c>)
   16da8:	4810      	ldr	r0, [pc, #64]	; (16dec <rx_work_handler+0x174>)
   16daa:	f640 234b 	movw	r3, #2635	; 0xa4b
   16dae:	f012 fedd 	bl	29b6c <assert_print>
   16db2:	4040      	eors	r0, r0
   16db4:	f380 8811 	msr	BASEPRI, r0
   16db8:	f04f 0003 	mov.w	r0, #3
   16dbc:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   16dbe:	4a16      	ldr	r2, [pc, #88]	; (16e18 <rx_work_handler+0x1a0>)
   16dc0:	7828      	ldrb	r0, [r5, #0]
   16dc2:	2306      	movs	r3, #6
   16dc4:	4621      	mov	r1, r4
   16dc6:	f7ff ff23 	bl	16c10 <handle_event>
		net_buf_unref(buf);
   16dca:	4620      	mov	r0, r4
   16dcc:	f009 fe28 	bl	20a20 <net_buf_unref>
		break;
   16dd0:	e7b0      	b.n	16d34 <rx_work_handler+0xbc>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   16dd2:	466d      	mov	r5, sp
   16dd4:	b088      	sub	sp, #32
   16dd6:	466a      	mov	r2, sp
   16dd8:	4910      	ldr	r1, [pc, #64]	; (16e1c <rx_work_handler+0x1a4>)
   16dda:	6151      	str	r1, [r2, #20]
   16ddc:	490c      	ldr	r1, [pc, #48]	; (16e10 <rx_work_handler+0x198>)
   16dde:	e796      	b.n	16d0e <rx_work_handler+0x96>
   16de0:	200004cc 	.word	0x200004cc
   16de4:	000320d5 	.word	0x000320d5
   16de8:	00032109 	.word	0x00032109
   16dec:	00032122 	.word	0x00032122
   16df0:	0003213f 	.word	0x0003213f
   16df4:	000329f2 	.word	0x000329f2
   16df8:	0002fc14 	.word	0x0002fc14
   16dfc:	00032167 	.word	0x00032167
   16e00:	20000388 	.word	0x20000388
   16e04:	20000598 	.word	0x20000598
   16e08:	20002000 	.word	0x20002000
   16e0c:	00032068 	.word	0x00032068
   16e10:	000329fa 	.word	0x000329fa
   16e14:	0003218d 	.word	0x0003218d
   16e18:	000301d0 	.word	0x000301d0
   16e1c:	000321bb 	.word	0x000321bb

00016e20 <hci_le_meta_event>:
{
   16e20:	b510      	push	{r4, lr}
   16e22:	2101      	movs	r1, #1
   16e24:	4604      	mov	r4, r0
   16e26:	300c      	adds	r0, #12
   16e28:	f017 fb34 	bl	2e494 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16e2c:	4621      	mov	r1, r4
   16e2e:	4a03      	ldr	r2, [pc, #12]	; (16e3c <hci_le_meta_event+0x1c>)
   16e30:	7800      	ldrb	r0, [r0, #0]
}
   16e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16e36:	230b      	movs	r3, #11
   16e38:	f7ff beea 	b.w	16c10 <handle_event>
   16e3c:	00030200 	.word	0x00030200

00016e40 <hci_hardware_error>:
{
   16e40:	b580      	push	{r7, lr}
   16e42:	2101      	movs	r1, #1
   16e44:	af00      	add	r7, sp, #0
   16e46:	300c      	adds	r0, #12
   16e48:	f017 fb24 	bl	2e494 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   16e4c:	b088      	sub	sp, #32
   16e4e:	7803      	ldrb	r3, [r0, #0]
   16e50:	466a      	mov	r2, sp
   16e52:	4907      	ldr	r1, [pc, #28]	; (16e70 <hci_hardware_error+0x30>)
   16e54:	6151      	str	r1, [r2, #20]
   16e56:	4907      	ldr	r1, [pc, #28]	; (16e74 <hci_hardware_error+0x34>)
   16e58:	4807      	ldr	r0, [pc, #28]	; (16e78 <hci_hardware_error+0x38>)
   16e5a:	e9c2 1306 	strd	r1, r3, [r2, #24]
   16e5e:	2304      	movs	r3, #4
   16e60:	f842 3f10 	str.w	r3, [r2, #16]!
   16e64:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16e68:	f015 f87b 	bl	2bf62 <z_log_msg_static_create.constprop.0>
}
   16e6c:	46bd      	mov	sp, r7
   16e6e:	bd80      	pop	{r7, pc}
   16e70:	000321d3 	.word	0x000321d3
   16e74:	000329df 	.word	0x000329df
   16e78:	0002fc14 	.word	0x0002fc14

00016e7c <le_data_len_change>:
{
   16e7c:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16e7e:	68c3      	ldr	r3, [r0, #12]
   16e80:	881c      	ldrh	r4, [r3, #0]
{
   16e82:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16e84:	4620      	mov	r0, r4
   16e86:	f002 fd79 	bl	1997c <bt_conn_lookup_handle>
	if (!conn) {
   16e8a:	b990      	cbnz	r0, 16eb2 <le_data_len_change+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16e8c:	466d      	mov	r5, sp
   16e8e:	b088      	sub	sp, #32
   16e90:	466a      	mov	r2, sp
   16e92:	4b09      	ldr	r3, [pc, #36]	; (16eb8 <le_data_len_change+0x3c>)
   16e94:	6153      	str	r3, [r2, #20]
   16e96:	4b09      	ldr	r3, [pc, #36]	; (16ebc <le_data_len_change+0x40>)
   16e98:	4809      	ldr	r0, [pc, #36]	; (16ec0 <le_data_len_change+0x44>)
   16e9a:	e9c2 3406 	strd	r3, r4, [r2, #24]
   16e9e:	2304      	movs	r3, #4
   16ea0:	f842 3f10 	str.w	r3, [r2, #16]!
   16ea4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16ea8:	f015 f85b 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   16eac:	46ad      	mov	sp, r5
}
   16eae:	46bd      	mov	sp, r7
   16eb0:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   16eb2:	f015 fa9f 	bl	2c3f4 <bt_conn_unref>
   16eb6:	e7fa      	b.n	16eae <le_data_len_change+0x32>
   16eb8:	00032040 	.word	0x00032040
   16ebc:	0003293f 	.word	0x0003293f
   16ec0:	0002fc14 	.word	0x0002fc14

00016ec4 <le_phy_update_complete>:
{
   16ec4:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16ec6:	68c3      	ldr	r3, [r0, #12]
   16ec8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   16ecc:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16ece:	4620      	mov	r0, r4
   16ed0:	f002 fd54 	bl	1997c <bt_conn_lookup_handle>
	if (!conn) {
   16ed4:	b990      	cbnz	r0, 16efc <le_phy_update_complete+0x38>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16ed6:	466d      	mov	r5, sp
   16ed8:	b088      	sub	sp, #32
   16eda:	466a      	mov	r2, sp
   16edc:	4b09      	ldr	r3, [pc, #36]	; (16f04 <le_phy_update_complete+0x40>)
   16ede:	6153      	str	r3, [r2, #20]
   16ee0:	4b09      	ldr	r3, [pc, #36]	; (16f08 <le_phy_update_complete+0x44>)
   16ee2:	480a      	ldr	r0, [pc, #40]	; (16f0c <le_phy_update_complete+0x48>)
   16ee4:	e9c2 3406 	strd	r3, r4, [r2, #24]
   16ee8:	2304      	movs	r3, #4
   16eea:	f842 3f10 	str.w	r3, [r2, #16]!
   16eee:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16ef2:	f015 f836 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   16ef6:	46ad      	mov	sp, r5
}
   16ef8:	46bd      	mov	sp, r7
   16efa:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   16efc:	f015 fa7a 	bl	2c3f4 <bt_conn_unref>
   16f00:	e7fa      	b.n	16ef8 <le_phy_update_complete+0x34>
   16f02:	bf00      	nop
   16f04:	00032040 	.word	0x00032040
   16f08:	00032952 	.word	0x00032952
   16f0c:	0002fc14 	.word	0x0002fc14

00016f10 <hci_data_buf_overflow>:
{
   16f10:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   16f12:	68c3      	ldr	r3, [r0, #12]
{
   16f14:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   16f16:	b088      	sub	sp, #32
   16f18:	781b      	ldrb	r3, [r3, #0]
   16f1a:	466a      	mov	r2, sp
   16f1c:	4907      	ldr	r1, [pc, #28]	; (16f3c <hci_data_buf_overflow+0x2c>)
   16f1e:	6151      	str	r1, [r2, #20]
   16f20:	4907      	ldr	r1, [pc, #28]	; (16f40 <hci_data_buf_overflow+0x30>)
   16f22:	4808      	ldr	r0, [pc, #32]	; (16f44 <hci_data_buf_overflow+0x34>)
   16f24:	e9c2 1306 	strd	r1, r3, [r2, #24]
   16f28:	2304      	movs	r3, #4
   16f2a:	f842 3f10 	str.w	r3, [r2, #16]!
   16f2e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   16f32:	f015 f816 	bl	2bf62 <z_log_msg_static_create.constprop.0>
}
   16f36:	46bd      	mov	sp, r7
   16f38:	bd80      	pop	{r7, pc}
   16f3a:	bf00      	nop
   16f3c:	000321f9 	.word	0x000321f9
   16f40:	00032a4d 	.word	0x00032a4d
   16f44:	0002fc14 	.word	0x0002fc14

00016f48 <le_remote_feat_complete>:
{
   16f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   16f4a:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16f4c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   16f50:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16f52:	4630      	mov	r0, r6
   16f54:	f002 fd12 	bl	1997c <bt_conn_lookup_handle>
	if (!conn) {
   16f58:	4604      	mov	r4, r0
   16f5a:	b990      	cbnz	r0, 16f82 <le_remote_feat_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16f5c:	466c      	mov	r4, sp
   16f5e:	b088      	sub	sp, #32
   16f60:	466a      	mov	r2, sp
   16f62:	4b10      	ldr	r3, [pc, #64]	; (16fa4 <le_remote_feat_complete+0x5c>)
   16f64:	6153      	str	r3, [r2, #20]
   16f66:	4b10      	ldr	r3, [pc, #64]	; (16fa8 <le_remote_feat_complete+0x60>)
   16f68:	4810      	ldr	r0, [pc, #64]	; (16fac <le_remote_feat_complete+0x64>)
   16f6a:	e9c2 3606 	strd	r3, r6, [r2, #24]
   16f6e:	2304      	movs	r3, #4
   16f70:	f842 3f10 	str.w	r3, [r2, #16]!
   16f74:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16f78:	f014 fff3 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   16f7c:	46a5      	mov	sp, r4
}
   16f7e:	46bd      	mov	sp, r7
   16f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   16f82:	782b      	ldrb	r3, [r5, #0]
   16f84:	b923      	cbnz	r3, 16f90 <le_remote_feat_complete+0x48>
		memcpy(conn->le.features, evt->features,
   16f86:	2208      	movs	r2, #8
   16f88:	1ce9      	adds	r1, r5, #3
   16f8a:	30ac      	adds	r0, #172	; 0xac
   16f8c:	f014 fe88 	bl	2bca0 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   16f94:	1d20      	adds	r0, r4, #4
   16f96:	f014 ffd5 	bl	2bf44 <atomic_or>
	bt_conn_unref(conn);
   16f9a:	4620      	mov	r0, r4
   16f9c:	f015 fa2a 	bl	2c3f4 <bt_conn_unref>
   16fa0:	e7ed      	b.n	16f7e <le_remote_feat_complete+0x36>
   16fa2:	bf00      	nop
   16fa4:	00032040 	.word	0x00032040
   16fa8:	000328fd 	.word	0x000328fd
   16fac:	0002fc14 	.word	0x0002fc14

00016fb0 <hci_cmd_done>:
{
   16fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16fb4:	4606      	mov	r6, r0
   16fb6:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   16fb8:	7a90      	ldrb	r0, [r2, #10]
   16fba:	4d45      	ldr	r5, [pc, #276]	; (170d0 <hci_cmd_done+0x120>)
{
   16fbc:	4688      	mov	r8, r1
   16fbe:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   16fc0:	f009 fc6c 	bl	2089c <net_buf_pool_get>
   16fc4:	4285      	cmp	r5, r0
   16fc6:	d01a      	beq.n	16ffe <hci_cmd_done+0x4e>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   16fc8:	7aa4      	ldrb	r4, [r4, #10]
   16fca:	4620      	mov	r0, r4
   16fcc:	f009 fc66 	bl	2089c <net_buf_pool_get>
   16fd0:	46e8      	mov	r8, sp
   16fd2:	b08c      	sub	sp, #48	; 0x30
   16fd4:	466a      	mov	r2, sp
   16fd6:	4b3f      	ldr	r3, [pc, #252]	; (170d4 <hci_cmd_done+0x124>)
   16fd8:	6153      	str	r3, [r2, #20]
   16fda:	4b3f      	ldr	r3, [pc, #252]	; (170d8 <hci_cmd_done+0x128>)
   16fdc:	6295      	str	r5, [r2, #40]	; 0x28
   16fde:	e9c2 3606 	strd	r3, r6, [r2, #24]
   16fe2:	2307      	movs	r3, #7
   16fe4:	e9c2 4008 	strd	r4, r0, [r2, #32]
   16fe8:	f44f 5162 	mov.w	r1, #14464	; 0x3880
   16fec:	f842 3f10 	str.w	r3, [r2, #16]!
   16ff0:	483a      	ldr	r0, [pc, #232]	; (170dc <hci_cmd_done+0x12c>)
   16ff2:	f014 ffb6 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   16ff6:	46c5      	mov	sp, r8
}
   16ff8:	46bd      	mov	sp, r7
   16ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   16ffe:	4620      	mov	r0, r4
   17000:	f009 fc54 	bl	208ac <net_buf_id>
   17004:	4d36      	ldr	r5, [pc, #216]	; (170e0 <hci_cmd_done+0x130>)
   17006:	f04f 090c 	mov.w	r9, #12
   1700a:	fb09 5000 	mla	r0, r9, r0, r5
   1700e:	8843      	ldrh	r3, [r0, #2]
   17010:	42b3      	cmp	r3, r6
   17012:	d018      	beq.n	17046 <hci_cmd_done+0x96>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   17014:	4620      	mov	r0, r4
   17016:	f009 fc49 	bl	208ac <net_buf_id>
   1701a:	fb09 5000 	mla	r0, r9, r0, r5
   1701e:	466c      	mov	r4, sp
   17020:	b08a      	sub	sp, #40	; 0x28
   17022:	8843      	ldrh	r3, [r0, #2]
   17024:	466a      	mov	r2, sp
   17026:	492f      	ldr	r1, [pc, #188]	; (170e4 <hci_cmd_done+0x134>)
   17028:	6151      	str	r1, [r2, #20]
   1702a:	492b      	ldr	r1, [pc, #172]	; (170d8 <hci_cmd_done+0x128>)
   1702c:	6213      	str	r3, [r2, #32]
   1702e:	2305      	movs	r3, #5
   17030:	e9c2 1606 	strd	r1, r6, [r2, #24]
   17034:	4829      	ldr	r0, [pc, #164]	; (170dc <hci_cmd_done+0x12c>)
   17036:	f842 3f10 	str.w	r3, [r2, #16]!
   1703a:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   1703e:	f014 ff90 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   17042:	46a5      	mov	sp, r4
		return;
   17044:	e7d8      	b.n	16ff8 <hci_cmd_done+0x48>
	if (bt_dev.sent_cmd) {
   17046:	4e28      	ldr	r6, [pc, #160]	; (170e8 <hci_cmd_done+0x138>)
   17048:	f8d6 0140 	ldr.w	r0, [r6, #320]	; 0x140
   1704c:	b120      	cbz	r0, 17058 <hci_cmd_done+0xa8>
		net_buf_unref(bt_dev.sent_cmd);
   1704e:	f009 fce7 	bl	20a20 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   17052:	2300      	movs	r3, #0
   17054:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
	if (cmd(buf)->state && !status) {
   17058:	4620      	mov	r0, r4
   1705a:	f009 fc27 	bl	208ac <net_buf_id>
   1705e:	260c      	movs	r6, #12
   17060:	fb06 5000 	mla	r0, r6, r0, r5
   17064:	6843      	ldr	r3, [r0, #4]
   17066:	b1ab      	cbz	r3, 17094 <hci_cmd_done+0xe4>
   17068:	f1b8 0f00 	cmp.w	r8, #0
   1706c:	d112      	bne.n	17094 <hci_cmd_done+0xe4>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1706e:	4620      	mov	r0, r4
   17070:	f009 fc1c 	bl	208ac <net_buf_id>
   17074:	fb06 5000 	mla	r0, r6, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   17078:	2101      	movs	r1, #1
   1707a:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   1707c:	e9d2 0300 	ldrd	r0, r3, [r2]
	if (val) {
   17080:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   17082:	f003 061f 	and.w	r6, r3, #31
   17086:	40b1      	lsls	r1, r6
	if (val) {
   17088:	095b      	lsrs	r3, r3, #5
   1708a:	b1da      	cbz	r2, 170c4 <hci_cmd_done+0x114>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1708c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   17090:	f014 ff58 	bl	2bf44 <atomic_or>
	if (cmd(buf)->sync) {
   17094:	4620      	mov	r0, r4
   17096:	f009 fc09 	bl	208ac <net_buf_id>
   1709a:	260c      	movs	r6, #12
   1709c:	fb06 5000 	mla	r0, r6, r0, r5
   170a0:	6883      	ldr	r3, [r0, #8]
   170a2:	2b00      	cmp	r3, #0
   170a4:	d0a8      	beq.n	16ff8 <hci_cmd_done+0x48>
		cmd(buf)->status = status;
   170a6:	4620      	mov	r0, r4
   170a8:	f009 fc00 	bl	208ac <net_buf_id>
   170ac:	4370      	muls	r0, r6
   170ae:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   170b2:	4620      	mov	r0, r4
   170b4:	f009 fbfa 	bl	208ac <net_buf_id>
   170b8:	fb06 5500 	mla	r5, r6, r0, r5
   170bc:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   170be:	f00e f953 	bl	25368 <z_impl_k_sem_give>
}
   170c2:	e799      	b.n	16ff8 <hci_cmd_done+0x48>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   170c4:	43c9      	mvns	r1, r1
   170c6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   170ca:	f014 ff4d 	bl	2bf68 <atomic_and.isra.0>
   170ce:	e7e1      	b.n	17094 <hci_cmd_done+0xe4>
   170d0:	20000a54 	.word	0x20000a54
   170d4:	00032225 	.word	0x00032225
   170d8:	00032a40 	.word	0x00032a40
   170dc:	0002fc14 	.word	0x0002fc14
   170e0:	2000338c 	.word	0x2000338c
   170e4:	0003225e 	.word	0x0003225e
   170e8:	20000388 	.word	0x20000388

000170ec <hci_cmd_status>:
{
   170ec:	b538      	push	{r3, r4, r5, lr}
   170ee:	2104      	movs	r1, #4
   170f0:	4604      	mov	r4, r0
   170f2:	300c      	adds	r0, #12
   170f4:	f017 f9ce 	bl	2e494 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   170f8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   170fa:	7801      	ldrb	r1, [r0, #0]
   170fc:	8840      	ldrh	r0, [r0, #2]
   170fe:	4622      	mov	r2, r4
   17100:	f7ff ff56 	bl	16fb0 <hci_cmd_done>
	if (ncmd) {
   17104:	b125      	cbz	r5, 17110 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   17106:	4803      	ldr	r0, [pc, #12]	; (17114 <hci_cmd_status+0x28>)
}
   17108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1710c:	f00e b92c 	b.w	25368 <z_impl_k_sem_give>
   17110:	bd38      	pop	{r3, r4, r5, pc}
   17112:	bf00      	nop
   17114:	200004b0 	.word	0x200004b0

00017118 <hci_cmd_complete>:
{
   17118:	b538      	push	{r3, r4, r5, lr}
   1711a:	2103      	movs	r1, #3
   1711c:	4604      	mov	r4, r0
   1711e:	300c      	adds	r0, #12
   17120:	f017 f9b8 	bl	2e494 <net_buf_simple_pull_mem>
	status = buf->data[0];
   17124:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   17126:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   17128:	7819      	ldrb	r1, [r3, #0]
   1712a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1712e:	4622      	mov	r2, r4
   17130:	f7ff ff3e 	bl	16fb0 <hci_cmd_done>
	if (ncmd) {
   17134:	b125      	cbz	r5, 17140 <hci_cmd_complete+0x28>
   17136:	4803      	ldr	r0, [pc, #12]	; (17144 <hci_cmd_complete+0x2c>)
}
   17138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1713c:	f00e b914 	b.w	25368 <z_impl_k_sem_give>
   17140:	bd38      	pop	{r3, r4, r5, pc}
   17142:	bf00      	nop
   17144:	200004b0 	.word	0x200004b0

00017148 <hci_tx_thread>:
{
   17148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   1714c:	f8df 816c 	ldr.w	r8, [pc, #364]	; 172bc <hci_tx_thread+0x174>
		BT_ASSERT(err == 0);
   17150:	f8df 916c 	ldr.w	r9, [pc, #364]	; 172c0 <hci_tx_thread+0x178>
{
   17154:	b083      	sub	sp, #12
			ev_count += bt_conn_prepare_events(&events[1]);
   17156:	f108 0a14 	add.w	sl, r8, #20
{
   1715a:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   1715c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   17160:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   17162:	f36f 3394 	bfc	r3, #14, #7
   17166:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1716a:	f002 fbbf 	bl	198ec <bt_conn_prepare_events>
   1716e:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   17170:	4852      	ldr	r0, [pc, #328]	; (172bc <hci_tx_thread+0x174>)
   17172:	f04f 32ff 	mov.w	r2, #4294967295
   17176:	f04f 33ff 	mov.w	r3, #4294967295
   1717a:	4629      	mov	r1, r5
   1717c:	f00f f884 	bl	26288 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   17180:	b160      	cbz	r0, 1719c <hci_tx_thread+0x54>
   17182:	4950      	ldr	r1, [pc, #320]	; (172c4 <hci_tx_thread+0x17c>)
   17184:	4850      	ldr	r0, [pc, #320]	; (172c8 <hci_tx_thread+0x180>)
   17186:	f640 23c8 	movw	r3, #2760	; 0xac8
   1718a:	464a      	mov	r2, r9
   1718c:	f012 fcee 	bl	29b6c <assert_print>
   17190:	4040      	eors	r0, r0
   17192:	f380 8811 	msr	BASEPRI, r0
   17196:	f04f 0003 	mov.w	r0, #3
   1719a:	df02      	svc	2
{
   1719c:	4e47      	ldr	r6, [pc, #284]	; (172bc <hci_tx_thread+0x174>)
	for (; count; ev++, count--) {
   1719e:	b915      	cbnz	r5, 171a6 <hci_tx_thread+0x5e>
	z_impl_k_yield();
   171a0:	f00e fd62 	bl	25c68 <z_impl_k_yield>
	while (1) {
   171a4:	e7da      	b.n	1715c <hci_tx_thread+0x14>
		switch (ev->state) {
   171a6:	68f3      	ldr	r3, [r6, #12]
   171a8:	f3c3 3386 	ubfx	r3, r3, #14, #7
   171ac:	2b02      	cmp	r3, #2
   171ae:	d969      	bls.n	17284 <hci_tx_thread+0x13c>
   171b0:	2b04      	cmp	r3, #4
   171b2:	d171      	bne.n	17298 <hci_tx_thread+0x150>
			if (ev->tag == BT_EVENT_CMD_TX) {
   171b4:	7b33      	ldrb	r3, [r6, #12]
   171b6:	2b00      	cmp	r3, #0
   171b8:	d167      	bne.n	1728a <hci_tx_thread+0x142>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   171ba:	4844      	ldr	r0, [pc, #272]	; (172cc <hci_tx_thread+0x184>)
   171bc:	2200      	movs	r2, #0
   171be:	2300      	movs	r3, #0
   171c0:	f017 f8d6 	bl	2e370 <net_buf_get>
	BT_ASSERT(buf);
   171c4:	4604      	mov	r4, r0
   171c6:	b960      	cbnz	r0, 171e2 <hci_tx_thread+0x9a>
   171c8:	4941      	ldr	r1, [pc, #260]	; (172d0 <hci_tx_thread+0x188>)
   171ca:	483f      	ldr	r0, [pc, #252]	; (172c8 <hci_tx_thread+0x180>)
   171cc:	f640 235a 	movw	r3, #2650	; 0xa5a
   171d0:	464a      	mov	r2, r9
   171d2:	f012 fccb 	bl	29b6c <assert_print>
   171d6:	4040      	eors	r0, r0
   171d8:	f380 8811 	msr	BASEPRI, r0
   171dc:	f04f 0003 	mov.w	r0, #3
   171e0:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   171e2:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 172d4 <hci_tx_thread+0x18c>
	return z_impl_k_sem_take(sem, timeout);
   171e6:	483c      	ldr	r0, [pc, #240]	; (172d8 <hci_tx_thread+0x190>)
   171e8:	f04f 32ff 	mov.w	r2, #4294967295
   171ec:	f04f 33ff 	mov.w	r3, #4294967295
   171f0:	f00e f8e0 	bl	253b4 <z_impl_k_sem_take>
   171f4:	f8db 2140 	ldr.w	r2, [fp, #320]	; 0x140
   171f8:	b1c2      	cbz	r2, 1722c <hci_tx_thread+0xe4>
		LOG_ERR("Uncleared pending sent_cmd");
   171fa:	f8c7 d004 	str.w	sp, [r7, #4]
   171fe:	b088      	sub	sp, #32
   17200:	466a      	mov	r2, sp
   17202:	4936      	ldr	r1, [pc, #216]	; (172dc <hci_tx_thread+0x194>)
   17204:	6151      	str	r1, [r2, #20]
   17206:	4936      	ldr	r1, [pc, #216]	; (172e0 <hci_tx_thread+0x198>)
   17208:	6191      	str	r1, [r2, #24]
   1720a:	2103      	movs	r1, #3
   1720c:	f842 1f10 	str.w	r1, [r2, #16]!
   17210:	4834      	ldr	r0, [pc, #208]	; (172e4 <hci_tx_thread+0x19c>)
   17212:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17216:	f014 fea4 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   1721a:	f8d7 d004 	ldr.w	sp, [r7, #4]
		net_buf_unref(bt_dev.sent_cmd);
   1721e:	f8db 0140 	ldr.w	r0, [fp, #320]	; 0x140
   17222:	f009 fbfd 	bl	20a20 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   17226:	2200      	movs	r2, #0
   17228:	f8cb 2140 	str.w	r2, [fp, #320]	; 0x140
	bt_dev.sent_cmd = net_buf_ref(buf);
   1722c:	4620      	mov	r0, r4
   1722e:	f017 f8d0 	bl	2e3d2 <net_buf_ref>
   17232:	f8cb 0140 	str.w	r0, [fp, #320]	; 0x140
		return bt_hci_ecc_send(buf);
   17236:	4620      	mov	r0, r4
   17238:	f7ff f91a 	bl	16470 <bt_hci_ecc_send>
	if (err) {
   1723c:	b310      	cbz	r0, 17284 <hci_tx_thread+0x13c>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1723e:	46eb      	mov	fp, sp
   17240:	b088      	sub	sp, #32
   17242:	466a      	mov	r2, sp
   17244:	4b28      	ldr	r3, [pc, #160]	; (172e8 <hci_tx_thread+0x1a0>)
   17246:	6153      	str	r3, [r2, #20]
   17248:	4b25      	ldr	r3, [pc, #148]	; (172e0 <hci_tx_thread+0x198>)
   1724a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1724e:	2304      	movs	r3, #4
   17250:	f842 3f10 	str.w	r3, [r2, #16]!
   17254:	4823      	ldr	r0, [pc, #140]	; (172e4 <hci_tx_thread+0x19c>)
   17256:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1725a:	f014 fe82 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   1725e:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   17260:	481d      	ldr	r0, [pc, #116]	; (172d8 <hci_tx_thread+0x190>)
   17262:	f00e f881 	bl	25368 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   17266:	4620      	mov	r0, r4
   17268:	f009 fb20 	bl	208ac <net_buf_id>
   1726c:	4b1f      	ldr	r3, [pc, #124]	; (172ec <hci_tx_thread+0x1a4>)
   1726e:	220c      	movs	r2, #12
   17270:	fb02 3000 	mla	r0, r2, r0, r3
   17274:	211f      	movs	r1, #31
   17276:	8840      	ldrh	r0, [r0, #2]
   17278:	4622      	mov	r2, r4
   1727a:	f7ff fe99 	bl	16fb0 <hci_cmd_done>
		net_buf_unref(buf);
   1727e:	4620      	mov	r0, r4
   17280:	f009 fbce 	bl	20a20 <net_buf_unref>
	for (; count; ev++, count--) {
   17284:	3614      	adds	r6, #20
   17286:	3d01      	subs	r5, #1
   17288:	e789      	b.n	1719e <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1728a:	2b01      	cmp	r3, #1
   1728c:	d1fa      	bne.n	17284 <hci_tx_thread+0x13c>
					conn = CONTAINER_OF(ev->fifo,
   1728e:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   17290:	3838      	subs	r0, #56	; 0x38
   17292:	f002 ffdd 	bl	1a250 <bt_conn_process_tx>
   17296:	e7f5      	b.n	17284 <hci_tx_thread+0x13c>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   17298:	466c      	mov	r4, sp
   1729a:	b088      	sub	sp, #32
   1729c:	466a      	mov	r2, sp
   1729e:	4914      	ldr	r1, [pc, #80]	; (172f0 <hci_tx_thread+0x1a8>)
   172a0:	6151      	str	r1, [r2, #20]
   172a2:	4914      	ldr	r1, [pc, #80]	; (172f4 <hci_tx_thread+0x1ac>)
   172a4:	480f      	ldr	r0, [pc, #60]	; (172e4 <hci_tx_thread+0x19c>)
		switch (ev->state) {
   172a6:	e9c2 1306 	strd	r1, r3, [r2, #24]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   172aa:	2304      	movs	r3, #4
   172ac:	f842 3f10 	str.w	r3, [r2, #16]!
   172b0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   172b4:	f014 fe55 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   172b8:	46a5      	mov	sp, r4
   172ba:	e7e3      	b.n	17284 <hci_tx_thread+0x13c>
   172bc:	2000055c 	.word	0x2000055c
   172c0:	000320d5 	.word	0x000320d5
   172c4:	00032295 	.word	0x00032295
   172c8:	00032122 	.word	0x00032122
   172cc:	200004d4 	.word	0x200004d4
   172d0:	000346f3 	.word	0x000346f3
   172d4:	20000388 	.word	0x20000388
   172d8:	200004b0 	.word	0x200004b0
   172dc:	0003229e 	.word	0x0003229e
   172e0:	000327bf 	.word	0x000327bf
   172e4:	0002fc14 	.word	0x0002fc14
   172e8:	000322bd 	.word	0x000322bd
   172ec:	2000338c 	.word	0x2000338c
   172f0:	000322e3 	.word	0x000322e3
   172f4:	000327c8 	.word	0x000327c8

000172f8 <hci_num_completed_packets>:
{
   172f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   172fc:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   17300:	8a01      	ldrh	r1, [r0, #16]
   17302:	f898 4000 	ldrb.w	r4, [r8]
   17306:	2301      	movs	r3, #1
   17308:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1730c:	428b      	cmp	r3, r1
{
   1730e:	af00      	add	r7, sp, #0
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   17310:	f240 8094 	bls.w	1743c <hci_num_completed_packets+0x144>
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
   17314:	466d      	mov	r5, sp
   17316:	b08a      	sub	sp, #40	; 0x28
   17318:	466a      	mov	r2, sp
   1731a:	484b      	ldr	r0, [pc, #300]	; (17448 <hci_num_completed_packets+0x150>)
   1731c:	6150      	str	r0, [r2, #20]
   1731e:	484b      	ldr	r0, [pc, #300]	; (1744c <hci_num_completed_packets+0x154>)
   17320:	e9c2 3108 	strd	r3, r1, [r2, #32]
   17324:	2306      	movs	r3, #6
   17326:	e9c2 0406 	strd	r0, r4, [r2, #24]
   1732a:	f44f 5141 	mov.w	r1, #12352	; 0x3040
   1732e:	f842 3f10 	str.w	r3, [r2, #16]!
   17332:	4847      	ldr	r0, [pc, #284]	; (17450 <hci_num_completed_packets+0x158>)
   17334:	f014 fe15 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   17338:	46ad      	mov	sp, r5
}
   1733a:	46bd      	mov	sp, r7
   1733c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("No connection for handle %u", handle);
   17340:	466c      	mov	r4, sp
   17342:	b088      	sub	sp, #32
   17344:	466a      	mov	r2, sp
   17346:	4b43      	ldr	r3, [pc, #268]	; (17454 <hci_num_completed_packets+0x15c>)
   17348:	6153      	str	r3, [r2, #20]
   1734a:	4b40      	ldr	r3, [pc, #256]	; (1744c <hci_num_completed_packets+0x154>)
   1734c:	4840      	ldr	r0, [pc, #256]	; (17450 <hci_num_completed_packets+0x158>)
   1734e:	e9c2 3b06 	strd	r3, fp, [r2, #24]
   17352:	2304      	movs	r3, #4
   17354:	f842 3f10 	str.w	r3, [r2, #16]!
   17358:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1735c:	f014 fe01 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   17360:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   17362:	3501      	adds	r5, #1
   17364:	f898 3000 	ldrb.w	r3, [r8]
   17368:	429d      	cmp	r5, r3
   1736a:	dae6      	bge.n	1733a <hci_num_completed_packets+0x42>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1736c:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   17370:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   17374:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   17378:	4658      	mov	r0, fp
   1737a:	f002 faff 	bl	1997c <bt_conn_lookup_handle>
		if (!conn) {
   1737e:	4604      	mov	r4, r0
   17380:	2800      	cmp	r0, #0
   17382:	d0dd      	beq.n	17340 <hci_num_completed_packets+0x48>
			k_work_submit(&conn->tx_complete_work);
   17384:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   17388:	b36e      	cbz	r6, 173e6 <hci_num_completed_packets+0xee>
	__asm__ volatile(
   1738a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1738e:	f3ef 8211 	mrs	r2, BASEPRI
   17392:	f383 8812 	msr	BASEPRI_MAX, r3
   17396:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1739a:	69e3      	ldr	r3, [r4, #28]
   1739c:	b16b      	cbz	r3, 173ba <hci_num_completed_packets+0xc2>
				conn->pending_no_cb--;
   1739e:	3b01      	subs	r3, #1
   173a0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   173a2:	f382 8811 	msr	BASEPRI, r2
   173a6:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   173aa:	4620      	mov	r0, r4
   173ac:	f002 f92c 	bl	19608 <bt_conn_get_pkts>
   173b0:	3e01      	subs	r6, #1
   173b2:	f00d ffd9 	bl	25368 <z_impl_k_sem_give>
   173b6:	b2b6      	uxth	r6, r6
   173b8:	e7e6      	b.n	17388 <hci_num_completed_packets+0x90>
   173ba:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   173bc:	b9bb      	cbnz	r3, 173ee <hci_num_completed_packets+0xf6>
   173be:	f382 8811 	msr	BASEPRI, r2
   173c2:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   173c6:	466e      	mov	r6, sp
   173c8:	b088      	sub	sp, #32
   173ca:	466a      	mov	r2, sp
   173cc:	4b1f      	ldr	r3, [pc, #124]	; (1744c <hci_num_completed_packets+0x154>)
   173ce:	6193      	str	r3, [r2, #24]
   173d0:	2303      	movs	r3, #3
   173d2:	f8c2 a014 	str.w	sl, [r2, #20]
   173d6:	481e      	ldr	r0, [pc, #120]	; (17450 <hci_num_completed_packets+0x158>)
   173d8:	f842 3f10 	str.w	r3, [r2, #16]!
   173dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   173e0:	f014 fdbf 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   173e4:	46b5      	mov	sp, r6
		bt_conn_unref(conn);
   173e6:	4620      	mov	r0, r4
   173e8:	f015 f804 	bl	2c3f4 <bt_conn_unref>
   173ec:	e7b9      	b.n	17362 <hci_num_completed_packets+0x6a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   173ee:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   173f0:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   173f2:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   173f4:	428b      	cmp	r3, r1
	list->tail = node;
   173f6:	bf08      	it	eq
   173f8:	61a0      	streq	r0, [r4, #24]
   173fa:	f382 8811 	msr	BASEPRI, r2
   173fe:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   17402:	f04f 0240 	mov.w	r2, #64	; 0x40
   17406:	f3ef 8111 	mrs	r1, BASEPRI
   1740a:	f382 8812 	msr	BASEPRI_MAX, r2
   1740e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   17412:	68da      	ldr	r2, [r3, #12]
   17414:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   17416:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   1741a:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   1741e:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   17420:	b94a      	cbnz	r2, 17436 <hci_num_completed_packets+0x13e>
	list->head = node;
   17422:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   17426:	f381 8811 	msr	BASEPRI, r1
   1742a:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1742e:	4658      	mov	r0, fp
   17430:	f00e f938 	bl	256a4 <k_work_submit>
   17434:	e7b9      	b.n	173aa <hci_num_completed_packets+0xb2>
	parent->next = child;
   17436:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17438:	6263      	str	r3, [r4, #36]	; 0x24
}
   1743a:	e7f4      	b.n	17426 <hci_num_completed_packets+0x12e>
	for (i = 0; i < evt->num_handles; i++) {
   1743c:	2500      	movs	r5, #0
				LOG_ERR("packets count mismatch");
   1743e:	f8df a018 	ldr.w	sl, [pc, #24]	; 17458 <hci_num_completed_packets+0x160>
			tx->pending_no_cb = 0U;
   17442:	46a9      	mov	r9, r5
   17444:	e78e      	b.n	17364 <hci_num_completed_packets+0x6c>
   17446:	bf00      	nop
   17448:	00032308 	.word	0x00032308
   1744c:	00032a63 	.word	0x00032a63
   17450:	0002fc14 	.word	0x0002fc14
   17454:	00032336 	.word	0x00032336
   17458:	00032356 	.word	0x00032356

0001745c <hci_disconn_complete>:
{
   1745c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   17460:	68c6      	ldr	r6, [r0, #12]
	if (evt->status) {
   17462:	7835      	ldrb	r5, [r6, #0]
{
   17464:	af00      	add	r7, sp, #0
	if (evt->status) {
   17466:	b9bd      	cbnz	r5, 17498 <hci_disconn_complete+0x3c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17468:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   1746c:	4640      	mov	r0, r8
   1746e:	f002 fa85 	bl	1997c <bt_conn_lookup_handle>
	if (!conn) {
   17472:	4604      	mov	r4, r0
   17474:	b998      	cbnz	r0, 1749e <hci_disconn_complete+0x42>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   17476:	466c      	mov	r4, sp
   17478:	b088      	sub	sp, #32
   1747a:	466a      	mov	r2, sp
   1747c:	4b15      	ldr	r3, [pc, #84]	; (174d4 <hci_disconn_complete+0x78>)
   1747e:	6153      	str	r3, [r2, #20]
   17480:	4b15      	ldr	r3, [pc, #84]	; (174d8 <hci_disconn_complete+0x7c>)
   17482:	4816      	ldr	r0, [pc, #88]	; (174dc <hci_disconn_complete+0x80>)
   17484:	e9c2 3806 	strd	r3, r8, [r2, #24]
   17488:	2304      	movs	r3, #4
   1748a:	f842 3f10 	str.w	r3, [r2, #16]!
   1748e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17492:	f014 fd66 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   17496:	46a5      	mov	sp, r4
}
   17498:	46bd      	mov	sp, r7
   1749a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   1749e:	78f3      	ldrb	r3, [r6, #3]
   174a0:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   174a2:	4629      	mov	r1, r5
   174a4:	f002 fa72 	bl	1998c <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   174a8:	78a3      	ldrb	r3, [r4, #2]
   174aa:	2b01      	cmp	r3, #1
   174ac:	d003      	beq.n	174b6 <hci_disconn_complete+0x5a>
	bt_conn_unref(conn);
   174ae:	4620      	mov	r0, r4
   174b0:	f014 ffa0 	bl	2c3f4 <bt_conn_unref>
   174b4:	e7f0      	b.n	17498 <hci_disconn_complete+0x3c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   174b6:	f3bf 8f5b 	dmb	ish
   174ba:	6863      	ldr	r3, [r4, #4]
   174bc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   174c0:	07db      	lsls	r3, r3, #31
   174c2:	d5f4      	bpl.n	174ae <hci_disconn_complete+0x52>
		bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   174c4:	4620      	mov	r0, r4
   174c6:	2102      	movs	r1, #2
   174c8:	f002 fa60 	bl	1998c <bt_conn_set_state>
		bt_le_scan_update(false);
   174cc:	4628      	mov	r0, r5
   174ce:	f001 fbfd 	bl	18ccc <bt_le_scan_update>
   174d2:	e7ec      	b.n	174ae <hci_disconn_complete+0x52>
   174d4:	00032371 	.word	0x00032371
   174d8:	00032996 	.word	0x00032996
   174dc:	0002fc14 	.word	0x0002fc14

000174e0 <bt_hci_cmd_state_set_init>:
{
   174e0:	b510      	push	{r4, lr}
	state->bit = bit;
   174e2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   174e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   174ea:	720b      	strb	r3, [r1, #8]
{
   174ec:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   174ee:	f009 f9dd 	bl	208ac <net_buf_id>
   174f2:	4b03      	ldr	r3, [pc, #12]	; (17500 <bt_hci_cmd_state_set_init+0x20>)
   174f4:	220c      	movs	r2, #12
   174f6:	fb02 3300 	mla	r3, r2, r0, r3
   174fa:	605c      	str	r4, [r3, #4]
}
   174fc:	bd10      	pop	{r4, pc}
   174fe:	bf00      	nop
   17500:	2000338c 	.word	0x2000338c

00017504 <bt_hci_cmd_create>:
{
   17504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   17508:	f04f 32ff 	mov.w	r2, #4294967295
   1750c:	f04f 33ff 	mov.w	r3, #4294967295
   17510:	4606      	mov	r6, r0
   17512:	4817      	ldr	r0, [pc, #92]	; (17570 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   17514:	4d17      	ldr	r5, [pc, #92]	; (17574 <bt_hci_cmd_create+0x70>)
{
   17516:	460f      	mov	r7, r1
   17518:	f016 ff25 	bl	2e366 <net_buf_alloc_fixed>
   1751c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   1751e:	f100 0a0c 	add.w	sl, r0, #12
   17522:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   17524:	f04f 0800 	mov.w	r8, #0
   17528:	4650      	mov	r0, sl
   1752a:	f016 ff7e 	bl	2e42a <net_buf_simple_reserve>
   1752e:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   17532:	4620      	mov	r0, r4
   17534:	f009 f9ba 	bl	208ac <net_buf_id>
   17538:	f04f 090c 	mov.w	r9, #12
   1753c:	fb09 5000 	mla	r0, r9, r0, r5
   17540:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   17542:	4620      	mov	r0, r4
   17544:	f009 f9b2 	bl	208ac <net_buf_id>
   17548:	fb09 5000 	mla	r0, r9, r0, r5
   1754c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   17550:	4620      	mov	r0, r4
   17552:	f009 f9ab 	bl	208ac <net_buf_id>
   17556:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   1755a:	2103      	movs	r1, #3
   1755c:	4650      	mov	r0, sl
   1755e:	f8c5 8004 	str.w	r8, [r5, #4]
   17562:	f016 ff66 	bl	2e432 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   17566:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   17568:	7087      	strb	r7, [r0, #2]
}
   1756a:	4620      	mov	r0, r4
   1756c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17570:	20000a54 	.word	0x20000a54
   17574:	2000338c 	.word	0x2000338c

00017578 <bt_hci_cmd_send>:
{
   17578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1757a:	4605      	mov	r5, r0
   1757c:	af00      	add	r7, sp, #0
	if (!buf) {
   1757e:	460c      	mov	r4, r1
   17580:	b919      	cbnz	r1, 1758a <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   17582:	f7ff ffbf 	bl	17504 <bt_hci_cmd_create>
		if (!buf) {
   17586:	4604      	mov	r4, r0
   17588:	b328      	cbz	r0, 175d6 <bt_hci_cmd_send+0x5e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1758a:	f640 4335 	movw	r3, #3125	; 0xc35
   1758e:	429d      	cmp	r5, r3
   17590:	d11b      	bne.n	175ca <bt_hci_cmd_send+0x52>
		return bt_hci_ecc_send(buf);
   17592:	4620      	mov	r0, r4
   17594:	f7fe ff6c 	bl	16470 <bt_hci_ecc_send>
		if (err) {
   17598:	4605      	mov	r5, r0
   1759a:	b198      	cbz	r0, 175c4 <bt_hci_cmd_send+0x4c>
			LOG_ERR("Unable to send to driver (err %d)", err);
   1759c:	466e      	mov	r6, sp
   1759e:	b088      	sub	sp, #32
   175a0:	466a      	mov	r2, sp
   175a2:	4b0e      	ldr	r3, [pc, #56]	; (175dc <bt_hci_cmd_send+0x64>)
   175a4:	6153      	str	r3, [r2, #20]
   175a6:	4b0e      	ldr	r3, [pc, #56]	; (175e0 <bt_hci_cmd_send+0x68>)
   175a8:	e9c2 3006 	strd	r3, r0, [r2, #24]
   175ac:	2304      	movs	r3, #4
   175ae:	480d      	ldr	r0, [pc, #52]	; (175e4 <bt_hci_cmd_send+0x6c>)
   175b0:	f842 3f10 	str.w	r3, [r2, #16]!
   175b4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   175b8:	f014 fcd3 	bl	2bf62 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   175bc:	4620      	mov	r0, r4
   175be:	46b5      	mov	sp, r6
   175c0:	f009 fa2e 	bl	20a20 <net_buf_unref>
}
   175c4:	4628      	mov	r0, r5
   175c6:	46bd      	mov	sp, r7
   175c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   175ca:	4807      	ldr	r0, [pc, #28]	; (175e8 <bt_hci_cmd_send+0x70>)
   175cc:	4621      	mov	r1, r4
   175ce:	f016 fefe 	bl	2e3ce <net_buf_put>
	return 0;
   175d2:	2500      	movs	r5, #0
   175d4:	e7f6      	b.n	175c4 <bt_hci_cmd_send+0x4c>
			return -ENOBUFS;
   175d6:	f06f 0568 	mvn.w	r5, #104	; 0x68
   175da:	e7f3      	b.n	175c4 <bt_hci_cmd_send+0x4c>
   175dc:	000322bd 	.word	0x000322bd
   175e0:	00032ad9 	.word	0x00032ad9
   175e4:	0002fc14 	.word	0x0002fc14
   175e8:	200004d4 	.word	0x200004d4

000175ec <le_ltk_request>:
{
   175ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   175f0:	b086      	sub	sp, #24
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   175f2:	68c4      	ldr	r4, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   175f4:	8826      	ldrh	r6, [r4, #0]
   175f6:	fa1f f886 	uxth.w	r8, r6
{
   175fa:	af02      	add	r7, sp, #8
	conn = bt_conn_lookup_handle(handle);
   175fc:	4640      	mov	r0, r8
   175fe:	f002 f9bd 	bl	1997c <bt_conn_lookup_handle>
	if (!conn) {
   17602:	4605      	mov	r5, r0
   17604:	b9a0      	cbnz	r0, 17630 <le_ltk_request+0x44>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17606:	466c      	mov	r4, sp
   17608:	b088      	sub	sp, #32
   1760a:	aa02      	add	r2, sp, #8
   1760c:	4b2e      	ldr	r3, [pc, #184]	; (176c8 <le_ltk_request+0xdc>)
   1760e:	6153      	str	r3, [r2, #20]
   17610:	4b2e      	ldr	r3, [pc, #184]	; (176cc <le_ltk_request+0xe0>)
   17612:	482f      	ldr	r0, [pc, #188]	; (176d0 <le_ltk_request+0xe4>)
   17614:	e9c2 3806 	strd	r3, r8, [r2, #24]
   17618:	2304      	movs	r3, #4
   1761a:	f842 3f10 	str.w	r3, [r2, #16]!
   1761e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17622:	f014 fc9e 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   17626:	46a5      	mov	sp, r4
}
   17628:	3710      	adds	r7, #16
   1762a:	46bd      	mov	sp, r7
   1762c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   17630:	f8d4 2002 	ldr.w	r2, [r4, #2]
   17634:	f8d4 3006 	ldr.w	r3, [r4, #6]
   17638:	9701      	str	r7, [sp, #4]
   1763a:	8961      	ldrh	r1, [r4, #10]
   1763c:	9100      	str	r1, [sp, #0]
   1763e:	f016 fc44 	bl	2deca <bt_smp_request_ltk>
   17642:	b350      	cbz	r0, 1769a <le_ltk_request+0xae>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   17644:	2112      	movs	r1, #18
   17646:	f242 001a 	movw	r0, #8218	; 0x201a
   1764a:	f7ff ff5b 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   1764e:	4604      	mov	r4, r0
   17650:	b998      	cbnz	r0, 1767a <le_ltk_request+0x8e>
		LOG_ERR("Out of command buffers");
   17652:	466c      	mov	r4, sp
   17654:	b088      	sub	sp, #32
   17656:	aa02      	add	r2, sp, #8
   17658:	4b1e      	ldr	r3, [pc, #120]	; (176d4 <le_ltk_request+0xe8>)
   1765a:	6153      	str	r3, [r2, #20]
   1765c:	4b1e      	ldr	r3, [pc, #120]	; (176d8 <le_ltk_request+0xec>)
		LOG_ERR("Out of command buffers");
   1765e:	6193      	str	r3, [r2, #24]
   17660:	2303      	movs	r3, #3
   17662:	f842 3f10 	str.w	r3, [r2, #16]!
   17666:	481a      	ldr	r0, [pc, #104]	; (176d0 <le_ltk_request+0xe4>)
   17668:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1766c:	f014 fc79 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   17670:	46a5      	mov	sp, r4
	bt_conn_unref(conn);
   17672:	4628      	mov	r0, r5
   17674:	f014 febe 	bl	2c3f4 <bt_conn_unref>
   17678:	e7d6      	b.n	17628 <le_ltk_request+0x3c>
   1767a:	2112      	movs	r1, #18
   1767c:	300c      	adds	r0, #12
   1767e:	f016 fed8 	bl	2e432 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   17682:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   17684:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   17688:	2210      	movs	r2, #16
   1768a:	f014 fb09 	bl	2bca0 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1768e:	4621      	mov	r1, r4
   17690:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   17694:	f7ff ff70 	bl	17578 <bt_hci_cmd_send>
   17698:	e7eb      	b.n	17672 <le_ltk_request+0x86>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1769a:	2102      	movs	r1, #2
   1769c:	f242 001b 	movw	r0, #8219	; 0x201b
   176a0:	f7ff ff30 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   176a4:	4604      	mov	r4, r0
   176a6:	b930      	cbnz	r0, 176b6 <le_ltk_request+0xca>
		LOG_ERR("Out of command buffers");
   176a8:	466c      	mov	r4, sp
   176aa:	b088      	sub	sp, #32
   176ac:	aa02      	add	r2, sp, #8
   176ae:	4b09      	ldr	r3, [pc, #36]	; (176d4 <le_ltk_request+0xe8>)
   176b0:	6153      	str	r3, [r2, #20]
   176b2:	4b0a      	ldr	r3, [pc, #40]	; (176dc <le_ltk_request+0xf0>)
   176b4:	e7d3      	b.n	1765e <le_ltk_request+0x72>
   176b6:	2102      	movs	r1, #2
   176b8:	300c      	adds	r0, #12
   176ba:	f016 feba 	bl	2e432 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   176be:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   176c0:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   176c2:	f242 001b 	movw	r0, #8219	; 0x201b
   176c6:	e7e5      	b.n	17694 <le_ltk_request+0xa8>
   176c8:	00032040 	.word	0x00032040
   176cc:	00032987 	.word	0x00032987
   176d0:	0002fc14 	.word	0x0002fc14
   176d4:	0003239b 	.word	0x0003239b
   176d8:	0003297a 	.word	0x0003297a
   176dc:	00032969 	.word	0x00032969

000176e0 <le_conn_param_req>:
{
   176e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   176e4:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   176e6:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   176e8:	78d9      	ldrb	r1, [r3, #3]
   176ea:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   176ec:	f8b3 8000 	ldrh.w	r8, [r3]
{
   176f0:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   176f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   176f6:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   176f8:	7959      	ldrb	r1, [r3, #5]
   176fa:	791a      	ldrb	r2, [r3, #4]
   176fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17700:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   17702:	799a      	ldrb	r2, [r3, #6]
   17704:	79d9      	ldrb	r1, [r3, #7]
   17706:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1770a:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1770c:	7a1a      	ldrb	r2, [r3, #8]
   1770e:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   17710:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17714:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   17718:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1771a:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   1771c:	f002 f92e 	bl	1997c <bt_conn_lookup_handle>
	if (!conn) {
   17720:	4606      	mov	r6, r0
   17722:	b9c0      	cbnz	r0, 17756 <le_conn_param_req+0x76>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17724:	466d      	mov	r5, sp
   17726:	b088      	sub	sp, #32
   17728:	466a      	mov	r2, sp
   1772a:	4b21      	ldr	r3, [pc, #132]	; (177b0 <le_conn_param_req+0xd0>)
   1772c:	6153      	str	r3, [r2, #20]
   1772e:	4b21      	ldr	r3, [pc, #132]	; (177b4 <le_conn_param_req+0xd4>)
   17730:	4821      	ldr	r0, [pc, #132]	; (177b8 <le_conn_param_req+0xd8>)
   17732:	e9c2 3406 	strd	r3, r4, [r2, #24]
   17736:	2304      	movs	r3, #4
   17738:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1773c:	f842 3f10 	str.w	r3, [r2, #16]!
   17740:	f014 fc0f 	bl	2bf62 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   17744:	2102      	movs	r1, #2
   17746:	46ad      	mov	sp, r5
   17748:	4620      	mov	r0, r4
   1774a:	f014 fc29 	bl	2bfa0 <le_conn_param_neg_reply>
}
   1774e:	3708      	adds	r7, #8
   17750:	46bd      	mov	sp, r7
   17752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   17756:	4639      	mov	r1, r7
   17758:	f002 fa9e 	bl	19c98 <le_param_req>
   1775c:	b938      	cbnz	r0, 1776e <le_conn_param_req+0x8e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1775e:	211e      	movs	r1, #30
   17760:	4620      	mov	r0, r4
   17762:	f014 fc1d 	bl	2bfa0 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   17766:	4630      	mov	r0, r6
   17768:	f014 fe44 	bl	2c3f4 <bt_conn_unref>
   1776c:	e7ef      	b.n	1774e <le_conn_param_req+0x6e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1776e:	210e      	movs	r1, #14
   17770:	f242 0020 	movw	r0, #8224	; 0x2020
   17774:	f7ff fec6 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   17778:	4605      	mov	r5, r0
   1777a:	2800      	cmp	r0, #0
   1777c:	d0f3      	beq.n	17766 <le_conn_param_req+0x86>
   1777e:	210e      	movs	r1, #14
   17780:	300c      	adds	r0, #12
   17782:	f016 fe56 	bl	2e432 <net_buf_simple_add>
   17786:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   17788:	220e      	movs	r2, #14
   1778a:	2100      	movs	r1, #0
   1778c:	f014 fa93 	bl	2bcb6 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   17790:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   17794:	883b      	ldrh	r3, [r7, #0]
   17796:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   17798:	887b      	ldrh	r3, [r7, #2]
   1779a:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1779c:	88bb      	ldrh	r3, [r7, #4]
   1779e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   177a0:	88fb      	ldrh	r3, [r7, #6]
   177a2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   177a4:	4629      	mov	r1, r5
   177a6:	f242 0020 	movw	r0, #8224	; 0x2020
   177aa:	f7ff fee5 	bl	17578 <bt_hci_cmd_send>
   177ae:	e7da      	b.n	17766 <le_conn_param_req+0x86>
   177b0:	00032040 	.word	0x00032040
   177b4:	0003292d 	.word	0x0003292d
   177b8:	0002fc14 	.word	0x0002fc14

000177bc <bt_hci_cmd_send_sync>:
{
   177bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   177c0:	b087      	sub	sp, #28
   177c2:	4606      	mov	r6, r0
   177c4:	af00      	add	r7, sp, #0
   177c6:	4615      	mov	r5, r2
	if (!buf) {
   177c8:	460c      	mov	r4, r1
   177ca:	b921      	cbnz	r1, 177d6 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   177cc:	f7ff fe9a 	bl	17504 <bt_hci_cmd_create>
		if (!buf) {
   177d0:	4604      	mov	r4, r0
   177d2:	2800      	cmp	r0, #0
   177d4:	d061      	beq.n	1789a <bt_hci_cmd_send_sync+0xde>
	return z_impl_k_sem_init(sem, initial_count, limit);
   177d6:	2201      	movs	r2, #1
   177d8:	2100      	movs	r1, #0
   177da:	4638      	mov	r0, r7
   177dc:	f017 fbf9 	bl	2efd2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   177e0:	4620      	mov	r0, r4
   177e2:	f009 f863 	bl	208ac <net_buf_id>
   177e6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 178a0 <bt_hci_cmd_send_sync+0xe4>
   177ea:	230c      	movs	r3, #12
   177ec:	fb03 9000 	mla	r0, r3, r0, r9
   177f0:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   177f2:	4620      	mov	r0, r4
   177f4:	f016 fded 	bl	2e3d2 <net_buf_ref>
   177f8:	4601      	mov	r1, r0
   177fa:	482a      	ldr	r0, [pc, #168]	; (178a4 <bt_hci_cmd_send_sync+0xe8>)
   177fc:	f016 fde7 	bl	2e3ce <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   17800:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   17804:	2300      	movs	r3, #0
   17806:	4638      	mov	r0, r7
   17808:	f00d fdd4 	bl	253b4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   1780c:	4680      	mov	r8, r0
   1780e:	b188      	cbz	r0, 17834 <bt_hci_cmd_send_sync+0x78>
   17810:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   17814:	4a24      	ldr	r2, [pc, #144]	; (178a8 <bt_hci_cmd_send_sync+0xec>)
   17816:	4925      	ldr	r1, [pc, #148]	; (178ac <bt_hci_cmd_send_sync+0xf0>)
   17818:	4825      	ldr	r0, [pc, #148]	; (178b0 <bt_hci_cmd_send_sync+0xf4>)
   1781a:	f012 f9a7 	bl	29b6c <assert_print>
   1781e:	4825      	ldr	r0, [pc, #148]	; (178b4 <bt_hci_cmd_send_sync+0xf8>)
   17820:	4642      	mov	r2, r8
   17822:	4631      	mov	r1, r6
   17824:	f012 f9a2 	bl	29b6c <assert_print>
   17828:	4040      	eors	r0, r0
   1782a:	f380 8811 	msr	BASEPRI, r0
   1782e:	f04f 0003 	mov.w	r0, #3
   17832:	df02      	svc	2
	status = cmd(buf)->status;
   17834:	4620      	mov	r0, r4
   17836:	f009 f839 	bl	208ac <net_buf_id>
   1783a:	230c      	movs	r3, #12
   1783c:	4358      	muls	r0, r3
   1783e:	f819 8000 	ldrb.w	r8, [r9, r0]
	if (status) {
   17842:	f1b8 0f00 	cmp.w	r8, #0
   17846:	d020      	beq.n	1788a <bt_hci_cmd_send_sync+0xce>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   17848:	466d      	mov	r5, sp
   1784a:	b08a      	sub	sp, #40	; 0x28
   1784c:	466a      	mov	r2, sp
   1784e:	4b1a      	ldr	r3, [pc, #104]	; (178b8 <bt_hci_cmd_send_sync+0xfc>)
   17850:	6153      	str	r3, [r2, #20]
   17852:	4b1a      	ldr	r3, [pc, #104]	; (178bc <bt_hci_cmd_send_sync+0x100>)
   17854:	f8c2 8020 	str.w	r8, [r2, #32]
   17858:	e9c2 3606 	strd	r3, r6, [r2, #24]
   1785c:	2305      	movs	r3, #5
   1785e:	f842 3f10 	str.w	r3, [r2, #16]!
   17862:	4817      	ldr	r0, [pc, #92]	; (178c0 <bt_hci_cmd_send_sync+0x104>)
   17864:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   17868:	f014 fb7b 	bl	2bf62 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1786c:	4620      	mov	r0, r4
   1786e:	46ad      	mov	sp, r5
   17870:	f009 f8d6 	bl	20a20 <net_buf_unref>
			return -ECONNREFUSED;
   17874:	f1b8 0f09 	cmp.w	r8, #9
   17878:	bf14      	ite	ne
   1787a:	f06f 0004 	mvnne.w	r0, #4
   1787e:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   17882:	371c      	adds	r7, #28
   17884:	46bd      	mov	sp, r7
   17886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   1788a:	b115      	cbz	r5, 17892 <bt_hci_cmd_send_sync+0xd6>
		*rsp = buf;
   1788c:	602c      	str	r4, [r5, #0]
	return 0;
   1788e:	2000      	movs	r0, #0
   17890:	e7f7      	b.n	17882 <bt_hci_cmd_send_sync+0xc6>
		net_buf_unref(buf);
   17892:	4620      	mov	r0, r4
   17894:	f009 f8c4 	bl	20a20 <net_buf_unref>
   17898:	e7f9      	b.n	1788e <bt_hci_cmd_send_sync+0xd2>
			return -ENOBUFS;
   1789a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1789e:	e7f0      	b.n	17882 <bt_hci_cmd_send_sync+0xc6>
   178a0:	2000338c 	.word	0x2000338c
   178a4:	200004d4 	.word	0x200004d4
   178a8:	000320d5 	.word	0x000320d5
   178ac:	00032295 	.word	0x00032295
   178b0:	00032122 	.word	0x00032122
   178b4:	000323b6 	.word	0x000323b6
   178b8:	000323e2 	.word	0x000323e2
   178bc:	00032ac4 	.word	0x00032ac4
   178c0:	0002fc14 	.word	0x0002fc14

000178c4 <hci_le_read_max_data_len>:
{
   178c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   178c6:	b083      	sub	sp, #12
   178c8:	af00      	add	r7, sp, #0
   178ca:	4606      	mov	r6, r0
   178cc:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   178ce:	1d3a      	adds	r2, r7, #4
   178d0:	2100      	movs	r1, #0
   178d2:	f242 002f 	movw	r0, #8239	; 0x202f
   178d6:	f7ff ff71 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   178da:	4604      	mov	r4, r0
   178dc:	b198      	cbz	r0, 17906 <hci_le_read_max_data_len+0x42>
		LOG_ERR("Failed to read DLE max data len");
   178de:	466d      	mov	r5, sp
   178e0:	b088      	sub	sp, #32
   178e2:	466a      	mov	r2, sp
   178e4:	4b0d      	ldr	r3, [pc, #52]	; (1791c <hci_le_read_max_data_len+0x58>)
   178e6:	6153      	str	r3, [r2, #20]
   178e8:	4b0d      	ldr	r3, [pc, #52]	; (17920 <hci_le_read_max_data_len+0x5c>)
   178ea:	6193      	str	r3, [r2, #24]
   178ec:	2303      	movs	r3, #3
   178ee:	f842 3f10 	str.w	r3, [r2, #16]!
   178f2:	480c      	ldr	r0, [pc, #48]	; (17924 <hci_le_read_max_data_len+0x60>)
   178f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   178f8:	f014 fb33 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   178fc:	46ad      	mov	sp, r5
}
   178fe:	4620      	mov	r0, r4
   17900:	370c      	adds	r7, #12
   17902:	46bd      	mov	sp, r7
   17904:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
   17906:	6878      	ldr	r0, [r7, #4]
   17908:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1790a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1790e:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   17910:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   17914:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   17916:	f009 f883 	bl	20a20 <net_buf_unref>
	return 0;
   1791a:	e7f0      	b.n	178fe <hci_le_read_max_data_len+0x3a>
   1791c:	00032402 	.word	0x00032402
   17920:	00032af5 	.word	0x00032af5
   17924:	0002fc14 	.word	0x0002fc14

00017928 <bt_hci_le_rand>:
{
   17928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1792a:	4b14      	ldr	r3, [pc, #80]	; (1797c <bt_hci_le_rand+0x54>)
   1792c:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
   17930:	2b00      	cmp	r3, #0
{
   17932:	4605      	mov	r5, r0
   17934:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   17936:	da1d      	bge.n	17974 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   17938:	b914      	cbnz	r4, 17940 <bt_hci_le_rand+0x18>
	return 0;
   1793a:	4620      	mov	r0, r4
}
   1793c:	b003      	add	sp, #12
   1793e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   17940:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   17942:	aa01      	add	r2, sp, #4
   17944:	f04f 0100 	mov.w	r1, #0
   17948:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   1794c:	4626      	mov	r6, r4
   1794e:	bf28      	it	cs
   17950:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   17952:	f7ff ff33 	bl	177bc <bt_hci_cmd_send_sync>
		if (err) {
   17956:	2800      	cmp	r0, #0
   17958:	d1f0      	bne.n	1793c <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   1795a:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   1795c:	68f9      	ldr	r1, [r7, #12]
   1795e:	4632      	mov	r2, r6
   17960:	3101      	adds	r1, #1
   17962:	4628      	mov	r0, r5
   17964:	f014 f99c 	bl	2bca0 <memcpy>
		net_buf_unref(rsp);
   17968:	4638      	mov	r0, r7
   1796a:	f009 f859 	bl	20a20 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   1796e:	4435      	add	r5, r6
		len -= count;
   17970:	1ba4      	subs	r4, r4, r6
   17972:	e7e1      	b.n	17938 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   17974:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17978:	e7e0      	b.n	1793c <bt_hci_le_rand+0x14>
   1797a:	bf00      	nop
   1797c:	20000388 	.word	0x20000388

00017980 <bt_le_create_conn>:
{
   17980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17984:	b086      	sub	sp, #24
   17986:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   17988:	f10d 010b 	add.w	r1, sp, #11
   1798c:	2000      	movs	r0, #0
   1798e:	f001 f8e3 	bl	18b58 <bt_id_set_create_conn_own_addr>
	if (err) {
   17992:	4605      	mov	r5, r0
   17994:	2800      	cmp	r0, #0
   17996:	d149      	bne.n	17a2c <bt_le_create_conn+0xac>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   17998:	2119      	movs	r1, #25
   1799a:	f242 000d 	movw	r0, #8205	; 0x200d
   1799e:	f7ff fdb1 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   179a2:	4607      	mov	r7, r0
   179a4:	2800      	cmp	r0, #0
   179a6:	d045      	beq.n	17a34 <bt_le_create_conn+0xb4>
   179a8:	2119      	movs	r1, #25
   179aa:	300c      	adds	r0, #12
   179ac:	f016 fd41 	bl	2e432 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
   179b0:	4629      	mov	r1, r5
   179b2:	4604      	mov	r4, r0
   179b4:	2219      	movs	r2, #25
   179b6:	f014 f97e 	bl	2bcb6 <memset>
		if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   179ba:	4d20      	ldr	r5, [pc, #128]	; (17a3c <bt_le_create_conn+0xbc>)
	cp->own_addr_type = own_addr_type;
   179bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   179c0:	7323      	strb	r3, [r4, #12]
		if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   179c2:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
   179c6:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
   179ca:	429a      	cmp	r2, r3
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   179cc:	bf94      	ite	ls
   179ce:	f106 0188 	addls.w	r1, r6, #136	; 0x88
			peer_addr = &conn->le.resp_addr;
   179d2:	f106 0196 	addhi.w	r1, r6, #150	; 0x96
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   179d6:	1d60      	adds	r0, r4, #5
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   179d8:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   179dc:	f014 faaf 	bl	2bf3e <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   179e0:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   179e4:	89ab      	ldrh	r3, [r5, #12]
   179e6:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   179e8:	89eb      	ldrh	r3, [r5, #14]
   179ea:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   179ec:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
   179f0:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   179f4:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
   179f8:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   179fc:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
   17a00:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   17a04:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
   17a08:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   17a0c:	2301      	movs	r3, #1
   17a0e:	9300      	str	r3, [sp, #0]
   17a10:	230c      	movs	r3, #12
   17a12:	eb0d 0103 	add.w	r1, sp, r3
   17a16:	4a0a      	ldr	r2, [pc, #40]	; (17a40 <bt_le_create_conn+0xc0>)
   17a18:	4638      	mov	r0, r7
   17a1a:	f7ff fd61 	bl	174e0 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   17a1e:	4642      	mov	r2, r8
   17a20:	4639      	mov	r1, r7
   17a22:	f242 000d 	movw	r0, #8205	; 0x200d
   17a26:	f7ff fec9 	bl	177bc <bt_hci_cmd_send_sync>
   17a2a:	4605      	mov	r5, r0
}
   17a2c:	4628      	mov	r0, r5
   17a2e:	b006      	add	sp, #24
   17a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   17a34:	f06f 0568 	mvn.w	r5, #104	; 0x68
   17a38:	e7f8      	b.n	17a2c <bt_le_create_conn+0xac>
   17a3a:	bf00      	nop
   17a3c:	20000388 	.word	0x20000388
   17a40:	2000045c 	.word	0x2000045c

00017a44 <bt_le_create_conn_cancel>:
{
   17a44:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   17a46:	2100      	movs	r1, #0
{
   17a48:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   17a4a:	f242 000e 	movw	r0, #8206	; 0x200e
   17a4e:	f7ff fd59 	bl	17504 <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   17a52:	2500      	movs	r5, #0
   17a54:	230c      	movs	r3, #12
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   17a56:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   17a58:	eb0d 0103 	add.w	r1, sp, r3
   17a5c:	4a05      	ldr	r2, [pc, #20]	; (17a74 <bt_le_create_conn_cancel+0x30>)
   17a5e:	9500      	str	r5, [sp, #0]
   17a60:	f7ff fd3e 	bl	174e0 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   17a64:	462a      	mov	r2, r5
   17a66:	4621      	mov	r1, r4
   17a68:	f242 000e 	movw	r0, #8206	; 0x200e
   17a6c:	f7ff fea6 	bl	177bc <bt_hci_cmd_send_sync>
}
   17a70:	b007      	add	sp, #28
   17a72:	bd30      	pop	{r4, r5, pc}
   17a74:	2000045c 	.word	0x2000045c

00017a78 <bt_hci_le_enh_conn_complete>:
{
   17a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17a7c:	b089      	sub	sp, #36	; 0x24
		if (disconnected_handles[i] == handle) {
   17a7e:	4bb4      	ldr	r3, [pc, #720]	; (17d50 <bt_hci_le_enh_conn_complete+0x2d8>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17a80:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   17a84:	8819      	ldrh	r1, [r3, #0]
{
   17a86:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   17a88:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
   17a8c:	4291      	cmp	r1, r2
   17a8e:	f04f 0600 	mov.w	r6, #0
{
   17a92:	af02      	add	r7, sp, #8
			disconnected_handles[i] = 0;
   17a94:	bf04      	itt	eq
   17a96:	801e      	strheq	r6, [r3, #0]
			return true;
   17a98:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   17a9a:	f000 feaf 	bl	187fc <bt_id_pending_keys_update>
	if (evt->status) {
   17a9e:	782c      	ldrb	r4, [r5, #0]
   17aa0:	2c00      	cmp	r4, #0
   17aa2:	d044      	beq.n	17b2e <bt_hci_le_enh_conn_complete+0xb6>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17aa4:	2c02      	cmp	r4, #2
   17aa6:	d130      	bne.n	17b0a <bt_hci_le_enh_conn_complete+0x92>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   17aa8:	2100      	movs	r1, #0
   17aaa:	2206      	movs	r2, #6
   17aac:	4608      	mov	r0, r1
   17aae:	f002 fa23 	bl	19ef8 <bt_conn_lookup_state_le>
	if (!conn) {
   17ab2:	4605      	mov	r5, r0
   17ab4:	b9b0      	cbnz	r0, 17ae4 <bt_hci_le_enh_conn_complete+0x6c>
		LOG_ERR("No pending central connection");
   17ab6:	466c      	mov	r4, sp
   17ab8:	b088      	sub	sp, #32
   17aba:	aa02      	add	r2, sp, #8
   17abc:	4ba5      	ldr	r3, [pc, #660]	; (17d54 <bt_hci_le_enh_conn_complete+0x2dc>)
   17abe:	6153      	str	r3, [r2, #20]
   17ac0:	4ba5      	ldr	r3, [pc, #660]	; (17d58 <bt_hci_le_enh_conn_complete+0x2e0>)
   17ac2:	6193      	str	r3, [r2, #24]
   17ac4:	2303      	movs	r3, #3
   17ac6:	f842 3f10 	str.w	r3, [r2, #16]!
   17aca:	48a4      	ldr	r0, [pc, #656]	; (17d5c <bt_hci_le_enh_conn_complete+0x2e4>)
   17acc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17ad0:	f014 fa47 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   17ad4:	46a5      	mov	sp, r4
			bt_le_scan_update(false);
   17ad6:	2000      	movs	r0, #0
   17ad8:	f001 f8f8 	bl	18ccc <bt_le_scan_update>
}
   17adc:	371c      	adds	r7, #28
   17ade:	46bd      	mov	sp, r7
   17ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn->err = err;
   17ae4:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17ae6:	2100      	movs	r1, #0
   17ae8:	f001 ff50 	bl	1998c <bt_conn_set_state>
   17aec:	f3bf 8f5b 	dmb	ish
   17af0:	686b      	ldr	r3, [r5, #4]
   17af2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   17af6:	07de      	lsls	r6, r3, #31
   17af8:	d503      	bpl.n	17b02 <bt_hci_le_enh_conn_complete+0x8a>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   17afa:	4621      	mov	r1, r4
   17afc:	4628      	mov	r0, r5
   17afe:	f001 ff45 	bl	1998c <bt_conn_set_state>
	bt_conn_unref(conn);
   17b02:	4628      	mov	r0, r5
   17b04:	f014 fc76 	bl	2c3f4 <bt_conn_unref>
   17b08:	e7e5      	b.n	17ad6 <bt_hci_le_enh_conn_complete+0x5e>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   17b0a:	466d      	mov	r5, sp
   17b0c:	b088      	sub	sp, #32
   17b0e:	aa02      	add	r2, sp, #8
   17b10:	4b93      	ldr	r3, [pc, #588]	; (17d60 <bt_hci_le_enh_conn_complete+0x2e8>)
   17b12:	6153      	str	r3, [r2, #20]
   17b14:	4b93      	ldr	r3, [pc, #588]	; (17d64 <bt_hci_le_enh_conn_complete+0x2ec>)
   17b16:	4891      	ldr	r0, [pc, #580]	; (17d5c <bt_hci_le_enh_conn_complete+0x2e4>)
   17b18:	e9c2 3406 	strd	r3, r4, [r2, #24]
   17b1c:	2304      	movs	r3, #4
   17b1e:	f842 3f10 	str.w	r3, [r2, #16]!
   17b22:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   17b26:	f014 fa1c 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   17b2a:	46ad      	mov	sp, r5
		return;
   17b2c:	e7d6      	b.n	17adc <bt_hci_le_enh_conn_complete+0x64>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   17b2e:	78eb      	ldrb	r3, [r5, #3]
   17b30:	2b01      	cmp	r3, #1
   17b32:	bf08      	it	eq
   17b34:	4b8c      	ldreq	r3, [pc, #560]	; (17d68 <bt_hci_le_enh_conn_complete+0x2f0>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   17b36:	f105 0904 	add.w	r9, r5, #4
   17b3a:	4648      	mov	r0, r9
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   17b3c:	bf08      	it	eq
   17b3e:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   17b42:	f014 f9cd 	bl	2bee0 <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   17b46:	4649      	mov	r1, r9
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   17b48:	b350      	cbz	r0, 17ba0 <bt_hci_le_enh_conn_complete+0x128>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   17b4a:	f107 0010 	add.w	r0, r7, #16
   17b4e:	f014 f9bd 	bl	2becc <bt_addr_le_copy_resolved>
	memcpy(dst, src, sizeof(*dst));
   17b52:	2206      	movs	r2, #6
   17b54:	f105 0111 	add.w	r1, r5, #17
   17b58:	f107 0009 	add.w	r0, r7, #9
   17b5c:	f014 f8a0 	bl	2bca0 <memcpy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
   17b60:	2301      	movs	r3, #1
   17b62:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   17b64:	78e8      	ldrb	r0, [r5, #3]
   17b66:	b348      	cbz	r0, 17bbc <bt_hci_le_enh_conn_complete+0x144>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   17b68:	4648      	mov	r0, r9
   17b6a:	f7fe fb03 	bl	16174 <bt_addr_le_str>
   17b6e:	466c      	mov	r4, sp
   17b70:	b08a      	sub	sp, #40	; 0x28
   17b72:	aa02      	add	r2, sp, #8
   17b74:	4b7d      	ldr	r3, [pc, #500]	; (17d6c <bt_hci_le_enh_conn_complete+0x2f4>)
   17b76:	6153      	str	r3, [r2, #20]
   17b78:	4b7a      	ldr	r3, [pc, #488]	; (17d64 <bt_hci_le_enh_conn_complete+0x2ec>)
   17b7a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   17b7e:	f240 3301 	movw	r3, #769	; 0x301
   17b82:	8413      	strh	r3, [r2, #32]
   17b84:	4b7a      	ldr	r3, [pc, #488]	; (17d70 <bt_hci_le_enh_conn_complete+0x2f8>)
   17b86:	f842 3f10 	str.w	r3, [r2, #16]!
   17b8a:	4874      	ldr	r0, [pc, #464]	; (17d5c <bt_hci_le_enh_conn_complete+0x2e4>)
   17b8c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   17b90:	f014 f9e7 	bl	2bf62 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   17b94:	211f      	movs	r1, #31
   17b96:	46a5      	mov	sp, r4
   17b98:	4640      	mov	r0, r8
   17b9a:	f014 fa1c 	bl	2bfd6 <bt_hci_disconnect>
		return;
   17b9e:	e79d      	b.n	17adc <bt_hci_le_enh_conn_complete+0x64>
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
   17ba0:	4620      	mov	r0, r4
   17ba2:	f014 fb37 	bl	2c214 <bt_lookup_id_addr>
   17ba6:	4601      	mov	r1, r0
   17ba8:	f107 0010 	add.w	r0, r7, #16
   17bac:	f014 f9c7 	bl	2bf3e <bt_addr_le_copy>
		bt_addr_le_copy(peer_addr, &evt->peer_addr);
   17bb0:	4649      	mov	r1, r9
   17bb2:	f107 0008 	add.w	r0, r7, #8
   17bb6:	f014 f9c2 	bl	2bf3e <bt_addr_le_copy>
   17bba:	e7d3      	b.n	17b64 <bt_hci_le_enh_conn_complete+0xec>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   17bbc:	2206      	movs	r2, #6
   17bbe:	f107 0110 	add.w	r1, r7, #16
   17bc2:	f002 f999 	bl	19ef8 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17bc6:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   17bc8:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17bca:	b923      	cbnz	r3, 17bd6 <bt_hci_le_enh_conn_complete+0x15e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17bcc:	4869      	ldr	r0, [pc, #420]	; (17d74 <bt_hci_le_enh_conn_complete+0x2fc>)
   17bce:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   17bd2:	f014 f9c9 	bl	2bf68 <atomic_and.isra.0>
	if (!conn) {
   17bd6:	2c00      	cmp	r4, #0
   17bd8:	d0c6      	beq.n	17b68 <bt_hci_le_enh_conn_complete+0xf0>
	conn->handle = sys_le16_to_cpu(evt->handle);
   17bda:	4620      	mov	r0, r4
   17bdc:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   17be0:	f820 3b88 	strh.w	r3, [r0], #136
	bt_addr_le_copy(&conn->le.dst, id_addr);
   17be4:	f107 0110 	add.w	r1, r7, #16
   17be8:	f014 f9a9 	bl	2bf3e <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   17bec:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   17bf0:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   17bf4:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   17bf8:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   17bfc:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   17c00:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   17c04:	78eb      	ldrb	r3, [r5, #3]
   17c06:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   17c08:	2200      	movs	r2, #0
   17c0a:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17c0c:	b973      	cbnz	r3, 17c2c <bt_hci_le_enh_conn_complete+0x1b4>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   17c0e:	f107 0108 	add.w	r1, r7, #8
   17c12:	f104 0096 	add.w	r0, r4, #150	; 0x96
   17c16:	f014 f992 	bl	2bf3e <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   17c1a:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   17c1c:	4b52      	ldr	r3, [pc, #328]	; (17d68 <bt_hci_le_enh_conn_complete+0x2f0>)
					&bt_dev.id_addr[conn->id]);
   17c1e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   17c22:	4419      	add	r1, r3
   17c24:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   17c28:	f014 f989 	bl	2bf3e <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   17c2c:	2107      	movs	r1, #7
   17c2e:	4620      	mov	r0, r4
   17c30:	f001 feac 	bl	1998c <bt_conn_set_state>
	if (is_disconnected) {
   17c34:	b11e      	cbz	r6, 17c3e <bt_hci_le_enh_conn_complete+0x1c6>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   17c36:	2101      	movs	r1, #1
   17c38:	4620      	mov	r0, r4
   17c3a:	f001 fea7 	bl	1998c <bt_conn_set_state>
	bt_conn_connected(conn);
   17c3e:	4620      	mov	r0, r4
   17c40:	f014 fbdb 	bl	2c3fa <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   17c44:	7b63      	ldrb	r3, [r4, #13]
   17c46:	2b07      	cmp	r3, #7
   17c48:	d176      	bne.n	17d38 <bt_hci_le_enh_conn_complete+0x2c0>
   17c4a:	f3bf 8f5b 	dmb	ish
   17c4e:	6863      	ldr	r3, [r4, #4]
   17c50:	4d45      	ldr	r5, [pc, #276]	; (17d68 <bt_hci_le_enh_conn_complete+0x2f0>)
   17c52:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   17c56:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   17c5a:	d12b      	bne.n	17cb4 <bt_hci_le_enh_conn_complete+0x23c>
   17c5c:	78e3      	ldrb	r3, [r4, #3]
   17c5e:	b11b      	cbz	r3, 17c68 <bt_hci_le_enh_conn_complete+0x1f0>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   17c60:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   17c64:	0718      	lsls	r0, r3, #28
   17c66:	d525      	bpl.n	17cb4 <bt_hci_le_enh_conn_complete+0x23c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   17c68:	2102      	movs	r1, #2
   17c6a:	f242 0016 	movw	r0, #8214	; 0x2016
   17c6e:	f7ff fc49 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   17c72:	4606      	mov	r6, r0
   17c74:	2800      	cmp	r0, #0
   17c76:	d067      	beq.n	17d48 <bt_hci_le_enh_conn_complete+0x2d0>
   17c78:	2102      	movs	r1, #2
   17c7a:	300c      	adds	r0, #12
   17c7c:	f016 fbd9 	bl	2e432 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   17c80:	8823      	ldrh	r3, [r4, #0]
   17c82:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   17c84:	2200      	movs	r2, #0
   17c86:	4631      	mov	r1, r6
   17c88:	f242 0016 	movw	r0, #8214	; 0x2016
   17c8c:	f7ff fd96 	bl	177bc <bt_hci_cmd_send_sync>
		if (err) {
   17c90:	b180      	cbz	r0, 17cb4 <bt_hci_le_enh_conn_complete+0x23c>
			LOG_ERR("Failed read remote features (%d)", err);
   17c92:	466e      	mov	r6, sp
   17c94:	b088      	sub	sp, #32
   17c96:	aa02      	add	r2, sp, #8
   17c98:	4b37      	ldr	r3, [pc, #220]	; (17d78 <bt_hci_le_enh_conn_complete+0x300>)
   17c9a:	6153      	str	r3, [r2, #20]
   17c9c:	4b37      	ldr	r3, [pc, #220]	; (17d7c <bt_hci_le_enh_conn_complete+0x304>)
   17c9e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   17ca2:	2304      	movs	r3, #4
   17ca4:	f842 3f10 	str.w	r3, [r2, #16]!
   17ca8:	482c      	ldr	r0, [pc, #176]	; (17d5c <bt_hci_le_enh_conn_complete+0x2e4>)
   17caa:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17cae:	f014 f958 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   17cb2:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   17cb4:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
   17cb8:	07d9      	lsls	r1, r3, #31
   17cba:	d518      	bpl.n	17cee <bt_hci_le_enh_conn_complete+0x276>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   17cbc:	2100      	movs	r1, #0
   17cbe:	2302      	movs	r3, #2
   17cc0:	9100      	str	r1, [sp, #0]
   17cc2:	461a      	mov	r2, r3
   17cc4:	4620      	mov	r0, r4
   17cc6:	f014 f9bf 	bl	2c048 <bt_le_set_phy>
		if (err) {
   17cca:	b180      	cbz	r0, 17cee <bt_hci_le_enh_conn_complete+0x276>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   17ccc:	466e      	mov	r6, sp
   17cce:	b088      	sub	sp, #32
   17cd0:	aa02      	add	r2, sp, #8
   17cd2:	4b2b      	ldr	r3, [pc, #172]	; (17d80 <bt_hci_le_enh_conn_complete+0x308>)
   17cd4:	6153      	str	r3, [r2, #20]
   17cd6:	4b29      	ldr	r3, [pc, #164]	; (17d7c <bt_hci_le_enh_conn_complete+0x304>)
   17cd8:	e9c2 3006 	strd	r3, r0, [r2, #24]
   17cdc:	2304      	movs	r3, #4
   17cde:	f842 3f10 	str.w	r3, [r2, #16]!
   17ce2:	481e      	ldr	r0, [pc, #120]	; (17d5c <bt_hci_le_enh_conn_complete+0x2e4>)
   17ce4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17ce8:	f014 f93b 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   17cec:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   17cee:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   17cf2:	069a      	lsls	r2, r3, #26
   17cf4:	d520      	bpl.n	17d38 <bt_hci_le_enh_conn_complete+0x2c0>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   17cf6:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   17cfa:	689b      	ldr	r3, [r3, #8]
   17cfc:	079b      	lsls	r3, r3, #30
   17cfe:	d51b      	bpl.n	17d38 <bt_hci_le_enh_conn_complete+0x2c0>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   17d00:	1db9      	adds	r1, r7, #6
   17d02:	1d38      	adds	r0, r7, #4
   17d04:	f7ff fdde 	bl	178c4 <hci_le_read_max_data_len>
			if (!err) {
   17d08:	b9b0      	cbnz	r0, 17d38 <bt_hci_le_enh_conn_complete+0x2c0>
				err = bt_le_set_data_len(conn,
   17d0a:	88fa      	ldrh	r2, [r7, #6]
   17d0c:	88b9      	ldrh	r1, [r7, #4]
   17d0e:	4620      	mov	r0, r4
   17d10:	f014 f97c 	bl	2c00c <bt_le_set_data_len>
				if (err) {
   17d14:	b180      	cbz	r0, 17d38 <bt_hci_le_enh_conn_complete+0x2c0>
					LOG_ERR("Failed to set data len (%d)", err);
   17d16:	466d      	mov	r5, sp
   17d18:	b088      	sub	sp, #32
   17d1a:	aa02      	add	r2, sp, #8
   17d1c:	4b19      	ldr	r3, [pc, #100]	; (17d84 <bt_hci_le_enh_conn_complete+0x30c>)
   17d1e:	6153      	str	r3, [r2, #20]
   17d20:	4b16      	ldr	r3, [pc, #88]	; (17d7c <bt_hci_le_enh_conn_complete+0x304>)
   17d22:	e9c2 3006 	strd	r3, r0, [r2, #24]
   17d26:	2304      	movs	r3, #4
   17d28:	f842 3f10 	str.w	r3, [r2, #16]!
   17d2c:	480b      	ldr	r0, [pc, #44]	; (17d5c <bt_hci_le_enh_conn_complete+0x2e4>)
   17d2e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17d32:	f014 f916 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   17d36:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   17d38:	4620      	mov	r0, r4
   17d3a:	f014 fb5b 	bl	2c3f4 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17d3e:	78e3      	ldrb	r3, [r4, #3]
   17d40:	2b00      	cmp	r3, #0
   17d42:	f47f aecb 	bne.w	17adc <bt_hci_le_enh_conn_complete+0x64>
   17d46:	e6c6      	b.n	17ad6 <bt_hci_le_enh_conn_complete+0x5e>
		return -ENOBUFS;
   17d48:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17d4c:	e7a1      	b.n	17c92 <bt_hci_le_enh_conn_complete+0x21a>
   17d4e:	bf00      	nop
   17d50:	2000430e 	.word	0x2000430e
   17d54:	00032426 	.word	0x00032426
   17d58:	00032a90 	.word	0x00032a90
   17d5c:	0002fc14 	.word	0x0002fc14
   17d60:	00032448 	.word	0x00032448
   17d64:	00032aa8 	.word	0x00032aa8
   17d68:	20000388 	.word	0x20000388
   17d6c:	00032465 	.word	0x00032465
   17d70:	01000004 	.word	0x01000004
   17d74:	2000045c 	.word	0x2000045c
   17d78:	00032485 	.word	0x00032485
   17d7c:	00032a7d 	.word	0x00032a7d
   17d80:	000324aa 	.word	0x000324aa
   17d84:	000324c5 	.word	0x000324c5

00017d88 <le_legacy_conn_complete>:
{
   17d88:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   17d8a:	68c1      	ldr	r1, [r0, #12]
   17d8c:	4c17      	ldr	r4, [pc, #92]	; (17dec <le_legacy_conn_complete+0x64>)
	enh.status         = evt->status;
   17d8e:	780b      	ldrb	r3, [r1, #0]
{
   17d90:	b088      	sub	sp, #32
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   17d92:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   17d94:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   17d98:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   17d9c:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   17da0:	78cb      	ldrb	r3, [r1, #3]
   17da2:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   17da6:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   17daa:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   17dae:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   17db2:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   17db6:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   17dba:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   17dbe:	7c4b      	ldrb	r3, [r1, #17]
   17dc0:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   17dc4:	3104      	adds	r1, #4
   17dc6:	f014 f8ba 	bl	2bf3e <bt_addr_le_copy>
   17dca:	4621      	mov	r1, r4
   17dcc:	2206      	movs	r2, #6
   17dce:	f10d 000b 	add.w	r0, sp, #11
   17dd2:	f013 ff65 	bl	2bca0 <memcpy>
   17dd6:	2206      	movs	r2, #6
   17dd8:	4621      	mov	r1, r4
   17dda:	f10d 0011 	add.w	r0, sp, #17
   17dde:	f013 ff5f 	bl	2bca0 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   17de2:	4668      	mov	r0, sp
   17de4:	f7ff fe48 	bl	17a78 <bt_hci_le_enh_conn_complete>
}
   17de8:	b008      	add	sp, #32
   17dea:	bd10      	pop	{r4, pc}
   17dec:	00031d7d 	.word	0x00031d7d

00017df0 <bt_security_err_get>:
	switch (hci_err) {
   17df0:	2829      	cmp	r0, #41	; 0x29
   17df2:	bf9a      	itte	ls
   17df4:	4b01      	ldrls	r3, [pc, #4]	; (17dfc <bt_security_err_get+0xc>)
   17df6:	5c18      	ldrbls	r0, [r3, r0]
{
   17df8:	2009      	movhi	r0, #9
}
   17dfa:	4770      	bx	lr
   17dfc:	00032795 	.word	0x00032795

00017e00 <hci_encrypt_key_refresh_complete>:
{
   17e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   17e02:	68c3      	ldr	r3, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   17e04:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   17e08:	781d      	ldrb	r5, [r3, #0]
{
   17e0a:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   17e0c:	4630      	mov	r0, r6
   17e0e:	f001 fdb5 	bl	1997c <bt_conn_lookup_handle>
	if (!conn) {
   17e12:	4604      	mov	r4, r0
   17e14:	b990      	cbnz	r0, 17e3c <hci_encrypt_key_refresh_complete+0x3c>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   17e16:	466c      	mov	r4, sp
   17e18:	b088      	sub	sp, #32
   17e1a:	466a      	mov	r2, sp
   17e1c:	4b21      	ldr	r3, [pc, #132]	; (17ea4 <hci_encrypt_key_refresh_complete+0xa4>)
   17e1e:	6153      	str	r3, [r2, #20]
   17e20:	4b21      	ldr	r3, [pc, #132]	; (17ea8 <hci_encrypt_key_refresh_complete+0xa8>)
   17e22:	4822      	ldr	r0, [pc, #136]	; (17eac <hci_encrypt_key_refresh_complete+0xac>)
   17e24:	e9c2 3606 	strd	r3, r6, [r2, #24]
   17e28:	2304      	movs	r3, #4
   17e2a:	f842 3f10 	str.w	r3, [r2, #16]!
   17e2e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17e32:	f014 f896 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   17e36:	46a5      	mov	sp, r4
}
   17e38:	46bd      	mov	sp, r7
   17e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (status) {
   17e3c:	b15d      	cbz	r5, 17e56 <hci_encrypt_key_refresh_complete+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   17e3e:	4628      	mov	r0, r5
   17e40:	f7ff ffd6 	bl	17df0 <bt_security_err_get>
   17e44:	4629      	mov	r1, r5
   17e46:	4602      	mov	r2, r0
   17e48:	4620      	mov	r0, r4
   17e4a:	f001 ff8d 	bl	19d68 <bt_conn_security_changed>
	bt_conn_unref(conn);
   17e4e:	4620      	mov	r0, r4
   17e50:	f014 fad0 	bl	2c3f4 <bt_conn_unref>
   17e54:	e7f0      	b.n	17e38 <hci_encrypt_key_refresh_complete+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
   17e56:	7883      	ldrb	r3, [r0, #2]
   17e58:	2b01      	cmp	r3, #1
   17e5a:	d1f0      	bne.n	17e3e <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
   17e5c:	f008 f9c4 	bl	201e8 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   17e60:	4620      	mov	r0, r4
   17e62:	f014 f853 	bl	2bf0c <update_sec_level>
   17e66:	2800      	cmp	r0, #0
   17e68:	d1e9      	bne.n	17e3e <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   17e6a:	2005      	movs	r0, #5
   17e6c:	f7ff ffc0 	bl	17df0 <bt_security_err_get>
   17e70:	2105      	movs	r1, #5
   17e72:	4602      	mov	r2, r0
   17e74:	4620      	mov	r0, r4
   17e76:	f001 ff77 	bl	19d68 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   17e7a:	466d      	mov	r5, sp
   17e7c:	b088      	sub	sp, #32
   17e7e:	466a      	mov	r2, sp
   17e80:	4b0b      	ldr	r3, [pc, #44]	; (17eb0 <hci_encrypt_key_refresh_complete+0xb0>)
   17e82:	6153      	str	r3, [r2, #20]
   17e84:	4b08      	ldr	r3, [pc, #32]	; (17ea8 <hci_encrypt_key_refresh_complete+0xa8>)
   17e86:	6193      	str	r3, [r2, #24]
   17e88:	2303      	movs	r3, #3
   17e8a:	f842 3f10 	str.w	r3, [r2, #16]!
   17e8e:	4807      	ldr	r0, [pc, #28]	; (17eac <hci_encrypt_key_refresh_complete+0xac>)
   17e90:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17e94:	f014 f865 	bl	2bf62 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   17e98:	2105      	movs	r1, #5
   17e9a:	46ad      	mov	sp, r5
   17e9c:	4620      	mov	r0, r4
   17e9e:	f014 fb80 	bl	2c5a2 <bt_conn_disconnect>
   17ea2:	e7d4      	b.n	17e4e <hci_encrypt_key_refresh_complete+0x4e>
   17ea4:	00032371 	.word	0x00032371
   17ea8:	000329be 	.word	0x000329be
   17eac:	0002fc14 	.word	0x0002fc14
   17eb0:	000324e5 	.word	0x000324e5

00017eb4 <hci_encrypt_change>:
{
   17eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   17eb8:	68c6      	ldr	r6, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17eba:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   17ebe:	7835      	ldrb	r5, [r6, #0]
{
   17ec0:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   17ec2:	4640      	mov	r0, r8
   17ec4:	f001 fd5a 	bl	1997c <bt_conn_lookup_handle>
	if (!conn) {
   17ec8:	4604      	mov	r4, r0
   17eca:	b998      	cbnz	r0, 17ef4 <hci_encrypt_change+0x40>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   17ecc:	466c      	mov	r4, sp
   17ece:	b088      	sub	sp, #32
   17ed0:	466a      	mov	r2, sp
   17ed2:	4b27      	ldr	r3, [pc, #156]	; (17f70 <hci_encrypt_change+0xbc>)
   17ed4:	6153      	str	r3, [r2, #20]
   17ed6:	4b27      	ldr	r3, [pc, #156]	; (17f74 <hci_encrypt_change+0xc0>)
   17ed8:	4827      	ldr	r0, [pc, #156]	; (17f78 <hci_encrypt_change+0xc4>)
   17eda:	e9c2 3806 	strd	r3, r8, [r2, #24]
   17ede:	2304      	movs	r3, #4
   17ee0:	f842 3f10 	str.w	r3, [r2, #16]!
   17ee4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17ee8:	f014 f83b 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   17eec:	46a5      	mov	sp, r4
}
   17eee:	46bd      	mov	sp, r7
   17ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
   17ef4:	b15d      	cbz	r5, 17f0e <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
   17ef6:	4628      	mov	r0, r5
   17ef8:	f7ff ff7a 	bl	17df0 <bt_security_err_get>
   17efc:	4629      	mov	r1, r5
   17efe:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   17f00:	4620      	mov	r0, r4
   17f02:	f001 ff31 	bl	19d68 <bt_conn_security_changed>
	bt_conn_unref(conn);
   17f06:	4620      	mov	r0, r4
   17f08:	f014 fa74 	bl	2c3f4 <bt_conn_unref>
   17f0c:	e7ef      	b.n	17eee <hci_encrypt_change+0x3a>
	if (conn->type == BT_CONN_TYPE_LE) {
   17f0e:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   17f10:	78f3      	ldrb	r3, [r6, #3]
   17f12:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   17f14:	2a01      	cmp	r2, #1
   17f16:	d005      	beq.n	17f24 <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   17f18:	2000      	movs	r0, #0
   17f1a:	f7ff ff69 	bl	17df0 <bt_security_err_get>
   17f1e:	2100      	movs	r1, #0
   17f20:	4602      	mov	r2, r0
   17f22:	e7ed      	b.n	17f00 <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
   17f24:	b10b      	cbz	r3, 17f2a <hci_encrypt_change+0x76>
			bt_smp_update_keys(conn);
   17f26:	f008 f95f 	bl	201e8 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   17f2a:	4620      	mov	r0, r4
   17f2c:	f013 ffee 	bl	2bf0c <update_sec_level>
   17f30:	2800      	cmp	r0, #0
   17f32:	d1f1      	bne.n	17f18 <hci_encrypt_change+0x64>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   17f34:	2005      	movs	r0, #5
   17f36:	f7ff ff5b 	bl	17df0 <bt_security_err_get>
   17f3a:	2105      	movs	r1, #5
   17f3c:	4602      	mov	r2, r0
   17f3e:	4620      	mov	r0, r4
   17f40:	f001 ff12 	bl	19d68 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   17f44:	466d      	mov	r5, sp
   17f46:	b088      	sub	sp, #32
   17f48:	466a      	mov	r2, sp
   17f4a:	4b0c      	ldr	r3, [pc, #48]	; (17f7c <hci_encrypt_change+0xc8>)
   17f4c:	6153      	str	r3, [r2, #20]
   17f4e:	4b09      	ldr	r3, [pc, #36]	; (17f74 <hci_encrypt_change+0xc0>)
   17f50:	6193      	str	r3, [r2, #24]
   17f52:	2303      	movs	r3, #3
   17f54:	f842 3f10 	str.w	r3, [r2, #16]!
   17f58:	4807      	ldr	r0, [pc, #28]	; (17f78 <hci_encrypt_change+0xc4>)
   17f5a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17f5e:	f014 f800 	bl	2bf62 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   17f62:	2105      	movs	r1, #5
   17f64:	46ad      	mov	sp, r5
   17f66:	4620      	mov	r0, r4
   17f68:	f014 fb1b 	bl	2c5a2 <bt_conn_disconnect>
   17f6c:	e7cb      	b.n	17f06 <hci_encrypt_change+0x52>
   17f6e:	bf00      	nop
   17f70:	00032371 	.word	0x00032371
   17f74:	000329ab 	.word	0x000329ab
   17f78:	0002fc14 	.word	0x0002fc14
   17f7c:	000324e5 	.word	0x000324e5

00017f80 <hci_event_prio>:
{
   17f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17f84:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   17f86:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   17f8a:	4630      	mov	r0, r6
   17f8c:	f016 fa9a 	bl	2e4c4 <net_buf_simple_headroom>
	state->len = buf->len;
   17f90:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17f94:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   17f98:	4605      	mov	r5, r0
   17f9a:	d80c      	bhi.n	17fb6 <hci_event_prio+0x36>
   17f9c:	4a1c      	ldr	r2, [pc, #112]	; (18010 <hci_event_prio+0x90>)
   17f9e:	491d      	ldr	r1, [pc, #116]	; (18014 <hci_event_prio+0x94>)
   17fa0:	481d      	ldr	r0, [pc, #116]	; (18018 <hci_event_prio+0x98>)
   17fa2:	f640 636f 	movw	r3, #3695	; 0xe6f
   17fa6:	f011 fde1 	bl	29b6c <assert_print>
   17faa:	4040      	eors	r0, r0
   17fac:	f380 8811 	msr	BASEPRI, r0
   17fb0:	f04f 0003 	mov.w	r0, #3
   17fb4:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   17fb6:	4630      	mov	r0, r6
   17fb8:	2102      	movs	r1, #2
   17fba:	f016 fa6b 	bl	2e494 <net_buf_simple_pull_mem>
   17fbe:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17fc0:	7800      	ldrb	r0, [r0, #0]
   17fc2:	f013 ff91 	bl	2bee8 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   17fc6:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17fc8:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   17fca:	d40c      	bmi.n	17fe6 <hci_event_prio+0x66>
   17fcc:	4a10      	ldr	r2, [pc, #64]	; (18010 <hci_event_prio+0x90>)
   17fce:	4913      	ldr	r1, [pc, #76]	; (1801c <hci_event_prio+0x9c>)
   17fd0:	4811      	ldr	r0, [pc, #68]	; (18018 <hci_event_prio+0x98>)
   17fd2:	f640 6373 	movw	r3, #3699	; 0xe73
   17fd6:	f011 fdc9 	bl	29b6c <assert_print>
   17fda:	4040      	eors	r0, r0
   17fdc:	f380 8811 	msr	BASEPRI, r0
   17fe0:	f04f 0003 	mov.w	r0, #3
   17fe4:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   17fe6:	2305      	movs	r3, #5
   17fe8:	4a0d      	ldr	r2, [pc, #52]	; (18020 <hci_event_prio+0xa0>)
   17fea:	7838      	ldrb	r0, [r7, #0]
   17fec:	4621      	mov	r1, r4
   17fee:	f7fe fe0f 	bl	16c10 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   17ff2:	07b3      	lsls	r3, r6, #30
   17ff4:	d507      	bpl.n	18006 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   17ff6:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   17ff8:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   17ffc:	fa13 f585 	uxtah	r5, r3, r5
   18000:	60e5      	str	r5, [r4, #12]
}
   18002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   18006:	4620      	mov	r0, r4
}
   18008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   1800c:	f008 bd08 	b.w	20a20 <net_buf_unref>
   18010:	000320d5 	.word	0x000320d5
   18014:	00032109 	.word	0x00032109
   18018:	00032122 	.word	0x00032122
   1801c:	0003250f 	.word	0x0003250f
   18020:	000301a8 	.word	0x000301a8

00018024 <bt_recv>:
{
   18024:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   18026:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   18028:	2b01      	cmp	r3, #1
{
   1802a:	af00      	add	r7, sp, #0
   1802c:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   1802e:	d006      	beq.n	1803e <bt_recv+0x1a>
   18030:	2b03      	cmp	r3, #3
   18032:	d112      	bne.n	1805a <bt_recv+0x36>
			rx_queue_put(buf);
   18034:	f7fe fd98 	bl	16b68 <rx_queue_put>
		return 0;
   18038:	2000      	movs	r0, #0
}
   1803a:	46bd      	mov	sp, r7
   1803c:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1803e:	68c3      	ldr	r3, [r0, #12]
   18040:	7818      	ldrb	r0, [r3, #0]
   18042:	f013 ff51 	bl	2bee8 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   18046:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18048:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1804a:	d502      	bpl.n	18052 <bt_recv+0x2e>
			hci_event_prio(buf);
   1804c:	4620      	mov	r0, r4
   1804e:	f7ff ff97 	bl	17f80 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   18052:	07ab      	lsls	r3, r5, #30
   18054:	d5f0      	bpl.n	18038 <bt_recv+0x14>
			rx_queue_put(buf);
   18056:	4620      	mov	r0, r4
   18058:	e7ec      	b.n	18034 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1805a:	466d      	mov	r5, sp
   1805c:	b088      	sub	sp, #32
   1805e:	466a      	mov	r2, sp
   18060:	4909      	ldr	r1, [pc, #36]	; (18088 <bt_recv+0x64>)
   18062:	6151      	str	r1, [r2, #20]
   18064:	4909      	ldr	r1, [pc, #36]	; (1808c <bt_recv+0x68>)
   18066:	480a      	ldr	r0, [pc, #40]	; (18090 <bt_recv+0x6c>)
	switch (bt_buf_get_type(buf)) {
   18068:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1806c:	2304      	movs	r3, #4
   1806e:	f842 3f10 	str.w	r3, [r2, #16]!
   18072:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   18076:	f013 ff74 	bl	2bf62 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1807a:	4620      	mov	r0, r4
   1807c:	46ad      	mov	sp, r5
   1807e:	f008 fccf 	bl	20a20 <net_buf_unref>
		return -EINVAL;
   18082:	f06f 0015 	mvn.w	r0, #21
   18086:	e7d8      	b.n	1803a <bt_recv+0x16>
   18088:	00032528 	.word	0x00032528
   1808c:	00032a17 	.word	0x00032a17
   18090:	0002fc14 	.word	0x0002fc14

00018094 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   18094:	4a08      	ldr	r2, [pc, #32]	; (180b8 <bt_hci_driver_register+0x24>)
{
   18096:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   18098:	f8d2 0164 	ldr.w	r0, [r2, #356]	; 0x164
   1809c:	b930      	cbnz	r0, 180ac <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1809e:	68d9      	ldr	r1, [r3, #12]
   180a0:	b139      	cbz	r1, 180b2 <bt_hci_driver_register+0x1e>
   180a2:	6959      	ldr	r1, [r3, #20]
   180a4:	b129      	cbz	r1, 180b2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   180a6:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
	return 0;
   180aa:	4770      	bx	lr
		return -EALREADY;
   180ac:	f06f 0077 	mvn.w	r0, #119	; 0x77
   180b0:	4770      	bx	lr
		return -EINVAL;
   180b2:	f06f 0015 	mvn.w	r0, #21
}
   180b6:	4770      	bx	lr
   180b8:	20000388 	.word	0x20000388

000180bc <bt_finalize_init>:
{
   180bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180c0:	b083      	sub	sp, #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   180c2:	2104      	movs	r1, #4
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   180c4:	4d49      	ldr	r5, [pc, #292]	; (181ec <bt_finalize_init+0x130>)
   180c6:	484a      	ldr	r0, [pc, #296]	; (181f0 <bt_finalize_init+0x134>)
   180c8:	4c4a      	ldr	r4, [pc, #296]	; (181f4 <bt_finalize_init+0x138>)
{
   180ca:	af00      	add	r7, sp, #0
   180cc:	f013 ff3a 	bl	2bf44 <atomic_or>
		bt_le_scan_update(false);
   180d0:	2000      	movs	r0, #0
   180d2:	f000 fdfb 	bl	18ccc <bt_le_scan_update>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   180d6:	79ea      	ldrb	r2, [r5, #7]
   180d8:	4b47      	ldr	r3, [pc, #284]	; (181f8 <bt_finalize_init+0x13c>)
   180da:	4628      	mov	r0, r5
   180dc:	2a01      	cmp	r2, #1
   180de:	bf88      	it	hi
   180e0:	461c      	movhi	r4, r3
   180e2:	46e8      	mov	r8, sp
   180e4:	f7fe f846 	bl	16174 <bt_addr_le_str>
   180e8:	b08a      	sub	sp, #40	; 0x28
   180ea:	466b      	mov	r3, sp
   180ec:	4943      	ldr	r1, [pc, #268]	; (181fc <bt_finalize_init+0x140>)
   180ee:	4e44      	ldr	r6, [pc, #272]	; (18200 <bt_finalize_init+0x144>)
   180f0:	6159      	str	r1, [r3, #20]
   180f2:	4944      	ldr	r1, [pc, #272]	; (18204 <bt_finalize_init+0x148>)
   180f4:	6079      	str	r1, [r7, #4]
   180f6:	e9c3 6406 	strd	r6, r4, [r3, #24]
   180fa:	6218      	str	r0, [r3, #32]
   180fc:	f103 0210 	add.w	r2, r3, #16
   18100:	1d38      	adds	r0, r7, #4
   18102:	f103 0123 	add.w	r1, r3, #35	; 0x23
   18106:	f103 0427 	add.w	r4, r3, #39	; 0x27
   1810a:	f810 cb01 	ldrb.w	ip, [r0], #1
   1810e:	f801 cf01 	strb.w	ip, [r1, #1]!
   18112:	42a1      	cmp	r1, r4
   18114:	d1f9      	bne.n	1810a <bt_finalize_init+0x4e>
   18116:	493c      	ldr	r1, [pc, #240]	; (18208 <bt_finalize_init+0x14c>)
   18118:	6119      	str	r1, [r3, #16]
   1811a:	483c      	ldr	r0, [pc, #240]	; (1820c <bt_finalize_init+0x150>)
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   1811c:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 18210 <bt_finalize_init+0x154>
   18120:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1820c <bt_finalize_init+0x150>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   18124:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
   18128:	f013 ff1b 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   1812c:	46c5      	mov	sp, r8
	for (i = 1; i < bt_dev.id_count; i++) {
   1812e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 181ec <bt_finalize_init+0x130>
   18132:	2401      	movs	r4, #1
   18134:	79ea      	ldrb	r2, [r5, #7]
   18136:	4294      	cmp	r4, r2
   18138:	f108 0807 	add.w	r8, r8, #7
   1813c:	db3d      	blt.n	181ba <bt_finalize_init+0xfe>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   1813e:	f895 8070 	ldrb.w	r8, [r5, #112]	; 0x70
   18142:	4640      	mov	r0, r8
   18144:	f7fe fc6a 	bl	16a1c <ver_str>
   18148:	46ea      	mov	sl, sp
   1814a:	b08c      	sub	sp, #48	; 0x30
   1814c:	f8b5 2072 	ldrh.w	r2, [r5, #114]	; 0x72
   18150:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   18154:	466c      	mov	r4, sp
   18156:	492f      	ldr	r1, [pc, #188]	; (18214 <bt_finalize_init+0x158>)
   18158:	e9c4 0807 	strd	r0, r8, [r4, #28]
   1815c:	46a0      	mov	r8, r4
   1815e:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
   18162:	f240 3901 	movw	r9, #769	; 0x301
   18166:	4b2c      	ldr	r3, [pc, #176]	; (18218 <bt_finalize_init+0x15c>)
   18168:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
   1816c:	e9c4 1605 	strd	r1, r6, [r4, #20]
   18170:	f848 3f10 	str.w	r3, [r8, #16]!
   18174:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
   18178:	4642      	mov	r2, r8
   1817a:	4824      	ldr	r0, [pc, #144]	; (1820c <bt_finalize_init+0x150>)
   1817c:	f013 fef1 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   18180:	46d5      	mov	sp, sl
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   18182:	f895 a071 	ldrb.w	sl, [r5, #113]	; 0x71
   18186:	4650      	mov	r0, sl
   18188:	f7fe fc48 	bl	16a1c <ver_str>
   1818c:	f8b5 3074 	ldrh.w	r3, [r5, #116]	; 0x74
   18190:	46a5      	mov	sp, r4
   18192:	4a22      	ldr	r2, [pc, #136]	; (1821c <bt_finalize_init+0x160>)
   18194:	6263      	str	r3, [r4, #36]	; 0x24
   18196:	4b22      	ldr	r3, [pc, #136]	; (18220 <bt_finalize_init+0x164>)
   18198:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
   1819c:	e9c4 2605 	strd	r2, r6, [r4, #20]
   181a0:	e9c4 0a07 	strd	r0, sl, [r4, #28]
   181a4:	6123      	str	r3, [r4, #16]
   181a6:	4819      	ldr	r0, [pc, #100]	; (1820c <bt_finalize_init+0x150>)
   181a8:	4642      	mov	r2, r8
   181aa:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
   181ae:	f013 fed8 	bl	2bf62 <z_log_msg_static_create.constprop.0>
}
   181b2:	370c      	adds	r7, #12
   181b4:	46bd      	mov	sp, r7
   181b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   181ba:	4640      	mov	r0, r8
   181bc:	f7fd ffda 	bl	16174 <bt_addr_le_str>
   181c0:	46eb      	mov	fp, sp
   181c2:	b08a      	sub	sp, #40	; 0x28
   181c4:	466a      	mov	r2, sp
   181c6:	4b17      	ldr	r3, [pc, #92]	; (18224 <bt_finalize_init+0x168>)
   181c8:	f240 4102 	movw	r1, #1026	; 0x402
   181cc:	e9c2 4007 	strd	r4, r0, [r2, #28]
   181d0:	8491      	strh	r1, [r2, #36]	; 0x24
   181d2:	e9c2 3605 	strd	r3, r6, [r2, #20]
   181d6:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   181da:	f842 9f10 	str.w	r9, [r2, #16]!
   181de:	4650      	mov	r0, sl
   181e0:	f013 febf 	bl	2bf62 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   181e4:	3401      	adds	r4, #1
   181e6:	46dd      	mov	sp, fp
   181e8:	e7a4      	b.n	18134 <bt_finalize_init+0x78>
   181ea:	bf00      	nop
   181ec:	20000388 	.word	0x20000388
   181f0:	2000045c 	.word	0x2000045c
   181f4:	000315b0 	.word	0x000315b0
   181f8:	00032540 	.word	0x00032540
   181fc:	00032544 	.word	0x00032544
   18200:	000328d4 	.word	0x000328d4
   18204:	04020301 	.word	0x04020301
   18208:	02000005 	.word	0x02000005
   1820c:	0002fc14 	.word	0x0002fc14
   18210:	01000005 	.word	0x01000005
   18214:	0003256c 	.word	0x0003256c
   18218:	01000007 	.word	0x01000007
   1821c:	000325ae 	.word	0x000325ae
   18220:	01000006 	.word	0x01000006
   18224:	00032557 	.word	0x00032557

00018228 <bt_init.part.0>:
static int bt_init(void)
   18228:	b598      	push	{r3, r4, r7, lr}
		if (!bt_dev.id_count) {
   1822a:	480f      	ldr	r0, [pc, #60]	; (18268 <bt_init.part.0+0x40>)
   1822c:	79c3      	ldrb	r3, [r0, #7]
static int bt_init(void)
   1822e:	af00      	add	r7, sp, #0
		if (!bt_dev.id_count) {
   18230:	b993      	cbnz	r3, 18258 <bt_init.part.0+0x30>
			LOG_INF("No ID address. App must call settings_load()");
   18232:	466c      	mov	r4, sp
   18234:	b088      	sub	sp, #32
   18236:	466a      	mov	r2, sp
   18238:	4b0c      	ldr	r3, [pc, #48]	; (1826c <bt_init.part.0+0x44>)
   1823a:	6153      	str	r3, [r2, #20]
   1823c:	4b0c      	ldr	r3, [pc, #48]	; (18270 <bt_init.part.0+0x48>)
   1823e:	6193      	str	r3, [r2, #24]
   18240:	2303      	movs	r3, #3
   18242:	f842 3f10 	str.w	r3, [r2, #16]!
   18246:	480b      	ldr	r0, [pc, #44]	; (18274 <bt_init.part.0+0x4c>)
   18248:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1824c:	f013 fe89 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   18250:	46a5      	mov	sp, r4
}
   18252:	2000      	movs	r0, #0
   18254:	46bd      	mov	sp, r7
   18256:	bd98      	pop	{r3, r4, r7, pc}
   18258:	2108      	movs	r1, #8
   1825a:	30d4      	adds	r0, #212	; 0xd4
   1825c:	f013 fe72 	bl	2bf44 <atomic_or>
	bt_finalize_init();
   18260:	f7ff ff2c 	bl	180bc <bt_finalize_init>
	return 0;
   18264:	e7f5      	b.n	18252 <bt_init.part.0+0x2a>
   18266:	bf00      	nop
   18268:	20000388 	.word	0x20000388
   1826c:	000325d9 	.word	0x000325d9
   18270:	00032b1f 	.word	0x00032b1f
   18274:	0002fc14 	.word	0x0002fc14

00018278 <init_work>:
{
   18278:	b510      	push	{r4, lr}
	err = bt_init();
   1827a:	f7f9 f831 	bl	112e0 <bt_init>
	if (ready_cb) {
   1827e:	4b03      	ldr	r3, [pc, #12]	; (1828c <init_work+0x14>)
   18280:	681b      	ldr	r3, [r3, #0]
   18282:	b113      	cbz	r3, 1828a <init_work+0x12>
}
   18284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   18288:	4718      	bx	r3
}
   1828a:	bd10      	pop	{r4, pc}
   1828c:	200033a4 	.word	0x200033a4

00018290 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   18290:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   18292:	4d42      	ldr	r5, [pc, #264]	; (1839c <bt_enable+0x10c>)
{
   18294:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.drv) {
   18296:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
{
   1829a:	af08      	add	r7, sp, #32
   1829c:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1829e:	b9ab      	cbnz	r3, 182cc <bt_enable+0x3c>
		LOG_ERR("No HCI driver registered");
   182a0:	466c      	mov	r4, sp
   182a2:	4622      	mov	r2, r4
   182a4:	b088      	sub	sp, #32
   182a6:	4b3e      	ldr	r3, [pc, #248]	; (183a0 <bt_enable+0x110>)
   182a8:	6163      	str	r3, [r4, #20]
   182aa:	4b3e      	ldr	r3, [pc, #248]	; (183a4 <bt_enable+0x114>)
   182ac:	61a3      	str	r3, [r4, #24]
   182ae:	2303      	movs	r3, #3
   182b0:	f842 3f10 	str.w	r3, [r2, #16]!
   182b4:	483c      	ldr	r0, [pc, #240]	; (183a8 <bt_enable+0x118>)
   182b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   182ba:	f013 fe52 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   182be:	46a5      	mov	sp, r4
		return -ENODEV;
   182c0:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   182c4:	4620      	mov	r0, r4
   182c6:	3704      	adds	r7, #4
   182c8:	46bd      	mov	sp, r7
   182ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   182cc:	f06f 0102 	mvn.w	r1, #2
   182d0:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   182d4:	f013 fe48 	bl	2bf68 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   182d8:	2101      	movs	r1, #1
   182da:	f013 fe33 	bl	2bf44 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   182de:	07c3      	lsls	r3, r0, #31
   182e0:	d458      	bmi.n	18394 <bt_enable+0x104>
		err = bt_settings_init();
   182e2:	f7fe fa7d 	bl	167e0 <bt_settings_init>
		if (err) {
   182e6:	4604      	mov	r4, r0
   182e8:	2800      	cmp	r0, #0
   182ea:	d1eb      	bne.n	182c4 <bt_enable+0x34>
	ready_cb = cb;
   182ec:	4b2f      	ldr	r3, [pc, #188]	; (183ac <bt_enable+0x11c>)
   182ee:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   182f0:	2201      	movs	r2, #1
   182f2:	4611      	mov	r1, r2
   182f4:	f505 7094 	add.w	r0, r5, #296	; 0x128
   182f8:	f016 fe6b 	bl	2efd2 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   182fc:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
   18300:	f016 fe42 	bl	2ef88 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18304:	2200      	movs	r2, #0
   18306:	2300      	movs	r3, #0
   18308:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1830c:	f06f 0308 	mvn.w	r3, #8
   18310:	e9cd 4302 	strd	r4, r3, [sp, #8]
   18314:	e9cd 4400 	strd	r4, r4, [sp]
   18318:	4b25      	ldr	r3, [pc, #148]	; (183b0 <bt_enable+0x120>)
   1831a:	4926      	ldr	r1, [pc, #152]	; (183b4 <bt_enable+0x124>)
   1831c:	9404      	str	r4, [sp, #16]
   1831e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   18322:	4825      	ldr	r0, [pc, #148]	; (183b8 <bt_enable+0x128>)
   18324:	f00c fe92 	bl	2504c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   18328:	4924      	ldr	r1, [pc, #144]	; (183bc <bt_enable+0x12c>)
   1832a:	4823      	ldr	r0, [pc, #140]	; (183b8 <bt_enable+0x128>)
   1832c:	f016 fd9d 	bl	2ee6a <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   18330:	4823      	ldr	r0, [pc, #140]	; (183c0 <bt_enable+0x130>)
   18332:	f016 ff0f 	bl	2f154 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   18336:	4923      	ldr	r1, [pc, #140]	; (183c4 <bt_enable+0x134>)
   18338:	4821      	ldr	r0, [pc, #132]	; (183c0 <bt_enable+0x130>)
   1833a:	9400      	str	r4, [sp, #0]
   1833c:	f06f 0307 	mvn.w	r3, #7
   18340:	f640 0298 	movw	r2, #2200	; 0x898
   18344:	f00d f9b4 	bl	256b0 <k_work_queue_start>
   18348:	491f      	ldr	r1, [pc, #124]	; (183c8 <bt_enable+0x138>)
   1834a:	481d      	ldr	r0, [pc, #116]	; (183c0 <bt_enable+0x130>)
   1834c:	f016 fd8d 	bl	2ee6a <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   18350:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   18354:	68db      	ldr	r3, [r3, #12]
   18356:	4798      	blx	r3
	if (err) {
   18358:	4604      	mov	r4, r0
   1835a:	b188      	cbz	r0, 18380 <bt_enable+0xf0>
		LOG_ERR("HCI driver open failed (%d)", err);
   1835c:	466d      	mov	r5, sp
   1835e:	462a      	mov	r2, r5
   18360:	b088      	sub	sp, #32
   18362:	4b1a      	ldr	r3, [pc, #104]	; (183cc <bt_enable+0x13c>)
   18364:	616b      	str	r3, [r5, #20]
   18366:	4b0f      	ldr	r3, [pc, #60]	; (183a4 <bt_enable+0x114>)
   18368:	e9c5 3006 	strd	r3, r0, [r5, #24]
   1836c:	2304      	movs	r3, #4
   1836e:	f842 3f10 	str.w	r3, [r2, #16]!
   18372:	480d      	ldr	r0, [pc, #52]	; (183a8 <bt_enable+0x118>)
   18374:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   18378:	f013 fdf3 	bl	2bf62 <z_log_msg_static_create.constprop.0>
   1837c:	46ad      	mov	sp, r5
		return err;
   1837e:	e7a1      	b.n	182c4 <bt_enable+0x34>
	if (!cb) {
   18380:	b91e      	cbnz	r6, 1838a <bt_enable+0xfa>
		return bt_init();
   18382:	f7f8 ffad 	bl	112e0 <bt_init>
   18386:	4604      	mov	r4, r0
   18388:	e79c      	b.n	182c4 <bt_enable+0x34>
	k_work_submit(&bt_dev.init);
   1838a:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   1838e:	f00d f989 	bl	256a4 <k_work_submit>
	return 0;
   18392:	e797      	b.n	182c4 <bt_enable+0x34>
		return -EALREADY;
   18394:	f06f 0477 	mvn.w	r4, #119	; 0x77
   18398:	e794      	b.n	182c4 <bt_enable+0x34>
   1839a:	bf00      	nop
   1839c:	20000388 	.word	0x20000388
   183a0:	00032745 	.word	0x00032745
   183a4:	000327d7 	.word	0x000327d7
   183a8:	0002fc14 	.word	0x0002fc14
   183ac:	200033a4 	.word	0x200033a4
   183b0:	00017149 	.word	0x00017149
   183b4:	20005ac0 	.word	0x20005ac0
   183b8:	20001f80 	.word	0x20001f80
   183bc:	00032762 	.word	0x00032762
   183c0:	20002000 	.word	0x20002000
   183c4:	20006100 	.word	0x20006100
   183c8:	00032768 	.word	0x00032768
   183cc:	0003276e 	.word	0x0003276e

000183d0 <bt_is_ready>:
   183d0:	4b04      	ldr	r3, [pc, #16]	; (183e4 <bt_is_ready+0x14>)
   183d2:	f3bf 8f5b 	dmb	ish
   183d6:	6818      	ldr	r0, [r3, #0]
   183d8:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   183dc:	f3c0 0080 	ubfx	r0, r0, #2, #1
   183e0:	4770      	bx	lr
   183e2:	bf00      	nop
   183e4:	2000045c 	.word	0x2000045c

000183e8 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   183e8:	4800      	ldr	r0, [pc, #0]	; (183ec <bt_get_name+0x4>)
   183ea:	4770      	bx	lr
   183ec:	0003278e 	.word	0x0003278e

000183f0 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   183f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   183f2:	4f0a      	ldr	r7, [pc, #40]	; (1841c <id_find+0x2c>)
{
   183f4:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   183f6:	2500      	movs	r5, #0
   183f8:	79fb      	ldrb	r3, [r7, #7]
   183fa:	b2ec      	uxtb	r4, r5
   183fc:	42a3      	cmp	r3, r4
   183fe:	d802      	bhi.n	18406 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   18400:	f06f 0001 	mvn.w	r0, #1
   18404:	e009      	b.n	1841a <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   18406:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1840a:	4439      	add	r1, r7
   1840c:	4630      	mov	r0, r6
   1840e:	f013 fe74 	bl	2c0fa <bt_addr_le_eq>
   18412:	3501      	adds	r5, #1
   18414:	2800      	cmp	r0, #0
   18416:	d0ef      	beq.n	183f8 <id_find+0x8>
   18418:	4620      	mov	r0, r4
}
   1841a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1841c:	20000388 	.word	0x20000388

00018420 <atomic_get.constprop.0>:
   18420:	4b03      	ldr	r3, [pc, #12]	; (18430 <atomic_get.constprop.0+0x10>)
   18422:	f3bf 8f5b 	dmb	ish
   18426:	6818      	ldr	r0, [r3, #0]
   18428:	f3bf 8f5b 	dmb	ish
}
   1842c:	4770      	bx	lr
   1842e:	bf00      	nop
   18430:	2000045c 	.word	0x2000045c

00018434 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   18434:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18436:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   18438:	460d      	mov	r5, r1
   1843a:	b1a1      	cbz	r1, 18466 <id_create.constprop.0+0x32>
   1843c:	4915      	ldr	r1, [pc, #84]	; (18494 <id_create.constprop.0+0x60>)
   1843e:	4628      	mov	r0, r5
   18440:	f013 fe5b 	bl	2c0fa <bt_addr_le_eq>
   18444:	b978      	cbnz	r0, 18466 <id_create.constprop.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   18446:	4814      	ldr	r0, [pc, #80]	; (18498 <id_create.constprop.0+0x64>)
   18448:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1844c:	4629      	mov	r1, r5
   1844e:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   18450:	f013 fe5b 	bl	2c10a <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18454:	f7ff ffe4 	bl	18420 <atomic_get.constprop.0>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   18458:	0743      	lsls	r3, r0, #29
   1845a:	d501      	bpl.n	18460 <id_create.constprop.0+0x2c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   1845c:	f7fe f960 	bl	16720 <bt_settings_save_id>
	}

	return 0;
   18460:	2000      	movs	r0, #0
}
   18462:	b003      	add	sp, #12
   18464:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   18466:	4668      	mov	r0, sp
   18468:	f013 fd22 	bl	2beb0 <bt_addr_le_create_static>
			if (err) {
   1846c:	2800      	cmp	r0, #0
   1846e:	d1f8      	bne.n	18462 <id_create.constprop.0+0x2e>
		} while (id_find(&new_addr) >= 0);
   18470:	4668      	mov	r0, sp
   18472:	f7ff ffbd 	bl	183f0 <id_find>
   18476:	2800      	cmp	r0, #0
   18478:	daf5      	bge.n	18466 <id_create.constprop.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1847a:	4b07      	ldr	r3, [pc, #28]	; (18498 <id_create.constprop.0+0x64>)
   1847c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   18480:	441c      	add	r4, r3
   18482:	4669      	mov	r1, sp
   18484:	4620      	mov	r0, r4
   18486:	f013 fe40 	bl	2c10a <bt_addr_le_copy>
		if (addr) {
   1848a:	2d00      	cmp	r5, #0
   1848c:	d0e2      	beq.n	18454 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1848e:	4621      	mov	r1, r4
   18490:	4628      	mov	r0, r5
   18492:	e7dd      	b.n	18450 <id_create.constprop.0+0x1c>
   18494:	00031d70 	.word	0x00031d70
   18498:	20000388 	.word	0x20000388

0001849c <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
   1849c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   184a0:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   184a2:	b082      	sub	sp, #8
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   184a4:	2206      	movs	r2, #6
void bt_id_add(struct bt_keys *keys)
   184a6:	af00      	add	r7, sp, #0
   184a8:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   184aa:	4608      	mov	r0, r1
   184ac:	f001 fd24 	bl	19ef8 <bt_conn_lookup_state_le>
	if (conn) {
   184b0:	4602      	mov	r2, r0
   184b2:	b1b0      	cbz	r0, 184e2 <bt_id_add.part.0+0x46>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   184b4:	f3bf 8f5b 	dmb	ish
   184b8:	4b60      	ldr	r3, [pc, #384]	; (1863c <bt_id_add.part.0+0x1a0>)
   184ba:	e853 1f00 	ldrex	r1, [r3]
   184be:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   184c2:	e843 1200 	strex	r2, r1, [r3]
   184c6:	2a00      	cmp	r2, #0
   184c8:	d1f7      	bne.n	184ba <bt_id_add.part.0+0x1e>
   184ca:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   184ce:	7a23      	ldrb	r3, [r4, #8]
   184d0:	f043 0301 	orr.w	r3, r3, #1
   184d4:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   184d6:	f013 ff8d 	bl	2c3f4 <bt_conn_unref>
}
   184da:	3708      	adds	r7, #8
   184dc:	46bd      	mov	sp, r7
   184de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   184e2:	f7ff ff9d 	bl	18420 <atomic_get.constprop.0>
	if (scan_enabled) {
   184e6:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   184e8:	f3c0 1680 	ubfx	r6, r0, #6, #1
   184ec:	d502      	bpl.n	184f4 <bt_id_add.part.0+0x58>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   184ee:	4610      	mov	r0, r2
   184f0:	f013 fed5 	bl	2c29e <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
   184f4:	4d52      	ldr	r5, [pc, #328]	; (18640 <bt_id_add.part.0+0x1a4>)
   184f6:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   184fa:	b1a3      	cbz	r3, 18526 <bt_id_add.part.0+0x8a>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   184fc:	2000      	movs	r0, #0
   184fe:	f013 fe44 	bl	2c18a <addr_res_enable>
		if (err) {
   18502:	b180      	cbz	r0, 18526 <bt_id_add.part.0+0x8a>
			LOG_WRN("Failed to disable address resolution");
   18504:	466c      	mov	r4, sp
   18506:	b088      	sub	sp, #32
   18508:	466a      	mov	r2, sp
   1850a:	4b4e      	ldr	r3, [pc, #312]	; (18644 <bt_id_add.part.0+0x1a8>)
   1850c:	6153      	str	r3, [r2, #20]
   1850e:	4b4e      	ldr	r3, [pc, #312]	; (18648 <bt_id_add.part.0+0x1ac>)
		LOG_WRN("Set privacy mode command is not supported");
   18510:	6193      	str	r3, [r2, #24]
   18512:	2303      	movs	r3, #3
   18514:	f842 3f10 	str.w	r3, [r2, #16]!
   18518:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
		LOG_ERR("Failed to set privacy mode");
   1851c:	484b      	ldr	r0, [pc, #300]	; (1864c <bt_id_add.part.0+0x1b0>)
   1851e:	f013 fe31 	bl	2c184 <z_log_msg_static_create.constprop.0>
   18522:	46a5      	mov	sp, r4
		goto done;
   18524:	e02c      	b.n	18580 <bt_id_add.part.0+0xe4>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   18526:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
   1852a:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
   1852e:	429a      	cmp	r2, r3
   18530:	d139      	bne.n	185a6 <bt_id_add.part.0+0x10a>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   18532:	46e8      	mov	r8, sp
   18534:	b088      	sub	sp, #32
   18536:	466a      	mov	r2, sp
   18538:	4b45      	ldr	r3, [pc, #276]	; (18650 <bt_id_add.part.0+0x1b4>)
   1853a:	f8df a10c 	ldr.w	sl, [pc, #268]	; 18648 <bt_id_add.part.0+0x1ac>
   1853e:	6153      	str	r3, [r2, #20]
   18540:	f04f 0903 	mov.w	r9, #3
   18544:	f8c2 a018 	str.w	sl, [r2, #24]
   18548:	4840      	ldr	r0, [pc, #256]	; (1864c <bt_id_add.part.0+0x1b0>)
   1854a:	f842 9f10 	str.w	r9, [r2, #16]!
   1854e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18552:	f013 fe17 	bl	2c184 <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   18556:	2200      	movs	r2, #0
   18558:	46c5      	mov	sp, r8
   1855a:	4611      	mov	r1, r2
   1855c:	f242 0029 	movw	r0, #8233	; 0x2029
   18560:	f7ff f92c 	bl	177bc <bt_hci_cmd_send_sync>
		if (err) {
   18564:	b1a8      	cbz	r0, 18592 <bt_id_add.part.0+0xf6>
			LOG_ERR("Failed to clear resolution list");
   18566:	b088      	sub	sp, #32
   18568:	466a      	mov	r2, sp
   1856a:	4b3a      	ldr	r3, [pc, #232]	; (18654 <bt_id_add.part.0+0x1b8>)
   1856c:	4837      	ldr	r0, [pc, #220]	; (1864c <bt_id_add.part.0+0x1b0>)
   1856e:	e9c2 3a05 	strd	r3, sl, [r2, #20]
   18572:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18576:	f842 9f10 	str.w	r9, [r2, #16]!
   1857a:	f013 fe03 	bl	2c184 <z_log_msg_static_create.constprop.0>
   1857e:	46c5      	mov	sp, r8
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   18580:	2001      	movs	r0, #1
   18582:	f013 fe02 	bl	2c18a <addr_res_enable>
	if (scan_enabled) {
   18586:	2e00      	cmp	r6, #0
   18588:	d0a7      	beq.n	184da <bt_id_add.part.0+0x3e>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   1858a:	2001      	movs	r0, #1
   1858c:	f013 fe87 	bl	2c29e <bt_le_scan_set_enable>
   18590:	e7a3      	b.n	184da <bt_id_add.part.0+0x3e>
		bt_dev.le.rl_entries++;
   18592:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   18596:	3301      	adds	r3, #1
   18598:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
		keys->state |= BT_KEYS_ID_ADDED;
   1859c:	7a23      	ldrb	r3, [r4, #8]
   1859e:	f043 0304 	orr.w	r3, r3, #4
   185a2:	7223      	strb	r3, [r4, #8]
		goto done;
   185a4:	e7ec      	b.n	18580 <bt_id_add.part.0+0xe4>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   185a6:	4622      	mov	r2, r4
   185a8:	f104 0901 	add.w	r9, r4, #1
   185ac:	f812 0b2a 	ldrb.w	r0, [r2], #42
   185b0:	4649      	mov	r1, r9
   185b2:	f013 fdad 	bl	2c110 <hci_id_add>
	if (err) {
   185b6:	4680      	mov	r8, r0
   185b8:	b160      	cbz	r0, 185d4 <bt_id_add.part.0+0x138>
		LOG_ERR("Failed to add IRK to controller");
   185ba:	466c      	mov	r4, sp
   185bc:	b088      	sub	sp, #32
   185be:	466a      	mov	r2, sp
   185c0:	4b25      	ldr	r3, [pc, #148]	; (18658 <bt_id_add.part.0+0x1bc>)
		LOG_ERR("Failed to set privacy mode");
   185c2:	6153      	str	r3, [r2, #20]
   185c4:	4b20      	ldr	r3, [pc, #128]	; (18648 <bt_id_add.part.0+0x1ac>)
   185c6:	6193      	str	r3, [r2, #24]
   185c8:	2303      	movs	r3, #3
   185ca:	f842 3f10 	str.w	r3, [r2, #16]!
   185ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   185d2:	e7a3      	b.n	1851c <bt_id_add.part.0+0x80>
	bt_dev.le.rl_entries++;
   185d4:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   185d8:	3301      	adds	r3, #1
   185da:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
	keys->state |= BT_KEYS_ID_ADDED;
   185de:	7a23      	ldrb	r3, [r4, #8]
   185e0:	f043 0304 	orr.w	r3, r3, #4
   185e4:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   185e6:	f895 30a7 	ldrb.w	r3, [r5, #167]	; 0xa7
   185ea:	075b      	lsls	r3, r3, #29
   185ec:	d406      	bmi.n	185fc <bt_id_add.part.0+0x160>
		LOG_WRN("Set privacy mode command is not supported");
   185ee:	466c      	mov	r4, sp
   185f0:	b088      	sub	sp, #32
   185f2:	466a      	mov	r2, sp
   185f4:	4b19      	ldr	r3, [pc, #100]	; (1865c <bt_id_add.part.0+0x1c0>)
   185f6:	6153      	str	r3, [r2, #20]
   185f8:	4b19      	ldr	r3, [pc, #100]	; (18660 <bt_id_add.part.0+0x1c4>)
   185fa:	e789      	b.n	18510 <bt_id_add.part.0+0x74>
	bt_addr_le_copy(&cp.id_addr, addr);
   185fc:	4649      	mov	r1, r9
   185fe:	4638      	mov	r0, r7
   18600:	f013 fd83 	bl	2c10a <bt_addr_le_copy>
	cp.mode = mode;
   18604:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   18606:	2108      	movs	r1, #8
   18608:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   1860c:	71fb      	strb	r3, [r7, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1860e:	f7fe ff79 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   18612:	4604      	mov	r4, r0
   18614:	b160      	cbz	r0, 18630 <bt_id_add.part.0+0x194>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18616:	2208      	movs	r2, #8
   18618:	4639      	mov	r1, r7
   1861a:	300c      	adds	r0, #12
   1861c:	f015 ff0f 	bl	2e43e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   18620:	4642      	mov	r2, r8
   18622:	4621      	mov	r1, r4
   18624:	f242 004e 	movw	r0, #8270	; 0x204e
   18628:	f7ff f8c8 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   1862c:	2800      	cmp	r0, #0
   1862e:	d0a7      	beq.n	18580 <bt_id_add.part.0+0xe4>
		LOG_ERR("Failed to set privacy mode");
   18630:	466c      	mov	r4, sp
   18632:	b088      	sub	sp, #32
   18634:	466a      	mov	r2, sp
   18636:	4b0b      	ldr	r3, [pc, #44]	; (18664 <bt_id_add.part.0+0x1c8>)
   18638:	e7c3      	b.n	185c2 <bt_id_add.part.0+0x126>
   1863a:	bf00      	nop
   1863c:	2000045c 	.word	0x2000045c
   18640:	20000388 	.word	0x20000388
   18644:	00032b27 	.word	0x00032b27
   18648:	00032dbc 	.word	0x00032dbc
   1864c:	0002fc24 	.word	0x0002fc24
   18650:	00032b50 	.word	0x00032b50
   18654:	00032b85 	.word	0x00032b85
   18658:	00032ba9 	.word	0x00032ba9
   1865c:	00032bcd 	.word	0x00032bcd
   18660:	00032da8 	.word	0x00032da8
   18664:	00032bfb 	.word	0x00032bfb

00018668 <set_random_address>:
{
   18668:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1866a:	4913      	ldr	r1, [pc, #76]	; (186b8 <set_random_address+0x50>)
   1866c:	2206      	movs	r2, #6
   1866e:	4605      	mov	r5, r0
   18670:	f013 faef 	bl	2bc52 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   18674:	b1d8      	cbz	r0, 186ae <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   18676:	2106      	movs	r1, #6
   18678:	f242 0005 	movw	r0, #8197	; 0x2005
   1867c:	f7fe ff42 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   18680:	4604      	mov	r4, r0
   18682:	b1b0      	cbz	r0, 186b2 <set_random_address+0x4a>
   18684:	2206      	movs	r2, #6
   18686:	4629      	mov	r1, r5
   18688:	300c      	adds	r0, #12
   1868a:	f015 fed8 	bl	2e43e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1868e:	2200      	movs	r2, #0
   18690:	4621      	mov	r1, r4
   18692:	f242 0005 	movw	r0, #8197	; 0x2005
   18696:	f7ff f891 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   1869a:	b948      	cbnz	r0, 186b0 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   1869c:	2206      	movs	r2, #6
   1869e:	4806      	ldr	r0, [pc, #24]	; (186b8 <set_random_address+0x50>)
   186a0:	4629      	mov	r1, r5
   186a2:	f013 fafd 	bl	2bca0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   186a6:	4b05      	ldr	r3, [pc, #20]	; (186bc <set_random_address+0x54>)
   186a8:	2201      	movs	r2, #1
   186aa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
   186ae:	2000      	movs	r0, #0
}
   186b0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   186b2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   186b6:	e7fb      	b.n	186b0 <set_random_address+0x48>
   186b8:	200003f1 	.word	0x200003f1
   186bc:	20000388 	.word	0x20000388

000186c0 <bt_id_del.part.0>:
void bt_id_del(struct bt_keys *keys)
   186c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   186c4:	2100      	movs	r1, #0
   186c6:	2206      	movs	r2, #6
void bt_id_del(struct bt_keys *keys)
   186c8:	af00      	add	r7, sp, #0
   186ca:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   186cc:	4608      	mov	r0, r1
   186ce:	f001 fc13 	bl	19ef8 <bt_conn_lookup_state_le>
	if (conn) {
   186d2:	4602      	mov	r2, r0
   186d4:	b1a8      	cbz	r0, 18702 <bt_id_del.part.0+0x42>
   186d6:	f3bf 8f5b 	dmb	ish
   186da:	4b41      	ldr	r3, [pc, #260]	; (187e0 <bt_id_del.part.0+0x120>)
   186dc:	e853 1f00 	ldrex	r1, [r3]
   186e0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   186e4:	e843 1200 	strex	r2, r1, [r3]
   186e8:	2a00      	cmp	r2, #0
   186ea:	d1f7      	bne.n	186dc <bt_id_del.part.0+0x1c>
   186ec:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   186f0:	7a23      	ldrb	r3, [r4, #8]
   186f2:	f043 0302 	orr.w	r3, r3, #2
   186f6:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   186f8:	f013 fe7c 	bl	2c3f4 <bt_conn_unref>
}
   186fc:	46bd      	mov	sp, r7
   186fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18702:	f7ff fe8d 	bl	18420 <atomic_get.constprop.0>
	if (scan_enabled) {
   18706:	0643      	lsls	r3, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   18708:	f3c0 1680 	ubfx	r6, r0, #6, #1
   1870c:	d502      	bpl.n	18714 <bt_id_del.part.0+0x54>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   1870e:	4610      	mov	r0, r2
   18710:	f013 fdc5 	bl	2c29e <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   18714:	2000      	movs	r0, #0
   18716:	f013 fd38 	bl	2c18a <addr_res_enable>
	if (err) {
   1871a:	4d32      	ldr	r5, [pc, #200]	; (187e4 <bt_id_del.part.0+0x124>)
   1871c:	4680      	mov	r8, r0
   1871e:	b190      	cbz	r0, 18746 <bt_id_del.part.0+0x86>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   18720:	466c      	mov	r4, sp
   18722:	b088      	sub	sp, #32
   18724:	466b      	mov	r3, sp
   18726:	4a30      	ldr	r2, [pc, #192]	; (187e8 <bt_id_del.part.0+0x128>)
   18728:	615a      	str	r2, [r3, #20]
   1872a:	4a30      	ldr	r2, [pc, #192]	; (187ec <bt_id_del.part.0+0x12c>)
   1872c:	e9c3 2006 	strd	r2, r0, [r3, #24]
   18730:	461a      	mov	r2, r3
   18732:	2304      	movs	r3, #4
   18734:	f842 3f10 	str.w	r3, [r2, #16]!
   18738:	f44f 5101 	mov.w	r1, #8256	; 0x2040
		LOG_ERR("Failed to remove IRK from controller");
   1873c:	482c      	ldr	r0, [pc, #176]	; (187f0 <bt_id_del.part.0+0x130>)
   1873e:	f013 fd21 	bl	2c184 <z_log_msg_static_create.constprop.0>
   18742:	46a5      	mov	sp, r4
		goto done;
   18744:	e011      	b.n	1876a <bt_id_del.part.0+0xaa>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   18746:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   1874a:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
   1874e:	429a      	cmp	r2, r3
   18750:	d217      	bcs.n	18782 <bt_id_del.part.0+0xc2>
		bt_dev.le.rl_entries--;
   18752:	3b01      	subs	r3, #1
   18754:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
		keys->state &= ~BT_KEYS_ID_ADDED;
   18758:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   1875a:	4926      	ldr	r1, [pc, #152]	; (187f4 <bt_id_del.part.0+0x134>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   1875c:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   18760:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   18762:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   18764:	2002      	movs	r0, #2
   18766:	f007 fe1f 	bl	203a8 <bt_keys_foreach_type>
	if (bt_dev.le.rl_entries) {
   1876a:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   1876e:	b113      	cbz	r3, 18776 <bt_id_del.part.0+0xb6>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   18770:	2001      	movs	r0, #1
   18772:	f013 fd0a 	bl	2c18a <addr_res_enable>
	if (scan_enabled) {
   18776:	2e00      	cmp	r6, #0
   18778:	d0c0      	beq.n	186fc <bt_id_del.part.0+0x3c>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   1877a:	2001      	movs	r0, #1
   1877c:	f013 fd8f 	bl	2c29e <bt_le_scan_set_enable>
   18780:	e7bc      	b.n	186fc <bt_id_del.part.0+0x3c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   18782:	2107      	movs	r1, #7
   18784:	f242 0028 	movw	r0, #8232	; 0x2028
   18788:	f7fe febc 	bl	17504 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   1878c:	f104 0a01 	add.w	sl, r4, #1
	if (!buf) {
   18790:	4681      	mov	r9, r0
   18792:	b960      	cbnz	r0, 187ae <bt_id_del.part.0+0xee>
		LOG_ERR("Failed to remove IRK from controller");
   18794:	466c      	mov	r4, sp
   18796:	b088      	sub	sp, #32
   18798:	466a      	mov	r2, sp
   1879a:	4b17      	ldr	r3, [pc, #92]	; (187f8 <bt_id_del.part.0+0x138>)
   1879c:	6153      	str	r3, [r2, #20]
   1879e:	4b13      	ldr	r3, [pc, #76]	; (187ec <bt_id_del.part.0+0x12c>)
   187a0:	6193      	str	r3, [r2, #24]
   187a2:	2303      	movs	r3, #3
   187a4:	f842 3f10 	str.w	r3, [r2, #16]!
   187a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   187ac:	e7c6      	b.n	1873c <bt_id_del.part.0+0x7c>
	return net_buf_simple_add(&buf->b, len);
   187ae:	2107      	movs	r1, #7
   187b0:	300c      	adds	r0, #12
   187b2:	f015 fe3e 	bl	2e432 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   187b6:	4651      	mov	r1, sl
   187b8:	f013 fca7 	bl	2c10a <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   187bc:	4642      	mov	r2, r8
   187be:	4649      	mov	r1, r9
   187c0:	f242 0028 	movw	r0, #8232	; 0x2028
   187c4:	f7fe fffa 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   187c8:	2800      	cmp	r0, #0
   187ca:	d1e3      	bne.n	18794 <bt_id_del.part.0+0xd4>
	bt_dev.le.rl_entries--;
   187cc:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   187d0:	3b01      	subs	r3, #1
   187d2:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
	keys->state &= ~BT_KEYS_ID_ADDED;
   187d6:	7a23      	ldrb	r3, [r4, #8]
   187d8:	f023 0304 	bic.w	r3, r3, #4
   187dc:	7223      	strb	r3, [r4, #8]
   187de:	e7c4      	b.n	1876a <bt_id_del.part.0+0xaa>
   187e0:	2000045c 	.word	0x2000045c
   187e4:	20000388 	.word	0x20000388
   187e8:	00032c1a 	.word	0x00032c1a
   187ec:	00032d9e 	.word	0x00032d9e
   187f0:	0002fc24 	.word	0x0002fc24
   187f4:	0002c16f 	.word	0x0002c16f
   187f8:	00032c4b 	.word	0x00032c4b

000187fc <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   187fc:	4b0a      	ldr	r3, [pc, #40]	; (18828 <bt_id_pending_keys_update+0x2c>)
   187fe:	f3bf 8f5b 	dmb	ish
   18802:	e853 2f00 	ldrex	r2, [r3]
   18806:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1880a:	e843 1000 	strex	r0, r1, [r3]
   1880e:	2800      	cmp	r0, #0
   18810:	d1f7      	bne.n	18802 <bt_id_pending_keys_update+0x6>
   18812:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   18816:	0413      	lsls	r3, r2, #16
   18818:	d504      	bpl.n	18824 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   1881a:	4904      	ldr	r1, [pc, #16]	; (1882c <bt_id_pending_keys_update+0x30>)
   1881c:	2200      	movs	r2, #0
   1881e:	2002      	movs	r0, #2
   18820:	f007 bdc2 	b.w	203a8 <bt_keys_foreach_type>
}
   18824:	4770      	bx	lr
   18826:	bf00      	nop
   18828:	2000045c 	.word	0x2000045c
   1882c:	0002c25d 	.word	0x0002c25d

00018830 <bt_id_find_conflict>:
{
   18830:	b507      	push	{r0, r1, r2, lr}
	struct bt_id_conflict conflict = {
   18832:	2300      	movs	r3, #0
   18834:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   18838:	4904      	ldr	r1, [pc, #16]	; (1884c <bt_id_find_conflict+0x1c>)
   1883a:	466a      	mov	r2, sp
   1883c:	2002      	movs	r0, #2
   1883e:	f007 fdb3 	bl	203a8 <bt_keys_foreach_type>
}
   18842:	9801      	ldr	r0, [sp, #4]
   18844:	b003      	add	sp, #12
   18846:	f85d fb04 	ldr.w	pc, [sp], #4
   1884a:	bf00      	nop
   1884c:	0002c1bb 	.word	0x0002c1bb

00018850 <bt_id_add>:
{
   18850:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   18852:	4603      	mov	r3, r0
   18854:	b170      	cbz	r0, 18874 <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   18856:	490a      	ldr	r1, [pc, #40]	; (18880 <bt_id_add+0x30>)
   18858:	f891 4120 	ldrb.w	r4, [r1, #288]	; 0x120
   1885c:	f891 2121 	ldrb.w	r2, [r1, #289]	; 0x121
   18860:	b10c      	cbz	r4, 18866 <bt_id_add+0x16>
   18862:	4294      	cmp	r4, r2
   18864:	d208      	bcs.n	18878 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   18866:	3201      	adds	r2, #1
   18868:	f881 2121 	strb.w	r2, [r1, #289]	; 0x121
		keys->state |= BT_KEYS_ID_ADDED;
   1886c:	7a1a      	ldrb	r2, [r3, #8]
   1886e:	f042 0204 	orr.w	r2, r2, #4
   18872:	721a      	strb	r2, [r3, #8]
}
   18874:	bc10      	pop	{r4}
   18876:	4770      	bx	lr
   18878:	bc10      	pop	{r4}
   1887a:	f7ff be0f 	b.w	1849c <bt_id_add.part.0>
   1887e:	bf00      	nop
   18880:	20000388 	.word	0x20000388

00018884 <bt_id_del>:
{
   18884:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   18886:	4603      	mov	r3, r0
   18888:	b198      	cbz	r0, 188b2 <bt_id_del+0x2e>
	if (!bt_dev.le.rl_size ||
   1888a:	4c0b      	ldr	r4, [pc, #44]	; (188b8 <bt_id_del+0x34>)
   1888c:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   18890:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
	if (!bt_dev.le.rl_size ||
   18894:	b129      	cbz	r1, 188a2 <bt_id_del+0x1e>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   18896:	3101      	adds	r1, #1
	if (!bt_dev.le.rl_size ||
   18898:	428a      	cmp	r2, r1
   1889a:	dc03      	bgt.n	188a4 <bt_id_del+0x20>
}
   1889c:	bc10      	pop	{r4}
   1889e:	f7ff bf0f 	b.w	186c0 <bt_id_del.part.0>
		if (bt_dev.le.rl_entries > 0) {
   188a2:	b112      	cbz	r2, 188aa <bt_id_del+0x26>
			bt_dev.le.rl_entries--;
   188a4:	3a01      	subs	r2, #1
   188a6:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
		keys->state &= ~BT_KEYS_ID_ADDED;
   188aa:	7a1a      	ldrb	r2, [r3, #8]
   188ac:	f022 0204 	bic.w	r2, r2, #4
   188b0:	721a      	strb	r2, [r3, #8]
}
   188b2:	bc10      	pop	{r4}
   188b4:	4770      	bx	lr
   188b6:	bf00      	nop
   188b8:	20000388 	.word	0x20000388

000188bc <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   188bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   188be:	460d      	mov	r5, r1
   188c0:	af00      	add	r7, sp, #0
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   188c2:	4604      	mov	r4, r0
   188c4:	b920      	cbnz	r0, 188d0 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   188c6:	b34d      	cbz	r5, 1891c <bt_id_create+0x60>
			return -EINVAL;
   188c8:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   188cc:	46bd      	mov	sp, r7
   188ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   188d0:	4922      	ldr	r1, [pc, #136]	; (1895c <bt_id_create+0xa0>)
   188d2:	f013 fc12 	bl	2c0fa <bt_addr_le_eq>
   188d6:	2800      	cmp	r0, #0
   188d8:	d1f5      	bne.n	188c6 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   188da:	7823      	ldrb	r3, [r4, #0]
   188dc:	2b01      	cmp	r3, #1
   188de:	d104      	bne.n	188ea <bt_id_create+0x2e>
   188e0:	79a3      	ldrb	r3, [r4, #6]
   188e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   188e6:	2bc0      	cmp	r3, #192	; 0xc0
   188e8:	d010      	beq.n	1890c <bt_id_create+0x50>
			LOG_ERR("Only static random identity address supported");
   188ea:	466c      	mov	r4, sp
   188ec:	b088      	sub	sp, #32
   188ee:	466a      	mov	r2, sp
   188f0:	4b1b      	ldr	r3, [pc, #108]	; (18960 <bt_id_create+0xa4>)
   188f2:	6153      	str	r3, [r2, #20]
   188f4:	4b1b      	ldr	r3, [pc, #108]	; (18964 <bt_id_create+0xa8>)
   188f6:	6193      	str	r3, [r2, #24]
   188f8:	2303      	movs	r3, #3
   188fa:	f842 3f10 	str.w	r3, [r2, #16]!
   188fe:	481a      	ldr	r0, [pc, #104]	; (18968 <bt_id_create+0xac>)
   18900:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18904:	f013 fc3e 	bl	2c184 <z_log_msg_static_create.constprop.0>
   18908:	46a5      	mov	sp, r4
			return -EINVAL;
   1890a:	e7dd      	b.n	188c8 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   1890c:	4620      	mov	r0, r4
   1890e:	f7ff fd6f 	bl	183f0 <id_find>
   18912:	2800      	cmp	r0, #0
   18914:	dbd7      	blt.n	188c6 <bt_id_create+0xa>
			return -EALREADY;
   18916:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1891a:	e7d7      	b.n	188cc <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1891c:	4d13      	ldr	r5, [pc, #76]	; (1896c <bt_id_create+0xb0>)
   1891e:	79eb      	ldrb	r3, [r5, #7]
   18920:	2b01      	cmp	r3, #1
   18922:	d018      	beq.n	18956 <bt_id_create+0x9a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18924:	f7ff fd7c 	bl	18420 <atomic_get.constprop.0>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   18928:	07c3      	lsls	r3, r0, #31
   1892a:	d50b      	bpl.n	18944 <bt_id_create+0x88>
	new_id = bt_dev.id_count;
   1892c:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   1892e:	4621      	mov	r1, r4
   18930:	4630      	mov	r0, r6
   18932:	f7ff fd7f 	bl	18434 <id_create.constprop.0>
	if (err) {
   18936:	2800      	cmp	r0, #0
   18938:	d1c8      	bne.n	188cc <bt_id_create+0x10>
		bt_dev.id_count++;
   1893a:	79eb      	ldrb	r3, [r5, #7]
   1893c:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   1893e:	4630      	mov	r0, r6
		bt_dev.id_count++;
   18940:	71eb      	strb	r3, [r5, #7]
	return new_id;
   18942:	e7c3      	b.n	188cc <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   18944:	2c00      	cmp	r4, #0
   18946:	d0bf      	beq.n	188c8 <bt_id_create+0xc>
   18948:	4904      	ldr	r1, [pc, #16]	; (1895c <bt_id_create+0xa0>)
   1894a:	4620      	mov	r0, r4
   1894c:	f013 fbd5 	bl	2c0fa <bt_addr_le_eq>
   18950:	2800      	cmp	r0, #0
   18952:	d0eb      	beq.n	1892c <bt_id_create+0x70>
   18954:	e7b8      	b.n	188c8 <bt_id_create+0xc>
		return -ENOMEM;
   18956:	f06f 000b 	mvn.w	r0, #11
   1895a:	e7b7      	b.n	188cc <bt_id_create+0x10>
   1895c:	00031d70 	.word	0x00031d70
   18960:	00032c74 	.word	0x00032c74
   18964:	00032d91 	.word	0x00032d91
   18968:	0002fc24 	.word	0x0002fc24
   1896c:	20000388 	.word	0x20000388

00018970 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   18970:	b5f0      	push	{r4, r5, r6, r7, lr}
   18972:	b083      	sub	sp, #12
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   18974:	4604      	mov	r4, r0
{
   18976:	af00      	add	r7, sp, #0
	CHECKIF(addr == NULL) {
   18978:	b998      	cbnz	r0, 189a2 <bt_id_read_public_addr+0x32>
		LOG_WRN("Invalid input parameters");
   1897a:	466c      	mov	r4, sp
   1897c:	b088      	sub	sp, #32
   1897e:	466a      	mov	r2, sp
   18980:	4b1e      	ldr	r3, [pc, #120]	; (189fc <bt_id_read_public_addr+0x8c>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   18982:	6153      	str	r3, [r2, #20]
   18984:	4b1e      	ldr	r3, [pc, #120]	; (18a00 <bt_id_read_public_addr+0x90>)
   18986:	6193      	str	r3, [r2, #24]
   18988:	2303      	movs	r3, #3
   1898a:	f842 3f10 	str.w	r3, [r2, #16]!
   1898e:	481d      	ldr	r0, [pc, #116]	; (18a04 <bt_id_read_public_addr+0x94>)
   18990:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18994:	f013 fbf6 	bl	2c184 <z_log_msg_static_create.constprop.0>
   18998:	46a5      	mov	sp, r4
		return 0U;
   1899a:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1899c:	370c      	adds	r7, #12
   1899e:	46bd      	mov	sp, r7
   189a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   189a2:	1d3a      	adds	r2, r7, #4
   189a4:	2100      	movs	r1, #0
   189a6:	f241 0009 	movw	r0, #4105	; 0x1009
   189aa:	f7fe ff07 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   189ae:	4606      	mov	r6, r0
   189b0:	b120      	cbz	r0, 189bc <bt_id_read_public_addr+0x4c>
		LOG_WRN("Failed to read public address");
   189b2:	466c      	mov	r4, sp
   189b4:	b088      	sub	sp, #32
   189b6:	466a      	mov	r2, sp
   189b8:	4b13      	ldr	r3, [pc, #76]	; (18a08 <bt_id_read_public_addr+0x98>)
   189ba:	e7e2      	b.n	18982 <bt_id_read_public_addr+0x12>
	rp = (void *)rsp->data;
   189bc:	687b      	ldr	r3, [r7, #4]
	return memcmp(a, b, sizeof(*a));
   189be:	4913      	ldr	r1, [pc, #76]	; (18a0c <bt_id_read_public_addr+0x9c>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   189c0:	68dd      	ldr	r5, [r3, #12]
   189c2:	3501      	adds	r5, #1
   189c4:	2206      	movs	r2, #6
   189c6:	4628      	mov	r0, r5
   189c8:	f013 f943 	bl	2bc52 <memcmp>
   189cc:	b918      	cbnz	r0, 189d6 <bt_id_read_public_addr+0x66>
		net_buf_unref(rsp);
   189ce:	6878      	ldr	r0, [r7, #4]
   189d0:	f008 f826 	bl	20a20 <net_buf_unref>
		return 0U;
   189d4:	e7e1      	b.n	1899a <bt_id_read_public_addr+0x2a>
   189d6:	490e      	ldr	r1, [pc, #56]	; (18a10 <bt_id_read_public_addr+0xa0>)
   189d8:	2206      	movs	r2, #6
   189da:	4628      	mov	r0, r5
   189dc:	f013 f939 	bl	2bc52 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   189e0:	2800      	cmp	r0, #0
   189e2:	d0f4      	beq.n	189ce <bt_id_read_public_addr+0x5e>
	memcpy(dst, src, sizeof(*dst));
   189e4:	2206      	movs	r2, #6
   189e6:	4629      	mov	r1, r5
   189e8:	1c60      	adds	r0, r4, #1
   189ea:	f013 f959 	bl	2bca0 <memcpy>
	net_buf_unref(rsp);
   189ee:	6878      	ldr	r0, [r7, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   189f0:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   189f2:	f008 f815 	bl	20a20 <net_buf_unref>
	return 1U;
   189f6:	2001      	movs	r0, #1
   189f8:	e7d0      	b.n	1899c <bt_id_read_public_addr+0x2c>
   189fa:	bf00      	nop
   189fc:	00032ca6 	.word	0x00032ca6
   18a00:	00032d7a 	.word	0x00032d7a
   18a04:	0002fc24 	.word	0x0002fc24
   18a08:	00032cc3 	.word	0x00032cc3
   18a0c:	00031d7d 	.word	0x00031d7d
   18a10:	00031d77 	.word	0x00031d77

00018a14 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   18a14:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   18a16:	4668      	mov	r0, sp
   18a18:	f7ff ffaa 	bl	18970 <bt_id_read_public_addr>
   18a1c:	4b04      	ldr	r3, [pc, #16]	; (18a30 <bt_setup_public_id_addr+0x1c>)
   18a1e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   18a20:	b118      	cbz	r0, 18a2a <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   18a22:	4669      	mov	r1, sp
   18a24:	2000      	movs	r0, #0
   18a26:	f7ff fd05 	bl	18434 <id_create.constprop.0>
}
   18a2a:	b003      	add	sp, #12
   18a2c:	f85d fb04 	ldr.w	pc, [sp], #4
   18a30:	20000388 	.word	0x20000388

00018a34 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   18a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18a38:	4b2a      	ldr	r3, [pc, #168]	; (18ae4 <bt_read_static_addr+0xb0>)
{
   18a3a:	b083      	sub	sp, #12
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18a3c:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   18a40:	07db      	lsls	r3, r3, #31
{
   18a42:	af00      	add	r7, sp, #0
   18a44:	4680      	mov	r8, r0
   18a46:	4689      	mov	r9, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18a48:	d415      	bmi.n	18a76 <bt_read_static_addr+0x42>
		LOG_WRN("Read Static Addresses command not available");
   18a4a:	466c      	mov	r4, sp
   18a4c:	b088      	sub	sp, #32
   18a4e:	466a      	mov	r2, sp
   18a50:	4b25      	ldr	r3, [pc, #148]	; (18ae8 <bt_read_static_addr+0xb4>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   18a52:	6153      	str	r3, [r2, #20]
   18a54:	4b25      	ldr	r3, [pc, #148]	; (18aec <bt_read_static_addr+0xb8>)
   18a56:	6193      	str	r3, [r2, #24]
   18a58:	2303      	movs	r3, #3
   18a5a:	f842 3f10 	str.w	r3, [r2, #16]!
   18a5e:	4824      	ldr	r0, [pc, #144]	; (18af0 <bt_read_static_addr+0xbc>)
   18a60:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18a64:	f013 fb8e 	bl	2c184 <z_log_msg_static_create.constprop.0>
		return 0;
   18a68:	2500      	movs	r5, #0
   18a6a:	46a5      	mov	sp, r4
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   18a6c:	4628      	mov	r0, r5
   18a6e:	370c      	adds	r7, #12
   18a70:	46bd      	mov	sp, r7
   18a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   18a76:	1d3a      	adds	r2, r7, #4
   18a78:	2100      	movs	r1, #0
   18a7a:	f64f 4009 	movw	r0, #64521	; 0xfc09
   18a7e:	f7fe fe9d 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   18a82:	4604      	mov	r4, r0
   18a84:	b120      	cbz	r0, 18a90 <bt_read_static_addr+0x5c>
		LOG_WRN("Failed to read static addresses");
   18a86:	466c      	mov	r4, sp
   18a88:	b088      	sub	sp, #32
   18a8a:	466a      	mov	r2, sp
   18a8c:	4b19      	ldr	r3, [pc, #100]	; (18af4 <bt_read_static_addr+0xc0>)
   18a8e:	e7e0      	b.n	18a52 <bt_read_static_addr+0x1e>
	rp = (void *)rsp->data;
   18a90:	687b      	ldr	r3, [r7, #4]
   18a92:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   18a94:	7875      	ldrb	r5, [r6, #1]
   18a96:	454d      	cmp	r5, r9
   18a98:	bf28      	it	cs
   18a9a:	464d      	movcs	r5, r9
	for (i = 0; i < cnt; i++) {
   18a9c:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   18a9e:	f04f 0916 	mov.w	r9, #22
	for (i = 0; i < cnt; i++) {
   18aa2:	42a5      	cmp	r5, r4
   18aa4:	dc15      	bgt.n	18ad2 <bt_read_static_addr+0x9e>
	net_buf_unref(rsp);
   18aa6:	6878      	ldr	r0, [r7, #4]
   18aa8:	f007 ffba 	bl	20a20 <net_buf_unref>
	if (!cnt) {
   18aac:	2d00      	cmp	r5, #0
   18aae:	d1dd      	bne.n	18a6c <bt_read_static_addr+0x38>
		LOG_WRN("No static addresses stored in controller");
   18ab0:	466c      	mov	r4, sp
   18ab2:	b088      	sub	sp, #32
   18ab4:	466a      	mov	r2, sp
   18ab6:	4b10      	ldr	r3, [pc, #64]	; (18af8 <bt_read_static_addr+0xc4>)
   18ab8:	6153      	str	r3, [r2, #20]
   18aba:	4b0c      	ldr	r3, [pc, #48]	; (18aec <bt_read_static_addr+0xb8>)
   18abc:	6193      	str	r3, [r2, #24]
   18abe:	2303      	movs	r3, #3
   18ac0:	f842 3f10 	str.w	r3, [r2, #16]!
   18ac4:	480a      	ldr	r0, [pc, #40]	; (18af0 <bt_read_static_addr+0xbc>)
   18ac6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18aca:	f013 fb5b 	bl	2c184 <z_log_msg_static_create.constprop.0>
   18ace:	46a5      	mov	sp, r4
   18ad0:	e7cc      	b.n	18a6c <bt_read_static_addr+0x38>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   18ad2:	4631      	mov	r1, r6
   18ad4:	fb09 8004 	mla	r0, r9, r4, r8
   18ad8:	2216      	movs	r2, #22
   18ada:	f013 f8e1 	bl	2bca0 <memcpy>
	for (i = 0; i < cnt; i++) {
   18ade:	3401      	adds	r4, #1
   18ae0:	3616      	adds	r6, #22
   18ae2:	e7de      	b.n	18aa2 <bt_read_static_addr+0x6e>
   18ae4:	20000388 	.word	0x20000388
   18ae8:	00032ce5 	.word	0x00032ce5
   18aec:	00032d66 	.word	0x00032d66
   18af0:	0002fc24 	.word	0x0002fc24
   18af4:	00032d15 	.word	0x00032d15
   18af8:	00032d39 	.word	0x00032d39

00018afc <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   18afc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   18afe:	4e15      	ldr	r6, [pc, #84]	; (18b54 <bt_setup_random_id_addr+0x58>)
   18b00:	79f4      	ldrb	r4, [r6, #7]
{
   18b02:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   18b04:	b92c      	cbnz	r4, 18b12 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   18b06:	2101      	movs	r1, #1
   18b08:	a802      	add	r0, sp, #8
   18b0a:	f7ff ff93 	bl	18a34 <bt_read_static_addr>
   18b0e:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   18b10:	b9c8      	cbnz	r0, 18b46 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   18b12:	2100      	movs	r1, #0
   18b14:	4608      	mov	r0, r1
}
   18b16:	b009      	add	sp, #36	; 0x24
   18b18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   18b1c:	f7ff bece 	b.w	188bc <bt_id_create>
   18b20:	ab02      	add	r3, sp, #8
   18b22:	fb07 3105 	mla	r1, r7, r5, r3
   18b26:	2206      	movs	r2, #6
   18b28:	f10d 0001 	add.w	r0, sp, #1
   18b2c:	f013 f8b8 	bl	2bca0 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   18b30:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   18b32:	4669      	mov	r1, sp
   18b34:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   18b36:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   18b3a:	f7ff fc7b 	bl	18434 <id_create.constprop.0>
				if (err) {
   18b3e:	3401      	adds	r4, #1
   18b40:	b110      	cbz	r0, 18b48 <bt_setup_random_id_addr+0x4c>
}
   18b42:	b009      	add	sp, #36	; 0x24
   18b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   18b46:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   18b48:	79f3      	ldrb	r3, [r6, #7]
   18b4a:	b2e5      	uxtb	r5, r4
   18b4c:	42ab      	cmp	r3, r5
   18b4e:	d8e7      	bhi.n	18b20 <bt_setup_random_id_addr+0x24>
			return 0;
   18b50:	2000      	movs	r0, #0
   18b52:	e7f6      	b.n	18b42 <bt_setup_random_id_addr+0x46>
   18b54:	20000388 	.word	0x20000388

00018b58 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   18b58:	b538      	push	{r3, r4, r5, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
   18b5a:	460c      	mov	r4, r1
   18b5c:	b169      	cbz	r1, 18b7a <bt_id_set_create_conn_own_addr+0x22>

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   18b5e:	4d08      	ldr	r5, [pc, #32]	; (18b80 <bt_id_set_create_conn_own_addr+0x28>)
   18b60:	782b      	ldrb	r3, [r5, #0]
   18b62:	2b01      	cmp	r3, #1
   18b64:	d003      	beq.n	18b6e <bt_id_set_create_conn_own_addr+0x16>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   18b66:	782b      	ldrb	r3, [r5, #0]
   18b68:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   18b6a:	2000      	movs	r0, #0
}
   18b6c:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   18b6e:	1c68      	adds	r0, r5, #1
   18b70:	f7ff fd7a 	bl	18668 <set_random_address>
			if (err) {
   18b74:	2800      	cmp	r0, #0
   18b76:	d0f6      	beq.n	18b66 <bt_id_set_create_conn_own_addr+0xe>
   18b78:	e7f8      	b.n	18b6c <bt_id_set_create_conn_own_addr+0x14>
		return -EINVAL;
   18b7a:	f06f 0015 	mvn.w	r0, #21
   18b7e:	e7f5      	b.n	18b6c <bt_id_set_create_conn_own_addr+0x14>
   18b80:	20000388 	.word	0x20000388

00018b84 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   18b84:	b510      	push	{r4, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
   18b86:	460c      	mov	r4, r1
   18b88:	b149      	cbz	r1, 18b9e <bt_id_set_scan_own_addr+0x1a>
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   18b8a:	4b06      	ldr	r3, [pc, #24]	; (18ba4 <bt_id_set_scan_own_addr+0x20>)
   18b8c:	781b      	ldrb	r3, [r3, #0]
   18b8e:	700b      	strb	r3, [r1, #0]
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   18b90:	2000      	movs	r0, #0
   18b92:	f013 fb4b 	bl	2c22c <bt_id_set_private_addr>
			if (err) {
   18b96:	b908      	cbnz	r0, 18b9c <bt_id_set_scan_own_addr+0x18>

				LOG_WRN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   18b98:	2301      	movs	r3, #1
   18b9a:	7023      	strb	r3, [r4, #0]
			LOG_DBG("Not changing the address");
		}
	}

	return 0;
}
   18b9c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   18b9e:	f06f 0015 	mvn.w	r0, #21
   18ba2:	e7fb      	b.n	18b9c <bt_id_set_scan_own_addr+0x18>
   18ba4:	20000388 	.word	0x20000388

00018ba8 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18ba8:	4b03      	ldr	r3, [pc, #12]	; (18bb8 <atomic_get.constprop.0+0x10>)
   18baa:	f3bf 8f5b 	dmb	ish
   18bae:	6818      	ldr	r0, [r3, #0]
   18bb0:	f3bf 8f5b 	dmb	ish
}
   18bb4:	4770      	bx	lr
   18bb6:	bf00      	nop
   18bb8:	2000045c 	.word	0x2000045c

00018bbc <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   18bbc:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   18bbe:	2102      	movs	r1, #2
{
   18bc0:	b087      	sub	sp, #28
   18bc2:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   18bc4:	f242 000c 	movw	r0, #8204	; 0x200c
   18bc8:	f7fe fc9c 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   18bcc:	4605      	mov	r5, r0
   18bce:	b300      	cbz	r0, 18c12 <bt_le_scan_set_enable_legacy+0x56>
   18bd0:	2102      	movs	r1, #2
   18bd2:	300c      	adds	r0, #12
   18bd4:	f015 fc2d 	bl	2e432 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   18bd8:	2c01      	cmp	r4, #1
   18bda:	4602      	mov	r2, r0
   18bdc:	d117      	bne.n	18c0e <bt_le_scan_set_enable_legacy+0x52>
   18bde:	f7ff ffe3 	bl	18ba8 <atomic_get.constprop.0>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   18be2:	f3c0 2040 	ubfx	r0, r0, #9, #1
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   18be6:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   18be8:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   18bea:	425c      	negs	r4, r3
   18bec:	415c      	adcs	r4, r3
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   18bee:	7050      	strb	r0, [r2, #1]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   18bf0:	a903      	add	r1, sp, #12
   18bf2:	4a09      	ldr	r2, [pc, #36]	; (18c18 <bt_le_scan_set_enable_legacy+0x5c>)
   18bf4:	9400      	str	r4, [sp, #0]
   18bf6:	4628      	mov	r0, r5
   18bf8:	2306      	movs	r3, #6
   18bfa:	f7fe fc71 	bl	174e0 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   18bfe:	2200      	movs	r2, #0
   18c00:	4629      	mov	r1, r5
   18c02:	f242 000c 	movw	r0, #8204	; 0x200c
   18c06:	f7fe fdd9 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   18c0a:	b007      	add	sp, #28
   18c0c:	bd30      	pop	{r4, r5, pc}
   18c0e:	2000      	movs	r0, #0
   18c10:	e7e9      	b.n	18be6 <bt_le_scan_set_enable_legacy+0x2a>
		return -ENOBUFS;
   18c12:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18c16:	e7f8      	b.n	18c0a <bt_le_scan_set_enable_legacy+0x4e>
   18c18:	2000045c 	.word	0x2000045c

00018c1c <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   18c1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18c1e:	4605      	mov	r5, r0
   18c20:	4614      	mov	r4, r2
   18c22:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   18c24:	2207      	movs	r2, #7
   18c26:	2100      	movs	r1, #0
   18c28:	4668      	mov	r0, sp
   18c2a:	f013 f844 	bl	2bcb6 <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   18c2e:	2300      	movs	r3, #0
   18c30:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   18c34:	1e6b      	subs	r3, r5, #1
   18c36:	4258      	negs	r0, r3
   18c38:	f10d 0105 	add.w	r1, sp, #5
   18c3c:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
   18c3e:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
   18c42:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   18c46:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   18c4a:	f7ff ff9b 	bl	18b84 <bt_id_set_scan_own_addr>
	if (err) {
   18c4e:	4604      	mov	r4, r0
   18c50:	bb38      	cbnz	r0, 18ca2 <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   18c52:	2107      	movs	r1, #7
   18c54:	f242 000b 	movw	r0, #8203	; 0x200b
   18c58:	f7fe fc54 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   18c5c:	4606      	mov	r6, r0
   18c5e:	b348      	cbz	r0, 18cb4 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18c60:	2207      	movs	r2, #7
   18c62:	4669      	mov	r1, sp
   18c64:	300c      	adds	r0, #12
   18c66:	f015 fbea 	bl	2e43e <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   18c6a:	4622      	mov	r2, r4
   18c6c:	4631      	mov	r1, r6
   18c6e:	f242 000b 	movw	r0, #8203	; 0x200b
   18c72:	f7fe fda3 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   18c76:	4604      	mov	r4, r0
   18c78:	b998      	cbnz	r0, 18ca2 <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
   18c7a:	2001      	movs	r0, #1
   18c7c:	f7ff ff9e 	bl	18bbc <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   18c80:	4604      	mov	r4, r0
   18c82:	b970      	cbnz	r0, 18ca2 <start_le_scan_legacy+0x86>
	if (val) {
   18c84:	2d01      	cmp	r5, #1
   18c86:	d10f      	bne.n	18ca8 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18c88:	f3bf 8f5b 	dmb	ish
   18c8c:	4b0b      	ldr	r3, [pc, #44]	; (18cbc <start_le_scan_legacy+0xa0>)
   18c8e:	e853 1f00 	ldrex	r1, [r3]
   18c92:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   18c96:	e843 1200 	strex	r2, r1, [r3]
   18c9a:	2a00      	cmp	r2, #0
   18c9c:	d1f7      	bne.n	18c8e <start_le_scan_legacy+0x72>
   18c9e:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   18ca2:	4620      	mov	r0, r4
   18ca4:	b002      	add	sp, #8
   18ca6:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18ca8:	f46f 7180 	mvn.w	r1, #256	; 0x100
   18cac:	4803      	ldr	r0, [pc, #12]	; (18cbc <start_le_scan_legacy+0xa0>)
   18cae:	f013 fae7 	bl	2c280 <atomic_and>
   18cb2:	e7f6      	b.n	18ca2 <start_le_scan_legacy+0x86>
		return -ENOBUFS;
   18cb4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18cb8:	e7f3      	b.n	18ca2 <start_le_scan_legacy+0x86>
   18cba:	bf00      	nop
   18cbc:	2000045c 	.word	0x2000045c

00018cc0 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   18cc0:	4b01      	ldr	r3, [pc, #4]	; (18cc8 <bt_scan_reset+0x8>)
   18cc2:	2200      	movs	r2, #0
   18cc4:	601a      	str	r2, [r3, #0]
}
   18cc6:	4770      	bx	lr
   18cc8:	200033b0 	.word	0x200033b0

00018ccc <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   18ccc:	b538      	push	{r3, r4, r5, lr}
   18cce:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18cd0:	f7ff ff6a 	bl	18ba8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   18cd4:	0601      	lsls	r1, r0, #24
   18cd6:	f3c0 12c0 	ubfx	r2, r0, #7, #1
   18cda:	d433      	bmi.n	18d44 <bt_le_scan_update+0x78>
   18cdc:	f7ff ff64 	bl	18ba8 <atomic_get.constprop.0>
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   18ce0:	0643      	lsls	r3, r0, #25
   18ce2:	d427      	bmi.n	18d34 <bt_le_scan_update+0x68>

	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		struct bt_conn *conn;

		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   18ce4:	2100      	movs	r1, #0
   18ce6:	2206      	movs	r2, #6
   18ce8:	4608      	mov	r0, r1
   18cea:	f001 f905 	bl	19ef8 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING);
		if (conn) {
   18cee:	4604      	mov	r4, r0
   18cf0:	bb30      	cbnz	r0, 18d40 <bt_le_scan_update+0x74>
			bt_conn_unref(conn);
			return 0;
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   18cf2:	2202      	movs	r2, #2
   18cf4:	4601      	mov	r1, r0
   18cf6:	f001 f8ff 	bl	19ef8 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_SCAN);
		if (conn) {
   18cfa:	b318      	cbz	r0, 18d44 <bt_le_scan_update+0x78>
   18cfc:	f3bf 8f5b 	dmb	ish
   18d00:	4b11      	ldr	r3, [pc, #68]	; (18d48 <bt_le_scan_update+0x7c>)
   18d02:	e853 1f00 	ldrex	r1, [r3]
   18d06:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   18d0a:	e843 1200 	strex	r2, r1, [r3]
   18d0e:	2a00      	cmp	r2, #0
   18d10:	d1f7      	bne.n	18d02 <bt_le_scan_update+0x36>
   18d12:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   18d16:	f013 fb6d 	bl	2c3f4 <bt_conn_unref>
		window = BT_GAP_SCAN_FAST_WINDOW;
   18d1a:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   18d1c:	4620      	mov	r0, r4
   18d1e:	bf08      	it	eq
   18d20:	2212      	moveq	r2, #18
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   18d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   18d26:	bf16      	itet	ne
   18d28:	2230      	movne	r2, #48	; 0x30
   18d2a:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   18d2e:	2160      	movne	r1, #96	; 0x60
   18d30:	f7ff bf74 	b.w	18c1c <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   18d34:	4610      	mov	r0, r2
   18d36:	f7ff ff41 	bl	18bbc <bt_le_scan_set_enable_legacy>
		if (err) {
   18d3a:	2800      	cmp	r0, #0
   18d3c:	d0d2      	beq.n	18ce4 <bt_le_scan_update+0x18>
}
   18d3e:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   18d40:	f013 fb58 	bl	2c3f4 <bt_conn_unref>
		return 0;
   18d44:	2000      	movs	r0, #0
   18d46:	e7fa      	b.n	18d3e <bt_le_scan_update+0x72>
   18d48:	2000045c 	.word	0x2000045c

00018d4c <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   18d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   18d50:	f100 080c 	add.w	r8, r0, #12
   18d54:	b08b      	sub	sp, #44	; 0x2c
   18d56:	4604      	mov	r4, r0
   18d58:	af00      	add	r7, sp, #0
   18d5a:	4640      	mov	r0, r8
   18d5c:	f015 fba2 	bl	2e4a4 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   18d60:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 18f40 <bt_hci_le_adv_report+0x1f4>
   18d64:	60f8      	str	r0, [r7, #12]
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	LOG_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   18d66:	68fb      	ldr	r3, [r7, #12]
   18d68:	b19b      	cbz	r3, 18d92 <bt_hci_le_adv_report+0x46>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   18d6a:	8a23      	ldrh	r3, [r4, #16]
   18d6c:	2b08      	cmp	r3, #8
   18d6e:	d814      	bhi.n	18d9a <bt_hci_le_adv_report+0x4e>
		}

		evt = net_buf_pull_mem(buf, sizeof(*evt));

		if (buf->len < evt->length + sizeof(adv_info.rssi)) {
			LOG_ERR("Unexpected end of buffer");
   18d70:	466c      	mov	r4, sp
   18d72:	b088      	sub	sp, #32
   18d74:	466a      	mov	r2, sp
   18d76:	4b73      	ldr	r3, [pc, #460]	; (18f44 <bt_hci_le_adv_report+0x1f8>)
   18d78:	6153      	str	r3, [r2, #20]
   18d7a:	4b73      	ldr	r3, [pc, #460]	; (18f48 <bt_hci_le_adv_report+0x1fc>)
   18d7c:	6193      	str	r3, [r2, #24]
   18d7e:	2303      	movs	r3, #3
   18d80:	f842 3f10 	str.w	r3, [r2, #16]!
   18d84:	4871      	ldr	r0, [pc, #452]	; (18f4c <bt_hci_le_adv_report+0x200>)
   18d86:	2300      	movs	r3, #0
   18d88:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18d8c:	f7fb f950 	bl	14030 <z_impl_z_log_msg_static_create>
   18d90:	46a5      	mov	sp, r4

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   18d92:	372c      	adds	r7, #44	; 0x2c
   18d94:	46bd      	mov	sp, r7
   18d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   18d9a:	2109      	movs	r1, #9
   18d9c:	4640      	mov	r0, r8
   18d9e:	f015 fb79 	bl	2e494 <net_buf_simple_pull_mem>
		if (buf->len < evt->length + sizeof(adv_info.rssi)) {
   18da2:	7a03      	ldrb	r3, [r0, #8]
   18da4:	8a22      	ldrh	r2, [r4, #16]
   18da6:	3301      	adds	r3, #1
   18da8:	429a      	cmp	r2, r3
   18daa:	4605      	mov	r5, r0
   18dac:	d3e0      	bcc.n	18d70 <bt_hci_le_adv_report+0x24>
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   18dae:	2301      	movs	r3, #1
   18db0:	84bb      	strh	r3, [r7, #36]	; 0x24
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   18db2:	237f      	movs	r3, #127	; 0x7f
   18db4:	77bb      	strb	r3, [r7, #30]
		adv_info.rssi = evt->data[evt->length];
   18db6:	7a03      	ldrb	r3, [r0, #8]
   18db8:	4403      	add	r3, r0
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   18dba:	f100 0901 	add.w	r9, r0, #1
		adv_info.rssi = evt->data[evt->length];
   18dbe:	7a5b      	ldrb	r3, [r3, #9]
   18dc0:	777b      	strb	r3, [r7, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
   18dc2:	23ff      	movs	r3, #255	; 0xff
   18dc4:	773b      	strb	r3, [r7, #28]
		adv_info.interval = 0U;
   18dc6:	2300      	movs	r3, #0
   18dc8:	847b      	strh	r3, [r7, #34]	; 0x22
		adv_info.adv_type = evt->evt_type;
   18dca:	7802      	ldrb	r2, [r0, #0]
   18dcc:	77fa      	strb	r2, [r7, #31]
	switch (evt_type) {
   18dce:	2a04      	cmp	r2, #4
   18dd0:	bf9c      	itt	ls
   18dd2:	4b5f      	ldrls	r3, [pc, #380]	; (18f50 <bt_hci_le_adv_report+0x204>)
   18dd4:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   18dd6:	843b      	strh	r3, [r7, #32]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   18dd8:	7a03      	ldrb	r3, [r0, #8]
   18dda:	60bb      	str	r3, [r7, #8]
   18ddc:	f7ff fee4 	bl	18ba8 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18de0:	0606      	lsls	r6, r0, #24
   18de2:	d50c      	bpl.n	18dfe <bt_hci_le_adv_report+0xb2>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   18de4:	8c3b      	ldrh	r3, [r7, #32]
   18de6:	0758      	lsls	r0, r3, #29
   18de8:	d509      	bpl.n	18dfe <bt_hci_le_adv_report+0xb2>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   18dea:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
   18dec:	4640      	mov	r0, r8
   18dee:	3101      	adds	r1, #1
   18df0:	f015 fb48 	bl	2e484 <net_buf_simple_pull>
   18df4:	68fb      	ldr	r3, [r7, #12]
   18df6:	3b01      	subs	r3, #1
   18df8:	b2db      	uxtb	r3, r3
   18dfa:	60fb      	str	r3, [r7, #12]
   18dfc:	e7b3      	b.n	18d66 <bt_hci_le_adv_report+0x1a>
	if (bt_addr_le_is_resolved(addr)) {
   18dfe:	4648      	mov	r0, r9
   18e00:	f013 f86e 	bl	2bee0 <bt_addr_le_is_resolved>
   18e04:	2800      	cmp	r0, #0
   18e06:	d04b      	beq.n	18ea0 <bt_hci_le_adv_report+0x154>
		bt_addr_le_copy_resolved(&id_addr, addr);
   18e08:	4649      	mov	r1, r9
   18e0a:	f107 0010 	add.w	r0, r7, #16
   18e0e:	f013 f85d 	bl	2becc <bt_addr_le_copy_resolved>
	if (scan_dev_found_cb) {
   18e12:	f8da 3000 	ldr.w	r3, [sl]
   18e16:	b1a3      	cbz	r3, 18e42 <bt_hci_le_adv_report+0xf6>
	state->offset = net_buf_simple_headroom(buf);
   18e18:	4640      	mov	r0, r8
   18e1a:	f015 fb53 	bl	2e4c4 <net_buf_simple_headroom>
		buf->len = len;
   18e1e:	68bb      	ldr	r3, [r7, #8]
	state->len = buf->len;
   18e20:	8a26      	ldrh	r6, [r4, #16]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   18e22:	7ffa      	ldrb	r2, [r7, #31]
		buf->len = len;
   18e24:	8223      	strh	r3, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   18e26:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   18e28:	4643      	mov	r3, r8
   18e2a:	f997 101d 	ldrsb.w	r1, [r7, #29]
   18e2e:	f8da c000 	ldr.w	ip, [sl]
   18e32:	f107 0010 	add.w	r0, r7, #16
   18e36:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
   18e38:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   18e3a:	8226      	strh	r6, [r4, #16]
	buf->data = buf->__buf + state->offset;
   18e3c:	fa13 f38b 	uxtah	r3, r3, fp
   18e40:	60e3      	str	r3, [r4, #12]
	info->addr = &id_addr;
   18e42:	f107 0310 	add.w	r3, r7, #16
   18e46:	61bb      	str	r3, [r7, #24]
	return list->head;
   18e48:	4b42      	ldr	r3, [pc, #264]	; (18f54 <bt_hci_le_adv_report+0x208>)
   18e4a:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   18e4c:	2b00      	cmp	r3, #0
   18e4e:	d039      	beq.n	18ec4 <bt_hci_le_adv_report+0x178>
	return node->next;
   18e50:	681a      	ldr	r2, [r3, #0]
   18e52:	b102      	cbz	r2, 18e56 <bt_hci_le_adv_report+0x10a>
   18e54:	3a08      	subs	r2, #8
		if (listener->recv) {
   18e56:	f853 1c08 	ldr.w	r1, [r3, #-8]
   18e5a:	b1c1      	cbz	r1, 18e8e <bt_hci_le_adv_report+0x142>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   18e5c:	4616      	mov	r6, r2
   18e5e:	f1a3 0208 	sub.w	r2, r3, #8
	state->offset = net_buf_simple_headroom(buf);
   18e62:	4640      	mov	r0, r8
   18e64:	603a      	str	r2, [r7, #0]
   18e66:	f015 fb2d 	bl	2e4c4 <net_buf_simple_headroom>
	state->len = buf->len;
   18e6a:	8a23      	ldrh	r3, [r4, #16]
			listener->recv(info, buf);
   18e6c:	683a      	ldr	r2, [r7, #0]
   18e6e:	607b      	str	r3, [r7, #4]
			buf->len = len;
   18e70:	68bb      	ldr	r3, [r7, #8]
   18e72:	8223      	strh	r3, [r4, #16]
			listener->recv(info, buf);
   18e74:	6812      	ldr	r2, [r2, #0]
	state->offset = net_buf_simple_headroom(buf);
   18e76:	4683      	mov	fp, r0
   18e78:	4641      	mov	r1, r8
   18e7a:	f107 0018 	add.w	r0, r7, #24
   18e7e:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   18e80:	6962      	ldr	r2, [r4, #20]
	buf->len = state->len;
   18e82:	687b      	ldr	r3, [r7, #4]
   18e84:	8223      	strh	r3, [r4, #16]
	buf->data = buf->__buf + state->offset;
   18e86:	fa12 f28b 	uxtah	r2, r2, fp
   18e8a:	60e2      	str	r2, [r4, #12]
}
   18e8c:	4632      	mov	r2, r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   18e8e:	b1ca      	cbz	r2, 18ec4 <bt_hci_le_adv_report+0x178>
   18e90:	6896      	ldr	r6, [r2, #8]
   18e92:	6813      	ldr	r3, [r2, #0]
   18e94:	b1a6      	cbz	r6, 18ec0 <bt_hci_le_adv_report+0x174>
   18e96:	3e08      	subs	r6, #8
		if (listener->recv) {
   18e98:	2b00      	cmp	r3, #0
   18e9a:	d1e2      	bne.n	18e62 <bt_hci_le_adv_report+0x116>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   18e9c:	4632      	mov	r2, r6
   18e9e:	e7f7      	b.n	18e90 <bt_hci_le_adv_report+0x144>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   18ea0:	786b      	ldrb	r3, [r5, #1]
   18ea2:	2bff      	cmp	r3, #255	; 0xff
   18ea4:	d106      	bne.n	18eb4 <bt_hci_le_adv_report+0x168>
	memcpy(dst, src, sizeof(*dst));
   18ea6:	492c      	ldr	r1, [pc, #176]	; (18f58 <bt_hci_le_adv_report+0x20c>)
   18ea8:	2207      	movs	r2, #7
   18eaa:	f107 0010 	add.w	r0, r7, #16
   18eae:	f012 fef7 	bl	2bca0 <memcpy>
}
   18eb2:	e7ae      	b.n	18e12 <bt_hci_le_adv_report+0xc6>
		bt_addr_le_copy(&id_addr,
   18eb4:	4649      	mov	r1, r9
   18eb6:	f013 f9ad 	bl	2c214 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   18eba:	2207      	movs	r2, #7
   18ebc:	4601      	mov	r1, r0
   18ebe:	e7f4      	b.n	18eaa <bt_hci_le_adv_report+0x15e>
		if (listener->recv) {
   18ec0:	2b00      	cmp	r3, #0
   18ec2:	d1ce      	bne.n	18e62 <bt_hci_le_adv_report+0x116>
	info->addr = NULL;
   18ec4:	2300      	movs	r3, #0
	check_pending_conn(&id_addr, addr, info->adv_props);
   18ec6:	8c3a      	ldrh	r2, [r7, #32]
	info->addr = NULL;
   18ec8:	61bb      	str	r3, [r7, #24]
   18eca:	f7ff fe6d 	bl	18ba8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   18ece:	0601      	lsls	r1, r0, #24
   18ed0:	f3c0 1bc0 	ubfx	fp, r0, #7, #1
   18ed4:	d489      	bmi.n	18dea <bt_hci_le_adv_report+0x9e>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   18ed6:	07d2      	lsls	r2, r2, #31
   18ed8:	d587      	bpl.n	18dea <bt_hci_le_adv_report+0x9e>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   18eda:	2202      	movs	r2, #2
   18edc:	f107 0110 	add.w	r1, r7, #16
   18ee0:	4658      	mov	r0, fp
   18ee2:	f001 f809 	bl	19ef8 <bt_conn_lookup_state_le>
	if (!conn) {
   18ee6:	4606      	mov	r6, r0
   18ee8:	2800      	cmp	r0, #0
   18eea:	f43f af7e 	beq.w	18dea <bt_hci_le_adv_report+0x9e>
   18eee:	f7ff fe5b 	bl	18ba8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   18ef2:	0643      	lsls	r3, r0, #25
   18ef4:	d411      	bmi.n	18f1a <bt_hci_le_adv_report+0x1ce>
   18ef6:	2207      	movs	r2, #7
   18ef8:	4649      	mov	r1, r9
   18efa:	f106 0096 	add.w	r0, r6, #150	; 0x96
   18efe:	f012 fecf 	bl	2bca0 <memcpy>
	if (bt_le_create_conn(conn)) {
   18f02:	4630      	mov	r0, r6
   18f04:	f7fe fd3c 	bl	17980 <bt_le_create_conn>
   18f08:	b960      	cbnz	r0, 18f24 <bt_hci_le_adv_report+0x1d8>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   18f0a:	4630      	mov	r0, r6
   18f0c:	2106      	movs	r1, #6
   18f0e:	f000 fd3d 	bl	1998c <bt_conn_set_state>
	bt_conn_unref(conn);
   18f12:	4630      	mov	r0, r6
   18f14:	f013 fa6e 	bl	2c3f4 <bt_conn_unref>
	return;
   18f18:	e767      	b.n	18dea <bt_hci_le_adv_report+0x9e>
	return bt_le_scan_set_enable_legacy(enable);
   18f1a:	4658      	mov	r0, fp
   18f1c:	f7ff fe4e 	bl	18bbc <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   18f20:	2800      	cmp	r0, #0
   18f22:	d0e8      	beq.n	18ef6 <bt_hci_le_adv_report+0x1aa>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   18f24:	231f      	movs	r3, #31
   18f26:	7333      	strb	r3, [r6, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18f28:	2100      	movs	r1, #0
   18f2a:	4630      	mov	r0, r6
   18f2c:	f000 fd2e 	bl	1998c <bt_conn_set_state>
	bt_conn_unref(conn);
   18f30:	4630      	mov	r0, r6
   18f32:	f013 fa5f 	bl	2c3f4 <bt_conn_unref>
	bt_le_scan_update(false);
   18f36:	2000      	movs	r0, #0
   18f38:	f7ff fec8 	bl	18ccc <bt_le_scan_update>
   18f3c:	e755      	b.n	18dea <bt_hci_le_adv_report+0x9e>
   18f3e:	bf00      	nop
   18f40:	200033b0 	.word	0x200033b0
   18f44:	00032dcc 	.word	0x00032dcc
   18f48:	00032dee 	.word	0x00032dee
   18f4c:	0002fc44 	.word	0x0002fc44
   18f50:	00032de9 	.word	0x00032de9
   18f54:	200033a8 	.word	0x200033a8
   18f58:	00031d70 	.word	0x00031d70

00018f5c <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   18f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18f5e:	4605      	mov	r5, r0
   18f60:	f7ff fe22 	bl	18ba8 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18f64:	0740      	lsls	r0, r0, #29
{
   18f66:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18f68:	d56c      	bpl.n	19044 <bt_le_scan_start+0xe8>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   18f6a:	782a      	ldrb	r2, [r5, #0]
   18f6c:	2a01      	cmp	r2, #1
   18f6e:	d903      	bls.n	18f78 <bt_le_scan_start+0x1c>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   18f70:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   18f74:	4620      	mov	r0, r4
   18f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   18f78:	686b      	ldr	r3, [r5, #4]
   18f7a:	2b0f      	cmp	r3, #15
   18f7c:	d8f8      	bhi.n	18f70 <bt_le_scan_start+0x14>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   18f7e:	8928      	ldrh	r0, [r5, #8]
   18f80:	1f03      	subs	r3, r0, #4
   18f82:	b29b      	uxth	r3, r3
   18f84:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   18f88:	42a3      	cmp	r3, r4
   18f8a:	d8f1      	bhi.n	18f70 <bt_le_scan_start+0x14>
	if (param->window < 0x0004 || param->window > 0x4000) {
   18f8c:	8969      	ldrh	r1, [r5, #10]
   18f8e:	1f0b      	subs	r3, r1, #4
   18f90:	b29b      	uxth	r3, r3
   18f92:	42a3      	cmp	r3, r4
   18f94:	d8ec      	bhi.n	18f70 <bt_le_scan_start+0x14>
	if (param->window > param->interval) {
   18f96:	4288      	cmp	r0, r1
   18f98:	d3ea      	bcc.n	18f70 <bt_le_scan_start+0x14>
	if (param->type && !bt_id_scan_random_addr_check()) {
   18f9a:	b992      	cbnz	r2, 18fc2 <bt_le_scan_start+0x66>
   18f9c:	f3bf 8f5b 	dmb	ish
   18fa0:	4e2a      	ldr	r6, [pc, #168]	; (1904c <bt_le_scan_start+0xf0>)
   18fa2:	e856 0f00 	ldrex	r0, [r6]
   18fa6:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   18faa:	e846 3200 	strex	r2, r3, [r6]
   18fae:	2a00      	cmp	r2, #0
   18fb0:	d1f7      	bne.n	18fa2 <bt_le_scan_start+0x46>
   18fb2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   18fb6:	f010 0280 	ands.w	r2, r0, #128	; 0x80
   18fba:	d007      	beq.n	18fcc <bt_le_scan_start+0x70>
		return -EALREADY;
   18fbc:	f06f 0477 	mvn.w	r4, #119	; 0x77
   18fc0:	e7d8      	b.n	18f74 <bt_le_scan_start+0x18>
	if (param->type && !bt_id_scan_random_addr_check()) {
   18fc2:	f013 f949 	bl	2c258 <bt_id_scan_random_addr_check>
   18fc6:	2800      	cmp	r0, #0
   18fc8:	d1e8      	bne.n	18f9c <bt_le_scan_start+0x40>
   18fca:	e7d1      	b.n	18f70 <bt_le_scan_start+0x14>
   18fcc:	f7ff fdec 	bl	18ba8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   18fd0:	0641      	lsls	r1, r0, #25
   18fd2:	d50a      	bpl.n	18fea <bt_le_scan_start+0x8e>
	return bt_le_scan_set_enable_legacy(enable);
   18fd4:	4610      	mov	r0, r2
   18fd6:	f7ff fdf1 	bl	18bbc <bt_le_scan_set_enable_legacy>
		if (err) {
   18fda:	4604      	mov	r4, r0
   18fdc:	b128      	cbz	r0, 18fea <bt_le_scan_start+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18fde:	f06f 0180 	mvn.w	r1, #128	; 0x80
   18fe2:	4630      	mov	r0, r6
   18fe4:	f013 f94c 	bl	2c280 <atomic_and>
		return err;
   18fe8:	e7c4      	b.n	18f74 <bt_le_scan_start+0x18>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   18fea:	686b      	ldr	r3, [r5, #4]
	if (val) {
   18fec:	07db      	lsls	r3, r3, #31
   18fee:	d515      	bpl.n	1901c <bt_le_scan_start+0xc0>
   18ff0:	f3bf 8f5b 	dmb	ish
   18ff4:	e856 3f00 	ldrex	r3, [r6]
   18ff8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   18ffc:	e846 3200 	strex	r2, r3, [r6]
   19000:	2a00      	cmp	r2, #0
   19002:	d1f7      	bne.n	18ff4 <bt_le_scan_start+0x98>
   19004:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   19008:	89ab      	ldrh	r3, [r5, #12]
   1900a:	b16b      	cbz	r3, 19028 <bt_le_scan_start+0xcc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1900c:	480f      	ldr	r0, [pc, #60]	; (1904c <bt_le_scan_start+0xf0>)
   1900e:	f06f 0180 	mvn.w	r1, #128	; 0x80
   19012:	f013 f935 	bl	2c280 <atomic_and>
			return -ENOTSUP;
   19016:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1901a:	e7ab      	b.n	18f74 <bt_le_scan_start+0x18>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1901c:	f46f 7100 	mvn.w	r1, #512	; 0x200
   19020:	480a      	ldr	r0, [pc, #40]	; (1904c <bt_le_scan_start+0xf0>)
   19022:	f013 f92d 	bl	2c280 <atomic_and>
   19026:	e7ef      	b.n	19008 <bt_le_scan_start+0xac>
		err = start_le_scan_legacy(param->type, param->interval,
   19028:	896a      	ldrh	r2, [r5, #10]
   1902a:	8929      	ldrh	r1, [r5, #8]
   1902c:	7828      	ldrb	r0, [r5, #0]
   1902e:	f7ff fdf5 	bl	18c1c <start_le_scan_legacy>
	if (err) {
   19032:	4604      	mov	r4, r0
   19034:	b118      	cbz	r0, 1903e <bt_le_scan_start+0xe2>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19036:	4805      	ldr	r0, [pc, #20]	; (1904c <bt_le_scan_start+0xf0>)
   19038:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1903c:	e7d2      	b.n	18fe4 <bt_le_scan_start+0x88>
	scan_dev_found_cb = cb;
   1903e:	4b04      	ldr	r3, [pc, #16]	; (19050 <bt_le_scan_start+0xf4>)
   19040:	601f      	str	r7, [r3, #0]
	return 0;
   19042:	e797      	b.n	18f74 <bt_le_scan_start+0x18>
		return -EAGAIN;
   19044:	f06f 040a 	mvn.w	r4, #10
   19048:	e794      	b.n	18f74 <bt_le_scan_start+0x18>
   1904a:	bf00      	nop
   1904c:	2000045c 	.word	0x2000045c
   19050:	200033b0 	.word	0x200033b0

00019054 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   19054:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19056:	4808      	ldr	r0, [pc, #32]	; (19078 <bt_le_scan_stop+0x24>)
   19058:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1905c:	f013 f910 	bl	2c280 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   19060:	0603      	lsls	r3, r0, #24
   19062:	d506      	bpl.n	19072 <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   19064:	4b05      	ldr	r3, [pc, #20]	; (1907c <bt_le_scan_stop+0x28>)
   19066:	2000      	movs	r0, #0
   19068:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   1906a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   1906e:	f7ff be2d 	b.w	18ccc <bt_le_scan_update>
}
   19072:	f06f 0077 	mvn.w	r0, #119	; 0x77
   19076:	bd08      	pop	{r3, pc}
   19078:	2000045c 	.word	0x2000045c
   1907c:	200033b0 	.word	0x200033b0

00019080 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   19080:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   19082:	4904      	ldr	r1, [pc, #16]	; (19094 <bt_pub_key_is_debug+0x14>)
   19084:	2240      	movs	r2, #64	; 0x40
   19086:	f012 fde4 	bl	2bc52 <memcmp>
}
   1908a:	fab0 f080 	clz	r0, r0
   1908e:	0940      	lsrs	r0, r0, #5
   19090:	bd08      	pop	{r3, pc}
   19092:	bf00      	nop
   19094:	00032ebf 	.word	0x00032ebf

00019098 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   19098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1909c:	4b4c      	ldr	r3, [pc, #304]	; (191d0 <bt_pub_key_gen+0x138>)
   1909e:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   190a2:	f003 0306 	and.w	r3, r3, #6
   190a6:	2b06      	cmp	r3, #6
{
   190a8:	af00      	add	r7, sp, #0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   190aa:	d016      	beq.n	190da <bt_pub_key_gen+0x42>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   190ac:	466c      	mov	r4, sp
   190ae:	b088      	sub	sp, #32
   190b0:	466a      	mov	r2, sp
   190b2:	4b48      	ldr	r3, [pc, #288]	; (191d4 <bt_pub_key_gen+0x13c>)
   190b4:	6153      	str	r3, [r2, #20]
   190b6:	4b48      	ldr	r3, [pc, #288]	; (191d8 <bt_pub_key_gen+0x140>)
   190b8:	6193      	str	r3, [r2, #24]
   190ba:	2303      	movs	r3, #3
   190bc:	f842 3f10 	str.w	r3, [r2, #16]!
   190c0:	4846      	ldr	r0, [pc, #280]	; (191dc <bt_pub_key_gen+0x144>)
   190c2:	2300      	movs	r3, #0
   190c4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   190c8:	f7fa ffb2 	bl	14030 <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
   190cc:	f06f 0585 	mvn.w	r5, #133	; 0x85
   190d0:	46a5      	mov	sp, r4
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   190d2:	4628      	mov	r0, r5
   190d4:	46bd      	mov	sp, r7
   190d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!new_cb) {
   190da:	2800      	cmp	r0, #0
   190dc:	d075      	beq.n	191ca <bt_pub_key_gen+0x132>
	return list->head;
   190de:	4e40      	ldr	r6, [pc, #256]	; (191e0 <bt_pub_key_gen+0x148>)
   190e0:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   190e2:	b1d2      	cbz	r2, 1911a <bt_pub_key_gen+0x82>
   190e4:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   190e6:	4283      	cmp	r3, r0
   190e8:	d113      	bne.n	19112 <bt_pub_key_gen+0x7a>
			LOG_WRN("Callback already registered");
   190ea:	466c      	mov	r4, sp
   190ec:	b088      	sub	sp, #32
   190ee:	466a      	mov	r2, sp
   190f0:	4b3c      	ldr	r3, [pc, #240]	; (191e4 <bt_pub_key_gen+0x14c>)
   190f2:	6153      	str	r3, [r2, #20]
   190f4:	4b38      	ldr	r3, [pc, #224]	; (191d8 <bt_pub_key_gen+0x140>)
   190f6:	6193      	str	r3, [r2, #24]
   190f8:	2303      	movs	r3, #3
   190fa:	f842 3f10 	str.w	r3, [r2, #16]!
   190fe:	4837      	ldr	r0, [pc, #220]	; (191dc <bt_pub_key_gen+0x144>)
   19100:	2300      	movs	r3, #0
   19102:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19106:	f7fa ff93 	bl	14030 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   1910a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1910e:	46a5      	mov	sp, r4
   19110:	e7df      	b.n	190d2 <bt_pub_key_gen+0x3a>
	return node->next;
   19112:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   19114:	b10b      	cbz	r3, 1911a <bt_pub_key_gen+0x82>
   19116:	3b04      	subs	r3, #4
   19118:	e7e5      	b.n	190e6 <bt_pub_key_gen+0x4e>
	parent->next = child;
   1911a:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   1911c:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   1911e:	1d03      	adds	r3, r0, #4
	list->head = node;
   19120:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   19122:	b902      	cbnz	r2, 19126 <bt_pub_key_gen+0x8e>
	list->tail = node;
   19124:	6073      	str	r3, [r6, #4]
   19126:	4c30      	ldr	r4, [pc, #192]	; (191e8 <bt_pub_key_gen+0x150>)
   19128:	f3bf 8f5b 	dmb	ish
   1912c:	e854 8f00 	ldrex	r8, [r4]
   19130:	f048 0320 	orr.w	r3, r8, #32
   19134:	e844 3200 	strex	r2, r3, [r4]
   19138:	2a00      	cmp	r2, #0
   1913a:	d1f7      	bne.n	1912c <bt_pub_key_gen+0x94>
   1913c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   19140:	f018 0820 	ands.w	r8, r8, #32
   19144:	d001      	beq.n	1914a <bt_pub_key_gen+0xb2>
	return 0;
   19146:	2500      	movs	r5, #0
   19148:	e7c3      	b.n	190d2 <bt_pub_key_gen+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1914a:	f3bf 8f5b 	dmb	ish
   1914e:	e854 3f00 	ldrex	r3, [r4]
   19152:	f023 0310 	bic.w	r3, r3, #16
   19156:	e844 3200 	strex	r2, r3, [r4]
   1915a:	2a00      	cmp	r2, #0
   1915c:	d1f7      	bne.n	1914e <bt_pub_key_gen+0xb6>
   1915e:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   19162:	4642      	mov	r2, r8
   19164:	4641      	mov	r1, r8
   19166:	f242 0025 	movw	r0, #8229	; 0x2025
   1916a:	f7fe fb27 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   1916e:	4605      	mov	r5, r0
   19170:	2800      	cmp	r0, #0
   19172:	d0e8      	beq.n	19146 <bt_pub_key_gen+0xae>
		LOG_ERR("Sending LE P256 Public Key command failed");
   19174:	46e9      	mov	r9, sp
   19176:	b088      	sub	sp, #32
   19178:	466a      	mov	r2, sp
   1917a:	4b1c      	ldr	r3, [pc, #112]	; (191ec <bt_pub_key_gen+0x154>)
   1917c:	6153      	str	r3, [r2, #20]
   1917e:	4b16      	ldr	r3, [pc, #88]	; (191d8 <bt_pub_key_gen+0x140>)
   19180:	6193      	str	r3, [r2, #24]
   19182:	2303      	movs	r3, #3
   19184:	f842 3f10 	str.w	r3, [r2, #16]!
   19188:	4814      	ldr	r0, [pc, #80]	; (191dc <bt_pub_key_gen+0x144>)
   1918a:	4643      	mov	r3, r8
   1918c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19190:	f7fa ff4e 	bl	14030 <z_impl_z_log_msg_static_create>
   19194:	f3bf 8f5b 	dmb	ish
   19198:	46cd      	mov	sp, r9
   1919a:	e854 3f00 	ldrex	r3, [r4]
   1919e:	f023 0320 	bic.w	r3, r3, #32
   191a2:	e844 3200 	strex	r2, r3, [r4]
   191a6:	2a00      	cmp	r2, #0
   191a8:	d1f7      	bne.n	1919a <bt_pub_key_gen+0x102>
   191aa:	f3bf 8f5b 	dmb	ish
	return list->head;
   191ae:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   191b0:	b13c      	cbz	r4, 191c2 <bt_pub_key_gen+0x12a>
			if (cb->func) {
   191b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   191b6:	3c04      	subs	r4, #4
			if (cb->func) {
   191b8:	b10b      	cbz	r3, 191be <bt_pub_key_gen+0x126>
				cb->func(NULL);
   191ba:	2000      	movs	r0, #0
   191bc:	4798      	blx	r3
	return node->next;
   191be:	6864      	ldr	r4, [r4, #4]
   191c0:	e7f6      	b.n	191b0 <bt_pub_key_gen+0x118>
	list->head = NULL;
   191c2:	2300      	movs	r3, #0
	list->tail = NULL;
   191c4:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   191c8:	e783      	b.n	190d2 <bt_pub_key_gen+0x3a>
		return -EINVAL;
   191ca:	f06f 0515 	mvn.w	r5, #21
   191ce:	e780      	b.n	190d2 <bt_pub_key_gen+0x3a>
   191d0:	20000388 	.word	0x20000388
   191d4:	00032e0b 	.word	0x00032e0b
   191d8:	00032eb0 	.word	0x00032eb0
   191dc:	0002fbfc 	.word	0x0002fbfc
   191e0:	200033b8 	.word	0x200033b8
   191e4:	00032e2e 	.word	0x00032e2e
   191e8:	2000045c 	.word	0x2000045c
   191ec:	00032e4e 	.word	0x00032e4e

000191f0 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   191f0:	4b05      	ldr	r3, [pc, #20]	; (19208 <bt_pub_key_get+0x18>)
   191f2:	f3bf 8f5b 	dmb	ish
   191f6:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   191f8:	4804      	ldr	r0, [pc, #16]	; (1920c <bt_pub_key_get+0x1c>)
   191fa:	f3bf 8f5b 	dmb	ish
	return NULL;
   191fe:	f013 0f10 	tst.w	r3, #16
}
   19202:	bf08      	it	eq
   19204:	2000      	moveq	r0, #0
   19206:	4770      	bx	lr
   19208:	2000045c 	.word	0x2000045c
   1920c:	20004445 	.word	0x20004445

00019210 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   19210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	if (dh_key_cb == cb) {
   19214:	4d29      	ldr	r5, [pc, #164]	; (192bc <bt_dh_key_gen+0xac>)
   19216:	682b      	ldr	r3, [r5, #0]
   19218:	428b      	cmp	r3, r1
{
   1921a:	af00      	add	r7, sp, #0
   1921c:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   1921e:	d047      	beq.n	192b0 <bt_dh_key_gen+0xa0>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   19220:	b12b      	cbz	r3, 1922e <bt_dh_key_gen+0x1e>
		return -EBUSY;
   19222:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   19226:	4620      	mov	r0, r4
   19228:	46bd      	mov	sp, r7
   1922a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1922e:	4b24      	ldr	r3, [pc, #144]	; (192c0 <bt_dh_key_gen+0xb0>)
   19230:	f3bf 8f5b 	dmb	ish
   19234:	681a      	ldr	r2, [r3, #0]
   19236:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1923a:	f3c2 1840 	ubfx	r8, r2, #5, #1
   1923e:	0692      	lsls	r2, r2, #26
   19240:	d4ef      	bmi.n	19222 <bt_dh_key_gen+0x12>
   19242:	f3bf 8f5b 	dmb	ish
   19246:	681b      	ldr	r3, [r3, #0]
   19248:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1924c:	06db      	lsls	r3, r3, #27
   1924e:	d532      	bpl.n	192b6 <bt_dh_key_gen+0xa6>
	dh_key_cb = cb;
   19250:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   19252:	f242 0026 	movw	r0, #8230	; 0x2026
   19256:	2140      	movs	r1, #64	; 0x40
   19258:	f7fe f954 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   1925c:	4604      	mov	r4, r0
   1925e:	b320      	cbz	r0, 192aa <bt_dh_key_gen+0x9a>
	return net_buf_simple_add(&buf->b, len);
   19260:	2140      	movs	r1, #64	; 0x40
   19262:	300c      	adds	r0, #12
   19264:	f015 f8e5 	bl	2e432 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   19268:	2240      	movs	r2, #64	; 0x40
   1926a:	4631      	mov	r1, r6
   1926c:	f012 fd18 	bl	2bca0 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   19270:	4621      	mov	r1, r4
   19272:	4642      	mov	r2, r8
   19274:	f242 0026 	movw	r0, #8230	; 0x2026
   19278:	f7fe faa0 	bl	177bc <bt_hci_cmd_send_sync>
	if (err) {
   1927c:	4604      	mov	r4, r0
   1927e:	2800      	cmp	r0, #0
   19280:	d0d1      	beq.n	19226 <bt_dh_key_gen+0x16>
		dh_key_cb = NULL;
   19282:	2300      	movs	r3, #0
   19284:	602b      	str	r3, [r5, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   19286:	466d      	mov	r5, sp
   19288:	b088      	sub	sp, #32
   1928a:	466a      	mov	r2, sp
   1928c:	490d      	ldr	r1, [pc, #52]	; (192c4 <bt_dh_key_gen+0xb4>)
   1928e:	6151      	str	r1, [r2, #20]
   19290:	490d      	ldr	r1, [pc, #52]	; (192c8 <bt_dh_key_gen+0xb8>)
   19292:	e9c2 1406 	strd	r1, r4, [r2, #24]
   19296:	2104      	movs	r1, #4
   19298:	f842 1f10 	str.w	r1, [r2, #16]!
   1929c:	480b      	ldr	r0, [pc, #44]	; (192cc <bt_dh_key_gen+0xbc>)
   1929e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   192a2:	f7fa fec5 	bl	14030 <z_impl_z_log_msg_static_create>
   192a6:	46ad      	mov	sp, r5
		return err;
   192a8:	e7bd      	b.n	19226 <bt_dh_key_gen+0x16>
		return -ENOBUFS;
   192aa:	f06f 0468 	mvn.w	r4, #104	; 0x68
   192ae:	e7e8      	b.n	19282 <bt_dh_key_gen+0x72>
		return -EALREADY;
   192b0:	f06f 0477 	mvn.w	r4, #119	; 0x77
   192b4:	e7b7      	b.n	19226 <bt_dh_key_gen+0x16>
		return -EADDRNOTAVAIL;
   192b6:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   192ba:	e7b4      	b.n	19226 <bt_dh_key_gen+0x16>
   192bc:	200033b4 	.word	0x200033b4
   192c0:	2000045c 	.word	0x2000045c
   192c4:	00032e7c 	.word	0x00032e7c
   192c8:	00032ea2 	.word	0x00032ea2
   192cc:	0002fbfc 	.word	0x0002fbfc

000192d0 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   192d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   192d2:	4c1b      	ldr	r4, [pc, #108]	; (19340 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   192d4:	68c6      	ldr	r6, [r0, #12]
   192d6:	f3bf 8f5b 	dmb	ish
   192da:	e854 3f00 	ldrex	r3, [r4]
   192de:	f023 0320 	bic.w	r3, r3, #32
   192e2:	e844 3200 	strex	r2, r3, [r4]
   192e6:	2a00      	cmp	r2, #0
   192e8:	d1f7      	bne.n	192da <bt_hci_evt_le_pkey_complete+0xa>
   192ea:	f3bf 8f5b 	dmb	ish

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   192ee:	7833      	ldrb	r3, [r6, #0]
   192f0:	b983      	cbnz	r3, 19314 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   192f2:	4814      	ldr	r0, [pc, #80]	; (19344 <bt_hci_evt_le_pkey_complete+0x74>)
   192f4:	2240      	movs	r2, #64	; 0x40
   192f6:	1c71      	adds	r1, r6, #1
   192f8:	f012 fcd2 	bl	2bca0 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   192fc:	f3bf 8f5b 	dmb	ish
   19300:	e854 3f00 	ldrex	r3, [r4]
   19304:	f043 0310 	orr.w	r3, r3, #16
   19308:	e844 3200 	strex	r2, r3, [r4]
   1930c:	2a00      	cmp	r2, #0
   1930e:	d1f7      	bne.n	19300 <bt_hci_evt_le_pkey_complete+0x30>
   19310:	f3bf 8f5b 	dmb	ish
	return list->head;
   19314:	4d0c      	ldr	r5, [pc, #48]	; (19348 <bt_hci_evt_le_pkey_complete+0x78>)
   19316:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   19318:	b16c      	cbz	r4, 19336 <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   1931a:	4f0a      	ldr	r7, [pc, #40]	; (19344 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1931c:	3c04      	subs	r4, #4
		if (cb->func) {
   1931e:	6823      	ldr	r3, [r4, #0]
   19320:	b12b      	cbz	r3, 1932e <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   19322:	7832      	ldrb	r2, [r6, #0]
   19324:	2a00      	cmp	r2, #0
   19326:	bf0c      	ite	eq
   19328:	4638      	moveq	r0, r7
   1932a:	2000      	movne	r0, #0
   1932c:	4798      	blx	r3
	return node->next;
   1932e:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   19330:	b10c      	cbz	r4, 19336 <bt_hci_evt_le_pkey_complete+0x66>
   19332:	3c04      	subs	r4, #4
   19334:	e7f3      	b.n	1931e <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   19336:	2300      	movs	r3, #0
	list->tail = NULL;
   19338:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   1933c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1933e:	bf00      	nop
   19340:	2000045c 	.word	0x2000045c
   19344:	20004445 	.word	0x20004445
   19348:	200033b8 	.word	0x200033b8

0001934c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   1934c:	4905      	ldr	r1, [pc, #20]	; (19364 <bt_hci_evt_le_dhkey_complete+0x18>)
   1934e:	680b      	ldr	r3, [r1, #0]
   19350:	b133      	cbz	r3, 19360 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   19352:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   19354:	2000      	movs	r0, #0
   19356:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   19358:	7811      	ldrb	r1, [r2, #0]
   1935a:	b901      	cbnz	r1, 1935e <bt_hci_evt_le_dhkey_complete+0x12>
   1935c:	1c50      	adds	r0, r2, #1
   1935e:	4718      	bx	r3
	}
}
   19360:	4770      	bx	lr
   19362:	bf00      	nop
   19364:	200033b4 	.word	0x200033b4

00019368 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   19368:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1936a:	4b0b      	ldr	r3, [pc, #44]	; (19398 <notify_connected+0x30>)
   1936c:	681d      	ldr	r5, [r3, #0]
{
   1936e:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   19370:	b925      	cbnz	r5, 1937c <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19372:	4d0a      	ldr	r5, [pc, #40]	; (1939c <notify_connected+0x34>)
   19374:	4e0a      	ldr	r6, [pc, #40]	; (193a0 <notify_connected+0x38>)
   19376:	42b5      	cmp	r5, r6
   19378:	d307      	bcc.n	1938a <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   1937a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   1937c:	682b      	ldr	r3, [r5, #0]
   1937e:	b113      	cbz	r3, 19386 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   19380:	7b21      	ldrb	r1, [r4, #12]
   19382:	4620      	mov	r0, r4
   19384:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   19386:	69ad      	ldr	r5, [r5, #24]
   19388:	e7f2      	b.n	19370 <notify_connected+0x8>
		if (cb->connected) {
   1938a:	682b      	ldr	r3, [r5, #0]
   1938c:	b113      	cbz	r3, 19394 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   1938e:	7b21      	ldrb	r1, [r4, #12]
   19390:	4620      	mov	r0, r4
   19392:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19394:	351c      	adds	r5, #28
   19396:	e7ee      	b.n	19376 <notify_connected+0xe>
   19398:	200033f0 	.word	0x200033f0
   1939c:	0002fba0 	.word	0x0002fba0
   193a0:	0002fbbc 	.word	0x0002fbbc

000193a4 <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   193a4:	b580      	push	{r7, lr}
   193a6:	af00      	add	r7, sp, #0
		LOG_WRN("Unable to allocate buffer within timeout");
   193a8:	b088      	sub	sp, #32
   193aa:	466a      	mov	r2, sp
   193ac:	4b07      	ldr	r3, [pc, #28]	; (193cc <bt_conn_create_pdu_timeout.part.0+0x28>)
   193ae:	6153      	str	r3, [r2, #20]
   193b0:	4b07      	ldr	r3, [pc, #28]	; (193d0 <bt_conn_create_pdu_timeout.part.0+0x2c>)
   193b2:	6193      	str	r3, [r2, #24]
   193b4:	2303      	movs	r3, #3
   193b6:	f842 3f10 	str.w	r3, [r2, #16]!
   193ba:	4806      	ldr	r0, [pc, #24]	; (193d4 <bt_conn_create_pdu_timeout.part.0+0x30>)
   193bc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   193c0:	f012 ff9f 	bl	2c302 <z_log_msg_static_create.constprop.0>
}
   193c4:	2000      	movs	r0, #0
   193c6:	46bd      	mov	sp, r7
   193c8:	bd80      	pop	{r7, pc}
   193ca:	bf00      	nop
   193cc:	00032f06 	.word	0x00032f06
   193d0:	000331a5 	.word	0x000331a5
   193d4:	0002fbe4 	.word	0x0002fbe4

000193d8 <tx_notify>:
{
   193d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   193dc:	4f15      	ldr	r7, [pc, #84]	; (19434 <tx_notify+0x5c>)
{
   193de:	4604      	mov	r4, r0
	tx->cb = NULL;
   193e0:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   193e4:	f04f 0240 	mov.w	r2, #64	; 0x40
   193e8:	f3ef 8311 	mrs	r3, BASEPRI
   193ec:	f382 8812 	msr	BASEPRI_MAX, r2
   193f0:	f3bf 8f6f 	isb	sy
	return list->head;
   193f4:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   193f6:	b929      	cbnz	r1, 19404 <tx_notify+0x2c>
	__asm__ volatile(
   193f8:	f383 8811 	msr	BASEPRI, r3
   193fc:	f3bf 8f6f 	isb	sy
}
   19400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19404:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   19406:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   19408:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1940a:	4281      	cmp	r1, r0
	list->tail = node;
   1940c:	bf08      	it	eq
   1940e:	6262      	streq	r2, [r4, #36]	; 0x24
   19410:	f383 8811 	msr	BASEPRI, r3
   19414:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   19418:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   1941c:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   19420:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   19424:	4638      	mov	r0, r7
   19426:	f015 fdbb 	bl	2efa0 <k_queue_append>
		cb(conn, user_data, 0);
   1942a:	2200      	movs	r2, #0
   1942c:	4631      	mov	r1, r6
   1942e:	4620      	mov	r0, r4
   19430:	47a8      	blx	r5
	while (1) {
   19432:	e7d7      	b.n	193e4 <tx_notify+0xc>
   19434:	200009b8 	.word	0x200009b8

00019438 <conn_tx_destroy>:
{
   19438:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   1943a:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   1943e:	2200      	movs	r2, #0
	tx->user_data = NULL;
   19440:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   19444:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   19446:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   19448:	4805      	ldr	r0, [pc, #20]	; (19460 <conn_tx_destroy+0x28>)
   1944a:	f015 fda9 	bl	2efa0 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   1944e:	4631      	mov	r1, r6
   19450:	4620      	mov	r0, r4
   19452:	462b      	mov	r3, r5
   19454:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   19458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   1945c:	4718      	bx	r3
   1945e:	bf00      	nop
   19460:	200009b8 	.word	0x200009b8

00019464 <send_frag>:
{
   19464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_dev.le.acl_mtu) {
   19468:	f8df 9188 	ldr.w	r9, [pc, #392]	; 195f4 <send_frag+0x190>
{
   1946c:	b083      	sub	sp, #12
   1946e:	4698      	mov	r8, r3
	if (bt_dev.le.acl_mtu) {
   19470:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   19474:	2b00      	cmp	r3, #0
{
   19476:	af00      	add	r7, sp, #0
   19478:	4604      	mov	r4, r0
   1947a:	460e      	mov	r6, r1
	return NULL;
   1947c:	f509 7084 	add.w	r0, r9, #264	; 0x108
{
   19480:	4615      	mov	r5, r2
	return NULL;
   19482:	bf08      	it	eq
   19484:	2000      	moveq	r0, #0
	return z_impl_k_sem_take(sem, timeout);
   19486:	2200      	movs	r2, #0
   19488:	2300      	movs	r3, #0
   1948a:	f00b ff93 	bl	253b4 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
   1948e:	2800      	cmp	r0, #0
   19490:	f040 80ac 	bne.w	195ec <send_frag+0x188>
	if (frag) {
   19494:	2d00      	cmp	r5, #0
   19496:	f000 8088 	beq.w	195aa <send_frag+0x146>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1949a:	f105 0b0c 	add.w	fp, r5, #12
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1949e:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   194a2:	607b      	str	r3, [r7, #4]
   194a4:	4658      	mov	r0, fp
   194a6:	f015 f811 	bl	2e4cc <net_buf_simple_tailroom>
   194aa:	687b      	ldr	r3, [r7, #4]
   194ac:	4298      	cmp	r0, r3
   194ae:	d977      	bls.n	195a0 <send_frag+0x13c>
	return bt_dev.le.acl_mtu;
   194b0:	f8b9 2104 	ldrh.w	r2, [r9, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
   194b4:	f856 1f0c 	ldr.w	r1, [r6, #12]!
   194b8:	607a      	str	r2, [r7, #4]
   194ba:	4658      	mov	r0, fp
   194bc:	f014 ffbf 	bl	2e43e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   194c0:	687a      	ldr	r2, [r7, #4]
   194c2:	4630      	mov	r0, r6
   194c4:	4611      	mov	r1, r2
   194c6:	f014 ffdd 	bl	2e484 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
   194ca:	7b63      	ldrb	r3, [r4, #13]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   194cc:	69ae      	ldr	r6, [r5, #24]
	if (conn->state != BT_CONN_CONNECTED) {
   194ce:	2b07      	cmp	r3, #7
   194d0:	f040 8089 	bne.w	195e6 <send_frag+0x182>
	__asm__ volatile(
   194d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   194d8:	f3ef 8211 	mrs	r2, BASEPRI
   194dc:	f383 8812 	msr	BASEPRI_MAX, r3
   194e0:	f3bf 8f6f 	isb	sy
	if (tx) {
   194e4:	2e00      	cmp	r6, #0
   194e6:	d06b      	beq.n	195c0 <send_frag+0x15c>
	parent->next = child;
   194e8:	2300      	movs	r3, #0
   194ea:	6033      	str	r3, [r6, #0]
	return list->tail;
   194ec:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   194ee:	2b00      	cmp	r3, #0
   194f0:	d163      	bne.n	195ba <send_frag+0x156>
	list->head = node;
   194f2:	e9c4 6605 	strd	r6, r6, [r4, #20]
	__asm__ volatile(
   194f6:	f382 8811 	msr	BASEPRI, r2
   194fa:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   194fe:	2104      	movs	r1, #4
   19500:	f105 000c 	add.w	r0, r5, #12
   19504:	f014 ffb6 	bl	2e474 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   19508:	8823      	ldrh	r3, [r4, #0]
   1950a:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   1950e:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
   19512:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   19516:	8a2b      	ldrh	r3, [r5, #16]
   19518:	3b04      	subs	r3, #4
   1951a:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1951c:	2302      	movs	r3, #2
   1951e:	762b      	strb	r3, [r5, #24]
	return bt_send(buf);
   19520:	4628      	mov	r0, r5
   19522:	f012 fddd 	bl	2c0e0 <bt_send>
	if (err) {
   19526:	4680      	mov	r8, r0
   19528:	2800      	cmp	r0, #0
   1952a:	d034      	beq.n	19596 <send_frag+0x132>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1952c:	46eb      	mov	fp, sp
   1952e:	b088      	sub	sp, #32
   19530:	466a      	mov	r2, sp
   19532:	4b31      	ldr	r3, [pc, #196]	; (195f8 <send_frag+0x194>)
   19534:	6153      	str	r3, [r2, #20]
   19536:	4b31      	ldr	r3, [pc, #196]	; (195fc <send_frag+0x198>)
   19538:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1953c:	2304      	movs	r3, #4
   1953e:	f842 3f10 	str.w	r3, [r2, #16]!
   19542:	482f      	ldr	r0, [pc, #188]	; (19600 <send_frag+0x19c>)
   19544:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19548:	f012 fedb 	bl	2c302 <z_log_msg_static_create.constprop.0>
   1954c:	46dd      	mov	sp, fp
	__asm__ volatile(
   1954e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19552:	f3ef 8811 	mrs	r8, BASEPRI
   19556:	f383 8812 	msr	BASEPRI_MAX, r3
   1955a:	f3bf 8f6f 	isb	sy
		if (tx) {
   1955e:	2e00      	cmp	r6, #0
   19560:	d03b      	beq.n	195da <send_frag+0x176>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   19562:	4631      	mov	r1, r6
   19564:	f104 0014 	add.w	r0, r4, #20
   19568:	f012 fe9b 	bl	2c2a2 <sys_slist_find_and_remove>
	__asm__ volatile(
   1956c:	f388 8811 	msr	BASEPRI, r8
   19570:	f3bf 8f6f 	isb	sy
		err = -EIO;
   19574:	f06f 0804 	mvn.w	r8, #4
	if (bt_dev.le.acl_mtu) {
   19578:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   1957c:	4821      	ldr	r0, [pc, #132]	; (19604 <send_frag+0x1a0>)
   1957e:	2b00      	cmp	r3, #0
   19580:	bf08      	it	eq
   19582:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   19584:	f00b fef0 	bl	25368 <z_impl_k_sem_give>
	if (tx) {
   19588:	b12e      	cbz	r6, 19596 <send_frag+0x132>
		tx_data(buf)->tx = NULL;
   1958a:	2300      	movs	r3, #0
   1958c:	61ab      	str	r3, [r5, #24]
		conn_tx_destroy(conn, tx);
   1958e:	4631      	mov	r1, r6
   19590:	4620      	mov	r0, r4
   19592:	f7ff ff51 	bl	19438 <conn_tx_destroy>
}
   19596:	4640      	mov	r0, r8
   19598:	370c      	adds	r7, #12
   1959a:	46bd      	mov	sp, r7
   1959c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
   195a0:	4658      	mov	r0, fp
   195a2:	f014 ff93 	bl	2e4cc <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   195a6:	b282      	uxth	r2, r0
   195a8:	e784      	b.n	194b4 <send_frag+0x50>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   195aa:	2200      	movs	r2, #0
   195ac:	2300      	movs	r3, #0
   195ae:	f104 0038 	add.w	r0, r4, #56	; 0x38
   195b2:	f014 fedd 	bl	2e370 <net_buf_get>
   195b6:	4605      	mov	r5, r0
		frag = buf;
   195b8:	e787      	b.n	194ca <send_frag+0x66>
	parent->next = child;
   195ba:	601e      	str	r6, [r3, #0]
	list->tail = node;
   195bc:	61a6      	str	r6, [r4, #24]
}
   195be:	e79a      	b.n	194f6 <send_frag+0x92>
	return list->tail;
   195c0:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   195c2:	b133      	cbz	r3, 195d2 <send_frag+0x16e>
			pending_no_cb = &tail_tx->pending_no_cb;
   195c4:	f103 0a0c 	add.w	sl, r3, #12
   195c8:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   195ca:	3301      	adds	r3, #1
   195cc:	f8ca 3000 	str.w	r3, [sl]
   195d0:	e791      	b.n	194f6 <send_frag+0x92>
			pending_no_cb = &conn->pending_no_cb;
   195d2:	69e3      	ldr	r3, [r4, #28]
   195d4:	f104 0a1c 	add.w	sl, r4, #28
   195d8:	e7f7      	b.n	195ca <send_frag+0x166>
			(*pending_no_cb)--;
   195da:	f8da 3000 	ldr.w	r3, [sl]
   195de:	3b01      	subs	r3, #1
   195e0:	f8ca 3000 	str.w	r3, [sl]
   195e4:	e7c2      	b.n	1956c <send_frag+0x108>
		err = -ENOTCONN;
   195e6:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   195ea:	e7c5      	b.n	19578 <send_frag+0x114>
		return -ENOBUFS;
   195ec:	f06f 0868 	mvn.w	r8, #104	; 0x68
   195f0:	e7d1      	b.n	19596 <send_frag+0x132>
   195f2:	bf00      	nop
   195f4:	20000388 	.word	0x20000388
   195f8:	000322bd 	.word	0x000322bd
   195fc:	000331d2 	.word	0x000331d2
   19600:	0002fbe4 	.word	0x0002fbe4
   19604:	20000490 	.word	0x20000490

00019608 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
   19608:	4804      	ldr	r0, [pc, #16]	; (1961c <bt_conn_get_pkts+0x14>)
   1960a:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
   1960e:	2b00      	cmp	r3, #0
   19610:	f500 7084 	add.w	r0, r0, #264	; 0x108
}
   19614:	bf08      	it	eq
   19616:	2000      	moveq	r0, #0
   19618:	4770      	bx	lr
   1961a:	bf00      	nop
   1961c:	20000388 	.word	0x20000388

00019620 <bt_conn_new>:
{
   19620:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   19622:	2200      	movs	r2, #0
   19624:	4604      	mov	r4, r0
   19626:	428a      	cmp	r2, r1
   19628:	d102      	bne.n	19630 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1962a:	2400      	movs	r4, #0
}
   1962c:	4620      	mov	r0, r4
   1962e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19630:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   19634:	2001      	movs	r0, #1
   19636:	f3bf 8f5b 	dmb	ish
   1963a:	e853 5f00 	ldrex	r5, [r3]
   1963e:	2d00      	cmp	r5, #0
   19640:	d104      	bne.n	1964c <bt_conn_new+0x2c>
   19642:	e843 0c00 	strex	ip, r0, [r3]
   19646:	f1bc 0f00 	cmp.w	ip, #0
   1964a:	d1f6      	bne.n	1963a <bt_conn_new+0x1a>
   1964c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   19650:	d002      	beq.n	19658 <bt_conn_new+0x38>
   19652:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   19654:	4402      	add	r2, r0
   19656:	e7e6      	b.n	19626 <bt_conn_new+0x6>
	if (!conn) {
   19658:	2c00      	cmp	r4, #0
   1965a:	d0e6      	beq.n	1962a <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1965c:	22b8      	movs	r2, #184	; 0xb8
   1965e:	2100      	movs	r1, #0
   19660:	4620      	mov	r0, r4
   19662:	f012 fb28 	bl	2bcb6 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   19666:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1966a:	4904      	ldr	r1, [pc, #16]	; (1967c <bt_conn_new+0x5c>)
   1966c:	f015 fd78 	bl	2f160 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   19670:	4903      	ldr	r1, [pc, #12]	; (19680 <bt_conn_new+0x60>)
   19672:	f104 0028 	add.w	r0, r4, #40	; 0x28
   19676:	f015 fd2f 	bl	2f0d8 <k_work_init>
	return conn;
   1967a:	e7d7      	b.n	1962c <bt_conn_new+0xc>
   1967c:	0001a151 	.word	0x0001a151
   19680:	0002c321 	.word	0x0002c321

00019684 <bt_conn_recv>:
{
   19684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19688:	4616      	mov	r6, r2
   1968a:	af00      	add	r7, sp, #0
   1968c:	4604      	mov	r4, r0
   1968e:	460d      	mov	r5, r1
	tx_notify(conn);
   19690:	f7ff fea2 	bl	193d8 <tx_notify>
	switch (flags) {
   19694:	2e01      	cmp	r6, #1
   19696:	d038      	beq.n	1970a <bt_conn_recv+0x86>
   19698:	2e02      	cmp	r6, #2
   1969a:	d17b      	bne.n	19794 <bt_conn_recv+0x110>
		if (conn->rx) {
   1969c:	6923      	ldr	r3, [r4, #16]
   1969e:	b193      	cbz	r3, 196c6 <bt_conn_recv+0x42>
			LOG_ERR("Unexpected first L2CAP frame");
   196a0:	466e      	mov	r6, sp
   196a2:	b088      	sub	sp, #32
   196a4:	466a      	mov	r2, sp
   196a6:	4b48      	ldr	r3, [pc, #288]	; (197c8 <bt_conn_recv+0x144>)
   196a8:	6153      	str	r3, [r2, #20]
   196aa:	4b48      	ldr	r3, [pc, #288]	; (197cc <bt_conn_recv+0x148>)
   196ac:	6193      	str	r3, [r2, #24]
   196ae:	2303      	movs	r3, #3
   196b0:	4847      	ldr	r0, [pc, #284]	; (197d0 <bt_conn_recv+0x14c>)
   196b2:	f842 3f10 	str.w	r3, [r2, #16]!
   196b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   196ba:	f012 fe22 	bl	2c302 <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   196be:	4620      	mov	r0, r4
   196c0:	46b5      	mov	sp, r6
   196c2:	f012 fe30 	bl	2c326 <bt_conn_reset_rx_state>
		conn->rx = buf;
   196c6:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   196c8:	6921      	ldr	r1, [r4, #16]
   196ca:	8a08      	ldrh	r0, [r1, #16]
   196cc:	2801      	cmp	r0, #1
   196ce:	d937      	bls.n	19740 <bt_conn_recv+0xbc>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   196d0:	68cb      	ldr	r3, [r1, #12]
   196d2:	881b      	ldrh	r3, [r3, #0]
   196d4:	3304      	adds	r3, #4
   196d6:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   196d8:	4298      	cmp	r0, r3
   196da:	d331      	bcc.n	19740 <bt_conn_recv+0xbc>
	if (conn->rx->len > acl_total_len) {
   196dc:	d96d      	bls.n	197ba <bt_conn_recv+0x136>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   196de:	466d      	mov	r5, sp
   196e0:	b08a      	sub	sp, #40	; 0x28
   196e2:	466a      	mov	r2, sp
   196e4:	493b      	ldr	r1, [pc, #236]	; (197d4 <bt_conn_recv+0x150>)
   196e6:	6151      	str	r1, [r2, #20]
   196e8:	4938      	ldr	r1, [pc, #224]	; (197cc <bt_conn_recv+0x148>)
   196ea:	6213      	str	r3, [r2, #32]
   196ec:	2305      	movs	r3, #5
   196ee:	e9c2 1006 	strd	r1, r0, [r2, #24]
   196f2:	f842 3f10 	str.w	r3, [r2, #16]!
   196f6:	4836      	ldr	r0, [pc, #216]	; (197d0 <bt_conn_recv+0x14c>)
   196f8:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   196fc:	f012 fe01 	bl	2c302 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   19700:	4620      	mov	r0, r4
   19702:	46ad      	mov	sp, r5
   19704:	f012 fe0f 	bl	2c326 <bt_conn_reset_rx_state>
		return;
   19708:	e01a      	b.n	19740 <bt_conn_recv+0xbc>
		if (!conn->rx) {
   1970a:	6920      	ldr	r0, [r4, #16]
   1970c:	b998      	cbnz	r0, 19736 <bt_conn_recv+0xb2>
			LOG_ERR("Unexpected L2CAP continuation");
   1970e:	466e      	mov	r6, sp
   19710:	b088      	sub	sp, #32
   19712:	466a      	mov	r2, sp
   19714:	4b30      	ldr	r3, [pc, #192]	; (197d8 <bt_conn_recv+0x154>)
   19716:	6153      	str	r3, [r2, #20]
   19718:	4b2c      	ldr	r3, [pc, #176]	; (197cc <bt_conn_recv+0x148>)
   1971a:	6193      	str	r3, [r2, #24]
   1971c:	2303      	movs	r3, #3
   1971e:	f842 3f10 	str.w	r3, [r2, #16]!
   19722:	482b      	ldr	r0, [pc, #172]	; (197d0 <bt_conn_recv+0x14c>)
   19724:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19728:	f012 fdeb 	bl	2c302 <z_log_msg_static_create.constprop.0>
   1972c:	46b5      	mov	sp, r6
		bt_conn_reset_rx_state(conn);
   1972e:	4620      	mov	r0, r4
   19730:	f012 fdf9 	bl	2c326 <bt_conn_reset_rx_state>
   19734:	e001      	b.n	1973a <bt_conn_recv+0xb6>
		if (!buf->len) {
   19736:	8a2e      	ldrh	r6, [r5, #16]
   19738:	b92e      	cbnz	r6, 19746 <bt_conn_recv+0xc2>
		net_buf_unref(buf);
   1973a:	4628      	mov	r0, r5
   1973c:	f007 f970 	bl	20a20 <net_buf_unref>
}
   19740:	46bd      	mov	sp, r7
   19742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19746:	300c      	adds	r0, #12
   19748:	f014 fec0 	bl	2e4cc <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1974c:	4286      	cmp	r6, r0
   1974e:	d917      	bls.n	19780 <bt_conn_recv+0xfc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   19750:	466e      	mov	r6, sp
   19752:	b088      	sub	sp, #32
   19754:	466a      	mov	r2, sp
   19756:	4b21      	ldr	r3, [pc, #132]	; (197dc <bt_conn_recv+0x158>)
   19758:	6153      	str	r3, [r2, #20]
   1975a:	4b1c      	ldr	r3, [pc, #112]	; (197cc <bt_conn_recv+0x148>)
   1975c:	6193      	str	r3, [r2, #24]
   1975e:	2303      	movs	r3, #3
   19760:	f842 3f10 	str.w	r3, [r2, #16]!
   19764:	481a      	ldr	r0, [pc, #104]	; (197d0 <bt_conn_recv+0x14c>)
   19766:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1976a:	f012 fdca 	bl	2c302 <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   1976e:	2200      	movs	r2, #0
   19770:	6921      	ldr	r1, [r4, #16]
   19772:	46b5      	mov	sp, r6
   19774:	4620      	mov	r0, r4
   19776:	f000 ff9d 	bl	1a6b4 <bt_l2cap_recv>
			conn->rx = NULL;
   1977a:	2300      	movs	r3, #0
   1977c:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   1977e:	e7dc      	b.n	1973a <bt_conn_recv+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19780:	6920      	ldr	r0, [r4, #16]
   19782:	8a2a      	ldrh	r2, [r5, #16]
   19784:	68e9      	ldr	r1, [r5, #12]
   19786:	300c      	adds	r0, #12
   19788:	f014 fe59 	bl	2e43e <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1978c:	4628      	mov	r0, r5
   1978e:	f007 f947 	bl	20a20 <net_buf_unref>
		break;
   19792:	e799      	b.n	196c8 <bt_conn_recv+0x44>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   19794:	46e8      	mov	r8, sp
   19796:	b088      	sub	sp, #32
   19798:	466b      	mov	r3, sp
   1979a:	4a11      	ldr	r2, [pc, #68]	; (197e0 <bt_conn_recv+0x15c>)
   1979c:	615a      	str	r2, [r3, #20]
   1979e:	4a0b      	ldr	r2, [pc, #44]	; (197cc <bt_conn_recv+0x148>)
   197a0:	480b      	ldr	r0, [pc, #44]	; (197d0 <bt_conn_recv+0x14c>)
	switch (flags) {
   197a2:	e9c3 2606 	strd	r2, r6, [r3, #24]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   197a6:	461a      	mov	r2, r3
   197a8:	2304      	movs	r3, #4
   197aa:	f842 3f10 	str.w	r3, [r2, #16]!
   197ae:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   197b2:	f012 fda6 	bl	2c302 <z_log_msg_static_create.constprop.0>
   197b6:	46c5      	mov	sp, r8
   197b8:	e7b9      	b.n	1972e <bt_conn_recv+0xaa>
	conn->rx = NULL;
   197ba:	2300      	movs	r3, #0
   197bc:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   197be:	2201      	movs	r2, #1
   197c0:	4620      	mov	r0, r4
   197c2:	f000 ff77 	bl	1a6b4 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   197c6:	e7bb      	b.n	19740 <bt_conn_recv+0xbc>
   197c8:	00032f33 	.word	0x00032f33
   197cc:	000331ef 	.word	0x000331ef
   197d0:	0002fbe4 	.word	0x0002fbe4
   197d4:	00032fc3 	.word	0x00032fc3
   197d8:	00032f54 	.word	0x00032f54
   197dc:	00032f76 	.word	0x00032f76
   197e0:	00032fa1 	.word	0x00032fa1

000197e4 <bt_conn_send_cb>:
{
   197e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   197e8:	4699      	mov	r9, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   197ea:	7acb      	ldrb	r3, [r1, #11]
   197ec:	2b07      	cmp	r3, #7
{
   197ee:	af00      	add	r7, sp, #0
   197f0:	4606      	mov	r6, r0
   197f2:	460d      	mov	r5, r1
   197f4:	4690      	mov	r8, r2
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   197f6:	d814      	bhi.n	19822 <bt_conn_send_cb+0x3e>
		LOG_ERR("not enough room in user_data");
   197f8:	466c      	mov	r4, sp
   197fa:	b088      	sub	sp, #32
   197fc:	466a      	mov	r2, sp
   197fe:	4b34      	ldr	r3, [pc, #208]	; (198d0 <bt_conn_send_cb+0xec>)
   19800:	6153      	str	r3, [r2, #20]
   19802:	4b34      	ldr	r3, [pc, #208]	; (198d4 <bt_conn_send_cb+0xf0>)
   19804:	6193      	str	r3, [r2, #24]
   19806:	2303      	movs	r3, #3
   19808:	4833      	ldr	r0, [pc, #204]	; (198d8 <bt_conn_send_cb+0xf4>)
   1980a:	f842 3f10 	str.w	r3, [r2, #16]!
   1980e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19812:	f012 fd76 	bl	2c302 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   19816:	f06f 0015 	mvn.w	r0, #21
   1981a:	46a5      	mov	sp, r4
}
   1981c:	46bd      	mov	sp, r7
   1981e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   19822:	7b43      	ldrb	r3, [r0, #13]
   19824:	2b07      	cmp	r3, #7
   19826:	d012      	beq.n	1984e <bt_conn_send_cb+0x6a>
		LOG_ERR("not connected!");
   19828:	466c      	mov	r4, sp
   1982a:	b088      	sub	sp, #32
   1982c:	466a      	mov	r2, sp
   1982e:	4b2b      	ldr	r3, [pc, #172]	; (198dc <bt_conn_send_cb+0xf8>)
   19830:	6153      	str	r3, [r2, #20]
   19832:	4b28      	ldr	r3, [pc, #160]	; (198d4 <bt_conn_send_cb+0xf0>)
   19834:	6193      	str	r3, [r2, #24]
   19836:	2303      	movs	r3, #3
   19838:	f842 3f10 	str.w	r3, [r2, #16]!
   1983c:	4826      	ldr	r0, [pc, #152]	; (198d8 <bt_conn_send_cb+0xf4>)
   1983e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19842:	f012 fd5e 	bl	2c302 <z_log_msg_static_create.constprop.0>
   19846:	46a5      	mov	sp, r4
		return -ENOTCONN;
   19848:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1984c:	e7e6      	b.n	1981c <bt_conn_send_cb+0x38>
	if (cb) {
   1984e:	2a00      	cmp	r2, #0
   19850:	d039      	beq.n	198c6 <bt_conn_send_cb+0xe2>
	return z_impl_z_current_get();
   19852:	f00c faa5 	bl	25da0 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   19856:	4b22      	ldr	r3, [pc, #136]	; (198e0 <bt_conn_send_cb+0xfc>)
   19858:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1985a:	4822      	ldr	r0, [pc, #136]	; (198e4 <bt_conn_send_cb+0x100>)
   1985c:	bf07      	ittee	eq
   1985e:	2200      	moveq	r2, #0
   19860:	2300      	moveq	r3, #0
   19862:	f04f 32ff 	movne.w	r2, #4294967295
   19866:	f04f 33ff 	movne.w	r3, #4294967295
   1986a:	f00b fd49 	bl	25300 <z_impl_k_queue_get>
   1986e:	4604      	mov	r4, r0
		if (!tx) {
   19870:	b358      	cbz	r0, 198ca <bt_conn_send_cb+0xe6>
		if (conn->state != BT_CONN_CONNECTED) {
   19872:	7b73      	ldrb	r3, [r6, #13]
   19874:	2b07      	cmp	r3, #7
   19876:	d018      	beq.n	198aa <bt_conn_send_cb+0xc6>
			LOG_WRN("Disconnected while allocating context");
   19878:	466d      	mov	r5, sp
   1987a:	b088      	sub	sp, #32
   1987c:	466a      	mov	r2, sp
   1987e:	4b1a      	ldr	r3, [pc, #104]	; (198e8 <bt_conn_send_cb+0x104>)
   19880:	6153      	str	r3, [r2, #20]
   19882:	4b14      	ldr	r3, [pc, #80]	; (198d4 <bt_conn_send_cb+0xf0>)
   19884:	6193      	str	r3, [r2, #24]
   19886:	2303      	movs	r3, #3
   19888:	f842 3f10 	str.w	r3, [r2, #16]!
   1988c:	4812      	ldr	r0, [pc, #72]	; (198d8 <bt_conn_send_cb+0xf4>)
   1988e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19892:	f012 fd36 	bl	2c302 <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   19896:	2300      	movs	r3, #0
	tx->user_data = NULL;
   19898:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   1989c:	4811      	ldr	r0, [pc, #68]	; (198e4 <bt_conn_send_cb+0x100>)
	tx->pending_no_cb = 0U;
   1989e:	60e3      	str	r3, [r4, #12]
   198a0:	46ad      	mov	sp, r5
	k_fifo_put(&free_tx, tx);
   198a2:	4621      	mov	r1, r4
   198a4:	f015 fb7c 	bl	2efa0 <k_queue_append>
}
   198a8:	e7ce      	b.n	19848 <bt_conn_send_cb+0x64>
		tx->user_data = user_data;
   198aa:	e9c0 8901 	strd	r8, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   198ae:	2300      	movs	r3, #0
   198b0:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   198b2:	61ac      	str	r4, [r5, #24]
	tx_data(buf)->is_cont = false;
   198b4:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
   198b6:	f106 0038 	add.w	r0, r6, #56	; 0x38
	tx_data(buf)->is_cont = false;
   198ba:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
   198bc:	4629      	mov	r1, r5
   198be:	f014 fd86 	bl	2e3ce <net_buf_put>
	return 0;
   198c2:	4620      	mov	r0, r4
   198c4:	e7aa      	b.n	1981c <bt_conn_send_cb+0x38>
   198c6:	4614      	mov	r4, r2
   198c8:	e7f3      	b.n	198b2 <bt_conn_send_cb+0xce>
			return -ENOBUFS;
   198ca:	f06f 0068 	mvn.w	r0, #104	; 0x68
   198ce:	e7a5      	b.n	1981c <bt_conn_send_cb+0x38>
   198d0:	00032fe2 	.word	0x00032fe2
   198d4:	000331df 	.word	0x000331df
   198d8:	0002fbe4 	.word	0x0002fbe4
   198dc:	00033003 	.word	0x00033003
   198e0:	20002ca8 	.word	0x20002ca8
   198e4:	200009b8 	.word	0x200009b8
   198e8:	00033016 	.word	0x00033016

000198ec <bt_conn_prepare_events>:
{
   198ec:	b570      	push	{r4, r5, r6, lr}
   198ee:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   198f0:	481d      	ldr	r0, [pc, #116]	; (19968 <bt_conn_prepare_events+0x7c>)
   198f2:	f015 ff70 	bl	2f7d6 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   198f6:	4620      	mov	r0, r4
   198f8:	4b1b      	ldr	r3, [pc, #108]	; (19968 <bt_conn_prepare_events+0x7c>)
   198fa:	2200      	movs	r2, #0
   198fc:	2101      	movs	r1, #1
   198fe:	f015 ff4d 	bl	2f79c <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   19902:	481a      	ldr	r0, [pc, #104]	; (1996c <bt_conn_prepare_events+0x80>)
		if (!conn_prepare_events(conn, &events[ev_count])) {
   19904:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   19908:	f012 fcf5 	bl	2c2f6 <atomic_get>
   1990c:	b908      	cbnz	r0, 19912 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1990e:	2001      	movs	r0, #1
}
   19910:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   19912:	4d17      	ldr	r5, [pc, #92]	; (19970 <bt_conn_prepare_events+0x84>)
   19914:	7b6b      	ldrb	r3, [r5, #13]
   19916:	b953      	cbnz	r3, 1992e <bt_conn_prepare_events+0x42>
   19918:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1991c:	1d28      	adds	r0, r5, #4
   1991e:	f012 fcdb 	bl	2c2d8 <atomic_and>
   19922:	0643      	lsls	r3, r0, #25
   19924:	d503      	bpl.n	1992e <bt_conn_prepare_events+0x42>
		conn_cleanup(conn);
   19926:	4628      	mov	r0, r5
   19928:	f012 fd06 	bl	2c338 <conn_cleanup>
		return -ENOTCONN;
   1992c:	e7ef      	b.n	1990e <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   1992e:	7b6b      	ldrb	r3, [r5, #13]
   19930:	2b07      	cmp	r3, #7
   19932:	d1ec      	bne.n	1990e <bt_conn_prepare_events+0x22>
	if (bt_dev.le.acl_mtu) {
   19934:	4b0f      	ldr	r3, [pc, #60]	; (19974 <bt_conn_prepare_events+0x88>)
   19936:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   1993a:	2a00      	cmp	r2, #0
   1993c:	d0e7      	beq.n	1990e <bt_conn_prepare_events+0x22>
	return sem->count;
   1993e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
   19942:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   19944:	b159      	cbz	r1, 1995e <bt_conn_prepare_events+0x72>
   19946:	b952      	cbnz	r2, 1995e <bt_conn_prepare_events+0x72>
		k_poll_event_init(&events[0],
   19948:	f503 7384 	add.w	r3, r3, #264	; 0x108
   1994c:	2102      	movs	r1, #2
		k_poll_event_init(&events[0],
   1994e:	4630      	mov	r0, r6
   19950:	f015 ff24 	bl	2f79c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   19954:	2301      	movs	r3, #1
   19956:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   1995a:	2002      	movs	r0, #2
	return ev_count;
   1995c:	e7d8      	b.n	19910 <bt_conn_prepare_events+0x24>
		k_poll_event_init(&events[0],
   1995e:	4b06      	ldr	r3, [pc, #24]	; (19978 <bt_conn_prepare_events+0x8c>)
   19960:	2200      	movs	r2, #0
   19962:	2104      	movs	r1, #4
   19964:	e7f3      	b.n	1994e <bt_conn_prepare_events+0x62>
   19966:	bf00      	nop
   19968:	200005a8 	.word	0x200005a8
   1996c:	20002158 	.word	0x20002158
   19970:	200020a0 	.word	0x200020a0
   19974:	20000388 	.word	0x20000388
   19978:	200020d8 	.word	0x200020d8

0001997c <bt_conn_lookup_handle>:
{
   1997c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1997e:	2101      	movs	r1, #1
   19980:	4801      	ldr	r0, [pc, #4]	; (19988 <bt_conn_lookup_handle+0xc>)
   19982:	f012 bd17 	b.w	2c3b4 <conn_lookup_handle>
   19986:	bf00      	nop
   19988:	200020a0 	.word	0x200020a0

0001998c <bt_conn_set_state>:
{
   1998c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   19990:	7b45      	ldrb	r5, [r0, #13]
   19992:	428d      	cmp	r5, r1
{
   19994:	af00      	add	r7, sp, #0
   19996:	4604      	mov	r4, r0
   19998:	460e      	mov	r6, r1
	if (conn->state == state) {
   1999a:	d11a      	bne.n	199d2 <bt_conn_set_state+0x46>
	switch (state) {
   1999c:	2d08      	cmp	r5, #8
   1999e:	bf96      	itet	ls
   199a0:	4b81      	ldrls	r3, [pc, #516]	; (19ba8 <bt_conn_set_state+0x21c>)
	if (conn->state == state) {
   199a2:	4b82      	ldrhi	r3, [pc, #520]	; (19bac <bt_conn_set_state+0x220>)
   199a4:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   199a8:	466c      	mov	r4, sp
   199aa:	b08a      	sub	sp, #40	; 0x28
   199ac:	466a      	mov	r2, sp
   199ae:	4980      	ldr	r1, [pc, #512]	; (19bb0 <bt_conn_set_state+0x224>)
   199b0:	6151      	str	r1, [r2, #20]
   199b2:	4980      	ldr	r1, [pc, #512]	; (19bb4 <bt_conn_set_state+0x228>)
   199b4:	e9c2 1306 	strd	r1, r3, [r2, #24]
   199b8:	f240 3301 	movw	r3, #769	; 0x301
   199bc:	8413      	strh	r3, [r2, #32]
   199be:	4b7e      	ldr	r3, [pc, #504]	; (19bb8 <bt_conn_set_state+0x22c>)
   199c0:	f842 3f10 	str.w	r3, [r2, #16]!
   199c4:	f44f 5112 	mov.w	r1, #9344	; 0x2480
		LOG_WRN("no valid (%u) state was set", state);
   199c8:	487c      	ldr	r0, [pc, #496]	; (19bbc <bt_conn_set_state+0x230>)
   199ca:	f012 fc9a 	bl	2c302 <z_log_msg_static_create.constprop.0>
   199ce:	46a5      	mov	sp, r4
   199d0:	e049      	b.n	19a66 <bt_conn_set_state+0xda>
	conn->state = state;
   199d2:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   199d4:	b165      	cbz	r5, 199f0 <bt_conn_set_state+0x64>
   199d6:	2d06      	cmp	r5, #6
   199d8:	d010      	beq.n	199fc <bt_conn_set_state+0x70>
	switch (conn->state) {
   199da:	7b63      	ldrb	r3, [r4, #13]
   199dc:	2b08      	cmp	r3, #8
   199de:	f200 80de 	bhi.w	19b9e <bt_conn_set_state+0x212>
   199e2:	e8df f003 	tbb	[pc, r3]
   199e6:	1243      	.short	0x1243
   199e8:	40404040 	.word	0x40404040
   199ec:	329b      	.short	0x329b
   199ee:	40          	.byte	0x40
   199ef:	00          	.byte	0x00
		if (conn->type != BT_CONN_TYPE_ISO) {
   199f0:	7883      	ldrb	r3, [r0, #2]
   199f2:	2b08      	cmp	r3, #8
   199f4:	d0f1      	beq.n	199da <bt_conn_set_state+0x4e>
			bt_conn_ref(conn);
   199f6:	f012 fcc2 	bl	2c37e <bt_conn_ref>
   199fa:	e7ee      	b.n	199da <bt_conn_set_state+0x4e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   199fc:	7883      	ldrb	r3, [r0, #2]
   199fe:	2b01      	cmp	r3, #1
   19a00:	d1eb      	bne.n	199da <bt_conn_set_state+0x4e>
			k_work_cancel_delayable(&conn->deferred_work);
   19a02:	3058      	adds	r0, #88	; 0x58
   19a04:	f015 fbba 	bl	2f17c <k_work_cancel_delayable>
   19a08:	e7e7      	b.n	199da <bt_conn_set_state+0x4e>
	if (bt_dev.le.acl_mtu) {
   19a0a:	4d6d      	ldr	r5, [pc, #436]	; (19bc0 <bt_conn_set_state+0x234>)
		tx->pending_no_cb = 0U;
   19a0c:	f04f 0800 	mov.w	r8, #0
	return NULL;
   19a10:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
   19a14:	f04f 0240 	mov.w	r2, #64	; 0x40
   19a18:	f3ef 8311 	mrs	r3, BASEPRI
   19a1c:	f382 8812 	msr	BASEPRI_MAX, r2
   19a20:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   19a24:	69e2      	ldr	r2, [r4, #28]
   19a26:	2a00      	cmp	r2, #0
   19a28:	f000 8094 	beq.w	19b54 <bt_conn_set_state+0x1c8>
			conn->pending_no_cb--;
   19a2c:	3a01      	subs	r2, #1
   19a2e:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   19a30:	f383 8811 	msr	BASEPRI, r3
   19a34:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
   19a38:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
   19a3c:	2b00      	cmp	r3, #0
   19a3e:	bf14      	ite	ne
   19a40:	4630      	movne	r0, r6
   19a42:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   19a44:	f00b fc90 	bl	25368 <z_impl_k_sem_give>
}
   19a48:	e7e4      	b.n	19a14 <bt_conn_set_state+0x88>
		if (conn->type == BT_CONN_TYPE_SCO) {
   19a4a:	78a3      	ldrb	r3, [r4, #2]
   19a4c:	2b04      	cmp	r3, #4
   19a4e:	d00a      	beq.n	19a66 <bt_conn_set_state+0xda>
	z_impl_k_queue_init(queue);
   19a50:	f104 0038 	add.w	r0, r4, #56	; 0x38
   19a54:	f015 fa98 	bl	2ef88 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   19a58:	485a      	ldr	r0, [pc, #360]	; (19bc4 <bt_conn_set_state+0x238>)
   19a5a:	2100      	movs	r1, #0
   19a5c:	f00c fc70 	bl	26340 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   19a60:	2300      	movs	r3, #0
	list->tail = NULL;
   19a62:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
}
   19a66:	46bd      	mov	sp, r7
   19a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   19a6c:	78a3      	ldrb	r3, [r4, #2]
   19a6e:	2b04      	cmp	r3, #4
   19a70:	d104      	bne.n	19a7c <bt_conn_set_state+0xf0>
	old = atomic_dec(&conn->ref);
   19a72:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   19a76:	f012 fc47 	bl	2c308 <atomic_dec.isra.0>
}
   19a7a:	e7f4      	b.n	19a66 <bt_conn_set_state+0xda>
		switch (old_state) {
   19a7c:	2d08      	cmp	r5, #8
   19a7e:	d8f2      	bhi.n	19a66 <bt_conn_set_state+0xda>
   19a80:	a301      	add	r3, pc, #4	; (adr r3, 19a88 <bt_conn_set_state+0xfc>)
   19a82:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   19a86:	bf00      	nop
   19a88:	00019b01 	.word	0x00019b01
   19a8c:	00019aad 	.word	0x00019aad
   19a90:	00019af3 	.word	0x00019af3
   19a94:	00019a73 	.word	0x00019a73
   19a98:	00019a73 	.word	0x00019a73
   19a9c:	00019af3 	.word	0x00019af3
   19aa0:	00019af3 	.word	0x00019af3
   19aa4:	00019b01 	.word	0x00019b01
   19aa8:	00019b01 	.word	0x00019b01
			tx_notify(conn);
   19aac:	4620      	mov	r0, r4
   19aae:	f7ff fc93 	bl	193d8 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   19ab2:	78a3      	ldrb	r3, [r4, #2]
   19ab4:	2b01      	cmp	r3, #1
   19ab6:	d10a      	bne.n	19ace <bt_conn_set_state+0x142>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   19ab8:	f104 0558 	add.w	r5, r4, #88	; 0x58
   19abc:	4628      	mov	r0, r5
   19abe:	f015 fb5b 	bl	2f178 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   19ac2:	f010 0f0c 	tst.w	r0, #12
   19ac6:	d002      	beq.n	19ace <bt_conn_set_state+0x142>
				k_work_cancel_delayable(&conn->deferred_work);
   19ac8:	4628      	mov	r0, r5
   19aca:	f015 fb57 	bl	2f17c <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19ace:	f3bf 8f5b 	dmb	ish
   19ad2:	3404      	adds	r4, #4
   19ad4:	e854 3f00 	ldrex	r3, [r4]
   19ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19adc:	e844 3200 	strex	r2, r3, [r4]
   19ae0:	2a00      	cmp	r2, #0
   19ae2:	d1f7      	bne.n	19ad4 <bt_conn_set_state+0x148>
   19ae4:	f3bf 8f5b 	dmb	ish
   19ae8:	2100      	movs	r1, #0
   19aea:	4836      	ldr	r0, [pc, #216]	; (19bc4 <bt_conn_set_state+0x238>)
   19aec:	f00c fc28 	bl	26340 <z_impl_k_poll_signal_raise>
   19af0:	e7b9      	b.n	19a66 <bt_conn_set_state+0xda>
			if (conn->err) {
   19af2:	7b23      	ldrb	r3, [r4, #12]
   19af4:	2b00      	cmp	r3, #0
   19af6:	d0bc      	beq.n	19a72 <bt_conn_set_state+0xe6>
				notify_connected(conn);
   19af8:	4620      	mov	r0, r4
   19afa:	f7ff fc35 	bl	19368 <notify_connected>
   19afe:	e7b8      	b.n	19a72 <bt_conn_set_state+0xe6>
			LOG_WRN("Invalid (%u) old state", state);
   19b00:	466c      	mov	r4, sp
   19b02:	b088      	sub	sp, #32
   19b04:	466a      	mov	r2, sp
   19b06:	4b30      	ldr	r3, [pc, #192]	; (19bc8 <bt_conn_set_state+0x23c>)
		LOG_WRN("no valid (%u) state was set", state);
   19b08:	6153      	str	r3, [r2, #20]
   19b0a:	4b2a      	ldr	r3, [pc, #168]	; (19bb4 <bt_conn_set_state+0x228>)
   19b0c:	e9c2 3606 	strd	r3, r6, [r2, #24]
   19b10:	2304      	movs	r3, #4
   19b12:	f842 3f10 	str.w	r3, [r2, #16]!
   19b16:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   19b1a:	e755      	b.n	199c8 <bt_conn_set_state+0x3c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   19b1c:	78a3      	ldrb	r3, [r4, #2]
   19b1e:	2b01      	cmp	r3, #1
   19b20:	d1a1      	bne.n	19a66 <bt_conn_set_state+0xda>
		    bt_dev.create_param.timeout != 0) {
   19b22:	4b27      	ldr	r3, [pc, #156]	; (19bc0 <bt_conn_set_state+0x234>)
   19b24:	8a9d      	ldrh	r5, [r3, #20]
		    conn->type == BT_CONN_TYPE_LE &&
   19b26:	2d00      	cmp	r5, #0
   19b28:	d09d      	beq.n	19a66 <bt_conn_set_state+0xda>
					K_MSEC(10 * bt_dev.create_param.timeout));
   19b2a:	230a      	movs	r3, #10
   19b2c:	435d      	muls	r5, r3
			return ((t * to_hz + off) / from_hz);
   19b2e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   19b32:	f240 30e7 	movw	r0, #999	; 0x3e7
   19b36:	2100      	movs	r1, #0
   19b38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19b3c:	2300      	movs	r3, #0
   19b3e:	fbc5 0106 	smlal	r0, r1, r5, r6
   19b42:	f7e6 fadd 	bl	100 <__aeabi_uldivmod>
   19b46:	4602      	mov	r2, r0
   19b48:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   19b4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   19b4e:	f00b fe11 	bl	25774 <k_work_schedule>
   19b52:	e788      	b.n	19a66 <bt_conn_set_state+0xda>
	return list->head;
   19b54:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   19b56:	b921      	cbnz	r1, 19b62 <bt_conn_set_state+0x1d6>
   19b58:	f383 8811 	msr	BASEPRI, r3
   19b5c:	f3bf 8f6f 	isb	sy
		if (!node) {
   19b60:	e781      	b.n	19a66 <bt_conn_set_state+0xda>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19b62:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   19b64:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   19b66:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19b68:	4281      	cmp	r1, r0
	list->tail = node;
   19b6a:	bf08      	it	eq
   19b6c:	61a2      	streq	r2, [r4, #24]
   19b6e:	f383 8811 	msr	BASEPRI, r3
   19b72:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   19b76:	f04f 0240 	mov.w	r2, #64	; 0x40
   19b7a:	f3ef 8311 	mrs	r3, BASEPRI
   19b7e:	f382 8812 	msr	BASEPRI_MAX, r2
   19b82:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   19b86:	68ca      	ldr	r2, [r1, #12]
   19b88:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   19b8a:	f8c1 800c 	str.w	r8, [r1, #12]
	__asm__ volatile(
   19b8e:	f383 8811 	msr	BASEPRI, r3
   19b92:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   19b96:	4620      	mov	r0, r4
   19b98:	f7ff fc4e 	bl	19438 <conn_tx_destroy>
   19b9c:	e74c      	b.n	19a38 <bt_conn_set_state+0xac>
		LOG_WRN("no valid (%u) state was set", state);
   19b9e:	466c      	mov	r4, sp
   19ba0:	b088      	sub	sp, #32
   19ba2:	466a      	mov	r2, sp
   19ba4:	4b09      	ldr	r3, [pc, #36]	; (19bcc <bt_conn_set_state+0x240>)
   19ba6:	e7af      	b.n	19b08 <bt_conn_set_state+0x17c>
   19ba8:	00030268 	.word	0x00030268
   19bac:	00033040 	.word	0x00033040
   19bb0:	0003304a 	.word	0x0003304a
   19bb4:	000331c0 	.word	0x000331c0
   19bb8:	01000004 	.word	0x01000004
   19bbc:	0002fbe4 	.word	0x0002fbe4
   19bc0:	20000388 	.word	0x20000388
   19bc4:	200005a8 	.word	0x200005a8
   19bc8:	0003305f 	.word	0x0003305f
   19bcc:	0003307a 	.word	0x0003307a

00019bd0 <bt_conn_index>:
		index = conn - acl_conns;
   19bd0:	4b03      	ldr	r3, [pc, #12]	; (19be0 <bt_conn_index+0x10>)
   19bd2:	1ac0      	subs	r0, r0, r3
   19bd4:	4b03      	ldr	r3, [pc, #12]	; (19be4 <bt_conn_index+0x14>)
   19bd6:	1180      	asrs	r0, r0, #6
   19bd8:	4358      	muls	r0, r3
}
   19bda:	b2c0      	uxtb	r0, r0
   19bdc:	4770      	bx	lr
   19bde:	bf00      	nop
   19be0:	200020a0 	.word	0x200020a0
   19be4:	aaaaaaab 	.word	0xaaaaaaab

00019be8 <bt_conn_create_pdu_timeout>:
{
   19be8:	b538      	push	{r3, r4, r5, lr}
   19bea:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   19bec:	4908      	ldr	r1, [pc, #32]	; (19c10 <bt_conn_create_pdu_timeout+0x28>)
   19bee:	2800      	cmp	r0, #0
   19bf0:	bf08      	it	eq
   19bf2:	4608      	moveq	r0, r1
   19bf4:	f014 fbb7 	bl	2e366 <net_buf_alloc_fixed>
	if (!buf) {
   19bf8:	4604      	mov	r4, r0
   19bfa:	b918      	cbnz	r0, 19c04 <bt_conn_create_pdu_timeout+0x1c>
}
   19bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19c00:	f7ff bbd0 	b.w	193a4 <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   19c04:	1d29      	adds	r1, r5, #4
   19c06:	300c      	adds	r0, #12
   19c08:	f014 fc0f 	bl	2e42a <net_buf_simple_reserve>
   19c0c:	4620      	mov	r0, r4
   19c0e:	bd38      	pop	{r3, r4, r5, pc}
   19c10:	200009d0 	.word	0x200009d0

00019c14 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   19c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19c16:	1d03      	adds	r3, r0, #4
{
   19c18:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19c1a:	4618      	mov	r0, r3
   19c1c:	f012 fb6b 	bl	2c2f6 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19c20:	0582      	lsls	r2, r0, #22
   19c22:	d512      	bpl.n	19c4a <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   19c24:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19c28:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   19c2c:	4291      	cmp	r1, r2
   19c2e:	d80c      	bhi.n	19c4a <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   19c30:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   19c34:	4291      	cmp	r1, r2
   19c36:	d308      	bcc.n	19c4a <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   19c38:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   19c3c:	4291      	cmp	r1, r2
   19c3e:	d104      	bne.n	19c4a <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19c40:	f46f 7100 	mvn.w	r1, #512	; 0x200
   19c44:	4618      	mov	r0, r3
   19c46:	f012 fb47 	bl	2c2d8 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   19c4a:	4b10      	ldr	r3, [pc, #64]	; (19c8c <notify_le_param_updated+0x78>)
   19c4c:	681d      	ldr	r5, [r3, #0]
   19c4e:	b925      	cbnz	r5, 19c5a <notify_le_param_updated+0x46>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19c50:	4d0f      	ldr	r5, [pc, #60]	; (19c90 <notify_le_param_updated+0x7c>)
   19c52:	4f10      	ldr	r7, [pc, #64]	; (19c94 <notify_le_param_updated+0x80>)
   19c54:	42bd      	cmp	r5, r7
   19c56:	d30c      	bcc.n	19c72 <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   19c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   19c5a:	68ee      	ldr	r6, [r5, #12]
   19c5c:	b13e      	cbz	r6, 19c6e <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
   19c5e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   19c62:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   19c66:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   19c6a:	4620      	mov	r0, r4
   19c6c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   19c6e:	69ad      	ldr	r5, [r5, #24]
   19c70:	e7ed      	b.n	19c4e <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
   19c72:	68ee      	ldr	r6, [r5, #12]
   19c74:	b13e      	cbz	r6, 19c86 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   19c76:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   19c7a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   19c7e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   19c82:	4620      	mov	r0, r4
   19c84:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19c86:	351c      	adds	r5, #28
   19c88:	e7e4      	b.n	19c54 <notify_le_param_updated+0x40>
   19c8a:	bf00      	nop
   19c8c:	200033f0 	.word	0x200033f0
   19c90:	0002fba0 	.word	0x0002fba0
   19c94:	0002fbbc 	.word	0x0002fbbc

00019c98 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   19c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c9c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   19c9e:	4608      	mov	r0, r1
{
   19ca0:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   19ca2:	f012 f9fc 	bl	2c09e <bt_le_conn_params_valid>
   19ca6:	4605      	mov	r5, r0
   19ca8:	b918      	cbnz	r0, 19cb2 <le_param_req+0x1a>
		return false;
   19caa:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   19cac:	4628      	mov	r0, r5
   19cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   19cb2:	4b13      	ldr	r3, [pc, #76]	; (19d00 <le_param_req+0x68>)
   19cb4:	681e      	ldr	r6, [r3, #0]
   19cb6:	b946      	cbnz	r6, 19cca <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19cb8:	4e12      	ldr	r6, [pc, #72]	; (19d04 <le_param_req+0x6c>)
   19cba:	f8df 804c 	ldr.w	r8, [pc, #76]	; 19d08 <le_param_req+0x70>
   19cbe:	4546      	cmp	r6, r8
   19cc0:	d2f4      	bcs.n	19cac <le_param_req+0x14>
		if (!cb->le_param_req) {
   19cc2:	68b3      	ldr	r3, [r6, #8]
   19cc4:	b983      	cbnz	r3, 19ce8 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19cc6:	361c      	adds	r6, #28
   19cc8:	e7f9      	b.n	19cbe <le_param_req+0x26>
		if (!cb->le_param_req) {
   19cca:	68b3      	ldr	r3, [r6, #8]
   19ccc:	b90b      	cbnz	r3, 19cd2 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   19cce:	69b6      	ldr	r6, [r6, #24]
   19cd0:	e7f1      	b.n	19cb6 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   19cd2:	4621      	mov	r1, r4
   19cd4:	4638      	mov	r0, r7
   19cd6:	4798      	blx	r3
   19cd8:	2800      	cmp	r0, #0
   19cda:	d0e6      	beq.n	19caa <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   19cdc:	4620      	mov	r0, r4
   19cde:	f012 f9de 	bl	2c09e <bt_le_conn_params_valid>
   19ce2:	2800      	cmp	r0, #0
   19ce4:	d1f3      	bne.n	19cce <le_param_req+0x36>
   19ce6:	e7e0      	b.n	19caa <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   19ce8:	4621      	mov	r1, r4
   19cea:	4638      	mov	r0, r7
   19cec:	4798      	blx	r3
   19cee:	2800      	cmp	r0, #0
   19cf0:	d0db      	beq.n	19caa <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   19cf2:	4620      	mov	r0, r4
   19cf4:	f012 f9d3 	bl	2c09e <bt_le_conn_params_valid>
   19cf8:	2800      	cmp	r0, #0
   19cfa:	d1e4      	bne.n	19cc6 <le_param_req+0x2e>
   19cfc:	e7d5      	b.n	19caa <le_param_req+0x12>
   19cfe:	bf00      	nop
   19d00:	200033f0 	.word	0x200033f0
   19d04:	0002fba0 	.word	0x0002fba0
   19d08:	0002fbbc 	.word	0x0002fbbc

00019d0c <bt_conn_identity_resolved>:

	return false;
}

void bt_conn_identity_resolved(struct bt_conn *conn)
{
   19d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   19d10:	78c3      	ldrb	r3, [r0, #3]
{
   19d12:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   19d14:	b973      	cbnz	r3, 19d34 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   19d16:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   19d1a:	4b10      	ldr	r3, [pc, #64]	; (19d5c <bt_conn_identity_resolved+0x50>)
   19d1c:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   19d1e:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   19d22:	b955      	cbnz	r5, 19d3a <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19d24:	4d0e      	ldr	r5, [pc, #56]	; (19d60 <bt_conn_identity_resolved+0x54>)
   19d26:	4f0f      	ldr	r7, [pc, #60]	; (19d64 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   19d28:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19d2c:	42bd      	cmp	r5, r7
   19d2e:	d30c      	bcc.n	19d4a <bt_conn_identity_resolved+0x3e>
		}
	}
}
   19d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   19d34:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   19d38:	e7ef      	b.n	19d1a <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   19d3a:	692b      	ldr	r3, [r5, #16]
   19d3c:	b11b      	cbz	r3, 19d46 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   19d3e:	463a      	mov	r2, r7
   19d40:	4631      	mov	r1, r6
   19d42:	4620      	mov	r0, r4
   19d44:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   19d46:	69ad      	ldr	r5, [r5, #24]
   19d48:	e7eb      	b.n	19d22 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   19d4a:	692b      	ldr	r3, [r5, #16]
   19d4c:	b11b      	cbz	r3, 19d56 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   19d4e:	4642      	mov	r2, r8
   19d50:	4631      	mov	r1, r6
   19d52:	4620      	mov	r0, r4
   19d54:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19d56:	351c      	adds	r5, #28
   19d58:	e7e8      	b.n	19d2c <bt_conn_identity_resolved+0x20>
   19d5a:	bf00      	nop
   19d5c:	200033f0 	.word	0x200033f0
   19d60:	0002fba0 	.word	0x0002fba0
   19d64:	0002fbbc 	.word	0x0002fbbc

00019d68 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   19d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   19d6a:	7a43      	ldrb	r3, [r0, #9]
   19d6c:	7283      	strb	r3, [r0, #10]
{
   19d6e:	4604      	mov	r4, r0
   19d70:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   19d72:	f012 fcc2 	bl	2c6fa <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   19d76:	4b0c      	ldr	r3, [pc, #48]	; (19da8 <bt_conn_security_changed+0x40>)
   19d78:	681d      	ldr	r5, [r3, #0]
   19d7a:	b925      	cbnz	r5, 19d86 <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19d7c:	4d0b      	ldr	r5, [pc, #44]	; (19dac <bt_conn_security_changed+0x44>)
   19d7e:	4f0c      	ldr	r7, [pc, #48]	; (19db0 <bt_conn_security_changed+0x48>)
   19d80:	42bd      	cmp	r5, r7
   19d82:	d308      	bcc.n	19d96 <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   19d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   19d86:	696b      	ldr	r3, [r5, #20]
   19d88:	b11b      	cbz	r3, 19d92 <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   19d8a:	7a61      	ldrb	r1, [r4, #9]
   19d8c:	4632      	mov	r2, r6
   19d8e:	4620      	mov	r0, r4
   19d90:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   19d92:	69ad      	ldr	r5, [r5, #24]
   19d94:	e7f1      	b.n	19d7a <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   19d96:	696b      	ldr	r3, [r5, #20]
   19d98:	b11b      	cbz	r3, 19da2 <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   19d9a:	7a61      	ldrb	r1, [r4, #9]
   19d9c:	4632      	mov	r2, r6
   19d9e:	4620      	mov	r0, r4
   19da0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19da2:	351c      	adds	r5, #28
   19da4:	e7ec      	b.n	19d80 <bt_conn_security_changed+0x18>
   19da6:	bf00      	nop
   19da8:	200033f0 	.word	0x200033f0
   19dac:	0002fba0 	.word	0x0002fba0
   19db0:	0002fbbc 	.word	0x0002fbbc

00019db4 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   19db4:	4b02      	ldr	r3, [pc, #8]	; (19dc0 <bt_conn_cb_register+0xc>)
   19db6:	681a      	ldr	r2, [r3, #0]
   19db8:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   19dba:	6018      	str	r0, [r3, #0]
}
   19dbc:	4770      	bx	lr
   19dbe:	bf00      	nop
   19dc0:	200033f0 	.word	0x200033f0

00019dc4 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   19dc4:	b570      	push	{r4, r5, r6, lr}
   19dc6:	4606      	mov	r6, r0
   19dc8:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   19dca:	480a      	ldr	r0, [pc, #40]	; (19df4 <bt_conn_add_le+0x30>)
   19dcc:	2101      	movs	r1, #1
   19dce:	f7ff fc27 	bl	19620 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   19dd2:	4604      	mov	r4, r0
   19dd4:	b160      	cbz	r0, 19df0 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   19dd6:	7206      	strb	r6, [r0, #8]
   19dd8:	2207      	movs	r2, #7
   19dda:	4629      	mov	r1, r5
   19ddc:	3088      	adds	r0, #136	; 0x88
   19dde:	f011 ff5f 	bl	2bca0 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   19de2:	2301      	movs	r3, #1
   19de4:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   19de6:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   19de8:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   19dea:	4b03      	ldr	r3, [pc, #12]	; (19df8 <bt_conn_add_le+0x34>)
   19dec:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   19df0:	4620      	mov	r0, r4
   19df2:	bd70      	pop	{r4, r5, r6, pc}
   19df4:	200020a0 	.word	0x200020a0
   19df8:	00280018 	.word	0x00280018

00019dfc <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   19dfc:	b570      	push	{r4, r5, r6, lr}
   19dfe:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19e00:	480b      	ldr	r0, [pc, #44]	; (19e30 <bt_conn_lookup_addr_le+0x34>)
{
   19e02:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19e04:	f012 fabb 	bl	2c37e <bt_conn_ref>
   19e08:	4604      	mov	r4, r0

		if (!conn) {
   19e0a:	b130      	cbz	r0, 19e1a <bt_conn_lookup_addr_le+0x1e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   19e0c:	7883      	ldrb	r3, [r0, #2]
   19e0e:	2b01      	cmp	r3, #1
   19e10:	d005      	beq.n	19e1e <bt_conn_lookup_addr_le+0x22>
	old = atomic_dec(&conn->ref);
   19e12:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   19e16:	f012 fa77 	bl	2c308 <atomic_dec.isra.0>
		}

		return conn;
	}

	return NULL;
   19e1a:	2400      	movs	r4, #0
   19e1c:	e005      	b.n	19e2a <bt_conn_lookup_addr_le+0x2e>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   19e1e:	4632      	mov	r2, r6
   19e20:	4629      	mov	r1, r5
   19e22:	f012 fb9c 	bl	2c55e <bt_conn_is_peer_addr_le>
   19e26:	2800      	cmp	r0, #0
   19e28:	d0f3      	beq.n	19e12 <bt_conn_lookup_addr_le+0x16>
}
   19e2a:	4620      	mov	r0, r4
   19e2c:	bd70      	pop	{r4, r5, r6, pc}
   19e2e:	bf00      	nop
   19e30:	200020a0 	.word	0x200020a0

00019e34 <bt_conn_exists_le>:
{
   19e34:	b5b0      	push	{r4, r5, r7, lr}
   19e36:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   19e38:	f7ff ffe0 	bl	19dfc <bt_conn_lookup_addr_le>
	if (conn) {
   19e3c:	4604      	mov	r4, r0
   19e3e:	b1f8      	cbz	r0, 19e80 <bt_conn_exists_le+0x4c>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   19e40:	7b43      	ldrb	r3, [r0, #13]
	switch (state) {
   19e42:	2b08      	cmp	r3, #8
   19e44:	bf96      	itet	ls
   19e46:	4a0f      	ldrls	r2, [pc, #60]	; (19e84 <bt_conn_exists_le+0x50>)
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   19e48:	4b0f      	ldrhi	r3, [pc, #60]	; (19e88 <bt_conn_exists_le+0x54>)
   19e4a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   19e4e:	466d      	mov	r5, sp
   19e50:	b08a      	sub	sp, #40	; 0x28
   19e52:	466a      	mov	r2, sp
   19e54:	490d      	ldr	r1, [pc, #52]	; (19e8c <bt_conn_exists_le+0x58>)
   19e56:	6151      	str	r1, [r2, #20]
   19e58:	490d      	ldr	r1, [pc, #52]	; (19e90 <bt_conn_exists_le+0x5c>)
   19e5a:	480e      	ldr	r0, [pc, #56]	; (19e94 <bt_conn_exists_le+0x60>)
   19e5c:	e9c2 1306 	strd	r1, r3, [r2, #24]
   19e60:	f240 3301 	movw	r3, #769	; 0x301
   19e64:	8413      	strh	r3, [r2, #32]
   19e66:	4b0c      	ldr	r3, [pc, #48]	; (19e98 <bt_conn_exists_le+0x64>)
   19e68:	f842 3f10 	str.w	r3, [r2, #16]!
   19e6c:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   19e70:	f012 fa47 	bl	2c302 <z_log_msg_static_create.constprop.0>
	old = atomic_dec(&conn->ref);
   19e74:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   19e78:	46ad      	mov	sp, r5
   19e7a:	f012 fa45 	bl	2c308 <atomic_dec.isra.0>
		return true;
   19e7e:	2001      	movs	r0, #1
}
   19e80:	46bd      	mov	sp, r7
   19e82:	bdb0      	pop	{r4, r5, r7, pc}
   19e84:	00030268 	.word	0x00030268
   19e88:	00033040 	.word	0x00033040
   19e8c:	0003309a 	.word	0x0003309a
   19e90:	00033193 	.word	0x00033193
   19e94:	0002fbe4 	.word	0x0002fbe4
   19e98:	01000004 	.word	0x01000004

00019e9c <conn_le_create_common_checks>:
}
#endif /* defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

static int conn_le_create_common_checks(const bt_addr_le_t *peer,
					const struct bt_le_conn_param *conn_param)
{
   19e9c:	b538      	push	{r3, r4, r5, lr}
   19e9e:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19ea0:	4814      	ldr	r0, [pc, #80]	; (19ef4 <conn_le_create_common_checks+0x58>)
   19ea2:	f012 fa28 	bl	2c2f6 <atomic_get>

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19ea6:	0740      	lsls	r0, r0, #29
   19ea8:	d402      	bmi.n	19eb0 <conn_le_create_common_checks+0x14>
		return -EAGAIN;
   19eaa:	f06f 000a 	mvn.w	r0, #10
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
		return -EINVAL;
	}

	return 0;
}
   19eae:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   19eb0:	4608      	mov	r0, r1
   19eb2:	f012 f8f4 	bl	2c09e <bt_le_conn_params_valid>
   19eb6:	b910      	cbnz	r0, 19ebe <conn_le_create_common_checks+0x22>
		return -EINVAL;
   19eb8:	f06f 0015 	mvn.w	r0, #21
   19ebc:	e7f7      	b.n	19eae <conn_le_create_common_checks+0x12>
   19ebe:	480d      	ldr	r0, [pc, #52]	; (19ef4 <conn_le_create_common_checks+0x58>)
   19ec0:	f012 fa19 	bl	2c2f6 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   19ec4:	0602      	lsls	r2, r0, #24
   19ec6:	d4f0      	bmi.n	19eaa <conn_le_create_common_checks+0xe>
   19ec8:	480a      	ldr	r0, [pc, #40]	; (19ef4 <conn_le_create_common_checks+0x58>)
   19eca:	f012 fa14 	bl	2c2f6 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   19ece:	04c3      	lsls	r3, r0, #19
   19ed0:	f3c0 3500 	ubfx	r5, r0, #12, #1
   19ed4:	d40a      	bmi.n	19eec <conn_le_create_common_checks+0x50>
	if (!bt_id_scan_random_addr_check()) {
   19ed6:	f012 f9bf 	bl	2c258 <bt_id_scan_random_addr_check>
   19eda:	2800      	cmp	r0, #0
   19edc:	d0ec      	beq.n	19eb8 <conn_le_create_common_checks+0x1c>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   19ede:	4621      	mov	r1, r4
   19ee0:	4628      	mov	r0, r5
   19ee2:	f7ff ffa7 	bl	19e34 <bt_conn_exists_le>
   19ee6:	2800      	cmp	r0, #0
   19ee8:	d0e1      	beq.n	19eae <conn_le_create_common_checks+0x12>
   19eea:	e7e5      	b.n	19eb8 <conn_le_create_common_checks+0x1c>
		return -EALREADY;
   19eec:	f06f 0077 	mvn.w	r0, #119	; 0x77
   19ef0:	e7dd      	b.n	19eae <conn_le_create_common_checks+0x12>
   19ef2:	bf00      	nop
   19ef4:	2000045c 	.word	0x2000045c

00019ef8 <bt_conn_lookup_state_le>:
{
   19ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19efa:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19efc:	480f      	ldr	r0, [pc, #60]	; (19f3c <bt_conn_lookup_state_le+0x44>)
{
   19efe:	460e      	mov	r6, r1
   19f00:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19f02:	f012 fa3c 	bl	2c37e <bt_conn_ref>
		if (!conn) {
   19f06:	4604      	mov	r4, r0
   19f08:	b130      	cbz	r0, 19f18 <bt_conn_lookup_state_le+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
   19f0a:	7883      	ldrb	r3, [r0, #2]
   19f0c:	2b01      	cmp	r3, #1
   19f0e:	d005      	beq.n	19f1c <bt_conn_lookup_state_le+0x24>
	old = atomic_dec(&conn->ref);
   19f10:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   19f14:	f012 f9f8 	bl	2c308 <atomic_dec.isra.0>
	return NULL;
   19f18:	2400      	movs	r4, #0
   19f1a:	e00c      	b.n	19f36 <bt_conn_lookup_state_le+0x3e>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   19f1c:	b12e      	cbz	r6, 19f2a <bt_conn_lookup_state_le+0x32>
   19f1e:	4632      	mov	r2, r6
   19f20:	4629      	mov	r1, r5
   19f22:	f012 fb1c 	bl	2c55e <bt_conn_is_peer_addr_le>
   19f26:	2800      	cmp	r0, #0
   19f28:	d0f2      	beq.n	19f10 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   19f2a:	7b63      	ldrb	r3, [r4, #13]
   19f2c:	42bb      	cmp	r3, r7
   19f2e:	d1ef      	bne.n	19f10 <bt_conn_lookup_state_le+0x18>
   19f30:	7a23      	ldrb	r3, [r4, #8]
   19f32:	42ab      	cmp	r3, r5
   19f34:	d1ec      	bne.n	19f10 <bt_conn_lookup_state_le+0x18>
}
   19f36:	4620      	mov	r0, r4
   19f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19f3a:	bf00      	nop
   19f3c:	200020a0 	.word	0x200020a0

00019f40 <bt_conn_le_create>:
	return conn;
}

int bt_conn_le_create(const bt_addr_le_t *peer, const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param, struct bt_conn **ret_conn)
{
   19f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f44:	460f      	mov	r7, r1
	struct bt_conn *conn;
	int err;

	err = conn_le_create_common_checks(peer, conn_param);
   19f46:	4611      	mov	r1, r2
{
   19f48:	4605      	mov	r5, r0
   19f4a:	4614      	mov	r4, r2
   19f4c:	4698      	mov	r8, r3
	err = conn_le_create_common_checks(peer, conn_param);
   19f4e:	f7ff ffa5 	bl	19e9c <conn_le_create_common_checks>
	if (err) {
   19f52:	4606      	mov	r6, r0
   19f54:	2800      	cmp	r0, #0
   19f56:	d136      	bne.n	19fc6 <bt_conn_le_create+0x86>

	if (!create_param_validate(create_param)) {
		return -EINVAL;
	}

	conn = conn_le_create_helper(peer, conn_param);
   19f58:	4621      	mov	r1, r4
   19f5a:	4628      	mov	r0, r5
   19f5c:	f012 fada 	bl	2c514 <conn_le_create_helper>
	if (!conn) {
   19f60:	4604      	mov	r4, r0
   19f62:	2800      	cmp	r0, #0
   19f64:	d04a      	beq.n	19ffc <bt_conn_le_create+0xbc>
	bt_dev.create_param = *param;
   19f66:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   19f6a:	4d26      	ldr	r5, [pc, #152]	; (1a004 <bt_conn_le_create+0xc4>)
   19f6c:	f105 0c08 	add.w	ip, r5, #8
   19f70:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   19f74:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   19f76:	2b00      	cmp	r3, #0
   19f78:	bf08      	it	eq
   19f7a:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   19f7e:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   19f80:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   19f82:	b903      	cbnz	r3, 19f86 <bt_conn_le_create+0x46>
   19f84:	89ab      	ldrh	r3, [r5, #12]
   19f86:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   19f88:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   19f8a:	b903      	cbnz	r3, 19f8e <bt_conn_le_create+0x4e>
   19f8c:	89eb      	ldrh	r3, [r5, #14]
	}

	create_param_setup(create_param);

#if defined(CONFIG_BT_SMP)
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   19f8e:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
	bt_dev.create_param.window_coded =
   19f92:	826b      	strh	r3, [r5, #18]
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   19f94:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
   19f98:	429a      	cmp	r2, r3
   19f9a:	d917      	bls.n	19fcc <bt_conn_le_create+0x8c>
		/* Use host-based identity resolving. */
		bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   19f9c:	2102      	movs	r1, #2
   19f9e:	4620      	mov	r0, r4
   19fa0:	f7ff fcf4 	bl	1998c <bt_conn_set_state>

		err = bt_le_scan_update(true);
   19fa4:	2001      	movs	r0, #1
   19fa6:	f7fe fe91 	bl	18ccc <bt_le_scan_update>
		if (err) {
   19faa:	4605      	mov	r5, r0
   19fac:	b148      	cbz	r0, 19fc2 <bt_conn_le_create+0x82>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19fae:	4620      	mov	r0, r4
   19fb0:	2100      	movs	r1, #0
   19fb2:	f7ff fceb 	bl	1998c <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
   19fb6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   19fba:	f012 f9a5 	bl	2c308 <atomic_dec.isra.0>
		conn->err = 0;
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
		bt_conn_unref(conn);

		bt_le_scan_update(false);
		return err;
   19fbe:	462e      	mov	r6, r5
   19fc0:	e001      	b.n	19fc6 <bt_conn_le_create+0x86>
		*ret_conn = conn;
   19fc2:	f8c8 4000 	str.w	r4, [r8]
	}

	*ret_conn = conn;
	return 0;
}
   19fc6:	4630      	mov	r0, r6
   19fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   19fcc:	2106      	movs	r1, #6
   19fce:	4620      	mov	r0, r4
   19fd0:	f7ff fcdc 	bl	1998c <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   19fd4:	4620      	mov	r0, r4
   19fd6:	f7fd fcd3 	bl	17980 <bt_le_create_conn>
	if (err) {
   19fda:	4605      	mov	r5, r0
   19fdc:	2800      	cmp	r0, #0
   19fde:	d0f0      	beq.n	19fc2 <bt_conn_le_create+0x82>
		conn->err = 0;
   19fe0:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19fe2:	4620      	mov	r0, r4
		conn->err = 0;
   19fe4:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19fe6:	4631      	mov	r1, r6
   19fe8:	f7ff fcd0 	bl	1998c <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
   19fec:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   19ff0:	f012 f98a 	bl	2c308 <atomic_dec.isra.0>
		bt_le_scan_update(false);
   19ff4:	4630      	mov	r0, r6
   19ff6:	f7fe fe69 	bl	18ccc <bt_le_scan_update>
   19ffa:	e7e0      	b.n	19fbe <bt_conn_le_create+0x7e>
		return -ENOMEM;
   19ffc:	f06f 060b 	mvn.w	r6, #11
   1a000:	e7e1      	b.n	19fc6 <bt_conn_le_create+0x86>
   1a002:	bf00      	nop
   1a004:	20000388 	.word	0x20000388

0001a008 <bt_le_set_auto_conn>:
}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   1a008:	b570      	push	{r4, r5, r6, lr}
   1a00a:	4606      	mov	r6, r0
   1a00c:	4835      	ldr	r0, [pc, #212]	; (1a0e4 <bt_le_set_auto_conn+0xdc>)
   1a00e:	f012 f972 	bl	2c2f6 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a012:	0740      	lsls	r0, r0, #29
{
   1a014:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a016:	d55e      	bpl.n	1a0d6 <bt_le_set_auto_conn+0xce>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   1a018:	b929      	cbnz	r1, 1a026 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   1a01a:	f012 f91d 	bl	2c258 <bt_id_scan_random_addr_check>
   1a01e:	b940      	cbnz	r0, 1a032 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   1a020:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   1a024:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   1a026:	4608      	mov	r0, r1
   1a028:	f012 f839 	bl	2c09e <bt_le_conn_params_valid>
   1a02c:	2800      	cmp	r0, #0
   1a02e:	d1f4      	bne.n	1a01a <bt_le_set_auto_conn+0x12>
   1a030:	e7f6      	b.n	1a020 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   1a032:	4631      	mov	r1, r6
   1a034:	2000      	movs	r0, #0
   1a036:	f7ff fee1 	bl	19dfc <bt_conn_lookup_addr_le>
	if (!conn) {
   1a03a:	4604      	mov	r4, r0
   1a03c:	b928      	cbnz	r0, 1a04a <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   1a03e:	4631      	mov	r1, r6
   1a040:	f7ff fec0 	bl	19dc4 <bt_conn_add_le>
		if (!conn) {
   1a044:	4604      	mov	r4, r0
   1a046:	2800      	cmp	r0, #0
   1a048:	d048      	beq.n	1a0dc <bt_le_set_auto_conn+0xd4>
		if (!atomic_test_and_set_bit(conn->flags,
   1a04a:	1d20      	adds	r0, r4, #4
	old = atomic_dec(&conn->ref);
   1a04c:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
	if (param) {
   1a050:	b385      	cbz	r5, 1a0b4 <bt_le_set_auto_conn+0xac>
	conn->le.interval_min = param->interval_min;
   1a052:	882b      	ldrh	r3, [r5, #0]
   1a054:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   1a058:	886b      	ldrh	r3, [r5, #2]
   1a05a:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   1a05e:	88ab      	ldrh	r3, [r5, #4]
   1a060:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   1a064:	88eb      	ldrh	r3, [r5, #6]
   1a066:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
   1a06a:	f3bf 8f5b 	dmb	ish
   1a06e:	e850 3f00 	ldrex	r3, [r0]
   1a072:	f043 0201 	orr.w	r2, r3, #1
   1a076:	e840 2100 	strex	r1, r2, [r0]
   1a07a:	2900      	cmp	r1, #0
   1a07c:	d1f7      	bne.n	1a06e <bt_le_set_auto_conn+0x66>
   1a07e:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
   1a082:	07d9      	lsls	r1, r3, #31
   1a084:	d402      	bmi.n	1a08c <bt_le_set_auto_conn+0x84>
			bt_conn_ref(conn);
   1a086:	4620      	mov	r0, r4
   1a088:	f012 f979 	bl	2c37e <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   1a08c:	7b63      	ldrb	r3, [r4, #13]
   1a08e:	b963      	cbnz	r3, 1a0aa <bt_le_set_auto_conn+0xa2>
   1a090:	4814      	ldr	r0, [pc, #80]	; (1a0e4 <bt_le_set_auto_conn+0xdc>)
   1a092:	f012 f930 	bl	2c2f6 <atomic_get>
   1a096:	0743      	lsls	r3, r0, #29
   1a098:	d507      	bpl.n	1a0aa <bt_le_set_auto_conn+0xa2>
		if (param) {
   1a09a:	b11d      	cbz	r5, 1a0a4 <bt_le_set_auto_conn+0x9c>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   1a09c:	2102      	movs	r1, #2
   1a09e:	4620      	mov	r0, r4
   1a0a0:	f7ff fc74 	bl	1998c <bt_conn_set_state>
		bt_le_scan_update(false);
   1a0a4:	2000      	movs	r0, #0
   1a0a6:	f7fe fe11 	bl	18ccc <bt_le_scan_update>
	old = atomic_dec(&conn->ref);
   1a0aa:	4630      	mov	r0, r6
   1a0ac:	f012 f92c 	bl	2c308 <atomic_dec.isra.0>
	return 0;
   1a0b0:	2000      	movs	r0, #0
   1a0b2:	e7b7      	b.n	1a024 <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a0b4:	f06f 0101 	mvn.w	r1, #1
   1a0b8:	f012 f90e 	bl	2c2d8 <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
   1a0bc:	07c2      	lsls	r2, r0, #31
   1a0be:	d5e5      	bpl.n	1a08c <bt_le_set_auto_conn+0x84>
	old = atomic_dec(&conn->ref);
   1a0c0:	4630      	mov	r0, r6
   1a0c2:	f012 f921 	bl	2c308 <atomic_dec.isra.0>
			if (conn->state == BT_CONN_CONNECTING_SCAN) {
   1a0c6:	7b63      	ldrb	r3, [r4, #13]
   1a0c8:	2b02      	cmp	r3, #2
   1a0ca:	d1df      	bne.n	1a08c <bt_le_set_auto_conn+0x84>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a0cc:	4629      	mov	r1, r5
   1a0ce:	4620      	mov	r0, r4
   1a0d0:	f7ff fc5c 	bl	1998c <bt_conn_set_state>
   1a0d4:	e7da      	b.n	1a08c <bt_le_set_auto_conn+0x84>
		return -EAGAIN;
   1a0d6:	f06f 000a 	mvn.w	r0, #10
   1a0da:	e7a3      	b.n	1a024 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   1a0dc:	f06f 000b 	mvn.w	r0, #11
   1a0e0:	e7a0      	b.n	1a024 <bt_le_set_auto_conn+0x1c>
   1a0e2:	bf00      	nop
   1a0e4:	2000045c 	.word	0x2000045c

0001a0e8 <send_conn_le_param_update>:
{
   1a0e8:	b538      	push	{r3, r4, r5, lr}
   1a0ea:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1a0ec:	4608      	mov	r0, r1
{
   1a0ee:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1a0f0:	f011 ffd5 	bl	2c09e <bt_le_conn_params_valid>
   1a0f4:	b338      	cbz	r0, 1a146 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1a0f6:	4b15      	ldr	r3, [pc, #84]	; (1a14c <send_conn_le_param_update+0x64>)
   1a0f8:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   1a0fc:	0799      	lsls	r1, r3, #30
   1a0fe:	d407      	bmi.n	1a110 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1a100:	78e3      	ldrb	r3, [r4, #3]
   1a102:	b173      	cbz	r3, 1a122 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   1a104:	4629      	mov	r1, r5
   1a106:	4620      	mov	r0, r4
}
   1a108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1a10c:	f000 bb14 	b.w	1a738 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1a110:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   1a114:	079a      	lsls	r2, r3, #30
   1a116:	d5f3      	bpl.n	1a100 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a118:	1d20      	adds	r0, r4, #4
   1a11a:	f012 f8ec 	bl	2c2f6 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1a11e:	0543      	lsls	r3, r0, #21
   1a120:	d4ee      	bmi.n	1a100 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1a122:	4629      	mov	r1, r5
   1a124:	4620      	mov	r0, r4
   1a126:	f012 fa73 	bl	2c610 <bt_conn_le_conn_update>
		if (rc == 0) {
   1a12a:	b958      	cbnz	r0, 1a144 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   1a12c:	882b      	ldrh	r3, [r5, #0]
   1a12e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   1a132:	886b      	ldrh	r3, [r5, #2]
   1a134:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1a138:	88ab      	ldrh	r3, [r5, #4]
   1a13a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1a13e:	88eb      	ldrh	r3, [r5, #6]
   1a140:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   1a144:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1a146:	f06f 0015 	mvn.w	r0, #21
   1a14a:	e7fb      	b.n	1a144 <send_conn_le_param_update+0x5c>
   1a14c:	20000388 	.word	0x20000388

0001a150 <deferred_work>:
{
   1a150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a154:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   1a156:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   1a15a:	af00      	add	r7, sp, #0
   1a15c:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1a15e:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   1a162:	bb13      	cbnz	r3, 1a1aa <deferred_work+0x5a>
		bt_l2cap_disconnected(conn);
   1a164:	4630      	mov	r0, r6
   1a166:	f012 fab0 	bl	2c6ca <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1a16a:	4b30      	ldr	r3, [pc, #192]	; (1a22c <deferred_work+0xdc>)
   1a16c:	681d      	ldr	r5, [r3, #0]
   1a16e:	b965      	cbnz	r5, 1a18a <deferred_work+0x3a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a170:	4d2f      	ldr	r5, [pc, #188]	; (1a230 <deferred_work+0xe0>)
   1a172:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1a234 <deferred_work+0xe4>
   1a176:	4545      	cmp	r5, r8
   1a178:	d30f      	bcc.n	1a19a <deferred_work+0x4a>
	old = atomic_dec(&conn->ref);
   1a17a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1a17e:	f012 f8c3 	bl	2c308 <atomic_dec.isra.0>
}
   1a182:	3708      	adds	r7, #8
   1a184:	46bd      	mov	sp, r7
   1a186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->disconnected) {
   1a18a:	686b      	ldr	r3, [r5, #4]
   1a18c:	b11b      	cbz	r3, 1a196 <deferred_work+0x46>
			cb->disconnected(conn, conn->err);
   1a18e:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1a192:	4630      	mov	r0, r6
   1a194:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1a196:	69ad      	ldr	r5, [r5, #24]
   1a198:	e7e9      	b.n	1a16e <deferred_work+0x1e>
		if (cb->disconnected) {
   1a19a:	686b      	ldr	r3, [r5, #4]
   1a19c:	b11b      	cbz	r3, 1a1a6 <deferred_work+0x56>
			cb->disconnected(conn, conn->err);
   1a19e:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1a1a2:	4630      	mov	r0, r6
   1a1a4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a1a6:	351c      	adds	r5, #28
   1a1a8:	e7e5      	b.n	1a176 <deferred_work+0x26>
	if (conn->type != BT_CONN_TYPE_LE) {
   1a1aa:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1a1ae:	2b01      	cmp	r3, #1
   1a1b0:	d1e7      	bne.n	1a182 <deferred_work+0x32>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a1b2:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   1a1b6:	b913      	cbnz	r3, 1a1be <deferred_work+0x6e>
		bt_le_create_conn_cancel();
   1a1b8:	f7fd fc44 	bl	17a44 <bt_le_create_conn_cancel>
		return;
   1a1bc:	e7e1      	b.n	1a182 <deferred_work+0x32>
	if (atomic_test_and_clear_bit(conn->flags,
   1a1be:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a1c2:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1a1c6:	4628      	mov	r0, r5
   1a1c8:	f012 f886 	bl	2c2d8 <atomic_and>
   1a1cc:	0583      	lsls	r3, r0, #22
   1a1ce:	d50d      	bpl.n	1a1ec <deferred_work+0x9c>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1a1d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1a1d2:	603b      	str	r3, [r7, #0]
		err = send_conn_le_param_update(conn, param);
   1a1d4:	4639      	mov	r1, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1a1d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1a1d8:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   1a1da:	4630      	mov	r0, r6
   1a1dc:	f7ff ff84 	bl	1a0e8 <send_conn_le_param_update>
		if (!err) {
   1a1e0:	b988      	cbnz	r0, 1a206 <deferred_work+0xb6>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a1e2:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1a1e6:	4628      	mov	r0, r5
   1a1e8:	f012 f876 	bl	2c2d8 <atomic_and>
   1a1ec:	f3bf 8f5b 	dmb	ish
   1a1f0:	e855 3f00 	ldrex	r3, [r5]
   1a1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a1f8:	e845 3200 	strex	r2, r3, [r5]
   1a1fc:	2a00      	cmp	r2, #0
   1a1fe:	d1f7      	bne.n	1a1f0 <deferred_work+0xa0>
   1a200:	f3bf 8f5b 	dmb	ish
   1a204:	e7bd      	b.n	1a182 <deferred_work+0x32>
			LOG_WRN("Send LE param update failed (err %d)", err);
   1a206:	466c      	mov	r4, sp
   1a208:	b088      	sub	sp, #32
   1a20a:	466a      	mov	r2, sp
   1a20c:	4b0a      	ldr	r3, [pc, #40]	; (1a238 <deferred_work+0xe8>)
   1a20e:	6153      	str	r3, [r2, #20]
   1a210:	4b0a      	ldr	r3, [pc, #40]	; (1a23c <deferred_work+0xec>)
   1a212:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1a216:	2304      	movs	r3, #4
   1a218:	f842 3f10 	str.w	r3, [r2, #16]!
   1a21c:	4808      	ldr	r0, [pc, #32]	; (1a240 <deferred_work+0xf0>)
   1a21e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1a222:	f012 f86e 	bl	2c302 <z_log_msg_static_create.constprop.0>
   1a226:	46a5      	mov	sp, r4
   1a228:	e7e0      	b.n	1a1ec <deferred_work+0x9c>
   1a22a:	bf00      	nop
   1a22c:	200033f0 	.word	0x200033f0
   1a230:	0002fba0 	.word	0x0002fba0
   1a234:	0002fbbc 	.word	0x0002fbbc
   1a238:	000330c1 	.word	0x000330c1
   1a23c:	000331fb 	.word	0x000331fb
   1a240:	0002fbe4 	.word	0x0002fbe4

0001a244 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1a244:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1a246:	4801      	ldr	r0, [pc, #4]	; (1a24c <bt_conn_create_frag_timeout+0x8>)
   1a248:	f7ff bcce 	b.w	19be8 <bt_conn_create_pdu_timeout>
   1a24c:	20000a28 	.word	0x20000a28

0001a250 <bt_conn_process_tx>:
{
   1a250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1a254:	7b43      	ldrb	r3, [r0, #13]
{
   1a256:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1a258:	b95b      	cbnz	r3, 1a272 <bt_conn_process_tx+0x22>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a25a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1a25e:	3004      	adds	r0, #4
   1a260:	f012 f83a 	bl	2c2d8 <atomic_and>
   1a264:	0643      	lsls	r3, r0, #25
   1a266:	d504      	bpl.n	1a272 <bt_conn_process_tx+0x22>
		conn_cleanup(conn);
   1a268:	4628      	mov	r0, r5
}
   1a26a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
   1a26e:	f012 b863 	b.w	2c338 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
   1a272:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1a276:	f014 fea8 	bl	2efca <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   1a27a:	4604      	mov	r4, r0
   1a27c:	b960      	cbnz	r0, 1a298 <bt_conn_process_tx+0x48>
   1a27e:	4a34      	ldr	r2, [pc, #208]	; (1a350 <bt_conn_process_tx+0x100>)
   1a280:	4934      	ldr	r1, [pc, #208]	; (1a354 <bt_conn_process_tx+0x104>)
   1a282:	4835      	ldr	r0, [pc, #212]	; (1a358 <bt_conn_process_tx+0x108>)
   1a284:	f44f 735d 	mov.w	r3, #884	; 0x374
   1a288:	f00f fc70 	bl	29b6c <assert_print>
   1a28c:	4040      	eors	r0, r0
   1a28e:	f380 8811 	msr	BASEPRI, r0
   1a292:	f04f 0003 	mov.w	r0, #3
   1a296:	df02      	svc	2
	buf = net_buf_ref(buf);
   1a298:	4620      	mov	r0, r4
   1a29a:	f014 f89a 	bl	2e3d2 <net_buf_ref>
	return bt_dev.le.acl_mtu;
   1a29e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 1a35c <bt_conn_process_tx+0x10c>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   1a2a2:	8a02      	ldrh	r2, [r0, #16]
   1a2a4:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   1a2a8:	429a      	cmp	r2, r3
	buf = net_buf_ref(buf);
   1a2aa:	4604      	mov	r4, r0
	return bt_dev.le.acl_mtu;
   1a2ac:	7f02      	ldrb	r2, [r0, #28]
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   1a2ae:	d807      	bhi.n	1a2c0 <bt_conn_process_tx+0x70>
   1a2b0:	b932      	cbnz	r2, 1a2c0 <bt_conn_process_tx+0x70>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   1a2b2:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
   1a2b4:	4621      	mov	r1, r4
   1a2b6:	4628      	mov	r0, r5
   1a2b8:	f7ff f8d4 	bl	19464 <send_frag>
   1a2bc:	4606      	mov	r6, r0
   1a2be:	e030      	b.n	1a322 <bt_conn_process_tx+0xd2>
	if (tx_data(buf)->is_cont) {
   1a2c0:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
   1a2c2:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
   1a2c6:	8a22      	ldrh	r2, [r4, #16]
   1a2c8:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   1a2cc:	429a      	cmp	r2, r3
   1a2ce:	d804      	bhi.n	1a2da <bt_conn_process_tx+0x8a>
	tx_data(buf)->is_cont = true;
   1a2d0:	2301      	movs	r3, #1
   1a2d2:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   1a2d4:	2200      	movs	r2, #0
   1a2d6:	2303      	movs	r3, #3
   1a2d8:	e7ec      	b.n	1a2b4 <bt_conn_process_tx+0x64>
		frag = bt_conn_create_frag(0);
   1a2da:	f04f 33ff 	mov.w	r3, #4294967295
   1a2de:	f04f 32ff 	mov.w	r2, #4294967295
   1a2e2:	2000      	movs	r0, #0
   1a2e4:	f7ff ffae 	bl	1a244 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1a2e8:	7b6b      	ldrb	r3, [r5, #13]
   1a2ea:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   1a2ec:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1a2ee:	d006      	beq.n	1a2fe <bt_conn_process_tx+0xae>
		net_buf_unref(frag);
   1a2f0:	f006 fb96 	bl	20a20 <net_buf_unref>
	net_buf_unref(buf);
   1a2f4:	4620      	mov	r0, r4
}
   1a2f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   1a2fa:	f006 bb91 	b.w	20a20 <net_buf_unref>
	tx_data(frag)->tx = NULL;
   1a2fe:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
   1a302:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
   1a306:	4602      	mov	r2, r0
   1a308:	463b      	mov	r3, r7
   1a30a:	4621      	mov	r1, r4
   1a30c:	4628      	mov	r0, r5
   1a30e:	f7ff f8a9 	bl	19464 <send_frag>
		if (err) {
   1a312:	4606      	mov	r6, r0
   1a314:	b1b8      	cbz	r0, 1a346 <bt_conn_process_tx+0xf6>
			tx_data(buf)->is_cont = flags != FRAG_START;
   1a316:	f007 0701 	and.w	r7, r7, #1
   1a31a:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
   1a31c:	4640      	mov	r0, r8
   1a31e:	f006 fb7f 	bl	20a20 <net_buf_unref>
	net_buf_unref(buf);
   1a322:	4620      	mov	r0, r4
   1a324:	f006 fb7c 	bl	20a20 <net_buf_unref>
	if (err  == -EIO) {
   1a328:	3605      	adds	r6, #5
   1a32a:	d10e      	bne.n	1a34a <bt_conn_process_tx+0xfa>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1a32c:	69a6      	ldr	r6, [r4, #24]
		tx_data(buf)->tx = NULL;
   1a32e:	2300      	movs	r3, #0
   1a330:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
   1a332:	4620      	mov	r0, r4
   1a334:	f006 fb74 	bl	20a20 <net_buf_unref>
		if (tx) {
   1a338:	b13e      	cbz	r6, 1a34a <bt_conn_process_tx+0xfa>
			conn_tx_destroy(conn, tx);
   1a33a:	4631      	mov	r1, r6
   1a33c:	4628      	mov	r0, r5
}
   1a33e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
   1a342:	f7ff b879 	b.w	19438 <conn_tx_destroy>
		flags = FRAG_CONT;
   1a346:	2701      	movs	r7, #1
   1a348:	e7bd      	b.n	1a2c6 <bt_conn_process_tx+0x76>
}
   1a34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a34e:	bf00      	nop
   1a350:	000330ea 	.word	0x000330ea
   1a354:	000346f3 	.word	0x000346f3
   1a358:	00032122 	.word	0x00032122
   1a35c:	20000388 	.word	0x20000388

0001a360 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   1a360:	b168      	cbz	r0, 1a37e <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   1a362:	2300      	movs	r3, #0
   1a364:	60c3      	str	r3, [r0, #12]
	return list->tail;
   1a366:	4b07      	ldr	r3, [pc, #28]	; (1a384 <bt_conn_auth_info_cb_register+0x24>)
   1a368:	6859      	ldr	r1, [r3, #4]
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   1a36a:	f100 020c 	add.w	r2, r0, #12
Z_GENLIST_APPEND(slist, snode)
   1a36e:	b919      	cbnz	r1, 1a378 <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   1a370:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   1a374:	2000      	movs	r0, #0
   1a376:	4770      	bx	lr
	parent->next = child;
   1a378:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1a37a:	605a      	str	r2, [r3, #4]
}
   1a37c:	e7fa      	b.n	1a374 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   1a37e:	f06f 0015 	mvn.w	r0, #21
}
   1a382:	4770      	bx	lr
   1a384:	200033f4 	.word	0x200033f4

0001a388 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1a388:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1a38a:	4816      	ldr	r0, [pc, #88]	; (1a3e4 <bt_conn_init+0x5c>)
   1a38c:	f014 fdfc 	bl	2ef88 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1a390:	4915      	ldr	r1, [pc, #84]	; (1a3e8 <bt_conn_init+0x60>)
   1a392:	4814      	ldr	r0, [pc, #80]	; (1a3e4 <bt_conn_init+0x5c>)
   1a394:	f014 fe04 	bl	2efa0 <k_queue_append>
   1a398:	4914      	ldr	r1, [pc, #80]	; (1a3ec <bt_conn_init+0x64>)
   1a39a:	4812      	ldr	r0, [pc, #72]	; (1a3e4 <bt_conn_init+0x5c>)
   1a39c:	f014 fe00 	bl	2efa0 <k_queue_append>
   1a3a0:	4913      	ldr	r1, [pc, #76]	; (1a3f0 <bt_conn_init+0x68>)
   1a3a2:	4810      	ldr	r0, [pc, #64]	; (1a3e4 <bt_conn_init+0x5c>)
   1a3a4:	f014 fdfc 	bl	2efa0 <k_queue_append>
	}

	bt_att_init();
   1a3a8:	f001 f9e4 	bl	1b774 <bt_att_init>

	err = bt_smp_init();
   1a3ac:	f005 ffc0 	bl	20330 <bt_smp_init>
	if (err) {
   1a3b0:	4605      	mov	r5, r0
   1a3b2:	b9a0      	cbnz	r0, 1a3de <bt_conn_init+0x56>
		return err;
	}

	bt_l2cap_init();
   1a3b4:	f012 fa0c 	bl	2c7d0 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a3b8:	480e      	ldr	r0, [pc, #56]	; (1a3f4 <bt_conn_init+0x6c>)
   1a3ba:	f011 ffe0 	bl	2c37e <bt_conn_ref>

			if (!conn) {
   1a3be:	4604      	mov	r4, r0
   1a3c0:	b168      	cbz	r0, 1a3de <bt_conn_init+0x56>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a3c2:	3004      	adds	r0, #4
   1a3c4:	f011 ff97 	bl	2c2f6 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   1a3c8:	07c3      	lsls	r3, r0, #31
   1a3ca:	d504      	bpl.n	1a3d6 <bt_conn_init+0x4e>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   1a3cc:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn,
   1a3ce:	2102      	movs	r1, #2
   1a3d0:	4620      	mov	r0, r4
   1a3d2:	f7ff fadb 	bl	1998c <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
   1a3d6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1a3da:	f011 ff95 	bl	2c308 <atomic_dec.isra.0>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1a3de:	4628      	mov	r0, r5
   1a3e0:	bd38      	pop	{r3, r4, r5, pc}
   1a3e2:	bf00      	nop
   1a3e4:	200009b8 	.word	0x200009b8
   1a3e8:	200033c0 	.word	0x200033c0
   1a3ec:	200033d0 	.word	0x200033d0
   1a3f0:	200033e0 	.word	0x200033e0
   1a3f4:	200020a0 	.word	0x200020a0

0001a3f8 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1a3f8:	b580      	push	{r7, lr}
   1a3fa:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1a3fc:	b088      	sub	sp, #32
   1a3fe:	466a      	mov	r2, sp
   1a400:	4b07      	ldr	r3, [pc, #28]	; (1a420 <l2cap_create_le_sig_pdu.part.0+0x28>)
   1a402:	6153      	str	r3, [r2, #20]
   1a404:	4b07      	ldr	r3, [pc, #28]	; (1a424 <l2cap_create_le_sig_pdu.part.0+0x2c>)
   1a406:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1a40a:	2304      	movs	r3, #4
   1a40c:	f842 3f10 	str.w	r3, [r2, #16]!
   1a410:	4805      	ldr	r0, [pc, #20]	; (1a428 <l2cap_create_le_sig_pdu.part.0+0x30>)
   1a412:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a416:	f012 f924 	bl	2c662 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   1a41a:	2000      	movs	r0, #0
   1a41c:	46bd      	mov	sp, r7
   1a41e:	bd80      	pop	{r7, pc}
   1a420:	00033209 	.word	0x00033209
   1a424:	000333f5 	.word	0x000333f5
   1a428:	0002fc34 	.word	0x0002fc34

0001a42c <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1a42c:	b580      	push	{r7, lr}
   1a42e:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   1a430:	b088      	sub	sp, #32
   1a432:	466a      	mov	r2, sp
   1a434:	4b08      	ldr	r3, [pc, #32]	; (1a458 <l2cap_accept.part.0+0x2c>)
   1a436:	6153      	str	r3, [r2, #20]
   1a438:	4b08      	ldr	r3, [pc, #32]	; (1a45c <l2cap_accept.part.0+0x30>)
   1a43a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1a43e:	2304      	movs	r3, #4
   1a440:	f842 3f10 	str.w	r3, [r2, #16]!
   1a444:	4806      	ldr	r0, [pc, #24]	; (1a460 <l2cap_accept.part.0+0x34>)
   1a446:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a44a:	f012 f90a 	bl	2c662 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1a44e:	f06f 000b 	mvn.w	r0, #11
   1a452:	46bd      	mov	sp, r7
   1a454:	bd80      	pop	{r7, pc}
   1a456:	bf00      	nop
   1a458:	00033235 	.word	0x00033235
   1a45c:	000333e8 	.word	0x000333e8
   1a460:	0002fc34 	.word	0x0002fc34

0001a464 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   1a464:	4b04      	ldr	r3, [pc, #16]	; (1a478 <l2cap_accept+0x14>)
   1a466:	681a      	ldr	r2, [r3, #0]
   1a468:	b10a      	cbz	r2, 1a46e <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1a46a:	f7ff bfdf 	b.w	1a42c <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   1a46e:	4803      	ldr	r0, [pc, #12]	; (1a47c <l2cap_accept+0x18>)
   1a470:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   1a472:	600b      	str	r3, [r1, #0]
}
   1a474:	4610      	mov	r0, r2
   1a476:	4770      	bx	lr
   1a478:	20003400 	.word	0x20003400
   1a47c:	000302ac 	.word	0x000302ac

0001a480 <bt_l2cap_connected>:
{
   1a480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a482:	4d24      	ldr	r5, [pc, #144]	; (1a514 <bt_l2cap_connected+0x94>)
   1a484:	4f24      	ldr	r7, [pc, #144]	; (1a518 <bt_l2cap_connected+0x98>)
{
   1a486:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a488:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a48a:	42bd      	cmp	r5, r7
   1a48c:	d301      	bcc.n	1a492 <bt_l2cap_connected+0x12>
}
   1a48e:	b003      	add	sp, #12
   1a490:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1a492:	686b      	ldr	r3, [r5, #4]
   1a494:	a901      	add	r1, sp, #4
   1a496:	4620      	mov	r0, r4
   1a498:	4798      	blx	r3
   1a49a:	2800      	cmp	r0, #0
   1a49c:	db34      	blt.n	1a508 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1a49e:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1a4a0:	882a      	ldrh	r2, [r5, #0]
   1a4a2:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   1a4a4:	849a      	strh	r2, [r3, #36]	; 0x24
   1a4a6:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1a4aa:	68a8      	ldr	r0, [r5, #8]
   1a4ac:	f3bf 8f5b 	dmb	ish
   1a4b0:	e852 1f00 	ldrex	r1, [r2]
   1a4b4:	e842 6c00 	strex	ip, r6, [r2]
   1a4b8:	f1bc 0f00 	cmp.w	ip, #0
   1a4bc:	d1f8      	bne.n	1a4b0 <bt_l2cap_connected+0x30>
   1a4be:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   1a4c2:	609e      	str	r6, [r3, #8]
	return list->tail;
   1a4c4:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   1a4c6:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   1a4ca:	b9f9      	cbnz	r1, 1a50c <bt_l2cap_connected+0x8c>
	list->head = node;
   1a4cc:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   1a4d0:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   1a4d2:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   1a4d4:	9801      	ldr	r0, [sp, #4]
   1a4d6:	6843      	ldr	r3, [r0, #4]
   1a4d8:	681b      	ldr	r3, [r3, #0]
   1a4da:	b103      	cbz	r3, 1a4de <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   1a4dc:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a4de:	9b01      	ldr	r3, [sp, #4]
   1a4e0:	f3bf 8f5b 	dmb	ish
   1a4e4:	3310      	adds	r3, #16
   1a4e6:	e853 1f00 	ldrex	r1, [r3]
   1a4ea:	f041 0101 	orr.w	r1, r1, #1
   1a4ee:	e843 1200 	strex	r2, r1, [r3]
   1a4f2:	2a00      	cmp	r2, #0
   1a4f4:	d1f7      	bne.n	1a4e6 <bt_l2cap_connected+0x66>
   1a4f6:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1a4fa:	9801      	ldr	r0, [sp, #4]
   1a4fc:	6843      	ldr	r3, [r0, #4]
   1a4fe:	69db      	ldr	r3, [r3, #28]
   1a500:	b113      	cbz	r3, 1a508 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   1a502:	f100 0110 	add.w	r1, r0, #16
   1a506:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a508:	350c      	adds	r5, #12
   1a50a:	e7be      	b.n	1a48a <bt_l2cap_connected+0xa>
	parent->next = child;
   1a50c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1a50e:	6562      	str	r2, [r4, #84]	; 0x54
}
   1a510:	e7de      	b.n	1a4d0 <bt_l2cap_connected+0x50>
   1a512:	bf00      	nop
   1a514:	0002fb7c 	.word	0x0002fb7c
   1a518:	0002fba0 	.word	0x0002fba0

0001a51c <l2cap_recv>:
{
   1a51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a520:	b084      	sub	sp, #16
	if (buf->len < sizeof(*hdr)) {
   1a522:	8a0b      	ldrh	r3, [r1, #16]
   1a524:	2b03      	cmp	r3, #3
{
   1a526:	af02      	add	r7, sp, #8
   1a528:	4606      	mov	r6, r0
   1a52a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1a52c:	d80c      	bhi.n	1a548 <l2cap_recv+0x2c>
		LOG_ERR("Too small L2CAP signaling PDU");
   1a52e:	466c      	mov	r4, sp
   1a530:	b088      	sub	sp, #32
   1a532:	aa02      	add	r2, sp, #8
   1a534:	4b54      	ldr	r3, [pc, #336]	; (1a688 <l2cap_recv+0x16c>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1a536:	6153      	str	r3, [r2, #20]
   1a538:	4b54      	ldr	r3, [pc, #336]	; (1a68c <l2cap_recv+0x170>)
   1a53a:	6193      	str	r3, [r2, #24]
   1a53c:	2303      	movs	r3, #3
   1a53e:	f842 3f10 	str.w	r3, [r2, #16]!
   1a542:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a546:	e017      	b.n	1a578 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a548:	2104      	movs	r1, #4
   1a54a:	f105 000c 	add.w	r0, r5, #12
   1a54e:	f013 ffa1 	bl	2e494 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   1a552:	8843      	ldrh	r3, [r0, #2]
   1a554:	4604      	mov	r4, r0
	if (buf->len != len) {
   1a556:	8a28      	ldrh	r0, [r5, #16]
   1a558:	4298      	cmp	r0, r3
   1a55a:	d016      	beq.n	1a58a <l2cap_recv+0x6e>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1a55c:	466c      	mov	r4, sp
   1a55e:	b08a      	sub	sp, #40	; 0x28
   1a560:	aa02      	add	r2, sp, #8
   1a562:	494b      	ldr	r1, [pc, #300]	; (1a690 <l2cap_recv+0x174>)
   1a564:	6151      	str	r1, [r2, #20]
   1a566:	4949      	ldr	r1, [pc, #292]	; (1a68c <l2cap_recv+0x170>)
   1a568:	6213      	str	r3, [r2, #32]
   1a56a:	2305      	movs	r3, #5
   1a56c:	e9c2 1006 	strd	r1, r0, [r2, #24]
   1a570:	f842 3f10 	str.w	r3, [r2, #16]!
   1a574:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1a578:	4846      	ldr	r0, [pc, #280]	; (1a694 <l2cap_recv+0x178>)
   1a57a:	f012 f872 	bl	2c662 <z_log_msg_static_create.constprop.0>
   1a57e:	46a5      	mov	sp, r4
}
   1a580:	2000      	movs	r0, #0
   1a582:	3708      	adds	r7, #8
   1a584:	46bd      	mov	sp, r7
   1a586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!hdr->ident) {
   1a58a:	7861      	ldrb	r1, [r4, #1]
   1a58c:	b921      	cbnz	r1, 1a598 <l2cap_recv+0x7c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1a58e:	466c      	mov	r4, sp
   1a590:	b088      	sub	sp, #32
   1a592:	aa02      	add	r2, sp, #8
   1a594:	4b40      	ldr	r3, [pc, #256]	; (1a698 <l2cap_recv+0x17c>)
   1a596:	e7ce      	b.n	1a536 <l2cap_recv+0x1a>
	switch (hdr->code) {
   1a598:	7823      	ldrb	r3, [r4, #0]
   1a59a:	2b12      	cmp	r3, #18
   1a59c:	d020      	beq.n	1a5e0 <l2cap_recv+0xc4>
   1a59e:	2b13      	cmp	r3, #19
   1a5a0:	d015      	beq.n	1a5ce <l2cap_recv+0xb2>
   1a5a2:	2b01      	cmp	r3, #1
   1a5a4:	d0ec      	beq.n	1a580 <l2cap_recv+0x64>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1a5a6:	466d      	mov	r5, sp
   1a5a8:	b088      	sub	sp, #32
   1a5aa:	aa02      	add	r2, sp, #8
   1a5ac:	493b      	ldr	r1, [pc, #236]	; (1a69c <l2cap_recv+0x180>)
   1a5ae:	6151      	str	r1, [r2, #20]
   1a5b0:	4936      	ldr	r1, [pc, #216]	; (1a68c <l2cap_recv+0x170>)
   1a5b2:	4838      	ldr	r0, [pc, #224]	; (1a694 <l2cap_recv+0x178>)
	switch (hdr->code) {
   1a5b4:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1a5b8:	2304      	movs	r3, #4
   1a5ba:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1a5be:	f842 3f10 	str.w	r3, [r2, #16]!
   1a5c2:	f012 f84e 	bl	2c662 <z_log_msg_static_create.constprop.0>
   1a5c6:	46ad      	mov	sp, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   1a5c8:	7861      	ldrb	r1, [r4, #1]
   1a5ca:	6830      	ldr	r0, [r6, #0]
   1a5cc:	e029      	b.n	1a622 <l2cap_recv+0x106>
	if (buf->len < sizeof(*rsp)) {
   1a5ce:	2801      	cmp	r0, #1
   1a5d0:	d8d6      	bhi.n	1a580 <l2cap_recv+0x64>
		LOG_ERR("Too small LE conn param rsp");
   1a5d2:	466c      	mov	r4, sp
   1a5d4:	b088      	sub	sp, #32
   1a5d6:	aa02      	add	r2, sp, #8
   1a5d8:	4b31      	ldr	r3, [pc, #196]	; (1a6a0 <l2cap_recv+0x184>)
   1a5da:	6153      	str	r3, [r2, #20]
   1a5dc:	4b31      	ldr	r3, [pc, #196]	; (1a6a4 <l2cap_recv+0x188>)
   1a5de:	e7ac      	b.n	1a53a <l2cap_recv+0x1e>
	if (buf->len < sizeof(*req)) {
   1a5e0:	2807      	cmp	r0, #7
   1a5e2:	6834      	ldr	r4, [r6, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1a5e4:	68ea      	ldr	r2, [r5, #12]
	if (buf->len < sizeof(*req)) {
   1a5e6:	d806      	bhi.n	1a5f6 <l2cap_recv+0xda>
		LOG_ERR("Too small LE conn update param req");
   1a5e8:	466c      	mov	r4, sp
   1a5ea:	b088      	sub	sp, #32
   1a5ec:	aa02      	add	r2, sp, #8
   1a5ee:	4b2e      	ldr	r3, [pc, #184]	; (1a6a8 <l2cap_recv+0x18c>)
   1a5f0:	6153      	str	r3, [r2, #20]
   1a5f2:	4b2e      	ldr	r3, [pc, #184]	; (1a6ac <l2cap_recv+0x190>)
   1a5f4:	e7a1      	b.n	1a53a <l2cap_recv+0x1e>
	if (conn->state != BT_CONN_CONNECTED) {
   1a5f6:	7b63      	ldrb	r3, [r4, #13]
   1a5f8:	2b07      	cmp	r3, #7
   1a5fa:	d00c      	beq.n	1a616 <l2cap_recv+0xfa>
		LOG_WRN("Not connected");
   1a5fc:	466c      	mov	r4, sp
   1a5fe:	b088      	sub	sp, #32
   1a600:	aa02      	add	r2, sp, #8
   1a602:	4b2b      	ldr	r3, [pc, #172]	; (1a6b0 <l2cap_recv+0x194>)
   1a604:	6153      	str	r3, [r2, #20]
   1a606:	4b29      	ldr	r3, [pc, #164]	; (1a6ac <l2cap_recv+0x190>)
   1a608:	6193      	str	r3, [r2, #24]
   1a60a:	2303      	movs	r3, #3
   1a60c:	f842 3f10 	str.w	r3, [r2, #16]!
   1a610:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a614:	e7b0      	b.n	1a578 <l2cap_recv+0x5c>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   1a616:	f894 8003 	ldrb.w	r8, [r4, #3]
   1a61a:	f1b8 0f00 	cmp.w	r8, #0
   1a61e:	d003      	beq.n	1a628 <l2cap_recv+0x10c>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1a620:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   1a622:	f012 f8a3 	bl	2c76c <l2cap_send_reject.constprop.0>
		break;
   1a626:	e7ab      	b.n	1a580 <l2cap_recv+0x64>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1a628:	8813      	ldrh	r3, [r2, #0]
   1a62a:	803b      	strh	r3, [r7, #0]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   1a62c:	8853      	ldrh	r3, [r2, #2]
   1a62e:	807b      	strh	r3, [r7, #2]
	param.latency = sys_le16_to_cpu(req->latency);
   1a630:	8893      	ldrh	r3, [r2, #4]
   1a632:	80bb      	strh	r3, [r7, #4]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1a634:	88d3      	ldrh	r3, [r2, #6]
   1a636:	80fb      	strh	r3, [r7, #6]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1a638:	2202      	movs	r2, #2
   1a63a:	2013      	movs	r0, #19
   1a63c:	f012 f814 	bl	2c668 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1a640:	4605      	mov	r5, r0
   1a642:	2800      	cmp	r0, #0
   1a644:	d09c      	beq.n	1a580 <l2cap_recv+0x64>
	accepted = le_param_req(conn, &param);
   1a646:	4639      	mov	r1, r7
   1a648:	4620      	mov	r0, r4
   1a64a:	f7ff fb25 	bl	19c98 <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   1a64e:	2102      	movs	r1, #2
   1a650:	4606      	mov	r6, r0
   1a652:	f105 000c 	add.w	r0, r5, #12
   1a656:	f013 feec 	bl	2e432 <net_buf_simple_add>
	if (accepted) {
   1a65a:	f086 0301 	eor.w	r3, r6, #1
   1a65e:	b2db      	uxtb	r3, r3
   1a660:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1a662:	462a      	mov	r2, r5
   1a664:	f8cd 8000 	str.w	r8, [sp]
   1a668:	4643      	mov	r3, r8
   1a66a:	2105      	movs	r1, #5
   1a66c:	4620      	mov	r0, r4
   1a66e:	f012 f864 	bl	2c73a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1a672:	b110      	cbz	r0, 1a67a <l2cap_recv+0x15e>
		net_buf_unref(buf);
   1a674:	4628      	mov	r0, r5
   1a676:	f006 f9d3 	bl	20a20 <net_buf_unref>
	if (accepted) {
   1a67a:	2e00      	cmp	r6, #0
   1a67c:	d080      	beq.n	1a580 <l2cap_recv+0x64>
		bt_conn_le_conn_update(conn, &param);
   1a67e:	4639      	mov	r1, r7
   1a680:	4620      	mov	r0, r4
   1a682:	f011 ffc5 	bl	2c610 <bt_conn_le_conn_update>
   1a686:	e77b      	b.n	1a580 <l2cap_recv+0x64>
   1a688:	00033260 	.word	0x00033260
   1a68c:	000333dd 	.word	0x000333dd
   1a690:	00033282 	.word	0x00033282
   1a694:	0002fc34 	.word	0x0002fc34
   1a698:	000332a7 	.word	0x000332a7
   1a69c:	00033325 	.word	0x00033325
   1a6a0:	000332cc 	.word	0x000332cc
   1a6a4:	000333cb 	.word	0x000333cb
   1a6a8:	000332ec 	.word	0x000332ec
   1a6ac:	000333b2 	.word	0x000333b2
   1a6b0:	00033313 	.word	0x00033313

0001a6b4 <bt_l2cap_recv>:
{
   1a6b4:	b5b0      	push	{r4, r5, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1a6b6:	8a0b      	ldrh	r3, [r1, #16]
   1a6b8:	2b03      	cmp	r3, #3
{
   1a6ba:	af00      	add	r7, sp, #0
   1a6bc:	4605      	mov	r5, r0
   1a6be:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1a6c0:	d814      	bhi.n	1a6ec <bt_l2cap_recv+0x38>
		LOG_ERR("Too small L2CAP PDU received");
   1a6c2:	466d      	mov	r5, sp
   1a6c4:	b088      	sub	sp, #32
   1a6c6:	466a      	mov	r2, sp
   1a6c8:	4b17      	ldr	r3, [pc, #92]	; (1a728 <bt_l2cap_recv+0x74>)
   1a6ca:	6153      	str	r3, [r2, #20]
   1a6cc:	4b17      	ldr	r3, [pc, #92]	; (1a72c <bt_l2cap_recv+0x78>)
   1a6ce:	6193      	str	r3, [r2, #24]
   1a6d0:	2303      	movs	r3, #3
   1a6d2:	f842 3f10 	str.w	r3, [r2, #16]!
   1a6d6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1a6da:	4815      	ldr	r0, [pc, #84]	; (1a730 <bt_l2cap_recv+0x7c>)
   1a6dc:	f011 ffc1 	bl	2c662 <z_log_msg_static_create.constprop.0>
   1a6e0:	46ad      	mov	sp, r5
	net_buf_unref(buf);
   1a6e2:	4620      	mov	r0, r4
   1a6e4:	f006 f99c 	bl	20a20 <net_buf_unref>
}
   1a6e8:	46bd      	mov	sp, r7
   1a6ea:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1a6ec:	2104      	movs	r1, #4
   1a6ee:	f104 000c 	add.w	r0, r4, #12
   1a6f2:	f013 fecf 	bl	2e494 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1a6f6:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1a6f8:	4628      	mov	r0, r5
   1a6fa:	f012 f85f 	bl	2c7bc <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a6fe:	b968      	cbnz	r0, 1a71c <bt_l2cap_recv+0x68>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1a700:	466d      	mov	r5, sp
   1a702:	b088      	sub	sp, #32
   1a704:	466a      	mov	r2, sp
   1a706:	4b0b      	ldr	r3, [pc, #44]	; (1a734 <bt_l2cap_recv+0x80>)
   1a708:	6153      	str	r3, [r2, #20]
   1a70a:	4b08      	ldr	r3, [pc, #32]	; (1a72c <bt_l2cap_recv+0x78>)
   1a70c:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1a710:	2304      	movs	r3, #4
   1a712:	f842 3f10 	str.w	r3, [r2, #16]!
   1a716:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1a71a:	e7de      	b.n	1a6da <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   1a71c:	6843      	ldr	r3, [r0, #4]
   1a71e:	4621      	mov	r1, r4
   1a720:	695b      	ldr	r3, [r3, #20]
   1a722:	4798      	blx	r3
   1a724:	e7dd      	b.n	1a6e2 <bt_l2cap_recv+0x2e>
   1a726:	bf00      	nop
   1a728:	00033351 	.word	0x00033351
   1a72c:	0003340d 	.word	0x0003340d
   1a730:	0002fc34 	.word	0x0002fc34
   1a734:	00033372 	.word	0x00033372

0001a738 <bt_l2cap_update_conn_param>:
{
   1a738:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1a73a:	4b17      	ldr	r3, [pc, #92]	; (1a798 <bt_l2cap_update_conn_param+0x60>)
{
   1a73c:	460e      	mov	r6, r1
	ident++;
   1a73e:	7819      	ldrb	r1, [r3, #0]
   1a740:	3101      	adds	r1, #1
   1a742:	b2c9      	uxtb	r1, r1
   1a744:	2901      	cmp	r1, #1
   1a746:	bf38      	it	cc
   1a748:	2101      	movcc	r1, #1
{
   1a74a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1a74c:	2208      	movs	r2, #8
   1a74e:	2012      	movs	r0, #18
	ident++;
   1a750:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1a752:	f011 ff89 	bl	2c668 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1a756:	4604      	mov	r4, r0
   1a758:	b1d0      	cbz	r0, 1a790 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   1a75a:	2108      	movs	r1, #8
   1a75c:	300c      	adds	r0, #12
   1a75e:	f013 fe68 	bl	2e432 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1a762:	8833      	ldrh	r3, [r6, #0]
   1a764:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1a766:	8873      	ldrh	r3, [r6, #2]
   1a768:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1a76a:	88b3      	ldrh	r3, [r6, #4]
   1a76c:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1a76e:	88f3      	ldrh	r3, [r6, #6]
   1a770:	80c3      	strh	r3, [r0, #6]
   1a772:	2300      	movs	r3, #0
   1a774:	4628      	mov	r0, r5
   1a776:	9300      	str	r3, [sp, #0]
   1a778:	4622      	mov	r2, r4
   1a77a:	2105      	movs	r1, #5
   1a77c:	f011 ffdd 	bl	2c73a <bt_l2cap_send_cb>
	if (err) {
   1a780:	4605      	mov	r5, r0
   1a782:	b110      	cbz	r0, 1a78a <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   1a784:	4620      	mov	r0, r4
   1a786:	f006 f94b 	bl	20a20 <net_buf_unref>
}
   1a78a:	4628      	mov	r0, r5
   1a78c:	b002      	add	sp, #8
   1a78e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1a790:	f06f 050b 	mvn.w	r5, #11
   1a794:	e7f9      	b.n	1a78a <bt_l2cap_update_conn_param+0x52>
   1a796:	bf00      	nop
   1a798:	20004485 	.word	0x20004485

0001a79c <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1a79c:	2823      	cmp	r0, #35	; 0x23
   1a79e:	d81f      	bhi.n	1a7e0 <att_op_get_type+0x44>
   1a7a0:	281a      	cmp	r0, #26
   1a7a2:	d804      	bhi.n	1a7ae <att_op_get_type+0x12>
   1a7a4:	1e43      	subs	r3, r0, #1
   1a7a6:	2b18      	cmp	r3, #24
   1a7a8:	d90e      	bls.n	1a7c8 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1a7aa:	2006      	movs	r0, #6
   1a7ac:	4770      	bx	lr
	switch (op) {
   1a7ae:	f1a0 031b 	sub.w	r3, r0, #27
   1a7b2:	2b08      	cmp	r3, #8
   1a7b4:	d81e      	bhi.n	1a7f4 <att_op_get_type+0x58>
   1a7b6:	e8df f003 	tbb	[pc, r3]
   1a7ba:	1d05      	.short	0x1d05
   1a7bc:	191d231b 	.word	0x191d231b
   1a7c0:	1d25      	.short	0x1d25
   1a7c2:	05          	.byte	0x05
   1a7c3:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   1a7c4:	2003      	movs	r0, #3
   1a7c6:	4770      	bx	lr
	switch (op) {
   1a7c8:	4a0f      	ldr	r2, [pc, #60]	; (1a808 <att_op_get_type+0x6c>)
   1a7ca:	2301      	movs	r3, #1
   1a7cc:	4083      	lsls	r3, r0
   1a7ce:	401a      	ands	r2, r3
   1a7d0:	b9c2      	cbnz	r2, 1a804 <att_op_get_type+0x68>
   1a7d2:	4a0e      	ldr	r2, [pc, #56]	; (1a80c <att_op_get_type+0x70>)
   1a7d4:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   1a7d6:	2a00      	cmp	r2, #0
   1a7d8:	bf14      	ite	ne
   1a7da:	2001      	movne	r0, #1
   1a7dc:	2006      	moveq	r0, #6
   1a7de:	4770      	bx	lr
	switch (op) {
   1a7e0:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1a7e4:	2b52      	cmp	r3, #82	; 0x52
   1a7e6:	d105      	bne.n	1a7f4 <att_op_get_type+0x58>
		return ATT_COMMAND;
   1a7e8:	2000      	movs	r0, #0
}
   1a7ea:	4770      	bx	lr
		return ATT_REQUEST;
   1a7ec:	2001      	movs	r0, #1
   1a7ee:	4770      	bx	lr
		return ATT_INDICATION;
   1a7f0:	2005      	movs	r0, #5
   1a7f2:	4770      	bx	lr
		return ATT_COMMAND;
   1a7f4:	f010 0f40 	tst.w	r0, #64	; 0x40
   1a7f8:	bf0c      	ite	eq
   1a7fa:	2006      	moveq	r0, #6
   1a7fc:	2000      	movne	r0, #0
   1a7fe:	4770      	bx	lr
	switch (op) {
   1a800:	2004      	movs	r0, #4
   1a802:	4770      	bx	lr
		return ATT_RESPONSE;
   1a804:	2002      	movs	r0, #2
   1a806:	4770      	bx	lr
   1a808:	028aaaaa 	.word	0x028aaaaa
   1a80c:	01455554 	.word	0x01455554

0001a810 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1a810:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1a812:	3804      	subs	r0, #4
   1a814:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1a816:	a901      	add	r1, sp, #4
   1a818:	4802      	ldr	r0, [pc, #8]	; (1a824 <bt_att_released+0x14>)
   1a81a:	f014 faf7 	bl	2ee0c <k_mem_slab_free>
}
   1a81e:	b003      	add	sp, #12
   1a820:	f85d fb04 	ldr.w	pc, [sp], #4
   1a824:	20000898 	.word	0x20000898

0001a828 <tx_meta_data_free>:
{
   1a828:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
   1a82a:	2100      	movs	r1, #0
{
   1a82c:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   1a82e:	2214      	movs	r2, #20
   1a830:	f011 fa41 	bl	2bcb6 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1a834:	4621      	mov	r1, r4
   1a836:	4802      	ldr	r0, [pc, #8]	; (1a840 <tx_meta_data_free+0x18>)
}
   1a838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   1a83c:	f014 bbb0 	b.w	2efa0 <k_queue_append>
   1a840:	200009a0 	.word	0x200009a0

0001a844 <find_type_cb>:
{
   1a844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a848:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   1a84a:	f8d2 a000 	ldr.w	sl, [r2]
{
   1a84e:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   1a850:	f8da 3004 	ldr.w	r3, [sl, #4]
   1a854:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a856:	2500      	movs	r5, #0
   1a858:	f642 0301 	movw	r3, #10241	; 0x2801
{
   1a85c:	4680      	mov	r8, r0
   1a85e:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a860:	6800      	ldr	r0, [r0, #0]
   1a862:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1a866:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1a868:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   1a86c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a86e:	f011 fad6 	bl	2be1e <bt_uuid_cmp>
   1a872:	2800      	cmp	r0, #0
   1a874:	d072      	beq.n	1a95c <find_type_cb+0x118>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1a876:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a87a:	f8d8 0000 	ldr.w	r0, [r8]
   1a87e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1a882:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1a884:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1a888:	f011 fac9 	bl	2be1e <bt_uuid_cmp>
   1a88c:	b138      	cbz	r0, 1a89e <find_type_cb+0x5a>
		if (data->group &&
   1a88e:	68a3      	ldr	r3, [r4, #8]
   1a890:	b11b      	cbz	r3, 1a89a <find_type_cb+0x56>
   1a892:	885a      	ldrh	r2, [r3, #2]
   1a894:	42b2      	cmp	r2, r6
   1a896:	d200      	bcs.n	1a89a <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a898:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1a89a:	2001      	movs	r0, #1
   1a89c:	e009      	b.n	1a8b2 <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1a89e:	6861      	ldr	r1, [r4, #4]
   1a8a0:	4608      	mov	r0, r1
   1a8a2:	f011 ffa0 	bl	2c7e6 <net_buf_frags_len>
   1a8a6:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1a8aa:	1a1b      	subs	r3, r3, r0
   1a8ac:	2b03      	cmp	r3, #3
   1a8ae:	d804      	bhi.n	1a8ba <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   1a8b0:	2000      	movs	r0, #0
}
   1a8b2:	3744      	adds	r7, #68	; 0x44
   1a8b4:	46bd      	mov	sp, r7
   1a8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1a8ba:	4608      	mov	r0, r1
   1a8bc:	f013 fd8d 	bl	2e3da <net_buf_frag_last>
   1a8c0:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1a8c2:	6860      	ldr	r0, [r4, #4]
   1a8c4:	f011 ff8f 	bl	2c7e6 <net_buf_frags_len>
   1a8c8:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1a8cc:	f105 090c 	add.w	r9, r5, #12
   1a8d0:	ebab 0b00 	sub.w	fp, fp, r0
   1a8d4:	4648      	mov	r0, r9
   1a8d6:	f013 fdf9 	bl	2e4cc <net_buf_simple_tailroom>
   1a8da:	4558      	cmp	r0, fp
   1a8dc:	d941      	bls.n	1a962 <find_type_cb+0x11e>
   1a8de:	6860      	ldr	r0, [r4, #4]
   1a8e0:	f011 ff81 	bl	2c7e6 <net_buf_frags_len>
   1a8e4:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1a8e8:	1a18      	subs	r0, r3, r0
	if (!len) {
   1a8ea:	b970      	cbnz	r0, 1a90a <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1a8ec:	6863      	ldr	r3, [r4, #4]
   1a8ee:	7a98      	ldrb	r0, [r3, #10]
   1a8f0:	f005 ffd4 	bl	2089c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1a8f4:	2200      	movs	r2, #0
   1a8f6:	2300      	movs	r3, #0
   1a8f8:	f013 fd35 	bl	2e366 <net_buf_alloc_fixed>
		if (!frag) {
   1a8fc:	4605      	mov	r5, r0
   1a8fe:	2800      	cmp	r0, #0
   1a900:	d0d6      	beq.n	1a8b0 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   1a902:	4601      	mov	r1, r0
   1a904:	6860      	ldr	r0, [r4, #4]
   1a906:	f013 fd79 	bl	2e3fc <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1a90a:	2300      	movs	r3, #0
   1a90c:	9300      	str	r3, [sp, #0]
   1a90e:	f8d8 a004 	ldr.w	sl, [r8, #4]
   1a912:	6878      	ldr	r0, [r7, #4]
   1a914:	4641      	mov	r1, r8
   1a916:	2310      	movs	r3, #16
   1a918:	f107 0208 	add.w	r2, r7, #8
   1a91c:	47d0      	blx	sl
	if (read < 0) {
   1a91e:	f1b0 0800 	subs.w	r8, r0, #0
   1a922:	db1b      	blt.n	1a95c <find_type_cb+0x118>
	if (read != data->value_len) {
   1a924:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1a926:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1a928:	4542      	cmp	r2, r8
   1a92a:	d043      	beq.n	1a9b4 <find_type_cb+0x170>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1a92c:	4601      	mov	r1, r0
   1a92e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1a932:	f011 faa2 	bl	2be7a <bt_uuid_create>
   1a936:	b9c0      	cbnz	r0, 1a96a <find_type_cb+0x126>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1a938:	466d      	mov	r5, sp
   1a93a:	b088      	sub	sp, #32
   1a93c:	7c23      	ldrb	r3, [r4, #16]
   1a93e:	aa02      	add	r2, sp, #8
   1a940:	491f      	ldr	r1, [pc, #124]	; (1a9c0 <find_type_cb+0x17c>)
   1a942:	6151      	str	r1, [r2, #20]
   1a944:	491f      	ldr	r1, [pc, #124]	; (1a9c4 <find_type_cb+0x180>)
   1a946:	e9c2 1306 	strd	r1, r3, [r2, #24]
			LOG_WRN("Unable to create UUID: size %d", read);
   1a94a:	2304      	movs	r3, #4
   1a94c:	f842 3f10 	str.w	r3, [r2, #16]!
   1a950:	481d      	ldr	r0, [pc, #116]	; (1a9c8 <find_type_cb+0x184>)
   1a952:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1a956:	f012 f84d 	bl	2c9f4 <z_log_msg_static_create.constprop.0>
   1a95a:	46ad      	mov	sp, r5
	data->group = NULL;
   1a95c:	2300      	movs	r3, #0
   1a95e:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1a960:	e79b      	b.n	1a89a <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   1a962:	4648      	mov	r0, r9
   1a964:	f013 fdb2 	bl	2e4cc <net_buf_simple_tailroom>
   1a968:	e7bf      	b.n	1a8ea <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1a96a:	fa5f f288 	uxtb.w	r2, r8
   1a96e:	f107 0108 	add.w	r1, r7, #8
   1a972:	f107 0018 	add.w	r0, r7, #24
   1a976:	f011 fa80 	bl	2be7a <bt_uuid_create>
   1a97a:	b940      	cbnz	r0, 1a98e <find_type_cb+0x14a>
			LOG_WRN("Unable to create UUID: size %d", read);
   1a97c:	466d      	mov	r5, sp
   1a97e:	b088      	sub	sp, #32
   1a980:	aa02      	add	r2, sp, #8
   1a982:	4b12      	ldr	r3, [pc, #72]	; (1a9cc <find_type_cb+0x188>)
   1a984:	6153      	str	r3, [r2, #20]
   1a986:	4b0f      	ldr	r3, [pc, #60]	; (1a9c4 <find_type_cb+0x180>)
   1a988:	e9c2 3806 	strd	r3, r8, [r2, #24]
   1a98c:	e7dd      	b.n	1a94a <find_type_cb+0x106>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1a98e:	f107 0118 	add.w	r1, r7, #24
   1a992:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1a996:	f011 fa42 	bl	2be1e <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1a99a:	2800      	cmp	r0, #0
   1a99c:	d1de      	bne.n	1a95c <find_type_cb+0x118>
	data->err = 0x00;
   1a99e:	2300      	movs	r3, #0
   1a9a0:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1a9a2:	2104      	movs	r1, #4
   1a9a4:	f105 000c 	add.w	r0, r5, #12
   1a9a8:	f013 fd43 	bl	2e432 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1a9ac:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1a9ae:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a9b0:	68a3      	ldr	r3, [r4, #8]
   1a9b2:	e771      	b.n	1a898 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   1a9b4:	f107 0108 	add.w	r1, r7, #8
   1a9b8:	f011 f94b 	bl	2bc52 <memcmp>
   1a9bc:	e7ed      	b.n	1a99a <find_type_cb+0x156>
   1a9be:	bf00      	nop
   1a9c0:	0003341b 	.word	0x0003341b
   1a9c4:	0003368c 	.word	0x0003368c
   1a9c8:	0002fbdc 	.word	0x0002fbdc
   1a9cc:	0003343e 	.word	0x0003343e

0001a9d0 <chan_send>:
{
   1a9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a9d4:	b082      	sub	sp, #8
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1a9d6:	f8d1 a018 	ldr.w	sl, [r1, #24]
	hdr = (void *)buf->data;
   1a9da:	68cb      	ldr	r3, [r1, #12]
{
   1a9dc:	af02      	add	r7, sp, #8
   1a9de:	4606      	mov	r6, r0
   1a9e0:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1a9e2:	3034      	adds	r0, #52	; 0x34
   1a9e4:	2102      	movs	r1, #2
   1a9e6:	f011 ff18 	bl	2c81a <atomic_test_bit>
   1a9ea:	b9a8      	cbnz	r0, 1aa18 <chan_send+0x48>
		LOG_ERR("ATT channel not connected");
   1a9ec:	466c      	mov	r4, sp
   1a9ee:	b088      	sub	sp, #32
   1a9f0:	aa02      	add	r2, sp, #8
   1a9f2:	4b36      	ldr	r3, [pc, #216]	; (1aacc <chan_send+0xfc>)
   1a9f4:	6153      	str	r3, [r2, #20]
   1a9f6:	4b36      	ldr	r3, [pc, #216]	; (1aad0 <chan_send+0x100>)
   1a9f8:	6193      	str	r3, [r2, #24]
   1a9fa:	2303      	movs	r3, #3
   1a9fc:	f842 3f10 	str.w	r3, [r2, #16]!
   1aa00:	4834      	ldr	r0, [pc, #208]	; (1aad4 <chan_send+0x104>)
   1aa02:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1aa06:	f011 fff5 	bl	2c9f4 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1aa0a:	f06f 0515 	mvn.w	r5, #21
   1aa0e:	46a5      	mov	sp, r4
}
   1aa10:	4628      	mov	r0, r5
   1aa12:	46bd      	mov	sp, r7
   1aa14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1aa18:	781b      	ldrb	r3, [r3, #0]
   1aa1a:	2bd2      	cmp	r3, #210	; 0xd2
   1aa1c:	d11d      	bne.n	1aa5a <chan_send+0x8a>
		err = bt_smp_sign(chan->att->conn, buf);
   1aa1e:	6833      	ldr	r3, [r6, #0]
   1aa20:	4621      	mov	r1, r4
   1aa22:	6818      	ldr	r0, [r3, #0]
   1aa24:	f004 fed4 	bl	1f7d0 <bt_smp_sign>
		if (err) {
   1aa28:	4605      	mov	r5, r0
   1aa2a:	b1b0      	cbz	r0, 1aa5a <chan_send+0x8a>
			LOG_ERR("Error signing data");
   1aa2c:	466e      	mov	r6, sp
   1aa2e:	b088      	sub	sp, #32
   1aa30:	aa02      	add	r2, sp, #8
   1aa32:	4b29      	ldr	r3, [pc, #164]	; (1aad8 <chan_send+0x108>)
   1aa34:	6153      	str	r3, [r2, #20]
   1aa36:	4b26      	ldr	r3, [pc, #152]	; (1aad0 <chan_send+0x100>)
   1aa38:	6193      	str	r3, [r2, #24]
   1aa3a:	2303      	movs	r3, #3
   1aa3c:	f842 3f10 	str.w	r3, [r2, #16]!
   1aa40:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1aa44:	4823      	ldr	r0, [pc, #140]	; (1aad4 <chan_send+0x104>)
   1aa46:	f011 ffd5 	bl	2c9f4 <z_log_msg_static_create.constprop.0>
   1aa4a:	46b5      	mov	sp, r6
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1aa4c:	69a0      	ldr	r0, [r4, #24]
   1aa4e:	f7ff feeb 	bl	1a828 <tx_meta_data_free>
			net_buf_unref(buf);
   1aa52:	4620      	mov	r0, r4
   1aa54:	f005 ffe4 	bl	20a20 <net_buf_unref>
			return err;
   1aa58:	e7da      	b.n	1aa10 <chan_send+0x40>
	state->offset = net_buf_simple_headroom(buf);
   1aa5a:	f104 000c 	add.w	r0, r4, #12
   1aa5e:	f013 fd31 	bl	2e4c4 <net_buf_simple_headroom>
	state->len = buf->len;
   1aa62:	f8b4 9010 	ldrh.w	r9, [r4, #16]
	data->att_chan = chan;
   1aa66:	f8ca 6000 	str.w	r6, [sl]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1aa6a:	6833      	ldr	r3, [r6, #0]
   1aa6c:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1aa6e:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1aa70:	4680      	mov	r8, r0
   1aa72:	7818      	ldrb	r0, [r3, #0]
   1aa74:	f7ff fe92 	bl	1a79c <att_op_get_type>
	switch (op_type) {
   1aa78:	2805      	cmp	r0, #5
   1aa7a:	bf96      	itet	ls
   1aa7c:	4b17      	ldrls	r3, [pc, #92]	; (1aadc <chan_send+0x10c>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1aa7e:	4b18      	ldrhi	r3, [pc, #96]	; (1aae0 <chan_send+0x110>)
   1aa80:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1aa84:	f8cd a000 	str.w	sl, [sp]
   1aa88:	4628      	mov	r0, r5
   1aa8a:	4622      	mov	r2, r4
   1aa8c:	2104      	movs	r1, #4
   1aa8e:	f011 fe54 	bl	2c73a <bt_l2cap_send_cb>
	if (err) {
   1aa92:	4605      	mov	r5, r0
   1aa94:	2800      	cmp	r0, #0
   1aa96:	d0bb      	beq.n	1aa10 <chan_send+0x40>
		if (err == -ENOBUFS) {
   1aa98:	f110 0f69 	cmn.w	r0, #105	; 0x69
   1aa9c:	d10f      	bne.n	1aabe <chan_send+0xee>
			LOG_ERR("Ran out of TX buffers or contexts.");
   1aa9e:	466e      	mov	r6, sp
   1aaa0:	b088      	sub	sp, #32
   1aaa2:	aa02      	add	r2, sp, #8
   1aaa4:	4b0f      	ldr	r3, [pc, #60]	; (1aae4 <chan_send+0x114>)
   1aaa6:	6153      	str	r3, [r2, #20]
   1aaa8:	4b09      	ldr	r3, [pc, #36]	; (1aad0 <chan_send+0x100>)
   1aaaa:	6193      	str	r3, [r2, #24]
   1aaac:	2303      	movs	r3, #3
   1aaae:	f842 3f10 	str.w	r3, [r2, #16]!
   1aab2:	4808      	ldr	r0, [pc, #32]	; (1aad4 <chan_send+0x104>)
   1aab4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1aab8:	f011 ff9c 	bl	2c9f4 <z_log_msg_static_create.constprop.0>
   1aabc:	46b5      	mov	sp, r6
	buf->data = buf->__buf + state->offset;
   1aabe:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1aac0:	f8a4 9010 	strh.w	r9, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1aac4:	fa13 f388 	uxtah	r3, r3, r8
   1aac8:	60e3      	str	r3, [r4, #12]
}
   1aaca:	e7a1      	b.n	1aa10 <chan_send+0x40>
   1aacc:	00033461 	.word	0x00033461
   1aad0:	000336c9 	.word	0x000336c9
   1aad4:	0002fbdc 	.word	0x0002fbdc
   1aad8:	0003347f 	.word	0x0003347f
   1aadc:	000302d4 	.word	0x000302d4
   1aae0:	0002cde9 	.word	0x0002cde9
   1aae4:	00033496 	.word	0x00033496

0001aae8 <att_get>:
{
   1aae8:	b598      	push	{r3, r4, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1aaea:	7b43      	ldrb	r3, [r0, #13]
   1aaec:	2b07      	cmp	r3, #7
{
   1aaee:	af00      	add	r7, sp, #0
	if (conn->state != BT_CONN_CONNECTED) {
   1aaf0:	d012      	beq.n	1ab18 <att_get+0x30>
		LOG_WRN("Not connected");
   1aaf2:	466c      	mov	r4, sp
   1aaf4:	b088      	sub	sp, #32
   1aaf6:	466a      	mov	r2, sp
   1aaf8:	4b17      	ldr	r3, [pc, #92]	; (1ab58 <att_get+0x70>)
   1aafa:	6153      	str	r3, [r2, #20]
   1aafc:	4b17      	ldr	r3, [pc, #92]	; (1ab5c <att_get+0x74>)
   1aafe:	6193      	str	r3, [r2, #24]
   1ab00:	2303      	movs	r3, #3
   1ab02:	f842 3f10 	str.w	r3, [r2, #16]!
   1ab06:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
		LOG_ERR("Unable to find ATT channel");
   1ab0a:	4815      	ldr	r0, [pc, #84]	; (1ab60 <att_get+0x78>)
   1ab0c:	f011 ff72 	bl	2c9f4 <z_log_msg_static_create.constprop.0>
		return NULL;
   1ab10:	2000      	movs	r0, #0
   1ab12:	46a5      	mov	sp, r4
}
   1ab14:	46bd      	mov	sp, r7
   1ab16:	bd98      	pop	{r3, r4, r7, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1ab18:	2104      	movs	r1, #4
   1ab1a:	f011 fe4f 	bl	2c7bc <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1ab1e:	4603      	mov	r3, r0
   1ab20:	b960      	cbnz	r0, 1ab3c <att_get+0x54>
		LOG_ERR("Unable to find ATT channel");
   1ab22:	466c      	mov	r4, sp
   1ab24:	b088      	sub	sp, #32
   1ab26:	466a      	mov	r2, sp
   1ab28:	4b0e      	ldr	r3, [pc, #56]	; (1ab64 <att_get+0x7c>)
   1ab2a:	6153      	str	r3, [r2, #20]
   1ab2c:	4b0b      	ldr	r3, [pc, #44]	; (1ab5c <att_get+0x74>)
   1ab2e:	6193      	str	r3, [r2, #24]
   1ab30:	2303      	movs	r3, #3
   1ab32:	f842 3f10 	str.w	r3, [r2, #16]!
   1ab36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ab3a:	e7e6      	b.n	1ab0a <att_get+0x22>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   1ab3c:	2102      	movs	r1, #2
   1ab3e:	3030      	adds	r0, #48	; 0x30
   1ab40:	f011 fe6b 	bl	2c81a <atomic_test_bit>
   1ab44:	b920      	cbnz	r0, 1ab50 <att_get+0x68>
		LOG_ERR("ATT channel not connected");
   1ab46:	466c      	mov	r4, sp
   1ab48:	b088      	sub	sp, #32
   1ab4a:	466a      	mov	r2, sp
   1ab4c:	4b06      	ldr	r3, [pc, #24]	; (1ab68 <att_get+0x80>)
   1ab4e:	e7ec      	b.n	1ab2a <att_get+0x42>
	return att_chan->att;
   1ab50:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1ab54:	e7de      	b.n	1ab14 <att_get+0x2c>
   1ab56:	bf00      	nop
   1ab58:	00033313 	.word	0x00033313
   1ab5c:	000336ee 	.word	0x000336ee
   1ab60:	0002fbdc 	.word	0x0002fbdc
   1ab64:	000334bd 	.word	0x000334bd
   1ab68:	00033461 	.word	0x00033461

0001ab6c <read_group_cb>:
{
   1ab6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1ab70:	4605      	mov	r5, r0
   1ab72:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1ab74:	f04f 0800 	mov.w	r8, #0
   1ab78:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ab7c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1ab7e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1ab80:	f88d 8008 	strb.w	r8, [sp, #8]
   1ab84:	a902      	add	r1, sp, #8
{
   1ab86:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1ab88:	f8ad 300a 	strh.w	r3, [sp, #10]
   1ab8c:	f011 f947 	bl	2be1e <bt_uuid_cmp>
   1ab90:	b1a0      	cbz	r0, 1abbc <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ab92:	f642 0301 	movw	r3, #10241	; 0x2801
   1ab96:	6828      	ldr	r0, [r5, #0]
   1ab98:	f88d 800c 	strb.w	r8, [sp, #12]
   1ab9c:	a903      	add	r1, sp, #12
   1ab9e:	f8ad 300e 	strh.w	r3, [sp, #14]
   1aba2:	f011 f93c 	bl	2be1e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1aba6:	b148      	cbz	r0, 1abbc <read_group_cb+0x50>
		if (data->group &&
   1aba8:	6923      	ldr	r3, [r4, #16]
   1abaa:	b11b      	cbz	r3, 1abb4 <read_group_cb+0x48>
   1abac:	885a      	ldrh	r2, [r3, #2]
   1abae:	42b2      	cmp	r2, r6
   1abb0:	d200      	bcs.n	1abb4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1abb2:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1abb4:	2001      	movs	r0, #1
}
   1abb6:	b004      	add	sp, #16
   1abb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1abbc:	6861      	ldr	r1, [r4, #4]
   1abbe:	6828      	ldr	r0, [r5, #0]
   1abc0:	f011 f92d 	bl	2be1e <bt_uuid_cmp>
   1abc4:	b110      	cbz	r0, 1abcc <read_group_cb+0x60>
		data->group = NULL;
   1abc6:	2300      	movs	r3, #0
   1abc8:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1abca:	e7f3      	b.n	1abb4 <read_group_cb+0x48>
	if (data->rsp->len &&
   1abcc:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1abce:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1abd0:	781a      	ldrb	r2, [r3, #0]
   1abd2:	b132      	cbz	r2, 1abe2 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1abd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1abd6:	8a01      	ldrh	r1, [r0, #16]
   1abd8:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1abda:	4293      	cmp	r3, r2
   1abdc:	da01      	bge.n	1abe2 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1abde:	2000      	movs	r0, #0
   1abe0:	e7e9      	b.n	1abb6 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1abe2:	2104      	movs	r1, #4
   1abe4:	300c      	adds	r0, #12
   1abe6:	f013 fc24 	bl	2e432 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1abea:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1abec:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1abee:	6923      	ldr	r3, [r4, #16]
   1abf0:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1abf2:	4b08      	ldr	r3, [pc, #32]	; (1ac14 <read_group_cb+0xa8>)
   1abf4:	9300      	str	r3, [sp, #0]
   1abf6:	9401      	str	r4, [sp, #4]
   1abf8:	68a2      	ldr	r2, [r4, #8]
   1abfa:	2300      	movs	r3, #0
   1abfc:	4629      	mov	r1, r5
   1abfe:	4638      	mov	r0, r7
   1ac00:	f011 ff3a 	bl	2ca78 <att_chan_read>
	if (read < 0) {
   1ac04:	2800      	cmp	r0, #0
   1ac06:	dbea      	blt.n	1abde <read_group_cb+0x72>
	if (!data->group) {
   1ac08:	6920      	ldr	r0, [r4, #16]
   1ac0a:	3800      	subs	r0, #0
   1ac0c:	bf18      	it	ne
   1ac0e:	2001      	movne	r0, #1
   1ac10:	e7d1      	b.n	1abb6 <read_group_cb+0x4a>
   1ac12:	bf00      	nop
   1ac14:	0002c9d5 	.word	0x0002c9d5

0001ac18 <bt_att_connected>:
{
   1ac18:	b510      	push	{r4, lr}
   1ac1a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1ac1e:	4604      	mov	r4, r0
   1ac20:	f3bf 8f5b 	dmb	ish
   1ac24:	e853 1f00 	ldrex	r1, [r3]
   1ac28:	f041 0104 	orr.w	r1, r1, #4
   1ac2c:	e843 1200 	strex	r2, r1, [r3]
   1ac30:	2a00      	cmp	r2, #0
   1ac32:	d1f7      	bne.n	1ac24 <bt_att_connected+0xc>
   1ac34:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1ac38:	2317      	movs	r3, #23
   1ac3a:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1ac3c:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1ac3e:	1f20      	subs	r0, r4, #4
   1ac40:	f011 fe0d 	bl	2c85e <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1ac44:	f104 0054 	add.w	r0, r4, #84	; 0x54
   1ac48:	4903      	ldr	r1, [pc, #12]	; (1ac58 <bt_att_connected+0x40>)
   1ac4a:	f014 fa89 	bl	2f160 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1ac4e:	6820      	ldr	r0, [r4, #0]
}
   1ac50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1ac54:	f003 b94c 	b.w	1def0 <bt_gatt_connected>
   1ac58:	0001b9f5 	.word	0x0001b9f5

0001ac5c <read_type_cb>:
{
   1ac5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1ac60:	6817      	ldr	r7, [r2, #0]
{
   1ac62:	4605      	mov	r5, r0
   1ac64:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1ac66:	6800      	ldr	r0, [r0, #0]
   1ac68:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   1ac6a:	687e      	ldr	r6, [r7, #4]
{
   1ac6c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1ac6e:	f011 f8d6 	bl	2be1e <bt_uuid_cmp>
   1ac72:	4681      	mov	r9, r0
   1ac74:	2800      	cmp	r0, #0
   1ac76:	d13c      	bne.n	1acf2 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ac78:	4630      	mov	r0, r6
   1ac7a:	2295      	movs	r2, #149	; 0x95
   1ac7c:	4629      	mov	r1, r5
   1ac7e:	f012 fd9c 	bl	2d7ba <bt_gatt_check_perm>
   1ac82:	4606      	mov	r6, r0
   1ac84:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1ac86:	b140      	cbz	r0, 1ac9a <read_type_cb+0x3e>
		if (data->rsp->len) {
   1ac88:	68e3      	ldr	r3, [r4, #12]
   1ac8a:	781b      	ldrb	r3, [r3, #0]
   1ac8c:	b10b      	cbz	r3, 1ac92 <read_type_cb+0x36>
			data->err = 0x00;
   1ac8e:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1ac92:	2000      	movs	r0, #0
}
   1ac94:	b003      	add	sp, #12
   1ac96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1ac9a:	68a0      	ldr	r0, [r4, #8]
   1ac9c:	f013 fb9d 	bl	2e3da <net_buf_frag_last>
   1aca0:	2102      	movs	r1, #2
   1aca2:	300c      	adds	r0, #12
   1aca4:	f013 fbc5 	bl	2e432 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1aca8:	4b13      	ldr	r3, [pc, #76]	; (1acf8 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1acaa:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1acac:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1acb0:	9300      	str	r3, [sp, #0]
   1acb2:	9401      	str	r4, [sp, #4]
   1acb4:	68a2      	ldr	r2, [r4, #8]
   1acb6:	4633      	mov	r3, r6
   1acb8:	4629      	mov	r1, r5
   1acba:	4638      	mov	r0, r7
   1acbc:	f011 fedc 	bl	2ca78 <att_chan_read>
	if (read < 0) {
   1acc0:	2800      	cmp	r0, #0
   1acc2:	da07      	bge.n	1acd4 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   1acc4:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1acc8:	bf26      	itte	cs
   1acca:	4240      	negcs	r0, r0
   1accc:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1acce:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1acd0:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1acd2:	e7de      	b.n	1ac92 <read_type_cb+0x36>
	if (!data->item) {
   1acd4:	6923      	ldr	r3, [r4, #16]
   1acd6:	2b00      	cmp	r3, #0
   1acd8:	d0db      	beq.n	1ac92 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1acda:	68a0      	ldr	r0, [r4, #8]
   1acdc:	f011 fd83 	bl	2c7e6 <net_buf_frags_len>
   1ace0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1ace2:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1ace4:	68e3      	ldr	r3, [r4, #12]
   1ace6:	781b      	ldrb	r3, [r3, #0]
   1ace8:	4298      	cmp	r0, r3
   1acea:	bf94      	ite	ls
   1acec:	2000      	movls	r0, #0
   1acee:	2001      	movhi	r0, #1
   1acf0:	e7d0      	b.n	1ac94 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1acf2:	2001      	movs	r0, #1
   1acf4:	e7ce      	b.n	1ac94 <read_type_cb+0x38>
   1acf6:	bf00      	nop
   1acf8:	0002c7f7 	.word	0x0002c7f7

0001acfc <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1acfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad00:	b082      	sub	sp, #8
   1ad02:	af00      	add	r7, sp, #0
   1ad04:	4604      	mov	r4, r0
   1ad06:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1ad08:	483d      	ldr	r0, [pc, #244]	; (1ae00 <bt_att_accept+0x104>)
   1ad0a:	2200      	movs	r2, #0
   1ad0c:	2300      	movs	r3, #0
   1ad0e:	4639      	mov	r1, r7
   1ad10:	f00a f93c 	bl	24f8c <k_mem_slab_alloc>
   1ad14:	4605      	mov	r5, r0
   1ad16:	b1b8      	cbz	r0, 1ad48 <bt_att_accept+0x4c>
		LOG_ERR("No available ATT context for conn %p", conn);
   1ad18:	466d      	mov	r5, sp
   1ad1a:	b088      	sub	sp, #32
   1ad1c:	466a      	mov	r2, sp
   1ad1e:	4b39      	ldr	r3, [pc, #228]	; (1ae04 <bt_att_accept+0x108>)
   1ad20:	6153      	str	r3, [r2, #20]
   1ad22:	4b39      	ldr	r3, [pc, #228]	; (1ae08 <bt_att_accept+0x10c>)
   1ad24:	4839      	ldr	r0, [pc, #228]	; (1ae0c <bt_att_accept+0x110>)
   1ad26:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1ad2a:	2304      	movs	r3, #4
   1ad2c:	f842 3f10 	str.w	r3, [r2, #16]!
   1ad30:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ad34:	f011 fe5e 	bl	2c9f4 <z_log_msg_static_create.constprop.0>
   1ad38:	46ad      	mov	sp, r5
		return -ENOMEM;
   1ad3a:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1ad3e:	4628      	mov	r0, r5
   1ad40:	3708      	adds	r7, #8
   1ad42:	46bd      	mov	sp, r7
   1ad44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   1ad48:	f00b f82a 	bl	25da0 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   1ad4c:	4b30      	ldr	r3, [pc, #192]	; (1ae10 <bt_att_accept+0x114>)
	(void)memset(att, 0, sizeof(*att));
   1ad4e:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   1ad50:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   1ad52:	222c      	movs	r2, #44	; 0x2c
   1ad54:	6838      	ldr	r0, [r7, #0]
   1ad56:	f010 ffae 	bl	2bcb6 <memset>
	att->conn = conn;
   1ad5a:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1ad5c:	482d      	ldr	r0, [pc, #180]	; (1ae14 <bt_att_accept+0x118>)
	att->conn = conn;
   1ad5e:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   1ad60:	683c      	ldr	r4, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1ad62:	607d      	str	r5, [r7, #4]
	list->tail = NULL;
   1ad64:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1ad68:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1ad6c:	2200      	movs	r2, #0
   1ad6e:	2300      	movs	r3, #0
   1ad70:	1d39      	adds	r1, r7, #4
   1ad72:	f00a f90b 	bl	24f8c <k_mem_slab_alloc>
   1ad76:	4605      	mov	r5, r0
   1ad78:	b190      	cbz	r0, 1ada0 <bt_att_accept+0xa4>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1ad7a:	6823      	ldr	r3, [r4, #0]
   1ad7c:	466c      	mov	r4, sp
   1ad7e:	b088      	sub	sp, #32
   1ad80:	466a      	mov	r2, sp
   1ad82:	4925      	ldr	r1, [pc, #148]	; (1ae18 <bt_att_accept+0x11c>)
   1ad84:	6151      	str	r1, [r2, #20]
   1ad86:	4925      	ldr	r1, [pc, #148]	; (1ae1c <bt_att_accept+0x120>)
   1ad88:	4820      	ldr	r0, [pc, #128]	; (1ae0c <bt_att_accept+0x110>)
   1ad8a:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1ad8e:	2304      	movs	r3, #4
   1ad90:	f842 3f10 	str.w	r3, [r2, #16]!
   1ad94:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1ad98:	f011 fe2c 	bl	2c9f4 <z_log_msg_static_create.constprop.0>
   1ad9c:	46a5      	mov	sp, r4
	if (!chan) {
   1ad9e:	e7cc      	b.n	1ad3a <bt_att_accept+0x3e>
	(void)memset(chan, 0, sizeof(*chan));
   1ada0:	4601      	mov	r1, r0
   1ada2:	2290      	movs	r2, #144	; 0x90
   1ada4:	6878      	ldr	r0, [r7, #4]
   1ada6:	f010 ff86 	bl	2bcb6 <memset>
	chan->chan.chan.ops = &ops;
   1adaa:	6878      	ldr	r0, [r7, #4]
   1adac:	4b1c      	ldr	r3, [pc, #112]	; (1ae20 <bt_att_accept+0x124>)
   1adae:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   1adb0:	303c      	adds	r0, #60	; 0x3c
   1adb2:	f014 f8e9 	bl	2ef88 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1adb6:	687b      	ldr	r3, [r7, #4]
   1adb8:	f3bf 8f5b 	dmb	ish
   1adbc:	3334      	adds	r3, #52	; 0x34
   1adbe:	e853 2f00 	ldrex	r2, [r3]
   1adc2:	e843 5100 	strex	r1, r5, [r3]
   1adc6:	2900      	cmp	r1, #0
   1adc8:	d1f9      	bne.n	1adbe <bt_att_accept+0xc2>
   1adca:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1adce:	687b      	ldr	r3, [r7, #4]
   1add0:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1add2:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   1add4:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   1add8:	b91b      	cbnz	r3, 1ade2 <bt_att_accept+0xe6>
   1adda:	f104 000c 	add.w	r0, r4, #12
   1adde:	f014 f8d3 	bl	2ef88 <z_impl_k_queue_init>
	return list->head;
   1ade2:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   1ade4:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
   1ade8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1adea:	f108 0388 	add.w	r3, r8, #136	; 0x88
	list->head = node;
   1adee:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   1adf0:	b902      	cbnz	r2, 1adf4 <bt_att_accept+0xf8>
	list->tail = node;
   1adf2:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   1adf4:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   1adf6:	2b00      	cmp	r3, #0
   1adf8:	d09f      	beq.n	1ad3a <bt_att_accept+0x3e>
	*ch = &chan->chan.chan;
   1adfa:	3304      	adds	r3, #4
   1adfc:	6033      	str	r3, [r6, #0]
	return 0;
   1adfe:	e79e      	b.n	1ad3e <bt_att_accept+0x42>
   1ae00:	2000087c 	.word	0x2000087c
   1ae04:	000334dc 	.word	0x000334dc
   1ae08:	000336e0 	.word	0x000336e0
   1ae0c:	0002fbdc 	.word	0x0002fbdc
   1ae10:	2000346c 	.word	0x2000346c
   1ae14:	20000898 	.word	0x20000898
   1ae18:	00033505 	.word	0x00033505
   1ae1c:	000336d3 	.word	0x000336d3
   1ae20:	200005b8 	.word	0x200005b8

0001ae24 <bt_att_chan_create_pdu>:
{
   1ae24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   1ae28:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1ae2a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1ae2c:	1c53      	adds	r3, r2, #1
   1ae2e:	428b      	cmp	r3, r1
{
   1ae30:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1ae32:	d916      	bls.n	1ae62 <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1ae34:	466c      	mov	r4, sp
   1ae36:	b08a      	sub	sp, #40	; 0x28
   1ae38:	466a      	mov	r2, sp
   1ae3a:	4831      	ldr	r0, [pc, #196]	; (1af00 <bt_att_chan_create_pdu+0xdc>)
   1ae3c:	6150      	str	r0, [r2, #20]
   1ae3e:	4831      	ldr	r0, [pc, #196]	; (1af04 <bt_att_chan_create_pdu+0xe0>)
   1ae40:	6213      	str	r3, [r2, #32]
   1ae42:	2305      	movs	r3, #5
   1ae44:	e9c2 0106 	strd	r0, r1, [r2, #24]
   1ae48:	f842 3f10 	str.w	r3, [r2, #16]!
   1ae4c:	f44f 5122 	mov.w	r1, #10368	; 0x2880
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1ae50:	482d      	ldr	r0, [pc, #180]	; (1af08 <bt_att_chan_create_pdu+0xe4>)
   1ae52:	f011 fdcf 	bl	2c9f4 <z_log_msg_static_create.constprop.0>
   1ae56:	46a5      	mov	sp, r4
		return NULL;
   1ae58:	2400      	movs	r4, #0
}
   1ae5a:	4620      	mov	r0, r4
   1ae5c:	46bd      	mov	sp, r7
   1ae5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   1ae62:	4628      	mov	r0, r5
   1ae64:	f7ff fc9a 	bl	1a79c <att_op_get_type>
   1ae68:	2802      	cmp	r0, #2
   1ae6a:	d01b      	beq.n	1aea4 <bt_att_chan_create_pdu+0x80>
   1ae6c:	2804      	cmp	r0, #4
   1ae6e:	d019      	beq.n	1aea4 <bt_att_chan_create_pdu+0x80>
		timeout = K_FOREVER;
   1ae70:	f04f 38ff 	mov.w	r8, #4294967295
   1ae74:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1ae78:	2100      	movs	r1, #0
   1ae7a:	4642      	mov	r2, r8
   1ae7c:	464b      	mov	r3, r9
   1ae7e:	4608      	mov	r0, r1
   1ae80:	f011 fc58 	bl	2c734 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1ae84:	4604      	mov	r4, r0
   1ae86:	b990      	cbnz	r0, 1aeae <bt_att_chan_create_pdu+0x8a>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1ae88:	466c      	mov	r4, sp
   1ae8a:	b088      	sub	sp, #32
   1ae8c:	466a      	mov	r2, sp
   1ae8e:	4b1f      	ldr	r3, [pc, #124]	; (1af0c <bt_att_chan_create_pdu+0xe8>)
   1ae90:	6153      	str	r3, [r2, #20]
   1ae92:	4b1c      	ldr	r3, [pc, #112]	; (1af04 <bt_att_chan_create_pdu+0xe0>)
   1ae94:	e9c2 3506 	strd	r3, r5, [r2, #24]
   1ae98:	2304      	movs	r3, #4
   1ae9a:	f842 3f10 	str.w	r3, [r2, #16]!
   1ae9e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1aea2:	e7d5      	b.n	1ae50 <bt_att_chan_create_pdu+0x2c>
	switch (att_op_get_type(op)) {
   1aea4:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1aea8:	f04f 0900 	mov.w	r9, #0
   1aeac:	e7e4      	b.n	1ae78 <bt_att_chan_create_pdu+0x54>
	return z_impl_z_current_get();
   1aeae:	f00a ff77 	bl	25da0 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1aeb2:	4b17      	ldr	r3, [pc, #92]	; (1af10 <bt_att_chan_create_pdu+0xec>)
   1aeb4:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1aeb6:	4817      	ldr	r0, [pc, #92]	; (1af14 <bt_att_chan_create_pdu+0xf0>)
   1aeb8:	bf07      	ittee	eq
   1aeba:	2200      	moveq	r2, #0
   1aebc:	2300      	moveq	r3, #0
   1aebe:	4642      	movne	r2, r8
   1aec0:	464b      	movne	r3, r9
   1aec2:	f00a fa1d 	bl	25300 <z_impl_k_queue_get>
	if (!data) {
   1aec6:	b998      	cbnz	r0, 1aef0 <bt_att_chan_create_pdu+0xcc>
		LOG_WRN("Unable to allocate ATT TX meta");
   1aec8:	466d      	mov	r5, sp
   1aeca:	b088      	sub	sp, #32
   1aecc:	466a      	mov	r2, sp
   1aece:	4b12      	ldr	r3, [pc, #72]	; (1af18 <bt_att_chan_create_pdu+0xf4>)
   1aed0:	6153      	str	r3, [r2, #20]
   1aed2:	4b0c      	ldr	r3, [pc, #48]	; (1af04 <bt_att_chan_create_pdu+0xe0>)
   1aed4:	6193      	str	r3, [r2, #24]
   1aed6:	2303      	movs	r3, #3
   1aed8:	f842 3f10 	str.w	r3, [r2, #16]!
   1aedc:	480a      	ldr	r0, [pc, #40]	; (1af08 <bt_att_chan_create_pdu+0xe4>)
   1aede:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1aee2:	f011 fd87 	bl	2c9f4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1aee6:	4620      	mov	r0, r4
   1aee8:	46ad      	mov	sp, r5
   1aeea:	f005 fd99 	bl	20a20 <net_buf_unref>
		return NULL;
   1aeee:	e7b3      	b.n	1ae58 <bt_att_chan_create_pdu+0x34>
	bt_att_tx_meta_data(buf) = data;
   1aef0:	61a0      	str	r0, [r4, #24]
   1aef2:	2101      	movs	r1, #1
   1aef4:	f104 000c 	add.w	r0, r4, #12
   1aef8:	f013 fa9b 	bl	2e432 <net_buf_simple_add>
	hdr->code = op;
   1aefc:	7005      	strb	r5, [r0, #0]
	return buf;
   1aefe:	e7ac      	b.n	1ae5a <bt_att_chan_create_pdu+0x36>
   1af00:	0003352e 	.word	0x0003352e
   1af04:	00033708 	.word	0x00033708
   1af08:	0002fbdc 	.word	0x0002fbdc
   1af0c:	00033209 	.word	0x00033209
   1af10:	20002ca8 	.word	0x20002ca8
   1af14:	200009a0 	.word	0x200009a0
   1af18:	00033557 	.word	0x00033557

0001af1c <bt_att_recv>:
{
   1af1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
   1af20:	8a0b      	ldrh	r3, [r1, #16]
{
   1af22:	af00      	add	r7, sp, #0
   1af24:	4605      	mov	r5, r0
   1af26:	4689      	mov	r9, r1
	if (buf->len < sizeof(*hdr)) {
   1af28:	b99b      	cbnz	r3, 1af52 <bt_att_recv+0x36>
		LOG_ERR("Too small ATT PDU received");
   1af2a:	466c      	mov	r4, sp
   1af2c:	b088      	sub	sp, #32
   1af2e:	466a      	mov	r2, sp
   1af30:	4b52      	ldr	r3, [pc, #328]	; (1b07c <bt_att_recv+0x160>)
   1af32:	6153      	str	r3, [r2, #20]
   1af34:	4b52      	ldr	r3, [pc, #328]	; (1b080 <bt_att_recv+0x164>)
   1af36:	6193      	str	r3, [r2, #24]
   1af38:	2303      	movs	r3, #3
   1af3a:	f842 3f10 	str.w	r3, [r2, #16]!
   1af3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			LOG_WRN("Ignoring unexpected request");
   1af42:	4850      	ldr	r0, [pc, #320]	; (1b084 <bt_att_recv+0x168>)
   1af44:	f011 fd56 	bl	2c9f4 <z_log_msg_static_create.constprop.0>
   1af48:	46a5      	mov	sp, r4
}
   1af4a:	2000      	movs	r0, #0
   1af4c:	46bd      	mov	sp, r7
   1af4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1af52:	2101      	movs	r1, #1
   1af54:	f109 000c 	add.w	r0, r9, #12
   1af58:	f013 fa9c 	bl	2e494 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1af5c:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1af60:	4604      	mov	r4, r0
   1af62:	2b00      	cmp	r3, #0
   1af64:	d0f1      	beq.n	1af4a <bt_att_recv+0x2e>
		if (hdr->code == handlers[i].op) {
   1af66:	7801      	ldrb	r1, [r0, #0]
   1af68:	f8df b11c 	ldr.w	fp, [pc, #284]	; 1b088 <bt_att_recv+0x16c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1af6c:	1f2e      	subs	r6, r5, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1af6e:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1af70:	f81b 0033 	ldrb.w	r0, [fp, r3, lsl #3]
   1af74:	4288      	cmp	r0, r1
   1af76:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   1af7a:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
   1af7e:	d118      	bne.n	1afb2 <bt_att_recv+0x96>
		if (handler->type == ATT_REQUEST &&
   1af80:	f892 8002 	ldrb.w	r8, [r2, #2]
   1af84:	f1b8 0f01 	cmp.w	r8, #1
   1af88:	d137      	bne.n	1affa <bt_att_recv+0xde>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1af8a:	2100      	movs	r1, #0
   1af8c:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1af90:	f011 fe27 	bl	2cbe2 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1af94:	2800      	cmp	r0, #0
   1af96:	d03e      	beq.n	1b016 <bt_att_recv+0xfa>
			LOG_WRN("Ignoring unexpected request");
   1af98:	466c      	mov	r4, sp
   1af9a:	b088      	sub	sp, #32
   1af9c:	466a      	mov	r2, sp
   1af9e:	4b3b      	ldr	r3, [pc, #236]	; (1b08c <bt_att_recv+0x170>)
   1afa0:	6153      	str	r3, [r2, #20]
   1afa2:	4b37      	ldr	r3, [pc, #220]	; (1b080 <bt_att_recv+0x164>)
   1afa4:	6193      	str	r3, [r2, #24]
   1afa6:	2303      	movs	r3, #3
   1afa8:	f842 3f10 	str.w	r3, [r2, #16]!
   1afac:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1afb0:	e7c7      	b.n	1af42 <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1afb2:	3301      	adds	r3, #1
   1afb4:	2b1f      	cmp	r3, #31
   1afb6:	d1db      	bne.n	1af70 <bt_att_recv+0x54>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1afb8:	466d      	mov	r5, sp
   1afba:	b088      	sub	sp, #32
   1afbc:	466a      	mov	r2, sp
   1afbe:	4b34      	ldr	r3, [pc, #208]	; (1b090 <bt_att_recv+0x174>)
   1afc0:	6153      	str	r3, [r2, #20]
   1afc2:	4b2f      	ldr	r3, [pc, #188]	; (1b080 <bt_att_recv+0x164>)
   1afc4:	482f      	ldr	r0, [pc, #188]	; (1b084 <bt_att_recv+0x168>)
   1afc6:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1afca:	2304      	movs	r3, #4
   1afcc:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1afd0:	f842 3f10 	str.w	r3, [r2, #16]!
   1afd4:	f011 fd0e 	bl	2c9f4 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1afd8:	7821      	ldrb	r1, [r4, #0]
   1afda:	46ad      	mov	sp, r5
   1afdc:	4608      	mov	r0, r1
   1afde:	f7ff fbdd 	bl	1a79c <att_op_get_type>
   1afe2:	2800      	cmp	r0, #0
   1afe4:	d0b1      	beq.n	1af4a <bt_att_recv+0x2e>
   1afe6:	2805      	cmp	r0, #5
   1afe8:	d0af      	beq.n	1af4a <bt_att_recv+0x2e>
	if (!req) {
   1afea:	2900      	cmp	r1, #0
   1afec:	d0ad      	beq.n	1af4a <bt_att_recv+0x2e>
   1afee:	2306      	movs	r3, #6
   1aff0:	2200      	movs	r2, #0
   1aff2:	4630      	mov	r0, r6
   1aff4:	f011 ff6d 	bl	2ced2 <send_err_rsp.part.0>
   1aff8:	e7a7      	b.n	1af4a <bt_att_recv+0x2e>
		} else if (handler->type == ATT_INDICATION &&
   1affa:	f1b8 0f05 	cmp.w	r8, #5
   1affe:	d10a      	bne.n	1b016 <bt_att_recv+0xfa>
			   atomic_test_and_set_bit(att_chan->flags,
   1b000:	2101      	movs	r1, #1
   1b002:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1b006:	f011 fdec 	bl	2cbe2 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1b00a:	b120      	cbz	r0, 1b016 <bt_att_recv+0xfa>
			LOG_WRN("Ignoring unexpected indication");
   1b00c:	466c      	mov	r4, sp
   1b00e:	b088      	sub	sp, #32
   1b010:	466a      	mov	r2, sp
   1b012:	4b20      	ldr	r3, [pc, #128]	; (1b094 <bt_att_recv+0x178>)
   1b014:	e7c4      	b.n	1afa0 <bt_att_recv+0x84>
	if (buf->len < handler->expect_len) {
   1b016:	44da      	add	sl, fp
   1b018:	f8b9 3010 	ldrh.w	r3, [r9, #16]
   1b01c:	f89a 2001 	ldrb.w	r2, [sl, #1]
   1b020:	429a      	cmp	r2, r3
   1b022:	d919      	bls.n	1b058 <bt_att_recv+0x13c>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1b024:	46e8      	mov	r8, sp
   1b026:	b08a      	sub	sp, #40	; 0x28
   1b028:	7821      	ldrb	r1, [r4, #0]
   1b02a:	466a      	mov	r2, sp
   1b02c:	481a      	ldr	r0, [pc, #104]	; (1b098 <bt_att_recv+0x17c>)
   1b02e:	6150      	str	r0, [r2, #20]
   1b030:	4813      	ldr	r0, [pc, #76]	; (1b080 <bt_att_recv+0x164>)
   1b032:	6211      	str	r1, [r2, #32]
   1b034:	e9c2 0306 	strd	r0, r3, [r2, #24]
   1b038:	2305      	movs	r3, #5
   1b03a:	f842 3f10 	str.w	r3, [r2, #16]!
   1b03e:	4811      	ldr	r0, [pc, #68]	; (1b084 <bt_att_recv+0x168>)
   1b040:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1b044:	f011 fcd6 	bl	2c9f4 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   1b048:	f89a 3002 	ldrb.w	r3, [sl, #2]
   1b04c:	2b01      	cmp	r3, #1
   1b04e:	46c5      	mov	sp, r8
   1b050:	f47f af7b 	bne.w	1af4a <bt_att_recv+0x2e>
		err = BT_ATT_ERR_INVALID_PDU;
   1b054:	2304      	movs	r3, #4
   1b056:	e00c      	b.n	1b072 <bt_att_recv+0x156>
		err = handler->func(att_chan, buf);
   1b058:	f8da 3004 	ldr.w	r3, [sl, #4]
   1b05c:	4649      	mov	r1, r9
   1b05e:	4630      	mov	r0, r6
   1b060:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1b062:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   1b066:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1b068:	f47f af6f 	bne.w	1af4a <bt_att_recv+0x2e>
   1b06c:	2800      	cmp	r0, #0
   1b06e:	f43f af6c 	beq.w	1af4a <bt_att_recv+0x2e>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1b072:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   1b074:	2900      	cmp	r1, #0
   1b076:	f43f af68 	beq.w	1af4a <bt_att_recv+0x2e>
   1b07a:	e7b9      	b.n	1aff0 <bt_att_recv+0xd4>
   1b07c:	0003357a 	.word	0x0003357a
   1b080:	000336bd 	.word	0x000336bd
   1b084:	0002fbdc 	.word	0x0002fbdc
   1b088:	000302ec 	.word	0x000302ec
   1b08c:	000335b7 	.word	0x000335b7
   1b090:	00033599 	.word	0x00033599
   1b094:	000335d7 	.word	0x000335d7
   1b098:	000335fa 	.word	0x000335fa

0001b09c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1b09c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b09e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b0a0:	6803      	ldr	r3, [r0, #0]
   1b0a2:	460d      	mov	r5, r1
   1b0a4:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1b0a6:	b087      	sub	sp, #28
   1b0a8:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b0aa:	bf18      	it	ne
   1b0ac:	2101      	movne	r1, #1
   1b0ae:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1b0b0:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b0b2:	f012 fcfd 	bl	2dab0 <bt_gatt_change_aware>
   1b0b6:	b948      	cbnz	r0, 1b0cc <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b0b8:	2105      	movs	r1, #5
   1b0ba:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1b0be:	f011 fd90 	bl	2cbe2 <atomic_test_and_set_bit>
   1b0c2:	2800      	cmp	r0, #0
   1b0c4:	d048      	beq.n	1b158 <att_write_rsp.constprop.0+0xbc>
			return 0;
   1b0c6:	2000      	movs	r0, #0
}
   1b0c8:	b007      	add	sp, #28
   1b0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   1b0cc:	2e00      	cmp	r6, #0
   1b0ce:	d045      	beq.n	1b15c <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   1b0d0:	2218      	movs	r2, #24
   1b0d2:	2100      	movs	r1, #0
   1b0d4:	4668      	mov	r0, sp
   1b0d6:	f010 fdee 	bl	2bcb6 <memset>
	if (rsp) {
   1b0da:	bb67      	cbnz	r7, 1b136 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   1b0dc:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b0de:	4a20      	ldr	r2, [pc, #128]	; (1b160 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   1b0e0:	681b      	ldr	r3, [r3, #0]
   1b0e2:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   1b0e4:	2300      	movs	r3, #0
   1b0e6:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1b0ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b0ec:	9303      	str	r3, [sp, #12]
	data.len = len;
   1b0ee:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1b0f2:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b0f6:	2301      	movs	r3, #1
   1b0f8:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b0fc:	4631      	mov	r1, r6
   1b0fe:	466b      	mov	r3, sp
   1b100:	4630      	mov	r0, r6
	data.req = req;
   1b102:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b106:	f011 fc0e 	bl	2c926 <bt_gatt_foreach_attr>
	if (data.err) {
   1b10a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1b10e:	b1e3      	cbz	r3, 1b14a <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   1b110:	2f00      	cmp	r7, #0
   1b112:	d0d8      	beq.n	1b0c6 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b114:	9b01      	ldr	r3, [sp, #4]
   1b116:	6998      	ldr	r0, [r3, #24]
   1b118:	f7ff fb86 	bl	1a828 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1b11c:	9801      	ldr	r0, [sp, #4]
   1b11e:	f005 fc7f 	bl	20a20 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1b122:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   1b126:	2d00      	cmp	r5, #0
   1b128:	d0cd      	beq.n	1b0c6 <att_write_rsp.constprop.0+0x2a>
   1b12a:	4632      	mov	r2, r6
   1b12c:	4629      	mov	r1, r5
   1b12e:	4620      	mov	r0, r4
   1b130:	f011 fecf 	bl	2ced2 <send_err_rsp.part.0>
   1b134:	e7c7      	b.n	1b0c6 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1b136:	2200      	movs	r2, #0
   1b138:	4639      	mov	r1, r7
   1b13a:	4620      	mov	r0, r4
   1b13c:	f7ff fe72 	bl	1ae24 <bt_att_chan_create_pdu>
   1b140:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1b142:	2800      	cmp	r0, #0
   1b144:	d1ca      	bne.n	1b0dc <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   1b146:	200e      	movs	r0, #14
   1b148:	e7be      	b.n	1b0c8 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   1b14a:	9901      	ldr	r1, [sp, #4]
   1b14c:	2900      	cmp	r1, #0
   1b14e:	d0ba      	beq.n	1b0c6 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1b150:	4620      	mov	r0, r4
   1b152:	f011 fc83 	bl	2ca5c <bt_att_chan_send_rsp>
   1b156:	e7b6      	b.n	1b0c6 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b158:	2012      	movs	r0, #18
   1b15a:	e7b5      	b.n	1b0c8 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b15c:	2001      	movs	r0, #1
   1b15e:	e7b3      	b.n	1b0c8 <att_write_rsp.constprop.0+0x2c>
   1b160:	0002c8c5 	.word	0x0002c8c5

0001b164 <att_signed_write_cmd>:
{
   1b164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b168:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->chan.chan.conn;
   1b16a:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
   1b16e:	af02      	add	r7, sp, #8
   1b170:	4605      	mov	r5, r0
   1b172:	460c      	mov	r4, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1b174:	3034      	adds	r0, #52	; 0x34
   1b176:	2103      	movs	r1, #3
   1b178:	f011 fb4f 	bl	2c81a <atomic_test_bit>
   1b17c:	b9f0      	cbnz	r0, 1b1bc <att_signed_write_cmd+0x58>
	handle = sys_le16_to_cpu(req->handle);
   1b17e:	4626      	mov	r6, r4
	return net_buf_simple_push(&buf->b, len);
   1b180:	2101      	movs	r1, #1
   1b182:	f856 3f0c 	ldr.w	r3, [r6, #12]!
   1b186:	4630      	mov	r0, r6
   1b188:	f8b3 8000 	ldrh.w	r8, [r3]
   1b18c:	f013 f972 	bl	2e474 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
   1b190:	4648      	mov	r0, r9
   1b192:	4621      	mov	r1, r4
   1b194:	f004 fa8a 	bl	1f6ac <bt_smp_sign_verify>
	if (err) {
   1b198:	4681      	mov	r9, r0
   1b19a:	b1a0      	cbz	r0, 1b1c6 <att_signed_write_cmd+0x62>
		LOG_ERR("Error verifying data");
   1b19c:	466c      	mov	r4, sp
   1b19e:	b088      	sub	sp, #32
   1b1a0:	aa02      	add	r2, sp, #8
   1b1a2:	4b13      	ldr	r3, [pc, #76]	; (1b1f0 <att_signed_write_cmd+0x8c>)
   1b1a4:	6153      	str	r3, [r2, #20]
   1b1a6:	4b13      	ldr	r3, [pc, #76]	; (1b1f4 <att_signed_write_cmd+0x90>)
   1b1a8:	6193      	str	r3, [r2, #24]
   1b1aa:	2303      	movs	r3, #3
   1b1ac:	f842 3f10 	str.w	r3, [r2, #16]!
   1b1b0:	4811      	ldr	r0, [pc, #68]	; (1b1f8 <att_signed_write_cmd+0x94>)
   1b1b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b1b6:	f011 fc1d 	bl	2c9f4 <z_log_msg_static_create.constprop.0>
   1b1ba:	46a5      	mov	sp, r4
		return 0;
   1b1bc:	2000      	movs	r0, #0
}
   1b1be:	3704      	adds	r7, #4
   1b1c0:	46bd      	mov	sp, r7
   1b1c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull(&buf->b, len);
   1b1c6:	2101      	movs	r1, #1
   1b1c8:	4630      	mov	r0, r6
   1b1ca:	f013 f95b 	bl	2e484 <net_buf_simple_pull>
   1b1ce:	2102      	movs	r1, #2
   1b1d0:	4630      	mov	r0, r6
   1b1d2:	f013 f957 	bl	2e484 <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
   1b1d6:	8a23      	ldrh	r3, [r4, #16]
   1b1d8:	3b0c      	subs	r3, #12
   1b1da:	b29b      	uxth	r3, r3
   1b1dc:	9301      	str	r3, [sp, #4]
   1b1de:	68e3      	ldr	r3, [r4, #12]
   1b1e0:	9300      	str	r3, [sp, #0]
   1b1e2:	464a      	mov	r2, r9
   1b1e4:	4643      	mov	r3, r8
   1b1e6:	4649      	mov	r1, r9
   1b1e8:	4628      	mov	r0, r5
   1b1ea:	f7ff ff57 	bl	1b09c <att_write_rsp.constprop.0>
   1b1ee:	e7e6      	b.n	1b1be <att_signed_write_cmd+0x5a>
   1b1f0:	0003361d 	.word	0x0003361d
   1b1f4:	00033699 	.word	0x00033699
   1b1f8:	0002fbdc 	.word	0x0002fbdc

0001b1fc <bt_att_create_pdu>:
{
   1b1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b1fe:	af00      	add	r7, sp, #0
   1b200:	460e      	mov	r6, r1
   1b202:	4615      	mov	r5, r2
	att = att_get(conn);
   1b204:	f7ff fc70 	bl	1aae8 <att_get>
	if (!att) {
   1b208:	b1f0      	cbz	r0, 1b248 <bt_att_create_pdu+0x4c>
	return list->head;
   1b20a:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b20c:	4618      	mov	r0, r3
   1b20e:	b11b      	cbz	r3, 1b218 <bt_att_create_pdu+0x1c>
	return node->next;
   1b210:	f850 3988 	ldr.w	r3, [r0], #-136
   1b214:	b103      	cbz	r3, 1b218 <bt_att_create_pdu+0x1c>
   1b216:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b218:	1c6c      	adds	r4, r5, #1
   1b21a:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b21c:	b118      	cbz	r0, 1b226 <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b21e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1b220:	42a1      	cmp	r1, r4
   1b222:	d21c      	bcs.n	1b25e <bt_att_create_pdu+0x62>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b224:	b993      	cbnz	r3, 1b24c <bt_att_create_pdu+0x50>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1b226:	466d      	mov	r5, sp
   1b228:	b088      	sub	sp, #32
   1b22a:	466a      	mov	r2, sp
   1b22c:	4b10      	ldr	r3, [pc, #64]	; (1b270 <bt_att_create_pdu+0x74>)
   1b22e:	6153      	str	r3, [r2, #20]
   1b230:	4b10      	ldr	r3, [pc, #64]	; (1b274 <bt_att_create_pdu+0x78>)
   1b232:	4811      	ldr	r0, [pc, #68]	; (1b278 <bt_att_create_pdu+0x7c>)
   1b234:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1b238:	2304      	movs	r3, #4
   1b23a:	f842 3f10 	str.w	r3, [r2, #16]!
   1b23e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1b242:	f011 fbd7 	bl	2c9f4 <z_log_msg_static_create.constprop.0>
   1b246:	46ad      	mov	sp, r5
		return NULL;
   1b248:	2000      	movs	r0, #0
   1b24a:	e00c      	b.n	1b266 <bt_att_create_pdu+0x6a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b24c:	4618      	mov	r0, r3
   1b24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1b252:	b153      	cbz	r3, 1b26a <bt_att_create_pdu+0x6e>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b254:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1b256:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b258:	f1a3 0388 	sub.w	r3, r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b25c:	d8f6      	bhi.n	1b24c <bt_att_create_pdu+0x50>
		return bt_att_chan_create_pdu(chan, op, len);
   1b25e:	462a      	mov	r2, r5
   1b260:	4631      	mov	r1, r6
   1b262:	f7ff fddf 	bl	1ae24 <bt_att_chan_create_pdu>
}
   1b266:	46bd      	mov	sp, r7
   1b268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b26a:	4614      	mov	r4, r2
   1b26c:	e7d7      	b.n	1b21e <bt_att_create_pdu+0x22>
   1b26e:	bf00      	nop
   1b270:	00033636 	.word	0x00033636
   1b274:	000336f6 	.word	0x000336f6
   1b278:	0002fbdc 	.word	0x0002fbdc

0001b27c <att_read_group_req>:
{
   1b27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b280:	8a0e      	ldrh	r6, [r1, #16]
   1b282:	3e04      	subs	r6, #4
   1b284:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   1b286:	2e02      	cmp	r6, #2
{
   1b288:	4604      	mov	r4, r0
   1b28a:	b08c      	sub	sp, #48	; 0x30
   1b28c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1b28e:	d001      	beq.n	1b294 <att_read_group_req+0x18>
   1b290:	2e10      	cmp	r6, #16
   1b292:	d16a      	bne.n	1b36a <att_read_group_req+0xee>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b294:	2104      	movs	r1, #4
   1b296:	300c      	adds	r0, #12
   1b298:	f013 f8fc 	bl	2e494 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b29c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b2a0:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b2a2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b2a4:	1d01      	adds	r1, r0, #4
   1b2a6:	4632      	mov	r2, r6
   1b2a8:	4640      	mov	r0, r8
   1b2aa:	f010 fde6 	bl	2be7a <bt_uuid_create>
   1b2ae:	2800      	cmp	r0, #0
   1b2b0:	d05d      	beq.n	1b36e <att_read_group_req+0xf2>
	if (!start || !end) {
   1b2b2:	2d00      	cmp	r5, #0
   1b2b4:	d03a      	beq.n	1b32c <att_read_group_req+0xb0>
   1b2b6:	2600      	movs	r6, #0
   1b2b8:	2f00      	cmp	r7, #0
   1b2ba:	d036      	beq.n	1b32a <att_read_group_req+0xae>
	if (start > end) {
   1b2bc:	42bd      	cmp	r5, r7
   1b2be:	d835      	bhi.n	1b32c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1b2c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b2c4:	a901      	add	r1, sp, #4
   1b2c6:	4640      	mov	r0, r8
   1b2c8:	f88d 6004 	strb.w	r6, [sp, #4]
   1b2cc:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b2d0:	f010 fda5 	bl	2be1e <bt_uuid_cmp>
   1b2d4:	bb70      	cbnz	r0, 1b334 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b2d6:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1b2d8:	2214      	movs	r2, #20
   1b2da:	2100      	movs	r1, #0
   1b2dc:	a807      	add	r0, sp, #28
   1b2de:	f010 fcea 	bl	2bcb6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1b2e2:	2201      	movs	r2, #1
   1b2e4:	2111      	movs	r1, #17
   1b2e6:	4630      	mov	r0, r6
   1b2e8:	f7ff ff88 	bl	1b1fc <bt_att_create_pdu>
   1b2ec:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1b2ee:	2800      	cmp	r0, #0
   1b2f0:	d03d      	beq.n	1b36e <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1b2f2:	2101      	movs	r1, #1
   1b2f4:	300c      	adds	r0, #12
	data.uuid = uuid;
   1b2f6:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1b2fa:	f013 f89a 	bl	2e432 <net_buf_simple_add>
	data.rsp->len = 0U;
   1b2fe:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1b300:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b302:	4a1c      	ldr	r2, [pc, #112]	; (1b374 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   1b304:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b306:	4639      	mov	r1, r7
	data.group = NULL;
   1b308:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b30a:	4628      	mov	r0, r5
   1b30c:	ab07      	add	r3, sp, #28
   1b30e:	f011 fb0a 	bl	2c926 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1b312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b314:	781b      	ldrb	r3, [r3, #0]
   1b316:	bb1b      	cbnz	r3, 1b360 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b318:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b31a:	6998      	ldr	r0, [r3, #24]
   1b31c:	f7ff fa84 	bl	1a828 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b320:	9809      	ldr	r0, [sp, #36]	; 0x24
   1b322:	f005 fb7d 	bl	20a20 <net_buf_unref>
	if (!req) {
   1b326:	230a      	movs	r3, #10
   1b328:	e001      	b.n	1b32e <att_read_group_req+0xb2>
			*err = 0U;
   1b32a:	463d      	mov	r5, r7
	if (!req) {
   1b32c:	2301      	movs	r3, #1
   1b32e:	462a      	mov	r2, r5
   1b330:	2110      	movs	r1, #16
   1b332:	e00e      	b.n	1b352 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1b334:	f642 0301 	movw	r3, #10241	; 0x2801
   1b338:	a907      	add	r1, sp, #28
   1b33a:	4640      	mov	r0, r8
   1b33c:	f88d 601c 	strb.w	r6, [sp, #28]
   1b340:	f8ad 301e 	strh.w	r3, [sp, #30]
   1b344:	f010 fd6b 	bl	2be1e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1b348:	2800      	cmp	r0, #0
   1b34a:	d0c4      	beq.n	1b2d6 <att_read_group_req+0x5a>
	if (!req) {
   1b34c:	2310      	movs	r3, #16
   1b34e:	462a      	mov	r2, r5
   1b350:	4619      	mov	r1, r3
   1b352:	4620      	mov	r0, r4
   1b354:	f011 fdbd 	bl	2ced2 <send_err_rsp.part.0>
		return 0;
   1b358:	2000      	movs	r0, #0
}
   1b35a:	b00c      	add	sp, #48	; 0x30
   1b35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1b360:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b362:	4620      	mov	r0, r4
   1b364:	f011 fb7a 	bl	2ca5c <bt_att_chan_send_rsp>
	return 0;
   1b368:	e7f6      	b.n	1b358 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   1b36a:	2004      	movs	r0, #4
   1b36c:	e7f5      	b.n	1b35a <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1b36e:	200e      	movs	r0, #14
   1b370:	e7f3      	b.n	1b35a <att_read_group_req+0xde>
   1b372:	bf00      	nop
   1b374:	0001ab6d 	.word	0x0001ab6d

0001b378 <att_read_mult_vl_req>:
{
   1b378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b37c:	6846      	ldr	r6, [r0, #4]
{
   1b37e:	b085      	sub	sp, #20
   1b380:	4604      	mov	r4, r0
   1b382:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1b384:	4630      	mov	r0, r6
   1b386:	2101      	movs	r1, #1
   1b388:	f012 fb92 	bl	2dab0 <bt_gatt_change_aware>
   1b38c:	b950      	cbnz	r0, 1b3a4 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b38e:	2105      	movs	r1, #5
   1b390:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1b394:	f011 fc25 	bl	2cbe2 <atomic_test_and_set_bit>
   1b398:	2800      	cmp	r0, #0
   1b39a:	d13b      	bne.n	1b414 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b39c:	2012      	movs	r0, #18
}
   1b39e:	b005      	add	sp, #20
   1b3a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1b3a4:	2210      	movs	r2, #16
   1b3a6:	2100      	movs	r1, #0
   1b3a8:	4668      	mov	r0, sp
   1b3aa:	f010 fc84 	bl	2bcb6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1b3ae:	2200      	movs	r2, #0
   1b3b0:	2121      	movs	r1, #33	; 0x21
   1b3b2:	4630      	mov	r0, r6
   1b3b4:	f7ff ff22 	bl	1b1fc <bt_att_create_pdu>
   1b3b8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b3ba:	b368      	cbz	r0, 1b418 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1b3bc:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1b41c <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1b3c0:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1b3c2:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b3c6:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1b3ca:	8a2b      	ldrh	r3, [r5, #16]
   1b3cc:	2b01      	cmp	r3, #1
   1b3ce:	d804      	bhi.n	1b3da <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1b3d0:	9902      	ldr	r1, [sp, #8]
   1b3d2:	4620      	mov	r0, r4
   1b3d4:	f011 fb42 	bl	2ca5c <bt_att_chan_send_rsp>
	return 0;
   1b3d8:	e01c      	b.n	1b414 <att_read_mult_vl_req+0x9c>
   1b3da:	4638      	mov	r0, r7
   1b3dc:	f013 f86a 	bl	2e4b4 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1b3e0:	466b      	mov	r3, sp
   1b3e2:	464a      	mov	r2, r9
   1b3e4:	4601      	mov	r1, r0
   1b3e6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b3e8:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1b3ec:	f011 fa9b 	bl	2c926 <bt_gatt_foreach_attr>
		if (data.err) {
   1b3f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b3f4:	2b00      	cmp	r3, #0
   1b3f6:	d0e8      	beq.n	1b3ca <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b3f8:	9b02      	ldr	r3, [sp, #8]
   1b3fa:	6998      	ldr	r0, [r3, #24]
   1b3fc:	f7ff fa14 	bl	1a828 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1b400:	9802      	ldr	r0, [sp, #8]
   1b402:	f005 fb0d 	bl	20a20 <net_buf_unref>
	if (!req) {
   1b406:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b40a:	4632      	mov	r2, r6
   1b40c:	2120      	movs	r1, #32
   1b40e:	4620      	mov	r0, r4
   1b410:	f011 fd5f 	bl	2ced2 <send_err_rsp.part.0>
			return 0;
   1b414:	2000      	movs	r0, #0
   1b416:	e7c2      	b.n	1b39e <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1b418:	200e      	movs	r0, #14
   1b41a:	e7c0      	b.n	1b39e <att_read_mult_vl_req+0x26>
   1b41c:	0002cc53 	.word	0x0002cc53

0001b420 <att_read_mult_req>:
{
   1b420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b424:	6846      	ldr	r6, [r0, #4]
{
   1b426:	b085      	sub	sp, #20
   1b428:	4604      	mov	r4, r0
   1b42a:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1b42c:	4630      	mov	r0, r6
   1b42e:	2101      	movs	r1, #1
   1b430:	f012 fb3e 	bl	2dab0 <bt_gatt_change_aware>
   1b434:	b950      	cbnz	r0, 1b44c <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b436:	2105      	movs	r1, #5
   1b438:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1b43c:	f011 fbd1 	bl	2cbe2 <atomic_test_and_set_bit>
   1b440:	2800      	cmp	r0, #0
   1b442:	d13b      	bne.n	1b4bc <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b444:	2012      	movs	r0, #18
}
   1b446:	b005      	add	sp, #20
   1b448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1b44c:	2210      	movs	r2, #16
   1b44e:	2100      	movs	r1, #0
   1b450:	4668      	mov	r0, sp
   1b452:	f010 fc30 	bl	2bcb6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1b456:	2200      	movs	r2, #0
   1b458:	210f      	movs	r1, #15
   1b45a:	4630      	mov	r0, r6
   1b45c:	f7ff fece 	bl	1b1fc <bt_att_create_pdu>
   1b460:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b462:	b368      	cbz	r0, 1b4c0 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b464:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1b4c4 <att_read_mult_req+0xa4>
	data.chan = chan;
   1b468:	9400      	str	r4, [sp, #0]
   1b46a:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b46e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1b472:	8a2b      	ldrh	r3, [r5, #16]
   1b474:	2b01      	cmp	r3, #1
   1b476:	d804      	bhi.n	1b482 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1b478:	9902      	ldr	r1, [sp, #8]
   1b47a:	4620      	mov	r0, r4
   1b47c:	f011 faee 	bl	2ca5c <bt_att_chan_send_rsp>
	return 0;
   1b480:	e01c      	b.n	1b4bc <att_read_mult_req+0x9c>
   1b482:	4638      	mov	r0, r7
   1b484:	f013 f816 	bl	2e4b4 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b488:	466b      	mov	r3, sp
   1b48a:	464a      	mov	r2, r9
   1b48c:	4601      	mov	r1, r0
   1b48e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b490:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b494:	f011 fa47 	bl	2c926 <bt_gatt_foreach_attr>
		if (data.err) {
   1b498:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b49c:	2b00      	cmp	r3, #0
   1b49e:	d0e8      	beq.n	1b472 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b4a0:	9b02      	ldr	r3, [sp, #8]
   1b4a2:	6998      	ldr	r0, [r3, #24]
   1b4a4:	f7ff f9c0 	bl	1a828 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1b4a8:	9802      	ldr	r0, [sp, #8]
   1b4aa:	f005 fab9 	bl	20a20 <net_buf_unref>
	if (!req) {
   1b4ae:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b4b2:	4632      	mov	r2, r6
   1b4b4:	210e      	movs	r1, #14
   1b4b6:	4620      	mov	r0, r4
   1b4b8:	f011 fd0b 	bl	2ced2 <send_err_rsp.part.0>
			return 0;
   1b4bc:	2000      	movs	r0, #0
   1b4be:	e7c2      	b.n	1b446 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1b4c0:	200e      	movs	r0, #14
   1b4c2:	e7c0      	b.n	1b446 <att_read_mult_req+0x26>
   1b4c4:	0002cc0d 	.word	0x0002cc0d

0001b4c8 <att_read_rsp>:
{
   1b4c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b4cc:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1b4d0:	4604      	mov	r4, r0
   1b4d2:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1b4d4:	4640      	mov	r0, r8
   1b4d6:	2101      	movs	r1, #1
{
   1b4d8:	4617      	mov	r7, r2
   1b4da:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1b4dc:	f012 fae8 	bl	2dab0 <bt_gatt_change_aware>
   1b4e0:	b948      	cbnz	r0, 1b4f6 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b4e2:	2105      	movs	r1, #5
   1b4e4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1b4e8:	f011 fb7b 	bl	2cbe2 <atomic_test_and_set_bit>
   1b4ec:	bb78      	cbnz	r0, 1b54e <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b4ee:	2012      	movs	r0, #18
}
   1b4f0:	b004      	add	sp, #16
   1b4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1b4f6:	b38d      	cbz	r5, 1b55c <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   1b4f8:	2210      	movs	r2, #16
   1b4fa:	2100      	movs	r1, #0
   1b4fc:	4668      	mov	r0, sp
   1b4fe:	f010 fbda 	bl	2bcb6 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1b502:	2200      	movs	r2, #0
   1b504:	4639      	mov	r1, r7
   1b506:	4640      	mov	r0, r8
   1b508:	f7ff fe78 	bl	1b1fc <bt_att_create_pdu>
   1b50c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b50e:	b338      	cbz	r0, 1b560 <att_read_rsp+0x98>
	data.offset = offset;
   1b510:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1b514:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b518:	2301      	movs	r3, #1
   1b51a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b51e:	4a11      	ldr	r2, [pc, #68]	; (1b564 <att_read_rsp+0x9c>)
	data.chan = chan;
   1b520:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b522:	466b      	mov	r3, sp
   1b524:	4629      	mov	r1, r5
   1b526:	4628      	mov	r0, r5
   1b528:	f011 f9fd 	bl	2c926 <bt_gatt_foreach_attr>
	if (data.err) {
   1b52c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b530:	b17b      	cbz	r3, 1b552 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b532:	9b02      	ldr	r3, [sp, #8]
   1b534:	6998      	ldr	r0, [r3, #24]
   1b536:	f7ff f977 	bl	1a828 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b53a:	9802      	ldr	r0, [sp, #8]
   1b53c:	f005 fa70 	bl	20a20 <net_buf_unref>
	if (!req) {
   1b540:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b544:	462a      	mov	r2, r5
   1b546:	4631      	mov	r1, r6
   1b548:	4620      	mov	r0, r4
   1b54a:	f011 fcc2 	bl	2ced2 <send_err_rsp.part.0>
			return 0;
   1b54e:	2000      	movs	r0, #0
   1b550:	e7ce      	b.n	1b4f0 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1b552:	9902      	ldr	r1, [sp, #8]
   1b554:	4620      	mov	r0, r4
   1b556:	f011 fa81 	bl	2ca5c <bt_att_chan_send_rsp>
	return 0;
   1b55a:	e7f8      	b.n	1b54e <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b55c:	2001      	movs	r0, #1
   1b55e:	e7c7      	b.n	1b4f0 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1b560:	200e      	movs	r0, #14
   1b562:	e7c5      	b.n	1b4f0 <att_read_rsp+0x28>
   1b564:	0002cc0d 	.word	0x0002cc0d

0001b568 <att_read_type_req>:
{
   1b568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b56c:	8a0d      	ldrh	r5, [r1, #16]
   1b56e:	3d04      	subs	r5, #4
   1b570:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1b572:	2d02      	cmp	r5, #2
{
   1b574:	4604      	mov	r4, r0
   1b576:	b08c      	sub	sp, #48	; 0x30
   1b578:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1b57a:	d001      	beq.n	1b580 <att_read_type_req+0x18>
   1b57c:	2d10      	cmp	r5, #16
   1b57e:	d150      	bne.n	1b622 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b580:	2104      	movs	r1, #4
   1b582:	300c      	adds	r0, #12
   1b584:	f012 ff86 	bl	2e494 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b588:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b58c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b58e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b590:	1d01      	adds	r1, r0, #4
   1b592:	462a      	mov	r2, r5
   1b594:	4640      	mov	r0, r8
   1b596:	f010 fc70 	bl	2be7a <bt_uuid_create>
   1b59a:	b188      	cbz	r0, 1b5c0 <att_read_type_req+0x58>
	if (!start || !end) {
   1b59c:	b19e      	cbz	r6, 1b5c6 <att_read_type_req+0x5e>
   1b59e:	b18f      	cbz	r7, 1b5c4 <att_read_type_req+0x5c>
	if (start > end) {
   1b5a0:	42b7      	cmp	r7, r6
   1b5a2:	d310      	bcc.n	1b5c6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1b5a4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1b5a6:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1b5a8:	2100      	movs	r1, #0
   1b5aa:	eb0d 0002 	add.w	r0, sp, r2
   1b5ae:	f010 fb82 	bl	2bcb6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1b5b2:	2201      	movs	r2, #1
   1b5b4:	2109      	movs	r1, #9
   1b5b6:	4628      	mov	r0, r5
   1b5b8:	f7ff fe20 	bl	1b1fc <bt_att_create_pdu>
   1b5bc:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1b5be:	b960      	cbnz	r0, 1b5da <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1b5c0:	200e      	movs	r0, #14
   1b5c2:	e007      	b.n	1b5d4 <att_read_type_req+0x6c>
			*err = 0U;
   1b5c4:	463e      	mov	r6, r7
	if (!req) {
   1b5c6:	2301      	movs	r3, #1
   1b5c8:	4632      	mov	r2, r6
   1b5ca:	2108      	movs	r1, #8
   1b5cc:	4620      	mov	r0, r4
   1b5ce:	f011 fc80 	bl	2ced2 <send_err_rsp.part.0>
		return 0;
   1b5d2:	2000      	movs	r0, #0
}
   1b5d4:	b00c      	add	sp, #48	; 0x30
   1b5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1b5da:	2101      	movs	r1, #1
   1b5dc:	300c      	adds	r0, #12
	data.uuid = uuid;
   1b5de:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1b5e2:	f012 ff26 	bl	2e432 <net_buf_simple_add>
	data.rsp->len = 0U;
   1b5e6:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1b5e8:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   1b5ea:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b5ec:	230a      	movs	r3, #10
   1b5ee:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1b5f2:	4a0d      	ldr	r2, [pc, #52]	; (1b628 <att_read_type_req+0xc0>)
   1b5f4:	ab06      	add	r3, sp, #24
   1b5f6:	4639      	mov	r1, r7
   1b5f8:	4630      	mov	r0, r6
   1b5fa:	f011 f994 	bl	2c926 <bt_gatt_foreach_attr>
	if (data.err) {
   1b5fe:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1b602:	b14b      	cbz	r3, 1b618 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b604:	9b08      	ldr	r3, [sp, #32]
   1b606:	6998      	ldr	r0, [r3, #24]
   1b608:	f7ff f90e 	bl	1a828 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b60c:	9808      	ldr	r0, [sp, #32]
   1b60e:	f005 fa07 	bl	20a20 <net_buf_unref>
	if (!req) {
   1b612:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1b616:	e7d7      	b.n	1b5c8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1b618:	9908      	ldr	r1, [sp, #32]
   1b61a:	4620      	mov	r0, r4
   1b61c:	f011 fa1e 	bl	2ca5c <bt_att_chan_send_rsp>
	return 0;
   1b620:	e7d7      	b.n	1b5d2 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1b622:	2004      	movs	r0, #4
   1b624:	e7d6      	b.n	1b5d4 <att_read_type_req+0x6c>
   1b626:	bf00      	nop
   1b628:	0001ac5d 	.word	0x0001ac5d

0001b62c <att_find_type_req>:
{
   1b62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b630:	460f      	mov	r7, r1
   1b632:	b086      	sub	sp, #24
   1b634:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1b636:	2106      	movs	r1, #6
   1b638:	f107 000c 	add.w	r0, r7, #12
   1b63c:	f012 ff2a 	bl	2e494 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b640:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b642:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1b646:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   1b648:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1b64c:	b1c5      	cbz	r5, 1b680 <att_find_type_req+0x54>
   1b64e:	2300      	movs	r3, #0
   1b650:	f1b8 0f00 	cmp.w	r8, #0
   1b654:	d013      	beq.n	1b67e <att_find_type_req+0x52>
	if (start > end) {
   1b656:	4545      	cmp	r5, r8
   1b658:	d812      	bhi.n	1b680 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1b65a:	f88d 3000 	strb.w	r3, [sp]
   1b65e:	f88d 3004 	strb.w	r3, [sp, #4]
   1b662:	a901      	add	r1, sp, #4
   1b664:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b668:	4668      	mov	r0, sp
   1b66a:	f8ad 2002 	strh.w	r2, [sp, #2]
   1b66e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b672:	f010 fbd4 	bl	2be1e <bt_uuid_cmp>
   1b676:	4606      	mov	r6, r0
   1b678:	b160      	cbz	r0, 1b694 <att_find_type_req+0x68>
	if (!req) {
   1b67a:	230a      	movs	r3, #10
   1b67c:	e001      	b.n	1b682 <att_find_type_req+0x56>
			*err = 0U;
   1b67e:	4645      	mov	r5, r8
	if (!req) {
   1b680:	2301      	movs	r3, #1
   1b682:	462a      	mov	r2, r5
   1b684:	2106      	movs	r1, #6
   1b686:	4620      	mov	r0, r4
   1b688:	f011 fc23 	bl	2ced2 <send_err_rsp.part.0>
		return 0;
   1b68c:	2000      	movs	r0, #0
}
   1b68e:	b006      	add	sp, #24
   1b690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b694:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1b698:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1b69a:	4601      	mov	r1, r0
   1b69c:	2214      	movs	r2, #20
   1b69e:	a801      	add	r0, sp, #4
   1b6a0:	f010 fb09 	bl	2bcb6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1b6a4:	4632      	mov	r2, r6
   1b6a6:	2107      	movs	r1, #7
   1b6a8:	4650      	mov	r0, sl
   1b6aa:	f7ff fda7 	bl	1b1fc <bt_att_create_pdu>
   1b6ae:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b6b0:	b1f8      	cbz	r0, 1b6f2 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b6b2:	230a      	movs	r3, #10
   1b6b4:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b6b8:	4a0f      	ldr	r2, [pc, #60]	; (1b6f8 <att_find_type_req+0xcc>)
	data.chan = chan;
   1b6ba:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b6bc:	ab01      	add	r3, sp, #4
   1b6be:	4641      	mov	r1, r8
   1b6c0:	4628      	mov	r0, r5
	data.value = value;
   1b6c2:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   1b6c6:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b6ca:	f011 f92c 	bl	2c926 <bt_gatt_foreach_attr>
	if (data.err) {
   1b6ce:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b6d2:	b14b      	cbz	r3, 1b6e8 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b6d4:	9b02      	ldr	r3, [sp, #8]
   1b6d6:	6998      	ldr	r0, [r3, #24]
   1b6d8:	f7ff f8a6 	bl	1a828 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b6dc:	9802      	ldr	r0, [sp, #8]
   1b6de:	f005 f99f 	bl	20a20 <net_buf_unref>
	if (!req) {
   1b6e2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b6e6:	e7cc      	b.n	1b682 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   1b6e8:	9902      	ldr	r1, [sp, #8]
   1b6ea:	4620      	mov	r0, r4
   1b6ec:	f011 f9b6 	bl	2ca5c <bt_att_chan_send_rsp>
	return 0;
   1b6f0:	e7cc      	b.n	1b68c <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1b6f2:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1b6f4:	e7cb      	b.n	1b68e <att_find_type_req+0x62>
   1b6f6:	bf00      	nop
   1b6f8:	0001a845 	.word	0x0001a845

0001b6fc <att_find_info_req>:
{
   1b6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1b6fe:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b700:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b702:	885e      	ldrh	r6, [r3, #2]
{
   1b704:	b085      	sub	sp, #20
   1b706:	4604      	mov	r4, r0
	if (!start || !end) {
   1b708:	b195      	cbz	r5, 1b730 <att_find_info_req+0x34>
   1b70a:	b186      	cbz	r6, 1b72e <att_find_info_req+0x32>
	if (start > end) {
   1b70c:	42b5      	cmp	r5, r6
   1b70e:	d80f      	bhi.n	1b730 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b710:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1b712:	2210      	movs	r2, #16
   1b714:	2100      	movs	r1, #0
   1b716:	4668      	mov	r0, sp
   1b718:	f010 facd 	bl	2bcb6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1b71c:	2200      	movs	r2, #0
   1b71e:	2105      	movs	r1, #5
   1b720:	4638      	mov	r0, r7
   1b722:	f7ff fd6b 	bl	1b1fc <bt_att_create_pdu>
   1b726:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1b728:	b958      	cbnz	r0, 1b742 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1b72a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1b72c:	e007      	b.n	1b73e <att_find_info_req+0x42>
			*err = 0U;
   1b72e:	4635      	mov	r5, r6
	if (!req) {
   1b730:	2301      	movs	r3, #1
   1b732:	462a      	mov	r2, r5
   1b734:	2104      	movs	r1, #4
   1b736:	4620      	mov	r0, r4
   1b738:	f011 fbcb 	bl	2ced2 <send_err_rsp.part.0>
		return 0;
   1b73c:	2000      	movs	r0, #0
}
   1b73e:	b005      	add	sp, #20
   1b740:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1b742:	466b      	mov	r3, sp
   1b744:	4a0a      	ldr	r2, [pc, #40]	; (1b770 <att_find_info_req+0x74>)
	data.chan = chan;
   1b746:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1b748:	4631      	mov	r1, r6
   1b74a:	4628      	mov	r0, r5
   1b74c:	f011 f8eb 	bl	2c926 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1b750:	9b02      	ldr	r3, [sp, #8]
   1b752:	b943      	cbnz	r3, 1b766 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b754:	9b01      	ldr	r3, [sp, #4]
   1b756:	6998      	ldr	r0, [r3, #24]
   1b758:	f7ff f866 	bl	1a828 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b75c:	9801      	ldr	r0, [sp, #4]
   1b75e:	f005 f95f 	bl	20a20 <net_buf_unref>
	if (!req) {
   1b762:	230a      	movs	r3, #10
   1b764:	e7e5      	b.n	1b732 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1b766:	9901      	ldr	r1, [sp, #4]
   1b768:	4620      	mov	r0, r4
   1b76a:	f011 f977 	bl	2ca5c <bt_att_chan_send_rsp>
	return 0;
   1b76e:	e7e5      	b.n	1b73c <att_find_info_req+0x40>
   1b770:	0002c93d 	.word	0x0002c93d

0001b774 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1b774:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1b776:	4c0b      	ldr	r4, [pc, #44]	; (1b7a4 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1b778:	4d0b      	ldr	r5, [pc, #44]	; (1b7a8 <bt_att_init+0x34>)
   1b77a:	4620      	mov	r0, r4
   1b77c:	f013 fc04 	bl	2ef88 <z_impl_k_queue_init>
   1b780:	4629      	mov	r1, r5
   1b782:	4620      	mov	r0, r4
   1b784:	f013 fc0c 	bl	2efa0 <k_queue_append>
   1b788:	f105 0114 	add.w	r1, r5, #20
   1b78c:	4620      	mov	r0, r4
   1b78e:	f013 fc07 	bl	2efa0 <k_queue_append>
   1b792:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1b796:	4620      	mov	r0, r4
   1b798:	f013 fc02 	bl	2efa0 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1b79c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1b7a0:	f001 b8ce 	b.w	1c940 <bt_gatt_init>
   1b7a4:	200009a0 	.word	0x200009a0
   1b7a8:	20003430 	.word	0x20003430

0001b7ac <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1b7ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1b7ae:	2300      	movs	r3, #0
{
   1b7b0:	4605      	mov	r5, r0
   1b7b2:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1b7b4:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1b7b6:	f00a faf3 	bl	25da0 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1b7ba:	4b0b      	ldr	r3, [pc, #44]	; (1b7e8 <bt_att_req_alloc+0x3c>)
   1b7bc:	681b      	ldr	r3, [r3, #0]
   1b7be:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   1b7c0:	bf04      	itt	eq
   1b7c2:	2500      	moveq	r5, #0
   1b7c4:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1b7c6:	a901      	add	r1, sp, #4
   1b7c8:	4808      	ldr	r0, [pc, #32]	; (1b7ec <bt_att_req_alloc+0x40>)
   1b7ca:	462a      	mov	r2, r5
   1b7cc:	4623      	mov	r3, r4
   1b7ce:	f009 fbdd 	bl	24f8c <k_mem_slab_alloc>
   1b7d2:	4601      	mov	r1, r0
   1b7d4:	b930      	cbnz	r0, 1b7e4 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1b7d6:	9801      	ldr	r0, [sp, #4]
   1b7d8:	221c      	movs	r2, #28
   1b7da:	f010 fa6c 	bl	2bcb6 <memset>

	return req;
   1b7de:	9801      	ldr	r0, [sp, #4]
}
   1b7e0:	b003      	add	sp, #12
   1b7e2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1b7e4:	2000      	movs	r0, #0
   1b7e6:	e7fb      	b.n	1b7e0 <bt_att_req_alloc+0x34>
   1b7e8:	2000346c 	.word	0x2000346c
   1b7ec:	200008b4 	.word	0x200008b4

0001b7f0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1b7f0:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   1b7f2:	6883      	ldr	r3, [r0, #8]
{
   1b7f4:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1b7f6:	b14b      	cbz	r3, 1b80c <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1b7f8:	6998      	ldr	r0, [r3, #24]
   1b7fa:	f7ff f815 	bl	1a828 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1b7fe:	9b01      	ldr	r3, [sp, #4]
   1b800:	6898      	ldr	r0, [r3, #8]
   1b802:	f005 f90d 	bl	20a20 <net_buf_unref>
		req->buf = NULL;
   1b806:	9b01      	ldr	r3, [sp, #4]
   1b808:	2200      	movs	r2, #0
   1b80a:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1b80c:	4803      	ldr	r0, [pc, #12]	; (1b81c <bt_att_req_free+0x2c>)
   1b80e:	a901      	add	r1, sp, #4
   1b810:	f013 fafc 	bl	2ee0c <k_mem_slab_free>
}
   1b814:	b003      	add	sp, #12
   1b816:	f85d fb04 	ldr.w	pc, [sp], #4
   1b81a:	bf00      	nop
   1b81c:	200008b4 	.word	0x200008b4

0001b820 <att_handle_rsp>:
{
   1b820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b824:	4604      	mov	r4, r0
   1b826:	b083      	sub	sp, #12
	k_work_cancel_delayable(&chan->timeout_work);
   1b828:	3058      	adds	r0, #88	; 0x58
{
   1b82a:	af02      	add	r7, sp, #8
   1b82c:	460e      	mov	r6, r1
   1b82e:	4690      	mov	r8, r2
   1b830:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1b832:	f013 fca3 	bl	2f17c <k_work_cancel_delayable>
	if (!chan->req) {
   1b836:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1b838:	b9b8      	cbnz	r0, 1b86a <att_handle_rsp+0x4a>
		LOG_WRN("No pending ATT request");
   1b83a:	466d      	mov	r5, sp
   1b83c:	b088      	sub	sp, #32
   1b83e:	aa02      	add	r2, sp, #8
   1b840:	4b1b      	ldr	r3, [pc, #108]	; (1b8b0 <att_handle_rsp+0x90>)
   1b842:	6153      	str	r3, [r2, #20]
   1b844:	4b1b      	ldr	r3, [pc, #108]	; (1b8b4 <att_handle_rsp+0x94>)
   1b846:	6193      	str	r3, [r2, #24]
   1b848:	2303      	movs	r3, #3
   1b84a:	f842 3f10 	str.w	r3, [r2, #16]!
   1b84e:	481a      	ldr	r0, [pc, #104]	; (1b8b8 <att_handle_rsp+0x98>)
   1b850:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1b854:	f011 f8ce 	bl	2c9f4 <z_log_msg_static_create.constprop.0>
   1b858:	46ad      	mov	sp, r5
	att_req_send_process(chan->att);
   1b85a:	6820      	ldr	r0, [r4, #0]
   1b85c:	f011 fa5a 	bl	2cd14 <att_req_send_process>
}
   1b860:	2000      	movs	r0, #0
   1b862:	3704      	adds	r7, #4
   1b864:	46bd      	mov	sp, r7
   1b866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   1b86a:	4b14      	ldr	r3, [pc, #80]	; (1b8bc <att_handle_rsp+0x9c>)
   1b86c:	4298      	cmp	r0, r3
   1b86e:	f04f 0900 	mov.w	r9, #0
   1b872:	d102      	bne.n	1b87a <att_handle_rsp+0x5a>
		chan->req = NULL;
   1b874:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
   1b878:	e7ef      	b.n	1b85a <att_handle_rsp+0x3a>
	func = chan->req->func;
   1b87a:	f8d0 a004 	ldr.w	sl, [r0, #4]
	chan->req->func = NULL;
   1b87e:	f8c0 9004 	str.w	r9, [r0, #4]
	params = chan->req->user_data;
   1b882:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1b884:	f8d0 b018 	ldr.w	fp, [r0, #24]
	bt_att_req_free(chan->req);
   1b888:	f7ff ffb2 	bl	1b7f0 <bt_att_req_free>
	att_req_send_process(chan->att);
   1b88c:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1b88e:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   1b892:	f011 fa3f 	bl	2cd14 <att_req_send_process>
	if (func) {
   1b896:	f1ba 0f00 	cmp.w	sl, #0
   1b89a:	d0e1      	beq.n	1b860 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   1b89c:	6820      	ldr	r0, [r4, #0]
   1b89e:	f8cd b000 	str.w	fp, [sp]
   1b8a2:	6800      	ldr	r0, [r0, #0]
   1b8a4:	4643      	mov	r3, r8
   1b8a6:	4632      	mov	r2, r6
   1b8a8:	4629      	mov	r1, r5
   1b8aa:	47d0      	blx	sl
   1b8ac:	e7d8      	b.n	1b860 <att_handle_rsp+0x40>
   1b8ae:	bf00      	nop
   1b8b0:	00033655 	.word	0x00033655
   1b8b4:	000336ae 	.word	0x000336ae
   1b8b8:	0002fbdc 	.word	0x0002fbdc
   1b8bc:	20003470 	.word	0x20003470

0001b8c0 <att_error_rsp>:
{
   1b8c0:	b570      	push	{r4, r5, r6, lr}
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   1b8c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
	rsp = (void *)buf->data;
   1b8c4:	68ca      	ldr	r2, [r1, #12]
{
   1b8c6:	4605      	mov	r5, r0
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   1b8c8:	b30b      	cbz	r3, 1b90e <att_error_rsp+0x4e>
   1b8ca:	4915      	ldr	r1, [pc, #84]	; (1b920 <att_error_rsp+0x60>)
   1b8cc:	428b      	cmp	r3, r1
   1b8ce:	d01e      	beq.n	1b90e <att_error_rsp+0x4e>
   1b8d0:	78d4      	ldrb	r4, [r2, #3]
   1b8d2:	b1e4      	cbz	r4, 1b90e <att_error_rsp+0x4e>
	switch (err) {
   1b8d4:	2c05      	cmp	r4, #5
	if (!att_change_security(chan->chan.chan.conn, err)) {
   1b8d6:	6840      	ldr	r0, [r0, #4]
	switch (err) {
   1b8d8:	d006      	beq.n	1b8e8 <att_error_rsp+0x28>
   1b8da:	2c0f      	cmp	r4, #15
   1b8dc:	d118      	bne.n	1b910 <att_error_rsp+0x50>
		if (conn->sec_level >= BT_SECURITY_L2)
   1b8de:	7a43      	ldrb	r3, [r0, #9]
   1b8e0:	2b01      	cmp	r3, #1
   1b8e2:	d815      	bhi.n	1b910 <att_error_rsp+0x50>
		sec = BT_SECURITY_L2;
   1b8e4:	2102      	movs	r1, #2
   1b8e6:	e007      	b.n	1b8f8 <att_error_rsp+0x38>
		if (conn->sec_level < BT_SECURITY_L2) {
   1b8e8:	7a43      	ldrb	r3, [r0, #9]
   1b8ea:	2b01      	cmp	r3, #1
   1b8ec:	d9fa      	bls.n	1b8e4 <att_error_rsp+0x24>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   1b8ee:	2b02      	cmp	r3, #2
   1b8f0:	d00b      	beq.n	1b90a <att_error_rsp+0x4a>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   1b8f2:	2b03      	cmp	r3, #3
   1b8f4:	d10c      	bne.n	1b910 <att_error_rsp+0x50>
			sec = BT_SECURITY_L4;
   1b8f6:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   1b8f8:	f010 fdda 	bl	2c4b0 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   1b8fc:	b940      	cbnz	r0, 1b910 <att_error_rsp+0x50>
		chan->req->retrying = true;
   1b8fe:	6baa      	ldr	r2, [r5, #56]	; 0x38
   1b900:	7c13      	ldrb	r3, [r2, #16]
   1b902:	f043 0301 	orr.w	r3, r3, #1
   1b906:	7413      	strb	r3, [r2, #16]
}
   1b908:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   1b90a:	2103      	movs	r1, #3
   1b90c:	e7f4      	b.n	1b8f8 <att_error_rsp+0x38>
		err = BT_ATT_ERR_UNLIKELY;
   1b90e:	240e      	movs	r4, #14
	return att_handle_rsp(chan, NULL, 0, err);
   1b910:	2200      	movs	r2, #0
   1b912:	4623      	mov	r3, r4
   1b914:	4628      	mov	r0, r5
   1b916:	4611      	mov	r1, r2
}
   1b918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   1b91c:	f7ff bf80 	b.w	1b820 <att_handle_rsp>
   1b920:	20003470 	.word	0x20003470

0001b924 <bt_att_disconnected>:
{
   1b924:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1b928:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1b92c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1b92e:	2e00      	cmp	r6, #0
   1b930:	d05a      	beq.n	1b9e8 <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1b932:	f100 0184 	add.w	r1, r0, #132	; 0x84
   1b936:	f106 0024 	add.w	r0, r6, #36	; 0x24
   1b93a:	f011 f928 	bl	2cb8e <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1b93e:	1f27      	subs	r7, r4, #4
   1b940:	f104 0838 	add.w	r8, r4, #56	; 0x38
   1b944:	2200      	movs	r2, #0
   1b946:	2300      	movs	r3, #0
   1b948:	4640      	mov	r0, r8
   1b94a:	f012 fd11 	bl	2e370 <net_buf_get>
   1b94e:	4605      	mov	r5, r0
   1b950:	bb48      	cbnz	r0, 1b9a6 <bt_att_disconnected+0x82>
	if (chan->req) {
   1b952:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1b954:	b12b      	cbz	r3, 1b962 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1b956:	4602      	mov	r2, r0
   1b958:	4601      	mov	r1, r0
   1b95a:	230e      	movs	r3, #14
   1b95c:	4638      	mov	r0, r7
   1b95e:	f7ff ff5f 	bl	1b820 <att_handle_rsp>
	chan->att = NULL;
   1b962:	2300      	movs	r3, #0
   1b964:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   1b968:	2102      	movs	r1, #2
   1b96a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b96e:	f011 f927 	bl	2cbc0 <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   1b972:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1b974:	2b00      	cmp	r3, #0
   1b976:	d137      	bne.n	1b9e8 <bt_att_disconnected+0xc4>
	att_reset(att);
   1b978:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1b97a:	9803      	ldr	r0, [sp, #12]
   1b97c:	2200      	movs	r2, #0
   1b97e:	2300      	movs	r3, #0
   1b980:	300c      	adds	r0, #12
   1b982:	f012 fcf5 	bl	2e370 <net_buf_get>
   1b986:	4605      	mov	r5, r0
   1b988:	b9a0      	cbnz	r0, 1b9b4 <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
   1b98a:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1b98c:	6845      	ldr	r5, [r0, #4]
   1b98e:	b9c5      	cbnz	r5, 1b9c2 <bt_att_disconnected+0x9e>
	att->conn = NULL;
   1b990:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1b992:	a903      	add	r1, sp, #12
   1b994:	4816      	ldr	r0, [pc, #88]	; (1b9f0 <bt_att_disconnected+0xcc>)
   1b996:	f013 fa39 	bl	2ee0c <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1b99a:	6820      	ldr	r0, [r4, #0]
}
   1b99c:	b004      	add	sp, #16
   1b99e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1b9a2:	f002 bbc9 	b.w	1e138 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b9a6:	69a8      	ldr	r0, [r5, #24]
   1b9a8:	f7fe ff3e 	bl	1a828 <tx_meta_data_free>
		net_buf_unref(buf);
   1b9ac:	4628      	mov	r0, r5
   1b9ae:	f005 f837 	bl	20a20 <net_buf_unref>
   1b9b2:	e7c7      	b.n	1b944 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b9b4:	69a8      	ldr	r0, [r5, #24]
   1b9b6:	f7fe ff37 	bl	1a828 <tx_meta_data_free>
		net_buf_unref(buf);
   1b9ba:	4628      	mov	r0, r5
   1b9bc:	f005 f830 	bl	20a20 <net_buf_unref>
   1b9c0:	e7db      	b.n	1b97a <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b9c2:	6882      	ldr	r2, [r0, #8]
	return node->next;
   1b9c4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1b9c6:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b9c8:	4295      	cmp	r5, r2
	list->tail = node;
   1b9ca:	bf08      	it	eq
   1b9cc:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1b9ce:	686e      	ldr	r6, [r5, #4]
   1b9d0:	b136      	cbz	r6, 1b9e0 <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1b9d2:	69ab      	ldr	r3, [r5, #24]
   1b9d4:	9300      	str	r3, [sp, #0]
   1b9d6:	2300      	movs	r3, #0
   1b9d8:	6800      	ldr	r0, [r0, #0]
   1b9da:	461a      	mov	r2, r3
   1b9dc:	210e      	movs	r1, #14
   1b9de:	47b0      	blx	r6
		bt_att_req_free(req);
   1b9e0:	4628      	mov	r0, r5
   1b9e2:	f7ff ff05 	bl	1b7f0 <bt_att_req_free>
   1b9e6:	e7d0      	b.n	1b98a <bt_att_disconnected+0x66>
}
   1b9e8:	b004      	add	sp, #16
   1b9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b9ee:	bf00      	nop
   1b9f0:	2000087c 	.word	0x2000087c

0001b9f4 <att_timeout>:
{
   1b9f4:	b5b0      	push	{r4, r5, r7, lr}
   1b9f6:	af00      	add	r7, sp, #0
	LOG_ERR("ATT Timeout");
   1b9f8:	466d      	mov	r5, sp
   1b9fa:	b088      	sub	sp, #32
{
   1b9fc:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   1b9fe:	466a      	mov	r2, sp
   1ba00:	4b09      	ldr	r3, [pc, #36]	; (1ba28 <att_timeout+0x34>)
   1ba02:	6153      	str	r3, [r2, #20]
   1ba04:	4b09      	ldr	r3, [pc, #36]	; (1ba2c <att_timeout+0x38>)
   1ba06:	6193      	str	r3, [r2, #24]
   1ba08:	2303      	movs	r3, #3
   1ba0a:	f842 3f10 	str.w	r3, [r2, #16]!
   1ba0e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ba12:	4807      	ldr	r0, [pc, #28]	; (1ba30 <att_timeout+0x3c>)
   1ba14:	f010 ffee 	bl	2c9f4 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1ba18:	f1a4 0054 	sub.w	r0, r4, #84	; 0x54
   1ba1c:	46ad      	mov	sp, r5
   1ba1e:	f7ff ff81 	bl	1b924 <bt_att_disconnected>
}
   1ba22:	46bd      	mov	sp, r7
   1ba24:	bdb0      	pop	{r4, r5, r7, pc}
   1ba26:	bf00      	nop
   1ba28:	00033670 	.word	0x00033670
   1ba2c:	00033680 	.word	0x00033680
   1ba30:	0002fbdc 	.word	0x0002fbdc

0001ba34 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   1ba34:	b510      	push	{r4, lr}
   1ba36:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	LOG_DBG("req %p", req);

	if (!conn || !req) {
   1ba38:	b320      	cbz	r0, 1ba84 <bt_att_req_cancel+0x50>
   1ba3a:	b319      	cbz	r1, 1ba84 <bt_att_req_cancel+0x50>
		return;
	}

	att = att_get(conn);
   1ba3c:	f7ff f854 	bl	1aae8 <att_get>
	if (!att) {
   1ba40:	b300      	cbz	r0, 1ba84 <bt_att_req_cancel+0x50>
	return list->head;
   1ba42:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ba44:	b1c3      	cbz	r3, 1ba78 <bt_att_req_cancel+0x44>
	return node->next;
   1ba46:	f853 2988 	ldr.w	r2, [r3], #-136
   1ba4a:	b102      	cbz	r2, 1ba4e <bt_att_req_cancel+0x1a>
   1ba4c:	3a88      	subs	r2, #136	; 0x88
	if (chan->req != req) {
   1ba4e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   1ba50:	428c      	cmp	r4, r1
   1ba52:	d00a      	beq.n	1ba6a <bt_att_req_cancel+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ba54:	b182      	cbz	r2, 1ba78 <bt_att_req_cancel+0x44>
   1ba56:	4613      	mov	r3, r2
   1ba58:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
   1ba5c:	2a00      	cmp	r2, #0
   1ba5e:	d0f6      	beq.n	1ba4e <bt_att_req_cancel+0x1a>
	if (chan->req != req) {
   1ba60:	6b99      	ldr	r1, [r3, #56]	; 0x38
   1ba62:	428c      	cmp	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ba64:	f1a2 0288 	sub.w	r2, r2, #136	; 0x88
	if (chan->req != req) {
   1ba68:	d1f5      	bne.n	1ba56 <bt_att_req_cancel+0x22>
	chan->req = &cancel;
   1ba6a:	4a07      	ldr	r2, [pc, #28]	; (1ba88 <bt_att_req_cancel+0x54>)
   1ba6c:	639a      	str	r2, [r3, #56]	; 0x38
	bt_att_req_free(req);
   1ba6e:	4620      	mov	r0, r4

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);

	bt_att_req_free(req);
}
   1ba70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1ba74:	f7ff bebc 	b.w	1b7f0 <bt_att_req_free>
	sys_slist_find_and_remove(&att->reqs, &req->node);
   1ba78:	3004      	adds	r0, #4
   1ba7a:	4621      	mov	r1, r4
   1ba7c:	f011 f887 	bl	2cb8e <sys_slist_find_and_remove.isra.0>
	bt_att_req_free(req);
   1ba80:	4620      	mov	r0, r4
   1ba82:	e7f5      	b.n	1ba70 <bt_att_req_cancel+0x3c>
}
   1ba84:	bd10      	pop	{r4, pc}
   1ba86:	bf00      	nop
   1ba88:	20003470 	.word	0x20003470

0001ba8c <find_cf_cfg_by_addr>:
#endif
}

static struct gatt_cf_cfg *find_cf_cfg_by_addr(uint8_t id,
					       const bt_addr_le_t *addr)
{
   1ba8c:	b570      	push	{r4, r5, r6, lr}
	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		int i;

		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
			if (id == cf_cfg[i].id &&
   1ba8e:	4c0e      	ldr	r4, [pc, #56]	; (1bac8 <find_cf_cfg_by_addr+0x3c>)
   1ba90:	7823      	ldrb	r3, [r4, #0]
   1ba92:	4283      	cmp	r3, r0
{
   1ba94:	4606      	mov	r6, r0
   1ba96:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   1ba98:	d00b      	beq.n	1bab2 <find_cf_cfg_by_addr+0x26>
   1ba9a:	7c23      	ldrb	r3, [r4, #16]
   1ba9c:	42b3      	cmp	r3, r6
   1ba9e:	d110      	bne.n	1bac2 <find_cf_cfg_by_addr+0x36>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   1baa0:	490a      	ldr	r1, [pc, #40]	; (1bacc <find_cf_cfg_by_addr+0x40>)
   1baa2:	4628      	mov	r0, r5
   1baa4:	f011 fc30 	bl	2d308 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   1baa8:	b158      	cbz	r0, 1bac2 <find_cf_cfg_by_addr+0x36>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1baaa:	2301      	movs	r3, #1
				return &cf_cfg[i];
   1baac:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   1bab0:	e008      	b.n	1bac4 <find_cf_cfg_by_addr+0x38>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   1bab2:	1c61      	adds	r1, r4, #1
   1bab4:	4628      	mov	r0, r5
   1bab6:	f011 fc27 	bl	2d308 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   1baba:	2800      	cmp	r0, #0
   1babc:	d0ed      	beq.n	1ba9a <find_cf_cfg_by_addr+0xe>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1babe:	2300      	movs	r3, #0
   1bac0:	e7f4      	b.n	1baac <find_cf_cfg_by_addr+0x20>
			}
		}
	}

	return NULL;
   1bac2:	2000      	movs	r0, #0
}
   1bac4:	bd70      	pop	{r4, r5, r6, pc}
   1bac6:	bf00      	nop
   1bac8:	200034a4 	.word	0x200034a4
   1bacc:	200034b5 	.word	0x200034b5

0001bad0 <gatt_delayed_store_find>:
{
   1bad0:	b570      	push	{r4, r5, r6, lr}
		if (el->id == id &&
   1bad2:	4c0d      	ldr	r4, [pc, #52]	; (1bb08 <gatt_delayed_store_find+0x38>)
   1bad4:	7823      	ldrb	r3, [r4, #0]
   1bad6:	4283      	cmp	r3, r0
{
   1bad8:	4606      	mov	r6, r0
   1bada:	460d      	mov	r5, r1
		if (el->id == id &&
   1badc:	d009      	beq.n	1baf2 <gatt_delayed_store_find+0x22>
   1bade:	7b23      	ldrb	r3, [r4, #12]
   1bae0:	42b3      	cmp	r3, r6
   1bae2:	d104      	bne.n	1baee <gatt_delayed_store_find+0x1e>
		    bt_addr_le_eq(peer_addr, &el->peer)) {
   1bae4:	4909      	ldr	r1, [pc, #36]	; (1bb0c <gatt_delayed_store_find+0x3c>)
   1bae6:	4628      	mov	r0, r5
   1bae8:	f011 fc0e 	bl	2d308 <bt_addr_le_eq>
		if (el->id == id &&
   1baec:	b948      	cbnz	r0, 1bb02 <gatt_delayed_store_find+0x32>
	return NULL;
   1baee:	2000      	movs	r0, #0
}
   1baf0:	bd70      	pop	{r4, r5, r6, pc}
		    bt_addr_le_eq(peer_addr, &el->peer)) {
   1baf2:	1c61      	adds	r1, r4, #1
   1baf4:	4628      	mov	r0, r5
   1baf6:	f011 fc07 	bl	2d308 <bt_addr_le_eq>
		if (el->id == id &&
   1bafa:	2800      	cmp	r0, #0
   1bafc:	d0ef      	beq.n	1bade <gatt_delayed_store_find+0xe>
		el = &gatt_delayed_store.peer_list[i];
   1bafe:	4620      	mov	r0, r4
   1bb00:	e7f6      	b.n	1baf0 <gatt_delayed_store_find+0x20>
   1bb02:	4803      	ldr	r0, [pc, #12]	; (1bb10 <gatt_delayed_store_find+0x40>)
   1bb04:	e7f4      	b.n	1baf0 <gatt_delayed_store_find+0x20>
   1bb06:	bf00      	nop
   1bb08:	20002160 	.word	0x20002160
   1bb0c:	2000216d 	.word	0x2000216d
   1bb10:	2000216c 	.word	0x2000216c

0001bb14 <find_sc_cfg>:
{
   1bb14:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1bb16:	4c0e      	ldr	r4, [pc, #56]	; (1bb50 <find_sc_cfg+0x3c>)
   1bb18:	7823      	ldrb	r3, [r4, #0]
   1bb1a:	4283      	cmp	r3, r0
{
   1bb1c:	4605      	mov	r5, r0
   1bb1e:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1bb20:	d00c      	beq.n	1bb3c <find_sc_cfg+0x28>
   1bb22:	7b23      	ldrb	r3, [r4, #12]
   1bb24:	42ab      	cmp	r3, r5
   1bb26:	d110      	bne.n	1bb4a <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1bb28:	480a      	ldr	r0, [pc, #40]	; (1bb54 <find_sc_cfg+0x40>)
   1bb2a:	4631      	mov	r1, r6
   1bb2c:	f011 fbec 	bl	2d308 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1bb30:	b158      	cbz	r0, 1bb4a <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1bb32:	2301      	movs	r3, #1
			return &sc_cfg[i];
   1bb34:	220c      	movs	r2, #12
   1bb36:	fb02 4003 	mla	r0, r2, r3, r4
   1bb3a:	e007      	b.n	1bb4c <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1bb3c:	1c60      	adds	r0, r4, #1
   1bb3e:	f011 fbe3 	bl	2d308 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1bb42:	2800      	cmp	r0, #0
   1bb44:	d0ed      	beq.n	1bb22 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1bb46:	2300      	movs	r3, #0
   1bb48:	e7f4      	b.n	1bb34 <find_sc_cfg+0x20>
	return NULL;
   1bb4a:	2000      	movs	r0, #0
}
   1bb4c:	bd70      	pop	{r4, r5, r6, pc}
   1bb4e:	bf00      	nop
   1bb50:	20004310 	.word	0x20004310
   1bb54:	2000431d 	.word	0x2000431d

0001bb58 <gatt_sub_remove>:
{
   1bb58:	b538      	push	{r3, r4, r5, lr}
   1bb5a:	460c      	mov	r4, r1
	if (params) {
   1bb5c:	4619      	mov	r1, r3
   1bb5e:	b16b      	cbz	r3, 1bb7c <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1bb60:	f103 0518 	add.w	r5, r3, #24
   1bb64:	699b      	ldr	r3, [r3, #24]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1bb66:	b98a      	cbnz	r2, 1bb8c <gatt_sub_remove+0x34>
   1bb68:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   1bb6a:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1bb6c:	4295      	cmp	r5, r2
   1bb6e:	d100      	bne.n	1bb72 <gatt_sub_remove+0x1a>
	list->tail = node;
   1bb70:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1bb72:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1bb74:	680d      	ldr	r5, [r1, #0]
   1bb76:	618b      	str	r3, [r1, #24]
   1bb78:	461a      	mov	r2, r3
   1bb7a:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   1bb7c:	68a3      	ldr	r3, [r4, #8]
   1bb7e:	b95b      	cbnz	r3, 1bb98 <gatt_sub_remove+0x40>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1bb80:	1c60      	adds	r0, r4, #1
   1bb82:	4906      	ldr	r1, [pc, #24]	; (1bb9c <gatt_sub_remove+0x44>)
}
   1bb84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1bb88:	f011 bbf1 	b.w	2d36e <bt_addr_le_copy>
   1bb8c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1bb8e:	68e3      	ldr	r3, [r4, #12]
   1bb90:	429d      	cmp	r5, r3
	list->tail = node;
   1bb92:	bf08      	it	eq
   1bb94:	60e2      	streq	r2, [r4, #12]
}
   1bb96:	e7ec      	b.n	1bb72 <gatt_sub_remove+0x1a>
}
   1bb98:	bd38      	pop	{r3, r4, r5, pc}
   1bb9a:	bf00      	nop
   1bb9c:	00031d70 	.word	0x00031d70

0001bba0 <ccc_load>:
{
   1bba0:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bba2:	4b20      	ldr	r3, [pc, #128]	; (1bc24 <ccc_load+0x84>)
{
   1bba4:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bba6:	6882      	ldr	r2, [r0, #8]
   1bba8:	429a      	cmp	r2, r3
   1bbaa:	d10f      	bne.n	1bbcc <ccc_load+0x2c>
	if (!load->entry) {
   1bbac:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   1bbae:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   1bbb0:	b975      	cbnz	r5, 1bbd0 <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   1bbb2:	7922      	ldrb	r2, [r4, #4]
   1bbb4:	6821      	ldr	r1, [r4, #0]
   1bbb6:	4630      	mov	r0, r6
   1bbb8:	f011 fbae 	bl	2d318 <ccc_find_cfg>
	if (!cfg) {
   1bbbc:	4604      	mov	r4, r0
   1bbbe:	b128      	cbz	r0, 1bbcc <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bbc0:	4919      	ldr	r1, [pc, #100]	; (1bc28 <ccc_load+0x88>)
   1bbc2:	3001      	adds	r0, #1
   1bbc4:	f011 fbd3 	bl	2d36e <bt_addr_le_copy>
	cfg->id = 0U;
   1bbc8:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1bbca:	8125      	strh	r5, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
   1bbcc:	2001      	movs	r0, #1
}
   1bbce:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   1bbd0:	68e0      	ldr	r0, [r4, #12]
   1bbd2:	2800      	cmp	r0, #0
   1bbd4:	d0fb      	beq.n	1bbce <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   1bbd6:	882b      	ldrh	r3, [r5, #0]
   1bbd8:	428b      	cmp	r3, r1
   1bbda:	d00a      	beq.n	1bbf2 <ccc_load+0x52>
		if (load->entry->handle < handle) {
   1bbdc:	d2f6      	bcs.n	1bbcc <ccc_load+0x2c>
	load->count--;
   1bbde:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   1bbe0:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1bbe2:	3801      	subs	r0, #1
	load->entry++;
   1bbe4:	3304      	adds	r3, #4
	load->count--;
   1bbe6:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1bbe8:	3800      	subs	r0, #0
	load->entry++;
   1bbea:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1bbec:	bf18      	it	ne
   1bbee:	2001      	movne	r0, #1
   1bbf0:	e7ed      	b.n	1bbce <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1bbf2:	7922      	ldrb	r2, [r4, #4]
   1bbf4:	6821      	ldr	r1, [r4, #0]
   1bbf6:	4630      	mov	r0, r6
   1bbf8:	f011 fb8e 	bl	2d318 <ccc_find_cfg>
	if (!cfg) {
   1bbfc:	4605      	mov	r5, r0
   1bbfe:	b968      	cbnz	r0, 1bc1c <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1bc00:	4602      	mov	r2, r0
   1bc02:	4909      	ldr	r1, [pc, #36]	; (1bc28 <ccc_load+0x88>)
   1bc04:	4630      	mov	r0, r6
   1bc06:	f011 fb87 	bl	2d318 <ccc_find_cfg>
		if (!cfg) {
   1bc0a:	4605      	mov	r5, r0
   1bc0c:	2800      	cmp	r0, #0
   1bc0e:	d0e6      	beq.n	1bbde <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1bc10:	6821      	ldr	r1, [r4, #0]
   1bc12:	3001      	adds	r0, #1
   1bc14:	f011 fbab 	bl	2d36e <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1bc18:	7923      	ldrb	r3, [r4, #4]
   1bc1a:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   1bc1c:	68a3      	ldr	r3, [r4, #8]
   1bc1e:	885b      	ldrh	r3, [r3, #2]
   1bc20:	812b      	strh	r3, [r5, #8]
   1bc22:	e7dc      	b.n	1bbde <ccc_load+0x3e>
   1bc24:	0001c3f9 	.word	0x0001c3f9
   1bc28:	00031d70 	.word	0x00031d70

0001bc2c <find_cf_cfg>:
{
   1bc2c:	b570      	push	{r4, r5, r6, lr}
   1bc2e:	4d14      	ldr	r5, [pc, #80]	; (1bc80 <find_cf_cfg+0x54>)
		if (!conn) {
   1bc30:	4606      	mov	r6, r0
   1bc32:	b140      	cbz	r0, 1bc46 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1bc34:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1bc38:	462a      	mov	r2, r5
   1bc3a:	1e6c      	subs	r4, r5, #1
   1bc3c:	f010 fc8f 	bl	2c55e <bt_conn_is_peer_addr_le>
   1bc40:	b198      	cbz	r0, 1bc6a <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1bc42:	4620      	mov	r0, r4
   1bc44:	e00c      	b.n	1bc60 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bc46:	490f      	ldr	r1, [pc, #60]	; (1bc84 <find_cf_cfg+0x58>)
   1bc48:	4628      	mov	r0, r5
   1bc4a:	f011 fb5d 	bl	2d308 <bt_addr_le_eq>
   1bc4e:	b940      	cbnz	r0, 1bc62 <find_cf_cfg+0x36>
   1bc50:	490c      	ldr	r1, [pc, #48]	; (1bc84 <find_cf_cfg+0x58>)
   1bc52:	f105 0010 	add.w	r0, r5, #16
   1bc56:	f011 fb57 	bl	2d308 <bt_addr_le_eq>
   1bc5a:	b120      	cbz	r0, 1bc66 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1bc5c:	f105 000f 	add.w	r0, r5, #15
}
   1bc60:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1bc62:	1e68      	subs	r0, r5, #1
   1bc64:	e7fc      	b.n	1bc60 <find_cf_cfg+0x34>
	return NULL;
   1bc66:	2000      	movs	r0, #0
   1bc68:	e7fa      	b.n	1bc60 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1bc6a:	7c21      	ldrb	r1, [r4, #16]
   1bc6c:	f104 0211 	add.w	r2, r4, #17
   1bc70:	4630      	mov	r0, r6
   1bc72:	f010 fc74 	bl	2c55e <bt_conn_is_peer_addr_le>
   1bc76:	2800      	cmp	r0, #0
   1bc78:	d0f5      	beq.n	1bc66 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1bc7a:	f104 0010 	add.w	r0, r4, #16
   1bc7e:	e7ef      	b.n	1bc60 <find_cf_cfg+0x34>
   1bc80:	200034a5 	.word	0x200034a5
   1bc84:	00031d70 	.word	0x00031d70

0001bc88 <find_ccc_cfg>:
{
   1bc88:	b510      	push	{r4, lr}
						    &cfg->peer)) {
   1bc8a:	1c4a      	adds	r2, r1, #1
{
   1bc8c:	460c      	mov	r4, r1
		if (conn) {
   1bc8e:	b138      	cbz	r0, 1bca0 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1bc90:	7809      	ldrb	r1, [r1, #0]
   1bc92:	f010 fc64 	bl	2c55e <bt_conn_is_peer_addr_le>
   1bc96:	b108      	cbz	r0, 1bc9c <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1bc98:	4620      	mov	r0, r4
}
   1bc9a:	bd10      	pop	{r4, pc}
	return NULL;
   1bc9c:	2000      	movs	r0, #0
   1bc9e:	e7fc      	b.n	1bc9a <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bca0:	4902      	ldr	r1, [pc, #8]	; (1bcac <find_ccc_cfg+0x24>)
   1bca2:	4610      	mov	r0, r2
   1bca4:	f011 fb30 	bl	2d308 <bt_addr_le_eq>
   1bca8:	e7f5      	b.n	1bc96 <find_ccc_cfg+0xe>
   1bcaa:	bf00      	nop
   1bcac:	00031d70 	.word	0x00031d70

0001bcb0 <gatt_sub_find>:
{
   1bcb0:	b570      	push	{r4, r5, r6, lr}
   1bcb2:	4d14      	ldr	r5, [pc, #80]	; (1bd04 <gatt_sub_find+0x54>)
		if (!conn) {
   1bcb4:	4606      	mov	r6, r0
   1bcb6:	b140      	cbz	r0, 1bcca <gatt_sub_find+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1bcb8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1bcbc:	462a      	mov	r2, r5
   1bcbe:	1e6c      	subs	r4, r5, #1
   1bcc0:	f010 fc4d 	bl	2c55e <bt_conn_is_peer_addr_le>
   1bcc4:	b198      	cbz	r0, 1bcee <gatt_sub_find+0x3e>
		struct gatt_sub *sub = &subscriptions[i];
   1bcc6:	4620      	mov	r0, r4
   1bcc8:	e00c      	b.n	1bce4 <gatt_sub_find+0x34>
			if (bt_addr_le_eq(&sub->peer, BT_ADDR_LE_ANY)) {
   1bcca:	490f      	ldr	r1, [pc, #60]	; (1bd08 <gatt_sub_find+0x58>)
   1bccc:	4628      	mov	r0, r5
   1bcce:	f011 fb1b 	bl	2d308 <bt_addr_le_eq>
   1bcd2:	b940      	cbnz	r0, 1bce6 <gatt_sub_find+0x36>
   1bcd4:	490c      	ldr	r1, [pc, #48]	; (1bd08 <gatt_sub_find+0x58>)
   1bcd6:	f105 0010 	add.w	r0, r5, #16
   1bcda:	f011 fb15 	bl	2d308 <bt_addr_le_eq>
   1bcde:	b120      	cbz	r0, 1bcea <gatt_sub_find+0x3a>
		struct gatt_sub *sub = &subscriptions[i];
   1bce0:	f105 000f 	add.w	r0, r5, #15
}
   1bce4:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_sub *sub = &subscriptions[i];
   1bce6:	1e68      	subs	r0, r5, #1
   1bce8:	e7fc      	b.n	1bce4 <gatt_sub_find+0x34>
	return NULL;
   1bcea:	2000      	movs	r0, #0
   1bcec:	e7fa      	b.n	1bce4 <gatt_sub_find+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1bcee:	7c21      	ldrb	r1, [r4, #16]
   1bcf0:	f104 0211 	add.w	r2, r4, #17
   1bcf4:	4630      	mov	r0, r6
   1bcf6:	f010 fc32 	bl	2c55e <bt_conn_is_peer_addr_le>
   1bcfa:	2800      	cmp	r0, #0
   1bcfc:	d0f5      	beq.n	1bcea <gatt_sub_find+0x3a>
		struct gatt_sub *sub = &subscriptions[i];
   1bcfe:	f104 0010 	add.w	r0, r4, #16
   1bd02:	e7ef      	b.n	1bce4 <gatt_sub_find+0x34>
   1bd04:	200034d1 	.word	0x200034d1
   1bd08:	00031d70 	.word	0x00031d70

0001bd0c <gatt_delayed_store_enqueue>:
{
   1bd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bd10:	4606      	mov	r6, r0
   1bd12:	460f      	mov	r7, r1
   1bd14:	4690      	mov	r8, r2
	bool bonded = bt_addr_le_is_bonded(id, peer_addr);
   1bd16:	f010 f9e7 	bl	2c0e8 <bt_addr_le_is_bonded>
	struct ds_peer *el = gatt_delayed_store_find(id, peer_addr);
   1bd1a:	4639      	mov	r1, r7
	bool bonded = bt_addr_le_is_bonded(id, peer_addr);
   1bd1c:	4604      	mov	r4, r0
	struct ds_peer *el = gatt_delayed_store_find(id, peer_addr);
   1bd1e:	4630      	mov	r0, r6
   1bd20:	f7ff fed6 	bl	1bad0 <gatt_delayed_store_find>
   1bd24:	4605      	mov	r5, r0
	if (bonded) {
   1bd26:	b33c      	cbz	r4, 1bd78 <gatt_delayed_store_enqueue+0x6c>
		if (el == NULL) {
   1bd28:	b9a8      	cbnz	r0, 1bd56 <gatt_delayed_store_enqueue+0x4a>
		if (atomic_get(el->flags) == 0) {
   1bd2a:	4814      	ldr	r0, [pc, #80]	; (1bd7c <gatt_delayed_store_enqueue+0x70>)
   1bd2c:	f011 fb22 	bl	2d374 <atomic_get>
   1bd30:	4604      	mov	r4, r0
   1bd32:	b1f8      	cbz	r0, 1bd74 <gatt_delayed_store_enqueue+0x68>
   1bd34:	4812      	ldr	r0, [pc, #72]	; (1bd80 <gatt_delayed_store_enqueue+0x74>)
   1bd36:	f011 fb1d 	bl	2d374 <atomic_get>
   1bd3a:	b960      	cbnz	r0, 1bd56 <gatt_delayed_store_enqueue+0x4a>
		el = &gatt_delayed_store.peer_list[i];
   1bd3c:	4d11      	ldr	r5, [pc, #68]	; (1bd84 <gatt_delayed_store_enqueue+0x78>)
	for (size_t i = 0; i < ARRAY_SIZE(gatt_delayed_store.peer_list); i++) {
   1bd3e:	2401      	movs	r4, #1
			bt_addr_le_copy(&el->peer, peer_addr);
   1bd40:	230c      	movs	r3, #12
   1bd42:	435c      	muls	r4, r3
   1bd44:	f8df 9040 	ldr.w	r9, [pc, #64]	; 1bd88 <gatt_delayed_store_enqueue+0x7c>
   1bd48:	1c60      	adds	r0, r4, #1
   1bd4a:	4639      	mov	r1, r7
   1bd4c:	4448      	add	r0, r9
   1bd4e:	f011 fb0e 	bl	2d36e <bt_addr_le_copy>
			el->id = id;
   1bd52:	f809 6004 	strb.w	r6, [r9, r4]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bd56:	2101      	movs	r1, #1
   1bd58:	fa01 f108 	lsl.w	r1, r1, r8
   1bd5c:	f105 0008 	add.w	r0, r5, #8
   1bd60:	f011 fae7 	bl	2d332 <atomic_or>
}
   1bd64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		k_work_reschedule(&gatt_delayed_store.work,
   1bd68:	4808      	ldr	r0, [pc, #32]	; (1bd8c <gatt_delayed_store_enqueue+0x80>)
   1bd6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1bd6e:	2300      	movs	r3, #0
   1bd70:	f009 bd34 	b.w	257dc <k_work_reschedule>
		el = &gatt_delayed_store.peer_list[i];
   1bd74:	4d04      	ldr	r5, [pc, #16]	; (1bd88 <gatt_delayed_store_enqueue+0x7c>)
   1bd76:	e7e3      	b.n	1bd40 <gatt_delayed_store_enqueue+0x34>
}
   1bd78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bd7c:	20002168 	.word	0x20002168
   1bd80:	20002174 	.word	0x20002174
   1bd84:	2000216c 	.word	0x2000216c
   1bd88:	20002160 	.word	0x20002160
   1bd8c:	20002178 	.word	0x20002178

0001bd90 <ccc_set_direct.part.0>:
static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   1bd90:	b580      	push	{r7, lr}
   1bd92:	af00      	add	r7, sp, #0
			LOG_ERR("Invalid key");
   1bd94:	b088      	sub	sp, #32
   1bd96:	466a      	mov	r2, sp
   1bd98:	4b07      	ldr	r3, [pc, #28]	; (1bdb8 <ccc_set_direct.part.0+0x28>)
   1bd9a:	6153      	str	r3, [r2, #20]
   1bd9c:	4b07      	ldr	r3, [pc, #28]	; (1bdbc <ccc_set_direct.part.0+0x2c>)
   1bd9e:	6193      	str	r3, [r2, #24]
   1bda0:	2303      	movs	r3, #3
   1bda2:	f842 3f10 	str.w	r3, [r2, #16]!
   1bda6:	4806      	ldr	r0, [pc, #24]	; (1bdc0 <ccc_set_direct.part.0+0x30>)
   1bda8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bdac:	f011 fb34 	bl	2d418 <z_log_msg_static_create.constprop.0>
}
   1bdb0:	f06f 0015 	mvn.w	r0, #21
   1bdb4:	46bd      	mov	sp, r7
   1bdb6:	bd80      	pop	{r7, pc}
   1bdb8:	00033726 	.word	0x00033726
   1bdbc:	00033c98 	.word	0x00033c98
   1bdc0:	0002fc04 	.word	0x0002fc04

0001bdc4 <sc_set>:
}

#if defined(CONFIG_BT_GATT_SERVICE_CHANGED)
static int sc_set(const char *name, size_t len_rd, settings_read_cb read_cb,
		  void *cb_arg)
{
   1bdc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bdc8:	b085      	sub	sp, #20
   1bdca:	460e      	mov	r6, r1
   1bdcc:	af00      	add	r7, sp, #0
   1bdce:	4690      	mov	r8, r2
   1bdd0:	4699      	mov	r9, r3
	bt_addr_le_t addr;
	ssize_t len;
	int err;
	const char *next;

	if (!name) {
   1bdd2:	4604      	mov	r4, r0
   1bdd4:	b980      	cbnz	r0, 1bdf8 <sc_set+0x34>
		LOG_ERR("Insufficient number of arguments");
   1bdd6:	466c      	mov	r4, sp
   1bdd8:	b088      	sub	sp, #32
   1bdda:	466a      	mov	r2, sp
   1bddc:	4b48      	ldr	r3, [pc, #288]	; (1bf00 <sc_set+0x13c>)
   1bdde:	6153      	str	r3, [r2, #20]
   1bde0:	4b48      	ldr	r3, [pc, #288]	; (1bf04 <sc_set+0x140>)
   1bde2:	6193      	str	r3, [r2, #24]
   1bde4:	2303      	movs	r3, #3
   1bde6:	f842 3f10 	str.w	r3, [r2, #16]!
   1bdea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		id = BT_ID_DEFAULT;
	} else {
		unsigned long next_id = strtoul(next, NULL, 10);

		if (next_id >= CONFIG_BT_ID_MAX) {
			LOG_ERR("Invalid local identity %lu", next_id);
   1bdee:	4846      	ldr	r0, [pc, #280]	; (1bf08 <sc_set+0x144>)
   1bdf0:	f011 fb12 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1bdf4:	46a5      	mov	sp, r4
			return -EINVAL;
   1bdf6:	e019      	b.n	1be2c <sc_set+0x68>
	err = bt_settings_decode_key(name, &addr);
   1bdf8:	f107 0108 	add.w	r1, r7, #8
   1bdfc:	f00f ffeb 	bl	2bdd6 <bt_settings_decode_key>
	if (err) {
   1be00:	4605      	mov	r5, r0
   1be02:	b1d0      	cbz	r0, 1be3a <sc_set+0x76>
		LOG_ERR("Unable to decode address %s", name);
   1be04:	466d      	mov	r5, sp
   1be06:	b08a      	sub	sp, #40	; 0x28
   1be08:	466a      	mov	r2, sp
   1be0a:	4b40      	ldr	r3, [pc, #256]	; (1bf0c <sc_set+0x148>)
   1be0c:	6153      	str	r3, [r2, #20]
   1be0e:	4b3d      	ldr	r3, [pc, #244]	; (1bf04 <sc_set+0x140>)
   1be10:	483d      	ldr	r0, [pc, #244]	; (1bf08 <sc_set+0x144>)
   1be12:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1be16:	f240 3301 	movw	r3, #769	; 0x301
   1be1a:	8413      	strh	r3, [r2, #32]
   1be1c:	4b3c      	ldr	r3, [pc, #240]	; (1bf10 <sc_set+0x14c>)
   1be1e:	f842 3f10 	str.w	r3, [r2, #16]!
   1be22:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1be26:	f011 faf7 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1be2a:	46ad      	mov	sp, r5
		return -EINVAL;
   1be2c:	f06f 0515 	mvn.w	r5, #21

		LOG_DBG("Removed SC for %s", bt_addr_le_str(&addr));
	}

	return 0;
}
   1be30:	4628      	mov	r0, r5
   1be32:	3714      	adds	r7, #20
   1be34:	46bd      	mov	sp, r7
   1be36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	settings_name_next(name, &next);
   1be3a:	1d39      	adds	r1, r7, #4
   1be3c:	4620      	mov	r0, r4
   1be3e:	f00e fc47 	bl	2a6d0 <settings_name_next>
	if (!next) {
   1be42:	6878      	ldr	r0, [r7, #4]
   1be44:	b190      	cbz	r0, 1be6c <sc_set+0xa8>
		unsigned long next_id = strtoul(next, NULL, 10);
   1be46:	220a      	movs	r2, #10
   1be48:	4629      	mov	r1, r5
   1be4a:	f00f fe31 	bl	2bab0 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1be4e:	b168      	cbz	r0, 1be6c <sc_set+0xa8>
			LOG_ERR("Invalid local identity %lu", next_id);
   1be50:	466c      	mov	r4, sp
   1be52:	b088      	sub	sp, #32
   1be54:	466a      	mov	r2, sp
   1be56:	4b2f      	ldr	r3, [pc, #188]	; (1bf14 <sc_set+0x150>)
   1be58:	6153      	str	r3, [r2, #20]
   1be5a:	4b2a      	ldr	r3, [pc, #168]	; (1bf04 <sc_set+0x140>)
   1be5c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1be60:	2304      	movs	r3, #4
   1be62:	f842 3f10 	str.w	r3, [r2, #16]!
   1be66:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1be6a:	e7c0      	b.n	1bdee <sc_set+0x2a>
	cfg = find_sc_cfg(id, &addr);
   1be6c:	f107 0108 	add.w	r1, r7, #8
   1be70:	2000      	movs	r0, #0
   1be72:	f7ff fe4f 	bl	1bb14 <find_sc_cfg>
	if (!cfg && len_rd) {
   1be76:	4604      	mov	r4, r0
   1be78:	2800      	cmp	r0, #0
   1be7a:	d13a      	bne.n	1bef2 <sc_set+0x12e>
   1be7c:	2e00      	cmp	r6, #0
   1be7e:	d0d7      	beq.n	1be30 <sc_set+0x6c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1be80:	4925      	ldr	r1, [pc, #148]	; (1bf18 <sc_set+0x154>)
   1be82:	f7ff fe47 	bl	1bb14 <find_sc_cfg>
		if (!cfg) {
   1be86:	4604      	mov	r4, r0
   1be88:	b990      	cbnz	r0, 1beb0 <sc_set+0xec>
			LOG_ERR("Unable to restore SC: no cfg left");
   1be8a:	466c      	mov	r4, sp
   1be8c:	b088      	sub	sp, #32
   1be8e:	466a      	mov	r2, sp
   1be90:	4b22      	ldr	r3, [pc, #136]	; (1bf1c <sc_set+0x158>)
   1be92:	6153      	str	r3, [r2, #20]
   1be94:	4b1b      	ldr	r3, [pc, #108]	; (1bf04 <sc_set+0x140>)
   1be96:	6193      	str	r3, [r2, #24]
   1be98:	2303      	movs	r3, #3
   1be9a:	f842 3f10 	str.w	r3, [r2, #16]!
   1be9e:	481a      	ldr	r0, [pc, #104]	; (1bf08 <sc_set+0x144>)
   1bea0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bea4:	f011 fab8 	bl	2d418 <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1bea8:	f06f 050b 	mvn.w	r5, #11
   1beac:	46a5      	mov	sp, r4
   1beae:	e7bf      	b.n	1be30 <sc_set+0x6c>
		cfg->id = id;
   1beb0:	2300      	movs	r3, #0
   1beb2:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1beb6:	f107 0108 	add.w	r1, r7, #8
   1beba:	f011 fa58 	bl	2d36e <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1bebe:	f104 0108 	add.w	r1, r4, #8
   1bec2:	2204      	movs	r2, #4
   1bec4:	4648      	mov	r0, r9
   1bec6:	47c0      	blx	r8
		if (len < 0) {
   1bec8:	1e04      	subs	r4, r0, #0
   1beca:	dab1      	bge.n	1be30 <sc_set+0x6c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1becc:	466d      	mov	r5, sp
   1bece:	b088      	sub	sp, #32
   1bed0:	466a      	mov	r2, sp
   1bed2:	4b13      	ldr	r3, [pc, #76]	; (1bf20 <sc_set+0x15c>)
   1bed4:	6153      	str	r3, [r2, #20]
   1bed6:	4b0b      	ldr	r3, [pc, #44]	; (1bf04 <sc_set+0x140>)
   1bed8:	480b      	ldr	r0, [pc, #44]	; (1bf08 <sc_set+0x144>)
   1beda:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1bede:	2304      	movs	r3, #4
   1bee0:	f842 3f10 	str.w	r3, [r2, #16]!
   1bee4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1bee8:	f011 fa96 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1beec:	46ad      	mov	sp, r5
			return len;
   1beee:	4625      	mov	r5, r4
   1bef0:	e79e      	b.n	1be30 <sc_set+0x6c>
	if (len_rd) {
   1bef2:	2e00      	cmp	r6, #0
   1bef4:	d1e3      	bne.n	1bebe <sc_set+0xfa>
		memset(cfg, 0, sizeof(*cfg));
   1bef6:	220c      	movs	r2, #12
   1bef8:	4631      	mov	r1, r6
   1befa:	f00f fedc 	bl	2bcb6 <memset>
		LOG_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1befe:	e797      	b.n	1be30 <sc_set+0x6c>
   1bf00:	00031e73 	.word	0x00031e73
   1bf04:	00033c77 	.word	0x00033c77
   1bf08:	0002fc04 	.word	0x0002fc04
   1bf0c:	00033736 	.word	0x00033736
   1bf10:	01000004 	.word	0x01000004
   1bf14:	00033756 	.word	0x00033756
   1bf18:	00031d70 	.word	0x00031d70
   1bf1c:	00033775 	.word	0x00033775
   1bf20:	0003379b 	.word	0x0003379b

0001bf24 <gatt_write_ccc_rsp>:
{
   1bf24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bf28:	af00      	add	r7, sp, #0
   1bf2a:	4688      	mov	r8, r1
   1bf2c:	6a3c      	ldr	r4, [r7, #32]
   1bf2e:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bf30:	f06f 0104 	mvn.w	r1, #4
   1bf34:	f104 0014 	add.w	r0, r4, #20
   1bf38:	f011 fa0a 	bl	2d350 <atomic_and>
	if (err) {
   1bf3c:	f1b8 0f00 	cmp.w	r8, #0
   1bf40:	d020      	beq.n	1bf84 <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   1bf42:	4628      	mov	r0, r5
   1bf44:	f7ff feb4 	bl	1bcb0 <gatt_sub_find>
		if (!sub) {
   1bf48:	4601      	mov	r1, r0
   1bf4a:	b188      	cbz	r0, 1bf70 <gatt_write_ccc_rsp+0x4c>
	return list->head;
   1bf4c:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bf4e:	b14b      	cbz	r3, 1bf64 <gatt_write_ccc_rsp+0x40>
	return node->next;
   1bf50:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1bf52:	f104 0618 	add.w	r6, r4, #24
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   1bf56:	b12b      	cbz	r3, 1bf64 <gatt_write_ccc_rsp+0x40>
			if (node == &params->node) {
   1bf58:	42b3      	cmp	r3, r6
   1bf5a:	d10c      	bne.n	1bf76 <gatt_write_ccc_rsp+0x52>
				gatt_sub_remove(conn, sub, tmp, params);
   1bf5c:	4623      	mov	r3, r4
   1bf5e:	4628      	mov	r0, r5
   1bf60:	f7ff fdfa 	bl	1bb58 <gatt_sub_remove>
	if (params->subscribe) {
   1bf64:	6866      	ldr	r6, [r4, #4]
   1bf66:	b1be      	cbz	r6, 1bf98 <gatt_write_ccc_rsp+0x74>
		params->subscribe(conn, err, params);
   1bf68:	4622      	mov	r2, r4
   1bf6a:	4641      	mov	r1, r8
   1bf6c:	4628      	mov	r0, r5
   1bf6e:	47b0      	blx	r6
}
   1bf70:	46bd      	mov	sp, r7
   1bf72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bf76:	b11a      	cbz	r2, 1bf80 <gatt_write_ccc_rsp+0x5c>
	return node->next;
   1bf78:	6810      	ldr	r0, [r2, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bf7a:	4613      	mov	r3, r2
   1bf7c:	4602      	mov	r2, r0
   1bf7e:	e7ea      	b.n	1bf56 <gatt_write_ccc_rsp+0x32>
   1bf80:	4610      	mov	r0, r2
   1bf82:	e7fa      	b.n	1bf7a <gatt_write_ccc_rsp+0x56>
	} else if (!params->value) {
   1bf84:	8a23      	ldrh	r3, [r4, #16]
   1bf86:	2b00      	cmp	r3, #0
   1bf88:	d1ec      	bne.n	1bf64 <gatt_write_ccc_rsp+0x40>
		params->notify(conn, params, NULL, 0);
   1bf8a:	6826      	ldr	r6, [r4, #0]
   1bf8c:	4643      	mov	r3, r8
   1bf8e:	4642      	mov	r2, r8
   1bf90:	4621      	mov	r1, r4
   1bf92:	4628      	mov	r0, r5
   1bf94:	47b0      	blx	r6
   1bf96:	e7e5      	b.n	1bf64 <gatt_write_ccc_rsp+0x40>
	} else if (params->write) {
   1bf98:	68a3      	ldr	r3, [r4, #8]
   1bf9a:	2b00      	cmp	r3, #0
   1bf9c:	d0e8      	beq.n	1bf70 <gatt_write_ccc_rsp+0x4c>
		LOG_WRN("write callback is deprecated, use subscribe cb instead");
   1bf9e:	46e9      	mov	r9, sp
   1bfa0:	b088      	sub	sp, #32
   1bfa2:	466a      	mov	r2, sp
   1bfa4:	4b09      	ldr	r3, [pc, #36]	; (1bfcc <gatt_write_ccc_rsp+0xa8>)
   1bfa6:	6153      	str	r3, [r2, #20]
   1bfa8:	4b09      	ldr	r3, [pc, #36]	; (1bfd0 <gatt_write_ccc_rsp+0xac>)
   1bfaa:	6193      	str	r3, [r2, #24]
   1bfac:	2303      	movs	r3, #3
   1bfae:	f842 3f10 	str.w	r3, [r2, #16]!
   1bfb2:	4808      	ldr	r0, [pc, #32]	; (1bfd4 <gatt_write_ccc_rsp+0xb0>)
   1bfb4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1bfb8:	f011 fa2e 	bl	2d418 <z_log_msg_static_create.constprop.0>
		params->write(conn, err, NULL);
   1bfbc:	4632      	mov	r2, r6
   1bfbe:	68a3      	ldr	r3, [r4, #8]
   1bfc0:	46cd      	mov	sp, r9
   1bfc2:	4641      	mov	r1, r8
   1bfc4:	4628      	mov	r0, r5
   1bfc6:	4798      	blx	r3
   1bfc8:	e7d2      	b.n	1bf70 <gatt_write_ccc_rsp+0x4c>
   1bfca:	bf00      	nop
   1bfcc:	000337c0 	.word	0x000337c0
   1bfd0:	00033ccf 	.word	0x00033ccf
   1bfd4:	0002fc04 	.word	0x0002fc04

0001bfd8 <sc_store>:
{
   1bfd8:	b5b0      	push	{r4, r5, r7, lr}
	if (cfg->id) {
   1bfda:	4605      	mov	r5, r0
{
   1bfdc:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1bfde:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1bfe2:	af02      	add	r7, sp, #8
   1bfe4:	4604      	mov	r4, r0
	if (cfg->id) {
   1bfe6:	b32a      	cbz	r2, 1c034 <sc_store+0x5c>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1bfe8:	2104      	movs	r1, #4
   1bfea:	4638      	mov	r0, r7
   1bfec:	f00d fa00 	bl	293f0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   1bff0:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   1bff2:	4a11      	ldr	r2, [pc, #68]	; (1c038 <sc_store+0x60>)
   1bff4:	2124      	movs	r1, #36	; 0x24
   1bff6:	1d38      	adds	r0, r7, #4
   1bff8:	462b      	mov	r3, r5
   1bffa:	f7fa fb61 	bl	166c0 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1bffe:	2204      	movs	r2, #4
   1c000:	f104 0108 	add.w	r1, r4, #8
   1c004:	18b8      	adds	r0, r7, r2
   1c006:	f7f8 fd19 	bl	14a3c <settings_save_one>
	if (err) {
   1c00a:	b180      	cbz	r0, 1c02e <sc_store+0x56>
		LOG_ERR("failed to store SC (err %d)", err);
   1c00c:	466c      	mov	r4, sp
   1c00e:	b088      	sub	sp, #32
   1c010:	aa02      	add	r2, sp, #8
   1c012:	4b0a      	ldr	r3, [pc, #40]	; (1c03c <sc_store+0x64>)
   1c014:	6153      	str	r3, [r2, #20]
   1c016:	4b0a      	ldr	r3, [pc, #40]	; (1c040 <sc_store+0x68>)
   1c018:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1c01c:	2304      	movs	r3, #4
   1c01e:	f842 3f10 	str.w	r3, [r2, #16]!
   1c022:	4808      	ldr	r0, [pc, #32]	; (1c044 <sc_store+0x6c>)
   1c024:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c028:	f011 f9f6 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1c02c:	46a5      	mov	sp, r4
}
   1c02e:	3728      	adds	r7, #40	; 0x28
   1c030:	46bd      	mov	sp, r7
   1c032:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1c034:	9200      	str	r2, [sp, #0]
   1c036:	e7dc      	b.n	1bff2 <sc_store+0x1a>
   1c038:	00033e3b 	.word	0x00033e3b
   1c03c:	000337fb 	.word	0x000337fb
   1c040:	00033ded 	.word	0x00033ded
   1c044:	0002fc04 	.word	0x0002fc04

0001c048 <sc_save>:
{
   1c048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c04c:	af00      	add	r7, sp, #0
   1c04e:	4681      	mov	r9, r0
   1c050:	4688      	mov	r8, r1
   1c052:	4616      	mov	r6, r2
   1c054:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1c056:	f7ff fd5d 	bl	1bb14 <find_sc_cfg>
	if (!cfg) {
   1c05a:	4604      	mov	r4, r0
   1c05c:	b9e0      	cbnz	r0, 1c098 <sc_save+0x50>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1c05e:	491b      	ldr	r1, [pc, #108]	; (1c0cc <sc_save+0x84>)
   1c060:	f7ff fd58 	bl	1bb14 <find_sc_cfg>
		if (!cfg) {
   1c064:	4604      	mov	r4, r0
   1c066:	b990      	cbnz	r0, 1c08e <sc_save+0x46>
			LOG_ERR("unable to save SC: no cfg left");
   1c068:	466c      	mov	r4, sp
   1c06a:	b088      	sub	sp, #32
   1c06c:	466a      	mov	r2, sp
   1c06e:	4b18      	ldr	r3, [pc, #96]	; (1c0d0 <sc_save+0x88>)
   1c070:	6153      	str	r3, [r2, #20]
   1c072:	4b18      	ldr	r3, [pc, #96]	; (1c0d4 <sc_save+0x8c>)
   1c074:	6193      	str	r3, [r2, #24]
   1c076:	2303      	movs	r3, #3
   1c078:	f842 3f10 	str.w	r3, [r2, #16]!
   1c07c:	4816      	ldr	r0, [pc, #88]	; (1c0d8 <sc_save+0x90>)
   1c07e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c082:	f011 f9c9 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1c086:	46a5      	mov	sp, r4
}
   1c088:	46bd      	mov	sp, r7
   1c08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg->id = id;
   1c08e:	f800 9b01 	strb.w	r9, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1c092:	4641      	mov	r1, r8
   1c094:	f011 f96b 	bl	2d36e <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1c098:	8922      	ldrh	r2, [r4, #8]
   1c09a:	8963      	ldrh	r3, [r4, #10]
   1c09c:	b96a      	cbnz	r2, 1c0ba <sc_save+0x72>
   1c09e:	b973      	cbnz	r3, 1c0be <sc_save+0x76>
		cfg->data.start = start;
   1c0a0:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1c0a2:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1c0a4:	4621      	mov	r1, r4
   1c0a6:	f811 0b01 	ldrb.w	r0, [r1], #1
   1c0aa:	f010 f81d 	bl	2c0e8 <bt_addr_le_is_bonded>
   1c0ae:	2800      	cmp	r0, #0
   1c0b0:	d0ea      	beq.n	1c088 <sc_save+0x40>
		sc_store(cfg);
   1c0b2:	4620      	mov	r0, r4
   1c0b4:	f7ff ff90 	bl	1bfd8 <sc_store>
   1c0b8:	e7e6      	b.n	1c088 <sc_save+0x40>
	if (new_start >= *start && new_end <= *end) {
   1c0ba:	4296      	cmp	r6, r2
   1c0bc:	d302      	bcc.n	1c0c4 <sc_save+0x7c>
   1c0be:	429d      	cmp	r5, r3
   1c0c0:	d8ef      	bhi.n	1c0a2 <sc_save+0x5a>
   1c0c2:	e7e1      	b.n	1c088 <sc_save+0x40>
	if (*end < new_end) {
   1c0c4:	429d      	cmp	r5, r3
		*start = new_start;
   1c0c6:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1c0c8:	d9ec      	bls.n	1c0a4 <sc_save+0x5c>
   1c0ca:	e7ea      	b.n	1c0a2 <sc_save+0x5a>
   1c0cc:	00031d70 	.word	0x00031d70
   1c0d0:	0003381b 	.word	0x0003381b
   1c0d4:	00033df6 	.word	0x00033df6
   1c0d8:	0002fc04 	.word	0x0002fc04

0001c0dc <db_hash_store>:
{
   1c0dc:	b598      	push	{r3, r4, r7, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1c0de:	490d      	ldr	r1, [pc, #52]	; (1c114 <db_hash_store+0x38>)
   1c0e0:	480d      	ldr	r0, [pc, #52]	; (1c118 <db_hash_store+0x3c>)
{
   1c0e2:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1c0e4:	2210      	movs	r2, #16
   1c0e6:	f7f8 fca9 	bl	14a3c <settings_save_one>
	if (err) {
   1c0ea:	b180      	cbz	r0, 1c10e <db_hash_store+0x32>
		LOG_ERR("Failed to save Database Hash (err %d)", err);
   1c0ec:	466c      	mov	r4, sp
   1c0ee:	b088      	sub	sp, #32
   1c0f0:	466a      	mov	r2, sp
   1c0f2:	4b0a      	ldr	r3, [pc, #40]	; (1c11c <db_hash_store+0x40>)
   1c0f4:	6153      	str	r3, [r2, #20]
   1c0f6:	4b0a      	ldr	r3, [pc, #40]	; (1c120 <db_hash_store+0x44>)
   1c0f8:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1c0fc:	2304      	movs	r3, #4
   1c0fe:	f842 3f10 	str.w	r3, [r2, #16]!
   1c102:	4808      	ldr	r0, [pc, #32]	; (1c124 <db_hash_store+0x48>)
   1c104:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c108:	f011 f986 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1c10c:	46a5      	mov	sp, r4
}
   1c10e:	46bd      	mov	sp, r7
   1c110:	bd98      	pop	{r3, r4, r7, pc}
   1c112:	bf00      	nop
   1c114:	200021a8 	.word	0x200021a8
   1c118:	0003383e 	.word	0x0003383e
   1c11c:	00033846 	.word	0x00033846
   1c120:	00033e07 	.word	0x00033e07
   1c124:	0002fc04 	.word	0x0002fc04

0001c128 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   1c128:	b5b0      	push	{r4, r5, r7, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1c12a:	490f      	ldr	r1, [pc, #60]	; (1c168 <db_hash_set+0x40>)
{
   1c12c:	4614      	mov	r4, r2
   1c12e:	af00      	add	r7, sp, #0
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1c130:	2210      	movs	r2, #16
   1c132:	4618      	mov	r0, r3
   1c134:	47a0      	blx	r4
	if (len < 0) {
   1c136:	1e04      	subs	r4, r0, #0
   1c138:	da13      	bge.n	1c162 <db_hash_set+0x3a>
		LOG_ERR("Failed to decode value (err %zd)", len);
   1c13a:	466d      	mov	r5, sp
   1c13c:	b088      	sub	sp, #32
   1c13e:	466a      	mov	r2, sp
   1c140:	4b0a      	ldr	r3, [pc, #40]	; (1c16c <db_hash_set+0x44>)
   1c142:	6153      	str	r3, [r2, #20]
   1c144:	4b0a      	ldr	r3, [pc, #40]	; (1c170 <db_hash_set+0x48>)
   1c146:	480b      	ldr	r0, [pc, #44]	; (1c174 <db_hash_set+0x4c>)
   1c148:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1c14c:	2304      	movs	r3, #4
   1c14e:	f842 3f10 	str.w	r3, [r2, #16]!
   1c152:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c156:	f011 f95f 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1c15a:	46ad      	mov	sp, r5
	}

	LOG_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash), "Stored Hash: ");

	return 0;
}
   1c15c:	4620      	mov	r0, r4
   1c15e:	46bd      	mov	sp, r7
   1c160:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   1c162:	2400      	movs	r4, #0
   1c164:	e7fa      	b.n	1c15c <db_hash_set+0x34>
   1c166:	bf00      	nop
   1c168:	200021b8 	.word	0x200021b8
   1c16c:	0003379b 	.word	0x0003379b
   1c170:	00033c64 	.word	0x00033c64
   1c174:	0002fc04 	.word	0x0002fc04

0001c178 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1c178:	b508      	push	{r3, lr}
   1c17a:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c17c:	6881      	ldr	r1, [r0, #8]
   1c17e:	4a07      	ldr	r2, [pc, #28]	; (1c19c <remove_peer_from_attr+0x24>)
   1c180:	4291      	cmp	r1, r2
   1c182:	d109      	bne.n	1c198 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1c184:	791a      	ldrb	r2, [r3, #4]
   1c186:	6819      	ldr	r1, [r3, #0]
   1c188:	68c0      	ldr	r0, [r0, #12]
   1c18a:	f011 f8c5 	bl	2d318 <ccc_find_cfg>
	if (cfg) {
   1c18e:	b118      	cbz	r0, 1c198 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   1c190:	220a      	movs	r2, #10
   1c192:	2100      	movs	r1, #0
   1c194:	f00f fd8f 	bl	2bcb6 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   1c198:	2001      	movs	r0, #1
   1c19a:	bd08      	pop	{r3, pc}
   1c19c:	0001c3f9 	.word	0x0001c3f9

0001c1a0 <convert_to_id_on_match>:
{
   1c1a0:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c1a2:	4b09      	ldr	r3, [pc, #36]	; (1c1c8 <convert_to_id_on_match+0x28>)
{
   1c1a4:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c1a6:	6882      	ldr	r2, [r0, #8]
   1c1a8:	429a      	cmp	r2, r3
   1c1aa:	d10a      	bne.n	1c1c2 <convert_to_id_on_match+0x22>
		if (bt_addr_le_eq(&ccc->cfg[i].peer, match->private_addr)) {
   1c1ac:	68c4      	ldr	r4, [r0, #12]
   1c1ae:	6829      	ldr	r1, [r5, #0]
   1c1b0:	3401      	adds	r4, #1
   1c1b2:	4620      	mov	r0, r4
   1c1b4:	f011 f8a8 	bl	2d308 <bt_addr_le_eq>
   1c1b8:	b118      	cbz	r0, 1c1c2 <convert_to_id_on_match+0x22>
			bt_addr_le_copy(&ccc->cfg[i].peer, match->id_addr);
   1c1ba:	6869      	ldr	r1, [r5, #4]
   1c1bc:	4620      	mov	r0, r4
   1c1be:	f011 f8d6 	bl	2d36e <bt_addr_le_copy>
}
   1c1c2:	2001      	movs	r0, #1
   1c1c4:	bd38      	pop	{r3, r4, r5, pc}
   1c1c6:	bf00      	nop
   1c1c8:	0001c3f9 	.word	0x0001c3f9

0001c1cc <ccc_save>:
{
   1c1cc:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c1ce:	4b0c      	ldr	r3, [pc, #48]	; (1c200 <ccc_save+0x34>)
{
   1c1d0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c1d2:	6882      	ldr	r2, [r0, #8]
   1c1d4:	429a      	cmp	r2, r3
{
   1c1d6:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c1d8:	d10f      	bne.n	1c1fa <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1c1da:	7922      	ldrb	r2, [r4, #4]
   1c1dc:	6821      	ldr	r1, [r4, #0]
   1c1de:	68c0      	ldr	r0, [r0, #12]
   1c1e0:	f011 f89a 	bl	2d318 <ccc_find_cfg>
	if (!cfg) {
   1c1e4:	b148      	cbz	r0, 1c1fa <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1c1e6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   1c1ea:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   1c1ee:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1c1f0:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1c1f2:	8901      	ldrh	r1, [r0, #8]
   1c1f4:	8151      	strh	r1, [r2, #10]
	save->count++;
   1c1f6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1c1fa:	2001      	movs	r0, #1
   1c1fc:	bd38      	pop	{r3, r4, r5, pc}
   1c1fe:	bf00      	nop
   1c200:	0001c3f9 	.word	0x0001c3f9

0001c204 <sc_commit.part.0>:
	k_work_reschedule(&gatt_sc.work, timeout);
   1c204:	4802      	ldr	r0, [pc, #8]	; (1c210 <sc_commit.part.0+0xc>)
   1c206:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c20a:	2300      	movs	r3, #0
   1c20c:	f009 bae6 	b.w	257dc <k_work_reschedule>
   1c210:	20002240 	.word	0x20002240

0001c214 <sc_commit>:
{
   1c214:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c216:	2104      	movs	r1, #4
   1c218:	4808      	ldr	r0, [pc, #32]	; (1c23c <sc_commit+0x28>)
   1c21a:	f011 f88a 	bl	2d332 <atomic_or>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c21e:	4807      	ldr	r0, [pc, #28]	; (1c23c <sc_commit+0x28>)
   1c220:	f06f 0102 	mvn.w	r1, #2
   1c224:	f011 f894 	bl	2d350 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c228:	4804      	ldr	r0, [pc, #16]	; (1c23c <sc_commit+0x28>)
   1c22a:	f011 f8a3 	bl	2d374 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c22e:	07c3      	lsls	r3, r0, #31
   1c230:	d501      	bpl.n	1c236 <sc_commit+0x22>
   1c232:	f7ff ffe7 	bl	1c204 <sc_commit.part.0>
}
   1c236:	2000      	movs	r0, #0
   1c238:	bd08      	pop	{r3, pc}
   1c23a:	bf00      	nop
   1c23c:	20002270 	.word	0x20002270

0001c240 <clear_cf_cfg>:
{
   1c240:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1c242:	490c      	ldr	r1, [pc, #48]	; (1c274 <clear_cf_cfg+0x34>)
{
   1c244:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1c246:	3001      	adds	r0, #1
   1c248:	f011 f891 	bl	2d36e <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1c24c:	f104 0008 	add.w	r0, r4, #8
   1c250:	2201      	movs	r2, #1
   1c252:	2100      	movs	r1, #0
   1c254:	f00f fd2f 	bl	2bcb6 <memset>
   1c258:	f3bf 8f5b 	dmb	ish
   1c25c:	340c      	adds	r4, #12
   1c25e:	2300      	movs	r3, #0
   1c260:	e854 2f00 	ldrex	r2, [r4]
   1c264:	e844 3100 	strex	r1, r3, [r4]
   1c268:	2900      	cmp	r1, #0
   1c26a:	d1f9      	bne.n	1c260 <clear_cf_cfg+0x20>
   1c26c:	f3bf 8f5b 	dmb	ish
}
   1c270:	bd10      	pop	{r4, pc}
   1c272:	bf00      	nop
   1c274:	00031d70 	.word	0x00031d70

0001c278 <bt_gatt_clear_sc>:
{
   1c278:	b5b0      	push	{r4, r5, r7, lr}
   1c27a:	b08c      	sub	sp, #48	; 0x30
   1c27c:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1c27e:	f7ff fc49 	bl	1bb14 <find_sc_cfg>
	if (!cfg) {
   1c282:	4604      	mov	r4, r0
   1c284:	b340      	cbz	r0, 1c2d8 <bt_gatt_clear_sc+0x60>
		if (cfg->id) {
   1c286:	4605      	mov	r5, r0
   1c288:	f815 2b01 	ldrb.w	r2, [r5], #1
   1c28c:	b342      	cbz	r2, 1c2e0 <bt_gatt_clear_sc+0x68>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1c28e:	2104      	movs	r1, #4
   1c290:	4638      	mov	r0, r7
   1c292:	f00d f8ad 	bl	293f0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1c296:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   1c298:	1d38      	adds	r0, r7, #4
   1c29a:	4a12      	ldr	r2, [pc, #72]	; (1c2e4 <bt_gatt_clear_sc+0x6c>)
   1c29c:	462b      	mov	r3, r5
   1c29e:	2124      	movs	r1, #36	; 0x24
   1c2a0:	f7fa fa0e 	bl	166c0 <bt_settings_encode_key>
		err = settings_delete(key);
   1c2a4:	1d38      	adds	r0, r7, #4
   1c2a6:	f00e f9eb 	bl	2a680 <settings_delete>
		if (err) {
   1c2aa:	b180      	cbz	r0, 1c2ce <bt_gatt_clear_sc+0x56>
			LOG_ERR("failed to delete SC (err %d)", err);
   1c2ac:	466d      	mov	r5, sp
   1c2ae:	b088      	sub	sp, #32
   1c2b0:	aa02      	add	r2, sp, #8
   1c2b2:	4b0d      	ldr	r3, [pc, #52]	; (1c2e8 <bt_gatt_clear_sc+0x70>)
   1c2b4:	6153      	str	r3, [r2, #20]
   1c2b6:	4b0d      	ldr	r3, [pc, #52]	; (1c2ec <bt_gatt_clear_sc+0x74>)
   1c2b8:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1c2bc:	2304      	movs	r3, #4
   1c2be:	f842 3f10 	str.w	r3, [r2, #16]!
   1c2c2:	480b      	ldr	r0, [pc, #44]	; (1c2f0 <bt_gatt_clear_sc+0x78>)
   1c2c4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c2c8:	f011 f8a6 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1c2cc:	46ad      	mov	sp, r5
	memset(cfg, 0, sizeof(*cfg));
   1c2ce:	220c      	movs	r2, #12
   1c2d0:	2100      	movs	r1, #0
   1c2d2:	4620      	mov	r0, r4
   1c2d4:	f00f fcef 	bl	2bcb6 <memset>
}
   1c2d8:	2000      	movs	r0, #0
   1c2da:	3728      	adds	r7, #40	; 0x28
   1c2dc:	46bd      	mov	sp, r7
   1c2de:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1c2e0:	9200      	str	r2, [sp, #0]
   1c2e2:	e7d9      	b.n	1c298 <bt_gatt_clear_sc+0x20>
   1c2e4:	00033e3b 	.word	0x00033e3b
   1c2e8:	00033870 	.word	0x00033870
   1c2ec:	00033dd3 	.word	0x00033dd3
   1c2f0:	0002fc04 	.word	0x0002fc04

0001c2f4 <sc_clear>:
{
   1c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c2f6:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1c2fa:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c2fc:	4631      	mov	r1, r6
   1c2fe:	7a00      	ldrb	r0, [r0, #8]
{
   1c300:	af00      	add	r7, sp, #0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c302:	f00f fef1 	bl	2c0e8 <bt_addr_le_is_bonded>
   1c306:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1c308:	4631      	mov	r1, r6
   1c30a:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c30c:	b1ad      	cbz	r5, 1c33a <sc_clear+0x46>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1c30e:	f7ff ffb3 	bl	1c278 <bt_gatt_clear_sc>
		if (err) {
   1c312:	b180      	cbz	r0, 1c336 <sc_clear+0x42>
			LOG_ERR("Failed to clear SC %d", err);
   1c314:	466c      	mov	r4, sp
   1c316:	b088      	sub	sp, #32
   1c318:	466a      	mov	r2, sp
   1c31a:	4b0c      	ldr	r3, [pc, #48]	; (1c34c <sc_clear+0x58>)
   1c31c:	6153      	str	r3, [r2, #20]
   1c31e:	4b0c      	ldr	r3, [pc, #48]	; (1c350 <sc_clear+0x5c>)
   1c320:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1c324:	2304      	movs	r3, #4
   1c326:	f842 3f10 	str.w	r3, [r2, #16]!
   1c32a:	480a      	ldr	r0, [pc, #40]	; (1c354 <sc_clear+0x60>)
   1c32c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c330:	f011 f872 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1c334:	46a5      	mov	sp, r4
}
   1c336:	46bd      	mov	sp, r7
   1c338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1c33a:	f7ff fbeb 	bl	1bb14 <find_sc_cfg>
		if (cfg) {
   1c33e:	2800      	cmp	r0, #0
   1c340:	d0f9      	beq.n	1c336 <sc_clear+0x42>
	memset(cfg, 0, sizeof(*cfg));
   1c342:	220c      	movs	r2, #12
   1c344:	4629      	mov	r1, r5
   1c346:	f00f fcb6 	bl	2bcb6 <memset>
}
   1c34a:	e7f4      	b.n	1c336 <sc_clear+0x42>
   1c34c:	00033891 	.word	0x00033891
   1c350:	00033de4 	.word	0x00033de4
   1c354:	0002fc04 	.word	0x0002fc04

0001c358 <disconnected_cb>:
{
   1c358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c35c:	4b23      	ldr	r3, [pc, #140]	; (1c3ec <disconnected_cb+0x94>)
{
   1c35e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c360:	6882      	ldr	r2, [r0, #8]
   1c362:	429a      	cmp	r2, r3
{
   1c364:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c366:	d102      	bne.n	1c36e <disconnected_cb+0x16>
	ccc = attr->user_data;
   1c368:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1c36a:	8963      	ldrh	r3, [r4, #10]
   1c36c:	bb33      	cbnz	r3, 1c3bc <disconnected_cb+0x64>
}
   1c36e:	2001      	movs	r0, #1
   1c370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   1c374:	f010 f83e 	bl	2c3f4 <bt_conn_unref>
		if (ccc->cfg_changed) {
   1c378:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1c37a:	2100      	movs	r1, #0
   1c37c:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1c37e:	2b00      	cmp	r3, #0
   1c380:	d0f5      	beq.n	1c36e <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1c382:	4638      	mov	r0, r7
   1c384:	4798      	blx	r3
   1c386:	e7f2      	b.n	1c36e <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c388:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1c38c:	7a28      	ldrb	r0, [r5, #8]
   1c38e:	4641      	mov	r1, r8
   1c390:	f00f feaa 	bl	2c0e8 <bt_addr_le_is_bonded>
   1c394:	b968      	cbnz	r0, 1c3b2 <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1c396:	4b16      	ldr	r3, [pc, #88]	; (1c3f0 <disconnected_cb+0x98>)
   1c398:	429c      	cmp	r4, r3
   1c39a:	d102      	bne.n	1c3a2 <disconnected_cb+0x4a>
					sc_clear(conn);
   1c39c:	4628      	mov	r0, r5
   1c39e:	f7ff ffa9 	bl	1c2f4 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1c3a2:	4914      	ldr	r1, [pc, #80]	; (1c3f4 <disconnected_cb+0x9c>)
   1c3a4:	4630      	mov	r0, r6
   1c3a6:	f010 ffe2 	bl	2d36e <bt_addr_le_copy>
	cfg->id = 0U;
   1c3aa:	2300      	movs	r3, #0
   1c3ac:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1c3ae:	8123      	strh	r3, [r4, #8]
}
   1c3b0:	e7e2      	b.n	1c378 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c3b2:	4641      	mov	r1, r8
   1c3b4:	4630      	mov	r0, r6
   1c3b6:	f010 ffda 	bl	2d36e <bt_addr_le_copy>
   1c3ba:	e7dd      	b.n	1c378 <disconnected_cb+0x20>
		if (!cfg->value) {
   1c3bc:	8923      	ldrh	r3, [r4, #8]
   1c3be:	2b00      	cmp	r3, #0
   1c3c0:	d0da      	beq.n	1c378 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c3c2:	4626      	mov	r6, r4
   1c3c4:	4628      	mov	r0, r5
   1c3c6:	f816 1b01 	ldrb.w	r1, [r6], #1
   1c3ca:	4632      	mov	r2, r6
   1c3cc:	f010 f8c7 	bl	2c55e <bt_conn_is_peer_addr_le>
   1c3d0:	2800      	cmp	r0, #0
   1c3d2:	d1d9      	bne.n	1c388 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1c3d4:	7820      	ldrb	r0, [r4, #0]
   1c3d6:	4631      	mov	r1, r6
   1c3d8:	f7fd fd10 	bl	19dfc <bt_conn_lookup_addr_le>
			if (tmp) {
   1c3dc:	2800      	cmp	r0, #0
   1c3de:	d0cb      	beq.n	1c378 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   1c3e0:	7b43      	ldrb	r3, [r0, #13]
   1c3e2:	2b07      	cmp	r3, #7
   1c3e4:	d1c6      	bne.n	1c374 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   1c3e6:	f010 f805 	bl	2c3f4 <bt_conn_unref>
	if (!value_used) {
   1c3ea:	e7c0      	b.n	1c36e <disconnected_cb+0x16>
   1c3ec:	0001c3f9 	.word	0x0001c3f9
   1c3f0:	20000624 	.word	0x20000624
   1c3f4:	00031d70 	.word	0x00031d70

0001c3f8 <bt_gatt_attr_write_ccc>:
{
   1c3f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3fc:	af00      	add	r7, sp, #0
   1c3fe:	4698      	mov	r8, r3
   1c400:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1c402:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   1c406:	4606      	mov	r6, r0
   1c408:	4689      	mov	r9, r1
	if (offset) {
   1c40a:	2b00      	cmp	r3, #0
   1c40c:	d15c      	bne.n	1c4c8 <bt_gatt_attr_write_ccc+0xd0>
	if (!len || len > sizeof(uint16_t)) {
   1c40e:	f108 33ff 	add.w	r3, r8, #4294967295
   1c412:	2b01      	cmp	r3, #1
   1c414:	d85b      	bhi.n	1c4ce <bt_gatt_attr_write_ccc+0xd6>
	if (len < sizeof(uint16_t)) {
   1c416:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   1c41a:	4651      	mov	r1, sl
		value = *(uint8_t *)buf;
   1c41c:	7815      	ldrb	r5, [r2, #0]
   1c41e:	bf18      	it	ne
   1c420:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1c422:	f7ff fc31 	bl	1bc88 <find_ccc_cfg>
	if (!cfg) {
   1c426:	4604      	mov	r4, r0
   1c428:	bb18      	cbnz	r0, 1c472 <bt_gatt_attr_write_ccc+0x7a>
		if (!value) {
   1c42a:	b91d      	cbnz	r5, 1c434 <bt_gatt_attr_write_ccc+0x3c>
			return len;
   1c42c:	4640      	mov	r0, r8
}
   1c42e:	46bd      	mov	sp, r7
   1c430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1c434:	4651      	mov	r1, sl
   1c436:	f7ff fc27 	bl	1bc88 <find_ccc_cfg>
		if (!cfg) {
   1c43a:	4604      	mov	r4, r0
   1c43c:	b990      	cbnz	r0, 1c464 <bt_gatt_attr_write_ccc+0x6c>
			LOG_WRN("No space to store CCC cfg");
   1c43e:	466c      	mov	r4, sp
   1c440:	b088      	sub	sp, #32
   1c442:	466a      	mov	r2, sp
   1c444:	4b23      	ldr	r3, [pc, #140]	; (1c4d4 <bt_gatt_attr_write_ccc+0xdc>)
   1c446:	6153      	str	r3, [r2, #20]
   1c448:	4b23      	ldr	r3, [pc, #140]	; (1c4d8 <bt_gatt_attr_write_ccc+0xe0>)
   1c44a:	6193      	str	r3, [r2, #24]
   1c44c:	2303      	movs	r3, #3
   1c44e:	4823      	ldr	r0, [pc, #140]	; (1c4dc <bt_gatt_attr_write_ccc+0xe4>)
   1c450:	f842 3f10 	str.w	r3, [r2, #16]!
   1c454:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c458:	f010 ffde 	bl	2d418 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1c45c:	f06f 0010 	mvn.w	r0, #16
   1c460:	46a5      	mov	sp, r4
   1c462:	e7e4      	b.n	1c42e <bt_gatt_attr_write_ccc+0x36>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c464:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1c468:	3001      	adds	r0, #1
   1c46a:	f010 ff80 	bl	2d36e <bt_addr_le_copy>
		cfg->id = conn->id;
   1c46e:	7a33      	ldrb	r3, [r6, #8]
   1c470:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1c472:	f8da 3010 	ldr.w	r3, [sl, #16]
   1c476:	b9db      	cbnz	r3, 1c4b0 <bt_gatt_attr_write_ccc+0xb8>
	value_changed = cfg->value != value;
   1c478:	f8b4 b008 	ldrh.w	fp, [r4, #8]
	cfg->value = value;
   1c47c:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1c47e:	f8ba 300a 	ldrh.w	r3, [sl, #10]
   1c482:	42ab      	cmp	r3, r5
   1c484:	d003      	beq.n	1c48e <bt_gatt_attr_write_ccc+0x96>
		gatt_ccc_changed(attr, ccc);
   1c486:	4651      	mov	r1, sl
   1c488:	4648      	mov	r0, r9
   1c48a:	f010 fec7 	bl	2d21c <gatt_ccc_changed>
	if (value_changed) {
   1c48e:	45ab      	cmp	fp, r5
   1c490:	d005      	beq.n	1c49e <bt_gatt_attr_write_ccc+0xa6>
		gatt_delayed_store_enqueue(conn->id, &conn->le.dst, DELAYED_STORE_CCC);
   1c492:	7a30      	ldrb	r0, [r6, #8]
   1c494:	2200      	movs	r2, #0
   1c496:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1c49a:	f7ff fc37 	bl	1bd0c <gatt_delayed_store_enqueue>
	if (!value) {
   1c49e:	2d00      	cmp	r5, #0
   1c4a0:	d1c4      	bne.n	1c42c <bt_gatt_attr_write_ccc+0x34>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1c4a2:	490f      	ldr	r1, [pc, #60]	; (1c4e0 <bt_gatt_attr_write_ccc+0xe8>)
   1c4a4:	1c60      	adds	r0, r4, #1
   1c4a6:	f010 ff62 	bl	2d36e <bt_addr_le_copy>
	cfg->id = 0U;
   1c4aa:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1c4ac:	8125      	strh	r5, [r4, #8]
}
   1c4ae:	e7bd      	b.n	1c42c <bt_gatt_attr_write_ccc+0x34>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1c4b0:	462a      	mov	r2, r5
   1c4b2:	4649      	mov	r1, r9
   1c4b4:	4630      	mov	r0, r6
   1c4b6:	4798      	blx	r3
		if (write < 0) {
   1c4b8:	2800      	cmp	r0, #0
   1c4ba:	dbb8      	blt.n	1c42e <bt_gatt_attr_write_ccc+0x36>
		if (write != sizeof(value) && write != 1) {
   1c4bc:	3801      	subs	r0, #1
   1c4be:	2801      	cmp	r0, #1
   1c4c0:	d9da      	bls.n	1c478 <bt_gatt_attr_write_ccc+0x80>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1c4c2:	f06f 000d 	mvn.w	r0, #13
   1c4c6:	e7b2      	b.n	1c42e <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c4c8:	f06f 0006 	mvn.w	r0, #6
   1c4cc:	e7af      	b.n	1c42e <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1c4ce:	f06f 000c 	mvn.w	r0, #12
   1c4d2:	e7ac      	b.n	1c42e <bt_gatt_attr_write_ccc+0x36>
   1c4d4:	000338ab 	.word	0x000338ab
   1c4d8:	00033dbc 	.word	0x00033dbc
   1c4dc:	0002fc04 	.word	0x0002fc04
   1c4e0:	00031d70 	.word	0x00031d70

0001c4e4 <gatt_write_ccc>:
{
   1c4e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c4e6:	460c      	mov	r4, r1
   1c4e8:	4605      	mov	r5, r0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c4ea:	2108      	movs	r1, #8
   1c4ec:	f104 0014 	add.w	r0, r4, #20
   1c4f0:	f010 ff1f 	bl	2d332 <atomic_or>
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1c4f4:	2312      	movs	r3, #18
   1c4f6:	2204      	movs	r2, #4
   1c4f8:	e9cd 3200 	strd	r3, r2, [sp]
   1c4fc:	4903      	ldr	r1, [pc, #12]	; (1c50c <gatt_write_ccc+0x28>)
   1c4fe:	4b04      	ldr	r3, [pc, #16]	; (1c510 <gatt_write_ccc+0x2c>)
   1c500:	4622      	mov	r2, r4
   1c502:	4628      	mov	r0, r5
   1c504:	f011 f868 	bl	2d5d8 <gatt_req_send.constprop.0>
}
   1c508:	b003      	add	sp, #12
   1c50a:	bd30      	pop	{r4, r5, pc}
   1c50c:	0001bf25 	.word	0x0001bf25
   1c510:	0002d659 	.word	0x0002d659

0001c514 <sc_indicate.constprop.0>:
static void sc_indicate(uint16_t start, uint16_t end)
   1c514:	b508      	push	{r3, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c516:	4812      	ldr	r0, [pc, #72]	; (1c560 <sc_indicate.constprop.0+0x4c>)
   1c518:	2101      	movs	r1, #1
   1c51a:	f010 ff0a 	bl	2d332 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c51e:	f010 0f01 	tst.w	r0, #1
   1c522:	4b10      	ldr	r3, [pc, #64]	; (1c564 <sc_indicate.constprop.0+0x50>)
   1c524:	d10a      	bne.n	1c53c <sc_indicate.constprop.0+0x28>
		gatt_sc.start = start;
   1c526:	4a10      	ldr	r2, [pc, #64]	; (1c568 <sc_indicate.constprop.0+0x54>)
   1c528:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c52a:	480d      	ldr	r0, [pc, #52]	; (1c560 <sc_indicate.constprop.0+0x4c>)
   1c52c:	f010 ff22 	bl	2d374 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1c530:	0783      	lsls	r3, r0, #30
   1c532:	d413      	bmi.n	1c55c <sc_indicate.constprop.0+0x48>
}
   1c534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1c538:	f7ff be64 	b.w	1c204 <sc_commit.part.0>
	if (new_start >= *start && new_end <= *end) {
   1c53c:	8b1a      	ldrh	r2, [r3, #24]
   1c53e:	8b58      	ldrh	r0, [r3, #26]
   1c540:	2a01      	cmp	r2, #1
   1c542:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c546:	d805      	bhi.n	1c554 <sc_indicate.constprop.0+0x40>
   1c548:	4290      	cmp	r0, r2
   1c54a:	d007      	beq.n	1c55c <sc_indicate.constprop.0+0x48>
		*end = new_end;
   1c54c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c550:	835a      	strh	r2, [r3, #26]
   1c552:	e7ea      	b.n	1c52a <sc_indicate.constprop.0+0x16>
	if (*end < new_end) {
   1c554:	4290      	cmp	r0, r2
		*start = new_start;
   1c556:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   1c558:	d0e7      	beq.n	1c52a <sc_indicate.constprop.0+0x16>
   1c55a:	e7f7      	b.n	1c54c <sc_indicate.constprop.0+0x38>
}
   1c55c:	bd08      	pop	{r3, pc}
   1c55e:	bf00      	nop
   1c560:	20002270 	.word	0x20002270
   1c564:	20002220 	.word	0x20002220
   1c568:	ffff0001 	.word	0xffff0001

0001c56c <cf_write>:
{
   1c56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c570:	af00      	add	r7, sp, #0
   1c572:	4698      	mov	r8, r3
   1c574:	8c3b      	ldrh	r3, [r7, #32]
	if (offset > sizeof(cfg->data)) {
   1c576:	2b01      	cmp	r3, #1
{
   1c578:	4606      	mov	r6, r0
   1c57a:	4691      	mov	r9, r2
	if (offset > sizeof(cfg->data)) {
   1c57c:	d843      	bhi.n	1c606 <cf_write+0x9a>
	if (offset + len > sizeof(cfg->data)) {
   1c57e:	4443      	add	r3, r8
   1c580:	2b01      	cmp	r3, #1
   1c582:	4645      	mov	r5, r8
   1c584:	dc42      	bgt.n	1c60c <cf_write+0xa0>
	cfg = find_cf_cfg(conn);
   1c586:	f7ff fb51 	bl	1bc2c <find_cf_cfg>
	if (!cfg) {
   1c58a:	4604      	mov	r4, r0
   1c58c:	b9c8      	cbnz	r0, 1c5c2 <cf_write+0x56>
		cfg = find_cf_cfg(NULL);
   1c58e:	f7ff fb4d 	bl	1bc2c <find_cf_cfg>
	if (!cfg) {
   1c592:	4604      	mov	r4, r0
   1c594:	b9a8      	cbnz	r0, 1c5c2 <cf_write+0x56>
		LOG_WRN("No space to store Client Supported Features");
   1c596:	466c      	mov	r4, sp
   1c598:	b088      	sub	sp, #32
   1c59a:	466a      	mov	r2, sp
   1c59c:	4b1e      	ldr	r3, [pc, #120]	; (1c618 <cf_write+0xac>)
   1c59e:	6153      	str	r3, [r2, #20]
   1c5a0:	4b1e      	ldr	r3, [pc, #120]	; (1c61c <cf_write+0xb0>)
   1c5a2:	6193      	str	r3, [r2, #24]
   1c5a4:	2303      	movs	r3, #3
   1c5a6:	f842 3f10 	str.w	r3, [r2, #16]!
   1c5aa:	481d      	ldr	r0, [pc, #116]	; (1c620 <cf_write+0xb4>)
   1c5ac:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c5b0:	f010 ff32 	bl	2d418 <z_log_msg_static_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1c5b4:	f06f 0510 	mvn.w	r5, #16
   1c5b8:	46a5      	mov	sp, r4
}
   1c5ba:	4628      	mov	r0, r5
   1c5bc:	46bd      	mov	sp, r7
   1c5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1c5c2:	f1b8 0f00 	cmp.w	r8, #0
   1c5c6:	d012      	beq.n	1c5ee <cf_write+0x82>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1c5c8:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1c5ca:	f899 2000 	ldrb.w	r2, [r9]
   1c5ce:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1c5d0:	fa21 f003 	lsr.w	r0, r1, r3
   1c5d4:	07c0      	lsls	r0, r0, #31
   1c5d6:	d503      	bpl.n	1c5e0 <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   1c5d8:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1c5dc:	07c0      	lsls	r0, r0, #31
   1c5de:	d518      	bpl.n	1c612 <cf_write+0xa6>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1c5e0:	3301      	adds	r3, #1
   1c5e2:	2b03      	cmp	r3, #3
   1c5e4:	d1f4      	bne.n	1c5d0 <cf_write+0x64>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1c5e6:	f002 0207 	and.w	r2, r2, #7
   1c5ea:	4311      	orrs	r1, r2
   1c5ec:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c5ee:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1c5f2:	1c60      	adds	r0, r4, #1
   1c5f4:	f010 febb 	bl	2d36e <bt_addr_le_copy>
	cfg->id = conn->id;
   1c5f8:	7a33      	ldrb	r3, [r6, #8]
   1c5fa:	7023      	strb	r3, [r4, #0]
	set_change_aware(cfg, true);
   1c5fc:	2101      	movs	r1, #1
   1c5fe:	4620      	mov	r0, r4
   1c600:	f011 f84f 	bl	2d6a2 <set_change_aware>
	return len;
   1c604:	e7d9      	b.n	1c5ba <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c606:	f06f 0506 	mvn.w	r5, #6
   1c60a:	e7d6      	b.n	1c5ba <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1c60c:	f06f 050c 	mvn.w	r5, #12
   1c610:	e7d3      	b.n	1c5ba <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1c612:	f06f 0512 	mvn.w	r5, #18
   1c616:	e7d0      	b.n	1c5ba <cf_write+0x4e>
   1c618:	000338c9 	.word	0x000338c9
   1c61c:	00033dfe 	.word	0x00033dfe
   1c620:	0002fc04 	.word	0x0002fc04

0001c624 <sc_indicate_rsp>:
{
   1c624:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c626:	f06f 0102 	mvn.w	r1, #2
   1c62a:	4604      	mov	r4, r0
   1c62c:	480e      	ldr	r0, [pc, #56]	; (1c668 <sc_indicate_rsp+0x44>)
   1c62e:	f010 fe8f 	bl	2d350 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c632:	480d      	ldr	r0, [pc, #52]	; (1c668 <sc_indicate_rsp+0x44>)
   1c634:	f010 fe9e 	bl	2d374 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c638:	07c2      	lsls	r2, r0, #31
   1c63a:	d504      	bpl.n	1c646 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1c63c:	480b      	ldr	r0, [pc, #44]	; (1c66c <sc_indicate_rsp+0x48>)
   1c63e:	2200      	movs	r2, #0
   1c640:	2300      	movs	r3, #0
   1c642:	f009 f8cb 	bl	257dc <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1c646:	4620      	mov	r0, r4
   1c648:	f010 fdc0 	bl	2d1cc <bt_att_fixed_chan_only>
   1c64c:	b158      	cbz	r0, 1c666 <sc_indicate_rsp+0x42>
		cfg = find_cf_cfg(conn);
   1c64e:	4620      	mov	r0, r4
   1c650:	f7ff faec 	bl	1bc2c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1c654:	b138      	cbz	r0, 1c666 <sc_indicate_rsp+0x42>
   1c656:	7a03      	ldrb	r3, [r0, #8]
   1c658:	07db      	lsls	r3, r3, #31
   1c65a:	d504      	bpl.n	1c666 <sc_indicate_rsp+0x42>
}
   1c65c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			set_change_aware(cfg, true);
   1c660:	2101      	movs	r1, #1
   1c662:	f011 b81e 	b.w	2d6a2 <set_change_aware>
}
   1c666:	bd10      	pop	{r4, pc}
   1c668:	20002270 	.word	0x20002270
   1c66c:	20002240 	.word	0x20002240

0001c670 <cf_set>:
{
   1c670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c674:	b085      	sub	sp, #20
   1c676:	4689      	mov	r9, r1
   1c678:	af00      	add	r7, sp, #0
   1c67a:	4616      	mov	r6, r2
   1c67c:	4698      	mov	r8, r3
	if (!name) {
   1c67e:	4604      	mov	r4, r0
   1c680:	b980      	cbnz	r0, 1c6a4 <cf_set+0x34>
		LOG_ERR("Insufficient number of arguments");
   1c682:	466c      	mov	r4, sp
   1c684:	b088      	sub	sp, #32
   1c686:	466a      	mov	r2, sp
   1c688:	4b60      	ldr	r3, [pc, #384]	; (1c80c <cf_set+0x19c>)
   1c68a:	6153      	str	r3, [r2, #20]
   1c68c:	4b60      	ldr	r3, [pc, #384]	; (1c810 <cf_set+0x1a0>)
   1c68e:	6193      	str	r3, [r2, #24]
   1c690:	2303      	movs	r3, #3
   1c692:	f842 3f10 	str.w	r3, [r2, #16]!
   1c696:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			LOG_ERR("Invalid local identity %lu", next_id);
   1c69a:	485e      	ldr	r0, [pc, #376]	; (1c814 <cf_set+0x1a4>)
   1c69c:	f010 febc 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1c6a0:	46a5      	mov	sp, r4
			return -EINVAL;
   1c6a2:	e019      	b.n	1c6d8 <cf_set+0x68>
	err = bt_settings_decode_key(name, &addr);
   1c6a4:	f107 0108 	add.w	r1, r7, #8
   1c6a8:	f00f fb95 	bl	2bdd6 <bt_settings_decode_key>
	if (err) {
   1c6ac:	4605      	mov	r5, r0
   1c6ae:	b1d0      	cbz	r0, 1c6e6 <cf_set+0x76>
		LOG_ERR("Unable to decode address %s", name);
   1c6b0:	466d      	mov	r5, sp
   1c6b2:	b08a      	sub	sp, #40	; 0x28
   1c6b4:	466a      	mov	r2, sp
   1c6b6:	4b58      	ldr	r3, [pc, #352]	; (1c818 <cf_set+0x1a8>)
   1c6b8:	6153      	str	r3, [r2, #20]
   1c6ba:	4b55      	ldr	r3, [pc, #340]	; (1c810 <cf_set+0x1a0>)
   1c6bc:	4855      	ldr	r0, [pc, #340]	; (1c814 <cf_set+0x1a4>)
   1c6be:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1c6c2:	f240 3301 	movw	r3, #769	; 0x301
   1c6c6:	8413      	strh	r3, [r2, #32]
   1c6c8:	4b54      	ldr	r3, [pc, #336]	; (1c81c <cf_set+0x1ac>)
   1c6ca:	f842 3f10 	str.w	r3, [r2, #16]!
   1c6ce:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1c6d2:	f010 fea1 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1c6d6:	46ad      	mov	sp, r5
		return -EINVAL;
   1c6d8:	f06f 0515 	mvn.w	r5, #21
}
   1c6dc:	4628      	mov	r0, r5
   1c6de:	3714      	adds	r7, #20
   1c6e0:	46bd      	mov	sp, r7
   1c6e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	settings_name_next(name, &next);
   1c6e6:	1d39      	adds	r1, r7, #4
   1c6e8:	4620      	mov	r0, r4
   1c6ea:	f00d fff1 	bl	2a6d0 <settings_name_next>
	if (!next) {
   1c6ee:	6878      	ldr	r0, [r7, #4]
   1c6f0:	b190      	cbz	r0, 1c718 <cf_set+0xa8>
		unsigned long next_id = strtoul(next, NULL, 10);
   1c6f2:	220a      	movs	r2, #10
   1c6f4:	4629      	mov	r1, r5
   1c6f6:	f00f f9db 	bl	2bab0 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1c6fa:	b168      	cbz	r0, 1c718 <cf_set+0xa8>
			LOG_ERR("Invalid local identity %lu", next_id);
   1c6fc:	466c      	mov	r4, sp
   1c6fe:	b088      	sub	sp, #32
   1c700:	466a      	mov	r2, sp
   1c702:	4b47      	ldr	r3, [pc, #284]	; (1c820 <cf_set+0x1b0>)
   1c704:	6153      	str	r3, [r2, #20]
   1c706:	4b42      	ldr	r3, [pc, #264]	; (1c810 <cf_set+0x1a0>)
   1c708:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1c70c:	2304      	movs	r3, #4
   1c70e:	f842 3f10 	str.w	r3, [r2, #16]!
   1c712:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c716:	e7c0      	b.n	1c69a <cf_set+0x2a>
	cfg = find_cf_cfg_by_addr(id, &addr);
   1c718:	f107 0108 	add.w	r1, r7, #8
   1c71c:	2000      	movs	r0, #0
   1c71e:	f7ff f9b5 	bl	1ba8c <find_cf_cfg_by_addr>
	if (!cfg) {
   1c722:	4604      	mov	r4, r0
   1c724:	b9e8      	cbnz	r0, 1c762 <cf_set+0xf2>
		cfg = find_cf_cfg(NULL);
   1c726:	f7ff fa81 	bl	1bc2c <find_cf_cfg>
		if (!cfg) {
   1c72a:	4604      	mov	r4, r0
   1c72c:	b990      	cbnz	r0, 1c754 <cf_set+0xe4>
			LOG_ERR("Unable to restore CF: no cfg left");
   1c72e:	466c      	mov	r4, sp
   1c730:	b088      	sub	sp, #32
   1c732:	466a      	mov	r2, sp
   1c734:	4b3b      	ldr	r3, [pc, #236]	; (1c824 <cf_set+0x1b4>)
   1c736:	6153      	str	r3, [r2, #20]
   1c738:	4b35      	ldr	r3, [pc, #212]	; (1c810 <cf_set+0x1a0>)
   1c73a:	6193      	str	r3, [r2, #24]
   1c73c:	2303      	movs	r3, #3
   1c73e:	f842 3f10 	str.w	r3, [r2, #16]!
   1c742:	4834      	ldr	r0, [pc, #208]	; (1c814 <cf_set+0x1a4>)
   1c744:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c748:	f010 fe66 	bl	2d418 <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1c74c:	f06f 050b 	mvn.w	r5, #11
   1c750:	46a5      	mov	sp, r4
   1c752:	e7c3      	b.n	1c6dc <cf_set+0x6c>
		cfg->id = id;
   1c754:	2300      	movs	r3, #0
   1c756:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1c75a:	f107 0108 	add.w	r1, r7, #8
   1c75e:	f010 fe06 	bl	2d36e <bt_addr_le_copy>
	if (len_rd) {
   1c762:	f1b9 0f00 	cmp.w	r9, #0
   1c766:	d04c      	beq.n	1c802 <cf_set+0x192>
		len = read_cb(cb_arg, dst, sizeof(dst));
   1c768:	2202      	movs	r2, #2
   1c76a:	4639      	mov	r1, r7
   1c76c:	4640      	mov	r0, r8
   1c76e:	47b0      	blx	r6
		if (len < 0) {
   1c770:	1e06      	subs	r6, r0, #0
   1c772:	da12      	bge.n	1c79a <cf_set+0x12a>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1c774:	466c      	mov	r4, sp
   1c776:	b088      	sub	sp, #32
   1c778:	466a      	mov	r2, sp
   1c77a:	4b2b      	ldr	r3, [pc, #172]	; (1c828 <cf_set+0x1b8>)
   1c77c:	6153      	str	r3, [r2, #20]
   1c77e:	4b24      	ldr	r3, [pc, #144]	; (1c810 <cf_set+0x1a0>)
   1c780:	4824      	ldr	r0, [pc, #144]	; (1c814 <cf_set+0x1a4>)
   1c782:	e9c2 3606 	strd	r3, r6, [r2, #24]
   1c786:	2304      	movs	r3, #4
   1c788:	f842 3f10 	str.w	r3, [r2, #16]!
   1c78c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c790:	f010 fe42 	bl	2d418 <z_log_msg_static_create.constprop.0>
			return len;
   1c794:	4635      	mov	r5, r6
   1c796:	46a5      	mov	sp, r4
   1c798:	e7a0      	b.n	1c6dc <cf_set+0x6c>
		memcpy(cfg->data, dst, sizeof(cfg->data));
   1c79a:	2201      	movs	r2, #1
   1c79c:	4639      	mov	r1, r7
   1c79e:	f104 0008 	add.w	r0, r4, #8
   1c7a2:	f00f fa7d 	bl	2bca0 <memcpy>
		if (len != sizeof(dst)) {
   1c7a6:	2e02      	cmp	r6, #2
   1c7a8:	d014      	beq.n	1c7d4 <cf_set+0x164>
			LOG_WRN("Change-aware status not found in settings, "
   1c7aa:	466e      	mov	r6, sp
   1c7ac:	b088      	sub	sp, #32
   1c7ae:	466a      	mov	r2, sp
   1c7b0:	4b1e      	ldr	r3, [pc, #120]	; (1c82c <cf_set+0x1bc>)
   1c7b2:	6153      	str	r3, [r2, #20]
   1c7b4:	4b16      	ldr	r3, [pc, #88]	; (1c810 <cf_set+0x1a0>)
   1c7b6:	6193      	str	r3, [r2, #24]
   1c7b8:	2303      	movs	r3, #3
   1c7ba:	f842 3f10 	str.w	r3, [r2, #16]!
   1c7be:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
				LOG_WRN("Read back bad change-aware value: 0x%x, "
   1c7c2:	4814      	ldr	r0, [pc, #80]	; (1c814 <cf_set+0x1a4>)
   1c7c4:	f010 fe28 	bl	2d418 <z_log_msg_static_create.constprop.0>
				set_change_aware(cfg, false);
   1c7c8:	2100      	movs	r1, #0
   1c7ca:	46b5      	mov	sp, r6
   1c7cc:	4620      	mov	r0, r4
   1c7ce:	f010 ff68 	bl	2d6a2 <set_change_aware>
   1c7d2:	e783      	b.n	1c6dc <cf_set+0x6c>
			uint8_t change_aware = dst[sizeof(cfg->data)];
   1c7d4:	7879      	ldrb	r1, [r7, #1]
			if (change_aware & ~BIT(CF_CHANGE_AWARE)) {
   1c7d6:	2901      	cmp	r1, #1
   1c7d8:	d90d      	bls.n	1c7f6 <cf_set+0x186>
				LOG_WRN("Read back bad change-aware value: 0x%x, "
   1c7da:	466e      	mov	r6, sp
   1c7dc:	b088      	sub	sp, #32
   1c7de:	466a      	mov	r2, sp
   1c7e0:	4b13      	ldr	r3, [pc, #76]	; (1c830 <cf_set+0x1c0>)
   1c7e2:	6153      	str	r3, [r2, #20]
   1c7e4:	4b0a      	ldr	r3, [pc, #40]	; (1c810 <cf_set+0x1a0>)
   1c7e6:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1c7ea:	2304      	movs	r3, #4
   1c7ec:	f842 3f10 	str.w	r3, [r2, #16]!
   1c7f0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1c7f4:	e7e5      	b.n	1c7c2 <cf_set+0x152>
				set_change_aware_no_store(cfg, change_aware);
   1c7f6:	f001 0101 	and.w	r1, r1, #1
   1c7fa:	4620      	mov	r0, r4
   1c7fc:	f010 ff41 	bl	2d682 <set_change_aware_no_store>
   1c800:	e76c      	b.n	1c6dc <cf_set+0x6c>
		clear_cf_cfg(cfg);
   1c802:	4620      	mov	r0, r4
   1c804:	f7ff fd1c 	bl	1c240 <clear_cf_cfg>
   1c808:	e768      	b.n	1c6dc <cf_set+0x6c>
   1c80a:	bf00      	nop
   1c80c:	00031e73 	.word	0x00031e73
   1c810:	00033c70 	.word	0x00033c70
   1c814:	0002fc04 	.word	0x0002fc04
   1c818:	00033736 	.word	0x00033736
   1c81c:	01000004 	.word	0x01000004
   1c820:	00033756 	.word	0x00033756
   1c824:	000338f9 	.word	0x000338f9
   1c828:	0003379b 	.word	0x0003379b
   1c82c:	0003391f 	.word	0x0003391f
   1c830:	00033977 	.word	0x00033977

0001c834 <bt_gatt_store_cf.isra.0>:
static int bt_gatt_store_cf(uint8_t id, const bt_addr_le_t *peer)
   1c834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c838:	b08c      	sub	sp, #48	; 0x30
   1c83a:	af02      	add	r7, sp, #8
   1c83c:	4605      	mov	r5, r0
   1c83e:	460e      	mov	r6, r1
	cfg = find_cf_cfg_by_addr(id, peer);
   1c840:	f7ff f924 	bl	1ba8c <find_cf_cfg_by_addr>
	if (!cfg) {
   1c844:	4604      	mov	r4, r0
   1c846:	2800      	cmp	r0, #0
   1c848:	d040      	beq.n	1c8cc <bt_gatt_store_cf.isra.0+0x98>
		str = (char *)cfg->data;
   1c84a:	f100 0808 	add.w	r8, r0, #8
		if (id) {
   1c84e:	b15d      	cbz	r5, 1c868 <bt_gatt_store_cf.isra.0+0x34>
			u8_to_dec(id_str, sizeof(id_str), id);
   1c850:	462a      	mov	r2, r5
   1c852:	2104      	movs	r1, #4
   1c854:	4638      	mov	r0, r7
   1c856:	f00c fdcb 	bl	293f0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1c85a:	4a1f      	ldr	r2, [pc, #124]	; (1c8d8 <bt_gatt_store_cf.isra.0+0xa4>)
   1c85c:	9700      	str	r7, [sp, #0]
   1c85e:	4633      	mov	r3, r6
   1c860:	2124      	movs	r1, #36	; 0x24
   1c862:	1d38      	adds	r0, r7, #4
   1c864:	f7f9 ff2c 	bl	166c0 <bt_settings_encode_key>
		memcpy(dst, str, len);
   1c868:	2201      	movs	r2, #1
   1c86a:	4641      	mov	r1, r8
   1c86c:	4638      	mov	r0, r7
   1c86e:	f00f fa17 	bl	2bca0 <memcpy>
   1c872:	f104 000c 	add.w	r0, r4, #12
   1c876:	f010 fd7d 	bl	2d374 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1c87a:	f000 0001 	and.w	r0, r0, #1
   1c87e:	7078      	strb	r0, [r7, #1]
	if (!cfg || !id) {
   1c880:	bb35      	cbnz	r5, 1c8d0 <bt_gatt_store_cf.isra.0+0x9c>
		len += CF_FLAGS_STORE_LEN;
   1c882:	2502      	movs	r5, #2
		str = dst;
   1c884:	463c      	mov	r4, r7
		bt_settings_encode_key(key, sizeof(key), "cf",
   1c886:	2300      	movs	r3, #0
   1c888:	9300      	str	r3, [sp, #0]
   1c88a:	4a13      	ldr	r2, [pc, #76]	; (1c8d8 <bt_gatt_store_cf.isra.0+0xa4>)
   1c88c:	4633      	mov	r3, r6
   1c88e:	2124      	movs	r1, #36	; 0x24
   1c890:	1d38      	adds	r0, r7, #4
   1c892:	f7f9 ff15 	bl	166c0 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1c896:	462a      	mov	r2, r5
   1c898:	4621      	mov	r1, r4
   1c89a:	1d38      	adds	r0, r7, #4
   1c89c:	f7f8 f8ce 	bl	14a3c <settings_save_one>
	if (err) {
   1c8a0:	b180      	cbz	r0, 1c8c4 <bt_gatt_store_cf.isra.0+0x90>
		LOG_ERR("Failed to store Client Features (err %d)", err);
   1c8a2:	466c      	mov	r4, sp
   1c8a4:	b088      	sub	sp, #32
   1c8a6:	aa02      	add	r2, sp, #8
   1c8a8:	4b0c      	ldr	r3, [pc, #48]	; (1c8dc <bt_gatt_store_cf.isra.0+0xa8>)
   1c8aa:	6153      	str	r3, [r2, #20]
   1c8ac:	4b0c      	ldr	r3, [pc, #48]	; (1c8e0 <bt_gatt_store_cf.isra.0+0xac>)
   1c8ae:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1c8b2:	2304      	movs	r3, #4
   1c8b4:	f842 3f10 	str.w	r3, [r2, #16]!
   1c8b8:	480a      	ldr	r0, [pc, #40]	; (1c8e4 <bt_gatt_store_cf.isra.0+0xb0>)
   1c8ba:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c8be:	f010 fdab 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1c8c2:	46a5      	mov	sp, r4
}
   1c8c4:	3728      	adds	r7, #40	; 0x28
   1c8c6:	46bd      	mov	sp, r7
   1c8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
   1c8cc:	4605      	mov	r5, r0
   1c8ce:	e7da      	b.n	1c886 <bt_gatt_store_cf.isra.0+0x52>
		len += CF_FLAGS_STORE_LEN;
   1c8d0:	2502      	movs	r5, #2
		str = dst;
   1c8d2:	463c      	mov	r4, r7
   1c8d4:	e7df      	b.n	1c896 <bt_gatt_store_cf.isra.0+0x62>
   1c8d6:	bf00      	nop
   1c8d8:	00033e35 	.word	0x00033e35
   1c8dc:	000339cc 	.word	0x000339cc
   1c8e0:	00033e15 	.word	0x00033e15
   1c8e4:	0002fc04 	.word	0x0002fc04

0001c8e8 <set_all_change_unaware>:
{
   1c8e8:	b510      	push	{r4, lr}
		if (!bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c8ea:	4c10      	ldr	r4, [pc, #64]	; (1c92c <set_all_change_unaware+0x44>)
   1c8ec:	4910      	ldr	r1, [pc, #64]	; (1c930 <set_all_change_unaware+0x48>)
   1c8ee:	4620      	mov	r0, r4
   1c8f0:	f010 fd0a 	bl	2d308 <bt_addr_le_eq>
   1c8f4:	4601      	mov	r1, r0
   1c8f6:	b938      	cbnz	r0, 1c908 <set_all_change_unaware+0x20>
			set_change_aware_no_store(cfg, false);
   1c8f8:	1e60      	subs	r0, r4, #1
   1c8fa:	f010 fec2 	bl	2d682 <set_change_aware_no_store>
			bt_gatt_store_cf(cfg->id, &cfg->peer);
   1c8fe:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1c902:	4621      	mov	r1, r4
   1c904:	f7ff ff96 	bl	1c834 <bt_gatt_store_cf.isra.0>
		if (!bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c908:	4909      	ldr	r1, [pc, #36]	; (1c930 <set_all_change_unaware+0x48>)
   1c90a:	480a      	ldr	r0, [pc, #40]	; (1c934 <set_all_change_unaware+0x4c>)
   1c90c:	f010 fcfc 	bl	2d308 <bt_addr_le_eq>
   1c910:	4601      	mov	r1, r0
   1c912:	b950      	cbnz	r0, 1c92a <set_all_change_unaware+0x42>
			set_change_aware_no_store(cfg, false);
   1c914:	4808      	ldr	r0, [pc, #32]	; (1c938 <set_all_change_unaware+0x50>)
   1c916:	f010 feb4 	bl	2d682 <set_change_aware_no_store>
			bt_gatt_store_cf(cfg->id, &cfg->peer);
   1c91a:	4b08      	ldr	r3, [pc, #32]	; (1c93c <set_all_change_unaware+0x54>)
}
   1c91c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			bt_gatt_store_cf(cfg->id, &cfg->peer);
   1c920:	7c18      	ldrb	r0, [r3, #16]
   1c922:	f103 0111 	add.w	r1, r3, #17
   1c926:	f7ff bf85 	b.w	1c834 <bt_gatt_store_cf.isra.0>
}
   1c92a:	bd10      	pop	{r4, pc}
   1c92c:	200034a5 	.word	0x200034a5
   1c930:	00031d70 	.word	0x00031d70
   1c934:	200034b5 	.word	0x200034b5
   1c938:	200034b4 	.word	0x200034b4
   1c93c:	200034a4 	.word	0x200034a4

0001c940 <bt_gatt_init>:
{
   1c940:	b510      	push	{r4, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c942:	481e      	ldr	r0, [pc, #120]	; (1c9bc <bt_gatt_init+0x7c>)
   1c944:	2101      	movs	r1, #1
   1c946:	f010 fcf4 	bl	2d332 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   1c94a:	07c3      	lsls	r3, r0, #31
   1c94c:	d435      	bmi.n	1c9ba <bt_gatt_init+0x7a>
   1c94e:	2102      	movs	r1, #2
   1c950:	481a      	ldr	r0, [pc, #104]	; (1c9bc <bt_gatt_init+0x7c>)
   1c952:	f010 fcee 	bl	2d332 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   1c956:	4008      	ands	r0, r1
   1c958:	d107      	bne.n	1c96a <bt_gatt_init+0x2a>
   1c95a:	4919      	ldr	r1, [pc, #100]	; (1c9c0 <bt_gatt_init+0x80>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c95c:	4a19      	ldr	r2, [pc, #100]	; (1c9c4 <bt_gatt_init+0x84>)
   1c95e:	880b      	ldrh	r3, [r1, #0]
   1c960:	4c19      	ldr	r4, [pc, #100]	; (1c9c8 <bt_gatt_init+0x88>)
   1c962:	42a2      	cmp	r2, r4
   1c964:	d323      	bcc.n	1c9ae <bt_gatt_init+0x6e>
   1c966:	b100      	cbz	r0, 1c96a <bt_gatt_init+0x2a>
   1c968:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1c96a:	4b18      	ldr	r3, [pc, #96]	; (1c9cc <bt_gatt_init+0x8c>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1c96c:	4918      	ldr	r1, [pc, #96]	; (1c9d0 <bt_gatt_init+0x90>)
   1c96e:	4819      	ldr	r0, [pc, #100]	; (1c9d4 <bt_gatt_init+0x94>)
   1c970:	2200      	movs	r2, #0
	list->tail = NULL;
   1c972:	e9c3 2200 	strd	r2, r2, [r3]
   1c976:	f012 fbf3 	bl	2f160 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1c97a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c97e:	2300      	movs	r3, #0
   1c980:	4814      	ldr	r0, [pc, #80]	; (1c9d4 <bt_gatt_init+0x94>)
   1c982:	f7f9 ff6b 	bl	1685c <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1c986:	4914      	ldr	r1, [pc, #80]	; (1c9d8 <bt_gatt_init+0x98>)
   1c988:	4814      	ldr	r0, [pc, #80]	; (1c9dc <bt_gatt_init+0x9c>)
   1c98a:	f012 fbe9 	bl	2f160 <k_work_init_delayable>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c98e:	2102      	movs	r1, #2
   1c990:	4813      	ldr	r0, [pc, #76]	; (1c9e0 <bt_gatt_init+0xa0>)
   1c992:	f010 fcce 	bl	2d332 <atomic_or>
	k_work_init_delayable(&gatt_delayed_store.work, delayed_store);
   1c996:	4913      	ldr	r1, [pc, #76]	; (1c9e4 <bt_gatt_init+0xa4>)
   1c998:	4813      	ldr	r0, [pc, #76]	; (1c9e8 <bt_gatt_init+0xa8>)
   1c99a:	f012 fbe1 	bl	2f160 <k_work_init_delayable>
	bt_conn_auth_info_cb_register(&gatt_conn_auth_info_cb);
   1c99e:	4813      	ldr	r0, [pc, #76]	; (1c9ec <bt_gatt_init+0xac>)
   1c9a0:	f7fd fcde 	bl	1a360 <bt_conn_auth_info_cb_register>
}
   1c9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_cb_register(&gatt_conn_cb);
   1c9a8:	4811      	ldr	r0, [pc, #68]	; (1c9f0 <bt_gatt_init+0xb0>)
   1c9aa:	f7fd ba03 	b.w	19db4 <bt_conn_cb_register>
		last_static_handle += svc->attr_count;
   1c9ae:	6850      	ldr	r0, [r2, #4]
   1c9b0:	4403      	add	r3, r0
   1c9b2:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c9b4:	3208      	adds	r2, #8
   1c9b6:	2001      	movs	r0, #1
   1c9b8:	e7d3      	b.n	1c962 <bt_gatt_init+0x22>
}
   1c9ba:	bd10      	pop	{r4, pc}
   1c9bc:	200034c4 	.word	0x200034c4
   1c9c0:	20004328 	.word	0x20004328
   1c9c4:	0002fbbc 	.word	0x0002fbbc
   1c9c8:	0002fbcc 	.word	0x0002fbcc
   1c9cc:	200034c8 	.word	0x200034c8
   1c9d0:	0002d7b7 	.word	0x0002d7b7
   1c9d4:	200021c8 	.word	0x200021c8
   1c9d8:	0001d051 	.word	0x0001d051
   1c9dc:	20002240 	.word	0x20002240
   1c9e0:	20002270 	.word	0x20002270
   1c9e4:	0002db23 	.word	0x0002db23
   1c9e8:	20002178 	.word	0x20002178
   1c9ec:	200005fc 	.word	0x200005fc
   1c9f0:	200005e0 	.word	0x200005e0

0001c9f4 <bt_gatt_attr_get_handle>:
{
   1c9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1c9f8:	4603      	mov	r3, r0
   1c9fa:	b148      	cbz	r0, 1ca10 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   1c9fc:	8a00      	ldrh	r0, [r0, #16]
   1c9fe:	b938      	cbnz	r0, 1ca10 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ca00:	4912      	ldr	r1, [pc, #72]	; (1ca4c <bt_gatt_attr_get_handle+0x58>)
   1ca02:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1ca50 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1ca06:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1ca08:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ca0c:	4571      	cmp	r1, lr
   1ca0e:	d301      	bcc.n	1ca14 <bt_gatt_attr_get_handle+0x20>
}
   1ca10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1ca14:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1ca18:	42bb      	cmp	r3, r7
   1ca1a:	d304      	bcc.n	1ca26 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1ca1c:	fb0c 7206 	mla	r2, ip, r6, r7
   1ca20:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1ca22:	4293      	cmp	r3, r2
   1ca24:	d90e      	bls.n	1ca44 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1ca26:	4434      	add	r4, r6
   1ca28:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ca2a:	3108      	adds	r1, #8
   1ca2c:	4614      	mov	r4, r2
   1ca2e:	e7ed      	b.n	1ca0c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1ca30:	fb0c 7805 	mla	r8, ip, r5, r7
   1ca34:	4543      	cmp	r3, r8
   1ca36:	d007      	beq.n	1ca48 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1ca38:	3501      	adds	r5, #1
   1ca3a:	1962      	adds	r2, r4, r5
   1ca3c:	42b5      	cmp	r5, r6
   1ca3e:	b292      	uxth	r2, r2
   1ca40:	d1f6      	bne.n	1ca30 <bt_gatt_attr_get_handle+0x3c>
   1ca42:	e7f2      	b.n	1ca2a <bt_gatt_attr_get_handle+0x36>
   1ca44:	2500      	movs	r5, #0
   1ca46:	e7f8      	b.n	1ca3a <bt_gatt_attr_get_handle+0x46>
   1ca48:	4610      	mov	r0, r2
   1ca4a:	e7e1      	b.n	1ca10 <bt_gatt_attr_get_handle+0x1c>
   1ca4c:	0002fbbc 	.word	0x0002fbbc
   1ca50:	0002fbcc 	.word	0x0002fbcc

0001ca54 <bt_gatt_foreach_attr_type>:
{
   1ca54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca58:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1ca5c:	9100      	str	r1, [sp, #0]
   1ca5e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1ca60:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ca64:	2d00      	cmp	r5, #0
   1ca66:	bf08      	it	eq
   1ca68:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1ca6a:	4b24      	ldr	r3, [pc, #144]	; (1cafc <bt_gatt_foreach_attr_type+0xa8>)
   1ca6c:	881b      	ldrh	r3, [r3, #0]
   1ca6e:	4283      	cmp	r3, r0
{
   1ca70:	4607      	mov	r7, r0
   1ca72:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1ca74:	d23c      	bcs.n	1caf0 <bt_gatt_foreach_attr_type+0x9c>
}
   1ca76:	b003      	add	sp, #12
   1ca78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1ca7c:	6873      	ldr	r3, [r6, #4]
   1ca7e:	4423      	add	r3, r4
   1ca80:	42bb      	cmp	r3, r7
   1ca82:	d232      	bcs.n	1caea <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   1ca84:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ca86:	3608      	adds	r6, #8
   1ca88:	4b1d      	ldr	r3, [pc, #116]	; (1cb00 <bt_gatt_foreach_attr_type+0xac>)
   1ca8a:	429e      	cmp	r6, r3
   1ca8c:	d3f6      	bcc.n	1ca7c <bt_gatt_foreach_attr_type+0x28>
   1ca8e:	e7f2      	b.n	1ca76 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1ca90:	5889      	ldr	r1, [r1, r2]
   1ca92:	9301      	str	r3, [sp, #4]
   1ca94:	4640      	mov	r0, r8
   1ca96:	f00f f9c2 	bl	2be1e <bt_uuid_cmp>
   1ca9a:	9b01      	ldr	r3, [sp, #4]
   1ca9c:	b190      	cbz	r0, 1cac4 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1ca9e:	3401      	adds	r4, #1
   1caa0:	f10a 0a01 	add.w	sl, sl, #1
   1caa4:	b2a4      	uxth	r4, r4
   1caa6:	6873      	ldr	r3, [r6, #4]
   1caa8:	4553      	cmp	r3, sl
   1caaa:	d9ec      	bls.n	1ca86 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1caac:	9b00      	ldr	r3, [sp, #0]
   1caae:	429c      	cmp	r4, r3
   1cab0:	d8e1      	bhi.n	1ca76 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1cab2:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1cab4:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   1cab6:	d3f2      	bcc.n	1ca9e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1cab8:	fb0b f20a 	mul.w	r2, fp, sl
   1cabc:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1cabe:	f1b8 0f00 	cmp.w	r8, #0
   1cac2:	d1e5      	bne.n	1ca90 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   1cac4:	f1b9 0f00 	cmp.w	r9, #0
   1cac8:	d10b      	bne.n	1cae2 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1caca:	3d01      	subs	r5, #1
   1cacc:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1cace:	4618      	mov	r0, r3
   1cad0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1cad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1cad4:	4621      	mov	r1, r4
   1cad6:	4798      	blx	r3
	if (!*num_matches) {
   1cad8:	2d00      	cmp	r5, #0
   1cada:	d0cc      	beq.n	1ca76 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1cadc:	2800      	cmp	r0, #0
   1cade:	d1de      	bne.n	1ca9e <bt_gatt_foreach_attr_type+0x4a>
   1cae0:	e7c9      	b.n	1ca76 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1cae2:	68da      	ldr	r2, [r3, #12]
   1cae4:	4591      	cmp	r9, r2
   1cae6:	d1da      	bne.n	1ca9e <bt_gatt_foreach_attr_type+0x4a>
   1cae8:	e7ef      	b.n	1caca <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1caea:	f04f 0a00 	mov.w	sl, #0
   1caee:	e7da      	b.n	1caa6 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1caf0:	4e04      	ldr	r6, [pc, #16]	; (1cb04 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   1caf2:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1caf4:	f04f 0b14 	mov.w	fp, #20
   1caf8:	e7c6      	b.n	1ca88 <bt_gatt_foreach_attr_type+0x34>
   1cafa:	bf00      	nop
   1cafc:	20004328 	.word	0x20004328
   1cb00:	0002fbcc 	.word	0x0002fbcc
   1cb04:	0002fbbc 	.word	0x0002fbbc

0001cb08 <db_hash_gen>:
{
   1cb08:	b590      	push	{r4, r7, lr}
   1cb0a:	b0c9      	sub	sp, #292	; 0x124
   1cb0c:	af00      	add	r7, sp, #0
	uint8_t key[16] = {};
   1cb0e:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1cb10:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1cb14:	4639      	mov	r1, r7
   1cb16:	f107 0010 	add.w	r0, r7, #16
	uint8_t key[16] = {};
   1cb1a:	e9c7 4400 	strd	r4, r4, [r7]
   1cb1e:	e9c7 4402 	strd	r4, r4, [r7, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1cb22:	f00e fee5 	bl	2b8f0 <tc_cmac_setup>
   1cb26:	b998      	cbnz	r0, 1cb50 <db_hash_gen+0x48>
		LOG_ERR("Unable to setup AES CMAC");
   1cb28:	466c      	mov	r4, sp
   1cb2a:	b088      	sub	sp, #32
   1cb2c:	466a      	mov	r2, sp
   1cb2e:	4b1a      	ldr	r3, [pc, #104]	; (1cb98 <db_hash_gen+0x90>)
		LOG_ERR("Unable to calculate hash");
   1cb30:	6153      	str	r3, [r2, #20]
   1cb32:	4b1a      	ldr	r3, [pc, #104]	; (1cb9c <db_hash_gen+0x94>)
   1cb34:	6193      	str	r3, [r2, #24]
   1cb36:	2303      	movs	r3, #3
   1cb38:	f842 3f10 	str.w	r3, [r2, #16]!
   1cb3c:	4818      	ldr	r0, [pc, #96]	; (1cba0 <db_hash_gen+0x98>)
   1cb3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cb42:	f010 fc69 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1cb46:	46a5      	mov	sp, r4
}
   1cb48:	f507 7792 	add.w	r7, r7, #292	; 0x124
   1cb4c:	46bd      	mov	sp, r7
   1cb4e:	bd90      	pop	{r4, r7, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1cb50:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cb54:	2001      	movs	r0, #1
   1cb56:	4a13      	ldr	r2, [pc, #76]	; (1cba4 <db_hash_gen+0x9c>)
   1cb58:	f107 0310 	add.w	r3, r7, #16
   1cb5c:	f010 fe20 	bl	2d7a0 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1cb60:	4811      	ldr	r0, [pc, #68]	; (1cba8 <db_hash_gen+0xa0>)
   1cb62:	f107 0110 	add.w	r1, r7, #16
   1cb66:	f00e ff58 	bl	2ba1a <tc_cmac_final>
   1cb6a:	b920      	cbnz	r0, 1cb76 <db_hash_gen+0x6e>
		LOG_ERR("Unable to calculate hash");
   1cb6c:	466c      	mov	r4, sp
   1cb6e:	b088      	sub	sp, #32
   1cb70:	466a      	mov	r2, sp
   1cb72:	4b0e      	ldr	r3, [pc, #56]	; (1cbac <db_hash_gen+0xa4>)
   1cb74:	e7dc      	b.n	1cb30 <db_hash_gen+0x28>
   1cb76:	4b0c      	ldr	r3, [pc, #48]	; (1cba8 <db_hash_gen+0xa0>)
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1cb78:	4621      	mov	r1, r4
   1cb7a:	f103 0210 	add.w	r2, r3, #16
   1cb7e:	3101      	adds	r1, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   1cb80:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1cb82:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1cb86:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1cb8a:	2908      	cmp	r1, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1cb8c:	7010      	strb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1cb8e:	d1f6      	bne.n	1cb7e <db_hash_gen+0x76>
   1cb90:	4807      	ldr	r0, [pc, #28]	; (1cbb0 <db_hash_gen+0xa8>)
   1cb92:	f010 fbce 	bl	2d332 <atomic_or>
   1cb96:	e7d7      	b.n	1cb48 <db_hash_gen+0x40>
   1cb98:	000339f9 	.word	0x000339f9
   1cb9c:	00033e26 	.word	0x00033e26
   1cba0:	0002fc04 	.word	0x0002fc04
   1cba4:	0002d263 	.word	0x0002d263
   1cba8:	200021a8 	.word	0x200021a8
   1cbac:	00033a16 	.word	0x00033a16
   1cbb0:	20002270 	.word	0x20002270

0001cbb4 <db_hash_read>:
{
   1cbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1cbb6:	491c      	ldr	r1, [pc, #112]	; (1cc28 <db_hash_read+0x74>)
{
   1cbb8:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1cbbc:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1cbbe:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1cbc2:	4615      	mov	r5, r2
   1cbc4:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1cbc6:	f012 faed 	bl	2f1a4 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1cbca:	4818      	ldr	r0, [pc, #96]	; (1cc2c <db_hash_read+0x78>)
   1cbcc:	f010 fbd2 	bl	2d374 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1cbd0:	0701      	lsls	r1, r0, #28
   1cbd2:	d405      	bmi.n	1cbe0 <db_hash_read+0x2c>
		db_hash_gen();
   1cbd4:	f7ff ff98 	bl	1cb08 <db_hash_gen>
			set_all_change_unaware();
   1cbd8:	f7ff fe86 	bl	1c8e8 <set_all_change_unaware>
			db_hash_store();
   1cbdc:	f7ff fa7e 	bl	1c0dc <db_hash_store>
	cfg = find_cf_cfg(conn);
   1cbe0:	4620      	mov	r0, r4
   1cbe2:	f7ff f823 	bl	1bc2c <find_cf_cfg>
	if (cfg &&
   1cbe6:	b168      	cbz	r0, 1cc04 <db_hash_read+0x50>
   1cbe8:	7a03      	ldrb	r3, [r0, #8]
   1cbea:	07da      	lsls	r2, r3, #31
   1cbec:	d50a      	bpl.n	1cc04 <db_hash_read+0x50>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1cbee:	f100 040c 	add.w	r4, r0, #12
   1cbf2:	4620      	mov	r0, r4
   1cbf4:	f010 fbbe 	bl	2d374 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1cbf8:	07c3      	lsls	r3, r0, #31
   1cbfa:	d403      	bmi.n	1cc04 <db_hash_read+0x50>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1cbfc:	2102      	movs	r1, #2
   1cbfe:	4620      	mov	r0, r4
   1cc00:	f010 fb97 	bl	2d332 <atomic_or>
	if (offset > value_len) {
   1cc04:	2e10      	cmp	r6, #16
   1cc06:	d80c      	bhi.n	1cc22 <db_hash_read+0x6e>
	len = MIN(buf_len, value_len - offset);
   1cc08:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1cc0c:	4908      	ldr	r1, [pc, #32]	; (1cc30 <db_hash_read+0x7c>)
	len = MIN(buf_len, value_len - offset);
   1cc0e:	42bc      	cmp	r4, r7
   1cc10:	bfa8      	it	ge
   1cc12:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1cc14:	4622      	mov	r2, r4
   1cc16:	4431      	add	r1, r6
   1cc18:	4628      	mov	r0, r5
   1cc1a:	f00f f841 	bl	2bca0 <memcpy>
}
   1cc1e:	4620      	mov	r0, r4
   1cc20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cc22:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1cc26:	e7fa      	b.n	1cc1e <db_hash_read+0x6a>
   1cc28:	200021f8 	.word	0x200021f8
   1cc2c:	20002270 	.word	0x20002270
   1cc30:	200021a8 	.word	0x200021a8

0001cc34 <do_db_hash>:
{
   1cc34:	b510      	push	{r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1cc36:	481a      	ldr	r0, [pc, #104]	; (1cca0 <do_db_hash+0x6c>)
   1cc38:	f010 fb9c 	bl	2d374 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1cc3c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	if (new_hash) {
   1cc40:	f080 0401 	eor.w	r4, r0, #1
   1cc44:	b908      	cbnz	r0, 1cc4a <do_db_hash+0x16>
		db_hash_gen();
   1cc46:	f7ff ff5f 	bl	1cb08 <db_hash_gen>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1cc4a:	4815      	ldr	r0, [pc, #84]	; (1cca0 <do_db_hash+0x6c>)
   1cc4c:	f010 fb92 	bl	2d374 <atomic_get>
   1cc50:	4603      	mov	r3, r0
   1cc52:	4813      	ldr	r0, [pc, #76]	; (1cca0 <do_db_hash+0x6c>)
   1cc54:	f010 fb8e 	bl	2d374 <atomic_get>
	if (!hash_loaded_from_settings) {
   1cc58:	06da      	lsls	r2, r3, #27
   1cc5a:	d51f      	bpl.n	1cc9c <do_db_hash+0x68>
	if (already_processed) {
   1cc5c:	0683      	lsls	r3, r0, #26
   1cc5e:	d506      	bpl.n	1cc6e <do_db_hash+0x3a>
		if (new_hash) {
   1cc60:	b1e4      	cbz	r4, 1cc9c <do_db_hash+0x68>
		set_all_change_unaware();
   1cc62:	f7ff fe41 	bl	1c8e8 <set_all_change_unaware>
}
   1cc66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   1cc6a:	f7ff ba37 	b.w	1c0dc <db_hash_store>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1cc6e:	2120      	movs	r1, #32
   1cc70:	480b      	ldr	r0, [pc, #44]	; (1cca0 <do_db_hash+0x6c>)
   1cc72:	f010 fb5e 	bl	2d332 <atomic_or>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1cc76:	490b      	ldr	r1, [pc, #44]	; (1cca4 <do_db_hash+0x70>)
   1cc78:	2210      	movs	r2, #16
   1cc7a:	1888      	adds	r0, r1, r2
   1cc7c:	f00e ffe9 	bl	2bc52 <memcmp>
   1cc80:	b948      	cbnz	r0, 1cc96 <do_db_hash+0x62>
			k_work_cancel_delayable(&gatt_sc.work);
   1cc82:	4809      	ldr	r0, [pc, #36]	; (1cca8 <do_db_hash+0x74>)
   1cc84:	f012 fa7a 	bl	2f17c <k_work_cancel_delayable>
}
   1cc88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1cc8c:	4804      	ldr	r0, [pc, #16]	; (1cca0 <do_db_hash+0x6c>)
   1cc8e:	f06f 0101 	mvn.w	r1, #1
   1cc92:	f010 bb5d 	b.w	2d350 <atomic_and>
		sc_indicate(0x0001, 0xffff);
   1cc96:	f7ff fc3d 	bl	1c514 <sc_indicate.constprop.0>
   1cc9a:	e7e2      	b.n	1cc62 <do_db_hash+0x2e>
}
   1cc9c:	bd10      	pop	{r4, pc}
   1cc9e:	bf00      	nop
   1cca0:	20002270 	.word	0x20002270
   1cca4:	200021a8 	.word	0x200021a8
   1cca8:	20002240 	.word	0x20002240

0001ccac <db_hash_commit>:
{
   1ccac:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ccae:	2110      	movs	r1, #16
   1ccb0:	4803      	ldr	r0, [pc, #12]	; (1ccc0 <db_hash_commit+0x14>)
   1ccb2:	f010 fb3e 	bl	2d332 <atomic_or>
	do_db_hash();
   1ccb6:	f7ff ffbd 	bl	1cc34 <do_db_hash>
}
   1ccba:	2000      	movs	r0, #0
   1ccbc:	bd08      	pop	{r3, pc}
   1ccbe:	bf00      	nop
   1ccc0:	20002270 	.word	0x20002270

0001ccc4 <ccc_set_direct>:
{
   1ccc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ccc8:	b0b8      	sub	sp, #224	; 0xe0
   1ccca:	af00      	add	r7, sp, #0
   1cccc:	460c      	mov	r4, r1
   1ccce:	4690      	mov	r8, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1ccd0:	4943      	ldr	r1, [pc, #268]	; (1cde0 <ccc_set_direct+0x11c>)
   1ccd2:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
   1ccd6:	463a      	mov	r2, r7
{
   1ccd8:	4699      	mov	r9, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1ccda:	f00d fcd5 	bl	2a688 <settings_name_steq>
   1ccde:	b938      	cbnz	r0, 1ccf0 <ccc_set_direct+0x2c>
   1cce0:	f7ff f856 	bl	1bd90 <ccc_set_direct.part.0>
   1cce4:	4605      	mov	r5, r0
}
   1cce6:	4628      	mov	r0, r5
   1cce8:	37e0      	adds	r7, #224	; 0xe0
   1ccea:	46bd      	mov	sp, r7
   1ccec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1ccf0:	683e      	ldr	r6, [r7, #0]
		settings_name_next(name, &next);
   1ccf2:	1d39      	adds	r1, r7, #4
   1ccf4:	4630      	mov	r0, r6
   1ccf6:	f00d fceb 	bl	2a6d0 <settings_name_next>
		if (!name) {
   1ccfa:	b99e      	cbnz	r6, 1cd24 <ccc_set_direct+0x60>
			LOG_ERR("Insufficient number of arguments");
   1ccfc:	466c      	mov	r4, sp
   1ccfe:	b088      	sub	sp, #32
   1cd00:	466a      	mov	r2, sp
   1cd02:	4b38      	ldr	r3, [pc, #224]	; (1cde4 <ccc_set_direct+0x120>)
   1cd04:	6153      	str	r3, [r2, #20]
   1cd06:	4b38      	ldr	r3, [pc, #224]	; (1cde8 <ccc_set_direct+0x124>)
   1cd08:	6193      	str	r3, [r2, #24]
   1cd0a:	2303      	movs	r3, #3
   1cd0c:	f842 3f10 	str.w	r3, [r2, #16]!
   1cd10:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
				LOG_ERR("Invalid local identity %lu", next_id);
   1cd14:	4835      	ldr	r0, [pc, #212]	; (1cdec <ccc_set_direct+0x128>)
   1cd16:	f010 fb7f 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1cd1a:	46a5      	mov	sp, r4
			return -EINVAL;
   1cd1c:	f06f 0415 	mvn.w	r4, #21
   1cd20:	4625      	mov	r5, r4
   1cd22:	e7e0      	b.n	1cce6 <ccc_set_direct+0x22>
		} else if (!next) {
   1cd24:	6878      	ldr	r0, [r7, #4]
   1cd26:	b9d0      	cbnz	r0, 1cd5e <ccc_set_direct+0x9a>
		err = bt_settings_decode_key(name, &addr);
   1cd28:	f107 0a08 	add.w	sl, r7, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   1cd2c:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   1cd2e:	4651      	mov	r1, sl
   1cd30:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   1cd32:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   1cd34:	f00f f84f 	bl	2bdd6 <bt_settings_decode_key>
		if (err) {
   1cd38:	4605      	mov	r5, r0
   1cd3a:	b320      	cbz	r0, 1cd86 <ccc_set_direct+0xc2>
			LOG_ERR("Unable to decode address %s", name);
   1cd3c:	466c      	mov	r4, sp
   1cd3e:	b08a      	sub	sp, #40	; 0x28
   1cd40:	466a      	mov	r2, sp
   1cd42:	4b2b      	ldr	r3, [pc, #172]	; (1cdf0 <ccc_set_direct+0x12c>)
   1cd44:	6153      	str	r3, [r2, #20]
   1cd46:	4b28      	ldr	r3, [pc, #160]	; (1cde8 <ccc_set_direct+0x124>)
   1cd48:	e9c2 3606 	strd	r3, r6, [r2, #24]
   1cd4c:	f240 3301 	movw	r3, #769	; 0x301
   1cd50:	8413      	strh	r3, [r2, #32]
   1cd52:	4b28      	ldr	r3, [pc, #160]	; (1cdf4 <ccc_set_direct+0x130>)
   1cd54:	f842 3f10 	str.w	r3, [r2, #16]!
   1cd58:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1cd5c:	e7da      	b.n	1cd14 <ccc_set_direct+0x50>
			unsigned long next_id = strtoul(next, NULL, 10);
   1cd5e:	220a      	movs	r2, #10
   1cd60:	2100      	movs	r1, #0
   1cd62:	f00e fea5 	bl	2bab0 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1cd66:	2800      	cmp	r0, #0
   1cd68:	d0de      	beq.n	1cd28 <ccc_set_direct+0x64>
				LOG_ERR("Invalid local identity %lu", next_id);
   1cd6a:	466c      	mov	r4, sp
   1cd6c:	b088      	sub	sp, #32
   1cd6e:	466a      	mov	r2, sp
   1cd70:	4b21      	ldr	r3, [pc, #132]	; (1cdf8 <ccc_set_direct+0x134>)
   1cd72:	6153      	str	r3, [r2, #20]
   1cd74:	4b1c      	ldr	r3, [pc, #112]	; (1cde8 <ccc_set_direct+0x124>)
   1cd76:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1cd7a:	2304      	movs	r3, #4
   1cd7c:	f842 3f10 	str.w	r3, [r2, #16]!
   1cd80:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cd84:	e7c6      	b.n	1cd14 <ccc_set_direct+0x50>
		load.addr_with_id.addr = &addr;
   1cd86:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   1cd8a:	b334      	cbz	r4, 1cdda <ccc_set_direct+0x116>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1cd8c:	22c0      	movs	r2, #192	; 0xc0
   1cd8e:	f107 0120 	add.w	r1, r7, #32
   1cd92:	4648      	mov	r0, r9
   1cd94:	47c0      	blx	r8
			if (len < 0) {
   1cd96:	1e04      	subs	r4, r0, #0
   1cd98:	da11      	bge.n	1cdbe <ccc_set_direct+0xfa>
				LOG_ERR("Failed to decode value (err %zd)", len);
   1cd9a:	466d      	mov	r5, sp
   1cd9c:	b088      	sub	sp, #32
   1cd9e:	466a      	mov	r2, sp
   1cda0:	4b16      	ldr	r3, [pc, #88]	; (1cdfc <ccc_set_direct+0x138>)
   1cda2:	6153      	str	r3, [r2, #20]
   1cda4:	4b10      	ldr	r3, [pc, #64]	; (1cde8 <ccc_set_direct+0x124>)
   1cda6:	4811      	ldr	r0, [pc, #68]	; (1cdec <ccc_set_direct+0x128>)
   1cda8:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1cdac:	2304      	movs	r3, #4
   1cdae:	f842 3f10 	str.w	r3, [r2, #16]!
   1cdb2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cdb6:	f010 fb2f 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1cdba:	46ad      	mov	sp, r5
				return len;
   1cdbc:	e7b0      	b.n	1cd20 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
   1cdbe:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   1cdc0:	f107 0320 	add.w	r3, r7, #32
			load.count = len / sizeof(*ccc_store);
   1cdc4:	e9c7 3406 	strd	r3, r4, [r7, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1cdc8:	4a0d      	ldr	r2, [pc, #52]	; (1ce00 <ccc_set_direct+0x13c>)
   1cdca:	f107 0310 	add.w	r3, r7, #16
   1cdce:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cdd2:	2001      	movs	r0, #1
   1cdd4:	f010 fce4 	bl	2d7a0 <bt_gatt_foreach_attr>
	return 0;
   1cdd8:	e785      	b.n	1cce6 <ccc_set_direct+0x22>
   1cdda:	4623      	mov	r3, r4
   1cddc:	e7f2      	b.n	1cdc4 <ccc_set_direct+0x100>
   1cdde:	bf00      	nop
   1cde0:	00033a33 	.word	0x00033a33
   1cde4:	00031e73 	.word	0x00031e73
   1cde8:	00033c90 	.word	0x00033c90
   1cdec:	0002fc04 	.word	0x0002fc04
   1cdf0:	00033736 	.word	0x00033736
   1cdf4:	01000004 	.word	0x01000004
   1cdf8:	00033756 	.word	0x00033756
   1cdfc:	0003379b 	.word	0x0003379b
   1ce00:	0001bba1 	.word	0x0001bba1

0001ce04 <bt_gatt_attr_next>:
{
   1ce04:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1ce06:	2300      	movs	r3, #0
   1ce08:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1ce0a:	f7ff fdf3 	bl	1c9f4 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1ce0e:	1c41      	adds	r1, r0, #1
   1ce10:	b289      	uxth	r1, r1
   1ce12:	4608      	mov	r0, r1
   1ce14:	4a03      	ldr	r2, [pc, #12]	; (1ce24 <bt_gatt_attr_next+0x20>)
   1ce16:	ab01      	add	r3, sp, #4
   1ce18:	f010 fcc2 	bl	2d7a0 <bt_gatt_foreach_attr>
}
   1ce1c:	9801      	ldr	r0, [sp, #4]
   1ce1e:	b003      	add	sp, #12
   1ce20:	f85d fb04 	ldr.w	pc, [sp], #4
   1ce24:	0002d217 	.word	0x0002d217

0001ce28 <gatt_indicate>:
{
   1ce28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce2c:	4615      	mov	r5, r2
   1ce2e:	af00      	add	r7, sp, #0
   1ce30:	468a      	mov	sl, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1ce32:	2294      	movs	r2, #148	; 0x94
   1ce34:	6869      	ldr	r1, [r5, #4]
{
   1ce36:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1ce38:	f010 fcbf 	bl	2d7ba <bt_gatt_check_perm>
   1ce3c:	4681      	mov	r9, r0
   1ce3e:	b1a8      	cbz	r0, 1ce6c <gatt_indicate+0x44>
		LOG_WRN("Link is not encrypted");
   1ce40:	466c      	mov	r4, sp
   1ce42:	b088      	sub	sp, #32
   1ce44:	466a      	mov	r2, sp
   1ce46:	4b40      	ldr	r3, [pc, #256]	; (1cf48 <gatt_indicate+0x120>)
   1ce48:	6153      	str	r3, [r2, #20]
   1ce4a:	4b40      	ldr	r3, [pc, #256]	; (1cf4c <gatt_indicate+0x124>)
   1ce4c:	6193      	str	r3, [r2, #24]
   1ce4e:	2303      	movs	r3, #3
   1ce50:	f842 3f10 	str.w	r3, [r2, #16]!
   1ce54:	483e      	ldr	r0, [pc, #248]	; (1cf50 <gatt_indicate+0x128>)
   1ce56:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1ce5a:	f010 fadd 	bl	2d418 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1ce5e:	f04f 35ff 	mov.w	r5, #4294967295
   1ce62:	46a5      	mov	sp, r4
}
   1ce64:	4628      	mov	r0, r5
   1ce66:	46bd      	mov	sp, r7
   1ce68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1ce6c:	6869      	ldr	r1, [r5, #4]
   1ce6e:	2202      	movs	r2, #2
   1ce70:	4630      	mov	r0, r6
   1ce72:	f010 fcdc 	bl	2d82e <bt_gatt_is_subscribed>
   1ce76:	b990      	cbnz	r0, 1ce9e <gatt_indicate+0x76>
			LOG_WRN("Device is not subscribed to characteristic");
   1ce78:	466c      	mov	r4, sp
   1ce7a:	b088      	sub	sp, #32
   1ce7c:	466a      	mov	r2, sp
   1ce7e:	4b35      	ldr	r3, [pc, #212]	; (1cf54 <gatt_indicate+0x12c>)
   1ce80:	6153      	str	r3, [r2, #20]
   1ce82:	4b32      	ldr	r3, [pc, #200]	; (1cf4c <gatt_indicate+0x124>)
   1ce84:	6193      	str	r3, [r2, #24]
   1ce86:	2303      	movs	r3, #3
   1ce88:	f842 3f10 	str.w	r3, [r2, #16]!
   1ce8c:	4830      	ldr	r0, [pc, #192]	; (1cf50 <gatt_indicate+0x128>)
   1ce8e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1ce92:	f010 fac1 	bl	2d418 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1ce96:	f06f 0515 	mvn.w	r5, #21
   1ce9a:	46a5      	mov	sp, r4
   1ce9c:	e7e2      	b.n	1ce64 <gatt_indicate+0x3c>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1ce9e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1cea2:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1cea4:	f8b5 8014 	ldrh.w	r8, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1cea8:	f7fe fc80 	bl	1b7ac <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1ceac:	f108 0802 	add.w	r8, r8, #2
	if (!req) {
   1ceb0:	4604      	mov	r4, r0
   1ceb2:	b308      	cbz	r0, 1cef8 <gatt_indicate+0xd0>
	req->func = func;
   1ceb4:	4b28      	ldr	r3, [pc, #160]	; (1cf58 <gatt_indicate+0x130>)
	req->len = len;
   1ceb6:	f8c0 8014 	str.w	r8, [r0, #20]
	req->att_op = op;
   1ceba:	211d      	movs	r1, #29
   1cebc:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1cebe:	f8c0 900c 	str.w	r9, [r0, #12]
	req->func = func;
   1cec2:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1cec4:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1cec6:	4642      	mov	r2, r8
   1cec8:	4630      	mov	r0, r6
   1ceca:	f7fe f997 	bl	1b1fc <bt_att_create_pdu>
	if (!buf) {
   1cece:	4680      	mov	r8, r0
   1ced0:	b9a8      	cbnz	r0, 1cefe <gatt_indicate+0xd6>
		LOG_WRN("No buffer available to send indication");
   1ced2:	466d      	mov	r5, sp
   1ced4:	b088      	sub	sp, #32
   1ced6:	466a      	mov	r2, sp
   1ced8:	4b20      	ldr	r3, [pc, #128]	; (1cf5c <gatt_indicate+0x134>)
   1ceda:	6153      	str	r3, [r2, #20]
   1cedc:	4b1b      	ldr	r3, [pc, #108]	; (1cf4c <gatt_indicate+0x124>)
   1cede:	6193      	str	r3, [r2, #24]
   1cee0:	2303      	movs	r3, #3
   1cee2:	481b      	ldr	r0, [pc, #108]	; (1cf50 <gatt_indicate+0x128>)
   1cee4:	f842 3f10 	str.w	r3, [r2, #16]!
   1cee8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1ceec:	f010 fa94 	bl	2d418 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1cef0:	4620      	mov	r0, r4
   1cef2:	46ad      	mov	sp, r5
   1cef4:	f7fe fc7c 	bl	1b7f0 <bt_att_req_free>
		return -ENOMEM;
   1cef8:	f06f 050b 	mvn.w	r5, #11
   1cefc:	e7b2      	b.n	1ce64 <gatt_indicate+0x3c>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1cefe:	2301      	movs	r3, #1
   1cf00:	464a      	mov	r2, r9
   1cf02:	4649      	mov	r1, r9
	return net_buf_simple_add(&buf->b, len);
   1cf04:	f108 0b0c 	add.w	fp, r8, #12
   1cf08:	f010 f97e 	bl	2d208 <bt_att_set_tx_meta_data>
   1cf0c:	2102      	movs	r1, #2
   1cf0e:	4658      	mov	r0, fp
   1cf10:	f011 fa8f 	bl	2e432 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1cf14:	4681      	mov	r9, r0
   1cf16:	4658      	mov	r0, fp
   1cf18:	f829 ab02 	strh.w	sl, [r9], #2
   1cf1c:	8aa9      	ldrh	r1, [r5, #20]
   1cf1e:	f011 fa88 	bl	2e432 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1cf22:	8aaa      	ldrh	r2, [r5, #20]
   1cf24:	6929      	ldr	r1, [r5, #16]
   1cf26:	4648      	mov	r0, r9
   1cf28:	f00e feba 	bl	2bca0 <memcpy>
	req->buf = buf;
   1cf2c:	f8c4 8008 	str.w	r8, [r4, #8]
	err = bt_att_req_send(conn, req);
   1cf30:	4621      	mov	r1, r4
   1cf32:	4630      	mov	r0, r6
   1cf34:	f010 f91b 	bl	2d16e <bt_att_req_send>
	if (err) {
   1cf38:	4605      	mov	r5, r0
   1cf3a:	2800      	cmp	r0, #0
   1cf3c:	d092      	beq.n	1ce64 <gatt_indicate+0x3c>
		bt_att_req_free(req);
   1cf3e:	4620      	mov	r0, r4
   1cf40:	f7fe fc56 	bl	1b7f0 <bt_att_req_free>
   1cf44:	e78e      	b.n	1ce64 <gatt_indicate+0x3c>
   1cf46:	bf00      	nop
   1cf48:	00033a3a 	.word	0x00033a3a
   1cf4c:	00033da4 	.word	0x00033da4
   1cf50:	0002fc04 	.word	0x0002fc04
   1cf54:	00033a54 	.word	0x00033a54
   1cf58:	0002d231 	.word	0x0002d231
   1cf5c:	00033a83 	.word	0x00033a83

0001cf60 <bt_gatt_indicate>:
{
   1cf60:	b530      	push	{r4, r5, lr}
   1cf62:	4604      	mov	r4, r0
   1cf64:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1cf66:	4837      	ldr	r0, [pc, #220]	; (1d044 <bt_gatt_indicate+0xe4>)
   1cf68:	f010 fa04 	bl	2d374 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1cf6c:	0742      	lsls	r2, r0, #29
{
   1cf6e:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1cf70:	d561      	bpl.n	1d036 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1cf72:	b114      	cbz	r4, 1cf7a <bt_gatt_indicate+0x1a>
   1cf74:	7b63      	ldrb	r3, [r4, #13]
   1cf76:	2b07      	cmp	r3, #7
   1cf78:	d160      	bne.n	1d03c <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   1cf7a:	6868      	ldr	r0, [r5, #4]
   1cf7c:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1cf7e:	f7ff fd39 	bl	1c9f4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1cf82:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1cf84:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1cf88:	b33a      	cbz	r2, 1cfda <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1cf8a:	a905      	add	r1, sp, #20
   1cf8c:	9102      	str	r1, [sp, #8]
   1cf8e:	492e      	ldr	r1, [pc, #184]	; (1d048 <bt_gatt_indicate+0xe8>)
   1cf90:	9101      	str	r1, [sp, #4]
   1cf92:	2101      	movs	r1, #1
	found->attr = NULL;
   1cf94:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1cf96:	9100      	str	r1, [sp, #0]
   1cf98:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1cf9c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1cf9e:	f7ff fd59 	bl	1ca54 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1cfa2:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1cfa4:	b91b      	cbnz	r3, 1cfae <bt_gatt_indicate+0x4e>
			return -ENOENT;
   1cfa6:	f06f 0001 	mvn.w	r0, #1
}
   1cfaa:	b00b      	add	sp, #44	; 0x2c
   1cfac:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1cfae:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1cfb0:	9b05      	ldr	r3, [sp, #20]
   1cfb2:	6818      	ldr	r0, [r3, #0]
   1cfb4:	2300      	movs	r3, #0
   1cfb6:	f88d 3010 	strb.w	r3, [sp, #16]
   1cfba:	a904      	add	r1, sp, #16
   1cfbc:	f642 0303 	movw	r3, #10243	; 0x2803
   1cfc0:	f8ad 3012 	strh.w	r3, [sp, #18]
   1cfc4:	f00e ff2b 	bl	2be1e <bt_uuid_cmp>
   1cfc8:	b970      	cbnz	r0, 1cfe8 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1cfca:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1cfcc:	68c3      	ldr	r3, [r0, #12]
   1cfce:	799b      	ldrb	r3, [r3, #6]
   1cfd0:	069b      	lsls	r3, r3, #26
   1cfd2:	d405      	bmi.n	1cfe0 <bt_gatt_indicate+0x80>
			return -EINVAL;
   1cfd4:	f06f 0015 	mvn.w	r0, #21
   1cfd8:	e7e7      	b.n	1cfaa <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   1cfda:	2800      	cmp	r0, #0
   1cfdc:	d1e8      	bne.n	1cfb0 <bt_gatt_indicate+0x50>
   1cfde:	e7e2      	b.n	1cfa6 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1cfe0:	f010 fb90 	bl	2d704 <bt_gatt_attr_value_handle>
   1cfe4:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1cfe8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1cfec:	b13c      	cbz	r4, 1cffe <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1cfee:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1cff0:	4601      	mov	r1, r0
		params->_ref = 1;
   1cff2:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   1cff4:	462a      	mov	r2, r5
   1cff6:	4620      	mov	r0, r4
   1cff8:	f7ff ff16 	bl	1ce28 <gatt_indicate>
   1cffc:	e7d5      	b.n	1cfaa <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   1cffe:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d002:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1d004:	2302      	movs	r3, #2
   1d006:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1d00a:	f642 1302 	movw	r3, #10498	; 0x2902
   1d00e:	f8ad 3012 	strh.w	r3, [sp, #18]
   1d012:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1d014:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1d016:	9302      	str	r3, [sp, #8]
   1d018:	4b0c      	ldr	r3, [pc, #48]	; (1d04c <bt_gatt_indicate+0xec>)
   1d01a:	9301      	str	r3, [sp, #4]
   1d01c:	2301      	movs	r3, #1
   1d01e:	9300      	str	r3, [sp, #0]
   1d020:	aa04      	add	r2, sp, #16
   1d022:	4623      	mov	r3, r4
   1d024:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1d028:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1d02a:	f88d 4010 	strb.w	r4, [sp, #16]
   1d02e:	f7ff fd11 	bl	1ca54 <bt_gatt_foreach_attr_type>
	return data.err;
   1d032:	9807      	ldr	r0, [sp, #28]
   1d034:	e7b9      	b.n	1cfaa <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   1d036:	f06f 000a 	mvn.w	r0, #10
   1d03a:	e7b6      	b.n	1cfaa <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   1d03c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d040:	e7b3      	b.n	1cfaa <bt_gatt_indicate+0x4a>
   1d042:	bf00      	nop
   1d044:	2000045c 	.word	0x2000045c
   1d048:	0002d257 	.word	0x0002d257
   1d04c:	0001d2cd 	.word	0x0001d2cd

0001d050 <sc_process>:
{
   1d050:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1d052:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1d056:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1d058:	f850 3c08 	ldr.w	r3, [r0, #-8]
   1d05c:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1d05e:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d062:	f06f 0101 	mvn.w	r1, #1
   1d066:	4628      	mov	r0, r5
   1d068:	f010 f972 	bl	2d350 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1d06c:	4b0d      	ldr	r3, [pc, #52]	; (1d0a4 <sc_process+0x54>)
   1d06e:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1d072:	4b0d      	ldr	r3, [pc, #52]	; (1d0a8 <sc_process+0x58>)
   1d074:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1d078:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1d07a:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1d07c:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1d080:	2304      	movs	r3, #4
	sc->start = 0U;
   1d082:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1d086:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1d08a:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1d08e:	4631      	mov	r1, r6
   1d090:	f7ff ff66 	bl	1cf60 <bt_gatt_indicate>
   1d094:	b918      	cbnz	r0, 1d09e <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d096:	2102      	movs	r1, #2
   1d098:	4628      	mov	r0, r5
   1d09a:	f010 f94a 	bl	2d332 <atomic_or>
}
   1d09e:	b002      	add	sp, #8
   1d0a0:	bd70      	pop	{r4, r5, r6, pc}
   1d0a2:	bf00      	nop
   1d0a4:	0003040c 	.word	0x0003040c
   1d0a8:	0001c625 	.word	0x0001c625

0001d0ac <update_ccc>:
{
   1d0ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d0b0:	b083      	sub	sp, #12
	struct bt_conn *conn = data->conn;
   1d0b2:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d0b4:	4b3d      	ldr	r3, [pc, #244]	; (1d1ac <update_ccc+0x100>)
{
   1d0b6:	4690      	mov	r8, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d0b8:	6882      	ldr	r2, [r0, #8]
   1d0ba:	429a      	cmp	r2, r3
{
   1d0bc:	af00      	add	r7, sp, #0
   1d0be:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d0c0:	d134      	bne.n	1d12c <update_ccc+0x80>
	ccc = attr->user_data;
   1d0c2:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1d0c4:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1d0c6:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   1d0c8:	b383      	cbz	r3, 1d12c <update_ccc+0x80>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1d0ca:	7831      	ldrb	r1, [r6, #0]
   1d0cc:	4620      	mov	r0, r4
   1d0ce:	f00f fa46 	bl	2c55e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1d0d2:	b358      	cbz	r0, 1d12c <update_ccc+0x80>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1d0d4:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1d0d8:	4629      	mov	r1, r5
   1d0da:	4620      	mov	r0, r4
   1d0dc:	f010 fb6d 	bl	2d7ba <bt_gatt_check_perm>
		if (err) {
   1d0e0:	b348      	cbz	r0, 1d136 <update_ccc+0x8a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1d0e2:	2803      	cmp	r0, #3
   1d0e4:	d111      	bne.n	1d10a <update_ccc+0x5e>
				LOG_WRN("CCC %p not writable", attr);
   1d0e6:	466c      	mov	r4, sp
   1d0e8:	b088      	sub	sp, #32
   1d0ea:	466a      	mov	r2, sp
   1d0ec:	4b30      	ldr	r3, [pc, #192]	; (1d1b0 <update_ccc+0x104>)
   1d0ee:	6153      	str	r3, [r2, #20]
   1d0f0:	4b30      	ldr	r3, [pc, #192]	; (1d1b4 <update_ccc+0x108>)
   1d0f2:	e9c2 3506 	strd	r3, r5, [r2, #24]
   1d0f6:	2304      	movs	r3, #4
   1d0f8:	f842 3f10 	str.w	r3, [r2, #16]!
   1d0fc:	f44f 5102 	mov.w	r1, #8320	; 0x2080
		LOG_ERR("SC restore indication failed");
   1d100:	482d      	ldr	r0, [pc, #180]	; (1d1b8 <update_ccc+0x10c>)
   1d102:	f010 f989 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1d106:	46a5      	mov	sp, r4
   1d108:	e010      	b.n	1d12c <update_ccc+0x80>
			sec = BT_SECURITY_L2;
   1d10a:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1d10c:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   1d10e:	bf0c      	ite	eq
   1d110:	f04f 0903 	moveq.w	r9, #3
   1d114:	f04f 0902 	movne.w	r9, #2
			    bt_conn_get_security(conn) < sec) {
   1d118:	f00f f9fa 	bl	2c510 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1d11c:	4581      	cmp	r9, r0
   1d11e:	d90a      	bls.n	1d136 <update_ccc+0x8a>
				if (data->sec < sec) {
   1d120:	f898 3004 	ldrb.w	r3, [r8, #4]
   1d124:	454b      	cmp	r3, r9
   1d126:	d201      	bcs.n	1d12c <update_ccc+0x80>
					data->sec = sec;
   1d128:	f888 9004 	strb.w	r9, [r8, #4]
}
   1d12c:	2001      	movs	r0, #1
   1d12e:	370c      	adds	r7, #12
   1d130:	46bd      	mov	sp, r7
   1d132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		gatt_ccc_changed(attr, ccc);
   1d136:	4631      	mov	r1, r6
   1d138:	4628      	mov	r0, r5
   1d13a:	f010 f86f 	bl	2d21c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1d13e:	4b1f      	ldr	r3, [pc, #124]	; (1d1bc <update_ccc+0x110>)
   1d140:	429e      	cmp	r6, r3
   1d142:	d1f3      	bne.n	1d12c <update_ccc+0x80>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1d144:	7a20      	ldrb	r0, [r4, #8]
   1d146:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1d14a:	f7fe fce3 	bl	1bb14 <find_sc_cfg>
	if (!cfg) {
   1d14e:	2800      	cmp	r0, #0
   1d150:	d0ec      	beq.n	1d12c <update_ccc+0x80>
	if (!(cfg->data.start || cfg->data.end)) {
   1d152:	8902      	ldrh	r2, [r0, #8]
   1d154:	8943      	ldrh	r3, [r0, #10]
   1d156:	ea52 0103 	orrs.w	r1, r2, r3
   1d15a:	d0e7      	beq.n	1d12c <update_ccc+0x80>
	index = bt_conn_index(conn);
   1d15c:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1d15e:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1d160:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   1d162:	f7fc fd35 	bl	19bd0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1d166:	4916      	ldr	r1, [pc, #88]	; (1d1c0 <update_ccc+0x114>)
   1d168:	4a16      	ldr	r2, [pc, #88]	; (1d1c4 <update_ccc+0x118>)
   1d16a:	2318      	movs	r3, #24
   1d16c:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1d170:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1d172:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1d174:	4a14      	ldr	r2, [pc, #80]	; (1d1c8 <update_ccc+0x11c>)
   1d176:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1d178:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1d17c:	1d3a      	adds	r2, r7, #4
   1d17e:	611a      	str	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1d180:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1d184:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1d186:	4620      	mov	r0, r4
	sc_restore_params[index].len = sizeof(sc_range);
   1d188:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1d18a:	f7ff fee9 	bl	1cf60 <bt_gatt_indicate>
   1d18e:	2800      	cmp	r0, #0
   1d190:	d0cc      	beq.n	1d12c <update_ccc+0x80>
		LOG_ERR("SC restore indication failed");
   1d192:	466c      	mov	r4, sp
   1d194:	b088      	sub	sp, #32
   1d196:	466a      	mov	r2, sp
   1d198:	4b0c      	ldr	r3, [pc, #48]	; (1d1cc <update_ccc+0x120>)
   1d19a:	6153      	str	r3, [r2, #20]
   1d19c:	4b0c      	ldr	r3, [pc, #48]	; (1d1d0 <update_ccc+0x124>)
   1d19e:	6193      	str	r3, [r2, #24]
   1d1a0:	2303      	movs	r3, #3
   1d1a2:	f842 3f10 	str.w	r3, [r2, #16]!
   1d1a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d1aa:	e7a9      	b.n	1d100 <update_ccc+0x54>
   1d1ac:	0001c3f9 	.word	0x0001c3f9
   1d1b0:	00033aae 	.word	0x00033aae
   1d1b4:	00033cb2 	.word	0x00033cb2
   1d1b8:	0002fc04 	.word	0x0002fc04
   1d1bc:	20000624 	.word	0x20000624
   1d1c0:	2000348c 	.word	0x2000348c
   1d1c4:	0003040c 	.word	0x0003040c
   1d1c8:	0002d6bf 	.word	0x0002d6bf
   1d1cc:	00033ac6 	.word	0x00033ac6
   1d1d0:	00033ca7 	.word	0x00033ca7

0001d1d4 <gatt_notify>:
{
   1d1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d1d8:	4614      	mov	r4, r2
   1d1da:	af00      	add	r7, sp, #0
   1d1dc:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1d1de:	2294      	movs	r2, #148	; 0x94
   1d1e0:	6861      	ldr	r1, [r4, #4]
{
   1d1e2:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1d1e4:	f010 fae9 	bl	2d7ba <bt_gatt_check_perm>
   1d1e8:	b1a0      	cbz	r0, 1d214 <gatt_notify+0x40>
		LOG_WRN("Link is not encrypted");
   1d1ea:	466c      	mov	r4, sp
   1d1ec:	b088      	sub	sp, #32
   1d1ee:	466a      	mov	r2, sp
   1d1f0:	4b31      	ldr	r3, [pc, #196]	; (1d2b8 <gatt_notify+0xe4>)
   1d1f2:	6153      	str	r3, [r2, #20]
   1d1f4:	4b31      	ldr	r3, [pc, #196]	; (1d2bc <gatt_notify+0xe8>)
   1d1f6:	6193      	str	r3, [r2, #24]
   1d1f8:	2303      	movs	r3, #3
   1d1fa:	4831      	ldr	r0, [pc, #196]	; (1d2c0 <gatt_notify+0xec>)
   1d1fc:	f842 3f10 	str.w	r3, [r2, #16]!
   1d200:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1d204:	f010 f908 	bl	2d418 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1d208:	f04f 30ff 	mov.w	r0, #4294967295
   1d20c:	46a5      	mov	sp, r4
}
   1d20e:	46bd      	mov	sp, r7
   1d210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1d214:	6861      	ldr	r1, [r4, #4]
   1d216:	2201      	movs	r2, #1
   1d218:	4630      	mov	r0, r6
   1d21a:	f010 fb08 	bl	2d82e <bt_gatt_is_subscribed>
   1d21e:	b990      	cbnz	r0, 1d246 <gatt_notify+0x72>
			LOG_WRN("Device is not subscribed to characteristic");
   1d220:	466c      	mov	r4, sp
   1d222:	b088      	sub	sp, #32
   1d224:	466a      	mov	r2, sp
   1d226:	4b27      	ldr	r3, [pc, #156]	; (1d2c4 <gatt_notify+0xf0>)
   1d228:	6153      	str	r3, [r2, #20]
   1d22a:	4b24      	ldr	r3, [pc, #144]	; (1d2bc <gatt_notify+0xe8>)
   1d22c:	6193      	str	r3, [r2, #24]
   1d22e:	2303      	movs	r3, #3
   1d230:	4823      	ldr	r0, [pc, #140]	; (1d2c0 <gatt_notify+0xec>)
   1d232:	f842 3f10 	str.w	r3, [r2, #16]!
   1d236:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1d23a:	f010 f8ed 	bl	2d418 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1d23e:	f06f 0015 	mvn.w	r0, #21
   1d242:	46a5      	mov	sp, r4
   1d244:	e7e3      	b.n	1d20e <gatt_notify+0x3a>
				sizeof(*nfy) + params->len);
   1d246:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1d248:	211b      	movs	r1, #27
   1d24a:	3202      	adds	r2, #2
   1d24c:	4630      	mov	r0, r6
   1d24e:	f7fd ffd5 	bl	1b1fc <bt_att_create_pdu>
	if (!buf) {
   1d252:	4605      	mov	r5, r0
   1d254:	b990      	cbnz	r0, 1d27c <gatt_notify+0xa8>
		LOG_WRN("No buffer available to send notification");
   1d256:	466c      	mov	r4, sp
   1d258:	b088      	sub	sp, #32
   1d25a:	466a      	mov	r2, sp
   1d25c:	4b1a      	ldr	r3, [pc, #104]	; (1d2c8 <gatt_notify+0xf4>)
   1d25e:	6153      	str	r3, [r2, #20]
   1d260:	4b16      	ldr	r3, [pc, #88]	; (1d2bc <gatt_notify+0xe8>)
   1d262:	6193      	str	r3, [r2, #24]
   1d264:	2303      	movs	r3, #3
   1d266:	4816      	ldr	r0, [pc, #88]	; (1d2c0 <gatt_notify+0xec>)
   1d268:	f842 3f10 	str.w	r3, [r2, #16]!
   1d26c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1d270:	f010 f8d2 	bl	2d418 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1d274:	f06f 000b 	mvn.w	r0, #11
   1d278:	46a5      	mov	sp, r4
   1d27a:	e7c8      	b.n	1d20e <gatt_notify+0x3a>
   1d27c:	f100 0a0c 	add.w	sl, r0, #12
   1d280:	2102      	movs	r1, #2
   1d282:	4650      	mov	r0, sl
   1d284:	f011 f8d5 	bl	2e432 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1d288:	4680      	mov	r8, r0
   1d28a:	4650      	mov	r0, sl
   1d28c:	f828 9b02 	strh.w	r9, [r8], #2
   1d290:	89a1      	ldrh	r1, [r4, #12]
   1d292:	f011 f8ce 	bl	2e432 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1d296:	89a2      	ldrh	r2, [r4, #12]
   1d298:	68a1      	ldr	r1, [r4, #8]
   1d29a:	4640      	mov	r0, r8
   1d29c:	f00e fd00 	bl	2bca0 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1d2a0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1d2a4:	4628      	mov	r0, r5
   1d2a6:	2301      	movs	r3, #1
   1d2a8:	f00f ffae 	bl	2d208 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1d2ac:	4629      	mov	r1, r5
   1d2ae:	4630      	mov	r0, r6
   1d2b0:	f00f ff1f 	bl	2d0f2 <bt_att_send>
   1d2b4:	e7ab      	b.n	1d20e <gatt_notify+0x3a>
   1d2b6:	bf00      	nop
   1d2b8:	00033a3a 	.word	0x00033a3a
   1d2bc:	00033d98 	.word	0x00033d98
   1d2c0:	0002fc04 	.word	0x0002fc04
   1d2c4:	00033a54 	.word	0x00033a54
   1d2c8:	00033ae7 	.word	0x00033ae7

0001d2cc <notify_cb>:
{
   1d2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d2d0:	4b47      	ldr	r3, [pc, #284]	; (1d3f0 <notify_cb+0x124>)
{
   1d2d2:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d2d4:	6882      	ldr	r2, [r0, #8]
   1d2d6:	429a      	cmp	r2, r3
{
   1d2d8:	af00      	add	r7, sp, #0
   1d2da:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d2dc:	d005      	beq.n	1d2ea <notify_cb+0x1e>
		return BT_GATT_ITER_CONTINUE;
   1d2de:	f04f 0801 	mov.w	r8, #1
}
   1d2e2:	4640      	mov	r0, r8
   1d2e4:	46bd      	mov	sp, r7
   1d2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ccc = attr->user_data;
   1d2ea:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1d2ec:	4b41      	ldr	r3, [pc, #260]	; (1d3f4 <notify_cb+0x128>)
   1d2ee:	429e      	cmp	r6, r3
   1d2f0:	d011      	beq.n	1d316 <notify_cb+0x4a>
		if (cfg->value != data->type) {
   1d2f2:	8932      	ldrh	r2, [r6, #8]
   1d2f4:	89ab      	ldrh	r3, [r5, #12]
   1d2f6:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1d2f8:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   1d2fc:	d1ef      	bne.n	1d2de <notify_cb+0x12>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1d2fe:	7830      	ldrb	r0, [r6, #0]
   1d300:	f7fc fd7c 	bl	19dfc <bt_conn_lookup_addr_le>
		if (!conn) {
   1d304:	4604      	mov	r4, r0
   1d306:	2800      	cmp	r0, #0
   1d308:	d0e9      	beq.n	1d2de <notify_cb+0x12>
		if (conn->state != BT_CONN_CONNECTED) {
   1d30a:	7b43      	ldrb	r3, [r0, #13]
   1d30c:	2b07      	cmp	r3, #7
   1d30e:	d026      	beq.n	1d35e <notify_cb+0x92>
			bt_conn_unref(conn);
   1d310:	f00f f870 	bl	2c3f4 <bt_conn_unref>
			continue;
   1d314:	e7e3      	b.n	1d2de <notify_cb+0x12>
   1d316:	4c38      	ldr	r4, [pc, #224]	; (1d3f8 <notify_cb+0x12c>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d318:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1d3fc <notify_cb+0x130>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1d31c:	f04f 0900 	mov.w	r9, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d320:	4651      	mov	r1, sl
   1d322:	4620      	mov	r0, r4
   1d324:	f00f fff0 	bl	2d308 <bt_addr_le_eq>
   1d328:	b978      	cbnz	r0, 1d34a <notify_cb+0x7e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1d32a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1d32e:	2207      	movs	r2, #7
   1d330:	4621      	mov	r1, r4
   1d332:	f7fc fde1 	bl	19ef8 <bt_conn_lookup_state_le>
			if (!conn) {
   1d336:	b978      	cbnz	r0, 1d358 <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   1d338:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1d33a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1d33e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1d340:	4621      	mov	r1, r4
   1d342:	8853      	ldrh	r3, [r2, #2]
   1d344:	8812      	ldrh	r2, [r2, #0]
   1d346:	f7fe fe7f 	bl	1c048 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1d34a:	340c      	adds	r4, #12
   1d34c:	f1b9 0f00 	cmp.w	r9, #0
   1d350:	d1cf      	bne.n	1d2f2 <notify_cb+0x26>
   1d352:	f04f 0901 	mov.w	r9, #1
   1d356:	e7e3      	b.n	1d320 <notify_cb+0x54>
			bt_conn_unref(conn);
   1d358:	f00f f84c 	bl	2c3f4 <bt_conn_unref>
   1d35c:	e7f5      	b.n	1d34a <notify_cb+0x7e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1d35e:	6973      	ldr	r3, [r6, #20]
   1d360:	b123      	cbz	r3, 1d36c <notify_cb+0xa0>
   1d362:	4641      	mov	r1, r8
   1d364:	4798      	blx	r3
   1d366:	b908      	cbnz	r0, 1d36c <notify_cb+0xa0>
			bt_conn_unref(conn);
   1d368:	4620      	mov	r0, r4
   1d36a:	e7d1      	b.n	1d310 <notify_cb+0x44>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1d36c:	4641      	mov	r1, r8
   1d36e:	2294      	movs	r2, #148	; 0x94
   1d370:	4620      	mov	r0, r4
   1d372:	f010 fa22 	bl	2d7ba <bt_gatt_check_perm>
   1d376:	4680      	mov	r8, r0
   1d378:	b180      	cbz	r0, 1d39c <notify_cb+0xd0>
			LOG_WRN("Link is not encrypted");
   1d37a:	466d      	mov	r5, sp
   1d37c:	b088      	sub	sp, #32
   1d37e:	466a      	mov	r2, sp
   1d380:	4b1f      	ldr	r3, [pc, #124]	; (1d400 <notify_cb+0x134>)
   1d382:	6153      	str	r3, [r2, #20]
   1d384:	4b1f      	ldr	r3, [pc, #124]	; (1d404 <notify_cb+0x138>)
   1d386:	6193      	str	r3, [r2, #24]
   1d388:	2303      	movs	r3, #3
   1d38a:	f842 3f10 	str.w	r3, [r2, #16]!
   1d38e:	481e      	ldr	r0, [pc, #120]	; (1d408 <notify_cb+0x13c>)
   1d390:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1d394:	f010 f840 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1d398:	46ad      	mov	sp, r5
   1d39a:	e7e5      	b.n	1d368 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1d39c:	89ab      	ldrh	r3, [r5, #12]
   1d39e:	2b02      	cmp	r3, #2
   1d3a0:	d114      	bne.n	1d3cc <notify_cb+0x100>
   1d3a2:	8933      	ldrh	r3, [r6, #8]
   1d3a4:	079a      	lsls	r2, r3, #30
   1d3a6:	d405      	bmi.n	1d3b4 <notify_cb+0xe8>
		bt_conn_unref(conn);
   1d3a8:	4620      	mov	r0, r4
   1d3aa:	f00f f823 	bl	2c3f4 <bt_conn_unref>
		data->err = 0;
   1d3ae:	2300      	movs	r3, #0
   1d3b0:	60ab      	str	r3, [r5, #8]
   1d3b2:	e794      	b.n	1d2de <notify_cb+0x12>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1d3b4:	692a      	ldr	r2, [r5, #16]
   1d3b6:	88a9      	ldrh	r1, [r5, #4]
   1d3b8:	4620      	mov	r0, r4
   1d3ba:	f7ff fd35 	bl	1ce28 <gatt_indicate>
			if (err == 0) {
   1d3be:	4606      	mov	r6, r0
   1d3c0:	b978      	cbnz	r0, 1d3e2 <notify_cb+0x116>
				data->ind_params->_ref++;
   1d3c2:	692a      	ldr	r2, [r5, #16]
   1d3c4:	7d93      	ldrb	r3, [r2, #22]
   1d3c6:	3301      	adds	r3, #1
   1d3c8:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1d3ca:	e7ed      	b.n	1d3a8 <notify_cb+0xdc>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1d3cc:	2b01      	cmp	r3, #1
   1d3ce:	d1eb      	bne.n	1d3a8 <notify_cb+0xdc>
   1d3d0:	8933      	ldrh	r3, [r6, #8]
   1d3d2:	07db      	lsls	r3, r3, #31
   1d3d4:	d5e8      	bpl.n	1d3a8 <notify_cb+0xdc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1d3d6:	692a      	ldr	r2, [r5, #16]
   1d3d8:	88a9      	ldrh	r1, [r5, #4]
   1d3da:	4620      	mov	r0, r4
   1d3dc:	f7ff fefa 	bl	1d1d4 <gatt_notify>
   1d3e0:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   1d3e2:	4620      	mov	r0, r4
   1d3e4:	f00f f806 	bl	2c3f4 <bt_conn_unref>
		if (err < 0) {
   1d3e8:	2e00      	cmp	r6, #0
   1d3ea:	f6ff af7a 	blt.w	1d2e2 <notify_cb+0x16>
   1d3ee:	e7de      	b.n	1d3ae <notify_cb+0xe2>
   1d3f0:	0001c3f9 	.word	0x0001c3f9
   1d3f4:	20000624 	.word	0x20000624
   1d3f8:	20004311 	.word	0x20004311
   1d3fc:	00031d70 	.word	0x00031d70
   1d400:	00033a3a 	.word	0x00033a3a
   1d404:	00033db2 	.word	0x00033db2
   1d408:	0002fc04 	.word	0x0002fc04

0001d40c <bt_gatt_discover>:
{
   1d40c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d40e:	b087      	sub	sp, #28
	if (conn->state != BT_CONN_CONNECTED) {
   1d410:	7b43      	ldrb	r3, [r0, #13]
   1d412:	2b07      	cmp	r3, #7
{
   1d414:	af02      	add	r7, sp, #8
   1d416:	4605      	mov	r5, r0
   1d418:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1d41a:	f040 80a8 	bne.w	1d56e <bt_gatt_discover+0x162>
	switch (params->type) {
   1d41e:	7c0b      	ldrb	r3, [r1, #16]
   1d420:	2b06      	cmp	r3, #6
   1d422:	f200 809d 	bhi.w	1d560 <bt_gatt_discover+0x154>
   1d426:	e8df f003 	tbb	[pc, r3]
   1d42a:	0404      	.short	0x0404
   1d42c:	94665e5e 	.word	0x94665e5e
   1d430:	33          	.byte	0x33
   1d431:	00          	.byte	0x00
		if (params->uuid) {
   1d432:	680b      	ldr	r3, [r1, #0]
   1d434:	b323      	cbz	r3, 1d480 <bt_gatt_discover+0x74>
	switch (params->uuid->type) {
   1d436:	781b      	ldrb	r3, [r3, #0]
   1d438:	b19b      	cbz	r3, 1d462 <bt_gatt_discover+0x56>
   1d43a:	2b02      	cmp	r3, #2
   1d43c:	d01e      	beq.n	1d47c <bt_gatt_discover+0x70>
		LOG_ERR("Unknown UUID type %u", params->uuid->type);
   1d43e:	466c      	mov	r4, sp
   1d440:	b088      	sub	sp, #32
   1d442:	aa02      	add	r2, sp, #8
   1d444:	494b      	ldr	r1, [pc, #300]	; (1d574 <bt_gatt_discover+0x168>)
   1d446:	6151      	str	r1, [r2, #20]
   1d448:	494b      	ldr	r1, [pc, #300]	; (1d578 <bt_gatt_discover+0x16c>)
		LOG_ERR("Invalid discovery type: %u", params->type);
   1d44a:	484c      	ldr	r0, [pc, #304]	; (1d57c <bt_gatt_discover+0x170>)
	switch (params->type) {
   1d44c:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Invalid discovery type: %u", params->type);
   1d450:	2304      	movs	r3, #4
   1d452:	f842 3f10 	str.w	r3, [r2, #16]!
   1d456:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d45a:	f00f ffdd 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1d45e:	46a5      	mov	sp, r4
	return -EINVAL;
   1d460:	e054      	b.n	1d50c <bt_gatt_discover+0x100>
		len += BT_UUID_SIZE_16;
   1d462:	2308      	movs	r3, #8
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   1d464:	9301      	str	r3, [sp, #4]
   1d466:	2306      	movs	r3, #6
   1d468:	9300      	str	r3, [sp, #0]
   1d46a:	4945      	ldr	r1, [pc, #276]	; (1d580 <bt_gatt_discover+0x174>)
   1d46c:	4b45      	ldr	r3, [pc, #276]	; (1d584 <bt_gatt_discover+0x178>)
   1d46e:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   1d470:	4628      	mov	r0, r5
   1d472:	f010 f8b1 	bl	2d5d8 <gatt_req_send.constprop.0>
}
   1d476:	3714      	adds	r7, #20
   1d478:	46bd      	mov	sp, r7
   1d47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (params->uuid->type) {
   1d47c:	2316      	movs	r3, #22
   1d47e:	e7f1      	b.n	1d464 <bt_gatt_discover+0x58>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   1d480:	2310      	movs	r3, #16
   1d482:	2104      	movs	r1, #4
   1d484:	e9cd 3100 	strd	r3, r1, [sp]
   1d488:	4622      	mov	r2, r4
   1d48a:	4b3f      	ldr	r3, [pc, #252]	; (1d588 <bt_gatt_discover+0x17c>)
   1d48c:	493f      	ldr	r1, [pc, #252]	; (1d58c <bt_gatt_discover+0x180>)
   1d48e:	e7ef      	b.n	1d470 <bt_gatt_discover+0x64>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1d490:	6808      	ldr	r0, [r1, #0]
   1d492:	2800      	cmp	r0, #0
   1d494:	d03a      	beq.n	1d50c <bt_gatt_discover+0x100>
   1d496:	7806      	ldrb	r6, [r0, #0]
   1d498:	2e00      	cmp	r6, #0
   1d49a:	d137      	bne.n	1d50c <bt_gatt_discover+0x100>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1d49c:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   1d4a0:	703e      	strb	r6, [r7, #0]
   1d4a2:	807b      	strh	r3, [r7, #2]
   1d4a4:	4639      	mov	r1, r7
   1d4a6:	f00e fcba 	bl	2be1e <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1d4aa:	b1e0      	cbz	r0, 1d4e6 <bt_gatt_discover+0xda>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1d4ac:	f642 1302 	movw	r3, #10498	; 0x2902
   1d4b0:	6820      	ldr	r0, [r4, #0]
   1d4b2:	713e      	strb	r6, [r7, #4]
   1d4b4:	80fb      	strh	r3, [r7, #6]
   1d4b6:	1d39      	adds	r1, r7, #4
   1d4b8:	f00e fcb1 	bl	2be1e <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1d4bc:	b198      	cbz	r0, 1d4e6 <bt_gatt_discover+0xda>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1d4be:	f642 1303 	movw	r3, #10499	; 0x2903
   1d4c2:	6820      	ldr	r0, [r4, #0]
   1d4c4:	723e      	strb	r6, [r7, #8]
   1d4c6:	817b      	strh	r3, [r7, #10]
   1d4c8:	f107 0108 	add.w	r1, r7, #8
   1d4cc:	f00e fca7 	bl	2be1e <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1d4d0:	b148      	cbz	r0, 1d4e6 <bt_gatt_discover+0xda>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   1d4d2:	f642 1304 	movw	r3, #10500	; 0x2904
   1d4d6:	6820      	ldr	r0, [r4, #0]
   1d4d8:	733e      	strb	r6, [r7, #12]
   1d4da:	81fb      	strh	r3, [r7, #14]
   1d4dc:	f107 010c 	add.w	r1, r7, #12
   1d4e0:	f00e fc9d 	bl	2be1e <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1d4e4:	b990      	cbnz	r0, 1d50c <bt_gatt_discover+0x100>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   1d4e6:	2308      	movs	r3, #8
   1d4e8:	2204      	movs	r2, #4
   1d4ea:	e9cd 3200 	strd	r3, r2, [sp]
   1d4ee:	4928      	ldr	r1, [pc, #160]	; (1d590 <bt_gatt_discover+0x184>)
   1d4f0:	4b28      	ldr	r3, [pc, #160]	; (1d594 <bt_gatt_discover+0x188>)
   1d4f2:	4622      	mov	r2, r4
   1d4f4:	e7bc      	b.n	1d470 <bt_gatt_discover+0x64>
		if (params->uuid &&
   1d4f6:	6808      	ldr	r0, [r1, #0]
   1d4f8:	b358      	cbz	r0, 1d552 <bt_gatt_discover+0x146>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1d4fa:	2600      	movs	r6, #0
   1d4fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1d500:	703e      	strb	r6, [r7, #0]
   1d502:	807b      	strh	r3, [r7, #2]
   1d504:	4639      	mov	r1, r7
   1d506:	f00e fc8a 	bl	2be1e <bt_uuid_cmp>
		if (params->uuid &&
   1d50a:	b910      	cbnz	r0, 1d512 <bt_gatt_discover+0x106>
			return -EINVAL;
   1d50c:	f06f 0015 	mvn.w	r0, #21
   1d510:	e7b1      	b.n	1d476 <bt_gatt_discover+0x6a>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1d512:	f642 0301 	movw	r3, #10241	; 0x2801
   1d516:	6820      	ldr	r0, [r4, #0]
   1d518:	713e      	strb	r6, [r7, #4]
   1d51a:	80fb      	strh	r3, [r7, #6]
   1d51c:	1d39      	adds	r1, r7, #4
   1d51e:	f00e fc7e 	bl	2be1e <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1d522:	2800      	cmp	r0, #0
   1d524:	d0f2      	beq.n	1d50c <bt_gatt_discover+0x100>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1d526:	f642 0302 	movw	r3, #10242	; 0x2802
   1d52a:	6820      	ldr	r0, [r4, #0]
   1d52c:	723e      	strb	r6, [r7, #8]
   1d52e:	817b      	strh	r3, [r7, #10]
   1d530:	f107 0108 	add.w	r1, r7, #8
   1d534:	f00e fc73 	bl	2be1e <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1d538:	2800      	cmp	r0, #0
   1d53a:	d0e7      	beq.n	1d50c <bt_gatt_discover+0x100>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   1d53c:	f642 0303 	movw	r3, #10243	; 0x2803
   1d540:	6820      	ldr	r0, [r4, #0]
   1d542:	733e      	strb	r6, [r7, #12]
   1d544:	81fb      	strh	r3, [r7, #14]
   1d546:	f107 010c 	add.w	r1, r7, #12
   1d54a:	f00e fc68 	bl	2be1e <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1d54e:	2800      	cmp	r0, #0
   1d550:	d0dc      	beq.n	1d50c <bt_gatt_discover+0x100>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   1d552:	2304      	movs	r3, #4
   1d554:	e9cd 3300 	strd	r3, r3, [sp]
   1d558:	490f      	ldr	r1, [pc, #60]	; (1d598 <bt_gatt_discover+0x18c>)
   1d55a:	4b10      	ldr	r3, [pc, #64]	; (1d59c <bt_gatt_discover+0x190>)
   1d55c:	4622      	mov	r2, r4
   1d55e:	e787      	b.n	1d470 <bt_gatt_discover+0x64>
		LOG_ERR("Invalid discovery type: %u", params->type);
   1d560:	466c      	mov	r4, sp
   1d562:	b088      	sub	sp, #32
   1d564:	aa02      	add	r2, sp, #8
   1d566:	490e      	ldr	r1, [pc, #56]	; (1d5a0 <bt_gatt_discover+0x194>)
   1d568:	6151      	str	r1, [r2, #20]
   1d56a:	490e      	ldr	r1, [pc, #56]	; (1d5a4 <bt_gatt_discover+0x198>)
   1d56c:	e76d      	b.n	1d44a <bt_gatt_discover+0x3e>
		return -ENOTCONN;
   1d56e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d572:	e780      	b.n	1d476 <bt_gatt_discover+0x6a>
   1d574:	00033b14 	.word	0x00033b14
   1d578:	00033d5e 	.word	0x00033d5e
   1d57c:	0002fc04 	.word	0x0002fc04
   1d580:	0002d973 	.word	0x0002d973
   1d584:	0002d41f 	.word	0x0002d41f
   1d588:	0002d3ad 	.word	0x0002d3ad
   1d58c:	0001d5a9 	.word	0x0001d5a9
   1d590:	0001d6cd 	.word	0x0001d6cd
   1d594:	0002d3dd 	.word	0x0002d3dd
   1d598:	0001da75 	.word	0x0001da75
   1d59c:	0002d395 	.word	0x0002d395
   1d5a0:	00033b2d 	.word	0x00033b2d
   1d5a4:	00033d6d 	.word	0x00033d6d

0001d5a8 <gatt_read_group_rsp>:
{
   1d5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5ac:	b091      	sub	sp, #68	; 0x44
   1d5ae:	af00      	add	r7, sp, #0
   1d5b0:	4682      	mov	sl, r0
   1d5b2:	6ebd      	ldr	r5, [r7, #104]	; 0x68
   1d5b4:	4690      	mov	r8, r2
	if (err) {
   1d5b6:	b139      	cbz	r1, 1d5c8 <gatt_read_group_rsp+0x20>
		params->func(conn, NULL, params);
   1d5b8:	686b      	ldr	r3, [r5, #4]
   1d5ba:	462a      	mov	r2, r5
   1d5bc:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
   1d5be:	4798      	blx	r3
}
   1d5c0:	3744      	adds	r7, #68	; 0x44
   1d5c2:	46bd      	mov	sp, r7
   1d5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
   1d5c8:	7810      	ldrb	r0, [r2, #0]
   1d5ca:	2806      	cmp	r0, #6
   1d5cc:	d018      	beq.n	1d600 <gatt_read_group_rsp+0x58>
   1d5ce:	2814      	cmp	r0, #20
   1d5d0:	d015      	beq.n	1d5fe <gatt_read_group_rsp+0x56>
		LOG_ERR("Invalid data len %u", rsp->len);
   1d5d2:	466c      	mov	r4, sp
   1d5d4:	b088      	sub	sp, #32
   1d5d6:	466a      	mov	r2, sp
   1d5d8:	4b39      	ldr	r3, [pc, #228]	; (1d6c0 <gatt_read_group_rsp+0x118>)
   1d5da:	6153      	str	r3, [r2, #20]
   1d5dc:	4b39      	ldr	r3, [pc, #228]	; (1d6c4 <gatt_read_group_rsp+0x11c>)
	switch (rsp->len) {
   1d5de:	e9c2 3006 	strd	r3, r0, [r2, #24]
		LOG_ERR("Invalid data len %u", rsp->len);
   1d5e2:	2304      	movs	r3, #4
   1d5e4:	f842 3f10 	str.w	r3, [r2, #16]!
   1d5e8:	4837      	ldr	r0, [pc, #220]	; (1d6c8 <gatt_read_group_rsp+0x120>)
   1d5ea:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d5ee:	f00f ff13 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1d5f2:	46a5      	mov	sp, r4
	params->func(conn, NULL, params);
   1d5f4:	686b      	ldr	r3, [r5, #4]
   1d5f6:	462a      	mov	r2, r5
   1d5f8:	2100      	movs	r1, #0
   1d5fa:	4650      	mov	r0, sl
   1d5fc:	e7df      	b.n	1d5be <gatt_read_group_rsp+0x16>
	switch (rsp->len) {
   1d5fe:	2102      	movs	r1, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d600:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   1d602:	7639      	strb	r1, [r7, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d604:	b29c      	uxth	r4, r3
   1d606:	f108 0901 	add.w	r9, r8, #1
	uint16_t start_handle, end_handle = 0U;
   1d60a:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d60c:	f898 3000 	ldrb.w	r3, [r8]
   1d610:	42a3      	cmp	r3, r4
   1d612:	d909      	bls.n	1d628 <gatt_read_group_rsp+0x80>
	if (length == 0U && end_handle) {
   1d614:	2c00      	cmp	r4, #0
   1d616:	d1ed      	bne.n	1d5f4 <gatt_read_group_rsp+0x4c>
   1d618:	2e00      	cmp	r6, #0
   1d61a:	d0eb      	beq.n	1d5f4 <gatt_read_group_rsp+0x4c>
	gatt_discover_next(conn, handle, params);
   1d61c:	462a      	mov	r2, r5
   1d61e:	4631      	mov	r1, r6
   1d620:	4650      	mov	r0, sl
   1d622:	f010 f988 	bl	2d936 <gatt_discover_next>
   1d626:	e7cb      	b.n	1d5c0 <gatt_read_group_rsp+0x18>
		struct bt_gatt_attr attr = {};
   1d628:	2214      	movs	r2, #20
   1d62a:	2100      	movs	r1, #0
   1d62c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1d630:	f00e fb41 	bl	2bcb6 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   1d634:	f8b9 3000 	ldrh.w	r3, [r9]
   1d638:	607b      	str	r3, [r7, #4]
   1d63a:	88bb      	ldrh	r3, [r7, #4]
		if (!start_handle) {
   1d63c:	2b00      	cmp	r3, #0
   1d63e:	d0d9      	beq.n	1d5f4 <gatt_read_group_rsp+0x4c>
		end_handle = sys_le16_to_cpu(data->end_handle);
   1d640:	f8b9 b002 	ldrh.w	fp, [r9, #2]
   1d644:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   1d648:	2e00      	cmp	r6, #0
   1d64a:	d0d3      	beq.n	1d5f4 <gatt_read_group_rsp+0x4c>
   1d64c:	42b3      	cmp	r3, r6
   1d64e:	d8d1      	bhi.n	1d5f4 <gatt_read_group_rsp+0x4c>
		switch (u.uuid.type) {
   1d650:	7e3b      	ldrb	r3, [r7, #24]
   1d652:	b33b      	cbz	r3, 1d6a4 <gatt_read_group_rsp+0xfc>
   1d654:	2b02      	cmp	r3, #2
   1d656:	d02d      	beq.n	1d6b4 <gatt_read_group_rsp+0x10c>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1d658:	f04f 0300 	mov.w	r3, #0
   1d65c:	733b      	strb	r3, [r7, #12]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1d65e:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
   1d660:	f8a7 b014 	strh.w	fp, [r7, #20]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   1d664:	2b00      	cmp	r3, #0
   1d666:	f642 0301 	movw	r3, #10241	; 0x2801
   1d66a:	bf08      	it	eq
   1d66c:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   1d670:	81fb      	strh	r3, [r7, #14]
		value.uuid = &u.uuid;
   1d672:	f107 0318 	add.w	r3, r7, #24
   1d676:	613b      	str	r3, [r7, #16]
		attr.uuid = &uuid_svc.uuid;
   1d678:	f107 030c 	add.w	r3, r7, #12
   1d67c:	62fb      	str	r3, [r7, #44]	; 0x2c
		attr.handle = start_handle;
   1d67e:	88bb      	ldrh	r3, [r7, #4]
   1d680:	87bb      	strh	r3, [r7, #60]	; 0x3c
		attr.user_data = &value;
   1d682:	f107 0310 	add.w	r3, r7, #16
   1d686:	63bb      	str	r3, [r7, #56]	; 0x38
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d688:	462a      	mov	r2, r5
   1d68a:	686b      	ldr	r3, [r5, #4]
   1d68c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1d690:	4650      	mov	r0, sl
   1d692:	4798      	blx	r3
   1d694:	2800      	cmp	r0, #0
   1d696:	d093      	beq.n	1d5c0 <gatt_read_group_rsp+0x18>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1d698:	f898 3000 	ldrb.w	r3, [r8]
   1d69c:	1ae4      	subs	r4, r4, r3
   1d69e:	b2a4      	uxth	r4, r4
   1d6a0:	4499      	add	r9, r3
   1d6a2:	e7b3      	b.n	1d60c <gatt_read_group_rsp+0x64>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   1d6a4:	2202      	movs	r2, #2
   1d6a6:	f109 0104 	add.w	r1, r9, #4
   1d6aa:	f107 001a 	add.w	r0, r7, #26
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1d6ae:	f00e faf7 	bl	2bca0 <memcpy>
			break;
   1d6b2:	e7d1      	b.n	1d658 <gatt_read_group_rsp+0xb0>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1d6b4:	2210      	movs	r2, #16
   1d6b6:	f109 0104 	add.w	r1, r9, #4
   1d6ba:	f107 0019 	add.w	r0, r7, #25
   1d6be:	e7f6      	b.n	1d6ae <gatt_read_group_rsp+0x106>
   1d6c0:	00033b4c 	.word	0x00033b4c
   1d6c4:	00033d50 	.word	0x00033d50
   1d6c8:	0002fc04 	.word	0x0002fc04

0001d6cc <gatt_read_type_rsp>:
{
   1d6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d6d0:	b093      	sub	sp, #76	; 0x4c
   1d6d2:	af02      	add	r7, sp, #8
   1d6d4:	4680      	mov	r8, r0
   1d6d6:	6ebd      	ldr	r5, [r7, #104]	; 0x68
   1d6d8:	4616      	mov	r6, r2
	if (err) {
   1d6da:	b121      	cbz	r1, 1d6e6 <gatt_read_type_rsp+0x1a>
		params->func(conn, NULL, params);
   1d6dc:	686b      	ldr	r3, [r5, #4]
   1d6de:	462a      	mov	r2, r5
   1d6e0:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
   1d6e2:	4798      	blx	r3
	if (!handle) {
   1d6e4:	e06e      	b.n	1d7c4 <gatt_read_type_rsp+0xf8>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   1d6e6:	7c2a      	ldrb	r2, [r5, #16]
   1d6e8:	2a02      	cmp	r2, #2
   1d6ea:	f040 808c 	bne.w	1d806 <gatt_read_type_rsp+0x13a>
	switch (rsp->len) {
   1d6ee:	7830      	ldrb	r0, [r6, #0]
   1d6f0:	2806      	cmp	r0, #6
   1d6f2:	d017      	beq.n	1d724 <gatt_read_type_rsp+0x58>
   1d6f4:	2808      	cmp	r0, #8
   1d6f6:	d016      	beq.n	1d726 <gatt_read_type_rsp+0x5a>
		LOG_ERR("Invalid data len %u", rsp->len);
   1d6f8:	466c      	mov	r4, sp
   1d6fa:	b088      	sub	sp, #32
   1d6fc:	aa02      	add	r2, sp, #8
   1d6fe:	4ba6      	ldr	r3, [pc, #664]	; (1d998 <gatt_read_type_rsp+0x2cc>)
   1d700:	6153      	str	r3, [r2, #20]
   1d702:	4ba6      	ldr	r3, [pc, #664]	; (1d99c <gatt_read_type_rsp+0x2d0>)
	switch (rsp->len) {
   1d704:	e9c2 3006 	strd	r3, r0, [r2, #24]
		LOG_ERR("Invalid data len %u", rsp->len);
   1d708:	2304      	movs	r3, #4
   1d70a:	f842 3f10 	str.w	r3, [r2, #16]!
   1d70e:	48a4      	ldr	r0, [pc, #656]	; (1d9a0 <gatt_read_type_rsp+0x2d4>)
   1d710:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d714:	f00f fe80 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1d718:	46a5      	mov	sp, r4
	params->func(conn, NULL, params);
   1d71a:	686b      	ldr	r3, [r5, #4]
   1d71c:	462a      	mov	r2, r5
   1d71e:	2100      	movs	r1, #0
   1d720:	4640      	mov	r0, r8
   1d722:	e7de      	b.n	1d6e2 <gatt_read_type_rsp+0x16>
	switch (rsp->len) {
   1d724:	4611      	mov	r1, r2
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d726:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   1d728:	7639      	strb	r1, [r7, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d72a:	b2a4      	uxth	r4, r4
   1d72c:	f106 0b01 	add.w	fp, r6, #1
	uint16_t handle = 0U;
   1d730:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d734:	7833      	ldrb	r3, [r6, #0]
   1d736:	42a3      	cmp	r3, r4
   1d738:	d90a      	bls.n	1d750 <gatt_read_type_rsp+0x84>
	if (length == 0U && handle) {
   1d73a:	2c00      	cmp	r4, #0
   1d73c:	d1ed      	bne.n	1d71a <gatt_read_type_rsp+0x4e>
   1d73e:	f1b9 0f00 	cmp.w	r9, #0
   1d742:	d0ea      	beq.n	1d71a <gatt_read_type_rsp+0x4e>
	gatt_discover_next(conn, handle, params);
   1d744:	462a      	mov	r2, r5
   1d746:	4649      	mov	r1, r9
   1d748:	4640      	mov	r0, r8
   1d74a:	f010 f8f4 	bl	2d936 <gatt_discover_next>
   1d74e:	e039      	b.n	1d7c4 <gatt_read_type_rsp+0xf8>
		handle = sys_le16_to_cpu(data->handle);
   1d750:	f8bb a000 	ldrh.w	sl, [fp]
   1d754:	fa1f f98a 	uxth.w	r9, sl
		if (!handle) {
   1d758:	f1b9 0f00 	cmp.w	r9, #0
   1d75c:	d0dd      	beq.n	1d71a <gatt_read_type_rsp+0x4e>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   1d75e:	f8bb 0002 	ldrh.w	r0, [fp, #2]
   1d762:	82b8      	strh	r0, [r7, #20]
		switch (u.uuid.type) {
   1d764:	7e3a      	ldrb	r2, [r7, #24]
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   1d766:	f8bb 1004 	ldrh.w	r1, [fp, #4]
   1d76a:	82f9      	strh	r1, [r7, #22]
		switch (u.uuid.type) {
   1d76c:	b16a      	cbz	r2, 1d78a <gatt_read_type_rsp+0xbe>
   1d76e:	2a02      	cmp	r2, #2
   1d770:	d016      	beq.n	1d7a0 <gatt_read_type_rsp+0xd4>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1d772:	6829      	ldr	r1, [r5, #0]
   1d774:	b351      	cbz	r1, 1d7cc <gatt_read_type_rsp+0x100>
   1d776:	f107 0018 	add.w	r0, r7, #24
   1d77a:	f00e fb50 	bl	2be1e <bt_uuid_cmp>
   1d77e:	b328      	cbz	r0, 1d7cc <gatt_read_type_rsp+0x100>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1d780:	7833      	ldrb	r3, [r6, #0]
   1d782:	1ae4      	subs	r4, r4, r3
   1d784:	b2a4      	uxth	r4, r4
   1d786:	449b      	add	fp, r3
   1d788:	e7d4      	b.n	1d734 <gatt_read_type_rsp+0x68>
			value.uuid = &u.uuid;
   1d78a:	f107 0218 	add.w	r2, r7, #24
   1d78e:	613a      	str	r2, [r7, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   1d790:	f89b 2006 	ldrb.w	r2, [fp, #6]
   1d794:	f89b 1007 	ldrb.w	r1, [fp, #7]
   1d798:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d79c:	837a      	strh	r2, [r7, #26]
			break;
   1d79e:	e7e8      	b.n	1d772 <gatt_read_type_rsp+0xa6>
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1d7a0:	230a      	movs	r3, #10
			params->_included.start_handle = value.start_handle;
   1d7a2:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   1d7a4:	81a9      	strh	r1, [r5, #12]
			params->_included.attr_handle = handle;
   1d7a6:	f8a5 a008 	strh.w	sl, [r5, #8]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1d7aa:	497e      	ldr	r1, [pc, #504]	; (1d9a4 <gatt_read_type_rsp+0x2d8>)
   1d7ac:	9201      	str	r2, [sp, #4]
   1d7ae:	9300      	str	r3, [sp, #0]
   1d7b0:	462a      	mov	r2, r5
   1d7b2:	4b7d      	ldr	r3, [pc, #500]	; (1d9a8 <gatt_read_type_rsp+0x2dc>)
   1d7b4:	4640      	mov	r0, r8
   1d7b6:	f00f ff0f 	bl	2d5d8 <gatt_req_send.constprop.0>
			return read_included_uuid(conn, params);
   1d7ba:	fa1f f980 	uxth.w	r9, r0
	if (!handle) {
   1d7be:	f1b9 0f00 	cmp.w	r9, #0
   1d7c2:	d1bf      	bne.n	1d744 <gatt_read_type_rsp+0x78>
}
   1d7c4:	3744      	adds	r7, #68	; 0x44
   1d7c6:	46bd      	mov	sp, r7
   1d7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			.uuid = BT_UUID_GATT_INCLUDE,
   1d7cc:	f04f 0300 	mov.w	r3, #0
   1d7d0:	733b      	strb	r3, [r7, #12]
   1d7d2:	f642 0302 	movw	r3, #10242	; 0x2802
   1d7d6:	81fb      	strh	r3, [r7, #14]
		attr = (struct bt_gatt_attr) {
   1d7d8:	2210      	movs	r2, #16
   1d7da:	2100      	movs	r1, #0
   1d7dc:	f107 0030 	add.w	r0, r7, #48	; 0x30
   1d7e0:	f00e fa69 	bl	2bcb6 <memset>
   1d7e4:	f107 020c 	add.w	r2, r7, #12
   1d7e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   1d7ea:	f107 0210 	add.w	r2, r7, #16
   1d7ee:	63ba      	str	r2, [r7, #56]	; 0x38
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d7f0:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   1d7f2:	f8a7 a03c 	strh.w	sl, [r7, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d7f6:	462a      	mov	r2, r5
   1d7f8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1d7fc:	4640      	mov	r0, r8
   1d7fe:	4798      	blx	r3
   1d800:	2800      	cmp	r0, #0
   1d802:	d1bd      	bne.n	1d780 <gatt_read_type_rsp+0xb4>
   1d804:	e7de      	b.n	1d7c4 <gatt_read_type_rsp+0xf8>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   1d806:	2a03      	cmp	r2, #3
   1d808:	d162      	bne.n	1d8d0 <gatt_read_type_rsp+0x204>
	switch (rsp->len) {
   1d80a:	7830      	ldrb	r0, [r6, #0]
   1d80c:	2807      	cmp	r0, #7
   1d80e:	d009      	beq.n	1d824 <gatt_read_type_rsp+0x158>
   1d810:	2815      	cmp	r0, #21
   1d812:	d006      	beq.n	1d822 <gatt_read_type_rsp+0x156>
		LOG_ERR("Invalid data len %u", rsp->len);
   1d814:	466c      	mov	r4, sp
   1d816:	b088      	sub	sp, #32
   1d818:	aa02      	add	r2, sp, #8
   1d81a:	4b5f      	ldr	r3, [pc, #380]	; (1d998 <gatt_read_type_rsp+0x2cc>)
   1d81c:	6153      	str	r3, [r2, #20]
   1d81e:	4b63      	ldr	r3, [pc, #396]	; (1d9ac <gatt_read_type_rsp+0x2e0>)
   1d820:	e770      	b.n	1d704 <gatt_read_type_rsp+0x38>
	switch (rsp->len) {
   1d822:	2102      	movs	r1, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d824:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   1d826:	7639      	strb	r1, [r7, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d828:	b2a4      	uxth	r4, r4
   1d82a:	f106 0a01 	add.w	sl, r6, #1
	uint16_t handle = 0U;
   1d82e:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d832:	7833      	ldrb	r3, [r6, #0]
   1d834:	42a3      	cmp	r3, r4
   1d836:	d880      	bhi.n	1d73a <gatt_read_type_rsp+0x6e>
		handle = sys_le16_to_cpu(data->handle);
   1d838:	f8ba b000 	ldrh.w	fp, [sl]
   1d83c:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
   1d840:	f1b9 0f00 	cmp.w	r9, #0
   1d844:	f43f af69 	beq.w	1d71a <gatt_read_type_rsp+0x4e>
		switch (u.uuid.type) {
   1d848:	7e3b      	ldrb	r3, [r7, #24]
   1d84a:	b16b      	cbz	r3, 1d868 <gatt_read_type_rsp+0x19c>
   1d84c:	2b02      	cmp	r3, #2
   1d84e:	d013      	beq.n	1d878 <gatt_read_type_rsp+0x1ac>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1d850:	6829      	ldr	r1, [r5, #0]
   1d852:	b1c9      	cbz	r1, 1d888 <gatt_read_type_rsp+0x1bc>
   1d854:	f107 0018 	add.w	r0, r7, #24
   1d858:	f00e fae1 	bl	2be1e <bt_uuid_cmp>
   1d85c:	b1a0      	cbz	r0, 1d888 <gatt_read_type_rsp+0x1bc>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1d85e:	7833      	ldrb	r3, [r6, #0]
   1d860:	1ae4      	subs	r4, r4, r3
   1d862:	b2a4      	uxth	r4, r4
   1d864:	449a      	add	sl, r3
   1d866:	e7e4      	b.n	1d832 <gatt_read_type_rsp+0x166>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   1d868:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1d86c:	f89a 2006 	ldrb.w	r2, [sl, #6]
   1d870:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d874:	837b      	strh	r3, [r7, #26]
			break;
   1d876:	e7eb      	b.n	1d850 <gatt_read_type_rsp+0x184>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   1d878:	2210      	movs	r2, #16
   1d87a:	f10a 0105 	add.w	r1, sl, #5
   1d87e:	f107 0019 	add.w	r0, r7, #25
   1d882:	f00e fa0d 	bl	2bca0 <memcpy>
			break;
   1d886:	e7e3      	b.n	1d850 <gatt_read_type_rsp+0x184>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1d888:	f89a 3002 	ldrb.w	r3, [sl, #2]
   1d88c:	f8ba 2003 	ldrh.w	r2, [sl, #3]
   1d890:	75bb      	strb	r3, [r7, #22]
   1d892:	f107 0118 	add.w	r1, r7, #24
			.uuid = BT_UUID_GATT_CHRC,
   1d896:	f642 0303 	movw	r3, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1d89a:	6139      	str	r1, [r7, #16]
			.uuid = BT_UUID_GATT_CHRC,
   1d89c:	2100      	movs	r1, #0
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1d89e:	82ba      	strh	r2, [r7, #20]
			.uuid = BT_UUID_GATT_CHRC,
   1d8a0:	7339      	strb	r1, [r7, #12]
   1d8a2:	81fb      	strh	r3, [r7, #14]
		attr = (struct bt_gatt_attr) {
   1d8a4:	2210      	movs	r2, #16
   1d8a6:	f107 0030 	add.w	r0, r7, #48	; 0x30
   1d8aa:	f00e fa04 	bl	2bcb6 <memset>
   1d8ae:	f107 030c 	add.w	r3, r7, #12
   1d8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   1d8b4:	f107 0310 	add.w	r3, r7, #16
   1d8b8:	63bb      	str	r3, [r7, #56]	; 0x38
   1d8ba:	f8a7 b03c 	strh.w	fp, [r7, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d8be:	686b      	ldr	r3, [r5, #4]
   1d8c0:	462a      	mov	r2, r5
   1d8c2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1d8c6:	4640      	mov	r0, r8
   1d8c8:	4798      	blx	r3
   1d8ca:	2800      	cmp	r0, #0
   1d8cc:	d1c7      	bne.n	1d85e <gatt_read_type_rsp+0x192>
   1d8ce:	e779      	b.n	1d7c4 <gatt_read_type_rsp+0xf8>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   1d8d0:	6829      	ldr	r1, [r5, #0]
   1d8d2:	780a      	ldrb	r2, [r1, #0]
   1d8d4:	2a00      	cmp	r2, #0
   1d8d6:	f47f af20 	bne.w	1d71a <gatt_read_type_rsp+0x4e>
	uuid_val = BT_UUID_16(params->uuid)->val;
   1d8da:	8849      	ldrh	r1, [r1, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d8dc:	1e5c      	subs	r4, r3, #1
		switch (uuid_val) {
   1d8de:	f5a1 5324 	sub.w	r3, r1, #10496	; 0x2900
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d8e2:	b2a4      	uxth	r4, r4
   1d8e4:	f106 0a01 	add.w	sl, r6, #1
	uint16_t handle = 0U;
   1d8e8:	4691      	mov	r9, r2
		switch (uuid_val) {
   1d8ea:	607b      	str	r3, [r7, #4]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d8ec:	7833      	ldrb	r3, [r6, #0]
   1d8ee:	42a3      	cmp	r3, r4
   1d8f0:	f63f af23 	bhi.w	1d73a <gatt_read_type_rsp+0x6e>
		handle = sys_le16_to_cpu(data->handle);
   1d8f4:	f8ba b000 	ldrh.w	fp, [sl]
   1d8f8:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
   1d8fc:	f1b9 0f00 	cmp.w	r9, #0
   1d900:	f43f af0b 	beq.w	1d71a <gatt_read_type_rsp+0x4e>
		switch (uuid_val) {
   1d904:	687a      	ldr	r2, [r7, #4]
   1d906:	2a04      	cmp	r2, #4
   1d908:	f63f af07 	bhi.w	1d71a <gatt_read_type_rsp+0x4e>
   1d90c:	a301      	add	r3, pc, #4	; (adr r3, 1d914 <gatt_read_type_rsp+0x248>)
   1d90e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1d912:	bf00      	nop
   1d914:	0001d929 	.word	0x0001d929
   1d918:	0001d71b 	.word	0x0001d71b
   1d91c:	0001d929 	.word	0x0001d929
   1d920:	0001d929 	.word	0x0001d929
   1d924:	0001d969 	.word	0x0001d969
			value.scc.flags = sys_get_le16(data->value);
   1d928:	f8ba 3002 	ldrh.w	r3, [sl, #2]
   1d92c:	833b      	strh	r3, [r7, #24]
			.uuid = params->uuid,
   1d92e:	682b      	ldr	r3, [r5, #0]
   1d930:	603b      	str	r3, [r7, #0]
		attr = (struct bt_gatt_attr) {
   1d932:	2210      	movs	r2, #16
   1d934:	2100      	movs	r1, #0
   1d936:	f107 0030 	add.w	r0, r7, #48	; 0x30
   1d93a:	f00e f9bc 	bl	2bcb6 <memset>
   1d93e:	683b      	ldr	r3, [r7, #0]
   1d940:	62fb      	str	r3, [r7, #44]	; 0x2c
   1d942:	f107 0318 	add.w	r3, r7, #24
   1d946:	63bb      	str	r3, [r7, #56]	; 0x38
   1d948:	f8a7 b03c 	strh.w	fp, [r7, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d94c:	686b      	ldr	r3, [r5, #4]
   1d94e:	462a      	mov	r2, r5
   1d950:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1d954:	4640      	mov	r0, r8
   1d956:	4798      	blx	r3
   1d958:	2800      	cmp	r0, #0
   1d95a:	f43f af33 	beq.w	1d7c4 <gatt_read_type_rsp+0xf8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1d95e:	7833      	ldrb	r3, [r6, #0]
   1d960:	1ae4      	subs	r4, r4, r3
   1d962:	b2a4      	uxth	r4, r4
   1d964:	449a      	add	sl, r3
   1d966:	e7c1      	b.n	1d8ec <gatt_read_type_rsp+0x220>
			value.cpf.format = cpf->format;
   1d968:	f89a 3002 	ldrb.w	r3, [sl, #2]
   1d96c:	763b      	strb	r3, [r7, #24]
			value.cpf.exponent = cpf->exponent;
   1d96e:	f89a 3003 	ldrb.w	r3, [sl, #3]
   1d972:	767b      	strb	r3, [r7, #25]
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   1d974:	f89a 2005 	ldrb.w	r2, [sl, #5]
   1d978:	f89a 3004 	ldrb.w	r3, [sl, #4]
   1d97c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d980:	837b      	strh	r3, [r7, #26]
			value.cpf.name_space = cpf->name_space;
   1d982:	f89a 3006 	ldrb.w	r3, [sl, #6]
   1d986:	773b      	strb	r3, [r7, #28]
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   1d988:	f89a 3007 	ldrb.w	r3, [sl, #7]
   1d98c:	f89a 2008 	ldrb.w	r2, [sl, #8]
   1d990:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d994:	83fb      	strh	r3, [r7, #30]
			break;
   1d996:	e7ca      	b.n	1d92e <gatt_read_type_rsp+0x262>
   1d998:	00033b4c 	.word	0x00033b4c
   1d99c:	00033d42 	.word	0x00033d42
   1d9a0:	0002fc04 	.word	0x0002fc04
   1d9a4:	0001d9b1 	.word	0x0001d9b1
   1d9a8:	0002d381 	.word	0x0002d381
   1d9ac:	00033d17 	.word	0x00033d17

0001d9b0 <read_included_uuid_cb>:
{
   1d9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d9b4:	b08e      	sub	sp, #56	; 0x38
   1d9b6:	af00      	add	r7, sp, #0
	if (length != 16U) {
   1d9b8:	2b10      	cmp	r3, #16
{
   1d9ba:	4611      	mov	r1, r2
   1d9bc:	6d3c      	ldr	r4, [r7, #80]	; 0x50
   1d9be:	4605      	mov	r5, r0
   1d9c0:	461a      	mov	r2, r3
	if (length != 16U) {
   1d9c2:	d01a      	beq.n	1d9fa <read_included_uuid_cb+0x4a>
		LOG_ERR("Invalid data len %u", length);
   1d9c4:	466e      	mov	r6, sp
   1d9c6:	b088      	sub	sp, #32
   1d9c8:	4669      	mov	r1, sp
   1d9ca:	4b27      	ldr	r3, [pc, #156]	; (1da68 <read_included_uuid_cb+0xb8>)
   1d9cc:	614b      	str	r3, [r1, #20]
   1d9ce:	4b27      	ldr	r3, [pc, #156]	; (1da6c <read_included_uuid_cb+0xbc>)
   1d9d0:	4827      	ldr	r0, [pc, #156]	; (1da70 <read_included_uuid_cb+0xc0>)
   1d9d2:	e9c1 3206 	strd	r3, r2, [r1, #24]
   1d9d6:	460a      	mov	r2, r1
   1d9d8:	2304      	movs	r3, #4
   1d9da:	f842 3f10 	str.w	r3, [r2, #16]!
   1d9de:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d9e2:	f00f fd19 	bl	2d418 <z_log_msg_static_create.constprop.0>
		params->func(conn, NULL, params);
   1d9e6:	4622      	mov	r2, r4
   1d9e8:	6863      	ldr	r3, [r4, #4]
   1d9ea:	46b5      	mov	sp, r6
   1d9ec:	2100      	movs	r1, #0
   1d9ee:	4628      	mov	r0, r5
   1d9f0:	4798      	blx	r3
}
   1d9f2:	3738      	adds	r7, #56	; 0x38
   1d9f4:	46bd      	mov	sp, r7
   1d9f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	value.start_handle = params->_included.start_handle;
   1d9fa:	8963      	ldrh	r3, [r4, #10]
   1d9fc:	81bb      	strh	r3, [r7, #12]
	value.end_handle = params->_included.end_handle;
   1d9fe:	89a3      	ldrh	r3, [r4, #12]
   1da00:	81fb      	strh	r3, [r7, #14]
	value.uuid = &u.uuid;
   1da02:	f107 0610 	add.w	r6, r7, #16
	u.uuid.type = BT_UUID_TYPE_128;
   1da06:	2302      	movs	r3, #2
	memcpy(u.u128.val, pdu, length);
   1da08:	f107 0011 	add.w	r0, r7, #17
	handle = params->_included.attr_handle;
   1da0c:	f8b4 8008 	ldrh.w	r8, [r4, #8]
	value.uuid = &u.uuid;
   1da10:	60be      	str	r6, [r7, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   1da12:	743b      	strb	r3, [r7, #16]
	memcpy(u.u128.val, pdu, length);
   1da14:	f00e f944 	bl	2bca0 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1da18:	6821      	ldr	r1, [r4, #0]
   1da1a:	b9f1      	cbnz	r1, 1da5a <read_included_uuid_cb+0xaa>
		.uuid = BT_UUID_GATT_INCLUDE,
   1da1c:	2100      	movs	r1, #0
   1da1e:	f642 0302 	movw	r3, #10242	; 0x2802
	attr = (struct bt_gatt_attr) {
   1da22:	2210      	movs	r2, #16
   1da24:	f107 0028 	add.w	r0, r7, #40	; 0x28
		.uuid = BT_UUID_GATT_INCLUDE,
   1da28:	7139      	strb	r1, [r7, #4]
   1da2a:	80fb      	strh	r3, [r7, #6]
	attr = (struct bt_gatt_attr) {
   1da2c:	f00e f943 	bl	2bcb6 <memset>
   1da30:	1d3b      	adds	r3, r7, #4
   1da32:	627b      	str	r3, [r7, #36]	; 0x24
   1da34:	f107 0308 	add.w	r3, r7, #8
   1da38:	633b      	str	r3, [r7, #48]	; 0x30
   1da3a:	f8a7 8034 	strh.w	r8, [r7, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1da3e:	6863      	ldr	r3, [r4, #4]
   1da40:	4622      	mov	r2, r4
   1da42:	f107 0124 	add.w	r1, r7, #36	; 0x24
   1da46:	4628      	mov	r0, r5
   1da48:	4798      	blx	r3
   1da4a:	2800      	cmp	r0, #0
   1da4c:	d0d1      	beq.n	1d9f2 <read_included_uuid_cb+0x42>
	gatt_discover_next(conn, params->start_handle, params);
   1da4e:	8921      	ldrh	r1, [r4, #8]
   1da50:	4622      	mov	r2, r4
   1da52:	4628      	mov	r0, r5
   1da54:	f00f ff6f 	bl	2d936 <gatt_discover_next>
	return;
   1da58:	e7cb      	b.n	1d9f2 <read_included_uuid_cb+0x42>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1da5a:	4630      	mov	r0, r6
   1da5c:	f00e f9df 	bl	2be1e <bt_uuid_cmp>
   1da60:	2800      	cmp	r0, #0
   1da62:	d0db      	beq.n	1da1c <read_included_uuid_cb+0x6c>
   1da64:	e7f3      	b.n	1da4e <read_included_uuid_cb+0x9e>
   1da66:	bf00      	nop
   1da68:	00033b4c 	.word	0x00033b4c
   1da6c:	00033d2c 	.word	0x00033d2c
   1da70:	0002fc04 	.word	0x0002fc04

0001da74 <gatt_find_info_rsp>:
{
   1da74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da78:	b091      	sub	sp, #68	; 0x44
   1da7a:	af00      	add	r7, sp, #0
   1da7c:	6ebd      	ldr	r5, [r7, #104]	; 0x68
   1da7e:	60f8      	str	r0, [r7, #12]
	if (err) {
   1da80:	b9a9      	cbnz	r1, 1daae <gatt_find_info_rsp+0x3a>
	switch (rsp->format) {
   1da82:	7810      	ldrb	r0, [r2, #0]
   1da84:	2801      	cmp	r0, #1
   1da86:	d018      	beq.n	1daba <gatt_find_info_rsp+0x46>
   1da88:	2802      	cmp	r0, #2
   1da8a:	d030      	beq.n	1daee <gatt_find_info_rsp+0x7a>
		LOG_ERR("Invalid format %u", rsp->format);
   1da8c:	466c      	mov	r4, sp
   1da8e:	b088      	sub	sp, #32
   1da90:	466a      	mov	r2, sp
   1da92:	4b4f      	ldr	r3, [pc, #316]	; (1dbd0 <gatt_find_info_rsp+0x15c>)
   1da94:	6153      	str	r3, [r2, #20]
   1da96:	4b4f      	ldr	r3, [pc, #316]	; (1dbd4 <gatt_find_info_rsp+0x160>)
	switch (rsp->format) {
   1da98:	e9c2 3006 	strd	r3, r0, [r2, #24]
		LOG_ERR("Invalid format %u", rsp->format);
   1da9c:	2304      	movs	r3, #4
   1da9e:	f842 3f10 	str.w	r3, [r2, #16]!
   1daa2:	484d      	ldr	r0, [pc, #308]	; (1dbd8 <gatt_find_info_rsp+0x164>)
   1daa4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1daa8:	f00f fcb6 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1daac:	46a5      	mov	sp, r4
	params->func(conn, NULL, params);
   1daae:	686b      	ldr	r3, [r5, #4]
   1dab0:	68f8      	ldr	r0, [r7, #12]
   1dab2:	462a      	mov	r2, r5
   1dab4:	2100      	movs	r1, #0
   1dab6:	4798      	blx	r3
   1dab8:	e086      	b.n	1dbc8 <gatt_find_info_rsp+0x154>
	switch (rsp->format) {
   1daba:	f04f 0a04 	mov.w	sl, #4
	length--;
   1dabe:	3b01      	subs	r3, #1
   1dac0:	b29b      	uxth	r3, r3
	if (length < len) {
   1dac2:	4553      	cmp	r3, sl
		u.uuid.type = BT_UUID_TYPE_16;
   1dac4:	7639      	strb	r1, [r7, #24]
	if (length < len) {
   1dac6:	d3f2      	bcc.n	1daae <gatt_find_info_rsp+0x3a>
	for (i = length / len, pdu = rsp->info; i != 0;
   1dac8:	fbb3 f8fa 	udiv	r8, r3, sl
	bool skip = false;
   1dacc:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   1dad0:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
   1dad2:	f8c7 9008 	str.w	r9, [r7, #8]
			skip = false;
   1dad6:	46cb      	mov	fp, r9
   1dad8:	f107 0618 	add.w	r6, r7, #24
	for (i = length / len, pdu = rsp->info; i != 0;
   1dadc:	f1b8 0f00 	cmp.w	r8, #0
   1dae0:	d109      	bne.n	1daf6 <gatt_find_info_rsp+0x82>
	gatt_discover_next(conn, handle, params);
   1dae2:	e9d7 1002 	ldrd	r1, r0, [r7, #8]
   1dae6:	462a      	mov	r2, r5
   1dae8:	f00f ff25 	bl	2d936 <gatt_discover_next>
	return;
   1daec:	e06c      	b.n	1dbc8 <gatt_find_info_rsp+0x154>
	switch (rsp->format) {
   1daee:	4601      	mov	r1, r0
		len = sizeof(*info.i128);
   1daf0:	f04f 0a12 	mov.w	sl, #18
   1daf4:	e7e3      	b.n	1dabe <gatt_find_info_rsp+0x4a>
		handle = sys_le16_to_cpu(info.i16->handle);
   1daf6:	8823      	ldrh	r3, [r4, #0]
   1daf8:	607b      	str	r3, [r7, #4]
   1dafa:	88bb      	ldrh	r3, [r7, #4]
   1dafc:	60bb      	str	r3, [r7, #8]
		if (skip) {
   1dafe:	f1b9 0f00 	cmp.w	r9, #0
   1db02:	d14a      	bne.n	1db9a <gatt_find_info_rsp+0x126>
		switch (u.uuid.type) {
   1db04:	7e3b      	ldrb	r3, [r7, #24]
   1db06:	b3b3      	cbz	r3, 1db76 <gatt_find_info_rsp+0x102>
   1db08:	2b02      	cmp	r3, #2
   1db0a:	d03a      	beq.n	1db82 <gatt_find_info_rsp+0x10e>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1db0c:	6829      	ldr	r1, [r5, #0]
   1db0e:	2900      	cmp	r1, #0
   1db10:	d13e      	bne.n	1db90 <gatt_find_info_rsp+0x11c>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   1db12:	7c2b      	ldrb	r3, [r5, #16]
   1db14:	2b04      	cmp	r3, #4
   1db16:	d146      	bne.n	1dba6 <gatt_find_info_rsp+0x132>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1db18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1db1c:	f107 0110 	add.w	r1, r7, #16
   1db20:	4630      	mov	r0, r6
   1db22:	f887 b010 	strb.w	fp, [r7, #16]
   1db26:	827b      	strh	r3, [r7, #18]
   1db28:	f00e f979 	bl	2be1e <bt_uuid_cmp>
   1db2c:	b3a8      	cbz	r0, 1db9a <gatt_find_info_rsp+0x126>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1db2e:	f642 0301 	movw	r3, #10241	; 0x2801
   1db32:	f107 0114 	add.w	r1, r7, #20
   1db36:	4630      	mov	r0, r6
   1db38:	f887 b014 	strb.w	fp, [r7, #20]
   1db3c:	82fb      	strh	r3, [r7, #22]
   1db3e:	f00e f96e 	bl	2be1e <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1db42:	b350      	cbz	r0, 1db9a <gatt_find_info_rsp+0x126>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   1db44:	f642 0302 	movw	r3, #10242	; 0x2802
   1db48:	f887 b02c 	strb.w	fp, [r7, #44]	; 0x2c
   1db4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1db4e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1db52:	4630      	mov	r0, r6
   1db54:	f00e f963 	bl	2be1e <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1db58:	b1f8      	cbz	r0, 1db9a <gatt_find_info_rsp+0x126>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   1db5a:	f642 0303 	movw	r3, #10243	; 0x2803
   1db5e:	f887 b02c 	strb.w	fp, [r7, #44]	; 0x2c
   1db62:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1db64:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1db68:	4630      	mov	r0, r6
   1db6a:	f00e f958 	bl	2be1e <bt_uuid_cmp>
   1db6e:	b9d0      	cbnz	r0, 1dba6 <gatt_find_info_rsp+0x132>
				skip = true;
   1db70:	f04f 0901 	mov.w	r9, #1
   1db74:	e013      	b.n	1db9e <gatt_find_info_rsp+0x12a>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   1db76:	78a3      	ldrb	r3, [r4, #2]
   1db78:	78e2      	ldrb	r2, [r4, #3]
   1db7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1db7e:	837b      	strh	r3, [r7, #26]
			break;
   1db80:	e7c4      	b.n	1db0c <gatt_find_info_rsp+0x98>
			memcpy(u.u128.val, info.i128->uuid, 16);
   1db82:	2210      	movs	r2, #16
   1db84:	1ca1      	adds	r1, r4, #2
   1db86:	f107 0019 	add.w	r0, r7, #25
   1db8a:	f00e f889 	bl	2bca0 <memcpy>
			break;
   1db8e:	e7bd      	b.n	1db0c <gatt_find_info_rsp+0x98>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1db90:	4630      	mov	r0, r6
   1db92:	f00e f944 	bl	2be1e <bt_uuid_cmp>
   1db96:	2800      	cmp	r0, #0
   1db98:	d0bb      	beq.n	1db12 <gatt_find_info_rsp+0x9e>
			skip = false;
   1db9a:	f04f 0900 	mov.w	r9, #0
	     i--, pdu = (const uint8_t *)pdu + len) {
   1db9e:	f108 38ff 	add.w	r8, r8, #4294967295
   1dba2:	4454      	add	r4, sl
   1dba4:	e79a      	b.n	1dadc <gatt_find_info_rsp+0x68>
		attr = (struct bt_gatt_attr) {
   1dba6:	2210      	movs	r2, #16
   1dba8:	2100      	movs	r1, #0
   1dbaa:	f107 0030 	add.w	r0, r7, #48	; 0x30
   1dbae:	f00e f882 	bl	2bcb6 <memset>
   1dbb2:	88bb      	ldrh	r3, [r7, #4]
   1dbb4:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1dbb6:	68f8      	ldr	r0, [r7, #12]
   1dbb8:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   1dbba:	62fe      	str	r6, [r7, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1dbbc:	462a      	mov	r2, r5
   1dbbe:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1dbc2:	4798      	blx	r3
   1dbc4:	2800      	cmp	r0, #0
   1dbc6:	d1ea      	bne.n	1db9e <gatt_find_info_rsp+0x12a>
}
   1dbc8:	3744      	adds	r7, #68	; 0x44
   1dbca:	46bd      	mov	sp, r7
   1dbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbd0:	00033b64 	.word	0x00033b64
   1dbd4:	00033d04 	.word	0x00033d04
   1dbd8:	0002fc04 	.word	0x0002fc04

0001dbdc <bt_gatt_write_without_response_cb>:
{
   1dbdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dbe0:	b085      	sub	sp, #20
   1dbe2:	4691      	mov	r9, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1dbe4:	7b42      	ldrb	r2, [r0, #13]
{
   1dbe6:	af04      	add	r7, sp, #16
	if (conn->state != BT_CONN_CONNECTED) {
   1dbe8:	2a07      	cmp	r2, #7
{
   1dbea:	461d      	mov	r5, r3
   1dbec:	4606      	mov	r6, r0
   1dbee:	f897 3020 	ldrb.w	r3, [r7, #32]
   1dbf2:	4688      	mov	r8, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1dbf4:	d149      	bne.n	1dc8a <bt_gatt_write_without_response_cb+0xae>
	if (conn->encrypt) {
   1dbf6:	7ac2      	ldrb	r2, [r0, #11]
   1dbf8:	2a00      	cmp	r2, #0
   1dbfa:	d137      	bne.n	1dc6c <bt_gatt_write_without_response_cb+0x90>
	if (sign) {
   1dbfc:	b3b3      	cbz	r3, 1dc6c <bt_gatt_write_without_response_cb+0x90>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_SIGNED_WRITE_CMD,
   1dbfe:	f105 020e 	add.w	r2, r5, #14
   1dc02:	21d2      	movs	r1, #210	; 0xd2
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   1dc04:	f7fd fafa 	bl	1b1fc <bt_att_create_pdu>
   1dc08:	4604      	mov	r4, r0
	if (!buf) {
   1dc0a:	b348      	cbz	r0, 1dc60 <bt_gatt_write_without_response_cb+0x84>
   1dc0c:	2102      	movs	r1, #2
   1dc0e:	300c      	adds	r0, #12
   1dc10:	f010 fc0f 	bl	2e432 <net_buf_simple_add>
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   1dc14:	2200      	movs	r2, #0
	cmd->handle = sys_cpu_to_le16(handle);
   1dc16:	f8a0 8000 	strh.w	r8, [r0]
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   1dc1a:	2300      	movs	r3, #0
   1dc1c:	f04f 0800 	mov.w	r8, #0
   1dc20:	e9cd 2300 	strd	r2, r3, [sp]
   1dc24:	e9cd 8802 	strd	r8, r8, [sp, #8]
   1dc28:	464a      	mov	r2, r9
   1dc2a:	4629      	mov	r1, r5
   1dc2c:	4620      	mov	r0, r4
   1dc2e:	f002 ff29 	bl	20a84 <net_buf_append_bytes>
	if (write != length) {
   1dc32:	4285      	cmp	r5, r0
   1dc34:	d01e      	beq.n	1dc74 <bt_gatt_write_without_response_cb+0x98>
		LOG_WRN("Unable to allocate length %u: only %zu written", length, write);
   1dc36:	466e      	mov	r6, sp
   1dc38:	b08a      	sub	sp, #40	; 0x28
   1dc3a:	aa04      	add	r2, sp, #16
   1dc3c:	4b14      	ldr	r3, [pc, #80]	; (1dc90 <bt_gatt_write_without_response_cb+0xb4>)
   1dc3e:	6153      	str	r3, [r2, #20]
   1dc40:	4b14      	ldr	r3, [pc, #80]	; (1dc94 <bt_gatt_write_without_response_cb+0xb8>)
   1dc42:	6210      	str	r0, [r2, #32]
   1dc44:	e9c2 3506 	strd	r3, r5, [r2, #24]
   1dc48:	2305      	movs	r3, #5
   1dc4a:	4813      	ldr	r0, [pc, #76]	; (1dc98 <bt_gatt_write_without_response_cb+0xbc>)
   1dc4c:	f842 3f10 	str.w	r3, [r2, #16]!
   1dc50:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   1dc54:	f00f fbe0 	bl	2d418 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1dc58:	4620      	mov	r0, r4
   1dc5a:	46b5      	mov	sp, r6
   1dc5c:	f002 fee0 	bl	20a20 <net_buf_unref>
		return -ENOMEM;
   1dc60:	f06f 000b 	mvn.w	r0, #11
}
   1dc64:	3704      	adds	r7, #4
   1dc66:	46bd      	mov	sp, r7
   1dc68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   1dc6c:	1caa      	adds	r2, r5, #2
   1dc6e:	2152      	movs	r1, #82	; 0x52
   1dc70:	4630      	mov	r0, r6
   1dc72:	e7c7      	b.n	1dc04 <bt_gatt_write_without_response_cb+0x28>
	bt_att_set_tx_meta_data(buf, func, user_data, BT_ATT_CHAN_OPT_NONE);
   1dc74:	e9d7 1209 	ldrd	r1, r2, [r7, #36]	; 0x24
   1dc78:	4620      	mov	r0, r4
   1dc7a:	4643      	mov	r3, r8
   1dc7c:	f00f fac4 	bl	2d208 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1dc80:	4621      	mov	r1, r4
   1dc82:	4630      	mov	r0, r6
   1dc84:	f00f fa35 	bl	2d0f2 <bt_att_send>
   1dc88:	e7ec      	b.n	1dc64 <bt_gatt_write_without_response_cb+0x88>
		return -ENOTCONN;
   1dc8a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1dc8e:	e7e9      	b.n	1dc64 <bt_gatt_write_without_response_cb+0x88>
   1dc90:	00033b7a 	.word	0x00033b7a
   1dc94:	00033ce2 	.word	0x00033ce2
   1dc98:	0002fc04 	.word	0x0002fc04

0001dc9c <bt_gatt_subscribe>:
{
   1dc9c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1dc9e:	7b43      	ldrb	r3, [r0, #13]
   1dca0:	2b07      	cmp	r3, #7
{
   1dca2:	4605      	mov	r5, r0
   1dca4:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1dca6:	d13b      	bne.n	1dd20 <bt_gatt_subscribe+0x84>
	sub = gatt_sub_find(conn);
   1dca8:	f7fe f802 	bl	1bcb0 <gatt_sub_find>
	if (!sub) {
   1dcac:	4604      	mov	r4, r0
   1dcae:	b958      	cbnz	r0, 1dcc8 <bt_gatt_subscribe+0x2c>
		sub = gatt_sub_find(NULL);
   1dcb0:	f7fd fffe 	bl	1bcb0 <gatt_sub_find>
		if (sub) {
   1dcb4:	4604      	mov	r4, r0
   1dcb6:	2800      	cmp	r0, #0
   1dcb8:	d035      	beq.n	1dd26 <bt_gatt_subscribe+0x8a>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1dcba:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1dcbe:	3001      	adds	r0, #1
   1dcc0:	f00f fb55 	bl	2d36e <bt_addr_le_copy>
			sub->id = conn->id;
   1dcc4:	7a2b      	ldrb	r3, [r5, #8]
   1dcc6:	7023      	strb	r3, [r4, #0]
	return list->head;
   1dcc8:	68a3      	ldr	r3, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1dcca:	b17b      	cbz	r3, 1dcec <bt_gatt_subscribe+0x50>
   1dccc:	3b18      	subs	r3, #24
   1dcce:	2200      	movs	r2, #0
		if (tmp == params) {
   1dcd0:	429e      	cmp	r6, r3
   1dcd2:	d02b      	beq.n	1dd2c <bt_gatt_subscribe+0x90>
		if (tmp->value_handle == params->value_handle &&
   1dcd4:	8998      	ldrh	r0, [r3, #12]
   1dcd6:	89b1      	ldrh	r1, [r6, #12]
   1dcd8:	4288      	cmp	r0, r1
   1dcda:	d104      	bne.n	1dce6 <bt_gatt_subscribe+0x4a>
   1dcdc:	8a18      	ldrh	r0, [r3, #16]
   1dcde:	8a31      	ldrh	r1, [r6, #16]
			has_subscription = true;
   1dce0:	4288      	cmp	r0, r1
   1dce2:	bf28      	it	cs
   1dce4:	2201      	movcs	r2, #1
	return node->next;
   1dce6:	699b      	ldr	r3, [r3, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1dce8:	b973      	cbnz	r3, 1dd08 <bt_gatt_subscribe+0x6c>
	if (!has_subscription) {
   1dcea:	b97a      	cbnz	r2, 1dd0c <bt_gatt_subscribe+0x70>
		err = gatt_write_ccc(conn, params);
   1dcec:	4628      	mov	r0, r5
   1dcee:	4631      	mov	r1, r6
   1dcf0:	f7fe fbf8 	bl	1c4e4 <gatt_write_ccc>
		if (err) {
   1dcf4:	4605      	mov	r5, r0
   1dcf6:	b148      	cbz	r0, 1dd0c <bt_gatt_subscribe+0x70>
	if (gatt_sub_is_empty(sub)) {
   1dcf8:	68a3      	ldr	r3, [r4, #8]
   1dcfa:	b91b      	cbnz	r3, 1dd04 <bt_gatt_subscribe+0x68>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1dcfc:	490d      	ldr	r1, [pc, #52]	; (1dd34 <bt_gatt_subscribe+0x98>)
   1dcfe:	1c60      	adds	r0, r4, #1
   1dd00:	f00f fb35 	bl	2d36e <bt_addr_le_copy>
}
   1dd04:	4628      	mov	r0, r5
   1dd06:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1dd08:	3b18      	subs	r3, #24
   1dd0a:	e7e1      	b.n	1dcd0 <bt_gatt_subscribe+0x34>
	return list->head;
   1dd0c:	68a2      	ldr	r2, [r4, #8]
	parent->next = child;
   1dd0e:	61b2      	str	r2, [r6, #24]
Z_GENLIST_PREPEND(slist, snode)
   1dd10:	68e2      	ldr	r2, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   1dd12:	f106 0318 	add.w	r3, r6, #24
	list->head = node;
   1dd16:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   1dd18:	b902      	cbnz	r2, 1dd1c <bt_gatt_subscribe+0x80>
	list->tail = node;
   1dd1a:	60e3      	str	r3, [r4, #12]
	return 0;
   1dd1c:	2500      	movs	r5, #0
   1dd1e:	e7f1      	b.n	1dd04 <bt_gatt_subscribe+0x68>
		return -ENOTCONN;
   1dd20:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   1dd24:	e7ee      	b.n	1dd04 <bt_gatt_subscribe+0x68>
		return -ENOMEM;
   1dd26:	f06f 050b 	mvn.w	r5, #11
   1dd2a:	e7eb      	b.n	1dd04 <bt_gatt_subscribe+0x68>
			return -EALREADY;
   1dd2c:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1dd30:	e7e8      	b.n	1dd04 <bt_gatt_subscribe+0x68>
   1dd32:	bf00      	nop
   1dd34:	00031d70 	.word	0x00031d70

0001dd38 <bt_gatt_unsubscribe>:
{
   1dd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1dd3c:	7b43      	ldrb	r3, [r0, #13]
   1dd3e:	2b07      	cmp	r3, #7
{
   1dd40:	4607      	mov	r7, r0
   1dd42:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1dd44:	d15b      	bne.n	1ddfe <bt_gatt_unsubscribe+0xc6>
	sub = gatt_sub_find(conn);
   1dd46:	f7fd ffb3 	bl	1bcb0 <gatt_sub_find>
	if (!sub) {
   1dd4a:	4606      	mov	r6, r0
   1dd4c:	2800      	cmp	r0, #0
   1dd4e:	d059      	beq.n	1de04 <bt_gatt_unsubscribe+0xcc>
	return list->head;
   1dd50:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1dd52:	2c00      	cmp	r4, #0
   1dd54:	d056      	beq.n	1de04 <bt_gatt_unsubscribe+0xcc>
   1dd56:	2300      	movs	r3, #0
   1dd58:	3c18      	subs	r4, #24
   1dd5a:	4698      	mov	r8, r3
		if (params == tmp) {
   1dd5c:	42a5      	cmp	r5, r4
   1dd5e:	d009      	beq.n	1dd74 <bt_gatt_unsubscribe+0x3c>
		if (tmp->value_handle == params->value_handle) {
   1dd60:	89a1      	ldrh	r1, [r4, #12]
   1dd62:	89aa      	ldrh	r2, [r5, #12]
			has_subscription = true;
   1dd64:	4291      	cmp	r1, r2
   1dd66:	bf08      	it	eq
   1dd68:	f04f 0801 	moveq.w	r8, #1
	return node->next;
   1dd6c:	69a4      	ldr	r4, [r4, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1dd6e:	b11c      	cbz	r4, 1dd78 <bt_gatt_unsubscribe+0x40>
   1dd70:	3c18      	subs	r4, #24
   1dd72:	e7f3      	b.n	1dd5c <bt_gatt_unsubscribe+0x24>
			found = true;
   1dd74:	2301      	movs	r3, #1
   1dd76:	e7f9      	b.n	1dd6c <bt_gatt_unsubscribe+0x34>
	if (!found) {
   1dd78:	2b00      	cmp	r3, #0
   1dd7a:	d043      	beq.n	1de04 <bt_gatt_unsubscribe+0xcc>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1dd7c:	f105 0014 	add.w	r0, r5, #20
   1dd80:	f00f faf8 	bl	2d374 <atomic_get>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   1dd84:	0743      	lsls	r3, r0, #29
   1dd86:	d503      	bpl.n	1dd90 <bt_gatt_unsubscribe+0x58>
		bt_gatt_cancel(conn, params);
   1dd88:	4629      	mov	r1, r5
   1dd8a:	4638      	mov	r0, r7
   1dd8c:	f00f fe3e 	bl	2da0c <bt_gatt_cancel>
	if (!has_subscription) {
   1dd90:	f1b8 0f00 	cmp.w	r8, #0
   1dd94:	d019      	beq.n	1ddca <bt_gatt_unsubscribe+0x92>
	return list->head;
   1dd96:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   1dd98:	f105 0218 	add.w	r2, r5, #24
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dd9c:	b153      	cbz	r3, 1ddb4 <bt_gatt_unsubscribe+0x7c>
   1dd9e:	429a      	cmp	r2, r3
   1dda0:	d123      	bne.n	1ddea <bt_gatt_unsubscribe+0xb2>
	return node->next;
   1dda2:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   1dda4:	b9dc      	cbnz	r4, 1ddde <bt_gatt_unsubscribe+0xa6>
   1dda6:	68f1      	ldr	r1, [r6, #12]
	list->head = node;
   1dda8:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   1ddaa:	428a      	cmp	r2, r1
   1ddac:	d100      	bne.n	1ddb0 <bt_gatt_unsubscribe+0x78>
	list->tail = node;
   1ddae:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   1ddb0:	2300      	movs	r3, #0
   1ddb2:	61ab      	str	r3, [r5, #24]
	if (gatt_sub_is_empty(sub)) {
   1ddb4:	68b3      	ldr	r3, [r6, #8]
   1ddb6:	b91b      	cbnz	r3, 1ddc0 <bt_gatt_unsubscribe+0x88>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1ddb8:	4914      	ldr	r1, [pc, #80]	; (1de0c <bt_gatt_unsubscribe+0xd4>)
   1ddba:	1c70      	adds	r0, r6, #1
   1ddbc:	f00f fad7 	bl	2d36e <bt_addr_le_copy>
	if (has_subscription) {
   1ddc0:	f1b8 0f00 	cmp.w	r8, #0
   1ddc4:	d114      	bne.n	1ddf0 <bt_gatt_unsubscribe+0xb8>
	return 0;
   1ddc6:	2000      	movs	r0, #0
   1ddc8:	e007      	b.n	1ddda <bt_gatt_unsubscribe+0xa2>
		params->value = 0x0000;
   1ddca:	f8a5 8010 	strh.w	r8, [r5, #16]
		err = gatt_write_ccc(conn, params);
   1ddce:	4629      	mov	r1, r5
   1ddd0:	4638      	mov	r0, r7
   1ddd2:	f7fe fb87 	bl	1c4e4 <gatt_write_ccc>
		if (err) {
   1ddd6:	2800      	cmp	r0, #0
   1ddd8:	d0dd      	beq.n	1dd96 <bt_gatt_unsubscribe+0x5e>
}
   1ddda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ddde:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dde0:	68f3      	ldr	r3, [r6, #12]
   1dde2:	429a      	cmp	r2, r3
	list->tail = node;
   1dde4:	bf08      	it	eq
   1dde6:	60f4      	streq	r4, [r6, #12]
}
   1dde8:	e7e2      	b.n	1ddb0 <bt_gatt_unsubscribe+0x78>
	return node->next;
   1ddea:	461c      	mov	r4, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ddec:	681b      	ldr	r3, [r3, #0]
   1ddee:	e7d5      	b.n	1dd9c <bt_gatt_unsubscribe+0x64>
		params->notify(conn, params, NULL, 0);
   1ddf0:	2300      	movs	r3, #0
   1ddf2:	682c      	ldr	r4, [r5, #0]
   1ddf4:	461a      	mov	r2, r3
   1ddf6:	4629      	mov	r1, r5
   1ddf8:	4638      	mov	r0, r7
   1ddfa:	47a0      	blx	r4
   1ddfc:	e7e3      	b.n	1ddc6 <bt_gatt_unsubscribe+0x8e>
		return -ENOTCONN;
   1ddfe:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1de02:	e7ea      	b.n	1ddda <bt_gatt_unsubscribe+0xa2>
		return -EINVAL;
   1de04:	f06f 0015 	mvn.w	r0, #21
   1de08:	e7e7      	b.n	1ddda <bt_gatt_unsubscribe+0xa2>
   1de0a:	bf00      	nop
   1de0c:	00031d70 	.word	0x00031d70

0001de10 <bt_gatt_mult_notification>:
{
   1de10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de14:	b087      	sub	sp, #28
   1de16:	af00      	add	r7, sp, #0
   1de18:	4680      	mov	r8, r0
   1de1a:	460c      	mov	r4, r1
   1de1c:	607a      	str	r2, [r7, #4]
	sub = gatt_sub_find(conn);
   1de1e:	f7fd ff47 	bl	1bcb0 <gatt_sub_find>
	if (!sub) {
   1de22:	4681      	mov	r9, r0
   1de24:	b340      	cbz	r0, 1de78 <bt_gatt_mult_notification+0x68>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1de26:	687a      	ldr	r2, [r7, #4]
   1de28:	4621      	mov	r1, r4
   1de2a:	f107 000c 	add.w	r0, r7, #12
   1de2e:	f010 faf6 	bl	2e41e <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1de32:	8a3b      	ldrh	r3, [r7, #16]
   1de34:	2b04      	cmp	r3, #4
   1de36:	d91f      	bls.n	1de78 <bt_gatt_mult_notification+0x68>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1de38:	2104      	movs	r1, #4
   1de3a:	f107 000c 	add.w	r0, r7, #12
   1de3e:	f010 fb29 	bl	2e494 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   1de42:	8a3a      	ldrh	r2, [r7, #16]
		len = sys_cpu_to_le16(nfy->len);
   1de44:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		handle = sys_cpu_to_le16(nfy->handle);
   1de48:	f8b0 b000 	ldrh.w	fp, [r0]
		if (len > buf.len) {
   1de4c:	4552      	cmp	r2, sl
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1de4e:	4605      	mov	r5, r0
		if (len > buf.len) {
   1de50:	d216      	bcs.n	1de80 <bt_gatt_mult_notification+0x70>
			LOG_ERR("Invalid data len %u > %u", len, length);
   1de52:	466c      	mov	r4, sp
   1de54:	b08a      	sub	sp, #40	; 0x28
   1de56:	466a      	mov	r2, sp
   1de58:	4922      	ldr	r1, [pc, #136]	; (1dee4 <bt_gatt_mult_notification+0xd4>)
   1de5a:	687b      	ldr	r3, [r7, #4]
   1de5c:	6151      	str	r1, [r2, #20]
   1de5e:	4922      	ldr	r1, [pc, #136]	; (1dee8 <bt_gatt_mult_notification+0xd8>)
   1de60:	6213      	str	r3, [r2, #32]
   1de62:	2305      	movs	r3, #5
   1de64:	e9c2 1a06 	strd	r1, sl, [r2, #24]
   1de68:	4820      	ldr	r0, [pc, #128]	; (1deec <bt_gatt_mult_notification+0xdc>)
   1de6a:	f842 3f10 	str.w	r3, [r2, #16]!
   1de6e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1de72:	f00f fad1 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1de76:	46a5      	mov	sp, r4
}
   1de78:	371c      	adds	r7, #28
   1de7a:	46bd      	mov	sp, r7
   1de7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   1de80:	f8d9 6008 	ldr.w	r6, [r9, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1de84:	b326      	cbz	r6, 1ded0 <bt_gatt_mult_notification+0xc0>
	return node->next;
   1de86:	6834      	ldr	r4, [r6, #0]
   1de88:	b104      	cbz	r4, 1de8c <bt_gatt_mult_notification+0x7c>
   1de8a:	3c18      	subs	r4, #24
			if (handle != params->value_handle) {
   1de8c:	f836 2c0c 	ldrh.w	r2, [r6, #-12]
   1de90:	455a      	cmp	r2, fp
   1de92:	d11a      	bne.n	1deca <bt_gatt_mult_notification+0xba>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1de94:	3e18      	subs	r6, #24
   1de96:	e007      	b.n	1dea8 <bt_gatt_mult_notification+0x98>
   1de98:	4626      	mov	r6, r4
   1de9a:	69a4      	ldr	r4, [r4, #24]
   1de9c:	89b2      	ldrh	r2, [r6, #12]
   1de9e:	b1ec      	cbz	r4, 1dedc <bt_gatt_mult_notification+0xcc>
			if (handle != params->value_handle) {
   1dea0:	455a      	cmp	r2, fp
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1dea2:	f1a4 0418 	sub.w	r4, r4, #24
			if (handle != params->value_handle) {
   1dea6:	d1f7      	bne.n	1de98 <bt_gatt_mult_notification+0x88>
			if (check_subscribe_security_level(conn, params)) {
   1dea8:	f898 0009 	ldrb.w	r0, [r8, #9]
   1deac:	7cb2      	ldrb	r2, [r6, #18]
   1deae:	4290      	cmp	r0, r2
   1deb0:	d30b      	bcc.n	1deca <bt_gatt_mult_notification+0xba>
				if (params->notify(conn, params, nfy->value, len) ==
   1deb2:	f8d6 c000 	ldr.w	ip, [r6]
   1deb6:	4653      	mov	r3, sl
   1deb8:	1d2a      	adds	r2, r5, #4
   1deba:	4631      	mov	r1, r6
   1debc:	4640      	mov	r0, r8
   1debe:	47e0      	blx	ip
   1dec0:	b918      	cbnz	r0, 1deca <bt_gatt_mult_notification+0xba>
					bt_gatt_unsubscribe(conn, params);
   1dec2:	4631      	mov	r1, r6
   1dec4:	4640      	mov	r0, r8
   1dec6:	f7ff ff37 	bl	1dd38 <bt_gatt_unsubscribe>
   1deca:	4626      	mov	r6, r4
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1decc:	2c00      	cmp	r4, #0
   1dece:	d1e4      	bne.n	1de9a <bt_gatt_mult_notification+0x8a>
		net_buf_simple_pull_mem(&buf, len);
   1ded0:	4651      	mov	r1, sl
   1ded2:	f107 000c 	add.w	r0, r7, #12
   1ded6:	f010 fadd 	bl	2e494 <net_buf_simple_pull_mem>
   1deda:	e7aa      	b.n	1de32 <bt_gatt_mult_notification+0x22>
			if (handle != params->value_handle) {
   1dedc:	455a      	cmp	r2, fp
   1dede:	d0e3      	beq.n	1dea8 <bt_gatt_mult_notification+0x98>
   1dee0:	e7f6      	b.n	1ded0 <bt_gatt_mult_notification+0xc0>
   1dee2:	bf00      	nop
   1dee4:	00033bad 	.word	0x00033bad
   1dee8:	00033d7e 	.word	0x00033d7e
   1deec:	0002fc04 	.word	0x0002fc04

0001def0 <bt_gatt_connected>:
{
   1def0:	b5b0      	push	{r4, r5, r7, lr}
   1def2:	b08e      	sub	sp, #56	; 0x38
   1def4:	af02      	add	r7, sp, #8
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1def6:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   1defa:	4604      	mov	r4, r0
	data.conn = conn;
   1defc:	6078      	str	r0, [r7, #4]
	data.sec = BT_SECURITY_L1;
   1defe:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1df00:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1df02:	723b      	strb	r3, [r7, #8]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1df04:	4629      	mov	r1, r5
   1df06:	f00e f8ef 	bl	2c0e8 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1df0a:	b1a0      	cbz	r0, 1df36 <bt_gatt_connected+0x46>
		if (conn->id) {
   1df0c:	7a22      	ldrb	r2, [r4, #8]
   1df0e:	2a00      	cmp	r2, #0
   1df10:	d036      	beq.n	1df80 <bt_gatt_connected+0x90>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1df12:	2104      	movs	r1, #4
   1df14:	4638      	mov	r0, r7
   1df16:	f00b fa6b 	bl	293f0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1df1a:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1df1c:	4a19      	ldr	r2, [pc, #100]	; (1df84 <bt_gatt_connected+0x94>)
   1df1e:	2124      	movs	r1, #36	; 0x24
   1df20:	f107 000c 	add.w	r0, r7, #12
   1df24:	462b      	mov	r3, r5
   1df26:	f7f8 fbcb 	bl	166c0 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1df2a:	f107 020c 	add.w	r2, r7, #12
   1df2e:	4916      	ldr	r1, [pc, #88]	; (1df88 <bt_gatt_connected+0x98>)
   1df30:	4610      	mov	r0, r2
   1df32:	f7f6 fde3 	bl	14afc <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1df36:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1df3a:	4a14      	ldr	r2, [pc, #80]	; (1df8c <bt_gatt_connected+0x9c>)
   1df3c:	1d3b      	adds	r3, r7, #4
   1df3e:	2001      	movs	r0, #1
   1df40:	f00f fc2e 	bl	2d7a0 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1df44:	4620      	mov	r0, r4
   1df46:	f00e fae3 	bl	2c510 <bt_conn_get_security>
   1df4a:	7a39      	ldrb	r1, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1df4c:	4288      	cmp	r0, r1
   1df4e:	d214      	bcs.n	1df7a <bt_gatt_connected+0x8a>
		int err = bt_conn_set_security(conn, data.sec);
   1df50:	4620      	mov	r0, r4
   1df52:	f00e faad 	bl	2c4b0 <bt_conn_set_security>
		if (err) {
   1df56:	b180      	cbz	r0, 1df7a <bt_gatt_connected+0x8a>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   1df58:	466c      	mov	r4, sp
   1df5a:	b088      	sub	sp, #32
   1df5c:	aa02      	add	r2, sp, #8
   1df5e:	4b0c      	ldr	r3, [pc, #48]	; (1df90 <bt_gatt_connected+0xa0>)
   1df60:	6153      	str	r3, [r2, #20]
   1df62:	4b0c      	ldr	r3, [pc, #48]	; (1df94 <bt_gatt_connected+0xa4>)
   1df64:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1df68:	2304      	movs	r3, #4
   1df6a:	f842 3f10 	str.w	r3, [r2, #16]!
   1df6e:	480a      	ldr	r0, [pc, #40]	; (1df98 <bt_gatt_connected+0xa8>)
   1df70:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1df74:	f00f fa50 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1df78:	46a5      	mov	sp, r4
}
   1df7a:	3730      	adds	r7, #48	; 0x30
   1df7c:	46bd      	mov	sp, r7
   1df7e:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1df80:	9200      	str	r2, [sp, #0]
   1df82:	e7cb      	b.n	1df1c <bt_gatt_connected+0x2c>
   1df84:	00033a36 	.word	0x00033a36
   1df88:	0001ccc5 	.word	0x0001ccc5
   1df8c:	0001d0ad 	.word	0x0001d0ad
   1df90:	00033bca 	.word	0x00033bca
   1df94:	00033cbd 	.word	0x00033cbd
   1df98:	0002fc04 	.word	0x0002fc04

0001df9c <bt_gatt_att_max_mtu_changed>:
{
   1df9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1df9e:	4b08      	ldr	r3, [pc, #32]	; (1dfc0 <bt_gatt_att_max_mtu_changed+0x24>)
   1dfa0:	681c      	ldr	r4, [r3, #0]
   1dfa2:	4605      	mov	r5, r0
   1dfa4:	460e      	mov	r6, r1
   1dfa6:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1dfa8:	b14c      	cbz	r4, 1dfbe <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1dfaa:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1dfae:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1dfb0:	b11b      	cbz	r3, 1dfba <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1dfb2:	463a      	mov	r2, r7
   1dfb4:	4631      	mov	r1, r6
   1dfb6:	4628      	mov	r0, r5
   1dfb8:	4798      	blx	r3
	return node->next;
   1dfba:	6864      	ldr	r4, [r4, #4]
   1dfbc:	e7f4      	b.n	1dfa8 <bt_gatt_att_max_mtu_changed+0xc>
}
   1dfbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dfc0:	200034c8 	.word	0x200034c8

0001dfc4 <bt_gatt_encrypt_change>:
{
   1dfc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	data.sec = BT_SECURITY_L1;
   1dfc6:	2301      	movs	r3, #1
{
   1dfc8:	4605      	mov	r5, r0
	data.conn = conn;
   1dfca:	9000      	str	r0, [sp, #0]
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1dfcc:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1dfd0:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1dfd2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1dfd6:	f00e f887 	bl	2c0e8 <bt_addr_le_is_bonded>
   1dfda:	b978      	cbnz	r0, 1dffc <bt_gatt_encrypt_change+0x38>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1dfdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1dfe0:	2001      	movs	r0, #1
   1dfe2:	4a14      	ldr	r2, [pc, #80]	; (1e034 <bt_gatt_encrypt_change+0x70>)
   1dfe4:	466b      	mov	r3, sp
   1dfe6:	f00f fbdb 	bl	2d7a0 <bt_gatt_foreach_attr>
	if (!bt_gatt_change_aware(conn, false)) {
   1dfea:	2100      	movs	r1, #0
   1dfec:	4628      	mov	r0, r5
   1dfee:	f00f fd5f 	bl	2dab0 <bt_gatt_change_aware>
   1dff2:	b908      	cbnz	r0, 1dff8 <bt_gatt_encrypt_change+0x34>
		sc_indicate(0x0001, 0xffff);
   1dff4:	f7fe fa8e 	bl	1c514 <sc_indicate.constprop.0>
}
   1dff8:	b003      	add	sp, #12
   1dffa:	bd30      	pop	{r4, r5, pc}
	sub = gatt_sub_find(conn);
   1dffc:	4628      	mov	r0, r5
   1dffe:	f7fd fe57 	bl	1bcb0 <gatt_sub_find>
	if (!sub) {
   1e002:	2800      	cmp	r0, #0
   1e004:	d0ea      	beq.n	1dfdc <bt_gatt_encrypt_change+0x18>
	return list->head;
   1e006:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1e008:	2c00      	cmp	r4, #0
   1e00a:	d0e7      	beq.n	1dfdc <bt_gatt_encrypt_change+0x18>
   1e00c:	3c18      	subs	r4, #24
		if (!atomic_test_bit(params->flags,
   1e00e:	f104 0314 	add.w	r3, r4, #20
   1e012:	4618      	mov	r0, r3
   1e014:	f00f f9ae 	bl	2d374 <atomic_get>
   1e018:	0702      	lsls	r2, r0, #28
   1e01a:	d408      	bmi.n	1e02e <bt_gatt_encrypt_change+0x6a>
   1e01c:	4618      	mov	r0, r3
   1e01e:	f00f f9a9 	bl	2d374 <atomic_get>
				     BT_GATT_SUBSCRIBE_FLAG_SENT) &&
   1e022:	0783      	lsls	r3, r0, #30
   1e024:	d403      	bmi.n	1e02e <bt_gatt_encrypt_change+0x6a>
			gatt_write_ccc(conn, params);
   1e026:	4621      	mov	r1, r4
   1e028:	4628      	mov	r0, r5
   1e02a:	f7fe fa5b 	bl	1c4e4 <gatt_write_ccc>
	return node->next;
   1e02e:	69a4      	ldr	r4, [r4, #24]
   1e030:	e7ea      	b.n	1e008 <bt_gatt_encrypt_change+0x44>
   1e032:	bf00      	nop
   1e034:	0001d0ad 	.word	0x0001d0ad

0001e038 <bt_gatt_store_ccc>:
{
   1e038:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e03a:	b0c1      	sub	sp, #260	; 0x104
   1e03c:	af02      	add	r7, sp, #8
	save.count = 0;
   1e03e:	2300      	movs	r3, #0
{
   1e040:	4604      	mov	r4, r0
   1e042:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1e044:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   1e046:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   1e04a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1e04e:	4a1e      	ldr	r2, [pc, #120]	; (1e0c8 <bt_gatt_store_ccc+0x90>)
   1e050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1e054:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e058:	2001      	movs	r0, #1
   1e05a:	f00f fba1 	bl	2d7a0 <bt_gatt_foreach_attr>
	if (id) {
   1e05e:	b374      	cbz	r4, 1e0be <bt_gatt_store_ccc+0x86>
		u8_to_dec(id_str, sizeof(id_str), id);
   1e060:	1d3e      	adds	r6, r7, #4
   1e062:	4622      	mov	r2, r4
   1e064:	2104      	movs	r1, #4
   1e066:	4630      	mov	r0, r6
   1e068:	f00b f9c2 	bl	293f0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1e06c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1e06e:	4a17      	ldr	r2, [pc, #92]	; (1e0cc <bt_gatt_store_ccc+0x94>)
   1e070:	462b      	mov	r3, r5
   1e072:	2124      	movs	r1, #36	; 0x24
   1e074:	f107 0008 	add.w	r0, r7, #8
   1e078:	f7f8 fb22 	bl	166c0 <bt_settings_encode_key>
	if (save.count) {
   1e07c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1e080:	b1fa      	cbz	r2, 1e0c2 <bt_gatt_store_ccc+0x8a>
		len = save.count * sizeof(*save.store);
   1e082:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1e084:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   1e088:	f107 0008 	add.w	r0, r7, #8
   1e08c:	f7f6 fcd6 	bl	14a3c <settings_save_one>
	if (err) {
   1e090:	4604      	mov	r4, r0
   1e092:	b180      	cbz	r0, 1e0b6 <bt_gatt_store_ccc+0x7e>
		LOG_ERR("Failed to store CCCs (err %d)", err);
   1e094:	466d      	mov	r5, sp
   1e096:	b088      	sub	sp, #32
   1e098:	aa02      	add	r2, sp, #8
   1e09a:	4b0d      	ldr	r3, [pc, #52]	; (1e0d0 <bt_gatt_store_ccc+0x98>)
   1e09c:	6153      	str	r3, [r2, #20]
   1e09e:	4b0d      	ldr	r3, [pc, #52]	; (1e0d4 <bt_gatt_store_ccc+0x9c>)
   1e0a0:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e0a4:	2304      	movs	r3, #4
   1e0a6:	f842 3f10 	str.w	r3, [r2, #16]!
   1e0aa:	480b      	ldr	r0, [pc, #44]	; (1e0d8 <bt_gatt_store_ccc+0xa0>)
   1e0ac:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e0b0:	f00f f9b2 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1e0b4:	46ad      	mov	sp, r5
}
   1e0b6:	4620      	mov	r0, r4
   1e0b8:	37fc      	adds	r7, #252	; 0xfc
   1e0ba:	46bd      	mov	sp, r7
   1e0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1e0be:	9400      	str	r4, [sp, #0]
   1e0c0:	e7d5      	b.n	1e06e <bt_gatt_store_ccc+0x36>
		str = NULL;
   1e0c2:	4611      	mov	r1, r2
   1e0c4:	e7e0      	b.n	1e088 <bt_gatt_store_ccc+0x50>
   1e0c6:	bf00      	nop
   1e0c8:	0001c1cd 	.word	0x0001c1cd
   1e0cc:	00033a36 	.word	0x00033a36
   1e0d0:	00033bfa 	.word	0x00033bfa
   1e0d4:	00033c7e 	.word	0x00033c7e
   1e0d8:	0002fc04 	.word	0x0002fc04

0001e0dc <bt_gatt_identity_resolved>:
{
   1e0dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1e0e0:	f100 0888 	add.w	r8, r0, #136	; 0x88
	struct addr_match user_data = {
   1e0e4:	e9cd 1200 	strd	r1, r2, [sp]
{
   1e0e8:	4604      	mov	r4, r0
   1e0ea:	460f      	mov	r7, r1
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1e0ec:	7a00      	ldrb	r0, [r0, #8]
   1e0ee:	4641      	mov	r1, r8
{
   1e0f0:	4616      	mov	r6, r2
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1e0f2:	f00d fff9 	bl	2c0e8 <bt_addr_le_is_bonded>
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   1e0f6:	4a0f      	ldr	r2, [pc, #60]	; (1e134 <bt_gatt_identity_resolved+0x58>)
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1e0f8:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   1e0fa:	466b      	mov	r3, sp
   1e0fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e100:	2001      	movs	r0, #1
   1e102:	f00f fb4d 	bl	2d7a0 <bt_gatt_foreach_attr>
	if (is_bonded) {
   1e106:	b11d      	cbz	r5, 1e110 <bt_gatt_identity_resolved+0x34>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1e108:	7a20      	ldrb	r0, [r4, #8]
   1e10a:	4641      	mov	r1, r8
   1e10c:	f7ff ff94 	bl	1e038 <bt_gatt_store_ccc>
	struct gatt_cf_cfg *cfg = find_cf_cfg_by_addr(conn->id, private_addr);
   1e110:	7a20      	ldrb	r0, [r4, #8]
   1e112:	4639      	mov	r1, r7
   1e114:	f7fd fcba 	bl	1ba8c <find_cf_cfg_by_addr>
	if (cfg) {
   1e118:	b140      	cbz	r0, 1e12c <bt_gatt_identity_resolved+0x50>
		bt_addr_le_copy(&cfg->peer, id_addr);
   1e11a:	4631      	mov	r1, r6
   1e11c:	3001      	adds	r0, #1
   1e11e:	f00f f926 	bl	2d36e <bt_addr_le_copy>
		if (is_bonded) {
   1e122:	b11d      	cbz	r5, 1e12c <bt_gatt_identity_resolved+0x50>
			bt_gatt_store_cf(conn->id, &conn->le.dst);
   1e124:	7a20      	ldrb	r0, [r4, #8]
   1e126:	4641      	mov	r1, r8
   1e128:	f7fe fb84 	bl	1c834 <bt_gatt_store_cf.isra.0>
}
   1e12c:	b002      	add	sp, #8
   1e12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e132:	bf00      	nop
   1e134:	0001c1a1 	.word	0x0001c1a1

0001e138 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1e138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e13c:	4604      	mov	r4, r0
   1e13e:	b085      	sub	sp, #20
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1e140:	4603      	mov	r3, r0
{
   1e142:	af00      	add	r7, sp, #0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1e144:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e148:	2001      	movs	r0, #1
   1e14a:	4a47      	ldr	r2, [pc, #284]	; (1e268 <bt_gatt_disconnected+0x130>)
	/* Clear pending notifications */
	cleanup_notify(conn);
#endif /* CONFIG_BT_GATT_NOTIFY_MULTIPLE */

#if defined(CONFIG_BT_SETTINGS_DELAYED_STORE)
	if (gatt_delayed_store_find(conn->id, &conn->le.dst)) {
   1e14c:	f104 0688 	add.w	r6, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1e150:	f00f fb26 	bl	2d7a0 <bt_gatt_foreach_attr>
	if (gatt_delayed_store_find(conn->id, &conn->le.dst)) {
   1e154:	7a20      	ldrb	r0, [r4, #8]
   1e156:	4631      	mov	r1, r6
   1e158:	f7fd fcba 	bl	1bad0 <gatt_delayed_store_find>
   1e15c:	b1b8      	cbz	r0, 1e18e <bt_gatt_disconnected+0x56>
		int err = k_work_reschedule(&gatt_delayed_store.work, K_NO_WAIT);
   1e15e:	4843      	ldr	r0, [pc, #268]	; (1e26c <bt_gatt_disconnected+0x134>)
   1e160:	2200      	movs	r2, #0
   1e162:	2300      	movs	r3, #0
   1e164:	f007 fb3a 	bl	257dc <k_work_reschedule>

		if (err < 0) {
   1e168:	2800      	cmp	r0, #0
   1e16a:	da10      	bge.n	1e18e <bt_gatt_disconnected+0x56>
			LOG_ERR("Unable to reschedule settings storage (err %d)",
   1e16c:	466d      	mov	r5, sp
   1e16e:	b088      	sub	sp, #32
   1e170:	466a      	mov	r2, sp
   1e172:	4b3f      	ldr	r3, [pc, #252]	; (1e270 <bt_gatt_disconnected+0x138>)
   1e174:	6153      	str	r3, [r2, #20]
   1e176:	4b3f      	ldr	r3, [pc, #252]	; (1e274 <bt_gatt_disconnected+0x13c>)
   1e178:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e17c:	2304      	movs	r3, #4
   1e17e:	f842 3f10 	str.w	r3, [r2, #16]!
   1e182:	483d      	ldr	r0, [pc, #244]	; (1e278 <bt_gatt_disconnected+0x140>)
   1e184:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e188:	f00f f946 	bl	2d418 <z_log_msg_static_create.constprop.0>
   1e18c:	46ad      	mov	sp, r5
	}
#endif	/* CONFIG_BT_SETTINGS_DELAYED_STORE */

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1e18e:	7a20      	ldrb	r0, [r4, #8]
   1e190:	4631      	mov	r1, r6
   1e192:	f00d ffa9 	bl	2c0e8 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1e196:	b150      	cbz	r0, 1e1ae <bt_gatt_disconnected+0x76>
		struct addr_with_id addr_with_id = {
   1e198:	7a23      	ldrb	r3, [r4, #8]
   1e19a:	733b      	strb	r3, [r7, #12]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1e19c:	4a37      	ldr	r2, [pc, #220]	; (1e27c <bt_gatt_disconnected+0x144>)
		struct addr_with_id addr_with_id = {
   1e19e:	60be      	str	r6, [r7, #8]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1e1a0:	f107 0308 	add.w	r3, r7, #8
   1e1a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e1a8:	2001      	movs	r0, #1
   1e1aa:	f00f faf9 	bl	2d7a0 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1e1ae:	4620      	mov	r0, r4
   1e1b0:	f7fd fd7e 	bl	1bcb0 <gatt_sub_find>
	if (!sub) {
   1e1b4:	4680      	mov	r8, r0
   1e1b6:	b948      	cbnz	r0, 1e1cc <bt_gatt_disconnected+0x94>
	cfg = find_cf_cfg(conn);
   1e1b8:	4620      	mov	r0, r4
   1e1ba:	f7fd fd37 	bl	1bc2c <find_cf_cfg>
	if (!cfg) {
   1e1be:	4605      	mov	r5, r0
   1e1c0:	2800      	cmp	r0, #0
   1e1c2:	d142      	bne.n	1e24a <bt_gatt_disconnected+0x112>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1e1c4:	3714      	adds	r7, #20
   1e1c6:	46bd      	mov	sp, r7
   1e1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   1e1cc:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1e1ce:	2d00      	cmp	r5, #0
   1e1d0:	d0f2      	beq.n	1e1b8 <bt_gatt_disconnected+0x80>
	return node->next;
   1e1d2:	f855 9918 	ldr.w	r9, [r5], #-24
   1e1d6:	f1b9 0f00 	cmp.w	r9, #0
   1e1da:	d001      	beq.n	1e1e0 <bt_gatt_disconnected+0xa8>
   1e1dc:	f1a9 0918 	sub.w	r9, r9, #24
{
   1e1e0:	f04f 0a00 	mov.w	sl, #0
			params->value = 0U;
   1e1e4:	46d3      	mov	fp, sl
   1e1e6:	e001      	b.n	1e1ec <bt_gatt_disconnected+0xb4>
{
   1e1e8:	464d      	mov	r5, r9
   1e1ea:	4699      	mov	r9, r3
		atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_SENT);
   1e1ec:	f105 0314 	add.w	r3, r5, #20
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e1f0:	4618      	mov	r0, r3
   1e1f2:	f06f 0108 	mvn.w	r1, #8
   1e1f6:	607b      	str	r3, [r7, #4]
   1e1f8:	f00f f8aa 	bl	2d350 <atomic_and>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1e1fc:	7a20      	ldrb	r0, [r4, #8]
   1e1fe:	4631      	mov	r1, r6
   1e200:	f00d ff72 	bl	2c0e8 <bt_addr_le_is_bonded>
   1e204:	687b      	ldr	r3, [r7, #4]
   1e206:	b980      	cbnz	r0, 1e22a <bt_gatt_disconnected+0xf2>
			params->value = 0U;
   1e208:	f8a5 b010 	strh.w	fp, [r5, #16]
			gatt_sub_remove(conn, sub, prev, params);
   1e20c:	462b      	mov	r3, r5
   1e20e:	4652      	mov	r2, sl
   1e210:	4641      	mov	r1, r8
   1e212:	4620      	mov	r0, r4
   1e214:	f7fd fca0 	bl	1bb58 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1e218:	f1b9 0f00 	cmp.w	r9, #0
   1e21c:	d0cc      	beq.n	1e1b8 <bt_gatt_disconnected+0x80>
   1e21e:	f8d9 3018 	ldr.w	r3, [r9, #24]
   1e222:	2b00      	cmp	r3, #0
   1e224:	d0e0      	beq.n	1e1e8 <bt_gatt_disconnected+0xb0>
   1e226:	3b18      	subs	r3, #24
   1e228:	e7de      	b.n	1e1e8 <bt_gatt_disconnected+0xb0>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1e22a:	4618      	mov	r0, r3
   1e22c:	f00f f8a2 	bl	2d374 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1e230:	07c3      	lsls	r3, r0, #31
   1e232:	d4e9      	bmi.n	1e208 <bt_gatt_disconnected+0xd0>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   1e234:	f898 3001 	ldrb.w	r3, [r8, #1]
   1e238:	b123      	cbz	r3, 1e244 <bt_gatt_disconnected+0x10c>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1e23a:	4631      	mov	r1, r6
   1e23c:	f108 0001 	add.w	r0, r8, #1
   1e240:	f00f f895 	bl	2d36e <bt_addr_le_copy>
			prev = &params->node;
   1e244:	f105 0a18 	add.w	sl, r5, #24
   1e248:	e7e6      	b.n	1e218 <bt_gatt_disconnected+0xe0>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1e24a:	7a20      	ldrb	r0, [r4, #8]
   1e24c:	4631      	mov	r1, r6
   1e24e:	f00d ff4b 	bl	2c0e8 <bt_addr_le_is_bonded>
   1e252:	b918      	cbnz	r0, 1e25c <bt_gatt_disconnected+0x124>
		clear_cf_cfg(cfg);
   1e254:	4628      	mov	r0, r5
   1e256:	f7fd fff3 	bl	1c240 <clear_cf_cfg>
   1e25a:	e7b3      	b.n	1e1c4 <bt_gatt_disconnected+0x8c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1e25c:	4631      	mov	r1, r6
   1e25e:	1c68      	adds	r0, r5, #1
   1e260:	f00f f885 	bl	2d36e <bt_addr_le_copy>
}
   1e264:	e7ae      	b.n	1e1c4 <bt_gatt_disconnected+0x8c>
   1e266:	bf00      	nop
   1e268:	0001c359 	.word	0x0001c359
   1e26c:	20002178 	.word	0x20002178
   1e270:	00033c1c 	.word	0x00033c1c
   1e274:	00033c4f 	.word	0x00033c4f
   1e278:	0002fc04 	.word	0x0002fc04
   1e27c:	0001c179 	.word	0x0001c179

0001e280 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1e280:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1e282:	4b05      	ldr	r3, [pc, #20]	; (1e298 <smp_find+0x18>)
{
   1e284:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1e286:	4618      	mov	r0, r3
   1e288:	f00f fca9 	bl	2dbde <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1e28c:	3b04      	subs	r3, #4
   1e28e:	2800      	cmp	r0, #0
}
   1e290:	bf14      	ite	ne
   1e292:	4618      	movne	r0, r3
   1e294:	2000      	moveq	r0, #0
   1e296:	bd08      	pop	{r3, pc}
   1e298:	2000227c 	.word	0x2000227c

0001e29c <latch_auth_cb>:
{
   1e29c:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1e29e:	4a0c      	ldr	r2, [pc, #48]	; (1e2d0 <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e2a0:	6811      	ldr	r1, [r2, #0]
   1e2a2:	4a0c      	ldr	r2, [pc, #48]	; (1e2d4 <latch_auth_cb+0x38>)
   1e2a4:	f3bf 8f5b 	dmb	ish
   1e2a8:	f500 73a8 	add.w	r3, r0, #336	; 0x150
   1e2ac:	e853 4f00 	ldrex	r4, [r3]
   1e2b0:	4294      	cmp	r4, r2
   1e2b2:	d104      	bne.n	1e2be <latch_auth_cb+0x22>
   1e2b4:	e843 1c00 	strex	ip, r1, [r3]
   1e2b8:	f1bc 0f00 	cmp.w	ip, #0
   1e2bc:	d1f6      	bne.n	1e2ac <latch_auth_cb+0x10>
   1e2be:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e2c2:	f3bf 8f5b 	dmb	ish
   1e2c6:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
   1e2ca:	f3bf 8f5b 	dmb	ish
}
   1e2ce:	bd10      	pop	{r4, pc}
   1e2d0:	200033fc 	.word	0x200033fc
   1e2d4:	20002278 	.word	0x20002278

0001e2d8 <get_io_capa>:
{
   1e2d8:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e2da:	f7ff ffdf 	bl	1e29c <latch_auth_cb>
	if (!smp_auth_cb) {
   1e2de:	4603      	mov	r3, r0
   1e2e0:	b1c8      	cbz	r0, 1e316 <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1e2e2:	e9d0 1200 	ldrd	r1, r2, [r0]
   1e2e6:	b921      	cbnz	r1, 1e2f2 <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1e2e8:	2a00      	cmp	r2, #0
   1e2ea:	bf0c      	ite	eq
   1e2ec:	2003      	moveq	r0, #3
   1e2ee:	2002      	movne	r0, #2
   1e2f0:	e010      	b.n	1e314 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1e2f2:	b132      	cbz	r2, 1e302 <get_io_capa+0x2a>
   1e2f4:	6883      	ldr	r3, [r0, #8]
   1e2f6:	b913      	cbnz	r3, 1e2fe <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1e2f8:	4b09      	ldr	r3, [pc, #36]	; (1e320 <get_io_capa+0x48>)
   1e2fa:	781b      	ldrb	r3, [r3, #0]
   1e2fc:	b933      	cbnz	r3, 1e30c <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1e2fe:	2004      	movs	r0, #4
   1e300:	e008      	b.n	1e314 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1e302:	4907      	ldr	r1, [pc, #28]	; (1e320 <get_io_capa+0x48>)
   1e304:	7808      	ldrb	r0, [r1, #0]
   1e306:	b128      	cbz	r0, 1e314 <get_io_capa+0x3c>
   1e308:	689b      	ldr	r3, [r3, #8]
   1e30a:	b933      	cbnz	r3, 1e31a <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   1e30c:	3a00      	subs	r2, #0
   1e30e:	bf18      	it	ne
   1e310:	2201      	movne	r2, #1
   1e312:	0050      	lsls	r0, r2, #1
}
   1e314:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1e316:	2003      	movs	r0, #3
   1e318:	e7fc      	b.n	1e314 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   1e31a:	2001      	movs	r0, #1
   1e31c:	e7fa      	b.n	1e314 <get_io_capa+0x3c>
   1e31e:	bf00      	nop
   1e320:	20004486 	.word	0x20004486

0001e324 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1e324:	b5b0      	push	{r4, r5, r7, lr}
   1e326:	b082      	sub	sp, #8
   1e328:	4613      	mov	r3, r2
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1e32a:	2200      	movs	r2, #0
   1e32c:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1e32e:	af02      	add	r7, sp, #8
   1e330:	4604      	mov	r4, r0
   1e332:	460d      	mov	r5, r1
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1e334:	460a      	mov	r2, r1
   1e336:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   1e33a:	2106      	movs	r1, #6
   1e33c:	f00e f9fd 	bl	2c73a <bt_l2cap_send_cb>
	if (err) {
   1e340:	b1b0      	cbz	r0, 1e370 <smp_send.constprop.0+0x4c>
		if (err == -ENOBUFS) {
   1e342:	3069      	adds	r0, #105	; 0x69
   1e344:	d10f      	bne.n	1e366 <smp_send.constprop.0+0x42>
			LOG_ERR("Ran out of TX buffers or contexts.");
   1e346:	466c      	mov	r4, sp
   1e348:	b088      	sub	sp, #32
   1e34a:	aa02      	add	r2, sp, #8
   1e34c:	4b0c      	ldr	r3, [pc, #48]	; (1e380 <smp_send.constprop.0+0x5c>)
   1e34e:	6153      	str	r3, [r2, #20]
   1e350:	4b0c      	ldr	r3, [pc, #48]	; (1e384 <smp_send.constprop.0+0x60>)
   1e352:	6193      	str	r3, [r2, #24]
   1e354:	2303      	movs	r3, #3
   1e356:	f842 3f10 	str.w	r3, [r2, #16]!
   1e35a:	480b      	ldr	r0, [pc, #44]	; (1e388 <smp_send.constprop.0+0x64>)
   1e35c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e360:	f00f fc76 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   1e364:	46a5      	mov	sp, r4
		net_buf_unref(buf);
   1e366:	4628      	mov	r0, r5
   1e368:	f002 fb5a 	bl	20a20 <net_buf_unref>
}
   1e36c:	46bd      	mov	sp, r7
   1e36e:	bdb0      	pop	{r4, r5, r7, pc}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1e370:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1e374:	2300      	movs	r3, #0
   1e376:	f504 7090 	add.w	r0, r4, #288	; 0x120
   1e37a:	f007 fa2f 	bl	257dc <k_work_reschedule>
   1e37e:	e7f5      	b.n	1e36c <smp_send.constprop.0+0x48>
   1e380:	00033496 	.word	0x00033496
   1e384:	00034583 	.word	0x00034583
   1e388:	0002fc6c 	.word	0x0002fc6c

0001e38c <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1e38c:	b580      	push	{r7, lr}
   1e38e:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   1e390:	b088      	sub	sp, #32
   1e392:	466a      	mov	r2, sp
   1e394:	4b08      	ldr	r3, [pc, #32]	; (1e3b8 <bt_smp_accept.part.0+0x2c>)
   1e396:	6153      	str	r3, [r2, #20]
   1e398:	4b08      	ldr	r3, [pc, #32]	; (1e3bc <bt_smp_accept.part.0+0x30>)
   1e39a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e39e:	2304      	movs	r3, #4
   1e3a0:	f842 3f10 	str.w	r3, [r2, #16]!
   1e3a4:	4806      	ldr	r0, [pc, #24]	; (1e3c0 <bt_smp_accept.part.0+0x34>)
   1e3a6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e3aa:	f00f fc51 	bl	2dc50 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1e3ae:	f06f 000b 	mvn.w	r0, #11
   1e3b2:	46bd      	mov	sp, r7
   1e3b4:	bd80      	pop	{r7, pc}
   1e3b6:	bf00      	nop
   1e3b8:	00033e46 	.word	0x00033e46
   1e3bc:	00034509 	.word	0x00034509
   1e3c0:	0002fc6c 	.word	0x0002fc6c

0001e3c4 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   1e3c4:	4b06      	ldr	r3, [pc, #24]	; (1e3e0 <bt_smp_accept+0x1c>)
   1e3c6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   1e3ca:	b10a      	cbz	r2, 1e3d0 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1e3cc:	f7ff bfde 	b.w	1e38c <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   1e3d0:	4804      	ldr	r0, [pc, #16]	; (1e3e4 <bt_smp_accept+0x20>)
   1e3d2:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
		*chan = &smp->chan.chan;
   1e3d6:	33ec      	adds	r3, #236	; 0xec
   1e3d8:	600b      	str	r3, [r1, #0]
}
   1e3da:	4610      	mov	r0, r2
   1e3dc:	4770      	bx	lr
   1e3de:	bf00      	nop
   1e3e0:	20002278 	.word	0x20002278
   1e3e4:	000304e8 	.word	0x000304e8

0001e3e8 <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   1e3e8:	b580      	push	{r7, lr}
   1e3ea:	af00      	add	r7, sp, #0
		LOG_ERR("Unable to find SMP channel");
   1e3ec:	b088      	sub	sp, #32
   1e3ee:	466a      	mov	r2, sp
   1e3f0:	4b07      	ldr	r3, [pc, #28]	; (1e410 <smp_chan_get.part.0+0x28>)
   1e3f2:	6153      	str	r3, [r2, #20]
   1e3f4:	4b07      	ldr	r3, [pc, #28]	; (1e414 <smp_chan_get.part.0+0x2c>)
   1e3f6:	6193      	str	r3, [r2, #24]
   1e3f8:	2303      	movs	r3, #3
   1e3fa:	f842 3f10 	str.w	r3, [r2, #16]!
   1e3fe:	4806      	ldr	r0, [pc, #24]	; (1e418 <smp_chan_get.part.0+0x30>)
   1e400:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e404:	f00f fc24 	bl	2dc50 <z_log_msg_static_create.constprop.0>
}
   1e408:	2000      	movs	r0, #0
   1e40a:	46bd      	mov	sp, r7
   1e40c:	bd80      	pop	{r7, pc}
   1e40e:	bf00      	nop
   1e410:	00033e6f 	.word	0x00033e6f
   1e414:	000345b8 	.word	0x000345b8
   1e418:	0002fc6c 	.word	0x0002fc6c

0001e41c <smp_sign_buf>:
{
   1e41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e420:	b08a      	sub	sp, #40	; 0x28
	sys_mem_swap(m, len + sizeof(cnt));
   1e422:	1d14      	adds	r4, r2, #4
{
   1e424:	af00      	add	r7, sp, #0
   1e426:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1e428:	588b      	ldr	r3, [r1, r2]
   1e42a:	607b      	str	r3, [r7, #4]
   1e42c:	eb01 0802 	add.w	r8, r1, r2
{
   1e430:	4606      	mov	r6, r0
	sys_mem_swap(m, len + sizeof(cnt));
   1e432:	4621      	mov	r1, r4
   1e434:	4628      	mov	r0, r5
   1e436:	f00f fbc3 	bl	2dbc0 <sys_mem_swap>
	for (; length > 0; length--) {
   1e43a:	f107 0208 	add.w	r2, r7, #8
   1e43e:	f106 0310 	add.w	r3, r6, #16
   1e442:	4610      	mov	r0, r2
		*pdst++ = *psrc--;
   1e444:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   1e448:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
   1e44c:	42b3      	cmp	r3, r6
   1e44e:	d1f9      	bne.n	1e444 <smp_sign_buf+0x28>
	err = bt_crypto_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
   1e450:	f107 0318 	add.w	r3, r7, #24
   1e454:	4622      	mov	r2, r4
   1e456:	4629      	mov	r1, r5
   1e458:	f00f fef5 	bl	2e246 <bt_crypto_aes_cmac>
	if (err) {
   1e45c:	4606      	mov	r6, r0
   1e45e:	b1a0      	cbz	r0, 1e48a <smp_sign_buf+0x6e>
		LOG_ERR("Data signing failed");
   1e460:	466c      	mov	r4, sp
   1e462:	b088      	sub	sp, #32
   1e464:	466a      	mov	r2, sp
   1e466:	4b14      	ldr	r3, [pc, #80]	; (1e4b8 <smp_sign_buf+0x9c>)
   1e468:	6153      	str	r3, [r2, #20]
   1e46a:	4b14      	ldr	r3, [pc, #80]	; (1e4bc <smp_sign_buf+0xa0>)
   1e46c:	6193      	str	r3, [r2, #24]
   1e46e:	2303      	movs	r3, #3
   1e470:	f842 3f10 	str.w	r3, [r2, #16]!
   1e474:	4812      	ldr	r0, [pc, #72]	; (1e4c0 <smp_sign_buf+0xa4>)
   1e476:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e47a:	f00f fbe9 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   1e47e:	46a5      	mov	sp, r4
}
   1e480:	4630      	mov	r0, r6
   1e482:	3728      	adds	r7, #40	; 0x28
   1e484:	46bd      	mov	sp, r7
   1e486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_mem_swap(tmp, sizeof(tmp));
   1e48a:	f107 0018 	add.w	r0, r7, #24
   1e48e:	2110      	movs	r1, #16
   1e490:	f00f fb96 	bl	2dbc0 <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
   1e494:	2204      	movs	r2, #4
   1e496:	18b9      	adds	r1, r7, r2
   1e498:	f107 001c 	add.w	r0, r7, #28
   1e49c:	f00d fc00 	bl	2bca0 <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
   1e4a0:	4621      	mov	r1, r4
   1e4a2:	4628      	mov	r0, r5
   1e4a4:	f00f fb8c 	bl	2dbc0 <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
   1e4a8:	220c      	movs	r2, #12
   1e4aa:	f107 011c 	add.w	r1, r7, #28
   1e4ae:	4640      	mov	r0, r8
   1e4b0:	f00d fbf6 	bl	2bca0 <memcpy>
	return 0;
   1e4b4:	e7e4      	b.n	1e480 <smp_sign_buf+0x64>
   1e4b6:	bf00      	nop
   1e4b8:	00033e8e 	.word	0x00033e8e
   1e4bc:	00034598 	.word	0x00034598
   1e4c0:	0002fc6c 	.word	0x0002fc6c

0001e4c4 <smp_dhkey_check>:
{
   1e4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e4c8:	b090      	sub	sp, #64	; 0x40
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1e4ca:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   1e4ce:	78dd      	ldrb	r5, [r3, #3]
{
   1e4d0:	af04      	add	r7, sp, #16
   1e4d2:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1e4d4:	2d00      	cmp	r5, #0
   1e4d6:	f040 8087 	bne.w	1e5e8 <smp_dhkey_check+0x124>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1e4da:	f8d1 800c 	ldr.w	r8, [r1, #12]
		(void)memset(r, 0, sizeof(r));
   1e4de:	2210      	movs	r2, #16
   1e4e0:	4629      	mov	r1, r5
   1e4e2:	f107 0020 	add.w	r0, r7, #32
   1e4e6:	f00d fbe6 	bl	2bcb6 <memset>
		switch (smp->method) {
   1e4ea:	7a23      	ldrb	r3, [r4, #8]
   1e4ec:	2b05      	cmp	r3, #5
   1e4ee:	d82f      	bhi.n	1e550 <smp_dhkey_check+0x8c>
   1e4f0:	e8df f003 	tbb	[pc, r3]
   1e4f4:	0a03030a 	.word	0x0a03030a
   1e4f8:	282e      	.short	0x282e
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1e4fa:	2204      	movs	r2, #4
   1e4fc:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
				memcpy(r, smp->oobd_local->r, sizeof(r));
   1e500:	f107 0020 	add.w	r0, r7, #32
   1e504:	f00d fbcc 	bl	2bca0 <memcpy>
				 &smp->chan.chan.conn->le.resp_addr,
   1e508:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
				 &smp->chan.chan.conn->le.init_addr, e)) {
   1e50c:	f103 028f 	add.w	r2, r3, #143	; 0x8f
				 &smp->chan.chan.conn->le.resp_addr,
   1e510:	3396      	adds	r3, #150	; 0x96
		if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   1e512:	f107 0610 	add.w	r6, r7, #16
   1e516:	9301      	str	r3, [sp, #4]
   1e518:	f104 0311 	add.w	r3, r4, #17
   1e51c:	9202      	str	r2, [sp, #8]
   1e51e:	9300      	str	r3, [sp, #0]
   1e520:	9603      	str	r6, [sp, #12]
   1e522:	f107 0320 	add.w	r3, r7, #32
   1e526:	f104 0227 	add.w	r2, r4, #39	; 0x27
   1e52a:	f104 0137 	add.w	r1, r4, #55	; 0x37
   1e52e:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   1e532:	f00f fecb 	bl	2e2cc <bt_crypto_f6>
   1e536:	b1e8      	cbz	r0, 1e574 <smp_dhkey_check+0xb0>
			return BT_SMP_ERR_UNSPECIFIED;
   1e538:	2508      	movs	r5, #8
}
   1e53a:	4628      	mov	r0, r5
   1e53c:	3730      	adds	r7, #48	; 0x30
   1e53e:	46bd      	mov	sp, r7
   1e540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (smp->oobd_local) {
   1e544:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1e548:	2900      	cmp	r1, #0
   1e54a:	d0dd      	beq.n	1e508 <smp_dhkey_check+0x44>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   1e54c:	2210      	movs	r2, #16
   1e54e:	e7d7      	b.n	1e500 <smp_dhkey_check+0x3c>
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1e550:	466c      	mov	r4, sp
   1e552:	b088      	sub	sp, #32
   1e554:	aa04      	add	r2, sp, #16
   1e556:	4925      	ldr	r1, [pc, #148]	; (1e5ec <smp_dhkey_check+0x128>)
   1e558:	6151      	str	r1, [r2, #20]
   1e55a:	4925      	ldr	r1, [pc, #148]	; (1e5f0 <smp_dhkey_check+0x12c>)
		switch (smp->method) {
   1e55c:	e9c2 1306 	strd	r1, r3, [r2, #24]
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1e560:	2304      	movs	r3, #4
   1e562:	f842 3f10 	str.w	r3, [r2, #16]!
   1e566:	f44f 5101 	mov.w	r1, #8256	; 0x2040
			LOG_ERR("Failed to start encryption");
   1e56a:	4822      	ldr	r0, [pc, #136]	; (1e5f4 <smp_dhkey_check+0x130>)
   1e56c:	f00f fb70 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   1e570:	46a5      	mov	sp, r4
			return BT_SMP_ERR_UNSPECIFIED;
   1e572:	e7e1      	b.n	1e538 <smp_dhkey_check+0x74>
		if (memcmp(e, req->e, 16)) {
   1e574:	4630      	mov	r0, r6
   1e576:	2210      	movs	r2, #16
   1e578:	4641      	mov	r1, r8
   1e57a:	f00d fb6a 	bl	2bc52 <memcmp>
   1e57e:	4606      	mov	r6, r0
   1e580:	bb80      	cbnz	r0, 1e5e4 <smp_dhkey_check+0x120>
	return MIN(req->max_key_size, rsp->max_key_size);
   1e582:	7d23      	ldrb	r3, [r4, #20]
   1e584:	f894 800d 	ldrb.w	r8, [r4, #13]
		(void)memset(ediv, 0, sizeof(ediv));
   1e588:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   1e58a:	4598      	cmp	r8, r3
		(void)memset(ediv, 0, sizeof(ediv));
   1e58c:	f04f 0202 	mov.w	r2, #2
   1e590:	f107 0004 	add.w	r0, r7, #4
	return MIN(req->max_key_size, rsp->max_key_size);
   1e594:	bf28      	it	cs
   1e596:	4698      	movcs	r8, r3
		(void)memset(ediv, 0, sizeof(ediv));
   1e598:	f00d fb8d 	bl	2bcb6 <memset>
		(void)memset(rand, 0, sizeof(rand));
   1e59c:	2208      	movs	r2, #8
   1e59e:	4631      	mov	r1, r6
   1e5a0:	18b8      	adds	r0, r7, r2
   1e5a2:	f00d fb88 	bl	2bcb6 <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   1e5a6:	f8cd 8000 	str.w	r8, [sp]
   1e5aa:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1e5ae:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1e5b2:	1d3a      	adds	r2, r7, #4
   1e5b4:	f107 0108 	add.w	r1, r7, #8
   1e5b8:	f00d ff3f 	bl	2c43a <bt_conn_le_start_encryption>
   1e5bc:	2800      	cmp	r0, #0
   1e5be:	da0c      	bge.n	1e5da <smp_dhkey_check+0x116>
			LOG_ERR("Failed to start encryption");
   1e5c0:	466c      	mov	r4, sp
   1e5c2:	b088      	sub	sp, #32
   1e5c4:	aa04      	add	r2, sp, #16
   1e5c6:	4b0c      	ldr	r3, [pc, #48]	; (1e5f8 <smp_dhkey_check+0x134>)
   1e5c8:	6153      	str	r3, [r2, #20]
   1e5ca:	4b09      	ldr	r3, [pc, #36]	; (1e5f0 <smp_dhkey_check+0x12c>)
   1e5cc:	6193      	str	r3, [r2, #24]
   1e5ce:	2303      	movs	r3, #3
   1e5d0:	f842 3f10 	str.w	r3, [r2, #16]!
   1e5d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e5d8:	e7c7      	b.n	1e56a <smp_dhkey_check+0xa6>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1e5da:	2101      	movs	r1, #1
   1e5dc:	1d20      	adds	r0, r4, #4
   1e5de:	f00f fb5b 	bl	2dc98 <atomic_set_bit>
		return 0;
   1e5e2:	e7aa      	b.n	1e53a <smp_dhkey_check+0x76>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1e5e4:	250b      	movs	r5, #11
   1e5e6:	e7a8      	b.n	1e53a <smp_dhkey_check+0x76>
	return 0;
   1e5e8:	2500      	movs	r5, #0
   1e5ea:	e7a6      	b.n	1e53a <smp_dhkey_check+0x76>
   1e5ec:	00033ea6 	.word	0x00033ea6
   1e5f0:	000344ed 	.word	0x000344ed
   1e5f4:	0002fc6c 	.word	0x0002fc6c
   1e5f8:	00033ec6 	.word	0x00033ec6

0001e5fc <smp_dhkey_generate>:
{
   1e5fc:	b5b0      	push	{r4, r5, r7, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1e5fe:	1d05      	adds	r5, r0, #4
{
   1e600:	af00      	add	r7, sp, #0
   1e602:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1e604:	2108      	movs	r1, #8
   1e606:	4628      	mov	r0, r5
   1e608:	f00f fb46 	bl	2dc98 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1e60c:	490e      	ldr	r1, [pc, #56]	; (1e648 <smp_dhkey_generate+0x4c>)
   1e60e:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1e612:	f7fa fdfd 	bl	19210 <bt_dh_key_gen>
	if (err) {
   1e616:	b1a0      	cbz	r0, 1e642 <smp_dhkey_generate+0x46>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1e618:	2108      	movs	r1, #8
   1e61a:	4628      	mov	r0, r5
   1e61c:	f00f fb09 	bl	2dc32 <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   1e620:	466c      	mov	r4, sp
   1e622:	b088      	sub	sp, #32
   1e624:	466a      	mov	r2, sp
   1e626:	4b09      	ldr	r3, [pc, #36]	; (1e64c <smp_dhkey_generate+0x50>)
   1e628:	6153      	str	r3, [r2, #20]
   1e62a:	4b09      	ldr	r3, [pc, #36]	; (1e650 <smp_dhkey_generate+0x54>)
   1e62c:	6193      	str	r3, [r2, #24]
   1e62e:	2303      	movs	r3, #3
   1e630:	4808      	ldr	r0, [pc, #32]	; (1e654 <smp_dhkey_generate+0x58>)
   1e632:	f842 3f10 	str.w	r3, [r2, #16]!
   1e636:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e63a:	f00f fb09 	bl	2dc50 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1e63e:	2008      	movs	r0, #8
   1e640:	46a5      	mov	sp, r4
}
   1e642:	46bd      	mov	sp, r7
   1e644:	bdb0      	pop	{r4, r5, r7, pc}
   1e646:	bf00      	nop
   1e648:	0002e0b5 	.word	0x0002e0b5
   1e64c:	00033ee5 	.word	0x00033ee5
   1e650:	000344cb 	.word	0x000344cb
   1e654:	0002fc6c 	.word	0x0002fc6c

0001e658 <smp_ident_info>:
{
   1e658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e65a:	4604      	mov	r4, r0
   1e65c:	af00      	add	r7, sp, #0
   1e65e:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e660:	3004      	adds	r0, #4
   1e662:	210d      	movs	r1, #13
   1e664:	f00f fabb 	bl	2dbde <atomic_test_bit>
   1e668:	b348      	cbz	r0, 1e6be <smp_ident_info+0x66>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1e66a:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1e66c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1e670:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1e674:	7a19      	ldrb	r1, [r3, #8]
   1e676:	462a      	mov	r2, r5
   1e678:	2002      	movs	r0, #2
   1e67a:	f00f fdb8 	bl	2e1ee <bt_keys_get_type>
		if (!keys) {
   1e67e:	b9c8      	cbnz	r0, 1e6b4 <smp_ident_info+0x5c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1e680:	4628      	mov	r0, r5
   1e682:	f7f7 fd77 	bl	16174 <bt_addr_le_str>
   1e686:	466c      	mov	r4, sp
   1e688:	b08a      	sub	sp, #40	; 0x28
   1e68a:	466a      	mov	r2, sp
   1e68c:	4b0f      	ldr	r3, [pc, #60]	; (1e6cc <smp_ident_info+0x74>)
   1e68e:	6153      	str	r3, [r2, #20]
   1e690:	4b0f      	ldr	r3, [pc, #60]	; (1e6d0 <smp_ident_info+0x78>)
   1e692:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e696:	f240 3301 	movw	r3, #769	; 0x301
   1e69a:	8413      	strh	r3, [r2, #32]
   1e69c:	4b0d      	ldr	r3, [pc, #52]	; (1e6d4 <smp_ident_info+0x7c>)
   1e69e:	480e      	ldr	r0, [pc, #56]	; (1e6d8 <smp_ident_info+0x80>)
   1e6a0:	f842 3f10 	str.w	r3, [r2, #16]!
   1e6a4:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1e6a8:	f00f fad2 	bl	2dc50 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1e6ac:	2008      	movs	r0, #8
   1e6ae:	46a5      	mov	sp, r4
}
   1e6b0:	46bd      	mov	sp, r7
   1e6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1e6b4:	2210      	movs	r2, #16
   1e6b6:	4631      	mov	r1, r6
   1e6b8:	302a      	adds	r0, #42	; 0x2a
   1e6ba:	f00d faf1 	bl	2bca0 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1e6be:	4620      	mov	r0, r4
   1e6c0:	2109      	movs	r1, #9
   1e6c2:	f00f fae9 	bl	2dc98 <atomic_set_bit>
	return 0;
   1e6c6:	2000      	movs	r0, #0
   1e6c8:	e7f2      	b.n	1e6b0 <smp_ident_info+0x58>
   1e6ca:	bf00      	nop
   1e6cc:	00033f02 	.word	0x00033f02
   1e6d0:	00034441 	.word	0x00034441
   1e6d4:	01000004 	.word	0x01000004
   1e6d8:	0002fc6c 	.word	0x0002fc6c

0001e6dc <smp_encrypt_info>:
{
   1e6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e6de:	4604      	mov	r4, r0
   1e6e0:	af00      	add	r7, sp, #0
   1e6e2:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e6e4:	3004      	adds	r0, #4
   1e6e6:	210d      	movs	r1, #13
   1e6e8:	f00f fa79 	bl	2dbde <atomic_test_bit>
   1e6ec:	b348      	cbz	r0, 1e742 <smp_encrypt_info+0x66>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1e6ee:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1e6f0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1e6f4:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1e6f8:	7a19      	ldrb	r1, [r3, #8]
   1e6fa:	462a      	mov	r2, r5
   1e6fc:	2004      	movs	r0, #4
   1e6fe:	f00f fd76 	bl	2e1ee <bt_keys_get_type>
		if (!keys) {
   1e702:	b9c8      	cbnz	r0, 1e738 <smp_encrypt_info+0x5c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1e704:	4628      	mov	r0, r5
   1e706:	f7f7 fd35 	bl	16174 <bt_addr_le_str>
   1e70a:	466c      	mov	r4, sp
   1e70c:	b08a      	sub	sp, #40	; 0x28
   1e70e:	466a      	mov	r2, sp
   1e710:	4b0f      	ldr	r3, [pc, #60]	; (1e750 <smp_encrypt_info+0x74>)
   1e712:	6153      	str	r3, [r2, #20]
   1e714:	4b0f      	ldr	r3, [pc, #60]	; (1e754 <smp_encrypt_info+0x78>)
   1e716:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e71a:	f240 3301 	movw	r3, #769	; 0x301
   1e71e:	8413      	strh	r3, [r2, #32]
   1e720:	4b0d      	ldr	r3, [pc, #52]	; (1e758 <smp_encrypt_info+0x7c>)
   1e722:	480e      	ldr	r0, [pc, #56]	; (1e75c <smp_encrypt_info+0x80>)
   1e724:	f842 3f10 	str.w	r3, [r2, #16]!
   1e728:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1e72c:	f00f fa90 	bl	2dc50 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1e730:	2008      	movs	r0, #8
   1e732:	46a5      	mov	sp, r4
}
   1e734:	46bd      	mov	sp, r7
   1e736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1e738:	2210      	movs	r2, #16
   1e73a:	4631      	mov	r1, r6
   1e73c:	301a      	adds	r0, #26
   1e73e:	f00d faaf 	bl	2bca0 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1e742:	4620      	mov	r0, r4
   1e744:	2107      	movs	r1, #7
   1e746:	f00f faa7 	bl	2dc98 <atomic_set_bit>
	return 0;
   1e74a:	2000      	movs	r0, #0
   1e74c:	e7f2      	b.n	1e734 <smp_encrypt_info+0x58>
   1e74e:	bf00      	nop
   1e750:	00033f02 	.word	0x00033f02
   1e754:	0003441e 	.word	0x0003441e
   1e758:	01000004 	.word	0x01000004
   1e75c:	0002fc6c 	.word	0x0002fc6c

0001e760 <bt_smp_distribute_keys>:
{
   1e760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e764:	b089      	sub	sp, #36	; 0x24
   1e766:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1e768:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
	struct bt_keys *keys = conn->le.keys;
   1e76c:	f8d0 50b4 	ldr.w	r5, [r0, #180]	; 0xb4
{
   1e770:	af00      	add	r7, sp, #0
	if (!keys) {
   1e772:	b9c5      	cbnz	r5, 1e7a6 <bt_smp_distribute_keys+0x46>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1e774:	3088      	adds	r0, #136	; 0x88
   1e776:	f7f7 fcfd 	bl	16174 <bt_addr_le_str>
   1e77a:	466c      	mov	r4, sp
   1e77c:	b08a      	sub	sp, #40	; 0x28
   1e77e:	466a      	mov	r2, sp
   1e780:	4b6c      	ldr	r3, [pc, #432]	; (1e934 <bt_smp_distribute_keys+0x1d4>)
   1e782:	6153      	str	r3, [r2, #20]
   1e784:	4b6c      	ldr	r3, [pc, #432]	; (1e938 <bt_smp_distribute_keys+0x1d8>)
   1e786:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e78a:	f240 3301 	movw	r3, #769	; 0x301
   1e78e:	8413      	strh	r3, [r2, #32]
   1e790:	4b6a      	ldr	r3, [pc, #424]	; (1e93c <bt_smp_distribute_keys+0x1dc>)
   1e792:	f842 3f10 	str.w	r3, [r2, #16]!
   1e796:	f44f 5111 	mov.w	r1, #9280	; 0x2440
			LOG_ERR("Unable to allocate Signing Info buffer");
   1e79a:	4869      	ldr	r0, [pc, #420]	; (1e940 <bt_smp_distribute_keys+0x1e0>)
   1e79c:	f00f fa58 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   1e7a0:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1e7a2:	2008      	movs	r0, #8
   1e7a4:	e028      	b.n	1e7f8 <bt_smp_distribute_keys+0x98>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e7a6:	1d26      	adds	r6, r4, #4
   1e7a8:	2105      	movs	r1, #5
   1e7aa:	4630      	mov	r0, r6
   1e7ac:	f00f fa17 	bl	2dbde <atomic_test_bit>
   1e7b0:	b9e8      	cbnz	r0, 1e7ee <bt_smp_distribute_keys+0x8e>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1e7b2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1e7b6:	07da      	lsls	r2, r3, #31
   1e7b8:	d519      	bpl.n	1e7ee <bt_smp_distribute_keys+0x8e>
	struct bt_keys *keys = conn->le.keys;
   1e7ba:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1e7be:	211a      	movs	r1, #26
   1e7c0:	1d38      	adds	r0, r7, #4
	struct bt_keys *keys = conn->le.keys;
   1e7c2:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1e7c6:	f004 fe67 	bl	23498 <bt_rand>
   1e7ca:	4682      	mov	sl, r0
   1e7cc:	b1c0      	cbz	r0, 1e800 <bt_smp_distribute_keys+0xa0>
			LOG_ERR("Unable to get random bytes");
   1e7ce:	46e8      	mov	r8, sp
   1e7d0:	b088      	sub	sp, #32
   1e7d2:	466a      	mov	r2, sp
   1e7d4:	4b5b      	ldr	r3, [pc, #364]	; (1e944 <bt_smp_distribute_keys+0x1e4>)
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1e7d6:	6153      	str	r3, [r2, #20]
   1e7d8:	4b5b      	ldr	r3, [pc, #364]	; (1e948 <bt_smp_distribute_keys+0x1e8>)
   1e7da:	6193      	str	r3, [r2, #24]
   1e7dc:	2303      	movs	r3, #3
   1e7de:	f842 3f10 	str.w	r3, [r2, #16]!
   1e7e2:	4857      	ldr	r0, [pc, #348]	; (1e940 <bt_smp_distribute_keys+0x1e0>)
   1e7e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e7e8:	f00f fa32 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   1e7ec:	46c5      	mov	sp, r8
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
   1e7ee:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1e7f2:	075b      	lsls	r3, r3, #29
   1e7f4:	d468      	bmi.n	1e8c8 <bt_smp_distribute_keys+0x168>
	return 0;
   1e7f6:	2000      	movs	r0, #0
}
   1e7f8:	3724      	adds	r7, #36	; 0x24
   1e7fa:	46bd      	mov	sp, r7
   1e7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1e800:	2106      	movs	r1, #6
   1e802:	4620      	mov	r0, r4
   1e804:	f00f fa5c 	bl	2dcc0 <smp_create_pdu.constprop.0>
		if (!buf) {
   1e808:	4681      	mov	r9, r0
   1e80a:	b920      	cbnz	r0, 1e816 <bt_smp_distribute_keys+0xb6>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1e80c:	46e8      	mov	r8, sp
   1e80e:	b088      	sub	sp, #32
   1e810:	466a      	mov	r2, sp
   1e812:	4b4e      	ldr	r3, [pc, #312]	; (1e94c <bt_smp_distribute_keys+0x1ec>)
   1e814:	e7df      	b.n	1e7d6 <bt_smp_distribute_keys+0x76>
   1e816:	2110      	movs	r1, #16
   1e818:	300c      	adds	r0, #12
   1e81a:	f00f fe0a 	bl	2e432 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1e81e:	f898 200c 	ldrb.w	r2, [r8, #12]
   1e822:	1d39      	adds	r1, r7, #4
   1e824:	4683      	mov	fp, r0
   1e826:	f00d fa3b 	bl	2bca0 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1e82a:	f898 000c 	ldrb.w	r0, [r8, #12]
   1e82e:	280f      	cmp	r0, #15
   1e830:	d805      	bhi.n	1e83e <bt_smp_distribute_keys+0xde>
			(void)memset(info->ltk + keys->enc_size, 0,
   1e832:	f1c0 0210 	rsb	r2, r0, #16
   1e836:	4651      	mov	r1, sl
   1e838:	4458      	add	r0, fp
   1e83a:	f00d fa3c 	bl	2bcb6 <memset>
		smp_send(smp, buf, NULL, NULL);
   1e83e:	4649      	mov	r1, r9
   1e840:	2200      	movs	r2, #0
   1e842:	4620      	mov	r0, r4
   1e844:	f7ff fd6e 	bl	1e324 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1e848:	2107      	movs	r1, #7
   1e84a:	4620      	mov	r0, r4
   1e84c:	f00f fa38 	bl	2dcc0 <smp_create_pdu.constprop.0>
		if (!buf) {
   1e850:	4681      	mov	r9, r0
   1e852:	b920      	cbnz	r0, 1e85e <bt_smp_distribute_keys+0xfe>
			LOG_ERR("Unable to allocate Central Ident buffer");
   1e854:	46e8      	mov	r8, sp
   1e856:	b088      	sub	sp, #32
   1e858:	466a      	mov	r2, sp
   1e85a:	4b3d      	ldr	r3, [pc, #244]	; (1e950 <bt_smp_distribute_keys+0x1f0>)
   1e85c:	e7bb      	b.n	1e7d6 <bt_smp_distribute_keys+0x76>
   1e85e:	210a      	movs	r1, #10
   1e860:	300c      	adds	r0, #12
   1e862:	f00f fde6 	bl	2e432 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1e866:	2208      	movs	r2, #8
   1e868:	4682      	mov	sl, r0
   1e86a:	f107 0114 	add.w	r1, r7, #20
   1e86e:	3002      	adds	r0, #2
   1e870:	f00d fa16 	bl	2bca0 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1e874:	2202      	movs	r2, #2
   1e876:	f107 011c 	add.w	r1, r7, #28
   1e87a:	4650      	mov	r0, sl
   1e87c:	f00d fa10 	bl	2bca0 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1e880:	4649      	mov	r1, r9
   1e882:	4620      	mov	r0, r4
   1e884:	4a33      	ldr	r2, [pc, #204]	; (1e954 <bt_smp_distribute_keys+0x1f4>)
   1e886:	f7ff fd4d 	bl	1e324 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e88a:	210d      	movs	r1, #13
   1e88c:	4630      	mov	r0, r6
   1e88e:	f00f f9a6 	bl	2dbde <atomic_test_bit>
   1e892:	2800      	cmp	r0, #0
   1e894:	d0ab      	beq.n	1e7ee <bt_smp_distribute_keys+0x8e>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1e896:	4640      	mov	r0, r8
   1e898:	2101      	movs	r1, #1
   1e89a:	f00f fcb8 	bl	2e20e <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1e89e:	1d39      	adds	r1, r7, #4
   1e8a0:	2210      	movs	r2, #16
   1e8a2:	f108 0072 	add.w	r0, r8, #114	; 0x72
   1e8a6:	f00d f9fb 	bl	2bca0 <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1e8aa:	f107 0114 	add.w	r1, r7, #20
   1e8ae:	2208      	movs	r2, #8
   1e8b0:	f108 0068 	add.w	r0, r8, #104	; 0x68
   1e8b4:	f00d f9f4 	bl	2bca0 <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1e8b8:	2202      	movs	r2, #2
   1e8ba:	f107 011c 	add.w	r1, r7, #28
   1e8be:	f108 0070 	add.w	r0, r8, #112	; 0x70
   1e8c2:	f00d f9ed 	bl	2bca0 <memcpy>
   1e8c6:	e792      	b.n	1e7ee <bt_smp_distribute_keys+0x8e>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
   1e8c8:	210a      	movs	r1, #10
   1e8ca:	4620      	mov	r0, r4
   1e8cc:	f00f f9f8 	bl	2dcc0 <smp_create_pdu.constprop.0>
		if (!buf) {
   1e8d0:	4680      	mov	r8, r0
   1e8d2:	b960      	cbnz	r0, 1e8ee <bt_smp_distribute_keys+0x18e>
			LOG_ERR("Unable to allocate Signing Info buffer");
   1e8d4:	466c      	mov	r4, sp
   1e8d6:	b088      	sub	sp, #32
   1e8d8:	466a      	mov	r2, sp
   1e8da:	4b1f      	ldr	r3, [pc, #124]	; (1e958 <bt_smp_distribute_keys+0x1f8>)
   1e8dc:	6153      	str	r3, [r2, #20]
   1e8de:	4b16      	ldr	r3, [pc, #88]	; (1e938 <bt_smp_distribute_keys+0x1d8>)
   1e8e0:	6193      	str	r3, [r2, #24]
   1e8e2:	2303      	movs	r3, #3
   1e8e4:	f842 3f10 	str.w	r3, [r2, #16]!
   1e8e8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e8ec:	e755      	b.n	1e79a <bt_smp_distribute_keys+0x3a>
   1e8ee:	2110      	movs	r1, #16
   1e8f0:	300c      	adds	r0, #12
   1e8f2:	f00f fd9e 	bl	2e432 <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
   1e8f6:	2110      	movs	r1, #16
   1e8f8:	4682      	mov	sl, r0
   1e8fa:	f004 fdcd 	bl	23498 <bt_rand>
   1e8fe:	4681      	mov	r9, r0
   1e900:	2800      	cmp	r0, #0
   1e902:	f47f af4e 	bne.w	1e7a2 <bt_smp_distribute_keys+0x42>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e906:	210d      	movs	r1, #13
   1e908:	4630      	mov	r0, r6
   1e90a:	f00f f968 	bl	2dbde <atomic_test_bit>
   1e90e:	b158      	cbz	r0, 1e928 <bt_smp_distribute_keys+0x1c8>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
   1e910:	2108      	movs	r1, #8
   1e912:	4628      	mov	r0, r5
   1e914:	f00f fc7b 	bl	2e20e <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
   1e918:	2210      	movs	r2, #16
   1e91a:	4651      	mov	r1, sl
   1e91c:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1e920:	f00d f9be 	bl	2bca0 <memcpy>
			keys->local_csrk.cnt = 0U;
   1e924:	f8c5 9050 	str.w	r9, [r5, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
   1e928:	4a0c      	ldr	r2, [pc, #48]	; (1e95c <bt_smp_distribute_keys+0x1fc>)
   1e92a:	4641      	mov	r1, r8
   1e92c:	4620      	mov	r0, r4
   1e92e:	f7ff fcf9 	bl	1e324 <smp_send.constprop.0>
   1e932:	e760      	b.n	1e7f6 <bt_smp_distribute_keys+0x96>
   1e934:	00033f20 	.word	0x00033f20
   1e938:	0003448e 	.word	0x0003448e
   1e93c:	01000004 	.word	0x01000004
   1e940:	0002fc6c 	.word	0x0002fc6c
   1e944:	00033f39 	.word	0x00033f39
   1e948:	00034477 	.word	0x00034477
   1e94c:	00033f58 	.word	0x00033f58
   1e950:	00033f83 	.word	0x00033f83
   1e954:	0002e169 	.word	0x0002e169
   1e958:	00033faf 	.word	0x00033faf
   1e95c:	0002e177 	.word	0x0002e177

0001e960 <smp_send_pairing_req>:
{
   1e960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e964:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   1e966:	f00f f976 	bl	2dc56 <smp_chan_get>
	if (!smp) {
   1e96a:	4604      	mov	r4, r0
   1e96c:	2800      	cmp	r0, #0
   1e96e:	f000 80c5 	beq.w	1eafc <smp_send_pairing_req+0x19c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1e972:	1d07      	adds	r7, r0, #4
   1e974:	2104      	movs	r1, #4
   1e976:	4638      	mov	r0, r7
   1e978:	f00f f931 	bl	2dbde <atomic_test_bit>
   1e97c:	2800      	cmp	r0, #0
   1e97e:	f040 80c0 	bne.w	1eb02 <smp_send_pairing_req+0x1a2>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1e982:	2102      	movs	r1, #2
   1e984:	4638      	mov	r0, r7
   1e986:	f00f f92a 	bl	2dbde <atomic_test_bit>
   1e98a:	2800      	cmp	r0, #0
   1e98c:	f040 80af 	bne.w	1eaee <smp_send_pairing_req+0x18e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e990:	2103      	movs	r1, #3
   1e992:	4638      	mov	r0, r7
   1e994:	f00f f923 	bl	2dbde <atomic_test_bit>
   1e998:	b118      	cbz	r0, 1e9a2 <smp_send_pairing_req+0x42>
		return -EBUSY;
   1e99a:	f06f 000f 	mvn.w	r0, #15
}
   1e99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1e9a2:	2101      	movs	r1, #1
   1e9a4:	4638      	mov	r0, r7
   1e9a6:	f00f f91a 	bl	2dbde <atomic_test_bit>
   1e9aa:	2800      	cmp	r0, #0
   1e9ac:	d1f5      	bne.n	1e99a <smp_send_pairing_req+0x3a>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e9ae:	4620      	mov	r0, r4
   1e9b0:	f7ff fc74 	bl	1e29c <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1e9b4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1e9b8:	7a9b      	ldrb	r3, [r3, #10]
   1e9ba:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e9bc:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1e9be:	d015      	beq.n	1e9ec <smp_send_pairing_req+0x8c>
   1e9c0:	d805      	bhi.n	1e9ce <smp_send_pairing_req+0x6e>
   1e9c2:	3b01      	subs	r3, #1
   1e9c4:	2b01      	cmp	r3, #1
   1e9c6:	d91b      	bls.n	1ea00 <smp_send_pairing_req+0xa0>
		return -EINVAL;
   1e9c8:	f06f 0015 	mvn.w	r0, #21
   1e9cc:	e7e7      	b.n	1e99e <smp_send_pairing_req+0x3e>
	switch (smp->chan.chan.conn->required_sec_level) {
   1e9ce:	2b04      	cmp	r3, #4
   1e9d0:	d1fa      	bne.n	1e9c8 <smp_send_pairing_req+0x68>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1e9d2:	4620      	mov	r0, r4
   1e9d4:	f7ff fc80 	bl	1e2d8 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1e9d8:	2803      	cmp	r0, #3
   1e9da:	d104      	bne.n	1e9e6 <smp_send_pairing_req+0x86>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1e9dc:	2e00      	cmp	r6, #0
   1e9de:	d0f3      	beq.n	1e9c8 <smp_send_pairing_req+0x68>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1e9e0:	68f3      	ldr	r3, [r6, #12]
   1e9e2:	2b00      	cmp	r3, #0
   1e9e4:	d0f0      	beq.n	1e9c8 <smp_send_pairing_req+0x68>
   1e9e6:	4b48      	ldr	r3, [pc, #288]	; (1eb08 <smp_send_pairing_req+0x1a8>)
   1e9e8:	781b      	ldrb	r3, [r3, #0]
   1e9ea:	e007      	b.n	1e9fc <smp_send_pairing_req+0x9c>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1e9ec:	4620      	mov	r0, r4
   1e9ee:	f7ff fc73 	bl	1e2d8 <get_io_capa>
   1e9f2:	2803      	cmp	r0, #3
   1e9f4:	d104      	bne.n	1ea00 <smp_send_pairing_req+0xa0>
   1e9f6:	2e00      	cmp	r6, #0
   1e9f8:	d0e6      	beq.n	1e9c8 <smp_send_pairing_req+0x68>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1e9fa:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1e9fc:	2b00      	cmp	r3, #0
   1e9fe:	d0e3      	beq.n	1e9c8 <smp_send_pairing_req+0x68>
	if (!conn->le.keys) {
   1ea00:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1ea04:	b16b      	cbz	r3, 1ea22 <smp_send_pairing_req+0xc2>
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1ea06:	2100      	movs	r1, #0
   1ea08:	22ec      	movs	r2, #236	; 0xec
   1ea0a:	4620      	mov	r0, r4
   1ea0c:	f00d f953 	bl	2bcb6 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1ea10:	2110      	movs	r1, #16
   1ea12:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1ea16:	f004 fd3f 	bl	23498 <bt_rand>
   1ea1a:	b170      	cbz	r0, 1ea3a <smp_send_pairing_req+0xda>
		return -ENOBUFS;
   1ea1c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ea20:	e7bd      	b.n	1e99e <smp_send_pairing_req+0x3e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1ea22:	7a28      	ldrb	r0, [r5, #8]
   1ea24:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1ea28:	f001 fc98 	bl	2035c <bt_keys_get_addr>
   1ea2c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   1ea30:	2800      	cmp	r0, #0
   1ea32:	d1e8      	bne.n	1ea06 <smp_send_pairing_req+0xa6>
			return -ENOMEM;
   1ea34:	f06f 000b 	mvn.w	r0, #11
   1ea38:	e7b1      	b.n	1e99e <smp_send_pairing_req+0x3e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1ea3a:	2105      	movs	r1, #5
   1ea3c:	4620      	mov	r0, r4
   1ea3e:	f00f f92b 	bl	2dc98 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1ea42:	f7fa fbd5 	bl	191f0 <bt_pub_key_get>
   1ea46:	4b31      	ldr	r3, [pc, #196]	; (1eb0c <smp_send_pairing_req+0x1ac>)
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   1ea48:	2101      	movs	r1, #1
	sc_public_key = bt_pub_key_get();
   1ea4a:	6018      	str	r0, [r3, #0]
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   1ea4c:	4620      	mov	r0, r4
   1ea4e:	f00f f937 	bl	2dcc0 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1ea52:	4680      	mov	r8, r0
   1ea54:	2800      	cmp	r0, #0
   1ea56:	d0e1      	beq.n	1ea1c <smp_send_pairing_req+0xbc>
   1ea58:	2106      	movs	r1, #6
   1ea5a:	300c      	adds	r0, #12
   1ea5c:	f00f fce9 	bl	2e432 <net_buf_simple_add>
	if (sc_supported) {
   1ea60:	4b29      	ldr	r3, [pc, #164]	; (1eb08 <smp_send_pairing_req+0x1a8>)
   1ea62:	781b      	ldrb	r3, [r3, #0]
   1ea64:	4605      	mov	r5, r0
		auth &= BT_SMP_AUTH_MASK_SC;
   1ea66:	2b00      	cmp	r3, #0
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1ea68:	4620      	mov	r0, r4
		auth &= BT_SMP_AUTH_MASK_SC;
   1ea6a:	bf14      	ite	ne
   1ea6c:	2609      	movne	r6, #9
   1ea6e:	2601      	moveq	r6, #1
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1ea70:	f7ff fc32 	bl	1e2d8 <get_io_capa>
	if (bondable) {
   1ea74:	4b26      	ldr	r3, [pc, #152]	; (1eb10 <smp_send_pairing_req+0x1b0>)
   1ea76:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1ea78:	2803      	cmp	r0, #3
		auth |= BT_SMP_AUTH_MITM;
   1ea7a:	bf18      	it	ne
   1ea7c:	f046 0604 	orrne.w	r6, r6, #4
	if (bondable) {
   1ea80:	2b00      	cmp	r3, #0
   1ea82:	d036      	beq.n	1eaf2 <smp_send_pairing_req+0x192>
		auth |= BT_SMP_AUTH_BONDING;
   1ea84:	f046 0601 	orr.w	r6, r6, #1
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1ea88:	70ae      	strb	r6, [r5, #2]
	req->io_capability = get_io_capa(smp);
   1ea8a:	4620      	mov	r0, r4
   1ea8c:	f7ff fc24 	bl	1e2d8 <get_io_capa>
	req->oob_flag = (legacy_oobd_present || sc_oobd_present) ?
   1ea90:	4b20      	ldr	r3, [pc, #128]	; (1eb14 <smp_send_pairing_req+0x1b4>)
	req->io_capability = get_io_capa(smp);
   1ea92:	7028      	strb	r0, [r5, #0]
				BT_SMP_OOB_PRESENT : BT_SMP_OOB_NOT_PRESENT;
   1ea94:	781b      	ldrb	r3, [r3, #0]
   1ea96:	bb7b      	cbnz	r3, 1eaf8 <smp_send_pairing_req+0x198>
	req->oob_flag = (legacy_oobd_present || sc_oobd_present) ?
   1ea98:	4b1f      	ldr	r3, [pc, #124]	; (1eb18 <smp_send_pairing_req+0x1b8>)
				BT_SMP_OOB_PRESENT : BT_SMP_OOB_NOT_PRESENT;
   1ea9a:	781b      	ldrb	r3, [r3, #0]
	req->oob_flag = (legacy_oobd_present || sc_oobd_present) ?
   1ea9c:	706b      	strb	r3, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1ea9e:	2310      	movs	r3, #16
   1eaa0:	70eb      	strb	r3, [r5, #3]
	if (req->auth_req & BT_SMP_AUTH_BONDING) {
   1eaa2:	78ab      	ldrb	r3, [r5, #2]
   1eaa4:	f013 0301 	ands.w	r3, r3, #1
   1eaa8:	bf0e      	itee	eq
   1eaaa:	461a      	moveq	r2, r3
   1eaac:	2205      	movne	r2, #5
   1eaae:	2307      	movne	r3, #7
		req->init_key_dist = SEND_KEYS;
   1eab0:	712a      	strb	r2, [r5, #4]
		req->resp_key_dist = RECV_KEYS;
   1eab2:	716b      	strb	r3, [r5, #5]
	smp->local_dist = req->init_key_dist;
   1eab4:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
	smp->remote_dist = req->resp_key_dist;
   1eab8:	796b      	ldrb	r3, [r5, #5]
   1eaba:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1eabe:	2301      	movs	r3, #1
   1eac0:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1eac2:	2206      	movs	r2, #6
   1eac4:	4629      	mov	r1, r5
   1eac6:	f104 000a 	add.w	r0, r4, #10
   1eaca:	f00d f8e9 	bl	2bca0 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1eace:	2200      	movs	r2, #0
   1ead0:	4641      	mov	r1, r8
   1ead2:	4620      	mov	r0, r4
   1ead4:	f7ff fc26 	bl	1e324 <smp_send.constprop.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   1ead8:	4620      	mov	r0, r4
   1eada:	2102      	movs	r1, #2
   1eadc:	f00f f8dc 	bl	2dc98 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1eae0:	210b      	movs	r1, #11
   1eae2:	f00f f8d9 	bl	2dc98 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1eae6:	2103      	movs	r1, #3
   1eae8:	4638      	mov	r0, r7
   1eaea:	f00f f8d5 	bl	2dc98 <atomic_set_bit>
		return 0;
   1eaee:	2000      	movs	r0, #0
   1eaf0:	e755      	b.n	1e99e <smp_send_pairing_req+0x3e>
		auth &= ~BT_SMP_AUTH_BONDING;
   1eaf2:	f006 060c 	and.w	r6, r6, #12
   1eaf6:	e7c7      	b.n	1ea88 <smp_send_pairing_req+0x128>
				BT_SMP_OOB_PRESENT : BT_SMP_OOB_NOT_PRESENT;
   1eaf8:	2301      	movs	r3, #1
   1eafa:	e7cf      	b.n	1ea9c <smp_send_pairing_req+0x13c>
		return -ENOTCONN;
   1eafc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1eb00:	e74d      	b.n	1e99e <smp_send_pairing_req+0x3e>
		return -EIO;
   1eb02:	f06f 0004 	mvn.w	r0, #4
   1eb06:	e74a      	b.n	1e99e <smp_send_pairing_req+0x3e>
   1eb08:	20004486 	.word	0x20004486
   1eb0c:	200034f0 	.word	0x200034f0
   1eb10:	20000824 	.word	0x20000824
   1eb14:	20004487 	.word	0x20004487
   1eb18:	20004488 	.word	0x20004488

0001eb1c <smp_security_request>:
{
   1eb1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1eb20:	b083      	sub	sp, #12
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1eb22:	1d06      	adds	r6, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   1eb24:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
	struct bt_smp_security_request *req = (void *)buf->data;
   1eb28:	68cb      	ldr	r3, [r1, #12]
{
   1eb2a:	af02      	add	r7, sp, #8
   1eb2c:	4680      	mov	r8, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1eb2e:	2102      	movs	r1, #2
   1eb30:	4630      	mov	r0, r6
   1eb32:	f00f f854 	bl	2dbde <atomic_test_bit>
   1eb36:	2800      	cmp	r0, #0
   1eb38:	f040 8093 	bne.w	1ec62 <smp_security_request+0x146>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1eb3c:	2103      	movs	r1, #3
   1eb3e:	4630      	mov	r0, r6
   1eb40:	f00f f84d 	bl	2dbde <atomic_test_bit>
   1eb44:	2800      	cmp	r0, #0
   1eb46:	f040 808c 	bne.w	1ec62 <smp_security_request+0x146>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1eb4a:	2101      	movs	r1, #1
   1eb4c:	4630      	mov	r0, r6
   1eb4e:	f00f f846 	bl	2dbde <atomic_test_bit>
   1eb52:	2800      	cmp	r0, #0
   1eb54:	f040 8085 	bne.w	1ec62 <smp_security_request+0x146>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   1eb58:	781d      	ldrb	r5, [r3, #0]
	if (sc_supported) {
   1eb5a:	4b43      	ldr	r3, [pc, #268]	; (1ec68 <smp_security_request+0x14c>)
   1eb5c:	781b      	ldrb	r3, [r3, #0]
   1eb5e:	b17b      	cbz	r3, 1eb80 <smp_security_request+0x64>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   1eb60:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
   1eb64:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1eb68:	b16b      	cbz	r3, 1eb86 <smp_security_request+0x6a>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1eb6a:	89db      	ldrh	r3, [r3, #14]
   1eb6c:	f003 0324 	and.w	r3, r3, #36	; 0x24
   1eb70:	b9d3      	cbnz	r3, 1eba8 <smp_security_request+0x8c>
	if (smp_send_pairing_req(conn) < 0) {
   1eb72:	4620      	mov	r0, r4
   1eb74:	f7ff fef4 	bl	1e960 <smp_send_pairing_req>
   1eb78:	2800      	cmp	r0, #0
   1eb7a:	db69      	blt.n	1ec50 <smp_security_request+0x134>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1eb7c:	210f      	movs	r1, #15
   1eb7e:	e06d      	b.n	1ec5c <smp_security_request+0x140>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
   1eb80:	f005 0507 	and.w	r5, r5, #7
   1eb84:	e7ee      	b.n	1eb64 <smp_security_request+0x48>
					     &conn->le.dst);
   1eb86:	f104 0988 	add.w	r9, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1eb8a:	7a21      	ldrb	r1, [r4, #8]
   1eb8c:	464a      	mov	r2, r9
   1eb8e:	2020      	movs	r0, #32
   1eb90:	f001 fc22 	bl	203d8 <bt_keys_find>
   1eb94:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   1eb98:	b930      	cbnz	r0, 1eba8 <smp_security_request+0x8c>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   1eb9a:	7a21      	ldrb	r1, [r4, #8]
   1eb9c:	464a      	mov	r2, r9
   1eb9e:	2004      	movs	r0, #4
   1eba0:	f001 fc1a 	bl	203d8 <bt_keys_find>
   1eba4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1eba8:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1ebac:	2900      	cmp	r1, #0
   1ebae:	d0e0      	beq.n	1eb72 <smp_security_request+0x56>
	if ((auth & BT_SMP_AUTH_MITM) &&
   1ebb0:	076b      	lsls	r3, r5, #29
   1ebb2:	d525      	bpl.n	1ec00 <smp_security_request+0xe4>
   1ebb4:	7b4b      	ldrb	r3, [r1, #13]
   1ebb6:	07d8      	lsls	r0, r3, #31
   1ebb8:	d422      	bmi.n	1ec00 <smp_security_request+0xe4>
		if (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT) {
   1ebba:	4640      	mov	r0, r8
   1ebbc:	f7ff fb8c 	bl	1e2d8 <get_io_capa>
   1ebc0:	2803      	cmp	r0, #3
   1ebc2:	4b2a      	ldr	r3, [pc, #168]	; (1ec6c <smp_security_request+0x150>)
			LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1ebc4:	46e8      	mov	r8, sp
		if (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT) {
   1ebc6:	d00b      	beq.n	1ebe0 <smp_security_request+0xc4>
			LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1ebc8:	b088      	sub	sp, #32
   1ebca:	aa02      	add	r2, sp, #8
   1ebcc:	4928      	ldr	r1, [pc, #160]	; (1ec70 <smp_security_request+0x154>)
   1ebce:	6151      	str	r1, [r2, #20]
		LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1ebd0:	e9c2 3506 	strd	r3, r5, [r2, #24]
   1ebd4:	2304      	movs	r3, #4
   1ebd6:	f842 3f10 	str.w	r3, [r2, #16]!
   1ebda:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
   1ebde:	e00a      	b.n	1ebf6 <smp_security_request+0xda>
		LOG_WRN("Unsupported auth requirements: 0x%x, repairing", auth);
   1ebe0:	b088      	sub	sp, #32
   1ebe2:	aa02      	add	r2, sp, #8
   1ebe4:	4923      	ldr	r1, [pc, #140]	; (1ec74 <smp_security_request+0x158>)
   1ebe6:	61d5      	str	r5, [r2, #28]
   1ebe8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1ebec:	2304      	movs	r3, #4
   1ebee:	f842 3f10 	str.w	r3, [r2, #16]!
   1ebf2:	f44f 5102 	mov.w	r1, #8320	; 0x2080
		LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1ebf6:	4820      	ldr	r0, [pc, #128]	; (1ec78 <smp_security_request+0x15c>)
   1ebf8:	f00f f82a 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   1ebfc:	46c5      	mov	sp, r8
		goto pair;
   1ebfe:	e7b8      	b.n	1eb72 <smp_security_request+0x56>
	if ((auth & BT_SMP_AUTH_SC) &&
   1ec00:	072a      	lsls	r2, r5, #28
   1ec02:	d509      	bpl.n	1ec18 <smp_security_request+0xfc>
   1ec04:	89cb      	ldrh	r3, [r1, #14]
   1ec06:	069b      	lsls	r3, r3, #26
   1ec08:	d406      	bmi.n	1ec18 <smp_security_request+0xfc>
		LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1ec0a:	46e8      	mov	r8, sp
   1ec0c:	b088      	sub	sp, #32
   1ec0e:	aa02      	add	r2, sp, #8
   1ec10:	4b17      	ldr	r3, [pc, #92]	; (1ec70 <smp_security_request+0x154>)
   1ec12:	6153      	str	r3, [r2, #20]
   1ec14:	4b15      	ldr	r3, [pc, #84]	; (1ec6c <smp_security_request+0x150>)
   1ec16:	e7db      	b.n	1ebd0 <smp_security_request+0xb4>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   1ec18:	7b0b      	ldrb	r3, [r1, #12]
   1ec1a:	9300      	str	r3, [sp, #0]
   1ec1c:	f101 0218 	add.w	r2, r1, #24
   1ec20:	f101 031a 	add.w	r3, r1, #26
   1ec24:	4620      	mov	r0, r4
   1ec26:	3110      	adds	r1, #16
   1ec28:	f00d fc07 	bl	2c43a <bt_conn_le_start_encryption>
   1ec2c:	2800      	cmp	r0, #0
   1ec2e:	da14      	bge.n	1ec5a <smp_security_request+0x13e>
		LOG_ERR("Failed to start encryption");
   1ec30:	466c      	mov	r4, sp
   1ec32:	b088      	sub	sp, #32
   1ec34:	aa02      	add	r2, sp, #8
   1ec36:	4b11      	ldr	r3, [pc, #68]	; (1ec7c <smp_security_request+0x160>)
   1ec38:	6153      	str	r3, [r2, #20]
   1ec3a:	4b0c      	ldr	r3, [pc, #48]	; (1ec6c <smp_security_request+0x150>)
   1ec3c:	6193      	str	r3, [r2, #24]
   1ec3e:	2303      	movs	r3, #3
   1ec40:	f842 3f10 	str.w	r3, [r2, #16]!
   1ec44:	480c      	ldr	r0, [pc, #48]	; (1ec78 <smp_security_request+0x15c>)
   1ec46:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ec4a:	f00f f801 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   1ec4e:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1ec50:	2008      	movs	r0, #8
}
   1ec52:	3704      	adds	r7, #4
   1ec54:	46bd      	mov	sp, r7
   1ec56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1ec5a:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1ec5c:	4630      	mov	r0, r6
   1ec5e:	f00f f81b 	bl	2dc98 <atomic_set_bit>
		return 0;
   1ec62:	2000      	movs	r0, #0
   1ec64:	e7f5      	b.n	1ec52 <smp_security_request+0x136>
   1ec66:	bf00      	nop
   1ec68:	20004486 	.word	0x20004486
   1ec6c:	000344b6 	.word	0x000344b6
   1ec70:	00033fda 	.word	0x00033fda
   1ec74:	00034005 	.word	0x00034005
   1ec78:	0002fc6c 	.word	0x0002fc6c
   1ec7c:	00033ec6 	.word	0x00033ec6

0001ec80 <smp_send_pairing_confirm>:
{
   1ec80:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ec82:	b083      	sub	sp, #12
	switch (smp->method) {
   1ec84:	7a04      	ldrb	r4, [r0, #8]
   1ec86:	2c02      	cmp	r4, #2
{
   1ec88:	af02      	add	r7, sp, #8
   1ec8a:	4605      	mov	r5, r0
	switch (smp->method) {
   1ec8c:	d823      	bhi.n	1ecd6 <smp_send_pairing_confirm+0x56>
   1ec8e:	b144      	cbz	r4, 1eca2 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1ec90:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1ec94:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1ec98:	40dc      	lsrs	r4, r3
   1ec9a:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1ec9e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1eca2:	2103      	movs	r1, #3
   1eca4:	4628      	mov	r0, r5
   1eca6:	f00f f80b 	bl	2dcc0 <smp_create_pdu.constprop.0>
	if (!buf) {
   1ecaa:	4606      	mov	r6, r0
   1ecac:	b330      	cbz	r0, 1ecfc <smp_send_pairing_confirm+0x7c>
   1ecae:	2110      	movs	r1, #16
   1ecb0:	300c      	adds	r0, #12
   1ecb2:	f00f fbbe 	bl	2e432 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1ecb6:	9000      	str	r0, [sp, #0]
   1ecb8:	4819      	ldr	r0, [pc, #100]	; (1ed20 <smp_send_pairing_confirm+0xa0>)
   1ecba:	4623      	mov	r3, r4
   1ecbc:	6800      	ldr	r0, [r0, #0]
   1ecbe:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1ecc2:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1ecc6:	f00f fadc 	bl	2e282 <bt_crypto_f4>
   1ecca:	4604      	mov	r4, r0
   1eccc:	b1e0      	cbz	r0, 1ed08 <smp_send_pairing_confirm+0x88>
		net_buf_unref(buf);
   1ecce:	4630      	mov	r0, r6
   1ecd0:	f001 fea6 	bl	20a20 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1ecd4:	e012      	b.n	1ecfc <smp_send_pairing_confirm+0x7c>
	switch (smp->method) {
   1ecd6:	2c03      	cmp	r4, #3
   1ecd8:	d014      	beq.n	1ed04 <smp_send_pairing_confirm+0x84>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ecda:	466d      	mov	r5, sp
   1ecdc:	b088      	sub	sp, #32
   1ecde:	aa02      	add	r2, sp, #8
   1ece0:	4b10      	ldr	r3, [pc, #64]	; (1ed24 <smp_send_pairing_confirm+0xa4>)
   1ece2:	6153      	str	r3, [r2, #20]
   1ece4:	4b10      	ldr	r3, [pc, #64]	; (1ed28 <smp_send_pairing_confirm+0xa8>)
   1ece6:	4811      	ldr	r0, [pc, #68]	; (1ed2c <smp_send_pairing_confirm+0xac>)
	switch (smp->method) {
   1ece8:	e9c2 3406 	strd	r3, r4, [r2, #24]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ecec:	2304      	movs	r3, #4
   1ecee:	f842 3f10 	str.w	r3, [r2, #16]!
   1ecf2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ecf6:	f00e ffab 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   1ecfa:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   1ecfc:	2008      	movs	r0, #8
}
   1ecfe:	3704      	adds	r7, #4
   1ed00:	46bd      	mov	sp, r7
   1ed02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (smp->method) {
   1ed04:	2400      	movs	r4, #0
   1ed06:	e7cc      	b.n	1eca2 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   1ed08:	4602      	mov	r2, r0
   1ed0a:	4631      	mov	r1, r6
   1ed0c:	4628      	mov	r0, r5
   1ed0e:	f7ff fb09 	bl	1e324 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1ed12:	1d28      	adds	r0, r5, #4
   1ed14:	4621      	mov	r1, r4
   1ed16:	f00e ff8c 	bl	2dc32 <atomic_clear_bit>
	return 0;
   1ed1a:	4620      	mov	r0, r4
   1ed1c:	e7ef      	b.n	1ecfe <smp_send_pairing_confirm+0x7e>
   1ed1e:	bf00      	nop
   1ed20:	200034f0 	.word	0x200034f0
   1ed24:	00033ea6 	.word	0x00033ea6
   1ed28:	0003456a 	.word	0x0003456a
   1ed2c:	0002fc6c 	.word	0x0002fc6c

0001ed30 <smp_public_key>:
{
   1ed30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed34:	b082      	sub	sp, #8
   1ed36:	460e      	mov	r6, r1
   1ed38:	af00      	add	r7, sp, #0
   1ed3a:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ed3c:	f7ff faae 	bl	1e29c <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   1ed40:	68f6      	ldr	r6, [r6, #12]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1ed42:	f104 0857 	add.w	r8, r4, #87	; 0x57
   1ed46:	2220      	movs	r2, #32
   1ed48:	4631      	mov	r1, r6
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ed4a:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1ed4c:	4640      	mov	r0, r8
   1ed4e:	f00c ffa7 	bl	2bca0 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1ed52:	2220      	movs	r2, #32
   1ed54:	18b1      	adds	r1, r6, r2
   1ed56:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1ed5a:	f00c ffa1 	bl	2bca0 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1ed5e:	4640      	mov	r0, r8
   1ed60:	f7fa f98e 	bl	19080 <bt_pub_key_is_debug>
   1ed64:	bb28      	cbnz	r0, 1edb2 <smp_public_key+0x82>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1ed66:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1ed6a:	78db      	ldrb	r3, [r3, #3]
   1ed6c:	2b00      	cmp	r3, #0
   1ed6e:	d151      	bne.n	1ee14 <smp_public_key+0xe4>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ed70:	1d26      	adds	r6, r4, #4
   1ed72:	210e      	movs	r1, #14
   1ed74:	4630      	mov	r0, r6
   1ed76:	f00e ff32 	bl	2dbde <atomic_test_bit>
   1ed7a:	2800      	cmp	r0, #0
   1ed7c:	d14c      	bne.n	1ee18 <smp_public_key+0xe8>
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1ed7e:	4b6e      	ldr	r3, [pc, #440]	; (1ef38 <smp_public_key+0x208>)
   1ed80:	2220      	movs	r2, #32
   1ed82:	6819      	ldr	r1, [r3, #0]
   1ed84:	4640      	mov	r0, r8
   1ed86:	f00c ff64 	bl	2bc52 <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ed8a:	2800      	cmp	r0, #0
   1ed8c:	d144      	bne.n	1ee18 <smp_public_key+0xe8>
			LOG_WRN("Remote public key rejected");
   1ed8e:	466c      	mov	r4, sp
   1ed90:	b088      	sub	sp, #32
   1ed92:	466a      	mov	r2, sp
   1ed94:	4b69      	ldr	r3, [pc, #420]	; (1ef3c <smp_public_key+0x20c>)
   1ed96:	6153      	str	r3, [r2, #20]
   1ed98:	4b69      	ldr	r3, [pc, #420]	; (1ef40 <smp_public_key+0x210>)
   1ed9a:	6193      	str	r3, [r2, #24]
   1ed9c:	2303      	movs	r3, #3
   1ed9e:	f842 3f10 	str.w	r3, [r2, #16]!
   1eda2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1eda6:	4867      	ldr	r0, [pc, #412]	; (1ef44 <smp_public_key+0x214>)
   1eda8:	f00e ff52 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   1edac:	46a5      	mov	sp, r4
			return BT_SMP_ERR_UNSPECIFIED;
   1edae:	2008      	movs	r0, #8
   1edb0:	e02c      	b.n	1ee0c <smp_public_key+0xdc>
		LOG_INF("Remote is using Debug Public key");
   1edb2:	466e      	mov	r6, sp
   1edb4:	b088      	sub	sp, #32
   1edb6:	466a      	mov	r2, sp
   1edb8:	4b63      	ldr	r3, [pc, #396]	; (1ef48 <smp_public_key+0x218>)
   1edba:	6153      	str	r3, [r2, #20]
   1edbc:	4b60      	ldr	r3, [pc, #384]	; (1ef40 <smp_public_key+0x210>)
   1edbe:	6193      	str	r3, [r2, #24]
   1edc0:	2303      	movs	r3, #3
   1edc2:	f842 3f10 	str.w	r3, [r2, #16]!
   1edc6:	485f      	ldr	r0, [pc, #380]	; (1ef44 <smp_public_key+0x214>)
   1edc8:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1edcc:	f00e ff40 	bl	2dc50 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1edd0:	210e      	movs	r1, #14
   1edd2:	46b5      	mov	sp, r6
   1edd4:	1d20      	adds	r0, r4, #4
   1edd6:	f00e ff5f 	bl	2dc98 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1edda:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1edde:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
   1ede2:	b933      	cbnz	r3, 1edf2 <smp_public_key+0xc2>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1ede4:	7a30      	ldrb	r0, [r6, #8]
   1ede6:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1edea:	f001 fab7 	bl	2035c <bt_keys_get_addr>
   1edee:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
	if (!conn->le.keys ||
   1edf2:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
   1edf6:	2b00      	cmp	r3, #0
   1edf8:	d0b5      	beq.n	1ed66 <smp_public_key+0x36>
   1edfa:	89da      	ldrh	r2, [r3, #14]
   1edfc:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1ee00:	2a00      	cmp	r2, #0
   1ee02:	d0b0      	beq.n	1ed66 <smp_public_key+0x36>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1ee04:	7b5b      	ldrb	r3, [r3, #13]
   1ee06:	0799      	lsls	r1, r3, #30
   1ee08:	d4ad      	bmi.n	1ed66 <smp_public_key+0x36>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1ee0a:	2003      	movs	r0, #3
}
   1ee0c:	3708      	adds	r7, #8
   1ee0e:	46bd      	mov	sp, r7
   1ee10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
   1ee14:	2000      	movs	r0, #0
   1ee16:	e7f9      	b.n	1ee0c <smp_public_key+0xdc>
		switch (smp->method) {
   1ee18:	7a23      	ldrb	r3, [r4, #8]
   1ee1a:	2b05      	cmp	r3, #5
   1ee1c:	d87c      	bhi.n	1ef18 <smp_public_key+0x1e8>
   1ee1e:	e8df f003 	tbb	[pc, r3]
   1ee22:	4403      	.short	0x4403
   1ee24:	4e7b0308 	.word	0x4e7b0308
			atomic_set_bit(smp->allowed_cmds,
   1ee28:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   1ee2a:	4620      	mov	r0, r4
   1ee2c:	f00e ff34 	bl	2dc98 <atomic_set_bit>
			break;
   1ee30:	e02e      	b.n	1ee90 <smp_public_key+0x160>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ee32:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1ee34:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ee38:	f7ff fa30 	bl	1e29c <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1ee3c:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ee3e:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1ee40:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1ee44:	f004 fb28 	bl	23498 <bt_rand>
   1ee48:	2800      	cmp	r0, #0
   1ee4a:	d1b0      	bne.n	1edae <smp_public_key+0x7e>
		smp->passkey %= 1000000;
   1ee4c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1ee50:	4a3e      	ldr	r2, [pc, #248]	; (1ef4c <smp_public_key+0x21c>)
   1ee52:	fbb3 f1f2 	udiv	r1, r3, r2
   1ee56:	fb02 3311 	mls	r3, r2, r1, r3
   1ee5a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1ee5e:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1ee62:	b155      	cbz	r5, 1ee7a <smp_public_key+0x14a>
   1ee64:	682b      	ldr	r3, [r5, #0]
   1ee66:	b143      	cbz	r3, 1ee7a <smp_public_key+0x14a>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ee68:	210b      	movs	r1, #11
   1ee6a:	4630      	mov	r0, r6
   1ee6c:	f00e ff14 	bl	2dc98 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1ee70:	682b      	ldr	r3, [r5, #0]
   1ee72:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1ee76:	4640      	mov	r0, r8
   1ee78:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   1ee7a:	2103      	movs	r1, #3
   1ee7c:	4620      	mov	r0, r4
   1ee7e:	f00e ff0b 	bl	2dc98 <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
   1ee82:	210e      	movs	r1, #14
   1ee84:	f00e ff08 	bl	2dc98 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   1ee88:	f7ff fefa 	bl	1ec80 <smp_send_pairing_confirm>
			if (err) {
   1ee8c:	2800      	cmp	r0, #0
   1ee8e:	d1bd      	bne.n	1ee0c <smp_public_key+0xdc>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1ee90:	4630      	mov	r0, r6
   1ee92:	2107      	movs	r1, #7
   1ee94:	f00e ff00 	bl	2dc98 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1ee98:	2008      	movs	r0, #8
   1ee9a:	f7ff f9f1 	bl	1e280 <smp_find>
   1ee9e:	2800      	cmp	r0, #0
   1eea0:	d1b8      	bne.n	1ee14 <smp_public_key+0xe4>
		return smp_dhkey_generate(smp);
   1eea2:	4620      	mov	r0, r4
   1eea4:	f7ff fbaa 	bl	1e5fc <smp_dhkey_generate>
   1eea8:	e7b0      	b.n	1ee0c <smp_public_key+0xdc>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1eeaa:	210a      	movs	r1, #10
   1eeac:	4630      	mov	r0, r6
   1eeae:	f00e fef3 	bl	2dc98 <atomic_set_bit>
			smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1eeb2:	686b      	ldr	r3, [r5, #4]
   1eeb4:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1eeb8:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   1eeba:	210e      	movs	r1, #14
   1eebc:	e7b5      	b.n	1ee2a <smp_public_key+0xfa>
			if (bt_rand(smp->prnd, 16)) {
   1eebe:	2110      	movs	r1, #16
   1eec0:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1eec4:	f004 fae8 	bl	23498 <bt_rand>
   1eec8:	2800      	cmp	r0, #0
   1eeca:	f47f af70 	bne.w	1edae <smp_public_key+0x7e>
			if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1eece:	b38d      	cbz	r5, 1ef34 <smp_public_key+0x204>
   1eed0:	68eb      	ldr	r3, [r5, #12]
   1eed2:	b37b      	cbz	r3, 1ef34 <smp_public_key+0x204>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1eed4:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
				struct bt_conn_oob_info info = {
   1eed8:	4b1d      	ldr	r3, [pc, #116]	; (1ef50 <smp_public_key+0x220>)
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1eeda:	78c9      	ldrb	r1, [r1, #3]
				struct bt_conn_oob_info info = {
   1eedc:	881b      	ldrh	r3, [r3, #0]
   1eede:	80bb      	strh	r3, [r7, #4]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1eee0:	7ae2      	ldrb	r2, [r4, #11]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1eee2:	7ca3      	ldrb	r3, [r4, #18]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1eee4:	b9b1      	cbnz	r1, 1ef14 <smp_public_key+0x1e4>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1eee6:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1eee8:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1eeec:	d410      	bmi.n	1ef10 <smp_public_key+0x1e0>
	int oob_config = BT_CONN_OOB_NO_DATA;
   1eeee:	2b00      	cmp	r3, #0
   1eef0:	bf08      	it	eq
   1eef2:	2003      	moveq	r0, #3
				smp->oobd_local = NULL;
   1eef4:	2300      	movs	r3, #0
				smp->oobd_remote = NULL;
   1eef6:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
	info->lesc.oob_config = oob_config;
   1eefa:	7178      	strb	r0, [r7, #5]
				atomic_set_bit(smp->flags,
   1eefc:	210c      	movs	r1, #12
   1eefe:	4630      	mov	r0, r6
   1ef00:	f00e feca 	bl	2dc98 <atomic_set_bit>
				smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1ef04:	68eb      	ldr	r3, [r5, #12]
   1ef06:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1ef0a:	1d39      	adds	r1, r7, #4
   1ef0c:	4798      	blx	r3
			break;
   1ef0e:	e7bf      	b.n	1ee90 <smp_public_key+0x160>
		if (rsp_oob_present) {
   1ef10:	1c58      	adds	r0, r3, #1
   1ef12:	e7ef      	b.n	1eef4 <smp_public_key+0x1c4>
	int oob_config = BT_CONN_OOB_NO_DATA;
   1ef14:	2003      	movs	r0, #3
   1ef16:	e7ed      	b.n	1eef4 <smp_public_key+0x1c4>
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ef18:	466c      	mov	r4, sp
   1ef1a:	b088      	sub	sp, #32
   1ef1c:	466a      	mov	r2, sp
   1ef1e:	490d      	ldr	r1, [pc, #52]	; (1ef54 <smp_public_key+0x224>)
   1ef20:	6151      	str	r1, [r2, #20]
   1ef22:	4907      	ldr	r1, [pc, #28]	; (1ef40 <smp_public_key+0x210>)
		switch (smp->method) {
   1ef24:	e9c2 1306 	strd	r1, r3, [r2, #24]
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ef28:	2304      	movs	r3, #4
   1ef2a:	f842 3f10 	str.w	r3, [r2, #16]!
   1ef2e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ef32:	e738      	b.n	1eda6 <smp_public_key+0x76>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   1ef34:	2002      	movs	r0, #2
   1ef36:	e769      	b.n	1ee0c <smp_public_key+0xdc>
   1ef38:	200034f0 	.word	0x200034f0
   1ef3c:	0003405d 	.word	0x0003405d
   1ef40:	000344de 	.word	0x000344de
   1ef44:	0002fc6c 	.word	0x0002fc6c
   1ef48:	00034038 	.word	0x00034038
   1ef4c:	000f4240 	.word	0x000f4240
   1ef50:	0002fe68 	.word	0x0002fe68
   1ef54:	00033ea6 	.word	0x00033ea6

0001ef58 <sc_send_public_key>:
{
   1ef58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1ef5a:	210c      	movs	r1, #12
{
   1ef5c:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1ef5e:	f00e feaf 	bl	2dcc0 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1ef62:	4604      	mov	r4, r0
   1ef64:	b1b0      	cbz	r0, 1ef94 <sc_send_public_key+0x3c>
   1ef66:	2140      	movs	r1, #64	; 0x40
   1ef68:	300c      	adds	r0, #12
   1ef6a:	f00f fa62 	bl	2e432 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1ef6e:	4f0a      	ldr	r7, [pc, #40]	; (1ef98 <sc_send_public_key+0x40>)
   1ef70:	2220      	movs	r2, #32
   1ef72:	6839      	ldr	r1, [r7, #0]
   1ef74:	4606      	mov	r6, r0
   1ef76:	f00c fe93 	bl	2bca0 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1ef7a:	6839      	ldr	r1, [r7, #0]
   1ef7c:	2220      	movs	r2, #32
   1ef7e:	4411      	add	r1, r2
   1ef80:	18b0      	adds	r0, r6, r2
   1ef82:	f00c fe8d 	bl	2bca0 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1ef86:	4628      	mov	r0, r5
   1ef88:	2200      	movs	r2, #0
   1ef8a:	4621      	mov	r1, r4
   1ef8c:	f7ff f9ca 	bl	1e324 <smp_send.constprop.0>
	return 0;
   1ef90:	2000      	movs	r0, #0
}
   1ef92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1ef94:	2008      	movs	r0, #8
   1ef96:	e7fc      	b.n	1ef92 <sc_send_public_key+0x3a>
   1ef98:	200034f0 	.word	0x200034f0

0001ef9c <compute_and_send_central_dhcheck>:
{
   1ef9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1efa0:	b08c      	sub	sp, #48	; 0x30
   1efa2:	4604      	mov	r4, r0
   1efa4:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   1efa6:	2210      	movs	r2, #16
   1efa8:	2100      	movs	r1, #0
   1efaa:	18b8      	adds	r0, r7, r2
   1efac:	f00c fe83 	bl	2bcb6 <memset>
	switch (smp->method) {
   1efb0:	7a23      	ldrb	r3, [r4, #8]
   1efb2:	2b05      	cmp	r3, #5
   1efb4:	d836      	bhi.n	1f024 <compute_and_send_central_dhcheck+0x88>
   1efb6:	e8df f003 	tbb	[pc, r3]
   1efba:	030a      	.short	0x030a
   1efbc:	2e350a03 	.word	0x2e350a03
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1efc0:	2204      	movs	r2, #4
   1efc2:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   1efc6:	f107 0010 	add.w	r0, r7, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1efca:	f00c fe69 	bl	2bca0 <memcpy>
	if (bt_crypto_f5(smp->dhkey, smp->prnd, smp->rrnd, &smp->chan.chan.conn->le.init_addr,
   1efce:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1efd2:	f104 0247 	add.w	r2, r4, #71	; 0x47
   1efd6:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->prnd, smp->rrnd, &smp->chan.chan.conn->le.init_addr,
   1efda:	e9cd 5201 	strd	r5, r2, [sp, #4]
   1efde:	f104 0627 	add.w	r6, r4, #39	; 0x27
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1efe2:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (bt_crypto_f5(smp->dhkey, smp->prnd, smp->rrnd, &smp->chan.chan.conn->le.init_addr,
   1efe6:	f104 0837 	add.w	r8, r4, #55	; 0x37
   1efea:	9200      	str	r2, [sp, #0]
   1efec:	338f      	adds	r3, #143	; 0x8f
   1efee:	4642      	mov	r2, r8
   1eff0:	4631      	mov	r1, r6
   1eff2:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1eff6:	f001 fbb5 	bl	20764 <bt_crypto_f5>
   1effa:	b348      	cbz	r0, 1f050 <compute_and_send_central_dhcheck+0xb4>
		LOG_ERR("Calculate LTK failed");
   1effc:	466c      	mov	r4, sp
   1effe:	b088      	sub	sp, #32
   1f000:	aa04      	add	r2, sp, #16
   1f002:	4b2c      	ldr	r3, [pc, #176]	; (1f0b4 <compute_and_send_central_dhcheck+0x118>)
   1f004:	6153      	str	r3, [r2, #20]
   1f006:	4b2c      	ldr	r3, [pc, #176]	; (1f0b8 <compute_and_send_central_dhcheck+0x11c>)
   1f008:	6193      	str	r3, [r2, #24]
   1f00a:	2303      	movs	r3, #3
   1f00c:	f842 3f10 	str.w	r3, [r2, #16]!
   1f010:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f014:	e013      	b.n	1f03e <compute_and_send_central_dhcheck+0xa2>
		if (smp->oobd_remote) {
   1f016:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1f01a:	2900      	cmp	r1, #0
   1f01c:	d0d7      	beq.n	1efce <compute_and_send_central_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1f01e:	2210      	movs	r2, #16
   1f020:	18b8      	adds	r0, r7, r2
   1f022:	e7d2      	b.n	1efca <compute_and_send_central_dhcheck+0x2e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f024:	466c      	mov	r4, sp
   1f026:	b088      	sub	sp, #32
   1f028:	aa04      	add	r2, sp, #16
   1f02a:	4924      	ldr	r1, [pc, #144]	; (1f0bc <compute_and_send_central_dhcheck+0x120>)
   1f02c:	6151      	str	r1, [r2, #20]
   1f02e:	4922      	ldr	r1, [pc, #136]	; (1f0b8 <compute_and_send_central_dhcheck+0x11c>)
	switch (smp->method) {
   1f030:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f034:	2304      	movs	r3, #4
   1f036:	f842 3f10 	str.w	r3, [r2, #16]!
   1f03a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
		LOG_ERR("Calculate LTK failed");
   1f03e:	4820      	ldr	r0, [pc, #128]	; (1f0c0 <compute_and_send_central_dhcheck+0x124>)
   1f040:	f00e fe06 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   1f044:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1f046:	2008      	movs	r0, #8
}
   1f048:	3720      	adds	r7, #32
   1f04a:	46bd      	mov	sp, r7
   1f04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1f050:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   1f054:	9703      	str	r7, [sp, #12]
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1f056:	f103 0296 	add.w	r2, r3, #150	; 0x96
   1f05a:	338f      	adds	r3, #143	; 0x8f
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   1f05c:	9301      	str	r3, [sp, #4]
   1f05e:	f104 030a 	add.w	r3, r4, #10
   1f062:	9202      	str	r2, [sp, #8]
   1f064:	9300      	str	r3, [sp, #0]
   1f066:	4628      	mov	r0, r5
   1f068:	f107 0310 	add.w	r3, r7, #16
   1f06c:	4642      	mov	r2, r8
   1f06e:	4631      	mov	r1, r6
   1f070:	f00f f92c 	bl	2e2cc <bt_crypto_f6>
   1f074:	4605      	mov	r5, r0
   1f076:	b120      	cbz	r0, 1f082 <compute_and_send_central_dhcheck+0xe6>
		LOG_ERR("Calculate local DHKey check failed");
   1f078:	466c      	mov	r4, sp
   1f07a:	b088      	sub	sp, #32
   1f07c:	aa04      	add	r2, sp, #16
   1f07e:	4b11      	ldr	r3, [pc, #68]	; (1f0c4 <compute_and_send_central_dhcheck+0x128>)
   1f080:	e7c0      	b.n	1f004 <compute_and_send_central_dhcheck+0x68>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1f082:	210d      	movs	r1, #13
   1f084:	4620      	mov	r0, r4
   1f086:	f00e fe07 	bl	2dc98 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1f08a:	210d      	movs	r1, #13
   1f08c:	f00e fe18 	bl	2dcc0 <smp_create_pdu.constprop.0>
	if (!buf) {
   1f090:	4606      	mov	r6, r0
   1f092:	2800      	cmp	r0, #0
   1f094:	d0d7      	beq.n	1f046 <compute_and_send_central_dhcheck+0xaa>
   1f096:	2110      	movs	r1, #16
   1f098:	300c      	adds	r0, #12
   1f09a:	f00f f9ca 	bl	2e432 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1f09e:	2210      	movs	r2, #16
   1f0a0:	4639      	mov	r1, r7
   1f0a2:	f00c fdfd 	bl	2bca0 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1f0a6:	4620      	mov	r0, r4
   1f0a8:	462a      	mov	r2, r5
   1f0aa:	4631      	mov	r1, r6
   1f0ac:	f7ff f93a 	bl	1e324 <smp_send.constprop.0>
	return 0;
   1f0b0:	4628      	mov	r0, r5
   1f0b2:	e7c9      	b.n	1f048 <compute_and_send_central_dhcheck+0xac>
   1f0b4:	0003407c 	.word	0x0003407c
   1f0b8:	0003452a 	.word	0x0003452a
   1f0bc:	00033ea6 	.word	0x00033ea6
   1f0c0:	0002fc6c 	.word	0x0002fc6c
   1f0c4:	00034095 	.word	0x00034095

0001f0c8 <bt_smp_connected>:
{
   1f0c8:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1f0ca:	490b      	ldr	r1, [pc, #44]	; (1f0f8 <bt_smp_connected+0x30>)
{
   1f0cc:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1f0ce:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1f0d2:	3034      	adds	r0, #52	; 0x34
   1f0d4:	f010 f844 	bl	2f160 <k_work_init_delayable>
	smp_reset(smp);
   1f0d8:	4628      	mov	r0, r5
   1f0da:	f00e fe44 	bl	2dd66 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f0de:	f3bf 8f5b 	dmb	ish
   1f0e2:	4b06      	ldr	r3, [pc, #24]	; (1f0fc <bt_smp_connected+0x34>)
   1f0e4:	3464      	adds	r4, #100	; 0x64
   1f0e6:	e854 2f00 	ldrex	r2, [r4]
   1f0ea:	e844 3100 	strex	r1, r3, [r4]
   1f0ee:	2900      	cmp	r1, #0
   1f0f0:	d1f9      	bne.n	1f0e6 <bt_smp_connected+0x1e>
   1f0f2:	f3bf 8f5b 	dmb	ish
}
   1f0f6:	bd38      	pop	{r3, r4, r5, pc}
   1f0f8:	0002019d 	.word	0x0002019d
   1f0fc:	20002278 	.word	0x20002278

0001f100 <smp_pairing_rsp>:
{
   1f100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f104:	460d      	mov	r5, r1
   1f106:	b083      	sub	sp, #12
   1f108:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1f10a:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1f10e:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f110:	f7ff f8c4 	bl	1e29c <latch_auth_cb>
	struct bt_smp_pairing *rsp = (void *)buf->data;
   1f114:	f8d5 900c 	ldr.w	r9, [r5, #12]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1f118:	f899 3003 	ldrb.w	r3, [r9, #3]
   1f11c:	3b07      	subs	r3, #7
   1f11e:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f120:	4606      	mov	r6, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1f122:	d904      	bls.n	1f12e <smp_pairing_rsp+0x2e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1f124:	2006      	movs	r0, #6
}
   1f126:	370c      	adds	r7, #12
   1f128:	46bd      	mov	sp, r7
   1f12a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp->local_dist &= rsp->init_key_dist;
   1f12e:	f899 2004 	ldrb.w	r2, [r9, #4]
   1f132:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1f136:	4013      	ands	r3, r2
   1f138:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
   1f13c:	f899 2005 	ldrb.w	r2, [r9, #5]
   1f140:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1f144:	4013      	ands	r3, r2
   1f146:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1f14a:	2302      	movs	r3, #2
   1f14c:	7423      	strb	r3, [r4, #16]
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   1f14e:	2206      	movs	r2, #6
   1f150:	4649      	mov	r1, r9
   1f152:	f104 0011 	add.w	r0, r4, #17
   1f156:	f00c fda3 	bl	2bca0 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1f15a:	f899 3002 	ldrb.w	r3, [r9, #2]
   1f15e:	071b      	lsls	r3, r3, #28
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1f160:	f104 0504 	add.w	r5, r4, #4
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1f164:	d506      	bpl.n	1f174 <smp_pairing_rsp+0x74>
   1f166:	7b23      	ldrb	r3, [r4, #12]
   1f168:	0718      	lsls	r0, r3, #28
   1f16a:	d503      	bpl.n	1f174 <smp_pairing_rsp+0x74>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1f16c:	2105      	movs	r1, #5
   1f16e:	4628      	mov	r0, r5
   1f170:	f00e fd92 	bl	2dc98 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1f174:	f899 3002 	ldrb.w	r3, [r9, #2]
   1f178:	0699      	lsls	r1, r3, #26
   1f17a:	d506      	bpl.n	1f18a <smp_pairing_rsp+0x8a>
   1f17c:	7b23      	ldrb	r3, [r4, #12]
   1f17e:	069a      	lsls	r2, r3, #26
   1f180:	d503      	bpl.n	1f18a <smp_pairing_rsp+0x8a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1f182:	2114      	movs	r1, #20
   1f184:	4628      	mov	r0, r5
   1f186:	f00e fd87 	bl	2dc98 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1f18a:	f899 3002 	ldrb.w	r3, [r9, #2]
   1f18e:	07db      	lsls	r3, r3, #31
   1f190:	d536      	bpl.n	1f200 <smp_pairing_rsp+0x100>
   1f192:	7b23      	ldrb	r3, [r4, #12]
   1f194:	07d8      	lsls	r0, r3, #31
   1f196:	d533      	bpl.n	1f200 <smp_pairing_rsp+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1f198:	210d      	movs	r1, #13
   1f19a:	4628      	mov	r0, r5
   1f19c:	f00e fd7c 	bl	2dc98 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f1a0:	2105      	movs	r1, #5
   1f1a2:	4628      	mov	r0, r5
	smp->method = get_pair_method(smp, rsp->io_capability);
   1f1a4:	f899 9000 	ldrb.w	r9, [r9]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f1a8:	f00e fd19 	bl	2dbde <atomic_test_bit>
   1f1ac:	bb60      	cbnz	r0, 1f208 <smp_pairing_rsp+0x108>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1f1ae:	f1b9 0f04 	cmp.w	r9, #4
   1f1b2:	d849      	bhi.n	1f248 <smp_pairing_rsp+0x148>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1f1b4:	7ae3      	ldrb	r3, [r4, #11]
   1f1b6:	7ca2      	ldrb	r2, [r4, #18]
   1f1b8:	4013      	ands	r3, r2
   1f1ba:	07d9      	lsls	r1, r3, #31
   1f1bc:	d442      	bmi.n	1f244 <smp_pairing_rsp+0x144>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1f1be:	7b21      	ldrb	r1, [r4, #12]
   1f1c0:	7ce3      	ldrb	r3, [r4, #19]
   1f1c2:	4319      	orrs	r1, r3
   1f1c4:	f011 0104 	ands.w	r1, r1, #4
   1f1c8:	d011      	beq.n	1f1ee <smp_pairing_rsp+0xee>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1f1ca:	4620      	mov	r0, r4
   1f1cc:	f7ff f884 	bl	1e2d8 <get_io_capa>
   1f1d0:	4b9b      	ldr	r3, [pc, #620]	; (1f440 <smp_pairing_rsp+0x340>)
   1f1d2:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1f1d6:	4499      	add	r9, r3
   1f1d8:	f819 1000 	ldrb.w	r1, [r9, r0]
	if (method == PASSKEY_ROLE) {
   1f1dc:	2904      	cmp	r1, #4
   1f1de:	d106      	bne.n	1f1ee <smp_pairing_rsp+0xee>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1f1e0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1f1e4:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   1f1e6:	2b00      	cmp	r3, #0
   1f1e8:	bf14      	ite	ne
   1f1ea:	2101      	movne	r1, #1
   1f1ec:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, rsp->io_capability);
   1f1ee:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1f1f0:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   1f1f4:	4620      	mov	r0, r4
   1f1f6:	f00e fcfb 	bl	2dbf0 <update_keys_check>
   1f1fa:	bb38      	cbnz	r0, 1f24c <smp_pairing_rsp+0x14c>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1f1fc:	2003      	movs	r0, #3
   1f1fe:	e792      	b.n	1f126 <smp_pairing_rsp+0x26>
		smp->local_dist = 0;
   1f200:	2300      	movs	r3, #0
   1f202:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
   1f206:	e7cb      	b.n	1f1a0 <smp_pairing_rsp+0xa0>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1f208:	7b23      	ldrb	r3, [r4, #12]
   1f20a:	7ce0      	ldrb	r0, [r4, #19]
   1f20c:	ea03 0200 	and.w	r2, r3, r0
   1f210:	0712      	lsls	r2, r2, #28
   1f212:	d506      	bpl.n	1f222 <smp_pairing_rsp+0x122>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1f214:	7ae2      	ldrb	r2, [r4, #11]
   1f216:	f894 c012 	ldrb.w	ip, [r4, #18]
   1f21a:	ea42 020c 	orr.w	r2, r2, ip
   1f21e:	07d2      	lsls	r2, r2, #31
   1f220:	d4e5      	bmi.n	1f1ee <smp_pairing_rsp+0xee>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1f222:	f1b9 0f04 	cmp.w	r9, #4
   1f226:	d80f      	bhi.n	1f248 <smp_pairing_rsp+0x148>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1f228:	ea43 0100 	orr.w	r1, r3, r0
   1f22c:	f011 0104 	ands.w	r1, r1, #4
   1f230:	d0dd      	beq.n	1f1ee <smp_pairing_rsp+0xee>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1f232:	4620      	mov	r0, r4
   1f234:	f7ff f850 	bl	1e2d8 <get_io_capa>
   1f238:	4b82      	ldr	r3, [pc, #520]	; (1f444 <smp_pairing_rsp+0x344>)
   1f23a:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1f23e:	444b      	add	r3, r9
   1f240:	5c19      	ldrb	r1, [r3, r0]
   1f242:	e7d4      	b.n	1f1ee <smp_pairing_rsp+0xee>
		return LEGACY_OOB;
   1f244:	2106      	movs	r1, #6
   1f246:	e7d2      	b.n	1f1ee <smp_pairing_rsp+0xee>
		return JUST_WORKS;
   1f248:	2100      	movs	r1, #0
   1f24a:	e7d0      	b.n	1f1ee <smp_pairing_rsp+0xee>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1f24c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1f250:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1f252:	2b03      	cmp	r3, #3
   1f254:	d015      	beq.n	1f282 <smp_pairing_rsp+0x182>
   1f256:	d804      	bhi.n	1f262 <smp_pairing_rsp+0x162>
   1f258:	3b01      	subs	r3, #1
   1f25a:	2b01      	cmp	r3, #1
   1f25c:	d914      	bls.n	1f288 <smp_pairing_rsp+0x188>
		return BT_SMP_ERR_UNSPECIFIED;
   1f25e:	2008      	movs	r0, #8
   1f260:	e761      	b.n	1f126 <smp_pairing_rsp+0x26>
	switch (sec) {
   1f262:	2b04      	cmp	r3, #4
   1f264:	d1fb      	bne.n	1f25e <smp_pairing_rsp+0x15e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1f266:	7d23      	ldrb	r3, [r4, #20]
   1f268:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1f26a:	4293      	cmp	r3, r2
   1f26c:	bf28      	it	cs
   1f26e:	4613      	movcs	r3, r2
   1f270:	2b10      	cmp	r3, #16
   1f272:	f47f af57 	bne.w	1f124 <smp_pairing_rsp+0x24>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f276:	2105      	movs	r1, #5
   1f278:	4628      	mov	r0, r5
   1f27a:	f00e fcb0 	bl	2dbde <atomic_test_bit>
   1f27e:	2800      	cmp	r0, #0
   1f280:	d0bc      	beq.n	1f1fc <smp_pairing_rsp+0xfc>
		if (smp->method == JUST_WORKS) {
   1f282:	7a23      	ldrb	r3, [r4, #8]
   1f284:	2b00      	cmp	r3, #0
   1f286:	d0b9      	beq.n	1f1fc <smp_pairing_rsp+0xfc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f288:	2105      	movs	r1, #5
   1f28a:	4628      	mov	r0, r5
   1f28c:	f00e fca7 	bl	2dbde <atomic_test_bit>
   1f290:	2800      	cmp	r0, #0
   1f292:	f040 80ac 	bne.w	1f3ee <smp_pairing_rsp+0x2ee>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f296:	4620      	mov	r0, r4
   1f298:	f7ff f800 	bl	1e29c <latch_auth_cb>
   1f29c:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f29e:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1f2a0:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f2a4:	f7fe fffa 	bl	1e29c <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1f2a8:	f109 0188 	add.w	r1, r9, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f2ac:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1f2ae:	f899 0008 	ldrb.w	r0, [r9, #8]
   1f2b2:	f001 f8f9 	bl	204a8 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1f2b6:	7a23      	ldrb	r3, [r4, #8]
   1f2b8:	b1a0      	cbz	r0, 1f2e4 <smp_pairing_rsp+0x1e4>
   1f2ba:	7b42      	ldrb	r2, [r0, #13]
   1f2bc:	07d2      	lsls	r2, r2, #31
   1f2be:	d511      	bpl.n	1f2e4 <smp_pairing_rsp+0x1e4>
   1f2c0:	b983      	cbnz	r3, 1f2e4 <smp_pairing_rsp+0x1e4>
		LOG_ERR("JustWorks failed, authenticated keys present");
   1f2c2:	466c      	mov	r4, sp
   1f2c4:	b088      	sub	sp, #32
   1f2c6:	466a      	mov	r2, sp
   1f2c8:	4b5f      	ldr	r3, [pc, #380]	; (1f448 <smp_pairing_rsp+0x348>)
   1f2ca:	6153      	str	r3, [r2, #20]
   1f2cc:	4b5f      	ldr	r3, [pc, #380]	; (1f44c <smp_pairing_rsp+0x34c>)
   1f2ce:	6193      	str	r3, [r2, #24]
   1f2d0:	2303      	movs	r3, #3
   1f2d2:	f842 3f10 	str.w	r3, [r2, #16]!
   1f2d6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f2da:	485d      	ldr	r0, [pc, #372]	; (1f450 <smp_pairing_rsp+0x350>)
   1f2dc:	f00e fcb8 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   1f2e0:	46a5      	mov	sp, r4
	if (ret) {
   1f2e2:	e7bc      	b.n	1f25e <smp_pairing_rsp+0x15e>
	switch (smp->method) {
   1f2e4:	2b06      	cmp	r3, #6
   1f2e6:	d85e      	bhi.n	1f3a6 <smp_pairing_rsp+0x2a6>
   1f2e8:	e8df f003 	tbb	[pc, r3]
   1f2ec:	5d2f5517 	.word	0x5d2f5517
   1f2f0:	5d5d      	.short	0x5d5d
   1f2f2:	04          	.byte	0x04
   1f2f3:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1f2f4:	2e00      	cmp	r6, #0
   1f2f6:	d064      	beq.n	1f3c2 <smp_pairing_rsp+0x2c2>
   1f2f8:	68f3      	ldr	r3, [r6, #12]
   1f2fa:	2b00      	cmp	r3, #0
   1f2fc:	d061      	beq.n	1f3c2 <smp_pairing_rsp+0x2c2>
			struct bt_conn_oob_info info = {
   1f2fe:	2300      	movs	r3, #0
   1f300:	80bb      	strh	r3, [r7, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f302:	210a      	movs	r1, #10
   1f304:	4628      	mov	r0, r5
   1f306:	f00e fcc7 	bl	2dc98 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1f30a:	68f3      	ldr	r3, [r6, #12]
   1f30c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1f310:	1d39      	adds	r1, r7, #4
   1f312:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1f314:	7a23      	ldrb	r3, [r4, #8]
   1f316:	2b00      	cmp	r3, #0
   1f318:	d155      	bne.n	1f3c6 <smp_pairing_rsp+0x2c6>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f31a:	210f      	movs	r1, #15
   1f31c:	4628      	mov	r0, r5
   1f31e:	f00e fc5e 	bl	2dbde <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1f322:	2800      	cmp	r0, #0
   1f324:	d04f      	beq.n	1f3c6 <smp_pairing_rsp+0x2c6>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f326:	f1b8 0f00 	cmp.w	r8, #0
   1f32a:	d04c      	beq.n	1f3c6 <smp_pairing_rsp+0x2c6>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1f32c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1f330:	2b00      	cmp	r3, #0
   1f332:	d048      	beq.n	1f3c6 <smp_pairing_rsp+0x2c6>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f334:	4628      	mov	r0, r5
   1f336:	210a      	movs	r1, #10
   1f338:	f00e fcae 	bl	2dc98 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1f33c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1f340:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1f344:	4798      	blx	r3
		return 0;
   1f346:	2000      	movs	r0, #0
   1f348:	e6ed      	b.n	1f126 <smp_pairing_rsp+0x26>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1f34a:	2104      	movs	r1, #4
   1f34c:	1878      	adds	r0, r7, r1
   1f34e:	f004 f8a3 	bl	23498 <bt_rand>
   1f352:	2800      	cmp	r0, #0
   1f354:	d183      	bne.n	1f25e <smp_pairing_rsp+0x15e>
			passkey %= 1000000;
   1f356:	687b      	ldr	r3, [r7, #4]
   1f358:	4a3e      	ldr	r2, [pc, #248]	; (1f454 <smp_pairing_rsp+0x354>)
   1f35a:	fbb3 f1f2 	udiv	r1, r3, r2
   1f35e:	fb02 3311 	mls	r3, r2, r1, r3
   1f362:	607b      	str	r3, [r7, #4]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1f364:	b14e      	cbz	r6, 1f37a <smp_pairing_rsp+0x27a>
   1f366:	6833      	ldr	r3, [r6, #0]
   1f368:	b13b      	cbz	r3, 1f37a <smp_pairing_rsp+0x27a>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f36a:	210b      	movs	r1, #11
   1f36c:	4628      	mov	r0, r5
   1f36e:	f00e fc93 	bl	2dc98 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1f372:	6833      	ldr	r3, [r6, #0]
   1f374:	6879      	ldr	r1, [r7, #4]
   1f376:	4648      	mov	r0, r9
   1f378:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1f37a:	687b      	ldr	r3, [r7, #4]
	dst[0] = val;
   1f37c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1f380:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1f384:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1f386:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1f38a:	0a1b      	lsrs	r3, r3, #8
   1f38c:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1f390:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1f394:	e7be      	b.n	1f314 <smp_pairing_rsp+0x214>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f396:	4628      	mov	r0, r5
   1f398:	210a      	movs	r1, #10
   1f39a:	f00e fc7d 	bl	2dc98 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1f39e:	6873      	ldr	r3, [r6, #4]
   1f3a0:	4648      	mov	r0, r9
   1f3a2:	4798      	blx	r3
	if (ret) {
   1f3a4:	e7b6      	b.n	1f314 <smp_pairing_rsp+0x214>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f3a6:	466c      	mov	r4, sp
   1f3a8:	b088      	sub	sp, #32
   1f3aa:	466a      	mov	r2, sp
   1f3ac:	492a      	ldr	r1, [pc, #168]	; (1f458 <smp_pairing_rsp+0x358>)
   1f3ae:	6151      	str	r1, [r2, #20]
   1f3b0:	4926      	ldr	r1, [pc, #152]	; (1f44c <smp_pairing_rsp+0x34c>)
	switch (smp->method) {
   1f3b2:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f3b6:	2304      	movs	r3, #4
   1f3b8:	f842 3f10 	str.w	r3, [r2, #16]!
   1f3bc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f3c0:	e78b      	b.n	1f2da <smp_pairing_rsp+0x1da>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1f3c2:	2002      	movs	r0, #2
   1f3c4:	e6af      	b.n	1f126 <smp_pairing_rsp+0x26>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f3c6:	210a      	movs	r1, #10
   1f3c8:	4628      	mov	r0, r5
   1f3ca:	f00e fc08 	bl	2dbde <atomic_test_bit>
   1f3ce:	b948      	cbnz	r0, 1f3e4 <smp_pairing_rsp+0x2e4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1f3d0:	4620      	mov	r0, r4
   1f3d2:	2103      	movs	r1, #3
   1f3d4:	f00e fc60 	bl	2dc98 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1f3d8:	210e      	movs	r1, #14
   1f3da:	f00e fc5d 	bl	2dc98 <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
   1f3de:	f00e fd44 	bl	2de6a <legacy_send_pairing_confirm>
   1f3e2:	e6a0      	b.n	1f126 <smp_pairing_rsp+0x26>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1f3e4:	2100      	movs	r1, #0
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1f3e6:	4628      	mov	r0, r5
   1f3e8:	f00e fc56 	bl	2dc98 <atomic_set_bit>
		return 0;
   1f3ec:	e7ab      	b.n	1f346 <smp_pairing_rsp+0x246>
	smp->local_dist &= SEND_KEYS_SC;
   1f3ee:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   1f3f2:	f423 4379 	bic.w	r3, r3, #63744	; 0xf900
   1f3f6:	f023 03fb 	bic.w	r3, r3, #251	; 0xfb
   1f3fa:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1f3fe:	7a23      	ldrb	r3, [r4, #8]
   1f400:	b973      	cbnz	r3, 1f420 <smp_pairing_rsp+0x320>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f402:	210f      	movs	r1, #15
   1f404:	4628      	mov	r0, r5
   1f406:	f00e fbea 	bl	2dbde <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1f40a:	b148      	cbz	r0, 1f420 <smp_pairing_rsp+0x320>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f40c:	b146      	cbz	r6, 1f420 <smp_pairing_rsp+0x320>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1f40e:	6973      	ldr	r3, [r6, #20]
   1f410:	b133      	cbz	r3, 1f420 <smp_pairing_rsp+0x320>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f412:	4628      	mov	r0, r5
   1f414:	210a      	movs	r1, #10
   1f416:	f00e fc3f 	bl	2dc98 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1f41a:	6973      	ldr	r3, [r6, #20]
   1f41c:	4640      	mov	r0, r8
   1f41e:	e791      	b.n	1f344 <smp_pairing_rsp+0x244>
	if (!sc_public_key) {
   1f420:	4b0e      	ldr	r3, [pc, #56]	; (1f45c <smp_pairing_rsp+0x35c>)
   1f422:	681b      	ldr	r3, [r3, #0]
   1f424:	b90b      	cbnz	r3, 1f42a <smp_pairing_rsp+0x32a>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1f426:	2106      	movs	r1, #6
   1f428:	e7dd      	b.n	1f3e6 <smp_pairing_rsp+0x2e6>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1f42a:	4620      	mov	r0, r4
   1f42c:	210c      	movs	r1, #12
   1f42e:	f00e fc33 	bl	2dc98 <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1f432:	210b      	movs	r1, #11
   1f434:	f00e fbfd 	bl	2dc32 <atomic_clear_bit>
	return sc_send_public_key(smp);
   1f438:	f7ff fd8e 	bl	1ef58 <sc_send_public_key>
   1f43c:	e673      	b.n	1f126 <smp_pairing_rsp+0x26>
   1f43e:	bf00      	nop
   1f440:	000345de 	.word	0x000345de
   1f444:	000345c5 	.word	0x000345c5
   1f448:	000340bc 	.word	0x000340bc
   1f44c:	000343bb 	.word	0x000343bb
   1f450:	0002fc6c 	.word	0x0002fc6c
   1f454:	000f4240 	.word	0x000f4240
   1f458:	00033ea6 	.word	0x00033ea6
   1f45c:	200034f0 	.word	0x200034f0

0001f460 <smp_pairing_random>:
{
   1f460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f464:	b08d      	sub	sp, #52	; 0x34
   1f466:	af04      	add	r7, sp, #16
   1f468:	4604      	mov	r4, r0
   1f46a:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f46c:	f7fe ff16 	bl	1e29c <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1f470:	f104 0837 	add.w	r8, r4, #55	; 0x37
   1f474:	68e9      	ldr	r1, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f476:	4681      	mov	r9, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1f478:	2210      	movs	r2, #16
   1f47a:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f47c:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1f47e:	f00c fc0f 	bl	2bca0 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f482:	2105      	movs	r1, #5
   1f484:	4630      	mov	r0, r6
   1f486:	f00e fbaa 	bl	2dbde <atomic_test_bit>
   1f48a:	f8d4 a0ec 	ldr.w	sl, [r4, #236]	; 0xec
   1f48e:	2800      	cmp	r0, #0
   1f490:	d169      	bne.n	1f566 <smp_pairing_random+0x106>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1f492:	f10a 0396 	add.w	r3, sl, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1f496:	f104 0b47 	add.w	fp, r4, #71	; 0x47
   1f49a:	f107 0910 	add.w	r9, r7, #16
   1f49e:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1f4a0:	f10a 038f 	add.w	r3, sl, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1f4a4:	9300      	str	r3, [sp, #0]
   1f4a6:	f8cd 9008 	str.w	r9, [sp, #8]
   1f4aa:	f104 0310 	add.w	r3, r4, #16
   1f4ae:	f104 0209 	add.w	r2, r4, #9
   1f4b2:	4641      	mov	r1, r8
   1f4b4:	4658      	mov	r0, fp
   1f4b6:	f00e fc7e 	bl	2ddb6 <smp_c1>
	if (err) {
   1f4ba:	2800      	cmp	r0, #0
   1f4bc:	d148      	bne.n	1f550 <smp_pairing_random+0xf0>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1f4be:	2210      	movs	r2, #16
   1f4c0:	4649      	mov	r1, r9
   1f4c2:	f104 0017 	add.w	r0, r4, #23
   1f4c6:	f00c fbc4 	bl	2bc52 <memcmp>
   1f4ca:	2800      	cmp	r0, #0
   1f4cc:	f040 808b 	bne.w	1f5e6 <smp_pairing_random+0x186>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   1f4d0:	f89a 5003 	ldrb.w	r5, [sl, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1f4d4:	2d00      	cmp	r5, #0
   1f4d6:	f040 80c2 	bne.w	1f65e <smp_pairing_random+0x1fe>
	memcpy(out, r2, 8);
   1f4da:	2208      	movs	r2, #8
   1f4dc:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1f4e0:	4648      	mov	r0, r9
   1f4e2:	f00c fbdd 	bl	2bca0 <memcpy>
	memcpy(out + 8, r1, 8);
   1f4e6:	4641      	mov	r1, r8
   1f4e8:	2208      	movs	r2, #8
   1f4ea:	f107 0018 	add.w	r0, r7, #24
   1f4ee:	f00c fbd7 	bl	2bca0 <memcpy>
	return bt_encrypt_le(k, out, out);
   1f4f2:	464a      	mov	r2, r9
   1f4f4:	4649      	mov	r1, r9
   1f4f6:	4658      	mov	r0, fp
   1f4f8:	f00f fabd 	bl	2ea76 <bt_encrypt_le>
		if (err) {
   1f4fc:	4680      	mov	r8, r0
   1f4fe:	bb38      	cbnz	r0, 1f550 <smp_pairing_random+0xf0>
		(void)memset(ediv, 0, sizeof(ediv));
   1f500:	4601      	mov	r1, r0
   1f502:	2202      	movs	r2, #2
   1f504:	1d38      	adds	r0, r7, #4
   1f506:	f00c fbd6 	bl	2bcb6 <memset>
		(void)memset(rand, 0, sizeof(rand));
   1f50a:	2208      	movs	r2, #8
   1f50c:	4641      	mov	r1, r8
   1f50e:	18b8      	adds	r0, r7, r2
   1f510:	f00c fbd1 	bl	2bcb6 <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
   1f514:	7d22      	ldrb	r2, [r4, #20]
   1f516:	7b63      	ldrb	r3, [r4, #13]
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   1f518:	429a      	cmp	r2, r3
   1f51a:	bf94      	ite	ls
   1f51c:	9200      	strls	r2, [sp, #0]
   1f51e:	9300      	strhi	r3, [sp, #0]
   1f520:	f107 0108 	add.w	r1, r7, #8
   1f524:	464b      	mov	r3, r9
   1f526:	1d3a      	adds	r2, r7, #4
   1f528:	4650      	mov	r0, sl
   1f52a:	f00c ff86 	bl	2c43a <bt_conn_le_start_encryption>
   1f52e:	b1a8      	cbz	r0, 1f55c <smp_pairing_random+0xfc>
			LOG_ERR("Failed to start encryption");
   1f530:	466c      	mov	r4, sp
   1f532:	b088      	sub	sp, #32
   1f534:	aa04      	add	r2, sp, #16
   1f536:	4b55      	ldr	r3, [pc, #340]	; (1f68c <smp_pairing_random+0x22c>)
   1f538:	6153      	str	r3, [r2, #20]
   1f53a:	4b55      	ldr	r3, [pc, #340]	; (1f690 <smp_pairing_random+0x230>)
		LOG_ERR("Calculate confirm failed");
   1f53c:	6193      	str	r3, [r2, #24]
   1f53e:	2303      	movs	r3, #3
   1f540:	f842 3f10 	str.w	r3, [r2, #16]!
   1f544:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f548:	4852      	ldr	r0, [pc, #328]	; (1f694 <smp_pairing_random+0x234>)
   1f54a:	f00e fb81 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   1f54e:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1f550:	2508      	movs	r5, #8
}
   1f552:	4628      	mov	r0, r5
   1f554:	3724      	adds	r7, #36	; 0x24
   1f556:	46bd      	mov	sp, r7
   1f558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f55c:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f55e:	4630      	mov	r0, r6
   1f560:	f00e fb9a 	bl	2dc98 <atomic_set_bit>
			return 0;
   1f564:	e7f5      	b.n	1f552 <smp_pairing_random+0xf2>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1f566:	f89a 5003 	ldrb.w	r5, [sl, #3]
   1f56a:	2d00      	cmp	r5, #0
   1f56c:	f040 808b 	bne.w	1f686 <smp_pairing_random+0x226>
	switch (smp->method) {
   1f570:	7a23      	ldrb	r3, [r4, #8]
   1f572:	2b05      	cmp	r3, #5
   1f574:	d820      	bhi.n	1f5b8 <smp_pairing_random+0x158>
   1f576:	e8df f003 	tbb	[pc, r3]
   1f57a:	032d      	.short	0x032d
   1f57c:	381f2d03 	.word	0x381f2d03
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1f580:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1f584:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1f588:	40d3      	lsrs	r3, r2
   1f58a:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   1f58e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1f592:	4941      	ldr	r1, [pc, #260]	; (1f698 <smp_pairing_random+0x238>)
   1f594:	f107 0a10 	add.w	sl, r7, #16
   1f598:	f8cd a000 	str.w	sl, [sp]
   1f59c:	6809      	ldr	r1, [r1, #0]
   1f59e:	4642      	mov	r2, r8
   1f5a0:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1f5a4:	f00e fe6d 	bl	2e282 <bt_crypto_f4>
   1f5a8:	b1b0      	cbz	r0, 1f5d8 <smp_pairing_random+0x178>
		LOG_ERR("Calculate confirm failed");
   1f5aa:	466c      	mov	r4, sp
   1f5ac:	b088      	sub	sp, #32
   1f5ae:	aa04      	add	r2, sp, #16
   1f5b0:	4b3a      	ldr	r3, [pc, #232]	; (1f69c <smp_pairing_random+0x23c>)
   1f5b2:	6153      	str	r3, [r2, #20]
   1f5b4:	4b3a      	ldr	r3, [pc, #232]	; (1f6a0 <smp_pairing_random+0x240>)
   1f5b6:	e7c1      	b.n	1f53c <smp_pairing_random+0xdc>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f5b8:	466c      	mov	r4, sp
   1f5ba:	b088      	sub	sp, #32
   1f5bc:	aa04      	add	r2, sp, #16
   1f5be:	4939      	ldr	r1, [pc, #228]	; (1f6a4 <smp_pairing_random+0x244>)
   1f5c0:	6151      	str	r1, [r2, #20]
   1f5c2:	4937      	ldr	r1, [pc, #220]	; (1f6a0 <smp_pairing_random+0x240>)
		switch (smp->method) {
   1f5c4:	e9c2 1306 	strd	r1, r3, [r2, #24]
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f5c8:	2304      	movs	r3, #4
   1f5ca:	f842 3f10 	str.w	r3, [r2, #16]!
   1f5ce:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f5d2:	e7b9      	b.n	1f548 <smp_pairing_random+0xe8>
	switch (smp->method) {
   1f5d4:	2300      	movs	r3, #0
   1f5d6:	e7dc      	b.n	1f592 <smp_pairing_random+0x132>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1f5d8:	2210      	movs	r2, #16
   1f5da:	4651      	mov	r1, sl
   1f5dc:	f104 0017 	add.w	r0, r4, #23
   1f5e0:	f00c fb37 	bl	2bc52 <memcmp>
   1f5e4:	b108      	cbz	r0, 1f5ea <smp_pairing_random+0x18a>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1f5e6:	2504      	movs	r5, #4
   1f5e8:	e7b3      	b.n	1f552 <smp_pairing_random+0xf2>
		switch (smp->method) {
   1f5ea:	7a23      	ldrb	r3, [r4, #8]
   1f5ec:	2b05      	cmp	r3, #5
   1f5ee:	d838      	bhi.n	1f662 <smp_pairing_random+0x202>
   1f5f0:	e8df f003 	tbb	[pc, r3]
   1f5f4:	031f1f3e 	.word	0x031f1f3e
   1f5f8:	3e37      	.short	0x3e37
			if (bt_crypto_g2(sc_public_key, smp->pkey, smp->prnd, smp->rrnd,
   1f5fa:	f107 0310 	add.w	r3, r7, #16
   1f5fe:	4826      	ldr	r0, [pc, #152]	; (1f698 <smp_pairing_random+0x238>)
   1f600:	9300      	str	r3, [sp, #0]
   1f602:	6800      	ldr	r0, [r0, #0]
   1f604:	4643      	mov	r3, r8
   1f606:	f104 0227 	add.w	r2, r4, #39	; 0x27
   1f60a:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1f60e:	f001 f911 	bl	20834 <bt_crypto_g2>
   1f612:	2800      	cmp	r0, #0
   1f614:	d19c      	bne.n	1f550 <smp_pairing_random+0xf0>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f616:	4630      	mov	r0, r6
   1f618:	210a      	movs	r1, #10
   1f61a:	f00e fb3d 	bl	2dc98 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f61e:	2109      	movs	r1, #9
   1f620:	f00e fb3a 	bl	2dc98 <atomic_set_bit>
			smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1f624:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1f628:	6939      	ldr	r1, [r7, #16]
   1f62a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1f62e:	4798      	blx	r3
			return 0;
   1f630:	e78f      	b.n	1f552 <smp_pairing_random+0xf2>
			smp->passkey_round++;
   1f632:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1f636:	3301      	adds	r3, #1
   1f638:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   1f63a:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   1f63c:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   1f640:	d016      	beq.n	1f670 <smp_pairing_random+0x210>
			if (bt_rand(smp->prnd, 16)) {
   1f642:	2110      	movs	r1, #16
   1f644:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1f648:	f003 ff26 	bl	23498 <bt_rand>
   1f64c:	2800      	cmp	r0, #0
   1f64e:	f47f af7f 	bne.w	1f550 <smp_pairing_random+0xf0>
			atomic_set_bit(smp->allowed_cmds,
   1f652:	2103      	movs	r1, #3
   1f654:	4620      	mov	r0, r4
   1f656:	f00e fb1f 	bl	2dc98 <atomic_set_bit>
			return smp_send_pairing_confirm(smp);
   1f65a:	f7ff fb11 	bl	1ec80 <smp_send_pairing_confirm>
		return compute_and_send_central_dhcheck(smp);
   1f65e:	4605      	mov	r5, r0
   1f660:	e777      	b.n	1f552 <smp_pairing_random+0xf2>
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f662:	466c      	mov	r4, sp
   1f664:	b088      	sub	sp, #32
   1f666:	aa04      	add	r2, sp, #16
   1f668:	490e      	ldr	r1, [pc, #56]	; (1f6a4 <smp_pairing_random+0x244>)
   1f66a:	6151      	str	r1, [r2, #20]
   1f66c:	490e      	ldr	r1, [pc, #56]	; (1f6a8 <smp_pairing_random+0x248>)
   1f66e:	e7a9      	b.n	1f5c4 <smp_pairing_random+0x164>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1f670:	2107      	movs	r1, #7
   1f672:	4630      	mov	r0, r6
   1f674:	f00e fab3 	bl	2dbde <atomic_test_bit>
   1f678:	b108      	cbz	r0, 1f67e <smp_pairing_random+0x21e>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f67a:	2109      	movs	r1, #9
   1f67c:	e76f      	b.n	1f55e <smp_pairing_random+0xfe>
		return compute_and_send_central_dhcheck(smp);
   1f67e:	4620      	mov	r0, r4
   1f680:	f7ff fc8c 	bl	1ef9c <compute_and_send_central_dhcheck>
   1f684:	e7eb      	b.n	1f65e <smp_pairing_random+0x1fe>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
   1f686:	460d      	mov	r5, r1
   1f688:	e763      	b.n	1f552 <smp_pairing_random+0xf2>
   1f68a:	bf00      	nop
   1f68c:	00033ec6 	.word	0x00033ec6
   1f690:	000343e2 	.word	0x000343e2
   1f694:	0002fc6c 	.word	0x0002fc6c
   1f698:	200034f0 	.word	0x200034f0
   1f69c:	000340ed 	.word	0x000340ed
   1f6a0:	000343cd 	.word	0x000343cd
   1f6a4:	00033ea6 	.word	0x00033ea6
   1f6a8:	000343f8 	.word	0x000343f8

0001f6ac <bt_smp_sign_verify>:
{
   1f6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f6ae:	b085      	sub	sp, #20
	return buf->data + buf->len;
   1f6b0:	8a0b      	ldrh	r3, [r1, #16]
   1f6b2:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1f6b4:	68c9      	ldr	r1, [r1, #12]
{
   1f6b6:	4605      	mov	r5, r0
   1f6b8:	af00      	add	r7, sp, #0
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1f6ba:	3b0c      	subs	r3, #12
   1f6bc:	4419      	add	r1, r3
   1f6be:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   1f6c0:	f105 0688 	add.w	r6, r5, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1f6c4:	1d38      	adds	r0, r7, #4
   1f6c6:	f00c faeb 	bl	2bca0 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   1f6ca:	7a29      	ldrb	r1, [r5, #8]
   1f6cc:	4632      	mov	r2, r6
   1f6ce:	2010      	movs	r0, #16
   1f6d0:	f000 fe82 	bl	203d8 <bt_keys_find>
	if (!keys) {
   1f6d4:	4605      	mov	r5, r0
   1f6d6:	b9d8      	cbnz	r0, 1f710 <bt_smp_sign_verify+0x64>
		LOG_ERR("Unable to find Remote CSRK for %s", bt_addr_le_str(&conn->le.dst));
   1f6d8:	4630      	mov	r0, r6
   1f6da:	f7f6 fd4b 	bl	16174 <bt_addr_le_str>
   1f6de:	466c      	mov	r4, sp
   1f6e0:	b08a      	sub	sp, #40	; 0x28
   1f6e2:	466a      	mov	r2, sp
   1f6e4:	4b34      	ldr	r3, [pc, #208]	; (1f7b8 <bt_smp_sign_verify+0x10c>)
   1f6e6:	6153      	str	r3, [r2, #20]
   1f6e8:	4b34      	ldr	r3, [pc, #208]	; (1f7bc <bt_smp_sign_verify+0x110>)
   1f6ea:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f6ee:	f240 3301 	movw	r3, #769	; 0x301
   1f6f2:	8413      	strh	r3, [r2, #32]
   1f6f4:	4b32      	ldr	r3, [pc, #200]	; (1f7c0 <bt_smp_sign_verify+0x114>)
   1f6f6:	4833      	ldr	r0, [pc, #204]	; (1f7c4 <bt_smp_sign_verify+0x118>)
   1f6f8:	f842 3f10 	str.w	r3, [r2, #16]!
   1f6fc:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f700:	f00e faa6 	bl	2dc50 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   1f704:	f06f 0001 	mvn.w	r0, #1
   1f708:	46a5      	mov	sp, r4
}
   1f70a:	3714      	adds	r7, #20
   1f70c:	46bd      	mov	sp, r7
   1f70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
   1f710:	6e43      	ldr	r3, [r0, #100]	; 0x64
   1f712:	603b      	str	r3, [r7, #0]
   1f714:	8a23      	ldrh	r3, [r4, #16]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
   1f716:	68e0      	ldr	r0, [r4, #12]
   1f718:	3b0c      	subs	r3, #12
   1f71a:	2204      	movs	r2, #4
   1f71c:	4639      	mov	r1, r7
   1f71e:	4418      	add	r0, r3
   1f720:	f00c fabe 	bl	2bca0 <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
   1f724:	8a22      	ldrh	r2, [r4, #16]
   1f726:	68e1      	ldr	r1, [r4, #12]
   1f728:	3a0c      	subs	r2, #12
   1f72a:	b292      	uxth	r2, r2
   1f72c:	f105 0054 	add.w	r0, r5, #84	; 0x54
   1f730:	f7fe fe74 	bl	1e41c <smp_sign_buf>
	if (err) {
   1f734:	b1c8      	cbz	r0, 1f76a <bt_smp_sign_verify+0xbe>
		LOG_ERR("Unable to create signature for %s", bt_addr_le_str(&conn->le.dst));
   1f736:	4630      	mov	r0, r6
   1f738:	f7f6 fd1c 	bl	16174 <bt_addr_le_str>
   1f73c:	466c      	mov	r4, sp
   1f73e:	b08a      	sub	sp, #40	; 0x28
   1f740:	466a      	mov	r2, sp
   1f742:	4b21      	ldr	r3, [pc, #132]	; (1f7c8 <bt_smp_sign_verify+0x11c>)
   1f744:	6153      	str	r3, [r2, #20]
   1f746:	4b1d      	ldr	r3, [pc, #116]	; (1f7bc <bt_smp_sign_verify+0x110>)
   1f748:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f74c:	f240 3301 	movw	r3, #769	; 0x301
   1f750:	8413      	strh	r3, [r2, #32]
   1f752:	4b1b      	ldr	r3, [pc, #108]	; (1f7c0 <bt_smp_sign_verify+0x114>)
   1f754:	481b      	ldr	r0, [pc, #108]	; (1f7c4 <bt_smp_sign_verify+0x118>)
   1f756:	f842 3f10 	str.w	r3, [r2, #16]!
   1f75a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f75e:	f00e fa77 	bl	2dc50 <z_log_msg_static_create.constprop.0>
		return -EIO;
   1f762:	f06f 0004 	mvn.w	r0, #4
   1f766:	46a5      	mov	sp, r4
   1f768:	e7cf      	b.n	1f70a <bt_smp_sign_verify+0x5e>
   1f76a:	8a23      	ldrh	r3, [r4, #16]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
   1f76c:	68e1      	ldr	r1, [r4, #12]
   1f76e:	3b0c      	subs	r3, #12
   1f770:	220c      	movs	r2, #12
   1f772:	4419      	add	r1, r3
   1f774:	1d38      	adds	r0, r7, #4
   1f776:	f00c fa6c 	bl	2bc52 <memcmp>
   1f77a:	b1c8      	cbz	r0, 1f7b0 <bt_smp_sign_verify+0x104>
		LOG_ERR("Unable to verify signature for %s", bt_addr_le_str(&conn->le.dst));
   1f77c:	4630      	mov	r0, r6
   1f77e:	f7f6 fcf9 	bl	16174 <bt_addr_le_str>
   1f782:	466c      	mov	r4, sp
   1f784:	b08a      	sub	sp, #40	; 0x28
   1f786:	466a      	mov	r2, sp
   1f788:	4b10      	ldr	r3, [pc, #64]	; (1f7cc <bt_smp_sign_verify+0x120>)
   1f78a:	6153      	str	r3, [r2, #20]
   1f78c:	4b0b      	ldr	r3, [pc, #44]	; (1f7bc <bt_smp_sign_verify+0x110>)
   1f78e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f792:	f240 3301 	movw	r3, #769	; 0x301
   1f796:	8413      	strh	r3, [r2, #32]
   1f798:	4b09      	ldr	r3, [pc, #36]	; (1f7c0 <bt_smp_sign_verify+0x114>)
   1f79a:	480a      	ldr	r0, [pc, #40]	; (1f7c4 <bt_smp_sign_verify+0x118>)
   1f79c:	f842 3f10 	str.w	r3, [r2, #16]!
   1f7a0:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f7a4:	f00e fa54 	bl	2dc50 <z_log_msg_static_create.constprop.0>
		return -EBADMSG;
   1f7a8:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1f7ac:	46a5      	mov	sp, r4
   1f7ae:	e7ac      	b.n	1f70a <bt_smp_sign_verify+0x5e>
	keys->remote_csrk.cnt++;
   1f7b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1f7b2:	3301      	adds	r3, #1
   1f7b4:	666b      	str	r3, [r5, #100]	; 0x64
	return 0;
   1f7b6:	e7a8      	b.n	1f70a <bt_smp_sign_verify+0x5e>
   1f7b8:	0003410a 	.word	0x0003410a
   1f7bc:	000345a5 	.word	0x000345a5
   1f7c0:	01000004 	.word	0x01000004
   1f7c4:	0002fc6c 	.word	0x0002fc6c
   1f7c8:	00034130 	.word	0x00034130
   1f7cc:	00034156 	.word	0x00034156

0001f7d0 <bt_smp_sign>:
{
   1f7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f7d2:	b083      	sub	sp, #12
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1f7d4:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1f7d8:	af00      	add	r7, sp, #0
   1f7da:	460d      	mov	r5, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1f7dc:	4632      	mov	r2, r6
   1f7de:	7a01      	ldrb	r1, [r0, #8]
   1f7e0:	2008      	movs	r0, #8
   1f7e2:	f000 fdf9 	bl	203d8 <bt_keys_find>
	if (!keys) {
   1f7e6:	4604      	mov	r4, r0
   1f7e8:	b9d8      	cbnz	r0, 1f822 <bt_smp_sign+0x52>
		LOG_ERR("Unable to find local CSRK for %s", bt_addr_le_str(&conn->le.dst));
   1f7ea:	4630      	mov	r0, r6
   1f7ec:	f7f6 fcc2 	bl	16174 <bt_addr_le_str>
   1f7f0:	466c      	mov	r4, sp
   1f7f2:	b08a      	sub	sp, #40	; 0x28
   1f7f4:	466a      	mov	r2, sp
   1f7f6:	4b25      	ldr	r3, [pc, #148]	; (1f88c <bt_smp_sign+0xbc>)
   1f7f8:	6153      	str	r3, [r2, #20]
   1f7fa:	4b25      	ldr	r3, [pc, #148]	; (1f890 <bt_smp_sign+0xc0>)
   1f7fc:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f800:	f240 3301 	movw	r3, #769	; 0x301
   1f804:	8413      	strh	r3, [r2, #32]
   1f806:	4b23      	ldr	r3, [pc, #140]	; (1f894 <bt_smp_sign+0xc4>)
   1f808:	4823      	ldr	r0, [pc, #140]	; (1f898 <bt_smp_sign+0xc8>)
   1f80a:	f842 3f10 	str.w	r3, [r2, #16]!
   1f80e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f812:	f00e fa1d 	bl	2dc50 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   1f816:	f06f 0001 	mvn.w	r0, #1
   1f81a:	46a5      	mov	sp, r4
}
   1f81c:	370c      	adds	r7, #12
   1f81e:	46bd      	mov	sp, r7
   1f820:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1f822:	210c      	movs	r1, #12
   1f824:	1868      	adds	r0, r5, r1
   1f826:	f00e fe04 	bl	2e432 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
   1f82a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1f82c:	607b      	str	r3, [r7, #4]
	return buf->data + buf->len;
   1f82e:	8a2b      	ldrh	r3, [r5, #16]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
   1f830:	68e8      	ldr	r0, [r5, #12]
   1f832:	2204      	movs	r2, #4
   1f834:	3b0c      	subs	r3, #12
   1f836:	18b9      	adds	r1, r7, r2
   1f838:	4418      	add	r0, r3
   1f83a:	f00c fa31 	bl	2bca0 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
   1f83e:	8a2a      	ldrh	r2, [r5, #16]
   1f840:	68e9      	ldr	r1, [r5, #12]
   1f842:	3a0c      	subs	r2, #12
   1f844:	b292      	uxth	r2, r2
   1f846:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1f84a:	f7fe fde7 	bl	1e41c <smp_sign_buf>
	if (err) {
   1f84e:	b1c8      	cbz	r0, 1f884 <bt_smp_sign+0xb4>
		LOG_ERR("Unable to create signature for %s", bt_addr_le_str(&conn->le.dst));
   1f850:	4630      	mov	r0, r6
   1f852:	f7f6 fc8f 	bl	16174 <bt_addr_le_str>
   1f856:	466c      	mov	r4, sp
   1f858:	b08a      	sub	sp, #40	; 0x28
   1f85a:	466a      	mov	r2, sp
   1f85c:	4b0f      	ldr	r3, [pc, #60]	; (1f89c <bt_smp_sign+0xcc>)
   1f85e:	6153      	str	r3, [r2, #20]
   1f860:	4b0b      	ldr	r3, [pc, #44]	; (1f890 <bt_smp_sign+0xc0>)
   1f862:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f866:	f240 3301 	movw	r3, #769	; 0x301
   1f86a:	8413      	strh	r3, [r2, #32]
   1f86c:	4b09      	ldr	r3, [pc, #36]	; (1f894 <bt_smp_sign+0xc4>)
   1f86e:	480a      	ldr	r0, [pc, #40]	; (1f898 <bt_smp_sign+0xc8>)
   1f870:	f842 3f10 	str.w	r3, [r2, #16]!
   1f874:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f878:	f00e f9ea 	bl	2dc50 <z_log_msg_static_create.constprop.0>
		return -EIO;
   1f87c:	f06f 0004 	mvn.w	r0, #4
   1f880:	46a5      	mov	sp, r4
   1f882:	e7cb      	b.n	1f81c <bt_smp_sign+0x4c>
	keys->local_csrk.cnt++;
   1f884:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1f886:	3301      	adds	r3, #1
   1f888:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
   1f88a:	e7c7      	b.n	1f81c <bt_smp_sign+0x4c>
   1f88c:	0003417c 	.word	0x0003417c
   1f890:	0003458c 	.word	0x0003458c
   1f894:	01000004 	.word	0x01000004
   1f898:	0002fc6c 	.word	0x0002fc6c
   1f89c:	00034130 	.word	0x00034130

0001f8a0 <smp_pairing_complete>:
{
   1f8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1f8a4:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
	if (conn->state != BT_CONN_CONNECTED) {
   1f8a8:	7b63      	ldrb	r3, [r4, #13]
   1f8aa:	2b07      	cmp	r3, #7
{
   1f8ac:	af00      	add	r7, sp, #0
   1f8ae:	4606      	mov	r6, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1f8b0:	f100 0504 	add.w	r5, r0, #4
	if (conn->state != BT_CONN_CONNECTED) {
   1f8b4:	d040      	beq.n	1f938 <smp_pairing_complete+0x98>
		LOG_WRN("Not connected!");
   1f8b6:	46e8      	mov	r8, sp
   1f8b8:	b088      	sub	sp, #32
   1f8ba:	466a      	mov	r2, sp
   1f8bc:	4b46      	ldr	r3, [pc, #280]	; (1f9d8 <smp_pairing_complete+0x138>)
   1f8be:	6153      	str	r3, [r2, #20]
   1f8c0:	4b46      	ldr	r3, [pc, #280]	; (1f9dc <smp_pairing_complete+0x13c>)
   1f8c2:	6193      	str	r3, [r2, #24]
   1f8c4:	2303      	movs	r3, #3
   1f8c6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1f8ca:	f842 3f10 	str.w	r3, [r2, #16]!
   1f8ce:	4844      	ldr	r0, [pc, #272]	; (1f9e0 <smp_pairing_complete+0x140>)
   1f8d0:	f00e f9be 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   1f8d4:	2107      	movs	r1, #7
   1f8d6:	46c5      	mov	sp, r8
	switch (smp_err) {
   1f8d8:	4b42      	ldr	r3, [pc, #264]	; (1f9e4 <smp_pairing_complete+0x144>)
   1f8da:	f813 8001 	ldrb.w	r8, [r3, r1]
		if (conn->le.keys &&
   1f8de:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1f8e2:	b14b      	cbz	r3, 1f8f8 <smp_pairing_complete+0x58>
   1f8e4:	7b1b      	ldrb	r3, [r3, #12]
   1f8e6:	2b00      	cmp	r3, #0
   1f8e8:	d15f      	bne.n	1f9aa <smp_pairing_complete+0x10a>
			bt_keys_clear(conn->le.keys);
   1f8ea:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f8ee:	f000 fdeb 	bl	204c8 <bt_keys_clear>
			conn->le.keys = NULL;
   1f8f2:	2300      	movs	r3, #0
   1f8f4:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1f8f8:	2102      	movs	r1, #2
   1f8fa:	4628      	mov	r0, r5
   1f8fc:	f00e f96f 	bl	2dbde <atomic_test_bit>
   1f900:	b950      	cbnz	r0, 1f918 <smp_pairing_complete+0x78>
	switch (err) {
   1f902:	f1b8 0f07 	cmp.w	r8, #7
   1f906:	bf96      	itet	ls
   1f908:	4b37      	ldrls	r3, [pc, #220]	; (1f9e8 <smp_pairing_complete+0x148>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1f90a:	211f      	movhi	r1, #31
   1f90c:	f813 1008 	ldrbls.w	r1, [r3, r8]
			bt_conn_security_changed(conn,
   1f910:	4642      	mov	r2, r8
   1f912:	4620      	mov	r0, r4
   1f914:	f7fa fa28 	bl	19d68 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1f918:	2103      	movs	r1, #3
   1f91a:	4628      	mov	r0, r5
   1f91c:	f00e f95f 	bl	2dbde <atomic_test_bit>
   1f920:	b360      	cbz	r0, 1f97c <smp_pairing_complete+0xdc>
	return list->head;
   1f922:	4b32      	ldr	r3, [pc, #200]	; (1f9ec <smp_pairing_complete+0x14c>)
   1f924:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1f926:	b34b      	cbz	r3, 1f97c <smp_pairing_complete+0xdc>
	return node->next;
   1f928:	681d      	ldr	r5, [r3, #0]
   1f92a:	b105      	cbz	r5, 1f92e <smp_pairing_complete+0x8e>
   1f92c:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   1f92e:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1f932:	2b00      	cmp	r3, #0
   1f934:	d142      	bne.n	1f9bc <smp_pairing_complete+0x11c>
   1f936:	e044      	b.n	1f9c2 <smp_pairing_complete+0x122>
	if (!status) {
   1f938:	bb81      	cbnz	r1, 1f99c <smp_pairing_complete+0xfc>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1f93a:	210d      	movs	r1, #13
   1f93c:	4628      	mov	r0, r5
   1f93e:	f00e f94e 	bl	2dbde <atomic_test_bit>
		if (bond_flag) {
   1f942:	4680      	mov	r8, r0
   1f944:	b118      	cbz	r0, 1f94e <smp_pairing_complete+0xae>
			bt_keys_store(conn->le.keys);
   1f946:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f94a:	f000 fecf 	bl	206ec <bt_keys_store>
	return list->head;
   1f94e:	4b27      	ldr	r3, [pc, #156]	; (1f9ec <smp_pairing_complete+0x14c>)
   1f950:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1f952:	b19b      	cbz	r3, 1f97c <smp_pairing_complete+0xdc>
	return node->next;
   1f954:	681d      	ldr	r5, [r3, #0]
   1f956:	b105      	cbz	r5, 1f95a <smp_pairing_complete+0xba>
   1f958:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1f95a:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1f95e:	b113      	cbz	r3, 1f966 <smp_pairing_complete+0xc6>
				listener->pairing_complete(conn, bond_flag);
   1f960:	4641      	mov	r1, r8
   1f962:	4620      	mov	r0, r4
   1f964:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1f966:	b14d      	cbz	r5, 1f97c <smp_pairing_complete+0xdc>
   1f968:	462b      	mov	r3, r5
   1f96a:	68ed      	ldr	r5, [r5, #12]
   1f96c:	681b      	ldr	r3, [r3, #0]
   1f96e:	b11d      	cbz	r5, 1f978 <smp_pairing_complete+0xd8>
   1f970:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1f972:	2b00      	cmp	r3, #0
   1f974:	d1f4      	bne.n	1f960 <smp_pairing_complete+0xc0>
   1f976:	e7f7      	b.n	1f968 <smp_pairing_complete+0xc8>
   1f978:	2b00      	cmp	r3, #0
   1f97a:	d1f1      	bne.n	1f960 <smp_pairing_complete+0xc0>
	smp_reset(smp);
   1f97c:	4630      	mov	r0, r6
   1f97e:	f00e f9f2 	bl	2dd66 <smp_reset>
	if (conn->state == BT_CONN_CONNECTED && conn->sec_level != conn->required_sec_level) {
   1f982:	7b63      	ldrb	r3, [r4, #13]
   1f984:	2b07      	cmp	r3, #7
   1f986:	d106      	bne.n	1f996 <smp_pairing_complete+0xf6>
   1f988:	7a62      	ldrb	r2, [r4, #9]
   1f98a:	7aa3      	ldrb	r3, [r4, #10]
   1f98c:	429a      	cmp	r2, r3
   1f98e:	d002      	beq.n	1f996 <smp_pairing_complete+0xf6>
		bt_smp_start_security(conn);
   1f990:	4620      	mov	r0, r4
   1f992:	f00e fb24 	bl	2dfde <bt_smp_start_security>
}
   1f996:	46bd      	mov	sp, r7
   1f998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (smp_err) {
   1f99c:	3901      	subs	r1, #1
   1f99e:	b2c9      	uxtb	r1, r1
   1f9a0:	290e      	cmp	r1, #14
   1f9a2:	d999      	bls.n	1f8d8 <smp_pairing_complete+0x38>
	if (!status) {
   1f9a4:	f04f 0809 	mov.w	r8, #9
   1f9a8:	e799      	b.n	1f8de <smp_pairing_complete+0x3e>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1f9aa:	2102      	movs	r1, #2
   1f9ac:	4628      	mov	r0, r5
   1f9ae:	f00e f916 	bl	2dbde <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1f9b2:	2800      	cmp	r0, #0
   1f9b4:	d199      	bne.n	1f8ea <smp_pairing_complete+0x4a>
   1f9b6:	e79f      	b.n	1f8f8 <smp_pairing_complete+0x58>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1f9b8:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   1f9ba:	b123      	cbz	r3, 1f9c6 <smp_pairing_complete+0x126>
					listener->pairing_failed(conn, security_err);
   1f9bc:	4641      	mov	r1, r8
   1f9be:	4620      	mov	r0, r4
   1f9c0:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1f9c2:	2d00      	cmp	r5, #0
   1f9c4:	d0da      	beq.n	1f97c <smp_pairing_complete+0xdc>
   1f9c6:	462b      	mov	r3, r5
   1f9c8:	68ed      	ldr	r5, [r5, #12]
   1f9ca:	685b      	ldr	r3, [r3, #4]
   1f9cc:	2d00      	cmp	r5, #0
   1f9ce:	d1f3      	bne.n	1f9b8 <smp_pairing_complete+0x118>
				if (listener->pairing_failed) {
   1f9d0:	2b00      	cmp	r3, #0
   1f9d2:	d1f3      	bne.n	1f9bc <smp_pairing_complete+0x11c>
   1f9d4:	e7d2      	b.n	1f97c <smp_pairing_complete+0xdc>
   1f9d6:	bf00      	nop
   1f9d8:	000341a1 	.word	0x000341a1
   1f9dc:	0003454b 	.word	0x0003454b
   1f9e0:	0002fc6c 	.word	0x0002fc6c
   1f9e4:	0003438e 	.word	0x0003438e
   1f9e8:	0003437d 	.word	0x0003437d
   1f9ec:	200033f4 	.word	0x200033f4

0001f9f0 <smp_error>:
{
   1f9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1f9f4:	1d03      	adds	r3, r0, #4
{
   1f9f6:	b082      	sub	sp, #8
   1f9f8:	4605      	mov	r5, r0
   1f9fa:	af02      	add	r7, sp, #8
   1f9fc:	4688      	mov	r8, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1f9fe:	4618      	mov	r0, r3
   1fa00:	2102      	movs	r1, #2
   1fa02:	f00e f8ec 	bl	2dbde <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   1fa06:	4604      	mov	r4, r0
   1fa08:	b120      	cbz	r0, 1fa14 <smp_error+0x24>
   1fa0a:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   1fa0e:	fab4 f484 	clz	r4, r4
   1fa12:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1fa14:	2103      	movs	r1, #3
   1fa16:	4618      	mov	r0, r3
   1fa18:	f00e f8e1 	bl	2dbde <atomic_test_bit>
   1fa1c:	b1e8      	cbz	r0, 1fa5a <smp_error+0x6a>
		smp_pairing_complete(smp, reason);
   1fa1e:	4641      	mov	r1, r8
   1fa20:	4628      	mov	r0, r5
   1fa22:	f7ff ff3d 	bl	1f8a0 <smp_pairing_complete>
	if (remote_already_completed) {
   1fa26:	b32c      	cbz	r4, 1fa74 <smp_error+0x84>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   1fa28:	466c      	mov	r4, sp
   1fa2a:	b088      	sub	sp, #32
   1fa2c:	aa02      	add	r2, sp, #8
   1fa2e:	4b20      	ldr	r3, [pc, #128]	; (1fab0 <smp_error+0xc0>)
   1fa30:	6153      	str	r3, [r2, #20]
   1fa32:	4b20      	ldr	r3, [pc, #128]	; (1fab4 <smp_error+0xc4>)
   1fa34:	6193      	str	r3, [r2, #24]
   1fa36:	2303      	movs	r3, #3
   1fa38:	481f      	ldr	r0, [pc, #124]	; (1fab8 <smp_error+0xc8>)
   1fa3a:	f842 3f10 	str.w	r3, [r2, #16]!
   1fa3e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1fa42:	f00e f905 	bl	2dc50 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1fa46:	2105      	movs	r1, #5
   1fa48:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   1fa4c:	46a5      	mov	sp, r4
   1fa4e:	f00c fda8 	bl	2c5a2 <bt_conn_disconnect>
		return 0;
   1fa52:	2000      	movs	r0, #0
}
   1fa54:	46bd      	mov	sp, r7
   1fa56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1fa5a:	2101      	movs	r1, #1
   1fa5c:	4618      	mov	r0, r3
   1fa5e:	f00e f8be 	bl	2dbde <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1fa62:	2800      	cmp	r0, #0
   1fa64:	d1db      	bne.n	1fa1e <smp_error+0x2e>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1fa66:	210f      	movs	r1, #15
   1fa68:	4618      	mov	r0, r3
   1fa6a:	f00e f8b8 	bl	2dbde <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1fa6e:	2800      	cmp	r0, #0
   1fa70:	d1d5      	bne.n	1fa1e <smp_error+0x2e>
   1fa72:	e7d8      	b.n	1fa26 <smp_error+0x36>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1fa74:	2105      	movs	r1, #5
   1fa76:	4628      	mov	r0, r5
   1fa78:	f00e f922 	bl	2dcc0 <smp_create_pdu.constprop.0>
	if (!buf) {
   1fa7c:	4606      	mov	r6, r0
   1fa7e:	b198      	cbz	r0, 1faa8 <smp_error+0xb8>
	return net_buf_simple_add(&buf->b, len);
   1fa80:	2101      	movs	r1, #1
   1fa82:	300c      	adds	r0, #12
   1fa84:	f00e fcd5 	bl	2e432 <net_buf_simple_add>
	rsp->reason = reason;
   1fa88:	f880 8000 	strb.w	r8, [r0]
   1fa8c:	9400      	str	r4, [sp, #0]
   1fa8e:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   1fa92:	4623      	mov	r3, r4
   1fa94:	4632      	mov	r2, r6
   1fa96:	2106      	movs	r1, #6
   1fa98:	f00c fe4f 	bl	2c73a <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1fa9c:	2800      	cmp	r0, #0
   1fa9e:	d0d8      	beq.n	1fa52 <smp_error+0x62>
		net_buf_unref(buf);
   1faa0:	4630      	mov	r0, r6
   1faa2:	f000 ffbd 	bl	20a20 <net_buf_unref>
   1faa6:	e7d4      	b.n	1fa52 <smp_error+0x62>
		return -ENOBUFS;
   1faa8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1faac:	e7d2      	b.n	1fa54 <smp_error+0x64>
   1faae:	bf00      	nop
   1fab0:	000341b4 	.word	0x000341b4
   1fab4:	00034560 	.word	0x00034560
   1fab8:	0002fc6c 	.word	0x0002fc6c

0001fabc <bt_smp_recv>:
{
   1fabc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*hdr)) {
   1fac0:	8a0b      	ldrh	r3, [r1, #16]
{
   1fac2:	af00      	add	r7, sp, #0
   1fac4:	4605      	mov	r5, r0
   1fac6:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
   1fac8:	b99b      	cbnz	r3, 1faf2 <bt_smp_recv+0x36>
		LOG_ERR("Too small SMP PDU received");
   1faca:	466c      	mov	r4, sp
   1facc:	b088      	sub	sp, #32
   1face:	466a      	mov	r2, sp
   1fad0:	4b49      	ldr	r3, [pc, #292]	; (1fbf8 <bt_smp_recv+0x13c>)
   1fad2:	6153      	str	r3, [r2, #20]
   1fad4:	4b49      	ldr	r3, [pc, #292]	; (1fbfc <bt_smp_recv+0x140>)
   1fad6:	6193      	str	r3, [r2, #24]
   1fad8:	2303      	movs	r3, #3
   1fada:	f842 3f10 	str.w	r3, [r2, #16]!
   1fade:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1fae2:	4847      	ldr	r0, [pc, #284]	; (1fc00 <bt_smp_recv+0x144>)
   1fae4:	f00e f8b4 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   1fae8:	46a5      	mov	sp, r4
}
   1faea:	2000      	movs	r0, #0
   1faec:	46bd      	mov	sp, r7
   1faee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1faf2:	2101      	movs	r1, #1
   1faf4:	f106 000c 	add.w	r0, r6, #12
   1faf8:	f00e fccc 	bl	2e494 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1fafc:	f1a5 04ec 	sub.w	r4, r5, #236	; 0xec
   1fb00:	3de8      	subs	r5, #232	; 0xe8
   1fb02:	4680      	mov	r8, r0
   1fb04:	2104      	movs	r1, #4
   1fb06:	4628      	mov	r0, r5
   1fb08:	f00e f869 	bl	2dbde <atomic_test_bit>
   1fb0c:	f898 3000 	ldrb.w	r3, [r8]
   1fb10:	b160      	cbz	r0, 1fb2c <bt_smp_recv+0x70>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1fb12:	466c      	mov	r4, sp
   1fb14:	b088      	sub	sp, #32
   1fb16:	466a      	mov	r2, sp
   1fb18:	483a      	ldr	r0, [pc, #232]	; (1fc04 <bt_smp_recv+0x148>)
   1fb1a:	6150      	str	r0, [r2, #20]
   1fb1c:	4837      	ldr	r0, [pc, #220]	; (1fbfc <bt_smp_recv+0x140>)
   1fb1e:	e9c2 0306 	strd	r0, r3, [r2, #24]
   1fb22:	f842 1f10 	str.w	r1, [r2, #16]!
   1fb26:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1fb2a:	e7da      	b.n	1fae2 <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1fb2c:	2b0e      	cmp	r3, #14
   1fb2e:	d904      	bls.n	1fb3a <bt_smp_recv+0x7e>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1fb30:	466c      	mov	r4, sp
   1fb32:	b088      	sub	sp, #32
   1fb34:	466a      	mov	r2, sp
   1fb36:	4834      	ldr	r0, [pc, #208]	; (1fc08 <bt_smp_recv+0x14c>)
   1fb38:	e7ef      	b.n	1fb1a <bt_smp_recv+0x5e>
	if (!handlers[hdr->code].func) {
   1fb3a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1fc0c <bt_smp_recv+0x150>
   1fb3e:	f859 2033 	ldr.w	r2, [r9, r3, lsl #3]
   1fb42:	b9a2      	cbnz	r2, 1fb6e <bt_smp_recv+0xb2>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   1fb44:	466d      	mov	r5, sp
   1fb46:	b088      	sub	sp, #32
   1fb48:	466a      	mov	r2, sp
   1fb4a:	4831      	ldr	r0, [pc, #196]	; (1fc10 <bt_smp_recv+0x154>)
   1fb4c:	6150      	str	r0, [r2, #20]
   1fb4e:	482b      	ldr	r0, [pc, #172]	; (1fbfc <bt_smp_recv+0x140>)
   1fb50:	e9c2 0306 	strd	r0, r3, [r2, #24]
   1fb54:	f842 1f10 	str.w	r1, [r2, #16]!
   1fb58:	4829      	ldr	r0, [pc, #164]	; (1fc00 <bt_smp_recv+0x144>)
   1fb5a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1fb5e:	f00e f877 	bl	2dc50 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1fb62:	2107      	movs	r1, #7
   1fb64:	46ad      	mov	sp, r5
		smp_error(smp, err);
   1fb66:	4620      	mov	r0, r4
   1fb68:	f7ff ff42 	bl	1f9f0 <smp_error>
   1fb6c:	e7bd      	b.n	1faea <bt_smp_recv+0x2e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1fb6e:	4619      	mov	r1, r3
   1fb70:	4620      	mov	r0, r4
   1fb72:	f00e f87b 	bl	2dc6c <atomic_test_and_clear_bit>
   1fb76:	f898 3000 	ldrb.w	r3, [r8]
   1fb7a:	b9c0      	cbnz	r0, 1fbae <bt_smp_recv+0xf2>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   1fb7c:	466e      	mov	r6, sp
   1fb7e:	b088      	sub	sp, #32
   1fb80:	466a      	mov	r2, sp
   1fb82:	4924      	ldr	r1, [pc, #144]	; (1fc14 <bt_smp_recv+0x158>)
   1fb84:	6151      	str	r1, [r2, #20]
   1fb86:	491d      	ldr	r1, [pc, #116]	; (1fbfc <bt_smp_recv+0x140>)
   1fb88:	481d      	ldr	r0, [pc, #116]	; (1fc00 <bt_smp_recv+0x144>)
   1fb8a:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1fb8e:	2304      	movs	r3, #4
   1fb90:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1fb94:	f842 3f10 	str.w	r3, [r2, #16]!
   1fb98:	f00e f85a 	bl	2dc50 <z_log_msg_static_create.constprop.0>
	return atomic_test_bit(smp->flags, SMP_FLAG_PAIRING);
   1fb9c:	2103      	movs	r1, #3
   1fb9e:	46b5      	mov	sp, r6
   1fba0:	4628      	mov	r0, r5
   1fba2:	f00e f81c 	bl	2dbde <atomic_test_bit>
		if (is_in_pairing_procedure(smp)) {
   1fba6:	2800      	cmp	r0, #0
   1fba8:	d09f      	beq.n	1faea <bt_smp_recv+0x2e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1fbaa:	2108      	movs	r1, #8
   1fbac:	e7db      	b.n	1fb66 <bt_smp_recv+0xaa>
	if (buf->len != handlers[hdr->code].expect_len) {
   1fbae:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
   1fbb2:	8a31      	ldrh	r1, [r6, #16]
   1fbb4:	7912      	ldrb	r2, [r2, #4]
   1fbb6:	428a      	cmp	r2, r1
   1fbb8:	d013      	beq.n	1fbe2 <bt_smp_recv+0x126>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1fbba:	466d      	mov	r5, sp
   1fbbc:	b08a      	sub	sp, #40	; 0x28
   1fbbe:	466a      	mov	r2, sp
   1fbc0:	4815      	ldr	r0, [pc, #84]	; (1fc18 <bt_smp_recv+0x15c>)
   1fbc2:	6150      	str	r0, [r2, #20]
   1fbc4:	480d      	ldr	r0, [pc, #52]	; (1fbfc <bt_smp_recv+0x140>)
   1fbc6:	6213      	str	r3, [r2, #32]
   1fbc8:	2305      	movs	r3, #5
   1fbca:	e9c2 0106 	strd	r0, r1, [r2, #24]
   1fbce:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1fbd2:	f842 3f10 	str.w	r3, [r2, #16]!
   1fbd6:	480a      	ldr	r0, [pc, #40]	; (1fc00 <bt_smp_recv+0x144>)
   1fbd8:	f00e f83a 	bl	2dc50 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1fbdc:	210a      	movs	r1, #10
   1fbde:	46ad      	mov	sp, r5
   1fbe0:	e7c1      	b.n	1fb66 <bt_smp_recv+0xaa>
	err = handlers[hdr->code].func(smp, buf);
   1fbe2:	4631      	mov	r1, r6
   1fbe4:	f859 3033 	ldr.w	r3, [r9, r3, lsl #3]
   1fbe8:	4620      	mov	r0, r4
   1fbea:	4798      	blx	r3
	if (err) {
   1fbec:	4601      	mov	r1, r0
   1fbee:	2800      	cmp	r0, #0
   1fbf0:	f43f af7b 	beq.w	1faea <bt_smp_recv+0x2e>
   1fbf4:	e7b7      	b.n	1fb66 <bt_smp_recv+0xaa>
   1fbf6:	bf00      	nop
   1fbf8:	00034210 	.word	0x00034210
   1fbfc:	000344fd 	.word	0x000344fd
   1fc00:	0002fc6c 	.word	0x0002fc6c
   1fc04:	0003422f 	.word	0x0003422f
   1fc08:	00034264 	.word	0x00034264
   1fc0c:	00030510 	.word	0x00030510
   1fc10:	0003428a 	.word	0x0003428a
   1fc14:	000342a8 	.word	0x000342a8
   1fc18:	000335fa 	.word	0x000335fa

0001fc1c <bt_smp_pkey_ready>:
{
   1fc1c:	b598      	push	{r3, r4, r7, lr}
	sc_public_key = pkey;
   1fc1e:	4b1e      	ldr	r3, [pc, #120]	; (1fc98 <bt_smp_pkey_ready+0x7c>)
{
   1fc20:	af00      	add	r7, sp, #0
	sc_public_key = pkey;
   1fc22:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1fc24:	b988      	cbnz	r0, 1fc4a <bt_smp_pkey_ready+0x2e>
		LOG_WRN("Public key not available");
   1fc26:	466c      	mov	r4, sp
   1fc28:	b088      	sub	sp, #32
   1fc2a:	466a      	mov	r2, sp
   1fc2c:	4b1b      	ldr	r3, [pc, #108]	; (1fc9c <bt_smp_pkey_ready+0x80>)
   1fc2e:	6153      	str	r3, [r2, #20]
   1fc30:	4b1b      	ldr	r3, [pc, #108]	; (1fca0 <bt_smp_pkey_ready+0x84>)
   1fc32:	6193      	str	r3, [r2, #24]
   1fc34:	2303      	movs	r3, #3
   1fc36:	f842 3f10 	str.w	r3, [r2, #16]!
   1fc3a:	481a      	ldr	r0, [pc, #104]	; (1fca4 <bt_smp_pkey_ready+0x88>)
   1fc3c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1fc40:	f00e f806 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   1fc44:	46a5      	mov	sp, r4
}
   1fc46:	46bd      	mov	sp, r7
   1fc48:	bd98      	pop	{r3, r4, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fc4a:	4c17      	ldr	r4, [pc, #92]	; (1fca8 <bt_smp_pkey_ready+0x8c>)
	z_impl_k_sem_give(sem);
   1fc4c:	4817      	ldr	r0, [pc, #92]	; (1fcac <bt_smp_pkey_ready+0x90>)
   1fc4e:	f005 fb8b 	bl	25368 <z_impl_k_sem_give>
   1fc52:	f3bf 8f5b 	dmb	ish
   1fc56:	6823      	ldr	r3, [r4, #0]
   1fc58:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1fc5c:	065b      	lsls	r3, r3, #25
   1fc5e:	d5f2      	bpl.n	1fc46 <bt_smp_pkey_ready+0x2a>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1fc60:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1fc64:	78db      	ldrb	r3, [r3, #3]
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1fc66:	3c04      	subs	r4, #4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1fc68:	2b00      	cmp	r3, #0
   1fc6a:	d1ec      	bne.n	1fc46 <bt_smp_pkey_ready+0x2a>
			err = sc_send_public_key(smp);
   1fc6c:	4620      	mov	r0, r4
   1fc6e:	f7ff f973 	bl	1ef58 <sc_send_public_key>
			if (err) {
   1fc72:	4601      	mov	r1, r0
   1fc74:	b110      	cbz	r0, 1fc7c <bt_smp_pkey_ready+0x60>
				smp_error(smp, err);
   1fc76:	4620      	mov	r0, r4
   1fc78:	f7ff feba 	bl	1f9f0 <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fc7c:	f3bf 8f5b 	dmb	ish
   1fc80:	e854 3f00 	ldrex	r3, [r4]
   1fc84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1fc88:	e844 3200 	strex	r2, r3, [r4]
   1fc8c:	2a00      	cmp	r2, #0
   1fc8e:	d1f7      	bne.n	1fc80 <bt_smp_pkey_ready+0x64>
   1fc90:	f3bf 8f5b 	dmb	ish
			continue;
   1fc94:	e7d7      	b.n	1fc46 <bt_smp_pkey_ready+0x2a>
   1fc96:	bf00      	nop
   1fc98:	200034f0 	.word	0x200034f0
   1fc9c:	000342c7 	.word	0x000342c7
   1fca0:	0003439d 	.word	0x0003439d
   1fca4:	0002fc6c 	.word	0x0002fc6c
   1fca8:	2000227c 	.word	0x2000227c
   1fcac:	20000988 	.word	0x20000988

0001fcb0 <smp_signing_info>:
{
   1fcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fcb4:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1fcb6:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1fcba:	af00      	add	r7, sp, #0
   1fcbc:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1fcbe:	210d      	movs	r1, #13
   1fcc0:	3004      	adds	r0, #4
   1fcc2:	f00d ff8c 	bl	2dbde <atomic_test_bit>
   1fcc6:	b348      	cbz	r0, 1fd1c <smp_signing_info+0x6c>
					&conn->le.dst);
   1fcc8:	f105 0688 	add.w	r6, r5, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1fccc:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
   1fcce:	f8d3 800c 	ldr.w	r8, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1fcd2:	4632      	mov	r2, r6
   1fcd4:	2010      	movs	r0, #16
   1fcd6:	f00e fa8a 	bl	2e1ee <bt_keys_get_type>
		if (!keys) {
   1fcda:	b9d0      	cbnz	r0, 1fd12 <smp_signing_info+0x62>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1fcdc:	4630      	mov	r0, r6
   1fcde:	f7f6 fa49 	bl	16174 <bt_addr_le_str>
   1fce2:	466c      	mov	r4, sp
   1fce4:	b08a      	sub	sp, #40	; 0x28
   1fce6:	466a      	mov	r2, sp
   1fce8:	4b18      	ldr	r3, [pc, #96]	; (1fd4c <smp_signing_info+0x9c>)
   1fcea:	6153      	str	r3, [r2, #20]
   1fcec:	4b18      	ldr	r3, [pc, #96]	; (1fd50 <smp_signing_info+0xa0>)
   1fcee:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1fcf2:	f240 3301 	movw	r3, #769	; 0x301
   1fcf6:	8413      	strh	r3, [r2, #32]
   1fcf8:	4b16      	ldr	r3, [pc, #88]	; (1fd54 <smp_signing_info+0xa4>)
   1fcfa:	4817      	ldr	r0, [pc, #92]	; (1fd58 <smp_signing_info+0xa8>)
   1fcfc:	f842 3f10 	str.w	r3, [r2, #16]!
   1fd00:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1fd04:	f00d ffa4 	bl	2dc50 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1fd08:	2008      	movs	r0, #8
   1fd0a:	46a5      	mov	sp, r4
}
   1fd0c:	46bd      	mov	sp, r7
   1fd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
   1fd12:	2210      	movs	r2, #16
   1fd14:	4641      	mov	r1, r8
   1fd16:	3054      	adds	r0, #84	; 0x54
   1fd18:	f00b ffc2 	bl	2bca0 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
   1fd1c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1fd20:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1fd24:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1fd28:	78ea      	ldrb	r2, [r5, #3]
   1fd2a:	4313      	orrs	r3, r2
   1fd2c:	d004      	beq.n	1fd38 <smp_signing_info+0x88>
	if (!smp->local_dist && !smp->remote_dist) {
   1fd2e:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1fd32:	b139      	cbz	r1, 1fd44 <smp_signing_info+0x94>
	return 0;
   1fd34:	2000      	movs	r0, #0
   1fd36:	e7e9      	b.n	1fd0c <smp_signing_info+0x5c>
		err = bt_smp_distribute_keys(smp);
   1fd38:	4620      	mov	r0, r4
   1fd3a:	f7fe fd11 	bl	1e760 <bt_smp_distribute_keys>
		if (err) {
   1fd3e:	2800      	cmp	r0, #0
   1fd40:	d0f5      	beq.n	1fd2e <smp_signing_info+0x7e>
   1fd42:	e7e3      	b.n	1fd0c <smp_signing_info+0x5c>
		smp_pairing_complete(smp, 0);
   1fd44:	4620      	mov	r0, r4
   1fd46:	f7ff fdab 	bl	1f8a0 <smp_pairing_complete>
   1fd4a:	e7f3      	b.n	1fd34 <smp_signing_info+0x84>
   1fd4c:	00033f02 	.word	0x00033f02
   1fd50:	000344a5 	.word	0x000344a5
   1fd54:	01000004 	.word	0x01000004
   1fd58:	0002fc6c 	.word	0x0002fc6c

0001fd5c <smp_ident_addr_info>:
{
   1fd5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1fd60:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1fd64:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_conn *conn = smp->chan.chan.conn;
   1fd68:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1fd6c:	f023 0302 	bic.w	r3, r3, #2
   1fd70:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1fd74:	f898 3000 	ldrb.w	r3, [r8]
{
   1fd78:	af00      	add	r7, sp, #0
   1fd7a:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1fd7c:	f105 0988 	add.w	r9, r5, #136	; 0x88
   1fd80:	b3c3      	cbz	r3, 1fdf4 <smp_ident_addr_info+0x98>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1fd82:	f898 3006 	ldrb.w	r3, [r8, #6]
   1fd86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1fd8a:	2bc0      	cmp	r3, #192	; 0xc0
   1fd8c:	d032      	beq.n	1fdf4 <smp_ident_addr_info+0x98>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1fd8e:	4640      	mov	r0, r8
   1fd90:	f7f6 f9f0 	bl	16174 <bt_addr_le_str>
   1fd94:	466e      	mov	r6, sp
   1fd96:	b08a      	sub	sp, #40	; 0x28
   1fd98:	466c      	mov	r4, sp
   1fd9a:	f8df b190 	ldr.w	fp, [pc, #400]	; 1ff2c <smp_ident_addr_info+0x1d0>
   1fd9e:	4b64      	ldr	r3, [pc, #400]	; (1ff30 <smp_ident_addr_info+0x1d4>)
   1fda0:	f8df 8190 	ldr.w	r8, [pc, #400]	; 1ff34 <smp_ident_addr_info+0x1d8>
   1fda4:	6163      	str	r3, [r4, #20]
   1fda6:	4625      	mov	r5, r4
   1fda8:	f240 3a01 	movw	sl, #769	; 0x301
   1fdac:	e9c4 b006 	strd	fp, r0, [r4, #24]
   1fdb0:	f8a4 a020 	strh.w	sl, [r4, #32]
   1fdb4:	f845 8f10 	str.w	r8, [r5, #16]!
   1fdb8:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1fdbc:	462a      	mov	r2, r5
   1fdbe:	485e      	ldr	r0, [pc, #376]	; (1ff38 <smp_ident_addr_info+0x1dc>)
   1fdc0:	f00d ff46 	bl	2dc50 <z_log_msg_static_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1fdc4:	4648      	mov	r0, r9
   1fdc6:	46b5      	mov	sp, r6
   1fdc8:	f7f6 f9d4 	bl	16174 <bt_addr_le_str>
   1fdcc:	46a5      	mov	sp, r4
   1fdce:	4b5b      	ldr	r3, [pc, #364]	; (1ff3c <smp_ident_addr_info+0x1e0>)
   1fdd0:	61e0      	str	r0, [r4, #28]
   1fdd2:	e9c4 3b05 	strd	r3, fp, [r4, #20]
   1fdd6:	4858      	ldr	r0, [pc, #352]	; (1ff38 <smp_ident_addr_info+0x1dc>)
   1fdd8:	f8a4 a020 	strh.w	sl, [r4, #32]
   1fddc:	f8c4 8010 	str.w	r8, [r4, #16]
   1fde0:	462a      	mov	r2, r5
   1fde2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1fde6:	f00d ff33 	bl	2dc50 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   1fdea:	200a      	movs	r0, #10
   1fdec:	46b5      	mov	sp, r6
}
   1fdee:	46bd      	mov	sp, r7
   1fdf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return memcmp(a, b, sizeof(*a));
   1fdf4:	2207      	movs	r2, #7
   1fdf6:	4641      	mov	r1, r8
   1fdf8:	4648      	mov	r0, r9
   1fdfa:	f00b ff2a 	bl	2bc52 <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1fdfe:	b168      	cbz	r0, 1fe1c <smp_ident_addr_info+0xc0>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1fe00:	7a28      	ldrb	r0, [r5, #8]
   1fe02:	4641      	mov	r1, r8
   1fe04:	f000 fb50 	bl	204a8 <bt_keys_find_addr>
		if (keys) {
   1fe08:	4606      	mov	r6, r0
   1fe0a:	b138      	cbz	r0, 1fe1c <smp_ident_addr_info+0xc0>
			if (!update_keys_check(smp, keys)) {
   1fe0c:	4601      	mov	r1, r0
   1fe0e:	4620      	mov	r0, r4
   1fe10:	f00d feee 	bl	2dbf0 <update_keys_check>
   1fe14:	b330      	cbz	r0, 1fe64 <smp_ident_addr_info+0x108>
			bt_keys_clear(keys);
   1fe16:	4630      	mov	r0, r6
   1fe18:	f000 fb56 	bl	204c8 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1fe1c:	210d      	movs	r1, #13
   1fe1e:	1d20      	adds	r0, r4, #4
   1fe20:	f00d fedd 	bl	2dbde <atomic_test_bit>
   1fe24:	2800      	cmp	r0, #0
   1fe26:	d064      	beq.n	1fef2 <smp_ident_addr_info+0x196>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1fe28:	7a29      	ldrb	r1, [r5, #8]
   1fe2a:	464a      	mov	r2, r9
   1fe2c:	2002      	movs	r0, #2
   1fe2e:	f00e f9de 	bl	2e1ee <bt_keys_get_type>
		if (!keys) {
   1fe32:	4606      	mov	r6, r0
   1fe34:	b9c0      	cbnz	r0, 1fe68 <smp_ident_addr_info+0x10c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1fe36:	4648      	mov	r0, r9
   1fe38:	f7f6 f99c 	bl	16174 <bt_addr_le_str>
   1fe3c:	466c      	mov	r4, sp
   1fe3e:	b08a      	sub	sp, #40	; 0x28
   1fe40:	466a      	mov	r2, sp
   1fe42:	4b3f      	ldr	r3, [pc, #252]	; (1ff40 <smp_ident_addr_info+0x1e4>)
   1fe44:	6153      	str	r3, [r2, #20]
   1fe46:	4b39      	ldr	r3, [pc, #228]	; (1ff2c <smp_ident_addr_info+0x1d0>)
   1fe48:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1fe4c:	f240 3301 	movw	r3, #769	; 0x301
   1fe50:	8413      	strh	r3, [r2, #32]
   1fe52:	4b38      	ldr	r3, [pc, #224]	; (1ff34 <smp_ident_addr_info+0x1d8>)
   1fe54:	f842 3f10 	str.w	r3, [r2, #16]!
   1fe58:	4837      	ldr	r0, [pc, #220]	; (1ff38 <smp_ident_addr_info+0x1dc>)
   1fe5a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1fe5e:	f00d fef7 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   1fe62:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   1fe64:	2008      	movs	r0, #8
   1fe66:	e7c2      	b.n	1fdee <smp_ident_addr_info+0x92>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1fe68:	78eb      	ldrb	r3, [r5, #3]
   1fe6a:	2b00      	cmp	r3, #0
   1fe6c:	d13b      	bne.n	1fee6 <smp_ident_addr_info+0x18a>
			dst = &conn->le.resp_addr;
   1fe6e:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1fe72:	780b      	ldrb	r3, [r1, #0]
   1fe74:	2b01      	cmp	r3, #1
   1fe76:	d120      	bne.n	1feba <smp_ident_addr_info+0x15e>
		if (bt_addr_le_is_rpa(dst)) {
   1fe78:	798b      	ldrb	r3, [r1, #6]
   1fe7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1fe7e:	2b40      	cmp	r3, #64	; 0x40
   1fe80:	d11b      	bne.n	1feba <smp_ident_addr_info+0x15e>
	memcpy(dst, src, sizeof(*dst));
   1fe82:	2206      	movs	r2, #6
   1fe84:	3101      	adds	r1, #1
   1fe86:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   1fe8a:	f00b ff09 	bl	2bca0 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1fe8e:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   1fe92:	b193      	cbz	r3, 1feba <smp_ident_addr_info+0x15e>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1fe94:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   1fe98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1fe9c:	2bc0      	cmp	r3, #192	; 0xc0
   1fe9e:	d00c      	beq.n	1feba <smp_ident_addr_info+0x15e>
	memcpy(dst, src, sizeof(*dst));
   1fea0:	2207      	movs	r2, #7
   1fea2:	4641      	mov	r1, r8
   1fea4:	1c70      	adds	r0, r6, #1
   1fea6:	f00b fefb 	bl	2bca0 <memcpy>
   1feaa:	2207      	movs	r2, #7
   1feac:	4641      	mov	r1, r8
   1feae:	4648      	mov	r0, r9
   1feb0:	f00b fef6 	bl	2bca0 <memcpy>
				bt_conn_identity_resolved(conn);
   1feb4:	4628      	mov	r0, r5
   1feb6:	f7f9 ff29 	bl	19d0c <bt_conn_identity_resolved>
	conflict = bt_id_find_conflict(new_bond);
   1feba:	4630      	mov	r0, r6
   1febc:	f7f8 fcb8 	bl	18830 <bt_id_find_conflict>
	if (conflict) {
   1fec0:	b1a0      	cbz	r0, 1feec <smp_ident_addr_info+0x190>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   1fec2:	466d      	mov	r5, sp
   1fec4:	b088      	sub	sp, #32
   1fec6:	466a      	mov	r2, sp
   1fec8:	4b1e      	ldr	r3, [pc, #120]	; (1ff44 <smp_ident_addr_info+0x1e8>)
   1feca:	6153      	str	r3, [r2, #20]
   1fecc:	2403      	movs	r4, #3
   1fece:	4b1e      	ldr	r3, [pc, #120]	; (1ff48 <smp_ident_addr_info+0x1ec>)
   1fed0:	4819      	ldr	r0, [pc, #100]	; (1ff38 <smp_ident_addr_info+0x1dc>)
   1fed2:	6193      	str	r3, [r2, #24]
   1fed4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1fed8:	f842 4f10 	str.w	r4, [r2, #16]!
   1fedc:	f00d feb8 	bl	2dc50 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1fee0:	4620      	mov	r0, r4
   1fee2:	46ad      	mov	sp, r5
		if (err) {
   1fee4:	e783      	b.n	1fdee <smp_ident_addr_info+0x92>
			dst = &conn->le.init_addr;
   1fee6:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   1feea:	e7c2      	b.n	1fe72 <smp_ident_addr_info+0x116>
	bt_id_add(new_bond);
   1feec:	4630      	mov	r0, r6
   1feee:	f7f8 fcaf 	bl	18850 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1fef2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1fef6:	075b      	lsls	r3, r3, #29
   1fef8:	d503      	bpl.n	1ff02 <smp_ident_addr_info+0x1a6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1fefa:	210a      	movs	r1, #10
   1fefc:	4620      	mov	r0, r4
   1fefe:	f00d fecb 	bl	2dc98 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1ff02:	78eb      	ldrb	r3, [r5, #3]
   1ff04:	b123      	cbz	r3, 1ff10 <smp_ident_addr_info+0x1b4>
	if (!smp->local_dist && !smp->remote_dist) {
   1ff06:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1ff0a:	b159      	cbz	r1, 1ff24 <smp_ident_addr_info+0x1c8>
	return 0;
   1ff0c:	2000      	movs	r0, #0
   1ff0e:	e76e      	b.n	1fdee <smp_ident_addr_info+0x92>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   1ff10:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1ff14:	2b00      	cmp	r3, #0
   1ff16:	d1f6      	bne.n	1ff06 <smp_ident_addr_info+0x1aa>
		err = bt_smp_distribute_keys(smp);
   1ff18:	4620      	mov	r0, r4
   1ff1a:	f7fe fc21 	bl	1e760 <bt_smp_distribute_keys>
		if (err) {
   1ff1e:	2800      	cmp	r0, #0
   1ff20:	d0f1      	beq.n	1ff06 <smp_ident_addr_info+0x1aa>
   1ff22:	e764      	b.n	1fdee <smp_ident_addr_info+0x92>
		smp_pairing_complete(smp, 0);
   1ff24:	4620      	mov	r0, r4
   1ff26:	f7ff fcbb 	bl	1f8a0 <smp_pairing_complete>
   1ff2a:	e7ef      	b.n	1ff0c <smp_ident_addr_info+0x1b0>
   1ff2c:	00034463 	.word	0x00034463
   1ff30:	000342e4 	.word	0x000342e4
   1ff34:	01000004 	.word	0x01000004
   1ff38:	0002fc6c 	.word	0x0002fc6c
   1ff3c:	000342fc 	.word	0x000342fc
   1ff40:	00033f02 	.word	0x00033f02
   1ff44:	00034308 	.word	0x00034308
   1ff48:	00034450 	.word	0x00034450

0001ff4c <smp_central_ident>:
{
   1ff4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ff50:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1ff52:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   1ff56:	af00      	add	r7, sp, #0
   1ff58:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ff5a:	3004      	adds	r0, #4
   1ff5c:	210d      	movs	r1, #13
   1ff5e:	f00d fe3e 	bl	2dbde <atomic_test_bit>
   1ff62:	b388      	cbz	r0, 1ffc8 <smp_central_ident+0x7c>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ff64:	f106 0988 	add.w	r9, r6, #136	; 0x88
   1ff68:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1ff6a:	f8d3 800c 	ldr.w	r8, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ff6e:	464a      	mov	r2, r9
   1ff70:	2004      	movs	r0, #4
   1ff72:	f00e f93c 	bl	2e1ee <bt_keys_get_type>
		if (!keys) {
   1ff76:	4605      	mov	r5, r0
   1ff78:	b9d0      	cbnz	r0, 1ffb0 <smp_central_ident+0x64>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1ff7a:	4648      	mov	r0, r9
   1ff7c:	f7f6 f8fa 	bl	16174 <bt_addr_le_str>
   1ff80:	466c      	mov	r4, sp
   1ff82:	b08a      	sub	sp, #40	; 0x28
   1ff84:	466a      	mov	r2, sp
   1ff86:	4b23      	ldr	r3, [pc, #140]	; (20014 <smp_central_ident+0xc8>)
   1ff88:	6153      	str	r3, [r2, #20]
   1ff8a:	4b23      	ldr	r3, [pc, #140]	; (20018 <smp_central_ident+0xcc>)
   1ff8c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1ff90:	f240 3301 	movw	r3, #769	; 0x301
   1ff94:	8413      	strh	r3, [r2, #32]
   1ff96:	4b21      	ldr	r3, [pc, #132]	; (2001c <smp_central_ident+0xd0>)
   1ff98:	4821      	ldr	r0, [pc, #132]	; (20020 <smp_central_ident+0xd4>)
   1ff9a:	f842 3f10 	str.w	r3, [r2, #16]!
   1ff9e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1ffa2:	f00d fe55 	bl	2dc50 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1ffa6:	2008      	movs	r0, #8
   1ffa8:	46a5      	mov	sp, r4
}
   1ffaa:	46bd      	mov	sp, r7
   1ffac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1ffb0:	2202      	movs	r2, #2
   1ffb2:	4641      	mov	r1, r8
   1ffb4:	3018      	adds	r0, #24
   1ffb6:	f00b fe73 	bl	2bca0 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1ffba:	2208      	movs	r2, #8
   1ffbc:	f108 0102 	add.w	r1, r8, #2
   1ffc0:	f105 0010 	add.w	r0, r5, #16
   1ffc4:	f00b fe6c 	bl	2bca0 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1ffc8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1ffcc:	f023 0201 	bic.w	r2, r3, #1
   1ffd0:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1ffd4:	079a      	lsls	r2, r3, #30
   1ffd6:	d50a      	bpl.n	1ffee <smp_central_ident+0xa2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1ffd8:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ffda:	4620      	mov	r0, r4
   1ffdc:	f00d fe5c 	bl	2dc98 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1ffe0:	78f3      	ldrb	r3, [r6, #3]
   1ffe2:	b143      	cbz	r3, 1fff6 <smp_central_ident+0xaa>
	if (!smp->local_dist && !smp->remote_dist) {
   1ffe4:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1ffe8:	b179      	cbz	r1, 2000a <smp_central_ident+0xbe>
	return 0;
   1ffea:	2000      	movs	r0, #0
   1ffec:	e7dd      	b.n	1ffaa <smp_central_ident+0x5e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1ffee:	075b      	lsls	r3, r3, #29
   1fff0:	d5f6      	bpl.n	1ffe0 <smp_central_ident+0x94>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1fff2:	210a      	movs	r1, #10
   1fff4:	e7f1      	b.n	1ffda <smp_central_ident+0x8e>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   1fff6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1fffa:	2b00      	cmp	r3, #0
   1fffc:	d1f2      	bne.n	1ffe4 <smp_central_ident+0x98>
		err = bt_smp_distribute_keys(smp);
   1fffe:	4620      	mov	r0, r4
   20000:	f7fe fbae 	bl	1e760 <bt_smp_distribute_keys>
		if (err) {
   20004:	2800      	cmp	r0, #0
   20006:	d0ed      	beq.n	1ffe4 <smp_central_ident+0x98>
   20008:	e7cf      	b.n	1ffaa <smp_central_ident+0x5e>
		smp_pairing_complete(smp, 0);
   2000a:	4620      	mov	r0, r4
   2000c:	f7ff fc48 	bl	1f8a0 <smp_pairing_complete>
   20010:	e7eb      	b.n	1ffea <smp_central_ident+0x9e>
   20012:	bf00      	nop
   20014:	00033f02 	.word	0x00033f02
   20018:	0003442f 	.word	0x0003442f
   2001c:	01000004 	.word	0x01000004
   20020:	0002fc6c 	.word	0x0002fc6c

00020024 <smp_pairing_failed>:
{
   20024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20028:	460e      	mov	r6, r1
   2002a:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   2002c:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   20030:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   20032:	f7fe f933 	bl	1e29c <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   20036:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   20038:	46e9      	mov	r9, sp
   2003a:	b088      	sub	sp, #32
   2003c:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2003e:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   20040:	466a      	mov	r2, sp
   20042:	4915      	ldr	r1, [pc, #84]	; (20098 <smp_pairing_failed+0x74>)
   20044:	6151      	str	r1, [r2, #20]
   20046:	4915      	ldr	r1, [pc, #84]	; (2009c <smp_pairing_failed+0x78>)
   20048:	4815      	ldr	r0, [pc, #84]	; (200a0 <smp_pairing_failed+0x7c>)
   2004a:	e9c2 1306 	strd	r1, r3, [r2, #24]
   2004e:	2304      	movs	r3, #4
   20050:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20054:	f842 3f10 	str.w	r3, [r2, #16]!
   20058:	f00d fdfa 	bl	2dc50 <z_log_msg_static_create.constprop.0>
   2005c:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   2005e:	f104 0904 	add.w	r9, r4, #4
   20062:	210a      	movs	r1, #10
   20064:	4648      	mov	r0, r9
   20066:	f00d fe01 	bl	2dc6c <atomic_test_and_clear_bit>
   2006a:	b140      	cbz	r0, 2007e <smp_pairing_failed+0x5a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   2006c:	b975      	cbnz	r5, 2008c <smp_pairing_failed+0x68>
	smp_pairing_complete(smp, req->reason);
   2006e:	4620      	mov	r0, r4
   20070:	7831      	ldrb	r1, [r6, #0]
   20072:	f7ff fc15 	bl	1f8a0 <smp_pairing_complete>
}
   20076:	2000      	movs	r0, #0
   20078:	46bd      	mov	sp, r7
   2007a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   2007e:	210b      	movs	r1, #11
   20080:	4648      	mov	r0, r9
   20082:	f00d fdf3 	bl	2dc6c <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   20086:	2800      	cmp	r0, #0
   20088:	d1f0      	bne.n	2006c <smp_pairing_failed+0x48>
   2008a:	e7f0      	b.n	2006e <smp_pairing_failed+0x4a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   2008c:	692b      	ldr	r3, [r5, #16]
   2008e:	2b00      	cmp	r3, #0
   20090:	d0ed      	beq.n	2006e <smp_pairing_failed+0x4a>
			smp_auth_cb->cancel(conn);
   20092:	4640      	mov	r0, r8
   20094:	4798      	blx	r3
   20096:	e7ea      	b.n	2006e <smp_pairing_failed+0x4a>
   20098:	00034347 	.word	0x00034347
   2009c:	0003440b 	.word	0x0003440b
   200a0:	0002fc6c 	.word	0x0002fc6c

000200a4 <bt_smp_encrypt_change>:
{
   200a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   200a8:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   200aa:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   200ae:	4604      	mov	r4, r0
   200b0:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   200b2:	4630      	mov	r0, r6
   200b4:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   200b6:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   200ba:	f00d fdd7 	bl	2dc6c <atomic_test_and_clear_bit>
   200be:	2800      	cmp	r0, #0
   200c0:	d05f      	beq.n	20182 <bt_smp_encrypt_change+0xde>
	if (hci_status) {
   200c2:	b1cf      	cbz	r7, 200f8 <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   200c4:	2103      	movs	r1, #3
   200c6:	4630      	mov	r0, r6
   200c8:	f00d fd89 	bl	2dbde <atomic_test_bit>
   200cc:	2800      	cmp	r0, #0
   200ce:	d058      	beq.n	20182 <bt_smp_encrypt_change+0xde>
			uint8_t smp_err = smp_err_get(
   200d0:	4638      	mov	r0, r7
   200d2:	f7f7 fe8d 	bl	17df0 <bt_security_err_get>
	switch (auth_err) {
   200d6:	3801      	subs	r0, #1
   200d8:	b2c0      	uxtb	r0, r0
   200da:	2808      	cmp	r0, #8
   200dc:	bf9a      	itte	ls
   200de:	4b2e      	ldrls	r3, [pc, #184]	; (20198 <bt_smp_encrypt_change+0xf4>)
   200e0:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   200e2:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   200e4:	2102      	movs	r1, #2
   200e6:	4630      	mov	r0, r6
   200e8:	f00d fdd6 	bl	2dc98 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   200ec:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   200ee:	4628      	mov	r0, r5
}
   200f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   200f4:	f7ff bbd4 	b.w	1f8a0 <smp_pairing_complete>
	if (!conn->encrypt) {
   200f8:	f898 300b 	ldrb.w	r3, [r8, #11]
   200fc:	2b00      	cmp	r3, #0
   200fe:	d040      	beq.n	20182 <bt_smp_encrypt_change+0xde>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   20100:	2103      	movs	r1, #3
   20102:	4630      	mov	r0, r6
   20104:	f00d fd6b 	bl	2dbde <atomic_test_bit>
   20108:	b920      	cbnz	r0, 20114 <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   2010a:	4628      	mov	r0, r5
}
   2010c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   20110:	f00d be29 	b.w	2dd66 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   20114:	2105      	movs	r1, #5
   20116:	4630      	mov	r0, r6
   20118:	f00d fd61 	bl	2dbde <atomic_test_bit>
   2011c:	b1b8      	cbz	r0, 2014e <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   2011e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   20122:	071f      	lsls	r7, r3, #28
   20124:	d507      	bpl.n	20136 <bt_smp_encrypt_change+0x92>
   20126:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   2012a:	0718      	lsls	r0, r3, #28
   2012c:	d503      	bpl.n	20136 <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   2012e:	2111      	movs	r1, #17
   20130:	4630      	mov	r0, r6
   20132:	f00d fdb1 	bl	2dc98 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   20136:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   2013a:	f023 0308 	bic.w	r3, r3, #8
   2013e:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   20142:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   20146:	f023 0308 	bic.w	r3, r3, #8
   2014a:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   2014e:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   20152:	07d9      	lsls	r1, r3, #31
   20154:	d517      	bpl.n	20186 <bt_smp_encrypt_change+0xe2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   20156:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   20158:	4628      	mov	r0, r5
   2015a:	f00d fd9d 	bl	2dc98 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   2015e:	2102      	movs	r1, #2
   20160:	4630      	mov	r0, r6
   20162:	f00d fd99 	bl	2dc98 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   20166:	f898 3003 	ldrb.w	r3, [r8, #3]
   2016a:	b913      	cbnz	r3, 20172 <bt_smp_encrypt_change+0xce>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   2016c:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   20170:	b93b      	cbnz	r3, 20182 <bt_smp_encrypt_change+0xde>
	if (bt_smp_distribute_keys(smp)) {
   20172:	4628      	mov	r0, r5
   20174:	f7fe faf4 	bl	1e760 <bt_smp_distribute_keys>
   20178:	b918      	cbnz	r0, 20182 <bt_smp_encrypt_change+0xde>
	if (!smp->local_dist && !smp->remote_dist) {
   2017a:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   2017e:	2900      	cmp	r1, #0
   20180:	d0b5      	beq.n	200ee <bt_smp_encrypt_change+0x4a>
}
   20182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   20186:	079a      	lsls	r2, r3, #30
   20188:	d501      	bpl.n	2018e <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   2018a:	2108      	movs	r1, #8
   2018c:	e7e4      	b.n	20158 <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2018e:	075b      	lsls	r3, r3, #29
   20190:	d5e5      	bpl.n	2015e <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   20192:	210a      	movs	r1, #10
   20194:	e7e0      	b.n	20158 <bt_smp_encrypt_change+0xb4>
   20196:	bf00      	nop
   20198:	00034385 	.word	0x00034385

0002019c <smp_timeout>:
{
   2019c:	b5b0      	push	{r4, r5, r7, lr}
   2019e:	af00      	add	r7, sp, #0
	LOG_ERR("SMP Timeout");
   201a0:	466d      	mov	r5, sp
   201a2:	b088      	sub	sp, #32
{
   201a4:	4604      	mov	r4, r0
	LOG_ERR("SMP Timeout");
   201a6:	466a      	mov	r2, sp
   201a8:	4b0c      	ldr	r3, [pc, #48]	; (201dc <smp_timeout+0x40>)
   201aa:	6153      	str	r3, [r2, #20]
   201ac:	4b0c      	ldr	r3, [pc, #48]	; (201e0 <smp_timeout+0x44>)
   201ae:	6193      	str	r3, [r2, #24]
   201b0:	2303      	movs	r3, #3
   201b2:	f842 3f10 	str.w	r3, [r2, #16]!
   201b6:	480b      	ldr	r0, [pc, #44]	; (201e4 <smp_timeout+0x48>)
   201b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   201bc:	f00d fd48 	bl	2dc50 <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   201c0:	f5a4 7090 	sub.w	r0, r4, #288	; 0x120
   201c4:	46ad      	mov	sp, r5
   201c6:	2108      	movs	r1, #8
   201c8:	f7ff fb6a 	bl	1f8a0 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   201cc:	2104      	movs	r1, #4
   201ce:	f5a4 708e 	sub.w	r0, r4, #284	; 0x11c
   201d2:	f00d fd61 	bl	2dc98 <atomic_set_bit>
}
   201d6:	46bd      	mov	sp, r7
   201d8:	bdb0      	pop	{r4, r5, r7, pc}
   201da:	bf00      	nop
   201dc:	0003436d 	.word	0x0003436d
   201e0:	000343af 	.word	0x000343af
   201e4:	0002fc6c 	.word	0x0002fc6c

000201e8 <bt_smp_update_keys>:
{
   201e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   201ec:	af00      	add	r7, sp, #0
   201ee:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   201f0:	f00d fd31 	bl	2dc56 <smp_chan_get>
	if (!smp) {
   201f4:	4605      	mov	r5, r0
   201f6:	b370      	cbz	r0, 20256 <bt_smp_update_keys+0x6e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   201f8:	1d06      	adds	r6, r0, #4
   201fa:	2103      	movs	r1, #3
   201fc:	4630      	mov	r0, r6
   201fe:	f00d fcee 	bl	2dbde <atomic_test_bit>
   20202:	b340      	cbz	r0, 20256 <bt_smp_update_keys+0x6e>
	if (conn->le.keys) {
   20204:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   20208:	b108      	cbz	r0, 2020e <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   2020a:	f000 f95d 	bl	204c8 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2020e:	f104 0888 	add.w	r8, r4, #136	; 0x88
   20212:	7a20      	ldrb	r0, [r4, #8]
   20214:	4641      	mov	r1, r8
   20216:	f000 f8a1 	bl	2035c <bt_keys_get_addr>
   2021a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   2021e:	b9e8      	cbnz	r0, 2025c <bt_smp_update_keys+0x74>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   20220:	4640      	mov	r0, r8
   20222:	f7f5 ffa7 	bl	16174 <bt_addr_le_str>
   20226:	466c      	mov	r4, sp
   20228:	b08a      	sub	sp, #40	; 0x28
   2022a:	466a      	mov	r2, sp
   2022c:	4b3c      	ldr	r3, [pc, #240]	; (20320 <bt_smp_update_keys+0x138>)
   2022e:	6153      	str	r3, [r2, #20]
   20230:	4b3c      	ldr	r3, [pc, #240]	; (20324 <bt_smp_update_keys+0x13c>)
   20232:	e9c2 3006 	strd	r3, r0, [r2, #24]
   20236:	f240 3301 	movw	r3, #769	; 0x301
   2023a:	8413      	strh	r3, [r2, #32]
   2023c:	4b3a      	ldr	r3, [pc, #232]	; (20328 <bt_smp_update_keys+0x140>)
   2023e:	483b      	ldr	r0, [pc, #236]	; (2032c <bt_smp_update_keys+0x144>)
   20240:	f842 3f10 	str.w	r3, [r2, #16]!
   20244:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   20248:	f00d fd02 	bl	2dc50 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   2024c:	2108      	movs	r1, #8
   2024e:	46a5      	mov	sp, r4
   20250:	4628      	mov	r0, r5
   20252:	f7ff fbcd 	bl	1f9f0 <smp_error>
}
   20256:	46bd      	mov	sp, r7
   20258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   2025c:	210e      	movs	r1, #14
   2025e:	4630      	mov	r0, r6
   20260:	f00d fcbd 	bl	2dbde <atomic_test_bit>
   20264:	b128      	cbz	r0, 20272 <bt_smp_update_keys+0x8a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   20266:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   2026a:	7b53      	ldrb	r3, [r2, #13]
   2026c:	f043 0302 	orr.w	r3, r3, #2
   20270:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   20272:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   20274:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   20278:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   2027a:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   2027c:	d83c      	bhi.n	202f8 <bt_smp_update_keys+0x110>
   2027e:	2a00      	cmp	r2, #0
   20280:	d041      	beq.n	20306 <bt_smp_update_keys+0x11e>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   20282:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   20286:	7b53      	ldrb	r3, [r2, #13]
   20288:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   2028c:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   2028e:	7d2b      	ldrb	r3, [r5, #20]
   20290:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   20292:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
	return MIN(req->max_key_size, rsp->max_key_size);
   20296:	428b      	cmp	r3, r1
   20298:	bf28      	it	cs
   2029a:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   2029c:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2029e:	2105      	movs	r1, #5
   202a0:	4630      	mov	r0, r6
   202a2:	f00d fc9c 	bl	2dbde <atomic_test_bit>
   202a6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   202aa:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   202ac:	b3a0      	cbz	r0, 20318 <bt_smp_update_keys+0x130>
		conn->le.keys->flags |= BT_KEYS_SC;
   202ae:	f042 0210 	orr.w	r2, r2, #16
   202b2:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   202b4:	210d      	movs	r1, #13
   202b6:	4630      	mov	r0, r6
   202b8:	f00d fc91 	bl	2dbde <atomic_test_bit>
   202bc:	2800      	cmp	r0, #0
   202be:	d0ca      	beq.n	20256 <bt_smp_update_keys+0x6e>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   202c0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   202c4:	2120      	movs	r1, #32
   202c6:	f00d ffa2 	bl	2e20e <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   202ca:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   202ce:	f105 0147 	add.w	r1, r5, #71	; 0x47
   202d2:	2210      	movs	r2, #16
   202d4:	301a      	adds	r0, #26
   202d6:	f00b fce3 	bl	2bca0 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   202da:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   202de:	2208      	movs	r2, #8
   202e0:	2100      	movs	r1, #0
   202e2:	3010      	adds	r0, #16
   202e4:	f00b fce7 	bl	2bcb6 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   202e8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   202ec:	2202      	movs	r2, #2
   202ee:	2100      	movs	r1, #0
   202f0:	3018      	adds	r0, #24
   202f2:	f00b fce0 	bl	2bcb6 <memset>
   202f6:	e7ae      	b.n	20256 <bt_smp_update_keys+0x6e>
	switch (smp->method) {
   202f8:	3a05      	subs	r2, #5
   202fa:	2a01      	cmp	r2, #1
   202fc:	d803      	bhi.n	20306 <bt_smp_update_keys+0x11e>
		conn->le.keys->flags |= BT_KEYS_OOB;
   202fe:	f043 0320 	orr.w	r3, r3, #32
   20302:	734b      	strb	r3, [r1, #13]
   20304:	e7bd      	b.n	20282 <bt_smp_update_keys+0x9a>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   20306:	f023 0320 	bic.w	r3, r3, #32
   2030a:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   2030c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   20310:	7b53      	ldrb	r3, [r2, #13]
   20312:	f023 0301 	bic.w	r3, r3, #1
   20316:	e7b9      	b.n	2028c <bt_smp_update_keys+0xa4>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   20318:	f022 0210 	bic.w	r2, r2, #16
   2031c:	735a      	strb	r2, [r3, #13]
   2031e:	e79a      	b.n	20256 <bt_smp_update_keys+0x6e>
   20320:	00033f02 	.word	0x00033f02
   20324:	00034517 	.word	0x00034517
   20328:	01000004 	.word	0x01000004
   2032c:	0002fc6c 	.word	0x0002fc6c

00020330 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   20330:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   20332:	4b07      	ldr	r3, [pc, #28]	; (20350 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   20334:	4807      	ldr	r0, [pc, #28]	; (20354 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   20336:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   2033a:	f003 0306 	and.w	r3, r3, #6
   2033e:	1f9a      	subs	r2, r3, #6
   20340:	4253      	negs	r3, r2
   20342:	4153      	adcs	r3, r2
   20344:	4a04      	ldr	r2, [pc, #16]	; (20358 <bt_smp_init+0x28>)
   20346:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   20348:	f7f8 fea6 	bl	19098 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   2034c:	2000      	movs	r0, #0
   2034e:	bd08      	pop	{r3, pc}
   20350:	20000388 	.word	0x20000388
   20354:	2000064c 	.word	0x2000064c
   20358:	20004486 	.word	0x20004486

0002035c <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   2035c:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   2035e:	4c0f      	ldr	r4, [pc, #60]	; (2039c <bt_keys_get_addr+0x40>)
   20360:	f814 3b01 	ldrb.w	r3, [r4], #1
   20364:	4283      	cmp	r3, r0
{
   20366:	4605      	mov	r5, r0
   20368:	460e      	mov	r6, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   2036a:	d007      	beq.n	2037c <bt_keys_get_addr+0x20>
	return memcmp(a, b, sizeof(*a));
   2036c:	490c      	ldr	r1, [pc, #48]	; (203a0 <bt_keys_get_addr+0x44>)
   2036e:	480d      	ldr	r0, [pc, #52]	; (203a4 <bt_keys_get_addr+0x48>)
   20370:	2207      	movs	r2, #7
   20372:	f00b fc6e 	bl	2bc52 <memcmp>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   20376:	b148      	cbz	r0, 2038c <bt_keys_get_addr+0x30>
		return keys;
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   20378:	2000      	movs	r0, #0
}
   2037a:	bd70      	pop	{r4, r5, r6, pc}
   2037c:	2207      	movs	r2, #7
   2037e:	4620      	mov	r0, r4
   20380:	f00b fc67 	bl	2bc52 <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   20384:	2800      	cmp	r0, #0
   20386:	d1f1      	bne.n	2036c <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   20388:	4804      	ldr	r0, [pc, #16]	; (2039c <bt_keys_get_addr+0x40>)
   2038a:	e7f6      	b.n	2037a <bt_keys_get_addr+0x1e>
	memcpy(dst, src, sizeof(*dst));
   2038c:	2207      	movs	r2, #7
   2038e:	4631      	mov	r1, r6
   20390:	4804      	ldr	r0, [pc, #16]	; (203a4 <bt_keys_get_addr+0x48>)
		keys->id = id;
   20392:	f804 5c01 	strb.w	r5, [r4, #-1]
   20396:	f00b fc83 	bl	2bca0 <memcpy>
}
   2039a:	e7f5      	b.n	20388 <bt_keys_get_addr+0x2c>
   2039c:	200034f4 	.word	0x200034f4
   203a0:	00031d70 	.word	0x00031d70
   203a4:	200034f5 	.word	0x200034f5

000203a8 <bt_keys_foreach_type>:
	}
}

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   203a8:	b410      	push	{r4}
   203aa:	460b      	mov	r3, r1
   203ac:	4611      	mov	r1, r2
	int i;

	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   203ae:	4a04      	ldr	r2, [pc, #16]	; (203c0 <bt_keys_foreach_type+0x18>)
   203b0:	89d4      	ldrh	r4, [r2, #14]
   203b2:	4204      	tst	r4, r0
   203b4:	d002      	beq.n	203bc <bt_keys_foreach_type+0x14>
			func(&key_pool[i], data);
		}
	}
}
   203b6:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   203b8:	4610      	mov	r0, r2
   203ba:	4718      	bx	r3
}
   203bc:	bc10      	pop	{r4}
   203be:	4770      	bx	lr
   203c0:	200034f4 	.word	0x200034f4

000203c4 <keys_commit>:

	bt_id_add(keys);
}

static int keys_commit(void)
{
   203c4:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
   203c6:	4903      	ldr	r1, [pc, #12]	; (203d4 <keys_commit+0x10>)
   203c8:	2200      	movs	r2, #0
   203ca:	2002      	movs	r0, #2
   203cc:	f7ff ffec 	bl	203a8 <bt_keys_foreach_type>
	}

	return 0;
}
   203d0:	2000      	movs	r0, #0
   203d2:	bd08      	pop	{r3, pc}
   203d4:	0002e1eb 	.word	0x0002e1eb

000203d8 <bt_keys_find>:
{
   203d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   203dc:	f8df 8038 	ldr.w	r8, [pc, #56]	; 20418 <bt_keys_find+0x40>
{
   203e0:	4605      	mov	r5, r0
   203e2:	460e      	mov	r6, r1
   203e4:	4617      	mov	r7, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   203e6:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   203e8:	f8b8 400e 	ldrh.w	r4, [r8, #14]
   203ec:	f898 2000 	ldrb.w	r2, [r8]
   203f0:	402c      	ands	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   203f2:	b113      	cbz	r3, 203fa <bt_keys_find+0x22>
	return NULL;
   203f4:	2000      	movs	r0, #0
}
   203f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   203fa:	2c00      	cmp	r4, #0
   203fc:	d0fa      	beq.n	203f4 <bt_keys_find+0x1c>
   203fe:	4296      	cmp	r6, r2
   20400:	d1f8      	bne.n	203f4 <bt_keys_find+0x1c>
	return memcmp(a, b, sizeof(*a));
   20402:	4806      	ldr	r0, [pc, #24]	; (2041c <bt_keys_find+0x44>)
   20404:	2207      	movs	r2, #7
   20406:	4639      	mov	r1, r7
   20408:	f00b fc23 	bl	2bc52 <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2040c:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   2040e:	2800      	cmp	r0, #0
   20410:	d1ea      	bne.n	203e8 <bt_keys_find+0x10>
			return &key_pool[i];
   20412:	4801      	ldr	r0, [pc, #4]	; (20418 <bt_keys_find+0x40>)
   20414:	e7ef      	b.n	203f6 <bt_keys_find+0x1e>
   20416:	bf00      	nop
   20418:	200034f4 	.word	0x200034f4
   2041c:	200034f5 	.word	0x200034f5

00020420 <bt_keys_find_irk>:
{
   20420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   20422:	780b      	ldrb	r3, [r1, #0]
   20424:	2b01      	cmp	r3, #1
   20426:	4606      	mov	r6, r0
   20428:	460c      	mov	r4, r1
   2042a:	d001      	beq.n	20430 <bt_keys_find_irk+0x10>
		return NULL;
   2042c:	2000      	movs	r0, #0
}
   2042e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   20430:	798b      	ldrb	r3, [r1, #6]
   20432:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   20436:	2b40      	cmp	r3, #64	; 0x40
   20438:	d1f8      	bne.n	2042c <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2043a:	4d18      	ldr	r5, [pc, #96]	; (2049c <bt_keys_find_irk+0x7c>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2043c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2043e:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   20442:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   20444:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   20446:	f002 0202 	and.w	r2, r2, #2
   2044a:	b1c3      	cbz	r3, 2047e <bt_keys_find_irk+0x5e>
   2044c:	2300      	movs	r3, #0
   2044e:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   20450:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   20452:	f002 0202 	and.w	r2, r2, #2
   20456:	2b00      	cmp	r3, #0
   20458:	d1e8      	bne.n	2042c <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2045a:	2a00      	cmp	r2, #0
   2045c:	d0e6      	beq.n	2042c <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   2045e:	42b1      	cmp	r1, r6
   20460:	d1e4      	bne.n	2042c <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   20462:	1c67      	adds	r7, r4, #1
   20464:	480e      	ldr	r0, [pc, #56]	; (204a0 <bt_keys_find_irk+0x80>)
   20466:	4639      	mov	r1, r7
   20468:	f00b fc60 	bl	2bd2c <bt_rpa_irk_matches>
   2046c:	2301      	movs	r3, #1
   2046e:	2800      	cmp	r0, #0
   20470:	d0ed      	beq.n	2044e <bt_keys_find_irk+0x2e>
	memcpy(dst, src, sizeof(*dst));
   20472:	2206      	movs	r2, #6
   20474:	4639      	mov	r1, r7
   20476:	480b      	ldr	r0, [pc, #44]	; (204a4 <bt_keys_find_irk+0x84>)
   20478:	f00b fc12 	bl	2bca0 <memcpy>
}
   2047c:	e00b      	b.n	20496 <bt_keys_find_irk+0x76>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2047e:	2a00      	cmp	r2, #0
   20480:	d0e5      	beq.n	2044e <bt_keys_find_irk+0x2e>
		if (key_pool[i].id == id &&
   20482:	42b0      	cmp	r0, r6
   20484:	d1e3      	bne.n	2044e <bt_keys_find_irk+0x2e>
	return memcmp(a, b, sizeof(*a));
   20486:	2206      	movs	r2, #6
   20488:	4639      	mov	r1, r7
   2048a:	1c60      	adds	r0, r4, #1
   2048c:	f00b fbe1 	bl	2bc52 <memcmp>
   20490:	2301      	movs	r3, #1
   20492:	2800      	cmp	r0, #0
   20494:	d1d5      	bne.n	20442 <bt_keys_find_irk+0x22>
			return &key_pool[i];
   20496:	4801      	ldr	r0, [pc, #4]	; (2049c <bt_keys_find_irk+0x7c>)
   20498:	e7c9      	b.n	2042e <bt_keys_find_irk+0xe>
   2049a:	bf00      	nop
   2049c:	200034f4 	.word	0x200034f4
   204a0:	2000351e 	.word	0x2000351e
   204a4:	2000352e 	.word	0x2000352e

000204a8 <bt_keys_find_addr>:
{
   204a8:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   204aa:	4c06      	ldr	r4, [pc, #24]	; (204c4 <bt_keys_find_addr+0x1c>)
   204ac:	7823      	ldrb	r3, [r4, #0]
   204ae:	4283      	cmp	r3, r0
   204b0:	d104      	bne.n	204bc <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   204b2:	2207      	movs	r2, #7
   204b4:	1c60      	adds	r0, r4, #1
   204b6:	f00b fbcc 	bl	2bc52 <memcmp>
   204ba:	b108      	cbz	r0, 204c0 <bt_keys_find_addr+0x18>
	return NULL;
   204bc:	2000      	movs	r0, #0
}
   204be:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   204c0:	4620      	mov	r0, r4
   204c2:	e7fc      	b.n	204be <bt_keys_find_addr+0x16>
   204c4:	200034f4 	.word	0x200034f4

000204c8 <bt_keys_clear>:
{
   204c8:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   204ca:	7a03      	ldrb	r3, [r0, #8]
   204cc:	075b      	lsls	r3, r3, #29
{
   204ce:	b08c      	sub	sp, #48	; 0x30
   204d0:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   204d2:	d501      	bpl.n	204d8 <bt_keys_clear+0x10>
		bt_id_del(keys);
   204d4:	f7f8 f9d6 	bl	18884 <bt_id_del>
		if (keys->id) {
   204d8:	4625      	mov	r5, r4
   204da:	f815 2b01 	ldrb.w	r2, [r5], #1
   204de:	b1b2      	cbz	r2, 2050e <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   204e0:	ae02      	add	r6, sp, #8
   204e2:	2104      	movs	r1, #4
   204e4:	4630      	mov	r0, r6
   204e6:	f008 ff83 	bl	293f0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   204ea:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   204ec:	4a09      	ldr	r2, [pc, #36]	; (20514 <bt_keys_clear+0x4c>)
   204ee:	462b      	mov	r3, r5
   204f0:	2124      	movs	r1, #36	; 0x24
   204f2:	a803      	add	r0, sp, #12
   204f4:	f7f6 f8e4 	bl	166c0 <bt_settings_encode_key>
		settings_delete(key);
   204f8:	a803      	add	r0, sp, #12
   204fa:	f00a f8c1 	bl	2a680 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   204fe:	2284      	movs	r2, #132	; 0x84
   20500:	2100      	movs	r1, #0
   20502:	4620      	mov	r0, r4
}
   20504:	b00c      	add	sp, #48	; 0x30
   20506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   2050a:	f00b bbd4 	b.w	2bcb6 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   2050e:	9200      	str	r2, [sp, #0]
   20510:	e7ec      	b.n	204ec <bt_keys_clear+0x24>
   20512:	bf00      	nop
   20514:	000346c8 	.word	0x000346c8

00020518 <keys_set>:
{
   20518:	b5f0      	push	{r4, r5, r6, r7, lr}
   2051a:	b0a3      	sub	sp, #140	; 0x8c
   2051c:	4614      	mov	r4, r2
   2051e:	af00      	add	r7, sp, #0
	if (!name) {
   20520:	4606      	mov	r6, r0
   20522:	b988      	cbnz	r0, 20548 <keys_set+0x30>
		LOG_ERR("Insufficient number of arguments");
   20524:	466c      	mov	r4, sp
   20526:	b088      	sub	sp, #32
   20528:	466a      	mov	r2, sp
   2052a:	4b66      	ldr	r3, [pc, #408]	; (206c4 <keys_set+0x1ac>)
   2052c:	6153      	str	r3, [r2, #20]
   2052e:	4b66      	ldr	r3, [pc, #408]	; (206c8 <keys_set+0x1b0>)
   20530:	6193      	str	r3, [r2, #24]
   20532:	2303      	movs	r3, #3
   20534:	f842 3f10 	str.w	r3, [r2, #16]!
   20538:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2053c:	4603      	mov	r3, r0
   2053e:	4863      	ldr	r0, [pc, #396]	; (206cc <keys_set+0x1b4>)
   20540:	f7f3 fd76 	bl	14030 <z_impl_z_log_msg_static_create>
   20544:	46a5      	mov	sp, r4
			return -EINVAL;
   20546:	e018      	b.n	2057a <keys_set+0x62>
	len = read_cb(cb_arg, val, sizeof(val));
   20548:	2278      	movs	r2, #120	; 0x78
   2054a:	f107 0110 	add.w	r1, r7, #16
   2054e:	4618      	mov	r0, r3
   20550:	47a0      	blx	r4
	if (len < 0) {
   20552:	1e04      	subs	r4, r0, #0
   20554:	da17      	bge.n	20586 <keys_set+0x6e>
		LOG_ERR("Failed to read value (err %zd)", len);
   20556:	466d      	mov	r5, sp
   20558:	b088      	sub	sp, #32
   2055a:	466a      	mov	r2, sp
   2055c:	4b5c      	ldr	r3, [pc, #368]	; (206d0 <keys_set+0x1b8>)
   2055e:	6153      	str	r3, [r2, #20]
   20560:	4b59      	ldr	r3, [pc, #356]	; (206c8 <keys_set+0x1b0>)
   20562:	e9c2 3406 	strd	r3, r4, [r2, #24]
   20566:	2304      	movs	r3, #4
   20568:	f842 3f10 	str.w	r3, [r2, #16]!
   2056c:	4857      	ldr	r0, [pc, #348]	; (206cc <keys_set+0x1b4>)
   2056e:	2300      	movs	r3, #0
   20570:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20574:	f7f3 fd5c 	bl	14030 <z_impl_z_log_msg_static_create>
   20578:	46ad      	mov	sp, r5
		return -EINVAL;
   2057a:	f06f 0515 	mvn.w	r5, #21
}
   2057e:	4628      	mov	r0, r5
   20580:	378c      	adds	r7, #140	; 0x8c
   20582:	46bd      	mov	sp, r7
   20584:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_settings_decode_key(name, &addr);
   20586:	f107 0108 	add.w	r1, r7, #8
   2058a:	4630      	mov	r0, r6
   2058c:	f00b fc23 	bl	2bdd6 <bt_settings_decode_key>
	if (err) {
   20590:	4605      	mov	r5, r0
   20592:	b188      	cbz	r0, 205b8 <keys_set+0xa0>
		LOG_ERR("Unable to decode address %s", name);
   20594:	466c      	mov	r4, sp
   20596:	b08a      	sub	sp, #40	; 0x28
   20598:	466a      	mov	r2, sp
   2059a:	4b4e      	ldr	r3, [pc, #312]	; (206d4 <keys_set+0x1bc>)
   2059c:	6153      	str	r3, [r2, #20]
   2059e:	4b4a      	ldr	r3, [pc, #296]	; (206c8 <keys_set+0x1b0>)
   205a0:	e9c2 3606 	strd	r3, r6, [r2, #24]
   205a4:	f240 3301 	movw	r3, #769	; 0x301
   205a8:	8413      	strh	r3, [r2, #32]
   205aa:	4b4b      	ldr	r3, [pc, #300]	; (206d8 <keys_set+0x1c0>)
   205ac:	f842 3f10 	str.w	r3, [r2, #16]!
   205b0:	2300      	movs	r3, #0
   205b2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   205b6:	e7c2      	b.n	2053e <keys_set+0x26>
	settings_name_next(name, &next);
   205b8:	1d39      	adds	r1, r7, #4
   205ba:	4630      	mov	r0, r6
   205bc:	f00a f888 	bl	2a6d0 <settings_name_next>
	if (!next) {
   205c0:	6878      	ldr	r0, [r7, #4]
   205c2:	b198      	cbz	r0, 205ec <keys_set+0xd4>
		unsigned long next_id = strtoul(next, NULL, 10);
   205c4:	220a      	movs	r2, #10
   205c6:	4629      	mov	r1, r5
   205c8:	f00b fa72 	bl	2bab0 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   205cc:	b170      	cbz	r0, 205ec <keys_set+0xd4>
			LOG_ERR("Invalid local identity %lu", next_id);
   205ce:	466c      	mov	r4, sp
   205d0:	b088      	sub	sp, #32
   205d2:	466a      	mov	r2, sp
   205d4:	4b41      	ldr	r3, [pc, #260]	; (206dc <keys_set+0x1c4>)
   205d6:	6153      	str	r3, [r2, #20]
   205d8:	4b3b      	ldr	r3, [pc, #236]	; (206c8 <keys_set+0x1b0>)
   205da:	e9c2 3006 	strd	r3, r0, [r2, #24]
   205de:	2304      	movs	r3, #4
   205e0:	f842 3f10 	str.w	r3, [r2, #16]!
   205e4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   205e8:	462b      	mov	r3, r5
   205ea:	e7a8      	b.n	2053e <keys_set+0x26>
	if (!len) {
   205ec:	bb2c      	cbnz	r4, 2063a <keys_set+0x122>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   205ee:	f107 0208 	add.w	r2, r7, #8
   205f2:	4621      	mov	r1, r4
   205f4:	203f      	movs	r0, #63	; 0x3f
   205f6:	f7ff feef 	bl	203d8 <bt_keys_find>
		if (keys) {
   205fa:	b120      	cbz	r0, 20606 <keys_set+0xee>
			(void)memset(keys, 0, sizeof(*keys));
   205fc:	2284      	movs	r2, #132	; 0x84
   205fe:	4621      	mov	r1, r4
   20600:	f00b fb59 	bl	2bcb6 <memset>
			LOG_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   20604:	e7bb      	b.n	2057e <keys_set+0x66>
			LOG_WRN("Unable to find deleted keys for %s", bt_addr_le_str(&addr));
   20606:	f107 0008 	add.w	r0, r7, #8
   2060a:	f7f5 fdb3 	bl	16174 <bt_addr_le_str>
   2060e:	466e      	mov	r6, sp
   20610:	b08a      	sub	sp, #40	; 0x28
   20612:	466a      	mov	r2, sp
   20614:	4b32      	ldr	r3, [pc, #200]	; (206e0 <keys_set+0x1c8>)
   20616:	6153      	str	r3, [r2, #20]
   20618:	4b2b      	ldr	r3, [pc, #172]	; (206c8 <keys_set+0x1b0>)
   2061a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   2061e:	f240 3301 	movw	r3, #769	; 0x301
   20622:	8413      	strh	r3, [r2, #32]
   20624:	4b2c      	ldr	r3, [pc, #176]	; (206d8 <keys_set+0x1c0>)
   20626:	f842 3f10 	str.w	r3, [r2, #16]!
   2062a:	4828      	ldr	r0, [pc, #160]	; (206cc <keys_set+0x1b4>)
   2062c:	4623      	mov	r3, r4
   2062e:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   20632:	f7f3 fcfd 	bl	14030 <z_impl_z_log_msg_static_create>
   20636:	46b5      	mov	sp, r6
   20638:	e7a1      	b.n	2057e <keys_set+0x66>
	keys = bt_keys_get_addr(id, &addr);
   2063a:	f107 0108 	add.w	r1, r7, #8
   2063e:	2000      	movs	r0, #0
   20640:	f7ff fe8c 	bl	2035c <bt_keys_get_addr>
	if (!keys) {
   20644:	4606      	mov	r6, r0
   20646:	b9d8      	cbnz	r0, 20680 <keys_set+0x168>
		LOG_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   20648:	f107 0008 	add.w	r0, r7, #8
   2064c:	f7f5 fd92 	bl	16174 <bt_addr_le_str>
   20650:	466c      	mov	r4, sp
   20652:	b08a      	sub	sp, #40	; 0x28
   20654:	466a      	mov	r2, sp
   20656:	4b23      	ldr	r3, [pc, #140]	; (206e4 <keys_set+0x1cc>)
   20658:	6153      	str	r3, [r2, #20]
   2065a:	4b1b      	ldr	r3, [pc, #108]	; (206c8 <keys_set+0x1b0>)
   2065c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   20660:	f240 3301 	movw	r3, #769	; 0x301
   20664:	8413      	strh	r3, [r2, #32]
   20666:	4b1c      	ldr	r3, [pc, #112]	; (206d8 <keys_set+0x1c0>)
   20668:	f842 3f10 	str.w	r3, [r2, #16]!
   2066c:	4817      	ldr	r0, [pc, #92]	; (206cc <keys_set+0x1b4>)
   2066e:	4633      	mov	r3, r6
   20670:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   20674:	f7f3 fcdc 	bl	14030 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   20678:	f06f 050b 	mvn.w	r5, #11
   2067c:	46a5      	mov	sp, r4
   2067e:	e77e      	b.n	2057e <keys_set+0x66>
	if (len != BT_KEYS_STORAGE_LEN) {
   20680:	2c78      	cmp	r4, #120	; 0x78
   20682:	d017      	beq.n	206b4 <keys_set+0x19c>
			LOG_ERR("Invalid key length %zd != %zu", len, BT_KEYS_STORAGE_LEN);
   20684:	466d      	mov	r5, sp
   20686:	b08a      	sub	sp, #40	; 0x28
   20688:	466a      	mov	r2, sp
   2068a:	4b17      	ldr	r3, [pc, #92]	; (206e8 <keys_set+0x1d0>)
   2068c:	6153      	str	r3, [r2, #20]
   2068e:	4b0e      	ldr	r3, [pc, #56]	; (206c8 <keys_set+0x1b0>)
   20690:	e9c2 3406 	strd	r3, r4, [r2, #24]
   20694:	2378      	movs	r3, #120	; 0x78
   20696:	6213      	str	r3, [r2, #32]
   20698:	2305      	movs	r3, #5
   2069a:	f842 3f10 	str.w	r3, [r2, #16]!
   2069e:	480b      	ldr	r0, [pc, #44]	; (206cc <keys_set+0x1b4>)
   206a0:	2300      	movs	r3, #0
   206a2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   206a6:	f7f3 fcc3 	bl	14030 <z_impl_z_log_msg_static_create>
			bt_keys_clear(keys);
   206aa:	4630      	mov	r0, r6
   206ac:	46ad      	mov	sp, r5
   206ae:	f7ff ff0b 	bl	204c8 <bt_keys_clear>
			return -EINVAL;
   206b2:	e762      	b.n	2057a <keys_set+0x62>
		memcpy(keys->storage_start, val, len);
   206b4:	4622      	mov	r2, r4
   206b6:	f107 0110 	add.w	r1, r7, #16
   206ba:	300c      	adds	r0, #12
   206bc:	f00b faf0 	bl	2bca0 <memcpy>
	return 0;
   206c0:	e75d      	b.n	2057e <keys_set+0x66>
   206c2:	bf00      	nop
   206c4:	00031e73 	.word	0x00031e73
   206c8:	000346ae 	.word	0x000346ae
   206cc:	0002fc2c 	.word	0x0002fc2c
   206d0:	000345fe 	.word	0x000345fe
   206d4:	00033736 	.word	0x00033736
   206d8:	01000004 	.word	0x01000004
   206dc:	00033756 	.word	0x00033756
   206e0:	00034621 	.word	0x00034621
   206e4:	00034648 	.word	0x00034648
   206e8:	0003466b 	.word	0x0003466b

000206ec <bt_keys_store>:
{
   206ec:	b5b0      	push	{r4, r5, r7, lr}
	if (keys->id) {
   206ee:	4605      	mov	r5, r0
{
   206f0:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   206f2:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   206f6:	af02      	add	r7, sp, #8
   206f8:	4604      	mov	r4, r0
	if (keys->id) {
   206fa:	b342      	cbz	r2, 2074e <bt_keys_store+0x62>
		u8_to_dec(id, sizeof(id), keys->id);
   206fc:	2104      	movs	r1, #4
   206fe:	4638      	mov	r0, r7
   20700:	f008 fe76 	bl	293f0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   20704:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   20706:	4a13      	ldr	r2, [pc, #76]	; (20754 <bt_keys_store+0x68>)
   20708:	462b      	mov	r3, r5
   2070a:	2124      	movs	r1, #36	; 0x24
   2070c:	1d38      	adds	r0, r7, #4
   2070e:	f7f5 ffd7 	bl	166c0 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   20712:	f104 010c 	add.w	r1, r4, #12
   20716:	2278      	movs	r2, #120	; 0x78
   20718:	1d38      	adds	r0, r7, #4
   2071a:	f7f4 f98f 	bl	14a3c <settings_save_one>
	if (err) {
   2071e:	4604      	mov	r4, r0
   20720:	b188      	cbz	r0, 20746 <bt_keys_store+0x5a>
		LOG_ERR("Failed to save keys (err %d)", err);
   20722:	466d      	mov	r5, sp
   20724:	b088      	sub	sp, #32
   20726:	aa02      	add	r2, sp, #8
   20728:	4b0b      	ldr	r3, [pc, #44]	; (20758 <bt_keys_store+0x6c>)
   2072a:	6153      	str	r3, [r2, #20]
   2072c:	4b0b      	ldr	r3, [pc, #44]	; (2075c <bt_keys_store+0x70>)
   2072e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   20732:	2304      	movs	r3, #4
   20734:	f842 3f10 	str.w	r3, [r2, #16]!
   20738:	4809      	ldr	r0, [pc, #36]	; (20760 <bt_keys_store+0x74>)
   2073a:	2300      	movs	r3, #0
   2073c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20740:	f7f3 fc76 	bl	14030 <z_impl_z_log_msg_static_create>
   20744:	46ad      	mov	sp, r5
}
   20746:	4620      	mov	r0, r4
   20748:	3728      	adds	r7, #40	; 0x28
   2074a:	46bd      	mov	sp, r7
   2074c:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   2074e:	9200      	str	r2, [sp, #0]
   20750:	e7d9      	b.n	20706 <bt_keys_store+0x1a>
   20752:	bf00      	nop
   20754:	000346c8 	.word	0x000346c8
   20758:	0003468d 	.word	0x0003468d
   2075c:	000346b7 	.word	0x000346b7
   20760:	0002fc2c 	.word	0x0002fc2c

00020764 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   20764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20768:	b09a      	sub	sp, #104	; 0x68
   2076a:	461d      	mov	r5, r3
   2076c:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   20770:	4b2e      	ldr	r3, [pc, #184]	; (2082c <bt_crypto_f5+0xc8>)
{
   20772:	4616      	mov	r6, r2
	uint8_t m[53] = {0x00,						 /* counter */
   20774:	aa0c      	add	r2, sp, #48	; 0x30
{
   20776:	4684      	mov	ip, r0
   20778:	468a      	mov	sl, r1
	uint8_t m[53] = {0x00,						 /* counter */
   2077a:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   2077e:	4690      	mov	r8, r2
   20780:	6818      	ldr	r0, [r3, #0]
   20782:	6859      	ldr	r1, [r3, #4]
   20784:	4614      	mov	r4, r2
   20786:	c403      	stmia	r4!, {r0, r1}
   20788:	3308      	adds	r3, #8
   2078a:	4573      	cmp	r3, lr
   2078c:	4622      	mov	r2, r4
   2078e:	d1f7      	bne.n	20780 <bt_crypto_f5+0x1c>
   20790:	6818      	ldr	r0, [r3, #0]
   20792:	791b      	ldrb	r3, [r3, #4]
   20794:	6020      	str	r0, [r4, #0]
   20796:	7123      	strb	r3, [r4, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   20798:	4661      	mov	r1, ip
   2079a:	2220      	movs	r2, #32
   2079c:	a804      	add	r0, sp, #16
   2079e:	f00d fd3a 	bl	2e216 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   207a2:	4823      	ldr	r0, [pc, #140]	; (20830 <bt_crypto_f5+0xcc>)
   207a4:	466b      	mov	r3, sp
   207a6:	2220      	movs	r2, #32
   207a8:	a904      	add	r1, sp, #16
   207aa:	f00d fd4c 	bl	2e246 <bt_crypto_aes_cmac>
	if (err) {
   207ae:	4604      	mov	r4, r0
   207b0:	bbc0      	cbnz	r0, 20824 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   207b2:	2210      	movs	r2, #16
   207b4:	4651      	mov	r1, sl
   207b6:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   207ba:	f00d fd2c 	bl	2e216 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   207be:	2210      	movs	r2, #16
   207c0:	4631      	mov	r1, r6
   207c2:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   207c6:	f00d fd26 	bl	2e216 <sys_memcpy_swap>
	m[37] = a1->type;
   207ca:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   207cc:	2206      	movs	r2, #6
	m[37] = a1->type;
   207ce:	f811 3b01 	ldrb.w	r3, [r1], #1
   207d2:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   207d6:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   207da:	f00d fd1c 	bl	2e216 <sys_memcpy_swap>
	m[44] = a2->type;
   207de:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   207e0:	2206      	movs	r2, #6
	m[44] = a2->type;
   207e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   207e6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   207ea:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   207ee:	f00d fd12 	bl	2e216 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   207f2:	464b      	mov	r3, r9
   207f4:	2235      	movs	r2, #53	; 0x35
   207f6:	4641      	mov	r1, r8
   207f8:	4668      	mov	r0, sp
   207fa:	f00d fd24 	bl	2e246 <bt_crypto_aes_cmac>
	if (err) {
   207fe:	4604      	mov	r4, r0
   20800:	b980      	cbnz	r0, 20824 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   20802:	4648      	mov	r0, r9
   20804:	f00d fd11 	bl	2e22a <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   20808:	2301      	movs	r3, #1
   2080a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   2080e:	2235      	movs	r2, #53	; 0x35
   20810:	463b      	mov	r3, r7
   20812:	4641      	mov	r1, r8
   20814:	4668      	mov	r0, sp
   20816:	f00d fd16 	bl	2e246 <bt_crypto_aes_cmac>
	if (err) {
   2081a:	4604      	mov	r4, r0
   2081c:	b910      	cbnz	r0, 20824 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   2081e:	4638      	mov	r0, r7
   20820:	f00d fd03 	bl	2e22a <sys_mem_swap.constprop.0>

	return 0;
}
   20824:	4620      	mov	r0, r4
   20826:	b01a      	add	sp, #104	; 0x68
   20828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2082c:	0002fe6a 	.word	0x0002fe6a
   20830:	000346d5 	.word	0x000346d5

00020834 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   20834:	b5f0      	push	{r4, r5, r6, r7, lr}
   20836:	b099      	sub	sp, #100	; 0x64
   20838:	4614      	mov	r4, r2
   2083a:	460f      	mov	r7, r1
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   2083c:	2220      	movs	r2, #32
   2083e:	4601      	mov	r1, r0
   20840:	a804      	add	r0, sp, #16
{
   20842:	461e      	mov	r6, r3
   20844:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   20846:	f00d fce6 	bl	2e216 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2084a:	2220      	movs	r2, #32
   2084c:	4639      	mov	r1, r7
   2084e:	a80c      	add	r0, sp, #48	; 0x30
   20850:	f00d fce1 	bl	2e216 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   20854:	2210      	movs	r2, #16
   20856:	4631      	mov	r1, r6
   20858:	a814      	add	r0, sp, #80	; 0x50
   2085a:	f00d fcdc 	bl	2e216 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   2085e:	4621      	mov	r1, r4
   20860:	2210      	movs	r2, #16
   20862:	4668      	mov	r0, sp
   20864:	f00d fcd7 	bl	2e216 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   20868:	466b      	mov	r3, sp
   2086a:	2250      	movs	r2, #80	; 0x50
   2086c:	a904      	add	r1, sp, #16
   2086e:	4618      	mov	r0, r3
   20870:	f00d fce9 	bl	2e246 <bt_crypto_aes_cmac>
	if (err) {
   20874:	4604      	mov	r4, r0
   20876:	b960      	cbnz	r0, 20892 <bt_crypto_g2+0x5e>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   20878:	2204      	movs	r2, #4
   2087a:	a903      	add	r1, sp, #12
   2087c:	4628      	mov	r0, r5
   2087e:	f00b fa0f 	bl	2bca0 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   20882:	682b      	ldr	r3, [r5, #0]
   20884:	4a04      	ldr	r2, [pc, #16]	; (20898 <bt_crypto_g2+0x64>)
   20886:	ba1b      	rev	r3, r3
   20888:	fbb3 f1f2 	udiv	r1, r3, r2
   2088c:	fb02 3311 	mls	r3, r2, r1, r3
   20890:	602b      	str	r3, [r5, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   20892:	4620      	mov	r0, r4
   20894:	b019      	add	sp, #100	; 0x64
   20896:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20898:	000f4240 	.word	0x000f4240

0002089c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   2089c:	4b02      	ldr	r3, [pc, #8]	; (208a8 <net_buf_pool_get+0xc>)
   2089e:	222c      	movs	r2, #44	; 0x2c
   208a0:	fb02 3000 	mla	r0, r2, r0, r3
   208a4:	4770      	bx	lr
   208a6:	bf00      	nop
   208a8:	200009d0 	.word	0x200009d0

000208ac <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   208ac:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   208ae:	4b06      	ldr	r3, [pc, #24]	; (208c8 <net_buf_id+0x1c>)
   208b0:	212c      	movs	r1, #44	; 0x2c
   208b2:	fb01 3302 	mla	r3, r1, r2, r3
   208b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   208b8:	7f1b      	ldrb	r3, [r3, #28]
   208ba:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   208bc:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   208be:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   208c2:	fbb0 f0f3 	udiv	r0, r0, r3
   208c6:	4770      	bx	lr
   208c8:	200009d0 	.word	0x200009d0

000208cc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   208cc:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   208ce:	4b0a      	ldr	r3, [pc, #40]	; (208f8 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   208d0:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   208d2:	242c      	movs	r4, #44	; 0x2c
   208d4:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   208d8:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   208da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   208dc:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   208de:	681a      	ldr	r2, [r3, #0]
   208e0:	4294      	cmp	r4, r2
   208e2:	bf94      	ite	ls
   208e4:	600c      	strls	r4, [r1, #0]
   208e6:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   208e8:	e9d3 5400 	ldrd	r5, r4, [r3]
   208ec:	f7ff ffde 	bl	208ac <net_buf_id>
}
   208f0:	fb05 4000 	mla	r0, r5, r0, r4
   208f4:	bd38      	pop	{r3, r4, r5, pc}
   208f6:	bf00      	nop
   208f8:	200009d0 	.word	0x200009d0

000208fc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   208fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20900:	4605      	mov	r5, r0
   20902:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   20904:	4610      	mov	r0, r2
   20906:	4619      	mov	r1, r3
{
   20908:	4691      	mov	r9, r2
   2090a:	4698      	mov	r8, r3
   2090c:	4617      	mov	r7, r2
   2090e:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   20910:	f00e fdc8 	bl	2f4a4 <sys_clock_timeout_end_calc>
   20914:	4682      	mov	sl, r0
   20916:	468b      	mov	fp, r1
	__asm__ volatile(
   20918:	f04f 0340 	mov.w	r3, #64	; 0x40
   2091c:	f3ef 8111 	mrs	r1, BASEPRI
   20920:	f383 8812 	msr	BASEPRI_MAX, r3
   20924:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   20928:	8b6b      	ldrh	r3, [r5, #26]
   2092a:	2b00      	cmp	r3, #0
   2092c:	d058      	beq.n	209e0 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   2092e:	8b2a      	ldrh	r2, [r5, #24]
   20930:	429a      	cmp	r2, r3
   20932:	d93c      	bls.n	209ae <net_buf_alloc_len+0xb2>
   20934:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   20936:	2200      	movs	r2, #0
   20938:	2300      	movs	r3, #0
   2093a:	4628      	mov	r0, r5
   2093c:	f004 fce0 	bl	25300 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   20940:	9900      	ldr	r1, [sp, #0]
   20942:	4604      	mov	r4, r0
   20944:	2800      	cmp	r0, #0
   20946:	d032      	beq.n	209ae <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   20948:	f381 8811 	msr	BASEPRI, r1
   2094c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   20950:	9b01      	ldr	r3, [sp, #4]
   20952:	2b00      	cmp	r3, #0
   20954:	d055      	beq.n	20a02 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   20956:	ea58 0309 	orrs.w	r3, r8, r9
   2095a:	d00f      	beq.n	2097c <net_buf_alloc_len+0x80>
   2095c:	f1b8 3fff 	cmp.w	r8, #4294967295
   20960:	bf08      	it	eq
   20962:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   20966:	d009      	beq.n	2097c <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   20968:	f005 fbd2 	bl	26110 <sys_clock_tick_get>
   2096c:	ebba 0700 	subs.w	r7, sl, r0
   20970:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   20974:	2e00      	cmp	r6, #0
   20976:	bfbc      	itt	lt
   20978:	2700      	movlt	r7, #0
   2097a:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2097c:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   2097e:	4d26      	ldr	r5, [pc, #152]	; (20a18 <net_buf_alloc_len+0x11c>)
   20980:	f04f 082c 	mov.w	r8, #44	; 0x2c
   20984:	fb08 5303 	mla	r3, r8, r3, r5
   20988:	463a      	mov	r2, r7
   2098a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2098c:	681b      	ldr	r3, [r3, #0]
   2098e:	a901      	add	r1, sp, #4
   20990:	f8d3 9000 	ldr.w	r9, [r3]
   20994:	4620      	mov	r0, r4
   20996:	4633      	mov	r3, r6
   20998:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   2099a:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   2099c:	2800      	cmp	r0, #0
   2099e:	d131      	bne.n	20a04 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   209a0:	7aa0      	ldrb	r0, [r4, #10]
   209a2:	4621      	mov	r1, r4
   209a4:	fb00 5008 	mla	r0, r0, r8, r5
   209a8:	f00e fb05 	bl	2efb6 <k_queue_prepend>
}
   209ac:	e024      	b.n	209f8 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   209ae:	8b68      	ldrh	r0, [r5, #26]
   209b0:	1e43      	subs	r3, r0, #1
   209b2:	836b      	strh	r3, [r5, #26]
   209b4:	f381 8811 	msr	BASEPRI, r1
   209b8:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   209bc:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   209be:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   209c0:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   209c2:	331b      	adds	r3, #27
   209c4:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   209c8:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   209ca:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   209ce:	4b12      	ldr	r3, [pc, #72]	; (20a18 <net_buf_alloc_len+0x11c>)
   209d0:	4a12      	ldr	r2, [pc, #72]	; (20a1c <net_buf_alloc_len+0x120>)
   209d2:	1aeb      	subs	r3, r5, r3
   209d4:	109b      	asrs	r3, r3, #2
   209d6:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   209d8:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   209da:	7f2b      	ldrb	r3, [r5, #28]
   209dc:	72e3      	strb	r3, [r4, #11]
		goto success;
   209de:	e7b7      	b.n	20950 <net_buf_alloc_len+0x54>
   209e0:	f381 8811 	msr	BASEPRI, r1
   209e4:	f3bf 8f6f 	isb	sy
   209e8:	464a      	mov	r2, r9
   209ea:	4643      	mov	r3, r8
   209ec:	4628      	mov	r0, r5
   209ee:	f004 fc87 	bl	25300 <z_impl_k_queue_get>
	if (!buf) {
   209f2:	4604      	mov	r4, r0
   209f4:	2800      	cmp	r0, #0
   209f6:	d1ab      	bne.n	20950 <net_buf_alloc_len+0x54>
		return NULL;
   209f8:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   209fa:	4620      	mov	r0, r4
   209fc:	b003      	add	sp, #12
   209fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   20a02:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   20a04:	2300      	movs	r3, #0
	buf->ref   = 1U;
   20a06:	2201      	movs	r2, #1
	buf->frags = NULL;
   20a08:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   20a0a:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   20a0c:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   20a0e:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   20a10:	6963      	ldr	r3, [r4, #20]
   20a12:	8262      	strh	r2, [r4, #18]
   20a14:	60e3      	str	r3, [r4, #12]
	return buf;
   20a16:	e7f0      	b.n	209fa <net_buf_alloc_len+0xfe>
   20a18:	200009d0 	.word	0x200009d0
   20a1c:	ba2e8ba3 	.word	0xba2e8ba3

00020a20 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   20a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20a24:	4d16      	ldr	r5, [pc, #88]	; (20a80 <net_buf_unref+0x60>)
   20a26:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   20a28:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   20a2a:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   20a2c:	b90c      	cbnz	r4, 20a32 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   20a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   20a32:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   20a34:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   20a38:	3b01      	subs	r3, #1
   20a3a:	b2db      	uxtb	r3, r3
   20a3c:	7223      	strb	r3, [r4, #8]
   20a3e:	2b00      	cmp	r3, #0
   20a40:	d1f5      	bne.n	20a2e <net_buf_unref+0xe>
		if (buf->__buf) {
   20a42:	6961      	ldr	r1, [r4, #20]
   20a44:	b159      	cbz	r1, 20a5e <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   20a46:	7a63      	ldrb	r3, [r4, #9]
   20a48:	07db      	lsls	r3, r3, #31
   20a4a:	d407      	bmi.n	20a5c <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20a4c:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   20a4e:	fb07 5303 	mla	r3, r7, r3, r5
   20a52:	4620      	mov	r0, r4
   20a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20a56:	681b      	ldr	r3, [r3, #0]
   20a58:	689b      	ldr	r3, [r3, #8]
   20a5a:	4798      	blx	r3
			buf->__buf = NULL;
   20a5c:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   20a5e:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   20a60:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   20a62:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   20a66:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   20a68:	6a1b      	ldr	r3, [r3, #32]
   20a6a:	b11b      	cbz	r3, 20a74 <net_buf_unref+0x54>
			pool->destroy(buf);
   20a6c:	4620      	mov	r0, r4
   20a6e:	4798      	blx	r3
{
   20a70:	4644      	mov	r4, r8
   20a72:	e7db      	b.n	20a2c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   20a74:	4621      	mov	r1, r4
   20a76:	fb00 5007 	mla	r0, r0, r7, r5
   20a7a:	f00e fa9c 	bl	2efb6 <k_queue_prepend>
}
   20a7e:	e7f7      	b.n	20a70 <net_buf_unref+0x50>
   20a80:	200009d0 	.word	0x200009d0

00020a84 <net_buf_append_bytes>:
 * the buffer. It assumes that the buffer has at least one fragment.
 */
size_t net_buf_append_bytes(struct net_buf *buf, size_t len,
			    const void *value, k_timeout_t timeout,
			    net_buf_allocator_cb allocate_cb, void *user_data)
{
   20a84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a88:	4607      	mov	r7, r0
   20a8a:	460e      	mov	r6, r1
   20a8c:	4690      	mov	r8, r2
	while (buf->frags) {
   20a8e:	4605      	mov	r5, r0
   20a90:	4629      	mov	r1, r5
   20a92:	686d      	ldr	r5, [r5, #4]
   20a94:	2d00      	cmp	r5, #0
   20a96:	d1fb      	bne.n	20a90 <net_buf_append_bytes+0xc>
	return &_net_buf_pool_list[id];
   20a98:	f8df b068 	ldr.w	fp, [pc, #104]	; 20b04 <net_buf_append_bytes+0x80>
   20a9c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
	return net_buf_simple_tailroom(&buf->b);
   20aa0:	f101 040c 	add.w	r4, r1, #12
   20aa4:	4620      	mov	r0, r4
   20aa6:	f00d fd11 	bl	2e4cc <net_buf_simple_tailroom>
	struct net_buf *frag = net_buf_frag_last(buf);
	size_t added_len = 0;
	const uint8_t *value8 = value;

	do {
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   20aaa:	4286      	cmp	r6, r0
   20aac:	d31a      	bcc.n	20ae4 <net_buf_append_bytes+0x60>
   20aae:	4620      	mov	r0, r4
   20ab0:	f00d fd0c 	bl	2e4cc <net_buf_simple_tailroom>
   20ab4:	fa1f f980 	uxth.w	r9, r0
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20ab8:	4641      	mov	r1, r8
   20aba:	464a      	mov	r2, r9
   20abc:	4620      	mov	r0, r4
   20abe:	f00d fcbe 	bl	2e43e <net_buf_simple_add_mem>
		net_buf_add_mem(frag, value8, count);
		len -= count;
		added_len += count;
		value8 += count;

		if (len == 0) {
   20ac2:	ebb6 0609 	subs.w	r6, r6, r9
		added_len += count;
   20ac6:	444d      	add	r5, r9
		value8 += count;
   20ac8:	44c8      	add	r8, r9
		if (len == 0) {
   20aca:	d017      	beq.n	20afc <net_buf_append_bytes+0x78>
			return added_len;
		}

		if (allocate_cb) {
   20acc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20ace:	b163      	cbz	r3, 20aea <net_buf_append_bytes+0x66>
			frag = allocate_cb(timeout, user_data);
   20ad0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   20ad4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   20ad6:	4798      	blx	r3

			/* Allocate from the original pool if no callback has
			 * been provided.
			 */
			pool = net_buf_pool_get(buf->pool_id);
			frag = net_buf_alloc_len(pool, len, timeout);
   20ad8:	4601      	mov	r1, r0
		}

		if (!frag) {
   20ada:	b178      	cbz	r0, 20afc <net_buf_append_bytes+0x78>
			return added_len;
		}

		net_buf_frag_add(buf, frag);
   20adc:	4638      	mov	r0, r7
   20ade:	f00d fc8d 	bl	2e3fc <net_buf_frag_add>
	do {
   20ae2:	e7dd      	b.n	20aa0 <net_buf_append_bytes+0x1c>
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   20ae4:	fa1f f986 	uxth.w	r9, r6
   20ae8:	e7e6      	b.n	20ab8 <net_buf_append_bytes+0x34>
	return &_net_buf_pool_list[id];
   20aea:	7ab8      	ldrb	r0, [r7, #10]
			frag = net_buf_alloc_len(pool, len, timeout);
   20aec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   20af0:	4631      	mov	r1, r6
   20af2:	fb00 b00a 	mla	r0, r0, sl, fp
   20af6:	f7ff ff01 	bl	208fc <net_buf_alloc_len>
   20afa:	e7ed      	b.n	20ad8 <net_buf_append_bytes+0x54>
	} while (1);

	/* Unreachable */
	return 0;
}
   20afc:	4628      	mov	r0, r5
   20afe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b02:	bf00      	nop
   20b04:	200009d0 	.word	0x200009d0

00020b08 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   20b08:	4b08      	ldr	r3, [pc, #32]	; (20b2c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   20b0a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   20b0c:	1ac3      	subs	r3, r0, r3
{
   20b0e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20b10:	4907      	ldr	r1, [pc, #28]	; (20b30 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   20b12:	109b      	asrs	r3, r3, #2
{
   20b14:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20b16:	4359      	muls	r1, r3
   20b18:	4806      	ldr	r0, [pc, #24]	; (20b34 <onoff_stop+0x2c>)
   20b1a:	2240      	movs	r2, #64	; 0x40
   20b1c:	f00d fcfa 	bl	2e514 <stop>
	notify(mgr, res);
   20b20:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20b22:	4601      	mov	r1, r0
	notify(mgr, res);
   20b24:	4620      	mov	r0, r4
}
   20b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   20b2a:	4718      	bx	r3
   20b2c:	2000358c 	.word	0x2000358c
   20b30:	b6db6db7 	.word	0xb6db6db7
   20b34:	0002f8ec 	.word	0x0002f8ec

00020b38 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   20b38:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   20b3a:	4c0c      	ldr	r4, [pc, #48]	; (20b6c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20b3c:	4a0c      	ldr	r2, [pc, #48]	; (20b70 <onoff_start+0x38>)
   20b3e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   20b40:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20b42:	9300      	str	r3, [sp, #0]
{
   20b44:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20b46:	460b      	mov	r3, r1
   20b48:	490a      	ldr	r1, [pc, #40]	; (20b74 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   20b4a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20b4c:	4361      	muls	r1, r4
{
   20b4e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20b50:	4809      	ldr	r0, [pc, #36]	; (20b78 <onoff_start+0x40>)
   20b52:	f00d fd0b 	bl	2e56c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   20b56:	1e01      	subs	r1, r0, #0
   20b58:	da05      	bge.n	20b66 <onoff_start+0x2e>
		notify(mgr, err);
   20b5a:	4630      	mov	r0, r6
   20b5c:	462b      	mov	r3, r5
	}
}
   20b5e:	b002      	add	sp, #8
   20b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   20b64:	4718      	bx	r3
}
   20b66:	b002      	add	sp, #8
   20b68:	bd70      	pop	{r4, r5, r6, pc}
   20b6a:	bf00      	nop
   20b6c:	2000358c 	.word	0x2000358c
   20b70:	0002e5d7 	.word	0x0002e5d7
   20b74:	b6db6db7 	.word	0xb6db6db7
   20b78:	0002f8ec 	.word	0x0002f8ec

00020b7c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20b7c:	2200      	movs	r2, #0
{
   20b7e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20b80:	2101      	movs	r1, #1
{
   20b82:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20b84:	4610      	mov	r0, r2
   20b86:	f7f4 fc51 	bl	1542c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   20b8a:	480f      	ldr	r0, [pc, #60]	; (20bc8 <clk_init+0x4c>)
   20b8c:	f002 fec2 	bl	23914 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   20b90:	4b0e      	ldr	r3, [pc, #56]	; (20bcc <clk_init+0x50>)
   20b92:	4298      	cmp	r0, r3
   20b94:	d115      	bne.n	20bc2 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   20b96:	f00d fffa 	bl	2eb8e <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   20b9a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   20b9c:	490c      	ldr	r1, [pc, #48]	; (20bd0 <clk_init+0x54>)
   20b9e:	4630      	mov	r0, r6
   20ba0:	f008 feef 	bl	29982 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   20ba4:	2800      	cmp	r0, #0
   20ba6:	db0b      	blt.n	20bc0 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20ba8:	2501      	movs	r5, #1
   20baa:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   20bac:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   20bae:	4908      	ldr	r1, [pc, #32]	; (20bd0 <clk_init+0x54>)
   20bb0:	f104 001c 	add.w	r0, r4, #28
   20bb4:	f008 fee5 	bl	29982 <onoff_manager_init>
		if (err < 0) {
   20bb8:	2800      	cmp	r0, #0
   20bba:	db01      	blt.n	20bc0 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20bbc:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   20bbe:	2000      	movs	r0, #0
}
   20bc0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   20bc2:	f06f 0004 	mvn.w	r0, #4
   20bc6:	e7fb      	b.n	20bc0 <clk_init+0x44>
   20bc8:	00020c09 	.word	0x00020c09
   20bcc:	0bad0000 	.word	0x0bad0000
   20bd0:	00030594 	.word	0x00030594

00020bd4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   20bd4:	b570      	push	{r4, r5, r6, lr}
   20bd6:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   20bd8:	230c      	movs	r3, #12
   20bda:	4809      	ldr	r0, [pc, #36]	; (20c00 <clkstarted_handle.constprop.0+0x2c>)
   20bdc:	434b      	muls	r3, r1
   20bde:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   20be0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   20be4:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   20be6:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   20be8:	4418      	add	r0, r3
	sub_data->cb = NULL;
   20bea:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   20bec:	f00d fc7f 	bl	2e4ee <set_on_state>
	if (callback) {
   20bf0:	b12d      	cbz	r5, 20bfe <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   20bf2:	4632      	mov	r2, r6
   20bf4:	462b      	mov	r3, r5
   20bf6:	4803      	ldr	r0, [pc, #12]	; (20c04 <clkstarted_handle.constprop.0+0x30>)
}
   20bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   20bfc:	4718      	bx	r3
}
   20bfe:	bd70      	pop	{r4, r5, r6, pc}
   20c00:	2000358c 	.word	0x2000358c
   20c04:	0002f8ec 	.word	0x0002f8ec

00020c08 <clock_event_handler>:
	switch (event) {
   20c08:	b110      	cbz	r0, 20c10 <clock_event_handler+0x8>
   20c0a:	2801      	cmp	r0, #1
   20c0c:	d004      	beq.n	20c18 <clock_event_handler+0x10>
   20c0e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   20c10:	4b03      	ldr	r3, [pc, #12]	; (20c20 <clock_event_handler+0x18>)
   20c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   20c14:	075b      	lsls	r3, r3, #29
   20c16:	d101      	bne.n	20c1c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   20c18:	f7ff bfdc 	b.w	20bd4 <clkstarted_handle.constprop.0>
}
   20c1c:	4770      	bx	lr
   20c1e:	bf00      	nop
   20c20:	2000358c 	.word	0x2000358c

00020c24 <generic_hfclk_start>:
{
   20c24:	b508      	push	{r3, lr}
	__asm__ volatile(
   20c26:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c2a:	f3ef 8111 	mrs	r1, BASEPRI
   20c2e:	f383 8812 	msr	BASEPRI_MAX, r3
   20c32:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   20c36:	4a12      	ldr	r2, [pc, #72]	; (20c80 <generic_hfclk_start+0x5c>)
   20c38:	6813      	ldr	r3, [r2, #0]
   20c3a:	f043 0002 	orr.w	r0, r3, #2
   20c3e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   20c40:	07da      	lsls	r2, r3, #31
   20c42:	d408      	bmi.n	20c56 <generic_hfclk_start+0x32>
	__asm__ volatile(
   20c44:	f381 8811 	msr	BASEPRI, r1
   20c48:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   20c4c:	2001      	movs	r0, #1
}
   20c4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20c52:	f002 be4f 	b.w	238f4 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   20c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20c5a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   20c5e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   20c62:	07d3      	lsls	r3, r2, #31
   20c64:	d5ee      	bpl.n	20c44 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   20c66:	4807      	ldr	r0, [pc, #28]	; (20c84 <generic_hfclk_start+0x60>)
   20c68:	f00d fc41 	bl	2e4ee <set_on_state>
   20c6c:	f381 8811 	msr	BASEPRI, r1
   20c70:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   20c74:	2000      	movs	r0, #0
}
   20c76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   20c7a:	f7ff bfab 	b.w	20bd4 <clkstarted_handle.constprop.0>
   20c7e:	bf00      	nop
   20c80:	200035dc 	.word	0x200035dc
   20c84:	200035cc 	.word	0x200035cc

00020c88 <api_blocking_start>:
{
   20c88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20c8a:	2200      	movs	r2, #0
   20c8c:	2301      	movs	r3, #1
   20c8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20c92:	ab04      	add	r3, sp, #16
   20c94:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20c98:	4a09      	ldr	r2, [pc, #36]	; (20cc0 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20c9a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20c9e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20ca0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20ca4:	f00d fc90 	bl	2e5c8 <api_start>
	if (err < 0) {
   20ca8:	2800      	cmp	r0, #0
   20caa:	db05      	blt.n	20cb8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   20cac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   20cb0:	2300      	movs	r3, #0
   20cb2:	4668      	mov	r0, sp
   20cb4:	f004 fb7e 	bl	253b4 <z_impl_k_sem_take>
}
   20cb8:	b007      	add	sp, #28
   20cba:	f85d fb04 	ldr.w	pc, [sp], #4
   20cbe:	bf00      	nop
   20cc0:	0002e5f5 	.word	0x0002e5f5

00020cc4 <generic_hfclk_stop>:
{
   20cc4:	b510      	push	{r4, lr}
	__asm__ volatile(
   20cc6:	f04f 0340 	mov.w	r3, #64	; 0x40
   20cca:	f3ef 8411 	mrs	r4, BASEPRI
   20cce:	f383 8812 	msr	BASEPRI_MAX, r3
   20cd2:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   20cd6:	4a07      	ldr	r2, [pc, #28]	; (20cf4 <generic_hfclk_stop+0x30>)
   20cd8:	6813      	ldr	r3, [r2, #0]
   20cda:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   20cde:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   20ce0:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   20ce2:	d402      	bmi.n	20cea <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   20ce4:	2001      	movs	r0, #1
   20ce6:	f00d ff4d 	bl	2eb84 <nrfx_clock_stop>
	__asm__ volatile(
   20cea:	f384 8811 	msr	BASEPRI, r4
   20cee:	f3bf 8f6f 	isb	sy
}
   20cf2:	bd10      	pop	{r4, pc}
   20cf4:	200035dc 	.word	0x200035dc

00020cf8 <z_nrf_clock_control_lf_on>:
{
   20cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20cfc:	4938      	ldr	r1, [pc, #224]	; (20de0 <z_nrf_clock_control_lf_on+0xe8>)
   20cfe:	f3bf 8f5b 	dmb	ish
   20d02:	4607      	mov	r7, r0
   20d04:	2201      	movs	r2, #1
   20d06:	e851 3f00 	ldrex	r3, [r1]
   20d0a:	e841 2000 	strex	r0, r2, [r1]
   20d0e:	2800      	cmp	r0, #0
   20d10:	d1f9      	bne.n	20d06 <z_nrf_clock_control_lf_on+0xe>
   20d12:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   20d16:	b933      	cbnz	r3, 20d26 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   20d18:	4932      	ldr	r1, [pc, #200]	; (20de4 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   20d1a:	4833      	ldr	r0, [pc, #204]	; (20de8 <z_nrf_clock_control_lf_on+0xf0>)
   20d1c:	604b      	str	r3, [r1, #4]
   20d1e:	60cb      	str	r3, [r1, #12]
   20d20:	608a      	str	r2, [r1, #8]
   20d22:	f008 fe41 	bl	299a8 <onoff_request>
	switch (start_mode) {
   20d26:	1e7b      	subs	r3, r7, #1
   20d28:	2b01      	cmp	r3, #1
   20d2a:	d82b      	bhi.n	20d84 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   20d2c:	2f01      	cmp	r7, #1
   20d2e:	d107      	bne.n	20d40 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   20d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20d34:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   20d38:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   20d3c:	2b01      	cmp	r3, #1
   20d3e:	d021      	beq.n	20d84 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20d40:	f00e f88d 	bl	2ee5e <k_is_in_isr>
   20d44:	4605      	mov	r5, r0
   20d46:	b9f8      	cbnz	r0, 20d88 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   20d48:	4b28      	ldr	r3, [pc, #160]	; (20dec <z_nrf_clock_control_lf_on+0xf4>)
   20d4a:	781b      	ldrb	r3, [r3, #0]
   20d4c:	b1e3      	cbz	r3, 20d88 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   20d4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20d52:	2202      	movs	r2, #2
   20d54:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   20d58:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20d5a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 20df0 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20d5e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   20d62:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   20d66:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   20d6a:	03d2      	lsls	r2, r2, #15
   20d6c:	d516      	bpl.n	20d9c <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   20d6e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   20d72:	2b01      	cmp	r3, #1
   20d74:	d001      	beq.n	20d7a <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   20d76:	2f01      	cmp	r7, #1
   20d78:	d110      	bne.n	20d9c <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   20d7a:	b35d      	cbz	r5, 20dd4 <z_nrf_clock_control_lf_on+0xdc>
   20d7c:	f386 8811 	msr	BASEPRI, r6
   20d80:	f3bf 8f6f 	isb	sy
}
   20d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   20d88:	f04f 0340 	mov.w	r3, #64	; 0x40
   20d8c:	f3ef 8611 	mrs	r6, BASEPRI
   20d90:	f383 8812 	msr	BASEPRI_MAX, r3
   20d94:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20d98:	2501      	movs	r5, #1
   20d9a:	e7de      	b.n	20d5a <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   20d9c:	b1ad      	cbz	r5, 20dca <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   20d9e:	4630      	mov	r0, r6
   20da0:	f7f4 fa9a 	bl	152d8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   20da4:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   20da8:	2b00      	cmp	r3, #0
   20daa:	d1da      	bne.n	20d62 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20dac:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   20db0:	2a00      	cmp	r2, #0
   20db2:	d0d6      	beq.n	20d62 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20db4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   20db8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   20dbc:	2301      	movs	r3, #1
   20dbe:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   20dc2:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20dc6:	60a3      	str	r3, [r4, #8]
}
   20dc8:	e7cb      	b.n	20d62 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   20dca:	2100      	movs	r1, #0
   20dcc:	2021      	movs	r0, #33	; 0x21
   20dce:	f004 ffcd 	bl	25d6c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   20dd2:	e7e7      	b.n	20da4 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   20dd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20dd8:	2202      	movs	r2, #2
   20dda:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20dde:	e7d1      	b.n	20d84 <z_nrf_clock_control_lf_on+0x8c>
   20de0:	20003588 	.word	0x20003588
   20de4:	20003578 	.word	0x20003578
   20de8:	200035a8 	.word	0x200035a8
   20dec:	2000498d 	.word	0x2000498d
   20df0:	e000e100 	.word	0xe000e100

00020df4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   20df4:	b508      	push	{r3, lr}
   20df6:	4807      	ldr	r0, [pc, #28]	; (20e14 <uart_console_init+0x20>)
   20df8:	f00d ff63 	bl	2ecc2 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   20dfc:	b138      	cbz	r0, 20e0e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   20dfe:	4806      	ldr	r0, [pc, #24]	; (20e18 <uart_console_init+0x24>)
   20e00:	f7f5 f934 	bl	1606c <__stdout_hook_install>
	__printk_hook_install(console_out);
   20e04:	4804      	ldr	r0, [pc, #16]	; (20e18 <uart_console_init+0x24>)
   20e06:	f7f1 fde1 	bl	129cc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   20e0a:	2000      	movs	r0, #0
}
   20e0c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   20e0e:	f06f 0012 	mvn.w	r0, #18
   20e12:	e7fb      	b.n	20e0c <uart_console_init+0x18>
   20e14:	0002f97c 	.word	0x0002f97c
   20e18:	00020e1d 	.word	0x00020e1d

00020e1c <console_out>:
	if ('\n' == c) {
   20e1c:	280a      	cmp	r0, #10
{
   20e1e:	b538      	push	{r3, r4, r5, lr}
   20e20:	4d07      	ldr	r5, [pc, #28]	; (20e40 <console_out+0x24>)
   20e22:	4604      	mov	r4, r0
	if ('\n' == c) {
   20e24:	d104      	bne.n	20e30 <console_out+0x14>
   20e26:	68ab      	ldr	r3, [r5, #8]
   20e28:	210d      	movs	r1, #13
   20e2a:	685b      	ldr	r3, [r3, #4]
   20e2c:	4628      	mov	r0, r5
   20e2e:	4798      	blx	r3
   20e30:	68ab      	ldr	r3, [r5, #8]
   20e32:	4803      	ldr	r0, [pc, #12]	; (20e40 <console_out+0x24>)
   20e34:	685b      	ldr	r3, [r3, #4]
   20e36:	b2e1      	uxtb	r1, r4
   20e38:	4798      	blx	r3
}
   20e3a:	4620      	mov	r0, r4
   20e3c:	bd38      	pop	{r3, r4, r5, pc}
   20e3e:	bf00      	nop
   20e40:	0002f97c 	.word	0x0002f97c

00020e44 <random_byte_get>:
   20e44:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e48:	f3ef 8211 	mrs	r2, BASEPRI
   20e4c:	f383 8812 	msr	BASEPRI_MAX, r3
   20e50:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   20e54:	4b09      	ldr	r3, [pc, #36]	; (20e7c <random_byte_get+0x38>)
   20e56:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   20e5a:	b161      	cbz	r1, 20e76 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20e5c:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   20e5e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20e62:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   20e66:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   20e6a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   20e6c:	f382 8811 	msr	BASEPRI, r2
   20e70:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   20e74:	4770      	bx	lr
	int retval = -EAGAIN;
   20e76:	f06f 000a 	mvn.w	r0, #10
   20e7a:	e7f7      	b.n	20e6c <random_byte_get+0x28>
   20e7c:	4000d000 	.word	0x4000d000

00020e80 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   20e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e82:	4603      	mov	r3, r0
   20e84:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   20e86:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   20e88:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   20e8c:	f04f 0540 	mov.w	r5, #64	; 0x40
   20e90:	f3ef 8211 	mrs	r2, BASEPRI
   20e94:	f385 8812 	msr	BASEPRI_MAX, r5
   20e98:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   20e9c:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   20e9e:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   20ea2:	1be4      	subs	r4, r4, r7
   20ea4:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   20ea8:	42a0      	cmp	r0, r4
		len = available;
   20eaa:	bf88      	it	hi
   20eac:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   20eae:	183e      	adds	r6, r7, r0
   20eb0:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   20eb4:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   20eb6:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   20eb8:	f382 8811 	msr	BASEPRI, r2
   20ebc:	f3bf 8f6f 	isb	sy
   20ec0:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   20ec2:	428a      	cmp	r2, r1
   20ec4:	d117      	bne.n	20ef6 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   20ec6:	4577      	cmp	r7, lr
   20ec8:	d10d      	bne.n	20ee6 <rng_pool_get+0x66>
	__asm__ volatile(
   20eca:	f04f 0140 	mov.w	r1, #64	; 0x40
   20ece:	f3ef 8211 	mrs	r2, BASEPRI
   20ed2:	f381 8812 	msr	BASEPRI_MAX, r1
   20ed6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   20eda:	7819      	ldrb	r1, [r3, #0]
   20edc:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   20ede:	f382 8811 	msr	BASEPRI, r2
   20ee2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   20ee6:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   20ee8:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   20eea:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   20eec:	bf22      	ittt	cs
   20eee:	4b06      	ldrcs	r3, [pc, #24]	; (20f08 <rng_pool_get+0x88>)
   20ef0:	2201      	movcs	r2, #1
   20ef2:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   20ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   20ef6:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   20ef8:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   20efa:	7976      	ldrb	r6, [r6, #5]
   20efc:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   20f00:	ea05 050c 	and.w	r5, r5, ip
   20f04:	e7dd      	b.n	20ec2 <rng_pool_get+0x42>
   20f06:	bf00      	nop
   20f08:	4000d000 	.word	0x4000d000

00020f0c <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   20f0c:	43db      	mvns	r3, r3
{
   20f0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   20f12:	f013 0501 	ands.w	r5, r3, #1
{
   20f16:	460e      	mov	r6, r1
   20f18:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   20f1a:	d004      	beq.n	20f26 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   20f1c:	4823      	ldr	r0, [pc, #140]	; (20fac <entropy_nrf5_get_entropy_isr+0xa0>)
   20f1e:	f7ff ffaf 	bl	20e80 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   20f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   20f26:	b3a2      	cbz	r2, 20f92 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   20f28:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f2c:	f3ef 8811 	mrs	r8, BASEPRI
   20f30:	f383 8812 	msr	BASEPRI_MAX, r3
   20f34:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   20f38:	200d      	movs	r0, #13
   20f3a:	f7f4 fa69 	bl	15410 <arch_irq_is_enabled>
   20f3e:	4607      	mov	r7, r0
		irq_disable(IRQN);
   20f40:	200d      	movs	r0, #13
   20f42:	f7f4 fa51 	bl	153e8 <arch_irq_disable>
	__asm__ volatile(
   20f46:	f388 8811 	msr	BASEPRI, r8
   20f4a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20f4e:	f8df a060 	ldr.w	sl, [pc, #96]	; 20fb0 <entropy_nrf5_get_entropy_isr+0xa4>
   20f52:	f8df 8060 	ldr.w	r8, [pc, #96]	; 20fb4 <entropy_nrf5_get_entropy_isr+0xa8>
   20f56:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   20f5a:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   20f5e:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   20f62:	2301      	movs	r3, #1
   20f64:	f8ca 3000 	str.w	r3, [sl]
   20f68:	4625      	mov	r5, r4
   20f6a:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   20f6e:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   20f72:	b183      	cbz	r3, 20f96 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   20f74:	f7ff ff66 	bl	20e44 <random_byte_get>
			if (byte < 0) {
   20f78:	1e03      	subs	r3, r0, #0
   20f7a:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   20f7e:	dbf6      	blt.n	20f6e <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   20f80:	3d01      	subs	r5, #1
   20f82:	b2ad      	uxth	r5, r5
   20f84:	5573      	strb	r3, [r6, r5]
		} while (len);
   20f86:	2d00      	cmp	r5, #0
   20f88:	d1f1      	bne.n	20f6e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   20f8a:	b117      	cbz	r7, 20f92 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   20f8c:	200d      	movs	r0, #13
   20f8e:	f7f4 fa1d 	bl	153cc <arch_irq_enable>
	return cnt;
   20f92:	4620      	mov	r0, r4
   20f94:	e7c5      	b.n	20f22 <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
   20f96:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f9a:	f3ef 8011 	mrs	r0, BASEPRI
   20f9e:	f383 8812 	msr	BASEPRI_MAX, r3
   20fa2:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   20fa6:	f7f4 f997 	bl	152d8 <arch_cpu_atomic_idle>
}
   20faa:	e7e0      	b.n	20f6e <entropy_nrf5_get_entropy_isr+0x62>
   20fac:	20003610 	.word	0x20003610
   20fb0:	4000d000 	.word	0x4000d000
   20fb4:	e000e100 	.word	0xe000e100

00020fb8 <entropy_nrf5_get_entropy>:
{
   20fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   20fbc:	4f12      	ldr	r7, [pc, #72]	; (21008 <entropy_nrf5_get_entropy+0x50>)
   20fbe:	460d      	mov	r5, r1
   20fc0:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   20fc2:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   20fc6:	b914      	cbnz	r4, 20fce <entropy_nrf5_get_entropy+0x16>
}
   20fc8:	4620      	mov	r0, r4
   20fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20fce:	f04f 33ff 	mov.w	r3, #4294967295
   20fd2:	f04f 32ff 	mov.w	r2, #4294967295
   20fd6:	4638      	mov	r0, r7
   20fd8:	f004 f9ec 	bl	253b4 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   20fdc:	4622      	mov	r2, r4
   20fde:	4629      	mov	r1, r5
   20fe0:	4640      	mov	r0, r8
   20fe2:	f7ff ff4d 	bl	20e80 <rng_pool_get>
   20fe6:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   20fe8:	4638      	mov	r0, r7
   20fea:	f004 f9bd 	bl	25368 <z_impl_k_sem_give>
		if (bytes == 0U) {
   20fee:	b93e      	cbnz	r6, 21000 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   20ff0:	f04f 32ff 	mov.w	r2, #4294967295
   20ff4:	f04f 33ff 	mov.w	r3, #4294967295
   20ff8:	4804      	ldr	r0, [pc, #16]	; (2100c <entropy_nrf5_get_entropy+0x54>)
   20ffa:	f004 f9db 	bl	253b4 <z_impl_k_sem_take>
	while (len) {
   20ffe:	e7e6      	b.n	20fce <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   21000:	1ba4      	subs	r4, r4, r6
   21002:	b2a4      	uxth	r4, r4
		buf += bytes;
   21004:	4435      	add	r5, r6
   21006:	e7de      	b.n	20fc6 <entropy_nrf5_get_entropy+0xe>
   21008:	200035e0 	.word	0x200035e0
   2100c:	200035f8 	.word	0x200035f8

00021010 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   21010:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   21012:	4c19      	ldr	r4, [pc, #100]	; (21078 <entropy_nrf5_init+0x68>)
   21014:	2201      	movs	r2, #1
   21016:	4611      	mov	r1, r2
   21018:	4620      	mov	r0, r4
   2101a:	f00d ffda 	bl	2efd2 <z_impl_k_sem_init>
   2101e:	2201      	movs	r2, #1
   21020:	2100      	movs	r1, #0
   21022:	f104 0018 	add.w	r0, r4, #24
   21026:	f00d ffd4 	bl	2efd2 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   2102a:	f240 4307 	movw	r3, #1031	; 0x407
   2102e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   21032:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   21036:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   21038:	230c      	movs	r3, #12
   2103a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   2103e:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   21040:	4b0e      	ldr	r3, [pc, #56]	; (2107c <entropy_nrf5_init+0x6c>)
   21042:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   21046:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   2104a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   2104e:	f022 0201 	bic.w	r2, r2, #1
   21052:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   21056:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21058:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   2105c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   21060:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   21064:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   21066:	6019      	str	r1, [r3, #0]
   21068:	200d      	movs	r0, #13
   2106a:	f7f4 f9df 	bl	1542c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   2106e:	200d      	movs	r0, #13
   21070:	f7f4 f9ac 	bl	153cc <arch_irq_enable>

	return 0;
}
   21074:	4628      	mov	r0, r5
   21076:	bd38      	pop	{r3, r4, r5, pc}
   21078:	200035e0 	.word	0x200035e0
   2107c:	4000d000 	.word	0x4000d000

00021080 <isr>:
{
   21080:	b510      	push	{r4, lr}
	byte = random_byte_get();
   21082:	f7ff fedf 	bl	20e44 <random_byte_get>
	if (byte < 0) {
   21086:	2800      	cmp	r0, #0
   21088:	db20      	blt.n	210cc <isr+0x4c>
	uint8_t last  = rngp->last;
   2108a:	4b17      	ldr	r3, [pc, #92]	; (210e8 <isr+0x68>)
   2108c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   21090:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   21094:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   21098:	1b14      	subs	r4, r2, r4
   2109a:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   2109e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   210a0:	d10d      	bne.n	210be <isr+0x3e>
	uint8_t last  = rngp->last;
   210a2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   210a6:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   210aa:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   210ae:	1b14      	subs	r4, r2, r4
   210b0:	ea31 0404 	bics.w	r4, r1, r4
   210b4:	d10b      	bne.n	210ce <isr+0x4e>
   210b6:	4b0d      	ldr	r3, [pc, #52]	; (210ec <isr+0x6c>)
   210b8:	2201      	movs	r2, #1
   210ba:	605a      	str	r2, [r3, #4]
}
   210bc:	e00e      	b.n	210dc <isr+0x5c>
	rngp->buffer[last] = byte;
   210be:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   210c0:	3201      	adds	r2, #1
   210c2:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   210c4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   210c8:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   210cc:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   210ce:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   210d0:	3201      	adds	r2, #1
   210d2:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   210d4:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   210d8:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   210dc:	4804      	ldr	r0, [pc, #16]	; (210f0 <isr+0x70>)
}
   210de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   210e2:	f004 b941 	b.w	25368 <z_impl_k_sem_give>
   210e6:	bf00      	nop
   210e8:	200035e0 	.word	0x200035e0
   210ec:	4000d000 	.word	0x4000d000
   210f0:	200035f8 	.word	0x200035f8

000210f4 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   210f4:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   210f8:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   210fc:	280a      	cmp	r0, #10
   210fe:	bf9a      	itte	ls
   21100:	4b02      	ldrls	r3, [pc, #8]	; (2110c <qspi_get_zephyr_ret_code+0x18>)
   21102:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   21106:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   2110a:	4770      	bx	lr
   2110c:	000309d8 	.word	0x000309d8

00021110 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   21110:	4b02      	ldr	r3, [pc, #8]	; (2111c <qspi_nor_pages_layout+0xc>)
   21112:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   21114:	2301      	movs	r3, #1
   21116:	6013      	str	r3, [r2, #0]
}
   21118:	4770      	bx	lr
   2111a:	bf00      	nop
   2111c:	00030658 	.word	0x00030658

00021120 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   21120:	4800      	ldr	r0, [pc, #0]	; (21124 <qspi_flash_get_parameters+0x4>)
   21122:	4770      	bx	lr
   21124:	000305ec 	.word	0x000305ec

00021128 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   21128:	4b05      	ldr	r3, [pc, #20]	; (21140 <qspi_wait_for_completion.isra.0+0x18>)
   2112a:	4299      	cmp	r1, r3
   2112c:	d106      	bne.n	2113c <qspi_wait_for_completion.isra.0+0x14>
	return z_impl_k_sem_take(sem, timeout);
   2112e:	f04f 32ff 	mov.w	r2, #4294967295
   21132:	f04f 33ff 	mov.w	r3, #4294967295
   21136:	3030      	adds	r0, #48	; 0x30
   21138:	f004 b93c 	b.w	253b4 <z_impl_k_sem_take>
}
   2113c:	4770      	bx	lr
   2113e:	bf00      	nop
   21140:	0bad0000 	.word	0x0bad0000

00021144 <qspi_nor_erase.part.0>:
static int qspi_nor_erase(const struct device *dev, off_t addr, size_t size)
   21144:	b580      	push	{r7, lr}
   21146:	af00      	add	r7, sp, #0
		LOG_ERR("erase error: address or size "
   21148:	b08a      	sub	sp, #40	; 0x28
   2114a:	466a      	mov	r2, sp
   2114c:	4b09      	ldr	r3, [pc, #36]	; (21174 <qspi_nor_erase.part.0+0x30>)
   2114e:	6153      	str	r3, [r2, #20]
   21150:	4b09      	ldr	r3, [pc, #36]	; (21178 <qspi_nor_erase.part.0+0x34>)
   21152:	6211      	str	r1, [r2, #32]
   21154:	e9c2 3006 	strd	r3, r0, [r2, #24]
   21158:	2305      	movs	r3, #5
   2115a:	f842 3f10 	str.w	r3, [r2, #16]!
   2115e:	4807      	ldr	r0, [pc, #28]	; (2117c <qspi_nor_erase.part.0+0x38>)
   21160:	2300      	movs	r3, #0
   21162:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   21166:	f7f2 ff63 	bl	14030 <z_impl_z_log_msg_static_create>
}
   2116a:	f06f 0015 	mvn.w	r0, #21
   2116e:	46bd      	mov	sp, r7
   21170:	bd80      	pop	{r7, pc}
   21172:	bf00      	nop
   21174:	0003475e 	.word	0x0003475e
   21178:	00034972 	.word	0x00034972
   2117c:	0002fcf4 	.word	0x0002fcf4

00021180 <qspi_send_cmd>:
{
   21180:	b5f0      	push	{r4, r5, r6, r7, lr}
   21182:	b083      	sub	sp, #12
	if (cmd->tx_buf) {
   21184:	684c      	ldr	r4, [r1, #4]
{
   21186:	af00      	add	r7, sp, #0
   21188:	4605      	mov	r5, r0
	if (cmd->tx_buf) {
   2118a:	b174      	cbz	r4, 211aa <qspi_send_cmd+0x2a>
		tx_buf = cmd->tx_buf->buf;
   2118c:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   21190:	6888      	ldr	r0, [r1, #8]
   21192:	b320      	cbz	r0, 211de <qspi_send_cmd+0x5e>
		rx_len = cmd->rx_buf->len;
   21194:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   21198:	b310      	cbz	r0, 211e0 <qspi_send_cmd+0x60>
   2119a:	b30b      	cbz	r3, 211e0 <qspi_send_cmd+0x60>
		if (rx_len != tx_len) {
   2119c:	4298      	cmp	r0, r3
   2119e:	d006      	beq.n	211ae <qspi_send_cmd+0x2e>
		return -EINVAL;
   211a0:	f06f 0015 	mvn.w	r0, #21
}
   211a4:	370c      	adds	r7, #12
   211a6:	46bd      	mov	sp, r7
   211a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t tx_len = 0;
   211aa:	4623      	mov	r3, r4
   211ac:	e7f0      	b.n	21190 <qspi_send_cmd+0x10>
		xfer_len += tx_len;
   211ae:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   211b0:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   211b2:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   211b4:	d917      	bls.n	211e6 <qspi_send_cmd+0x66>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   211b6:	466c      	mov	r4, sp
   211b8:	b08a      	sub	sp, #40	; 0x28
   211ba:	466a      	mov	r2, sp
   211bc:	4816      	ldr	r0, [pc, #88]	; (21218 <qspi_send_cmd+0x98>)
   211be:	6150      	str	r0, [r2, #20]
   211c0:	4816      	ldr	r0, [pc, #88]	; (2121c <qspi_send_cmd+0x9c>)
   211c2:	6213      	str	r3, [r2, #32]
   211c4:	2305      	movs	r3, #5
   211c6:	e9c2 0106 	strd	r0, r1, [r2, #24]
   211ca:	f842 3f10 	str.w	r3, [r2, #16]!
   211ce:	4814      	ldr	r0, [pc, #80]	; (21220 <qspi_send_cmd+0xa0>)
   211d0:	2300      	movs	r3, #0
   211d2:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   211d6:	f7f2 ff2b 	bl	14030 <z_impl_z_log_msg_static_create>
   211da:	46a5      	mov	sp, r4
		return -EINVAL;
   211dc:	e7e0      	b.n	211a0 <qspi_send_cmd+0x20>
	void *rx_buf = NULL;
   211de:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   211e0:	3301      	adds	r3, #1
   211e2:	4403      	add	r3, r0
   211e4:	e7e4      	b.n	211b0 <qspi_send_cmd+0x30>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   211e6:	707b      	strb	r3, [r7, #1]
   211e8:	f240 1301 	movw	r3, #257	; 0x101
	qspi_lock(dev);
   211ec:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   211ee:	807b      	strh	r3, [r7, #2]
   211f0:	2300      	movs	r3, #0
   211f2:	713b      	strb	r3, [r7, #4]
   211f4:	7039      	strb	r1, [r7, #0]
   211f6:	717a      	strb	r2, [r7, #5]
	qspi_lock(dev);
   211f8:	f00d fa43 	bl	2e682 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   211fc:	4621      	mov	r1, r4
   211fe:	4632      	mov	r2, r6
   21200:	4638      	mov	r0, r7
   21202:	f003 fb67 	bl	248d4 <nrfx_qspi_cinstr_xfer>
   21206:	4604      	mov	r4, r0
	qspi_unlock(dev);
   21208:	6928      	ldr	r0, [r5, #16]
   2120a:	f00d fa47 	bl	2e69c <qspi_unlock.isra.0>
	return qspi_get_zephyr_ret_code(res);
   2120e:	4620      	mov	r0, r4
   21210:	f7ff ff70 	bl	210f4 <qspi_get_zephyr_ret_code>
   21214:	e7c6      	b.n	211a4 <qspi_send_cmd+0x24>
   21216:	bf00      	nop
   21218:	000347ac 	.word	0x000347ac
   2121c:	00034959 	.word	0x00034959
   21220:	0002fcf4 	.word	0x0002fcf4

00021224 <qspi_device_uninit>:
{
   21224:	b538      	push	{r3, r4, r5, lr}
	struct qspi_nor_data *dev_data = dev->data;
   21226:	6905      	ldr	r5, [r0, #16]
	if (dev_data->xip_enabled) {
   21228:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
{
   2122c:	4604      	mov	r4, r0
	if (dev_data->xip_enabled) {
   2122e:	b9fb      	cbnz	r3, 21270 <qspi_device_uninit+0x4c>
	qspi_lock(dev);
   21230:	4628      	mov	r0, r5
   21232:	f00d fa26 	bl	2e682 <qspi_lock.isra.0>
   21236:	2200      	movs	r2, #0
   21238:	2300      	movs	r3, #0
   2123a:	f105 0048 	add.w	r0, r5, #72	; 0x48
   2123e:	f004 f8b9 	bl	253b4 <z_impl_k_sem_take>
	if (last) {
   21242:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   21244:	b94b      	cbnz	r3, 2125a <qspi_device_uninit+0x36>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   21246:	4d0b      	ldr	r5, [pc, #44]	; (21274 <qspi_device_uninit+0x50>)
   21248:	f003 fb90 	bl	2496c <nrfx_qspi_mem_busy_check>
   2124c:	42a8      	cmp	r0, r5
   2124e:	d109      	bne.n	21264 <qspi_device_uninit+0x40>
		nrfx_qspi_uninit();
   21250:	f003 fbae 	bl	249b0 <nrfx_qspi_uninit>
		qspi_initialized = false;
   21254:	4b08      	ldr	r3, [pc, #32]	; (21278 <qspi_device_uninit+0x54>)
   21256:	2200      	movs	r2, #0
   21258:	701a      	strb	r2, [r3, #0]
	qspi_unlock(dev);
   2125a:	6920      	ldr	r0, [r4, #16]
}
   2125c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	qspi_unlock(dev);
   21260:	f00d ba1c 	b.w	2e69c <qspi_unlock.isra.0>
	return z_impl_k_sleep(timeout);
   21264:	2100      	movs	r1, #0
   21266:	f240 6067 	movw	r0, #1639	; 0x667
   2126a:	f004 fd7f 	bl	25d6c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2126e:	e7eb      	b.n	21248 <qspi_device_uninit+0x24>
}
   21270:	bd38      	pop	{r3, r4, r5, pc}
   21272:	bf00      	nop
   21274:	0bad0000 	.word	0x0bad0000
   21278:	20004489 	.word	0x20004489

0002127c <qspi_device_init>:
{
   2127c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct qspi_nor_data *dev_data = dev->data;
   2127e:	6906      	ldr	r6, [r0, #16]
	if (dev_data->xip_enabled) {
   21280:	f896 4060 	ldrb.w	r4, [r6, #96]	; 0x60
{
   21284:	4605      	mov	r5, r0
	if (dev_data->xip_enabled) {
   21286:	b9d4      	cbnz	r4, 212be <qspi_device_init+0x42>
	qspi_lock(dev);
   21288:	4630      	mov	r0, r6
   2128a:	f00d f9fa 	bl	2e682 <qspi_lock.isra.0>
	if (!qspi_initialized) {
   2128e:	4f0d      	ldr	r7, [pc, #52]	; (212c4 <qspi_device_init+0x48>)
	z_impl_k_sem_give(sem);
   21290:	f106 0048 	add.w	r0, r6, #72	; 0x48
   21294:	f004 f868 	bl	25368 <z_impl_k_sem_give>
   21298:	783b      	ldrb	r3, [r7, #0]
   2129a:	b95b      	cbnz	r3, 212b4 <qspi_device_init+0x38>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   2129c:	490a      	ldr	r1, [pc, #40]	; (212c8 <qspi_device_init+0x4c>)
   2129e:	6868      	ldr	r0, [r5, #4]
   212a0:	4632      	mov	r2, r6
   212a2:	f003 fa27 	bl	246f4 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   212a6:	f7ff ff25 	bl	210f4 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   212aa:	fab0 f380 	clz	r3, r0
   212ae:	095b      	lsrs	r3, r3, #5
   212b0:	4604      	mov	r4, r0
   212b2:	703b      	strb	r3, [r7, #0]
	qspi_unlock(dev);
   212b4:	6928      	ldr	r0, [r5, #16]
   212b6:	f00d f9f1 	bl	2e69c <qspi_unlock.isra.0>
}
   212ba:	4620      	mov	r0, r4
   212bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   212be:	2400      	movs	r4, #0
   212c0:	e7fb      	b.n	212ba <qspi_device_init+0x3e>
   212c2:	bf00      	nop
   212c4:	20004489 	.word	0x20004489
   212c8:	0002e677 	.word	0x0002e677

000212cc <qspi_nor_erase>:
{
   212cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   212d0:	1e0b      	subs	r3, r1, #0
	const struct qspi_nor_config *params = dev->config;
   212d2:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   212d6:	af00      	add	r7, sp, #0
   212d8:	4606      	mov	r6, r0
   212da:	4615      	mov	r5, r2
	if (addr < 0 ||
   212dc:	db05      	blt.n	212ea <qspi_nor_erase+0x1e>
	    (addr + size) > params->size) {
   212de:	1899      	adds	r1, r3, r2
	if (addr < 0 ||
   212e0:	f8da 2018 	ldr.w	r2, [sl, #24]
   212e4:	4291      	cmp	r1, r2
	    (addr + size) > params->size) {
   212e6:	4699      	mov	r9, r3
	if (addr < 0 ||
   212e8:	d908      	bls.n	212fc <qspi_nor_erase+0x30>
   212ea:	4629      	mov	r1, r5
   212ec:	4618      	mov	r0, r3
   212ee:	f7ff ff29 	bl	21144 <qspi_nor_erase.part.0>
   212f2:	4604      	mov	r4, r0
}
   212f4:	4620      	mov	r0, r4
   212f6:	46bd      	mov	sp, r7
   212f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   212fc:	f3c3 020b 	ubfx	r2, r3, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   21300:	2d00      	cmp	r5, #0
   21302:	f000 8084 	beq.w	2140e <qspi_nor_erase+0x142>
   21306:	f3c5 030b 	ubfx	r3, r5, #0, #12
   2130a:	4313      	orrs	r3, r2
   2130c:	d17f      	bne.n	2140e <qspi_nor_erase+0x142>
	rv = qspi_device_init(dev);
   2130e:	f7ff ffb5 	bl	2127c <qspi_device_init>
	if (rv != 0) {
   21312:	4604      	mov	r4, r0
   21314:	bb58      	cbnz	r0, 2136e <qspi_nor_erase+0xa2>
	qspi_trans_lock(dev);
   21316:	6930      	ldr	r0, [r6, #16]
   21318:	f00d f9ba 	bl	2e690 <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   2131c:	4621      	mov	r1, r4
   2131e:	4630      	mov	r0, r6
   21320:	f00d f9bf 	bl	2e6a2 <qspi_nor_write_protection_set>
	if (rv != 0) {
   21324:	4604      	mov	r4, r0
   21326:	b9f8      	cbnz	r0, 21368 <qspi_nor_erase+0x9c>
	qspi_lock(dev);
   21328:	6930      	ldr	r0, [r6, #16]
   2132a:	f00d f9aa 	bl	2e682 <qspi_lock.isra.0>
		if (size == params->size) {
   2132e:	f8da 3018 	ldr.w	r3, [sl, #24]
   21332:	42ab      	cmp	r3, r5
   21334:	d11f      	bne.n	21376 <qspi_nor_erase+0xaa>
			res = nrfx_qspi_chip_erase();
   21336:	f00d fcb8 	bl	2ecaa <nrfx_qspi_chip_erase>
   2133a:	46ab      	mov	fp, r5
   2133c:	4680      	mov	r8, r0
		qspi_wait_for_completion(dev, res);
   2133e:	6930      	ldr	r0, [r6, #16]
   21340:	4641      	mov	r1, r8
   21342:	f7ff fef1 	bl	21128 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   21346:	4b33      	ldr	r3, [pc, #204]	; (21414 <qspi_nor_erase+0x148>)
   21348:	4598      	cmp	r8, r3
   2134a:	d148      	bne.n	213de <qspi_nor_erase+0x112>
	while (size > 0) {
   2134c:	ebb5 050b 	subs.w	r5, r5, fp
			addr += adj;
   21350:	44d9      	add	r9, fp
	while (size > 0) {
   21352:	d1ec      	bne.n	2132e <qspi_nor_erase+0x62>
	qspi_unlock(dev);
   21354:	6930      	ldr	r0, [r6, #16]
   21356:	f00d f9a1 	bl	2e69c <qspi_unlock.isra.0>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   2135a:	2101      	movs	r1, #1
   2135c:	4630      	mov	r0, r6
   2135e:	f00d f9a0 	bl	2e6a2 <qspi_nor_write_protection_set>
   21362:	2c00      	cmp	r4, #0
   21364:	bf08      	it	eq
   21366:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   21368:	6930      	ldr	r0, [r6, #16]
   2136a:	f003 fffd 	bl	25368 <z_impl_k_sem_give>
	qspi_device_uninit(dev);
   2136e:	4630      	mov	r0, r6
   21370:	f7ff ff58 	bl	21224 <qspi_device_uninit>
	return rv;
   21374:	e7be      	b.n	212f4 <qspi_nor_erase+0x28>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   21376:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2137a:	d30a      	bcc.n	21392 <qspi_nor_erase+0xc6>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   2137c:	fa1f f389 	uxth.w	r3, r9
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   21380:	b953      	cbnz	r3, 21398 <qspi_nor_erase+0xcc>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   21382:	4649      	mov	r1, r9
   21384:	2001      	movs	r0, #1
   21386:	f003 fb67 	bl	24a58 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   2138a:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   2138e:	4680      	mov	r8, r0
			adj = QSPI_BLOCK_SIZE;
   21390:	e7d5      	b.n	2133e <qspi_nor_erase+0x72>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   21392:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   21396:	d309      	bcc.n	213ac <qspi_nor_erase+0xe0>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   21398:	f3c9 000b 	ubfx	r0, r9, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   2139c:	b930      	cbnz	r0, 213ac <qspi_nor_erase+0xe0>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   2139e:	4649      	mov	r1, r9
   213a0:	f003 fb5a 	bl	24a58 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   213a4:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   213a8:	4680      	mov	r8, r0
			adj = QSPI_SECTOR_SIZE;
   213aa:	e7c8      	b.n	2133e <qspi_nor_erase+0x72>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   213ac:	466c      	mov	r4, sp
   213ae:	b08a      	sub	sp, #40	; 0x28
   213b0:	466a      	mov	r2, sp
   213b2:	4b19      	ldr	r3, [pc, #100]	; (21418 <qspi_nor_erase+0x14c>)
   213b4:	6153      	str	r3, [r2, #20]
   213b6:	4b19      	ldr	r3, [pc, #100]	; (2141c <qspi_nor_erase+0x150>)
   213b8:	6215      	str	r5, [r2, #32]
   213ba:	e9c2 3906 	strd	r3, r9, [r2, #24]
   213be:	2305      	movs	r3, #5
   213c0:	f842 3f10 	str.w	r3, [r2, #16]!
   213c4:	4816      	ldr	r0, [pc, #88]	; (21420 <qspi_nor_erase+0x154>)
			res = NRFX_ERROR_INVALID_PARAM;
   213c6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 21424 <qspi_nor_erase+0x158>
   213ca:	2300      	movs	r3, #0
   213cc:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   213d0:	f7f2 fe2e 	bl	14030 <z_impl_z_log_msg_static_create>
		qspi_wait_for_completion(dev, res);
   213d4:	4913      	ldr	r1, [pc, #76]	; (21424 <qspi_nor_erase+0x158>)
   213d6:	6930      	ldr	r0, [r6, #16]
   213d8:	46a5      	mov	sp, r4
   213da:	f7ff fea5 	bl	21128 <qspi_wait_for_completion.isra.0>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   213de:	466c      	mov	r4, sp
   213e0:	b08a      	sub	sp, #40	; 0x28
   213e2:	466a      	mov	r2, sp
   213e4:	4b10      	ldr	r3, [pc, #64]	; (21428 <qspi_nor_erase+0x15c>)
   213e6:	6153      	str	r3, [r2, #20]
   213e8:	4b0c      	ldr	r3, [pc, #48]	; (2141c <qspi_nor_erase+0x150>)
   213ea:	6215      	str	r5, [r2, #32]
   213ec:	e9c2 3906 	strd	r3, r9, [r2, #24]
   213f0:	2305      	movs	r3, #5
   213f2:	f842 3f10 	str.w	r3, [r2, #16]!
   213f6:	480a      	ldr	r0, [pc, #40]	; (21420 <qspi_nor_erase+0x154>)
   213f8:	2300      	movs	r3, #0
   213fa:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   213fe:	f7f2 fe17 	bl	14030 <z_impl_z_log_msg_static_create>
			rv = qspi_get_zephyr_ret_code(res);
   21402:	4640      	mov	r0, r8
   21404:	46a5      	mov	sp, r4
   21406:	f7ff fe75 	bl	210f4 <qspi_get_zephyr_ret_code>
   2140a:	4604      	mov	r4, r0
			break;
   2140c:	e7a2      	b.n	21354 <qspi_nor_erase+0x88>
		return -EINVAL;
   2140e:	f06f 0415 	mvn.w	r4, #21
   21412:	e76f      	b.n	212f4 <qspi_nor_erase+0x28>
   21414:	0bad0000 	.word	0x0bad0000
   21418:	000347d3 	.word	0x000347d3
   2141c:	00034967 	.word	0x00034967
   21420:	0002fcf4 	.word	0x0002fcf4
   21424:	0bad0004 	.word	0x0bad0004
   21428:	000347f5 	.word	0x000347f5

0002142c <qspi_nor_init>:
{
   2142c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21430:	b086      	sub	sp, #24
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   21432:	6843      	ldr	r3, [r0, #4]
   21434:	6a1e      	ldr	r6, [r3, #32]
{
   21436:	af00      	add	r7, sp, #0
   21438:	4605      	mov	r5, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   2143a:	f107 020c 	add.w	r2, r7, #12
   2143e:	2100      	movs	r1, #0
   21440:	4630      	mov	r0, r6
   21442:	f00d fa3c 	bl	2e8be <pinctrl_lookup_state>
	if (ret < 0) {
   21446:	1e04      	subs	r4, r0, #0
   21448:	db4c      	blt.n	214e4 <qspi_nor_init+0xb8>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   2144a:	68fb      	ldr	r3, [r7, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2144c:	6832      	ldr	r2, [r6, #0]
   2144e:	7919      	ldrb	r1, [r3, #4]
   21450:	6818      	ldr	r0, [r3, #0]
   21452:	f000 fd71 	bl	21f38 <pinctrl_configure_pins>
	if (ret < 0) {
   21456:	1e04      	subs	r4, r0, #0
   21458:	db44      	blt.n	214e4 <qspi_nor_init+0xb8>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   2145a:	2200      	movs	r2, #0
   2145c:	2101      	movs	r1, #1
   2145e:	2029      	movs	r0, #41	; 0x29
   21460:	f7f3 ffe4 	bl	1542c <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   21464:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   21466:	692a      	ldr	r2, [r5, #16]
   21468:	4966      	ldr	r1, [pc, #408]	; (21604 <qspi_nor_init+0x1d8>)
   2146a:	4630      	mov	r0, r6
   2146c:	f003 f942 	bl	246f4 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   21470:	f7ff fe40 	bl	210f4 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   21474:	1e04      	subs	r4, r0, #0
   21476:	db35      	blt.n	214e4 <qspi_nor_init+0xb8>
#endif /* CONFIG_PM_DEVICE */

static int exit_dpd(const struct device *const dev)
{
	if (IS_ENABLED(DT_INST_PROP(0, has_dpd))) {
		struct qspi_cmd cmd = {
   21478:	2200      	movs	r2, #0
   2147a:	23ab      	movs	r3, #171	; 0xab
   2147c:	e9c7 2203 	strd	r2, r2, [r7, #12]
   21480:	617a      	str	r2, [r7, #20]
   21482:	733b      	strb	r3, [r7, #12]
			.op_code = SPI_NOR_CMD_RDPD,
		};
		uint32_t t_exit_dpd = DT_INST_PROP_OR(0, t_exit_dpd, 0);
		int ret;

		ret = qspi_send_cmd(dev, &cmd, false);
   21484:	f107 010c 	add.w	r1, r7, #12
   21488:	4628      	mov	r0, r5
   2148a:	f7ff fe79 	bl	21180 <qspi_send_cmd>
		if (ret < 0) {
   2148e:	1e04      	subs	r4, r0, #0
   21490:	db28      	blt.n	214e4 <qspi_nor_init+0xb8>
	z_impl_k_busy_wait(usec_to_wait);
   21492:	2023      	movs	r0, #35	; 0x23
   21494:	f00e f802 	bl	2f49c <z_impl_k_busy_wait>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   21498:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   2149a:	3b02      	subs	r3, #2
   2149c:	2b01      	cmp	r3, #1
   2149e:	d926      	bls.n	214ee <qspi_nor_init+0xc2>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   214a0:	f896 800a 	ldrb.w	r8, [r6, #10]
   214a4:	f1a8 0803 	sub.w	r8, r8, #3
   214a8:	f1b8 0f01 	cmp.w	r8, #1
   214ac:	bf8c      	ite	hi
   214ae:	f04f 0800 	movhi.w	r8, #0
   214b2:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   214b6:	4628      	mov	r0, r5
   214b8:	f00d f908 	bl	2e6cc <qspi_rdsr.constprop.0>
		if (ret < 0) {
   214bc:	1e04      	subs	r4, r0, #0
   214be:	da19      	bge.n	214f4 <qspi_nor_init+0xc8>
			LOG_ERR("RDSR failed: %d", ret);
   214c0:	466d      	mov	r5, sp
   214c2:	b088      	sub	sp, #32
   214c4:	466a      	mov	r2, sp
   214c6:	4b50      	ldr	r3, [pc, #320]	; (21608 <qspi_nor_init+0x1dc>)
   214c8:	6153      	str	r3, [r2, #20]
   214ca:	4b50      	ldr	r3, [pc, #320]	; (2160c <qspi_nor_init+0x1e0>)
   214cc:	e9c2 3406 	strd	r3, r4, [r2, #24]
   214d0:	2304      	movs	r3, #4
   214d2:	f842 3f10 	str.w	r3, [r2, #16]!
   214d6:	2300      	movs	r3, #0
   214d8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   214dc:	484c      	ldr	r0, [pc, #304]	; (21610 <qspi_nor_init+0x1e4>)
   214de:	f7f2 fda7 	bl	14030 <z_impl_z_log_msg_static_create>
   214e2:	46ad      	mov	sp, r5
}
   214e4:	4620      	mov	r0, r4
   214e6:	3718      	adds	r7, #24
   214e8:	46bd      	mov	sp, r7
   214ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   214ee:	f04f 0801 	mov.w	r8, #1
   214f2:	e7e0      	b.n	214b6 <qspi_nor_init+0x8a>
		uint8_t sr = (uint8_t)ret;
   214f4:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   214f6:	f3c4 1480 	ubfx	r4, r4, #6, #1
   214fa:	45a0      	cmp	r8, r4
   214fc:	f107 0604 	add.w	r6, r7, #4
   21500:	d033      	beq.n	2156a <qspi_nor_init+0x13e>
	uint8_t sr_array[2] = {0};
   21502:	2300      	movs	r3, #0
			sr ^= qe_mask;
   21504:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   21508:	803b      	strh	r3, [r7, #0]
		sr_array[0] = sr_val;
   2150a:	703a      	strb	r2, [r7, #0]
	const struct qspi_buf sr_buf = {
   2150c:	2201      	movs	r2, #1
	struct qspi_cmd cmd = {
   2150e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	const struct qspi_buf sr_buf = {
   21512:	607f      	str	r7, [r7, #4]
	struct qspi_cmd cmd = {
   21514:	617b      	str	r3, [r7, #20]
   21516:	733a      	strb	r2, [r7, #12]
   21518:	613e      	str	r6, [r7, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
   2151a:	f107 010c 	add.w	r1, r7, #12
   2151e:	4628      	mov	r0, r5
   21520:	f7ff fe2e 	bl	21180 <qspi_send_cmd>
	if (ret == 0) {
   21524:	1e04      	subs	r4, r0, #0
   21526:	d019      	beq.n	2155c <qspi_nor_init+0x130>
		if (ret < 0) {
   21528:	dadc      	bge.n	214e4 <qspi_nor_init+0xb8>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   2152a:	4a3a      	ldr	r2, [pc, #232]	; (21614 <qspi_nor_init+0x1e8>)
   2152c:	4b3a      	ldr	r3, [pc, #232]	; (21618 <qspi_nor_init+0x1ec>)
   2152e:	466d      	mov	r5, sp
   21530:	b08a      	sub	sp, #40	; 0x28
   21532:	f1b8 0f00 	cmp.w	r8, #0
   21536:	bf18      	it	ne
   21538:	4613      	movne	r3, r2
   2153a:	466a      	mov	r2, sp
   2153c:	4937      	ldr	r1, [pc, #220]	; (2161c <qspi_nor_init+0x1f0>)
   2153e:	6151      	str	r1, [r2, #20]
   21540:	4932      	ldr	r1, [pc, #200]	; (2160c <qspi_nor_init+0x1e0>)
   21542:	6214      	str	r4, [r2, #32]
   21544:	e9c2 1306 	strd	r1, r3, [r2, #24]
   21548:	f240 3301 	movw	r3, #769	; 0x301
   2154c:	8493      	strh	r3, [r2, #36]	; 0x24
   2154e:	4b34      	ldr	r3, [pc, #208]	; (21620 <qspi_nor_init+0x1f4>)
   21550:	f842 3f10 	str.w	r3, [r2, #16]!
   21554:	2300      	movs	r3, #0
   21556:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   2155a:	e7bf      	b.n	214dc <qspi_nor_init+0xb0>
		ret = qspi_rdsr(dev, 1);
   2155c:	4628      	mov	r0, r5
   2155e:	f00d f8b5 	bl	2e6cc <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   21562:	1e04      	subs	r4, r0, #0
   21564:	dbe1      	blt.n	2152a <qspi_nor_init+0xfe>
   21566:	07e3      	lsls	r3, r4, #31
   21568:	d4f8      	bmi.n	2155c <qspi_nor_init+0x130>
	qspi_device_uninit(dev);
   2156a:	4628      	mov	r0, r5
   2156c:	f7ff fe5a 	bl	21224 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   21570:	2403      	movs	r4, #3
   21572:	2300      	movs	r3, #0
   21574:	e9c7 4302 	strd	r4, r3, [r7, #8]
   21578:	613b      	str	r3, [r7, #16]
   2157a:	239f      	movs	r3, #159	; 0x9f
	const struct qspi_buf rx_buf = {
   2157c:	607f      	str	r7, [r7, #4]
	const struct qspi_cmd cmd = {
   2157e:	733b      	strb	r3, [r7, #12]
   21580:	617e      	str	r6, [r7, #20]
	int ret = qspi_device_init(dev);
   21582:	4628      	mov	r0, r5
   21584:	f7ff fe7a 	bl	2127c <qspi_device_init>
	if (ret == 0) {
   21588:	4602      	mov	r2, r0
   2158a:	b128      	cbz	r0, 21598 <qspi_nor_init+0x16c>
	qspi_device_uninit(dev);
   2158c:	4628      	mov	r0, r5
   2158e:	f7ff fe49 	bl	21224 <qspi_device_uninit>
		return -ENODEV;
   21592:	f06f 0412 	mvn.w	r4, #18
   21596:	e7a5      	b.n	214e4 <qspi_nor_init+0xb8>
		ret = qspi_send_cmd(dev, &cmd, false);
   21598:	f107 010c 	add.w	r1, r7, #12
   2159c:	4628      	mov	r0, r5
   2159e:	f7ff fdef 	bl	21180 <qspi_send_cmd>
   215a2:	4606      	mov	r6, r0
	qspi_device_uninit(dev);
   215a4:	4628      	mov	r0, r5
   215a6:	f7ff fe3d 	bl	21224 <qspi_device_uninit>
	if (ret != 0) {
   215aa:	2e00      	cmp	r6, #0
   215ac:	d1f1      	bne.n	21592 <qspi_nor_init+0x166>
	const struct qspi_nor_config *qnc = dev->config;
   215ae:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   215b0:	4622      	mov	r2, r4
   215b2:	4639      	mov	r1, r7
   215b4:	f105 001c 	add.w	r0, r5, #28
   215b8:	f00a fb4b 	bl	2bc52 <memcmp>
   215bc:	4604      	mov	r4, r0
   215be:	2800      	cmp	r0, #0
   215c0:	d090      	beq.n	214e4 <qspi_nor_init+0xb8>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   215c2:	466c      	mov	r4, sp
   215c4:	b08e      	sub	sp, #56	; 0x38
   215c6:	f897 8000 	ldrb.w	r8, [r7]
   215ca:	f897 e001 	ldrb.w	lr, [r7, #1]
   215ce:	f897 c002 	ldrb.w	ip, [r7, #2]
   215d2:	7f28      	ldrb	r0, [r5, #28]
   215d4:	7f69      	ldrb	r1, [r5, #29]
   215d6:	7fab      	ldrb	r3, [r5, #30]
   215d8:	466a      	mov	r2, sp
   215da:	4d12      	ldr	r5, [pc, #72]	; (21624 <qspi_nor_init+0x1f8>)
   215dc:	6155      	str	r5, [r2, #20]
   215de:	4d12      	ldr	r5, [pc, #72]	; (21628 <qspi_nor_init+0x1fc>)
   215e0:	6313      	str	r3, [r2, #48]	; 0x30
   215e2:	2309      	movs	r3, #9
   215e4:	e9c2 5806 	strd	r5, r8, [r2, #24]
   215e8:	e9c2 ec08 	strd	lr, ip, [r2, #32]
   215ec:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
   215f0:	f842 3f10 	str.w	r3, [r2, #16]!
   215f4:	4806      	ldr	r0, [pc, #24]	; (21610 <qspi_nor_init+0x1e4>)
   215f6:	4633      	mov	r3, r6
   215f8:	f644 0140 	movw	r1, #18496	; 0x4840
   215fc:	f7f2 fd18 	bl	14030 <z_impl_z_log_msg_static_create>
   21600:	46a5      	mov	sp, r4
		return -ENODEV;
   21602:	e7c6      	b.n	21592 <qspi_nor_init+0x166>
   21604:	0002e677 	.word	0x0002e677
   21608:	0003481d 	.word	0x0003481d
   2160c:	00034928 	.word	0x00034928
   21610:	0002fcf4 	.word	0x0002fcf4
   21614:	00033096 	.word	0x00033096
   21618:	00034817 	.word	0x00034817
   2161c:	00034831 	.word	0x00034831
   21620:	01000005 	.word	0x01000005
   21624:	00034846 	.word	0x00034846
   21628:	00034917 	.word	0x00034917

0002162c <qspi_nor_write>:
{
   2162c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21630:	b083      	sub	sp, #12
   21632:	4605      	mov	r5, r0
   21634:	af00      	add	r7, sp, #0
   21636:	4688      	mov	r8, r1
   21638:	461e      	mov	r6, r3
	if (!src) {
   2163a:	4691      	mov	r9, r2
   2163c:	b31a      	cbz	r2, 21686 <qspi_nor_write+0x5a>
	if ((size == 0)
   2163e:	b313      	cbz	r3, 21686 <qspi_nor_write+0x5a>
	    || ((size > 4) && ((size % 4U) != 0))) {
   21640:	2b04      	cmp	r3, #4
   21642:	d901      	bls.n	21648 <qspi_nor_write+0x1c>
   21644:	07b3      	lsls	r3, r6, #30
   21646:	d11e      	bne.n	21686 <qspi_nor_write+0x5a>
	if ((addr % 4U) != 0) {
   21648:	f018 0f03 	tst.w	r8, #3
   2164c:	d11b      	bne.n	21686 <qspi_nor_write+0x5a>
	if (addr < 0 ||
   2164e:	f1b8 0f00 	cmp.w	r8, #0
	const struct qspi_nor_config *params = dev->config;
   21652:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   21654:	db04      	blt.n	21660 <qspi_nor_write+0x34>
   21656:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   21658:	eb08 0306 	add.w	r3, r8, r6
	if (addr < 0 ||
   2165c:	4293      	cmp	r3, r2
   2165e:	d919      	bls.n	21694 <qspi_nor_write+0x68>
		LOG_ERR("write error: address or size "
   21660:	466c      	mov	r4, sp
   21662:	b08a      	sub	sp, #40	; 0x28
   21664:	466a      	mov	r2, sp
   21666:	4b42      	ldr	r3, [pc, #264]	; (21770 <qspi_nor_write+0x144>)
   21668:	6153      	str	r3, [r2, #20]
   2166a:	4b42      	ldr	r3, [pc, #264]	; (21774 <qspi_nor_write+0x148>)
   2166c:	6216      	str	r6, [r2, #32]
   2166e:	e9c2 3806 	strd	r3, r8, [r2, #24]
   21672:	2305      	movs	r3, #5
   21674:	f842 3f10 	str.w	r3, [r2, #16]!
   21678:	483f      	ldr	r0, [pc, #252]	; (21778 <qspi_nor_write+0x14c>)
   2167a:	2300      	movs	r3, #0
   2167c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   21680:	f7f2 fcd6 	bl	14030 <z_impl_z_log_msg_static_create>
   21684:	46a5      	mov	sp, r4
		return -EINVAL;
   21686:	f06f 0415 	mvn.w	r4, #21
}
   2168a:	4620      	mov	r0, r4
   2168c:	370c      	adds	r7, #12
   2168e:	46bd      	mov	sp, r7
   21690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   21694:	4628      	mov	r0, r5
   21696:	f7ff fdf1 	bl	2127c <qspi_device_init>
	if (rc != 0) {
   2169a:	4604      	mov	r4, r0
   2169c:	2800      	cmp	r0, #0
   2169e:	d15f      	bne.n	21760 <qspi_nor_write+0x134>
	qspi_trans_lock(dev);
   216a0:	6928      	ldr	r0, [r5, #16]
   216a2:	f00c fff5 	bl	2e690 <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   216a6:	4621      	mov	r1, r4
   216a8:	4628      	mov	r0, r5
   216aa:	f00c fffa 	bl	2e6a2 <qspi_nor_write_protection_set>
   216ae:	4604      	mov	r4, r0
	qspi_lock(dev);
   216b0:	6928      	ldr	r0, [r5, #16]
   216b2:	f00c ffe6 	bl	2e682 <qspi_lock.isra.0>
	if (!res) {
   216b6:	2c00      	cmp	r4, #0
   216b8:	d140      	bne.n	2173c <qspi_nor_write+0x110>
		if (size < 4U) {
   216ba:	2e03      	cmp	r6, #3
   216bc:	d81c      	bhi.n	216f8 <qspi_nor_write+0xcc>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   216be:	2104      	movs	r1, #4
   216c0:	4642      	mov	r2, r8
   216c2:	1878      	adds	r0, r7, r1
   216c4:	f00d faee 	bl	2eca4 <nrfx_qspi_read>
   216c8:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   216ca:	4601      	mov	r1, r0
   216cc:	6928      	ldr	r0, [r5, #16]
   216ce:	f7ff fd2b 	bl	21128 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   216d2:	4b2a      	ldr	r3, [pc, #168]	; (2177c <qspi_nor_write+0x150>)
   216d4:	429c      	cmp	r4, r3
   216d6:	d131      	bne.n	2173c <qspi_nor_write+0x110>
		memcpy(buf, sptr, slen);
   216d8:	4632      	mov	r2, r6
   216da:	4649      	mov	r1, r9
   216dc:	1d38      	adds	r0, r7, #4
   216de:	f00a fadf 	bl	2bca0 <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   216e2:	2104      	movs	r1, #4
   216e4:	4642      	mov	r2, r8
   216e6:	1878      	adds	r0, r7, r1
			res = nrfx_qspi_write(src, size, addr);
   216e8:	f00d fad9 	bl	2ec9e <nrfx_qspi_write>
   216ec:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   216ee:	4601      	mov	r1, r0
   216f0:	6928      	ldr	r0, [r5, #16]
   216f2:	f7ff fd19 	bl	21128 <qspi_wait_for_completion.isra.0>
   216f6:	e021      	b.n	2173c <qspi_nor_write+0x110>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   216f8:	f009 4360 	and.w	r3, r9, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   216fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   21700:	d032      	beq.n	21768 <qspi_nor_write+0x13c>
			if (res == NRFX_SUCCESS) {
   21702:	f8df b078 	ldr.w	fp, [pc, #120]	; 2177c <qspi_nor_write+0x150>
			size_t len = MIN(slen, sizeof(buf));
   21706:	2e04      	cmp	r6, #4
   21708:	46b2      	mov	sl, r6
   2170a:	bf28      	it	cs
   2170c:	f04f 0a04 	movcs.w	sl, #4
			memcpy(buf, sp, len);
   21710:	4652      	mov	r2, sl
   21712:	4649      	mov	r1, r9
   21714:	1d38      	adds	r0, r7, #4
   21716:	f00a fac3 	bl	2bca0 <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   2171a:	2104      	movs	r1, #4
   2171c:	4642      	mov	r2, r8
   2171e:	1878      	adds	r0, r7, r1
   21720:	f00d fabd 	bl	2ec9e <nrfx_qspi_write>
   21724:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   21726:	4601      	mov	r1, r0
   21728:	6928      	ldr	r0, [r5, #16]
   2172a:	f7ff fcfd 	bl	21128 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   2172e:	455c      	cmp	r4, fp
   21730:	d104      	bne.n	2173c <qspi_nor_write+0x110>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   21732:	ebb6 060a 	subs.w	r6, r6, sl
				sp += len;
   21736:	44d1      	add	r9, sl
				addr += len;
   21738:	44d0      	add	r8, sl
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   2173a:	d1e4      	bne.n	21706 <qspi_nor_write+0xda>
	qspi_unlock(dev);
   2173c:	6928      	ldr	r0, [r5, #16]
   2173e:	f00c ffad 	bl	2e69c <qspi_unlock.isra.0>
	int res2 = qspi_nor_write_protection_set(dev, true);
   21742:	2101      	movs	r1, #1
   21744:	4628      	mov	r0, r5
   21746:	f00c ffac 	bl	2e6a2 <qspi_nor_write_protection_set>
   2174a:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   2174c:	6928      	ldr	r0, [r5, #16]
	z_impl_k_sem_give(sem);
   2174e:	f003 fe0b 	bl	25368 <z_impl_k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   21752:	2c00      	cmp	r4, #0
   21754:	bf14      	ite	ne
   21756:	4620      	movne	r0, r4
   21758:	4630      	moveq	r0, r6
   2175a:	f7ff fccb 	bl	210f4 <qspi_get_zephyr_ret_code>
   2175e:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   21760:	4628      	mov	r0, r5
   21762:	f7ff fd5f 	bl	21224 <qspi_device_uninit>
	return rc;
   21766:	e790      	b.n	2168a <qspi_nor_write+0x5e>
			res = nrfx_qspi_write(src, size, addr);
   21768:	4642      	mov	r2, r8
   2176a:	4631      	mov	r1, r6
   2176c:	4648      	mov	r0, r9
   2176e:	e7bb      	b.n	216e8 <qspi_nor_write+0xbc>
   21770:	0003487c 	.word	0x0003487c
   21774:	0003494a 	.word	0x0003494a
   21778:	0002fcf4 	.word	0x0002fcf4
   2177c:	0bad0000 	.word	0x0bad0000

00021780 <qspi_nor_read>:
{
   21780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21784:	b085      	sub	sp, #20
   21786:	4681      	mov	r9, r0
   21788:	af00      	add	r7, sp, #0
   2178a:	460e      	mov	r6, r1
   2178c:	461c      	mov	r4, r3
	if (!dest) {
   2178e:	4690      	mov	r8, r2
   21790:	b1e2      	cbz	r2, 217cc <qspi_nor_read+0x4c>
	if (!size) {
   21792:	2b00      	cmp	r3, #0
   21794:	f000 80ac 	beq.w	218f0 <qspi_nor_read+0x170>
	if (addr < 0 ||
   21798:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   2179a:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   2179c:	db03      	blt.n	217a6 <qspi_nor_read+0x26>
   2179e:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   217a0:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   217a2:	4293      	cmp	r3, r2
   217a4:	d919      	bls.n	217da <qspi_nor_read+0x5a>
		LOG_ERR("read error: address or size "
   217a6:	466d      	mov	r5, sp
   217a8:	b08a      	sub	sp, #40	; 0x28
   217aa:	466a      	mov	r2, sp
   217ac:	4b51      	ldr	r3, [pc, #324]	; (218f4 <qspi_nor_read+0x174>)
   217ae:	6153      	str	r3, [r2, #20]
   217b0:	4b51      	ldr	r3, [pc, #324]	; (218f8 <qspi_nor_read+0x178>)
   217b2:	6214      	str	r4, [r2, #32]
   217b4:	e9c2 3606 	strd	r3, r6, [r2, #24]
   217b8:	2305      	movs	r3, #5
   217ba:	f842 3f10 	str.w	r3, [r2, #16]!
   217be:	484f      	ldr	r0, [pc, #316]	; (218fc <qspi_nor_read+0x17c>)
   217c0:	2300      	movs	r3, #0
   217c2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   217c6:	f7f2 fc33 	bl	14030 <z_impl_z_log_msg_static_create>
   217ca:	46ad      	mov	sp, r5
		return -EINVAL;
   217cc:	f06f 0515 	mvn.w	r5, #21
}
   217d0:	4628      	mov	r0, r5
   217d2:	3714      	adds	r7, #20
   217d4:	46bd      	mov	sp, r7
   217d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   217da:	f7ff fd4f 	bl	2127c <qspi_device_init>
	if (rc != 0) {
   217de:	4605      	mov	r5, r0
   217e0:	2800      	cmp	r0, #0
   217e2:	d17f      	bne.n	218e4 <qspi_nor_read+0x164>
	qspi_lock(dev);
   217e4:	4275      	negs	r5, r6
   217e6:	f005 0503 	and.w	r5, r5, #3
   217ea:	f8d9 0010 	ldr.w	r0, [r9, #16]
   217ee:	f00c ff48 	bl	2e682 <qspi_lock.isra.0>
	if (flash_prefix > size) {
   217f2:	42a5      	cmp	r5, r4
   217f4:	bf28      	it	cs
   217f6:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   217f8:	f1d8 0200 	rsbs	r2, r8, #0
   217fc:	f002 0203 	and.w	r2, r2, #3
   21800:	f008 0303 	and.w	r3, r8, #3
   21804:	bf58      	it	pl
   21806:	4253      	negpl	r3, r2
   21808:	425b      	negs	r3, r3
   2180a:	f003 0303 	and.w	r3, r3, #3
   2180e:	42a3      	cmp	r3, r4
   21810:	bf28      	it	cs
   21812:	4623      	movcs	r3, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   21814:	1b62      	subs	r2, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   21816:	1ae4      	subs	r4, r4, r3
   21818:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   2181c:	f022 0a03 	bic.w	sl, r2, #3
	if (flash_middle > dest_middle) {
   21820:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   21822:	bfc8      	it	gt
   21824:	46a2      	movgt	sl, r4
   21826:	f002 0b03 	and.w	fp, r2, #3
   2182a:	bfc8      	it	gt
   2182c:	eba2 0b04 	subgt.w	fp, r2, r4
	if (flash_middle != 0) {
   21830:	f1ba 0f00 	cmp.w	sl, #0
   21834:	d01a      	beq.n	2186c <qspi_nor_read+0xec>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   21836:	eb08 0203 	add.w	r2, r8, r3
   2183a:	e9c7 3200 	strd	r3, r2, [r7]
   2183e:	4651      	mov	r1, sl
   21840:	1972      	adds	r2, r6, r5
   21842:	6878      	ldr	r0, [r7, #4]
   21844:	f00d fa2e 	bl	2eca4 <nrfx_qspi_read>
   21848:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   2184a:	4601      	mov	r1, r0
   2184c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   21850:	f7ff fc6a 	bl	21128 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   21854:	4a2a      	ldr	r2, [pc, #168]	; (21900 <qspi_nor_read+0x180>)
   21856:	4294      	cmp	r4, r2
   21858:	d13c      	bne.n	218d4 <qspi_nor_read+0x154>
		if (flash_prefix != dest_prefix) {
   2185a:	683b      	ldr	r3, [r7, #0]
   2185c:	429d      	cmp	r5, r3
   2185e:	d005      	beq.n	2186c <qspi_nor_read+0xec>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
   21860:	6879      	ldr	r1, [r7, #4]
   21862:	4652      	mov	r2, sl
   21864:	eb08 0005 	add.w	r0, r8, r5
   21868:	f00a fa03 	bl	2bc72 <memmove>
	if (flash_prefix != 0) {
   2186c:	b1c5      	cbz	r5, 218a0 <qspi_nor_read+0x120>
				     (WORD_SIZE - flash_prefix));
   2186e:	f1c5 0304 	rsb	r3, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   21872:	1af2      	subs	r2, r6, r3
   21874:	2104      	movs	r1, #4
   21876:	f107 0008 	add.w	r0, r7, #8
   2187a:	607b      	str	r3, [r7, #4]
   2187c:	f00d fa12 	bl	2eca4 <nrfx_qspi_read>
   21880:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   21882:	4601      	mov	r1, r0
   21884:	f8d9 0010 	ldr.w	r0, [r9, #16]
   21888:	f7ff fc4e 	bl	21128 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   2188c:	4a1c      	ldr	r2, [pc, #112]	; (21900 <qspi_nor_read+0x180>)
   2188e:	687b      	ldr	r3, [r7, #4]
   21890:	4294      	cmp	r4, r2
   21892:	d11f      	bne.n	218d4 <qspi_nor_read+0x154>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
   21894:	3308      	adds	r3, #8
   21896:	462a      	mov	r2, r5
   21898:	19d9      	adds	r1, r3, r7
   2189a:	4640      	mov	r0, r8
   2189c:	f00a fa00 	bl	2bca0 <memcpy>
	if (flash_suffix != 0) {
   218a0:	f1bb 0f00 	cmp.w	fp, #0
   218a4:	d022      	beq.n	218ec <qspi_nor_read+0x16c>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   218a6:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
   218a8:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   218aa:	4452      	add	r2, sl
   218ac:	1878      	adds	r0, r7, r1
   218ae:	f00d f9f9 	bl	2eca4 <nrfx_qspi_read>
   218b2:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   218b4:	4601      	mov	r1, r0
   218b6:	f8d9 0010 	ldr.w	r0, [r9, #16]
   218ba:	f7ff fc35 	bl	21128 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   218be:	4b10      	ldr	r3, [pc, #64]	; (21900 <qspi_nor_read+0x180>)
   218c0:	429c      	cmp	r4, r3
   218c2:	d107      	bne.n	218d4 <qspi_nor_read+0x154>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   218c4:	eb0a 0005 	add.w	r0, sl, r5
   218c8:	465a      	mov	r2, fp
   218ca:	f107 0108 	add.w	r1, r7, #8
   218ce:	4440      	add	r0, r8
   218d0:	f00a f9e6 	bl	2bca0 <memcpy>
	qspi_unlock(dev);
   218d4:	f8d9 0010 	ldr.w	r0, [r9, #16]
   218d8:	f00c fee0 	bl	2e69c <qspi_unlock.isra.0>
	rc = qspi_get_zephyr_ret_code(res);
   218dc:	4620      	mov	r0, r4
   218de:	f7ff fc09 	bl	210f4 <qspi_get_zephyr_ret_code>
   218e2:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   218e4:	4648      	mov	r0, r9
   218e6:	f7ff fc9d 	bl	21224 <qspi_device_uninit>
	return rc;
   218ea:	e771      	b.n	217d0 <qspi_nor_read+0x50>
	return res;
   218ec:	4c04      	ldr	r4, [pc, #16]	; (21900 <qspi_nor_read+0x180>)
   218ee:	e7f1      	b.n	218d4 <qspi_nor_read+0x154>
		return 0;
   218f0:	461d      	mov	r5, r3
   218f2:	e76d      	b.n	217d0 <qspi_nor_read+0x50>
   218f4:	000348ca 	.word	0x000348ca
   218f8:	0003493c 	.word	0x0003493c
   218fc:	0002fcf4 	.word	0x0002fcf4
   21900:	0bad0000 	.word	0x0bad0000

00021904 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   21904:	4b02      	ldr	r3, [pc, #8]	; (21910 <flash_nrf_pages_layout+0xc>)
   21906:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   21908:	2301      	movs	r3, #1
   2190a:	6013      	str	r3, [r2, #0]
}
   2190c:	4770      	bx	lr
   2190e:	bf00      	nop
   21910:	20003634 	.word	0x20003634

00021914 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   21914:	4800      	ldr	r0, [pc, #0]	; (21918 <flash_nrf_get_parameters+0x4>)
   21916:	4770      	bx	lr
   21918:	00030674 	.word	0x00030674

0002191c <flash_nrf_read.part.0>:
static int flash_nrf_read(const struct device *dev, off_t addr,
   2191c:	b580      	push	{r7, lr}
   2191e:	af00      	add	r7, sp, #0
		LOG_ERR("invalid address: 0x%08lx:%zu",
   21920:	b08a      	sub	sp, #40	; 0x28
   21922:	466a      	mov	r2, sp
   21924:	4b09      	ldr	r3, [pc, #36]	; (2194c <flash_nrf_read.part.0+0x30>)
   21926:	6153      	str	r3, [r2, #20]
   21928:	4b09      	ldr	r3, [pc, #36]	; (21950 <flash_nrf_read.part.0+0x34>)
   2192a:	6211      	str	r1, [r2, #32]
   2192c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   21930:	2305      	movs	r3, #5
   21932:	f842 3f10 	str.w	r3, [r2, #16]!
   21936:	4807      	ldr	r0, [pc, #28]	; (21954 <flash_nrf_read.part.0+0x38>)
   21938:	2300      	movs	r3, #0
   2193a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   2193e:	f7f2 fb77 	bl	14030 <z_impl_z_log_msg_static_create>
}
   21942:	f06f 0015 	mvn.w	r0, #21
   21946:	46bd      	mov	sp, r7
   21948:	bd80      	pop	{r7, pc}
   2194a:	bf00      	nop
   2194c:	00034997 	.word	0x00034997
   21950:	000349fd 	.word	0x000349fd
   21954:	0002fc8c 	.word	0x0002fc8c

00021958 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   21958:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2195a:	2201      	movs	r2, #1
   2195c:	4611      	mov	r1, r2
   2195e:	4807      	ldr	r0, [pc, #28]	; (2197c <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   21960:	4c07      	ldr	r4, [pc, #28]	; (21980 <nrf_flash_init+0x28>)
   21962:	f00d fb36 	bl	2efd2 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   21966:	f002 f81f 	bl	239a8 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   2196a:	f00d f986 	bl	2ec7a <nrfx_nvmc_flash_page_count_get>
   2196e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   21970:	f00d f97f 	bl	2ec72 <nrfx_nvmc_flash_page_size_get>
   21974:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   21976:	2000      	movs	r0, #0
   21978:	bd10      	pop	{r4, pc}
   2197a:	bf00      	nop
   2197c:	2000363c 	.word	0x2000363c
   21980:	20003634 	.word	0x20003634

00021984 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   21984:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   21988:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   2198c:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   21990:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   21994:	f023 031f 	bic.w	r3, r3, #31
   21998:	430b      	orrs	r3, r1
    pofcon |=
   2199a:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   2199e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   219a2:	4b02      	ldr	r3, [pc, #8]	; (219ac <restore_pofwarn.part.0+0x28>)
   219a4:	2200      	movs	r2, #0
   219a6:	701a      	strb	r2, [r3, #0]
	}
}
   219a8:	4770      	bx	lr
   219aa:	bf00      	nop
   219ac:	2000448a 	.word	0x2000448a

000219b0 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   219b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   219b4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   219b8:	2b08      	cmp	r3, #8
   219ba:	d120      	bne.n	219fe <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   219bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   219c0:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   219c4:	07cb      	lsls	r3, r1, #31
   219c6:	d51a      	bpl.n	219fe <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   219c8:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   219cc:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   219d0:	f023 031f 	bic.w	r3, r3, #31
    pofcon |=
   219d4:	430b      	orrs	r3, r1
    p_reg->POFCON = pofcon;
   219d6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   219da:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   219de:	b15b      	cbz	r3, 219f8 <suspend_pofwarn+0x48>
    uint32_t pofcon = p_reg->POFCON;
   219e0:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   219e4:	f023 031f 	bic.w	r3, r3, #31
   219e8:	430b      	orrs	r3, r1
    pofcon |=
   219ea:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   219ee:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   219f2:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   219f6:	4770      	bx	lr
		pofcon_enabled = enabled;
   219f8:	4b02      	ldr	r3, [pc, #8]	; (21a04 <suspend_pofwarn+0x54>)
   219fa:	2201      	movs	r2, #1
   219fc:	701a      	strb	r2, [r3, #0]
		return 0;
   219fe:	2000      	movs	r0, #0
}
   21a00:	4770      	bx	lr
   21a02:	bf00      	nop
   21a04:	2000448a 	.word	0x2000448a

00021a08 <erase_op>:
{
   21a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21a0a:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   21a0c:	f00d f931 	bl	2ec72 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   21a10:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   21a12:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   21a14:	b10b      	cbz	r3, 21a1a <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   21a16:	f00d f8bf 	bl	2eb98 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   21a1a:	4f13      	ldr	r7, [pc, #76]	; (21a68 <erase_op+0x60>)
{
   21a1c:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   21a1e:	f7ff ffc7 	bl	219b0 <suspend_pofwarn>
   21a22:	b9e8      	cbnz	r0, 21a60 <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   21a24:	6860      	ldr	r0, [r4, #4]
   21a26:	f002 fd2b 	bl	24480 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   21a2a:	68a3      	ldr	r3, [r4, #8]
   21a2c:	1b5b      	subs	r3, r3, r5
   21a2e:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   21a30:	6863      	ldr	r3, [r4, #4]
   21a32:	442b      	add	r3, r5
   21a34:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   21a36:	783b      	ldrb	r3, [r7, #0]
   21a38:	b10b      	cbz	r3, 21a3e <erase_op+0x36>
   21a3a:	f7ff ffa3 	bl	21984 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   21a3e:	7b23      	ldrb	r3, [r4, #12]
		i++;
   21a40:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   21a42:	b93b      	cbnz	r3, 21a54 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   21a44:	68a3      	ldr	r3, [r4, #8]
   21a46:	2b00      	cmp	r3, #0
   21a48:	d1e9      	bne.n	21a1e <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   21a4a:	68a0      	ldr	r0, [r4, #8]
   21a4c:	3800      	subs	r0, #0
   21a4e:	bf18      	it	ne
   21a50:	2001      	movne	r0, #1
}
   21a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   21a54:	4630      	mov	r0, r6
   21a56:	f002 f853 	bl	23b00 <nrf_flash_sync_check_time_limit>
   21a5a:	2800      	cmp	r0, #0
   21a5c:	d0f2      	beq.n	21a44 <erase_op+0x3c>
   21a5e:	e7f4      	b.n	21a4a <erase_op+0x42>
			return -ECANCELED;
   21a60:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   21a64:	e7f5      	b.n	21a52 <erase_op+0x4a>
   21a66:	bf00      	nop
   21a68:	2000448a 	.word	0x2000448a

00021a6c <write_op>:
{
   21a6c:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   21a6e:	7b03      	ldrb	r3, [r0, #12]
{
   21a70:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   21a72:	b10b      	cbz	r3, 21a78 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   21a74:	f00d f890 	bl	2eb98 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   21a78:	4e19      	ldr	r6, [pc, #100]	; (21ae0 <write_op+0x74>)
{
   21a7a:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   21a7c:	68a3      	ldr	r3, [r4, #8]
   21a7e:	2b03      	cmp	r3, #3
   21a80:	d806      	bhi.n	21a90 <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   21a82:	4a18      	ldr	r2, [pc, #96]	; (21ae4 <write_op+0x78>)
   21a84:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   21a88:	07db      	lsls	r3, r3, #31
   21a8a:	d5fb      	bpl.n	21a84 <write_op+0x18>
	return FLASH_OP_DONE;
   21a8c:	2000      	movs	r0, #0
}
   21a8e:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   21a90:	f7ff ff8e 	bl	219b0 <suspend_pofwarn>
   21a94:	bb08      	cbnz	r0, 21ada <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   21a96:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   21a98:	6860      	ldr	r0, [r4, #4]
   21a9a:	6819      	ldr	r1, [r3, #0]
   21a9c:	f002 fd10 	bl	244c0 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   21aa0:	7833      	ldrb	r3, [r6, #0]
   21aa2:	b10b      	cbz	r3, 21aa8 <write_op+0x3c>
   21aa4:	f7ff ff6e 	bl	21984 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   21aa8:	6863      	ldr	r3, [r4, #4]
   21aaa:	3304      	adds	r3, #4
   21aac:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   21aae:	6823      	ldr	r3, [r4, #0]
   21ab0:	3304      	adds	r3, #4
   21ab2:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   21ab4:	68a3      	ldr	r3, [r4, #8]
   21ab6:	3b04      	subs	r3, #4
   21ab8:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   21aba:	7b23      	ldrb	r3, [r4, #12]
		i++;
   21abc:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   21abe:	2b00      	cmp	r3, #0
   21ac0:	d0dc      	beq.n	21a7c <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   21ac2:	4628      	mov	r0, r5
   21ac4:	f002 f81c 	bl	23b00 <nrf_flash_sync_check_time_limit>
   21ac8:	2800      	cmp	r0, #0
   21aca:	d0d7      	beq.n	21a7c <write_op+0x10>
   21acc:	4a05      	ldr	r2, [pc, #20]	; (21ae4 <write_op+0x78>)
   21ace:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   21ad2:	07d9      	lsls	r1, r3, #31
   21ad4:	d5fb      	bpl.n	21ace <write_op+0x62>
				return FLASH_OP_ONGOING;
   21ad6:	2001      	movs	r0, #1
   21ad8:	e7d9      	b.n	21a8e <write_op+0x22>
			return -ECANCELED;
   21ada:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   21ade:	e7d6      	b.n	21a8e <write_op+0x22>
   21ae0:	2000448a 	.word	0x2000448a
   21ae4:	4001e000 	.word	0x4001e000

00021ae8 <flash_nrf_erase>:
{
   21ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21aec:	b086      	sub	sp, #24
   21aee:	af00      	add	r7, sp, #0
   21af0:	460e      	mov	r6, r1
   21af2:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   21af4:	f00d f8bd 	bl	2ec72 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   21af8:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   21afa:	4680      	mov	r8, r0
	if (is_regular_addr_valid(addr, size)) {
   21afc:	4630      	mov	r0, r6
   21afe:	f00c fe00 	bl	2e702 <is_regular_addr_valid>
   21b02:	4603      	mov	r3, r0
   21b04:	2800      	cmp	r0, #0
   21b06:	d03b      	beq.n	21b80 <flash_nrf_erase+0x98>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   21b08:	fbb6 f3f8 	udiv	r3, r6, r8
   21b0c:	fb08 6313 	mls	r3, r8, r3, r6
   21b10:	b923      	cbnz	r3, 21b1c <flash_nrf_erase+0x34>
   21b12:	fbb5 f4f8 	udiv	r4, r5, r8
   21b16:	fb08 5414 	mls	r4, r8, r4, r5
   21b1a:	b1cc      	cbz	r4, 21b50 <flash_nrf_erase+0x68>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   21b1c:	466c      	mov	r4, sp
   21b1e:	b08a      	sub	sp, #40	; 0x28
   21b20:	466a      	mov	r2, sp
   21b22:	4b29      	ldr	r3, [pc, #164]	; (21bc8 <flash_nrf_erase+0xe0>)
   21b24:	6153      	str	r3, [r2, #20]
   21b26:	4b29      	ldr	r3, [pc, #164]	; (21bcc <flash_nrf_erase+0xe4>)
   21b28:	6215      	str	r5, [r2, #32]
   21b2a:	e9c2 3606 	strd	r3, r6, [r2, #24]
   21b2e:	2305      	movs	r3, #5
   21b30:	f842 3f10 	str.w	r3, [r2, #16]!
   21b34:	2300      	movs	r3, #0
   21b36:	4826      	ldr	r0, [pc, #152]	; (21bd0 <flash_nrf_erase+0xe8>)
   21b38:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   21b3c:	f7f2 fa78 	bl	14030 <z_impl_z_log_msg_static_create>
   21b40:	46a5      	mov	sp, r4
			return -EINVAL;
   21b42:	f06f 0415 	mvn.w	r4, #21
}
   21b46:	4620      	mov	r0, r4
   21b48:	3718      	adds	r7, #24
   21b4a:	46bd      	mov	sp, r7
   21b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!n_pages) {
   21b50:	45a8      	cmp	r8, r5
   21b52:	d8f8      	bhi.n	21b46 <flash_nrf_erase+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   21b54:	f04f 33ff 	mov.w	r3, #4294967295
   21b58:	f04f 32ff 	mov.w	r2, #4294967295
   21b5c:	481d      	ldr	r0, [pc, #116]	; (21bd4 <flash_nrf_erase+0xec>)
   21b5e:	f003 fc29 	bl	253b4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   21b62:	f00d f817 	bl	2eb94 <nrf_flash_sync_is_required>
   21b66:	f107 0308 	add.w	r3, r7, #8
   21b6a:	4601      	mov	r1, r0
   21b6c:	b9a8      	cbnz	r0, 21b9a <flash_nrf_erase+0xb2>
	struct flash_context context = {
   21b6e:	2210      	movs	r2, #16
   21b70:	4618      	mov	r0, r3
   21b72:	f00a f8a0 	bl	2bcb6 <memset>
   21b76:	e9c7 6503 	strd	r6, r5, [r7, #12]
	return	erase_op(&context);
   21b7a:	f7ff ff45 	bl	21a08 <erase_op>
   21b7e:	e01e      	b.n	21bbe <flash_nrf_erase+0xd6>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   21b80:	466c      	mov	r4, sp
   21b82:	b08a      	sub	sp, #40	; 0x28
   21b84:	466a      	mov	r2, sp
   21b86:	4914      	ldr	r1, [pc, #80]	; (21bd8 <flash_nrf_erase+0xf0>)
   21b88:	6151      	str	r1, [r2, #20]
   21b8a:	4910      	ldr	r1, [pc, #64]	; (21bcc <flash_nrf_erase+0xe4>)
   21b8c:	6215      	str	r5, [r2, #32]
   21b8e:	e9c2 1606 	strd	r1, r6, [r2, #24]
   21b92:	2105      	movs	r1, #5
   21b94:	f842 1f10 	str.w	r1, [r2, #16]!
	compiler_barrier();
   21b98:	e7cd      	b.n	21b36 <flash_nrf_erase+0x4e>
	struct flash_context context = {
   21b9a:	2210      	movs	r2, #16
   21b9c:	4621      	mov	r1, r4
   21b9e:	4618      	mov	r0, r3
   21ba0:	f00a f889 	bl	2bcb6 <memset>
   21ba4:	2201      	movs	r2, #1
   21ba6:	753a      	strb	r2, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   21ba8:	4a0c      	ldr	r2, [pc, #48]	; (21bdc <flash_nrf_erase+0xf4>)
	struct flash_context context = {
   21baa:	e9c7 6503 	strd	r6, r5, [r7, #12]
	struct flash_op_desc flash_op_desc = {
   21bae:	e9c7 2000 	strd	r2, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   21bb2:	480b      	ldr	r0, [pc, #44]	; (21be0 <flash_nrf_erase+0xf8>)
   21bb4:	f001 ff00 	bl	239b8 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   21bb8:	4638      	mov	r0, r7
   21bba:	f001 ff03 	bl	239c4 <nrf_flash_sync_exe>
	return	erase_op(&context);
   21bbe:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   21bc0:	4804      	ldr	r0, [pc, #16]	; (21bd4 <flash_nrf_erase+0xec>)
   21bc2:	f003 fbd1 	bl	25368 <z_impl_k_sem_give>
}
   21bc6:	e7be      	b.n	21b46 <flash_nrf_erase+0x5e>
   21bc8:	000349b8 	.word	0x000349b8
   21bcc:	00034a1c 	.word	0x00034a1c
   21bd0:	0002fc8c 	.word	0x0002fc8c
   21bd4:	2000363c 	.word	0x2000363c
   21bd8:	00034997 	.word	0x00034997
   21bdc:	00021a09 	.word	0x00021a09
   21be0:	00015e64 	.word	0x00015e64

00021be4 <flash_nrf_write>:
{
   21be4:	b5f0      	push	{r4, r5, r6, r7, lr}
   21be6:	460d      	mov	r5, r1
   21be8:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   21bea:	4619      	mov	r1, r3
{
   21bec:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   21bee:	4628      	mov	r0, r5
{
   21bf0:	461c      	mov	r4, r3
   21bf2:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   21bf4:	f00c fd85 	bl	2e702 <is_regular_addr_valid>
   21bf8:	4603      	mov	r3, r0
   21bfa:	b9b8      	cbnz	r0, 21c2c <flash_nrf_write+0x48>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   21bfc:	466e      	mov	r6, sp
   21bfe:	b08a      	sub	sp, #40	; 0x28
   21c00:	466a      	mov	r2, sp
   21c02:	4927      	ldr	r1, [pc, #156]	; (21ca0 <flash_nrf_write+0xbc>)
   21c04:	6151      	str	r1, [r2, #20]
   21c06:	4927      	ldr	r1, [pc, #156]	; (21ca4 <flash_nrf_write+0xc0>)
   21c08:	6214      	str	r4, [r2, #32]
   21c0a:	e9c2 1506 	strd	r1, r5, [r2, #24]
   21c0e:	2105      	movs	r1, #5
   21c10:	f842 1f10 	str.w	r1, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   21c14:	4824      	ldr	r0, [pc, #144]	; (21ca8 <flash_nrf_write+0xc4>)
   21c16:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   21c1a:	f7f2 fa09 	bl	14030 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   21c1e:	f06f 0415 	mvn.w	r4, #21
   21c22:	46b5      	mov	sp, r6
}
   21c24:	4620      	mov	r0, r4
   21c26:	371c      	adds	r7, #28
   21c28:	46bd      	mov	sp, r7
   21c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   21c2c:	ea45 0304 	orr.w	r3, r5, r4
   21c30:	079b      	lsls	r3, r3, #30
   21c32:	d00d      	beq.n	21c50 <flash_nrf_write+0x6c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   21c34:	466e      	mov	r6, sp
   21c36:	b08a      	sub	sp, #40	; 0x28
   21c38:	466a      	mov	r2, sp
   21c3a:	4b1c      	ldr	r3, [pc, #112]	; (21cac <flash_nrf_write+0xc8>)
   21c3c:	6153      	str	r3, [r2, #20]
   21c3e:	4b19      	ldr	r3, [pc, #100]	; (21ca4 <flash_nrf_write+0xc0>)
   21c40:	6214      	str	r4, [r2, #32]
   21c42:	e9c2 3506 	strd	r3, r5, [r2, #24]
   21c46:	2305      	movs	r3, #5
   21c48:	f842 3f10 	str.w	r3, [r2, #16]!
   21c4c:	2300      	movs	r3, #0
   21c4e:	e7e1      	b.n	21c14 <flash_nrf_write+0x30>
	if (!len) {
   21c50:	2c00      	cmp	r4, #0
   21c52:	d0e7      	beq.n	21c24 <flash_nrf_write+0x40>
	return z_impl_k_sem_take(sem, timeout);
   21c54:	f04f 33ff 	mov.w	r3, #4294967295
   21c58:	f04f 32ff 	mov.w	r2, #4294967295
   21c5c:	4814      	ldr	r0, [pc, #80]	; (21cb0 <flash_nrf_write+0xcc>)
   21c5e:	f003 fba9 	bl	253b4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   21c62:	f00c ff97 	bl	2eb94 <nrf_flash_sync_is_required>
   21c66:	4603      	mov	r3, r0
	struct flash_context context = {
   21c68:	e9c7 6502 	strd	r6, r5, [r7, #8]
   21c6c:	f107 0008 	add.w	r0, r7, #8
   21c70:	613c      	str	r4, [r7, #16]
	if (nrf_flash_sync_is_required()) {
   21c72:	b183      	cbz	r3, 21c96 <flash_nrf_write+0xb2>
	struct flash_context context = {
   21c74:	2301      	movs	r3, #1
   21c76:	753b      	strb	r3, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   21c78:	4b0e      	ldr	r3, [pc, #56]	; (21cb4 <flash_nrf_write+0xd0>)
   21c7a:	e9c7 3000 	strd	r3, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   21c7e:	f641 504c 	movw	r0, #7500	; 0x1d4c
   21c82:	f001 fe99 	bl	239b8 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   21c86:	4638      	mov	r0, r7
   21c88:	f001 fe9c 	bl	239c4 <nrf_flash_sync_exe>
	return write_op(&context);
   21c8c:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   21c8e:	4808      	ldr	r0, [pc, #32]	; (21cb0 <flash_nrf_write+0xcc>)
   21c90:	f003 fb6a 	bl	25368 <z_impl_k_sem_give>
}
   21c94:	e7c6      	b.n	21c24 <flash_nrf_write+0x40>
	struct flash_context context = {
   21c96:	753b      	strb	r3, [r7, #20]
	return write_op(&context);
   21c98:	f7ff fee8 	bl	21a6c <write_op>
   21c9c:	e7f6      	b.n	21c8c <flash_nrf_write+0xa8>
   21c9e:	bf00      	nop
   21ca0:	00034997 	.word	0x00034997
   21ca4:	00034a0c 	.word	0x00034a0c
   21ca8:	0002fc8c 	.word	0x0002fc8c
   21cac:	000349db 	.word	0x000349db
   21cb0:	2000363c 	.word	0x2000363c
   21cb4:	00021a6d 	.word	0x00021a6d

00021cb8 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   21cb8:	b530      	push	{r4, r5, lr}
	return port->config;
   21cba:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   21cbc:	7b05      	ldrb	r5, [r0, #12]
   21cbe:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   21cc2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   21cc6:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   21cc8:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   21ccc:	d105      	bne.n	21cda <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   21cce:	4620      	mov	r0, r4
   21cd0:	f002 faa0 	bl	24214 <nrfx_gpiote_trigger_disable>

		return 0;
   21cd4:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   21cd6:	b005      	add	sp, #20
   21cd8:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   21cda:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   21cdc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   21ce0:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   21ce4:	d114      	bne.n	21d10 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   21ce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   21cea:	bf0c      	ite	eq
   21cec:	2304      	moveq	r3, #4
   21cee:	2305      	movne	r3, #5
   21cf0:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   21cf4:	2300      	movs	r3, #0
   21cf6:	4619      	mov	r1, r3
   21cf8:	aa02      	add	r2, sp, #8
   21cfa:	4620      	mov	r0, r4
   21cfc:	f002 f8c8 	bl	23e90 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   21d00:	4b1f      	ldr	r3, [pc, #124]	; (21d80 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   21d02:	4298      	cmp	r0, r3
   21d04:	d139      	bne.n	21d7a <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   21d06:	2101      	movs	r1, #1
   21d08:	4620      	mov	r0, r4
   21d0a:	f002 fa3b 	bl	24184 <nrfx_gpiote_trigger_enable>
	return 0;
   21d0e:	e7e1      	b.n	21cd4 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   21d10:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   21d14:	d026      	beq.n	21d64 <gpio_nrfx_pin_interrupt_configure+0xac>
   21d16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   21d1a:	bf14      	ite	ne
   21d1c:	2301      	movne	r3, #1
   21d1e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   21d20:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   21d24:	6883      	ldr	r3, [r0, #8]
   21d26:	40cb      	lsrs	r3, r1
   21d28:	07d9      	lsls	r1, r3, #31
   21d2a:	d4e3      	bmi.n	21cf4 <gpio_nrfx_pin_interrupt_configure+0x3c>
   21d2c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   21d30:	d1e0      	bne.n	21cf4 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   21d32:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   21d34:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   21d36:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   21d3a:	4a12      	ldr	r2, [pc, #72]	; (21d84 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   21d3c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   21d40:	bf18      	it	ne
   21d42:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   21d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   21d4a:	07db      	lsls	r3, r3, #31
   21d4c:	d4d2      	bmi.n	21cf4 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   21d4e:	f10d 0507 	add.w	r5, sp, #7
   21d52:	4629      	mov	r1, r5
   21d54:	4620      	mov	r0, r4
   21d56:	f002 f9c1 	bl	240dc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   21d5a:	4b0b      	ldr	r3, [pc, #44]	; (21d88 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   21d5c:	4298      	cmp	r0, r3
   21d5e:	d003      	beq.n	21d68 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   21d60:	9503      	str	r5, [sp, #12]
   21d62:	e7c7      	b.n	21cf4 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   21d64:	2303      	movs	r3, #3
   21d66:	e7db      	b.n	21d20 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   21d68:	4628      	mov	r0, r5
   21d6a:	f002 fa05 	bl	24178 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   21d6e:	4b04      	ldr	r3, [pc, #16]	; (21d80 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   21d70:	4298      	cmp	r0, r3
   21d72:	d0f5      	beq.n	21d60 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   21d74:	f06f 000b 	mvn.w	r0, #11
   21d78:	e7ad      	b.n	21cd6 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   21d7a:	f06f 0015 	mvn.w	r0, #21
   21d7e:	e7aa      	b.n	21cd6 <gpio_nrfx_pin_interrupt_configure+0x1e>
   21d80:	0bad0000 	.word	0x0bad0000
   21d84:	50000300 	.word	0x50000300
   21d88:	0bad0004 	.word	0x0bad0004

00021d8c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   21d8c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   21d8e:	f002 f9e3 	bl	24158 <nrfx_gpiote_is_init>
   21d92:	4604      	mov	r4, r0
   21d94:	b968      	cbnz	r0, 21db2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   21d96:	f002 f9b7 	bl	24108 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   21d9a:	4b08      	ldr	r3, [pc, #32]	; (21dbc <gpio_nrfx_init+0x30>)
   21d9c:	4298      	cmp	r0, r3
   21d9e:	d10a      	bne.n	21db6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   21da0:	4807      	ldr	r0, [pc, #28]	; (21dc0 <gpio_nrfx_init+0x34>)
   21da2:	4621      	mov	r1, r4
   21da4:	f002 f994 	bl	240d0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   21da8:	4622      	mov	r2, r4
   21daa:	2105      	movs	r1, #5
   21dac:	2006      	movs	r0, #6
   21dae:	f7f3 fb3d 	bl	1542c <z_arm_irq_priority_set>
		return 0;
   21db2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   21db4:	bd10      	pop	{r4, pc}
		return -EIO;
   21db6:	f06f 0004 	mvn.w	r0, #4
   21dba:	e7fb      	b.n	21db4 <gpio_nrfx_init+0x28>
   21dbc:	0bad0000 	.word	0x0bad0000
   21dc0:	00021dc5 	.word	0x00021dc5

00021dc4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   21dc4:	0942      	lsrs	r2, r0, #5
{
   21dc6:	b570      	push	{r4, r5, r6, lr}
   21dc8:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   21dca:	d002      	beq.n	21dd2 <nrfx_gpio_handler+0xe>
   21dcc:	2a01      	cmp	r2, #1
   21dce:	d017      	beq.n	21e00 <nrfx_gpio_handler+0x3c>
}
   21dd0:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   21dd2:	4e0d      	ldr	r6, [pc, #52]	; (21e08 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   21dd4:	6932      	ldr	r2, [r6, #16]
   21dd6:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   21dd8:	2900      	cmp	r1, #0
   21dda:	d0f9      	beq.n	21dd0 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   21ddc:	f003 031f 	and.w	r3, r3, #31
   21de0:	2501      	movs	r5, #1
   21de2:	680c      	ldr	r4, [r1, #0]
   21de4:	409d      	lsls	r5, r3
   21de6:	2900      	cmp	r1, #0
   21de8:	d0f2      	beq.n	21dd0 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   21dea:	688a      	ldr	r2, [r1, #8]
   21dec:	402a      	ands	r2, r5
   21dee:	d002      	beq.n	21df6 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   21df0:	684b      	ldr	r3, [r1, #4]
   21df2:	4630      	mov	r0, r6
   21df4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   21df6:	b12c      	cbz	r4, 21e04 <nrfx_gpio_handler+0x40>
   21df8:	6823      	ldr	r3, [r4, #0]
   21dfa:	4621      	mov	r1, r4
   21dfc:	461c      	mov	r4, r3
   21dfe:	e7f2      	b.n	21de6 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   21e00:	4e02      	ldr	r6, [pc, #8]	; (21e0c <nrfx_gpio_handler+0x48>)
   21e02:	e7e7      	b.n	21dd4 <nrfx_gpio_handler+0x10>
   21e04:	4623      	mov	r3, r4
   21e06:	e7f8      	b.n	21dfa <nrfx_gpio_handler+0x36>
   21e08:	0002f91c 	.word	0x0002f91c
   21e0c:	0002f904 	.word	0x0002f904

00021e10 <gpio_nrfx_pin_configure>:
{
   21e10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   21e14:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   21e16:	7b3b      	ldrb	r3, [r7, #12]
   21e18:	f001 051f 	and.w	r5, r1, #31
   21e1c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   21e20:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   21e22:	4628      	mov	r0, r5
   21e24:	f10d 0103 	add.w	r1, sp, #3
{
   21e28:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   21e2a:	f002 f957 	bl	240dc <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   21e2e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   21e32:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   21e34:	d10b      	bne.n	21e4e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   21e36:	4628      	mov	r0, r5
   21e38:	f002 fa14 	bl	24264 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   21e3c:	4b3d      	ldr	r3, [pc, #244]	; (21f34 <gpio_nrfx_pin_configure+0x124>)
   21e3e:	4598      	cmp	r8, r3
   21e40:	d103      	bne.n	21e4a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   21e42:	f89d 0003 	ldrb.w	r0, [sp, #3]
   21e46:	f002 f991 	bl	2416c <nrfx_gpiote_channel_free>
		return 0;
   21e4a:	2000      	movs	r0, #0
   21e4c:	e00c      	b.n	21e68 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   21e4e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   21e50:	4619      	mov	r1, r3
   21e52:	aa02      	add	r2, sp, #8
   21e54:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   21e56:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   21e5a:	f002 f819 	bl	23e90 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   21e5e:	4b35      	ldr	r3, [pc, #212]	; (21f34 <gpio_nrfx_pin_configure+0x124>)
   21e60:	4298      	cmp	r0, r3
   21e62:	d004      	beq.n	21e6e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   21e64:	f06f 0015 	mvn.w	r0, #21
}
   21e68:	b004      	add	sp, #16
   21e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   21e6e:	4580      	cmp	r8, r0
   21e70:	d103      	bne.n	21e7a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   21e72:	f89d 0003 	ldrb.w	r0, [sp, #3]
   21e76:	f002 f979 	bl	2416c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   21e7a:	03a3      	lsls	r3, r4, #14
   21e7c:	d54b      	bpl.n	21f16 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   21e7e:	f240 3306 	movw	r3, #774	; 0x306
   21e82:	4023      	ands	r3, r4
   21e84:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   21e88:	d019      	beq.n	21ebe <gpio_nrfx_pin_configure+0xae>
   21e8a:	d80c      	bhi.n	21ea6 <gpio_nrfx_pin_configure+0x96>
   21e8c:	2b06      	cmp	r3, #6
   21e8e:	d017      	beq.n	21ec0 <gpio_nrfx_pin_configure+0xb0>
   21e90:	d804      	bhi.n	21e9c <gpio_nrfx_pin_configure+0x8c>
   21e92:	b1ab      	cbz	r3, 21ec0 <gpio_nrfx_pin_configure+0xb0>
   21e94:	2b02      	cmp	r3, #2
   21e96:	d1e5      	bne.n	21e64 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   21e98:	2304      	movs	r3, #4
   21e9a:	e011      	b.n	21ec0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   21e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   21ea0:	d1e0      	bne.n	21e64 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   21ea2:	2301      	movs	r3, #1
   21ea4:	e00c      	b.n	21ec0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   21ea6:	f240 2202 	movw	r2, #514	; 0x202
   21eaa:	4293      	cmp	r3, r2
   21eac:	d027      	beq.n	21efe <gpio_nrfx_pin_configure+0xee>
   21eae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   21eb2:	d026      	beq.n	21f02 <gpio_nrfx_pin_configure+0xf2>
   21eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   21eb8:	d1d4      	bne.n	21e64 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   21eba:	2302      	movs	r3, #2
   21ebc:	e000      	b.n	21ec0 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   21ebe:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   21ec0:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   21ec4:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   21ec8:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   21ecc:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   21ece:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   21ed2:	bf54      	ite	pl
   21ed4:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   21ed8:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   21eda:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   21edc:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   21ee0:	d511      	bpl.n	21f06 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   21ee2:	687a      	ldr	r2, [r7, #4]
   21ee4:	2301      	movs	r3, #1
   21ee6:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   21ee8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   21eec:	2200      	movs	r2, #0
   21eee:	a901      	add	r1, sp, #4
   21ef0:	4628      	mov	r0, r5
   21ef2:	f002 f87b 	bl	23fec <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   21ef6:	4b0f      	ldr	r3, [pc, #60]	; (21f34 <gpio_nrfx_pin_configure+0x124>)
   21ef8:	4298      	cmp	r0, r3
   21efa:	d0a6      	beq.n	21e4a <gpio_nrfx_pin_configure+0x3a>
   21efc:	e7b2      	b.n	21e64 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   21efe:	2305      	movs	r3, #5
   21f00:	e7de      	b.n	21ec0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   21f02:	2303      	movs	r3, #3
   21f04:	e7dc      	b.n	21ec0 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   21f06:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   21f08:	bf41      	itttt	mi
   21f0a:	2301      	movmi	r3, #1
   21f0c:	687a      	ldrmi	r2, [r7, #4]
   21f0e:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   21f10:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   21f14:	e7ea      	b.n	21eec <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   21f16:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   21f18:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   21f1c:	bf54      	ite	pl
   21f1e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   21f22:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   21f24:	461a      	mov	r2, r3
   21f26:	a901      	add	r1, sp, #4
   21f28:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   21f2a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   21f2e:	f001 ffaf 	bl	23e90 <nrfx_gpiote_input_configure>
   21f32:	e7e0      	b.n	21ef6 <gpio_nrfx_pin_configure+0xe6>
   21f34:	0bad0000 	.word	0x0bad0000

00021f38 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   21f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
   21f3c:	4e5a      	ldr	r6, [pc, #360]	; (220a8 <pinctrl_configure_pins+0x170>)
   21f3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21f42:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   21f44:	4281      	cmp	r1, r0
   21f46:	d102      	bne.n	21f4e <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   21f48:	2000      	movs	r0, #0
}
   21f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   21f4e:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   21f50:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   21f54:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
   21f58:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   21f5a:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   21f5e:	bf08      	it	eq
   21f60:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   21f64:	2c22      	cmp	r4, #34	; 0x22
   21f66:	f200 809b 	bhi.w	220a0 <pinctrl_configure_pins+0x168>
   21f6a:	e8df f004 	tbb	[pc, r4]
   21f6e:	2412      	.short	0x2412
   21f70:	402c4429 	.word	0x402c4429
   21f74:	99999944 	.word	0x99999944
   21f78:	99704799 	.word	0x99704799
   21f7c:	99999999 	.word	0x99999999
   21f80:	99999999 	.word	0x99999999
   21f84:	817e7b73 	.word	0x817e7b73
   21f88:	84999999 	.word	0x84999999
   21f8c:	93908d8a 	.word	0x93908d8a
   21f90:	96          	.byte	0x96
   21f91:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   21f92:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   21f96:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
   21f9a:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   21f9e:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
   21fa2:	bf14      	ite	ne
   21fa4:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
   21fa8:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21faa:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
   21fae:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
   21fb2:	2401      	movs	r4, #1
   21fb4:	e002      	b.n	21fbc <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
   21fb6:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   21fba:	2400      	movs	r4, #0
   21fbc:	46a6      	mov	lr, r4
   21fbe:	e024      	b.n	2200a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
   21fc0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   21fc4:	e7e7      	b.n	21f96 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   21fc6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   21fca:	2400      	movs	r4, #0
    return pin_number >> 5;
   21fcc:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
   21fd0:	f1be 0f01 	cmp.w	lr, #1
   21fd4:	bf14      	ite	ne
   21fd6:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
   21fda:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
   21fdc:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21fe0:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   21fe4:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
   21fe8:	f04f 0e01 	mov.w	lr, #1
   21fec:	e00d      	b.n	2200a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   21fee:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   21ff2:	2401      	movs	r4, #1
   21ff4:	e7ea      	b.n	21fcc <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   21ff6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   21ffa:	e7de      	b.n	21fba <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   21ffc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   22000:	2d00      	cmp	r5, #0
   22002:	d1da      	bne.n	21fba <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   22004:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   22006:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
   22008:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2200a:	f850 cb04 	ldr.w	ip, [r0], #4
   2200e:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   22012:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   22016:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   2201a:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
   2201e:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   22022:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   22026:	bf1c      	itt	ne
   22028:	2401      	movne	r4, #1
   2202a:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2202e:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
   22032:	2b01      	cmp	r3, #1
   22034:	bf0c      	ite	eq
   22036:	4633      	moveq	r3, r6
   22038:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2203c:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
   22040:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   22044:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   22048:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2204c:	e77a      	b.n	21f44 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2204e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   22052:	e7d5      	b.n	22000 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   22054:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   22058:	6804      	ldr	r4, [r0, #0]
   2205a:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
   2205e:	2c00      	cmp	r4, #0
   22060:	d0c7      	beq.n	21ff2 <pinctrl_configure_pins+0xba>
   22062:	e798      	b.n	21f96 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   22064:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   22068:	e7f6      	b.n	22058 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   2206a:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   2206e:	e7f3      	b.n	22058 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   22070:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   22074:	e7f0      	b.n	22058 <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   22076:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2207a:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2207c:	f04f 0e00 	mov.w	lr, #0
   22080:	e7c3      	b.n	2200a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   22082:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   22086:	e786      	b.n	21f96 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   22088:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
   2208c:	e7f5      	b.n	2207a <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   2208e:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
   22092:	e7f2      	b.n	2207a <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   22094:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
   22098:	e7ef      	b.n	2207a <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   2209a:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
   2209e:	e7ec      	b.n	2207a <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
   220a0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   220a4:	e751      	b.n	21f4a <pinctrl_configure_pins+0x12>
   220a6:	bf00      	nop
   220a8:	50000300 	.word	0x50000300

000220ac <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   220ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   220ae:	794b      	ldrb	r3, [r1, #5]
   220b0:	2b01      	cmp	r3, #1
   220b2:	d026      	beq.n	22102 <uarte_nrfx_configure+0x56>
   220b4:	2b03      	cmp	r3, #3
   220b6:	d121      	bne.n	220fc <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   220b8:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   220ba:	798b      	ldrb	r3, [r1, #6]
   220bc:	2b03      	cmp	r3, #3
   220be:	d11d      	bne.n	220fc <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   220c0:	79ce      	ldrb	r6, [r1, #7]
   220c2:	b10e      	cbz	r6, 220c8 <uarte_nrfx_configure+0x1c>
   220c4:	2e01      	cmp	r6, #1
   220c6:	d119      	bne.n	220fc <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   220c8:	790a      	ldrb	r2, [r1, #4]
   220ca:	b112      	cbz	r2, 220d2 <uarte_nrfx_configure+0x26>
   220cc:	2a02      	cmp	r2, #2
   220ce:	d115      	bne.n	220fc <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   220d0:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   220d2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   220d4:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   220d6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   220da:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   220dc:	d067      	beq.n	221ae <uarte_nrfx_configure+0x102>
   220de:	d82d      	bhi.n	2213c <uarte_nrfx_configure+0x90>
   220e0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   220e4:	d066      	beq.n	221b4 <uarte_nrfx_configure+0x108>
   220e6:	d816      	bhi.n	22116 <uarte_nrfx_configure+0x6a>
   220e8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   220ec:	d064      	beq.n	221b8 <uarte_nrfx_configure+0x10c>
   220ee:	d80a      	bhi.n	22106 <uarte_nrfx_configure+0x5a>
   220f0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   220f4:	d063      	beq.n	221be <uarte_nrfx_configure+0x112>
   220f6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   220fa:	d063      	beq.n	221c4 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   220fc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22100:	e054      	b.n	221ac <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   22102:	2500      	movs	r5, #0
   22104:	e7d9      	b.n	220ba <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   22106:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2210a:	d05e      	beq.n	221ca <uarte_nrfx_configure+0x11e>
   2210c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   22110:	d1f4      	bne.n	220fc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   22112:	4b38      	ldr	r3, [pc, #224]	; (221f4 <uarte_nrfx_configure+0x148>)
   22114:	e03c      	b.n	22190 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   22116:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2211a:	d059      	beq.n	221d0 <uarte_nrfx_configure+0x124>
   2211c:	d807      	bhi.n	2212e <uarte_nrfx_configure+0x82>
   2211e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   22122:	d057      	beq.n	221d4 <uarte_nrfx_configure+0x128>
   22124:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   22128:	d1e8      	bne.n	220fc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   2212a:	4b33      	ldr	r3, [pc, #204]	; (221f8 <uarte_nrfx_configure+0x14c>)
   2212c:	e030      	b.n	22190 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2212e:	f647 2412 	movw	r4, #31250	; 0x7a12
   22132:	42a3      	cmp	r3, r4
   22134:	d1e2      	bne.n	220fc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   22136:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   2213a:	e029      	b.n	22190 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2213c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   22140:	d04a      	beq.n	221d8 <uarte_nrfx_configure+0x12c>
   22142:	d813      	bhi.n	2216c <uarte_nrfx_configure+0xc0>
   22144:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   22148:	d049      	beq.n	221de <uarte_nrfx_configure+0x132>
   2214a:	d809      	bhi.n	22160 <uarte_nrfx_configure+0xb4>
   2214c:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   22150:	42a3      	cmp	r3, r4
   22152:	d046      	beq.n	221e2 <uarte_nrfx_configure+0x136>
   22154:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   22158:	d1d0      	bne.n	220fc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   2215a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   2215e:	e017      	b.n	22190 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   22160:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   22164:	d1ca      	bne.n	220fc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   22166:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2216a:	e011      	b.n	22190 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2216c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   22170:	d03a      	beq.n	221e8 <uarte_nrfx_configure+0x13c>
   22172:	d808      	bhi.n	22186 <uarte_nrfx_configure+0xda>
   22174:	4c21      	ldr	r4, [pc, #132]	; (221fc <uarte_nrfx_configure+0x150>)
   22176:	42a3      	cmp	r3, r4
   22178:	d039      	beq.n	221ee <uarte_nrfx_configure+0x142>
   2217a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   2217e:	d1bd      	bne.n	220fc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   22180:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   22184:	e004      	b.n	22190 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   22186:	4c1e      	ldr	r4, [pc, #120]	; (22200 <uarte_nrfx_configure+0x154>)
   22188:	42a3      	cmp	r3, r4
   2218a:	d1b7      	bne.n	220fc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2218c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   22190:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   22192:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   22196:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   22198:	4335      	orrs	r5, r6
   2219a:	681b      	ldr	r3, [r3, #0]
   2219c:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2219e:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   221a2:	c903      	ldmia	r1, {r0, r1}
   221a4:	1d23      	adds	r3, r4, #4
   221a6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   221aa:	2000      	movs	r0, #0
}
   221ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   221ae:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   221b2:	e7ed      	b.n	22190 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   221b4:	4b13      	ldr	r3, [pc, #76]	; (22204 <uarte_nrfx_configure+0x158>)
   221b6:	e7eb      	b.n	22190 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   221b8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   221bc:	e7e8      	b.n	22190 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   221be:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   221c2:	e7e5      	b.n	22190 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   221c4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   221c8:	e7e2      	b.n	22190 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   221ca:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   221ce:	e7df      	b.n	22190 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   221d0:	4b0d      	ldr	r3, [pc, #52]	; (22208 <uarte_nrfx_configure+0x15c>)
   221d2:	e7dd      	b.n	22190 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   221d4:	4b0d      	ldr	r3, [pc, #52]	; (2220c <uarte_nrfx_configure+0x160>)
   221d6:	e7db      	b.n	22190 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   221d8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   221dc:	e7d8      	b.n	22190 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   221de:	4b0c      	ldr	r3, [pc, #48]	; (22210 <uarte_nrfx_configure+0x164>)
   221e0:	e7d6      	b.n	22190 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   221e2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   221e6:	e7d3      	b.n	22190 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   221e8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   221ec:	e7d0      	b.n	22190 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   221ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   221f2:	e7cd      	b.n	22190 <uarte_nrfx_configure+0xe4>
   221f4:	0013b000 	.word	0x0013b000
   221f8:	004ea000 	.word	0x004ea000
   221fc:	0003d090 	.word	0x0003d090
   22200:	000f4240 	.word	0x000f4240
   22204:	00275000 	.word	0x00275000
   22208:	0075c000 	.word	0x0075c000
   2220c:	003af000 	.word	0x003af000
   22210:	013a9000 	.word	0x013a9000

00022214 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   22214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22218:	b082      	sub	sp, #8
   2221a:	4681      	mov	r9, r0
   2221c:	2200      	movs	r2, #0
   2221e:	2101      	movs	r1, #1
   22220:	2002      	movs	r0, #2
   22222:	af00      	add	r7, sp, #0
   22224:	f7f3 f902 	bl	1542c <z_arm_irq_priority_set>
   22228:	2002      	movs	r0, #2
   2222a:	f7f3 f8cf 	bl	153cc <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   2222e:	f8d9 8004 	ldr.w	r8, [r9, #4]
	struct uarte_nrfx_data *data = dev->data;
   22232:	f8d9 6010 	ldr.w	r6, [r9, #16]
	return config->uarte_regs;
   22236:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2223a:	2100      	movs	r1, #0
   2223c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   22240:	f8c6 9000 	str.w	r9, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   22244:	f8d8 a00c 	ldr.w	sl, [r8, #12]
	ret = pinctrl_lookup_state(config, id, &state);
   22248:	1d3a      	adds	r2, r7, #4
   2224a:	4650      	mov	r0, sl
   2224c:	f00c fb37 	bl	2e8be <pinctrl_lookup_state>
	if (ret < 0) {
   22250:	1e05      	subs	r5, r0, #0
   22252:	db2c      	blt.n	222ae <uarte_0_init+0x9a>
	return pinctrl_apply_state_direct(config, state);
   22254:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   22256:	f8da 2000 	ldr.w	r2, [sl]
   2225a:	7919      	ldrb	r1, [r3, #4]
   2225c:	6818      	ldr	r0, [r3, #0]
   2225e:	f7ff fe6b 	bl	21f38 <pinctrl_configure_pins>
	if (err < 0) {
   22262:	1e05      	subs	r5, r0, #0
   22264:	db23      	blt.n	222ae <uarte_0_init+0x9a>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   22266:	1d31      	adds	r1, r6, #4
   22268:	4648      	mov	r0, r9
   2226a:	f7ff ff1f 	bl	220ac <uarte_nrfx_configure>
	if (err) {
   2226e:	4605      	mov	r5, r0
   22270:	b9e8      	cbnz	r0, 222ae <uarte_0_init+0x9a>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   22272:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   22276:	0799      	lsls	r1, r3, #30
   22278:	d532      	bpl.n	222e0 <uarte_0_init+0xcc>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   2227a:	f106 0018 	add.w	r0, r6, #24
   2227e:	f002 f92d 	bl	244dc <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   22282:	4b2d      	ldr	r3, [pc, #180]	; (22338 <uarte_0_init+0x124>)
   22284:	4298      	cmp	r0, r3
   22286:	d017      	beq.n	222b8 <uarte_0_init+0xa4>
		LOG_ERR("Failed to allocate PPI Channel");
   22288:	466c      	mov	r4, sp
   2228a:	b088      	sub	sp, #32
   2228c:	466a      	mov	r2, sp
   2228e:	4b2b      	ldr	r3, [pc, #172]	; (2233c <uarte_0_init+0x128>)
   22290:	6153      	str	r3, [r2, #20]
   22292:	4b2b      	ldr	r3, [pc, #172]	; (22340 <uarte_0_init+0x12c>)
   22294:	6193      	str	r3, [r2, #24]
   22296:	2303      	movs	r3, #3
   22298:	f842 3f10 	str.w	r3, [r2, #16]!
   2229c:	4829      	ldr	r0, [pc, #164]	; (22344 <uarte_0_init+0x130>)
   2229e:	462b      	mov	r3, r5
   222a0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   222a4:	f7f1 fec4 	bl	14030 <z_impl_z_log_msg_static_create>
		return -EIO;
   222a8:	f06f 0504 	mvn.w	r5, #4
   222ac:	46a5      	mov	sp, r4
UART_NRF_UARTE_DEVICE(0);
   222ae:	4628      	mov	r0, r5
   222b0:	3708      	adds	r7, #8
   222b2:	46bd      	mov	sp, r7
   222b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   222b8:	7e33      	ldrb	r3, [r6, #24]
   222ba:	00db      	lsls	r3, r3, #3
   222bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   222c0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   222c4:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   222c8:	f504 7190 	add.w	r1, r4, #288	; 0x120
   222cc:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   222d0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   222d4:	7e32      	ldrb	r2, [r6, #24]
   222d6:	2301      	movs	r3, #1
   222d8:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   222da:	4a1b      	ldr	r2, [pc, #108]	; (22348 <uarte_0_init+0x134>)
   222dc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   222e0:	2308      	movs	r3, #8
   222e2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   222e6:	f898 3008 	ldrb.w	r3, [r8, #8]
   222ea:	b953      	cbnz	r3, 22302 <uarte_0_init+0xee>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   222ec:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   222f0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   222f4:	6973      	ldr	r3, [r6, #20]
   222f6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   222fa:	2301      	movs	r3, #1
   222fc:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22300:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   22302:	f8d8 3004 	ldr.w	r3, [r8, #4]
   22306:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   22308:	bf5c      	itt	pl
   2230a:	f44f 7380 	movpl.w	r3, #256	; 0x100
   2230e:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   22312:	f8d8 3004 	ldr.w	r3, [r8, #4]
   22316:	06db      	lsls	r3, r3, #27
   22318:	bf44      	itt	mi
   2231a:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   2231e:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22322:	6933      	ldr	r3, [r6, #16]
   22324:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22328:	2300      	movs	r3, #0
   2232a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2232e:	2301      	movs	r3, #1
   22330:	60a3      	str	r3, [r4, #8]
   22332:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   22334:	e7bb      	b.n	222ae <uarte_0_init+0x9a>
   22336:	bf00      	nop
   22338:	0bad0000 	.word	0x0bad0000
   2233c:	00034a6c 	.word	0x00034a6c
   22340:	00034a8f 	.word	0x00034a8f
   22344:	0002fd0c 	.word	0x0002fd0c
   22348:	4001f000 	.word	0x4001f000

0002234c <uarte_nrfx_poll_out>:
{
   2234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2234e:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   22350:	6907      	ldr	r7, [r0, #16]
{
   22352:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   22354:	f00c fd83 	bl	2ee5e <k_is_in_isr>
   22358:	b9b0      	cbnz	r0, 22388 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   2235a:	4b2e      	ldr	r3, [pc, #184]	; (22414 <uarte_nrfx_poll_out+0xc8>)
   2235c:	781b      	ldrb	r3, [r3, #0]
   2235e:	b19b      	cbz	r3, 22388 <uarte_nrfx_poll_out+0x3c>
{
   22360:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   22362:	6860      	ldr	r0, [r4, #4]
   22364:	f00c fae1 	bl	2e92a <is_tx_ready.isra.0>
   22368:	bb00      	cbnz	r0, 223ac <uarte_nrfx_poll_out+0x60>
   2236a:	2001      	movs	r0, #1
   2236c:	f00c fc21 	bl	2ebb2 <nrfx_busy_wait>
   22370:	3e01      	subs	r6, #1
   22372:	d1f6      	bne.n	22362 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   22374:	2100      	movs	r1, #0
   22376:	2021      	movs	r0, #33	; 0x21
   22378:	f003 fcf8 	bl	25d6c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2237c:	e7f0      	b.n	22360 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   2237e:	f386 8811 	msr	BASEPRI, r6
   22382:	f3bf 8f6f 	isb	sy
}
   22386:	e7f5      	b.n	22374 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   22388:	f04f 0340 	mov.w	r3, #64	; 0x40
   2238c:	f3ef 8611 	mrs	r6, BASEPRI
   22390:	f383 8812 	msr	BASEPRI_MAX, r3
   22394:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   22398:	6860      	ldr	r0, [r4, #4]
   2239a:	4631      	mov	r1, r6
   2239c:	f00c fac5 	bl	2e92a <is_tx_ready.isra.0>
   223a0:	b990      	cbnz	r0, 223c8 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   223a2:	f386 8811 	msr	BASEPRI, r6
   223a6:	f3bf 8f6f 	isb	sy
}
   223aa:	e7ed      	b.n	22388 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   223ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   223b0:	f3ef 8611 	mrs	r6, BASEPRI
   223b4:	f383 8812 	msr	BASEPRI_MAX, r3
   223b8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   223bc:	6860      	ldr	r0, [r4, #4]
   223be:	4631      	mov	r1, r6
   223c0:	f00c fab3 	bl	2e92a <is_tx_ready.isra.0>
   223c4:	2800      	cmp	r0, #0
   223c6:	d0da      	beq.n	2237e <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   223c8:	693b      	ldr	r3, [r7, #16]
   223ca:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   223cc:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   223ce:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   223d0:	6813      	ldr	r3, [r2, #0]
   223d2:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   223d6:	2001      	movs	r0, #1
   223d8:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   223dc:	2000      	movs	r0, #0
   223de:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   223e2:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   223e6:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   223ea:	6852      	ldr	r2, [r2, #4]
   223ec:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   223f0:	06d2      	lsls	r2, r2, #27
   223f2:	d508      	bpl.n	22406 <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
   223f4:	6862      	ldr	r2, [r4, #4]
   223f6:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   223f8:	2008      	movs	r0, #8
   223fa:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   223fe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   22402:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22406:	2201      	movs	r2, #1
   22408:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   2240a:	f381 8811 	msr	BASEPRI, r1
   2240e:	f3bf 8f6f 	isb	sy
}
   22412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22414:	2000498d 	.word	0x2000498d

00022418 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   22418:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   2241a:	2301      	movs	r3, #1
   2241c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2241e:	4a0e      	ldr	r2, [pc, #56]	; (22458 <compare_int_lock+0x40>)
   22420:	f3bf 8f5b 	dmb	ish
   22424:	43dc      	mvns	r4, r3
   22426:	e852 1f00 	ldrex	r1, [r2]
   2242a:	ea01 0504 	and.w	r5, r1, r4
   2242e:	e842 5600 	strex	r6, r5, [r2]
   22432:	2e00      	cmp	r6, #0
   22434:	d1f7      	bne.n	22426 <compare_int_lock+0xe>
   22436:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2243a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2243e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   22440:	4806      	ldr	r0, [pc, #24]	; (2245c <compare_int_lock+0x44>)
   22442:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   22446:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2244a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   2244e:	420b      	tst	r3, r1
}
   22450:	bf14      	ite	ne
   22452:	2001      	movne	r0, #1
   22454:	2000      	moveq	r0, #0
   22456:	bd70      	pop	{r4, r5, r6, pc}
   22458:	20003670 	.word	0x20003670
   2245c:	40011000 	.word	0x40011000

00022460 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   22460:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   22462:	490e      	ldr	r1, [pc, #56]	; (2249c <sys_clock_timeout_handler+0x3c>)
   22464:	e9d1 3400 	ldrd	r3, r4, [r1]
   22468:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   2246a:	18c3      	adds	r3, r0, r3
   2246c:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   22470:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   22474:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   22478:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   2247c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   22480:	d209      	bcs.n	22496 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   22482:	4b07      	ldr	r3, [pc, #28]	; (224a0 <sys_clock_timeout_handler+0x40>)
   22484:	681b      	ldr	r3, [r3, #0]
   22486:	0a1a      	lsrs	r2, r3, #8
   22488:	061b      	lsls	r3, r3, #24
   2248a:	199c      	adds	r4, r3, r6
   2248c:	4b05      	ldr	r3, [pc, #20]	; (224a4 <sys_clock_timeout_handler+0x44>)
   2248e:	f142 0500 	adc.w	r5, r2, #0
   22492:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   22496:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   22498:	f003 bdd0 	b.w	2603c <sys_clock_announce>
   2249c:	200023e0 	.word	0x200023e0
   224a0:	20003674 	.word	0x20003674
   224a4:	200023e8 	.word	0x200023e8

000224a8 <compare_int_unlock>:
	if (key) {
   224a8:	b311      	cbz	r1, 224f0 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   224aa:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   224ae:	2301      	movs	r3, #1
   224b0:	4a10      	ldr	r2, [pc, #64]	; (224f4 <compare_int_unlock+0x4c>)
   224b2:	4083      	lsls	r3, r0
   224b4:	e852 cf00 	ldrex	ip, [r2]
   224b8:	ea4c 0c03 	orr.w	ip, ip, r3
   224bc:	e842 c100 	strex	r1, ip, [r2]
   224c0:	2900      	cmp	r1, #0
   224c2:	d1f7      	bne.n	224b4 <compare_int_unlock+0xc>
   224c4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   224c8:	4a0b      	ldr	r2, [pc, #44]	; (224f8 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   224ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   224ce:	4083      	lsls	r3, r0
   224d0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   224d4:	4b09      	ldr	r3, [pc, #36]	; (224fc <compare_int_unlock+0x54>)
   224d6:	f3bf 8f5b 	dmb	ish
   224da:	681b      	ldr	r3, [r3, #0]
   224dc:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   224e0:	40c3      	lsrs	r3, r0
   224e2:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   224e4:	bf42      	ittt	mi
   224e6:	4b06      	ldrmi	r3, [pc, #24]	; (22500 <compare_int_unlock+0x58>)
   224e8:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   224ec:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   224f0:	4770      	bx	lr
   224f2:	bf00      	nop
   224f4:	20003670 	.word	0x20003670
   224f8:	40011000 	.word	0x40011000
   224fc:	2000366c 	.word	0x2000366c
   22500:	e000e100 	.word	0xe000e100

00022504 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   22504:	4b0d      	ldr	r3, [pc, #52]	; (2253c <z_nrf_rtc_timer_read+0x38>)
   22506:	6818      	ldr	r0, [r3, #0]
   22508:	0a01      	lsrs	r1, r0, #8
   2250a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   2250c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   22510:	4b0b      	ldr	r3, [pc, #44]	; (22540 <z_nrf_rtc_timer_read+0x3c>)
   22512:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   22516:	1818      	adds	r0, r3, r0
   22518:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   2251c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22520:	d20a      	bcs.n	22538 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   22522:	4b08      	ldr	r3, [pc, #32]	; (22544 <z_nrf_rtc_timer_read+0x40>)
   22524:	e9d3 2300 	ldrd	r2, r3, [r3]
   22528:	4290      	cmp	r0, r2
   2252a:	eb71 0303 	sbcs.w	r3, r1, r3
   2252e:	d203      	bcs.n	22538 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   22530:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   22534:	f141 0100 	adc.w	r1, r1, #0
}
   22538:	4770      	bx	lr
   2253a:	bf00      	nop
   2253c:	20003674 	.word	0x20003674
   22540:	40011000 	.word	0x40011000
   22544:	200023e8 	.word	0x200023e8

00022548 <compare_set>:
{
   22548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2254c:	4616      	mov	r6, r2
   2254e:	461f      	mov	r7, r3
   22550:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   22552:	f7ff ff61 	bl	22418 <compare_int_lock>
   22556:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   22558:	f7ff ffd4 	bl	22504 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2255c:	42b0      	cmp	r0, r6
   2255e:	eb71 0307 	sbcs.w	r3, r1, r7
   22562:	d251      	bcs.n	22608 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   22564:	4b3a      	ldr	r3, [pc, #232]	; (22650 <compare_set+0x108>)
   22566:	1a30      	subs	r0, r6, r0
   22568:	eb67 0101 	sbc.w	r1, r7, r1
   2256c:	4298      	cmp	r0, r3
   2256e:	f171 0100 	sbcs.w	r1, r1, #0
   22572:	d26a      	bcs.n	2264a <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   22574:	4b37      	ldr	r3, [pc, #220]	; (22654 <compare_set+0x10c>)
   22576:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   2257a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   2257e:	429f      	cmp	r7, r3
   22580:	bf08      	it	eq
   22582:	4296      	cmpeq	r6, r2
   22584:	d04e      	beq.n	22624 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   22586:	4934      	ldr	r1, [pc, #208]	; (22658 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22588:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2258c:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22590:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   22594:	00ad      	lsls	r5, r5, #2
   22596:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   2259a:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2259c:	b2ad      	uxth	r5, r5
   2259e:	f00c fa0e 	bl	2e9be <event_clear>
	return absolute_time & COUNTER_MAX;
   225a2:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   225a6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   225aa:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   225ae:	4a2b      	ldr	r2, [pc, #172]	; (2265c <compare_set+0x114>)
   225b0:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   225b2:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   225b6:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   225b8:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   225bc:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   225be:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   225c2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   225c6:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   225ca:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   225ce:	f06f 0002 	mvn.w	r0, #2
   225d2:	eba0 0008 	sub.w	r0, r0, r8
   225d6:	4460      	add	r0, ip
   225d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   225dc:	4290      	cmp	r0, r2
   225de:	d921      	bls.n	22624 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   225e0:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   225e2:	b160      	cbz	r0, 225fe <compare_set+0xb6>
     return p_reg->COUNTER;
   225e4:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   225e8:	eba8 000b 	sub.w	r0, r8, fp
   225ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   225f0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   225f4:	d916      	bls.n	22624 <compare_set+0xdc>
					event_clear(chan);
   225f6:	4620      	mov	r0, r4
   225f8:	f00c f9e1 	bl	2e9be <event_clear>
   225fc:	4a17      	ldr	r2, [pc, #92]	; (2265c <compare_set+0x114>)
			cc_val = now + cc_inc;
   225fe:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   22602:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   22606:	e7d9      	b.n	225bc <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   22608:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2260a:	4a15      	ldr	r2, [pc, #84]	; (22660 <compare_set+0x118>)
   2260c:	f3bf 8f5b 	dmb	ish
   22610:	40a3      	lsls	r3, r4
   22612:	e852 0f00 	ldrex	r0, [r2]
   22616:	4318      	orrs	r0, r3
   22618:	e842 0100 	strex	r1, r0, [r2]
   2261c:	2900      	cmp	r1, #0
   2261e:	d1f8      	bne.n	22612 <compare_set+0xca>
   22620:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   22624:	490b      	ldr	r1, [pc, #44]	; (22654 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   22626:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   22628:	0123      	lsls	r3, r4, #4
   2262a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   2262e:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   22632:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   22634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22636:	6053      	str	r3, [r2, #4]
	return ret;
   22638:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   2263a:	4620      	mov	r0, r4
   2263c:	9900      	ldr	r1, [sp, #0]
   2263e:	f7ff ff33 	bl	224a8 <compare_int_unlock>
}
   22642:	4628      	mov	r0, r5
   22644:	b003      	add	sp, #12
   22646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   2264a:	f06f 0515 	mvn.w	r5, #21
   2264e:	e7f4      	b.n	2263a <compare_set+0xf2>
   22650:	00800001 	.word	0x00800001
   22654:	200023d0 	.word	0x200023d0
   22658:	40011000 	.word	0x40011000
   2265c:	007ffffd 	.word	0x007ffffd
   22660:	2000366c 	.word	0x2000366c

00022664 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   22664:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   22666:	4c1b      	ldr	r4, [pc, #108]	; (226d4 <sys_clock_driver_init+0x70>)
   22668:	4b1b      	ldr	r3, [pc, #108]	; (226d8 <sys_clock_driver_init+0x74>)
   2266a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   2266e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   22672:	4b1a      	ldr	r3, [pc, #104]	; (226dc <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
   22674:	2500      	movs	r5, #0
   22676:	f04f 30ff 	mov.w	r0, #4294967295
   2267a:	f04f 31ff 	mov.w	r1, #4294967295
   2267e:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   22682:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   22686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2268a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2268e:	4b14      	ldr	r3, [pc, #80]	; (226e0 <sys_clock_driver_init+0x7c>)
   22690:	2602      	movs	r6, #2
   22692:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   22696:	2101      	movs	r1, #1
   22698:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   2269c:	2011      	movs	r0, #17
   2269e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   226a2:	462a      	mov	r2, r5
   226a4:	f7f2 fec2 	bl	1542c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   226a8:	2011      	movs	r0, #17
   226aa:	f7f2 fe8f 	bl	153cc <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   226ae:	4a0d      	ldr	r2, [pc, #52]	; (226e4 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   226b0:	2301      	movs	r3, #1
   226b2:	60a3      	str	r3, [r4, #8]
   226b4:	6023      	str	r3, [r4, #0]
   226b6:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   226b8:	4b0b      	ldr	r3, [pc, #44]	; (226e8 <sys_clock_driver_init+0x84>)
   226ba:	4a0c      	ldr	r2, [pc, #48]	; (226ec <sys_clock_driver_init+0x88>)
   226bc:	9300      	str	r3, [sp, #0]
   226be:	9501      	str	r5, [sp, #4]
   226c0:	2300      	movs	r3, #0
   226c2:	4628      	mov	r0, r5
   226c4:	f7ff ff40 	bl	22548 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   226c8:	4630      	mov	r0, r6
   226ca:	f7fe fb15 	bl	20cf8 <z_nrf_clock_control_lf_on>

	return 0;
}
   226ce:	4628      	mov	r0, r5
   226d0:	b002      	add	sp, #8
   226d2:	bd70      	pop	{r4, r5, r6, pc}
   226d4:	40011000 	.word	0x40011000
   226d8:	000f0003 	.word	0x000f0003
   226dc:	200023d0 	.word	0x200023d0
   226e0:	e000e100 	.word	0xe000e100
   226e4:	20003670 	.word	0x20003670
   226e8:	00022461 	.word	0x00022461
   226ec:	007fffff 	.word	0x007fffff

000226f0 <rtc_nrf_isr>:
{
   226f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   226f4:	4c2b      	ldr	r4, [pc, #172]	; (227a4 <rtc_nrf_isr+0xb4>)
   226f6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   226fa:	0799      	lsls	r1, r3, #30
   226fc:	d50b      	bpl.n	22716 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   226fe:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   22702:	b143      	cbz	r3, 22716 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   22704:	4a28      	ldr	r2, [pc, #160]	; (227a8 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22706:	2300      	movs	r3, #0
   22708:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   2270c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   22710:	6813      	ldr	r3, [r2, #0]
   22712:	3301      	adds	r3, #1
   22714:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   22716:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   2271a:	03da      	lsls	r2, r3, #15
   2271c:	d523      	bpl.n	22766 <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2271e:	f3bf 8f5b 	dmb	ish
   22722:	4b22      	ldr	r3, [pc, #136]	; (227ac <rtc_nrf_isr+0xbc>)
   22724:	e853 2f00 	ldrex	r2, [r3]
   22728:	f022 0101 	bic.w	r1, r2, #1
   2272c:	e843 1000 	strex	r0, r1, [r3]
   22730:	2800      	cmp	r0, #0
   22732:	d1f7      	bne.n	22724 <rtc_nrf_isr+0x34>
   22734:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   22738:	07d3      	lsls	r3, r2, #31
   2273a:	d402      	bmi.n	22742 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2273c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   22740:	b18b      	cbz	r3, 22766 <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22742:	2500      	movs	r5, #0
   22744:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   22748:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   2274c:	f7ff feda 	bl	22504 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   22750:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   22754:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   22756:	4b16      	ldr	r3, [pc, #88]	; (227b0 <rtc_nrf_isr+0xc0>)
   22758:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   2275c:	42b0      	cmp	r0, r6
   2275e:	41b9      	sbcs	r1, r7
   22760:	d204      	bcs.n	2276c <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   22762:	f382 8810 	msr	PRIMASK, r2
}
   22766:	b003      	add	sp, #12
   22768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2276c:	f04f 38ff 	mov.w	r8, #4294967295
   22770:	f04f 39ff 	mov.w	r9, #4294967295
   22774:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   22778:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   2277c:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   2277e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22782:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22786:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   2278a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   2278e:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   22792:	2900      	cmp	r1, #0
   22794:	d0e7      	beq.n	22766 <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   22796:	9000      	str	r0, [sp, #0]
   22798:	4632      	mov	r2, r6
   2279a:	463b      	mov	r3, r7
   2279c:	4628      	mov	r0, r5
   2279e:	4788      	blx	r1
   227a0:	e7e1      	b.n	22766 <rtc_nrf_isr+0x76>
   227a2:	bf00      	nop
   227a4:	40011000 	.word	0x40011000
   227a8:	20003674 	.word	0x20003674
   227ac:	2000366c 	.word	0x2000366c
   227b0:	200023d0 	.word	0x200023d0

000227b4 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   227b4:	1c43      	adds	r3, r0, #1
{
   227b6:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   227b8:	d022      	beq.n	22800 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   227ba:	2801      	cmp	r0, #1
   227bc:	dd22      	ble.n	22804 <sys_clock_set_timeout+0x50>
   227be:	4a12      	ldr	r2, [pc, #72]	; (22808 <sys_clock_set_timeout+0x54>)
   227c0:	4b12      	ldr	r3, [pc, #72]	; (2280c <sys_clock_set_timeout+0x58>)
   227c2:	4290      	cmp	r0, r2
   227c4:	bfd4      	ite	le
   227c6:	4604      	movle	r4, r0
   227c8:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   227ca:	f7ff fe9b 	bl	22504 <z_nrf_rtc_timer_read>
   227ce:	4b10      	ldr	r3, [pc, #64]	; (22810 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   227d0:	490e      	ldr	r1, [pc, #56]	; (2280c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   227d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   227d6:	1a80      	subs	r0, r0, r2
		cyc = 0;
   227d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   227dc:	bf28      	it	cs
   227de:	2400      	movcs	r4, #0
	cyc += unannounced;
   227e0:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   227e2:	428c      	cmp	r4, r1
   227e4:	bf28      	it	cs
   227e6:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   227e8:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   227ea:	490a      	ldr	r1, [pc, #40]	; (22814 <sys_clock_set_timeout+0x60>)
   227ec:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   227ee:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   227f2:	9001      	str	r0, [sp, #4]
   227f4:	f143 0300 	adc.w	r3, r3, #0
   227f8:	f7ff fea6 	bl	22548 <compare_set>
}
   227fc:	b002      	add	sp, #8
   227fe:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   22800:	4c02      	ldr	r4, [pc, #8]	; (2280c <sys_clock_set_timeout+0x58>)
   22802:	e7e2      	b.n	227ca <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   22804:	2401      	movs	r4, #1
   22806:	e7e0      	b.n	227ca <sys_clock_set_timeout+0x16>
   22808:	007ffffe 	.word	0x007ffffe
   2280c:	007fffff 	.word	0x007fffff
   22810:	200023e0 	.word	0x200023e0
   22814:	00022461 	.word	0x00022461

00022818 <sys_clock_elapsed>:
{
   22818:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2281a:	f7ff fe73 	bl	22504 <z_nrf_rtc_timer_read>
   2281e:	4b02      	ldr	r3, [pc, #8]	; (22828 <sys_clock_elapsed+0x10>)
   22820:	681b      	ldr	r3, [r3, #0]
}
   22822:	1ac0      	subs	r0, r0, r3
   22824:	bd08      	pop	{r3, pc}
   22826:	bf00      	nop
   22828:	200023e0 	.word	0x200023e0

0002282c <sys_clock_disable>:
{
   2282c:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2282e:	4c08      	ldr	r4, [pc, #32]	; (22850 <sys_clock_disable+0x24>)
   22830:	2301      	movs	r3, #1
   22832:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
   22834:	2011      	movs	r0, #17
   22836:	f7f2 fdd7 	bl	153e8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   2283a:	4b06      	ldr	r3, [pc, #24]	; (22854 <sys_clock_disable+0x28>)
   2283c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   22840:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   22844:	4b04      	ldr	r3, [pc, #16]	; (22858 <sys_clock_disable+0x2c>)
   22846:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2284a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2284e:	bd10      	pop	{r4, pc}
   22850:	40011000 	.word	0x40011000
   22854:	000f0003 	.word	0x000f0003
   22858:	e000e100 	.word	0xe000e100

0002285c <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   2285c:	4602      	mov	r2, r0
   2285e:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   22860:	4801      	ldr	r0, [pc, #4]	; (22868 <multithreading_lock_acquire+0xc>)
   22862:	f002 bc97 	b.w	25194 <z_impl_k_mutex_lock>
   22866:	bf00      	nop
   22868:	200008f8 	.word	0x200008f8

0002286c <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   2286c:	4801      	ldr	r0, [pc, #4]	; (22874 <multithreading_lock_release+0x8>)
   2286e:	f002 bd0b 	b.w	25288 <z_impl_k_mutex_unlock>
   22872:	bf00      	nop
   22874:	200008f8 	.word	0x200008f8

00022878 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   22878:	b598      	push	{r3, r4, r7, lr}
   2287a:	af00      	add	r7, sp, #0
	z_impl_log_panic();
   2287c:	f7f1 faf8 	bl	13e70 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   22880:	466c      	mov	r4, sp
   22882:	b088      	sub	sp, #32
   22884:	466a      	mov	r2, sp
   22886:	4b08      	ldr	r3, [pc, #32]	; (228a8 <k_sys_fatal_error_handler+0x30>)
   22888:	6153      	str	r3, [r2, #20]
   2288a:	4b08      	ldr	r3, [pc, #32]	; (228ac <k_sys_fatal_error_handler+0x34>)
   2288c:	6193      	str	r3, [r2, #24]
   2288e:	2303      	movs	r3, #3
   22890:	f842 3f10 	str.w	r3, [r2, #16]!
   22894:	4806      	ldr	r0, [pc, #24]	; (228b0 <k_sys_fatal_error_handler+0x38>)
   22896:	2300      	movs	r3, #0
   22898:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2289c:	f7f1 fbc8 	bl	14030 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   228a0:	2000      	movs	r0, #0
   228a2:	46a5      	mov	sp, r4
   228a4:	f7f3 fc18 	bl	160d8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   228a8:	00034ac3 	.word	0x00034ac3
   228ac:	00034ad8 	.word	0x00034ad8
   228b0:	0002fc84 	.word	0x0002fc84

000228b4 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   228b4:	b598      	push	{r3, r4, r7, lr}
   228b6:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   228b8:	466c      	mov	r4, sp
   228ba:	b08a      	sub	sp, #40	; 0x28
   228bc:	466a      	mov	r2, sp
   228be:	4b0d      	ldr	r3, [pc, #52]	; (228f4 <sdc_assertion_handler+0x40>)
   228c0:	6153      	str	r3, [r2, #20]
   228c2:	4b0d      	ldr	r3, [pc, #52]	; (228f8 <sdc_assertion_handler+0x44>)
   228c4:	6211      	str	r1, [r2, #32]
   228c6:	e9c2 3006 	strd	r3, r0, [r2, #24]
   228ca:	f240 3301 	movw	r3, #769	; 0x301
   228ce:	8493      	strh	r3, [r2, #36]	; 0x24
   228d0:	4b0a      	ldr	r3, [pc, #40]	; (228fc <sdc_assertion_handler+0x48>)
   228d2:	f842 3f10 	str.w	r3, [r2, #16]!
   228d6:	480a      	ldr	r0, [pc, #40]	; (22900 <sdc_assertion_handler+0x4c>)
   228d8:	2300      	movs	r3, #0
   228da:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   228de:	f7f1 fba7 	bl	14030 <z_impl_z_log_msg_static_create>
   228e2:	46a5      	mov	sp, r4
	k_oops();
   228e4:	4040      	eors	r0, r0
   228e6:	f380 8811 	msr	BASEPRI, r0
   228ea:	f04f 0003 	mov.w	r0, #3
   228ee:	df02      	svc	2
}
   228f0:	46bd      	mov	sp, r7
   228f2:	bd98      	pop	{r3, r4, r7, pc}
   228f4:	00034afe 	.word	0x00034afe
   228f8:	00034ca2 	.word	0x00034ca2
   228fc:	01000005 	.word	0x01000005
   22900:	0002fc5c 	.word	0x0002fc5c

00022904 <rand_prio_low_vector_get>:
}

static const struct device *entropy_source = DEVICE_DT_GET(DT_NODELABEL(rng));

static uint8_t rand_prio_low_vector_get(uint8_t *p_buff, uint8_t length)
{
   22904:	b538      	push	{r3, r4, r5, lr}
   22906:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   22908:	4807      	ldr	r0, [pc, #28]	; (22928 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   2290a:	6883      	ldr	r3, [r0, #8]
   2290c:	685d      	ldr	r5, [r3, #4]
   2290e:	460a      	mov	r2, r1
   22910:	b135      	cbz	r5, 22920 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   22912:	2300      	movs	r3, #0
   22914:	4621      	mov	r1, r4
   22916:	47a8      	blx	r5
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);

	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
	return ret >= 0 ? ret : 0;
   22918:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   2291c:	b2c0      	uxtb	r0, r0
   2291e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   22920:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22924:	e7f8      	b.n	22918 <rand_prio_low_vector_get+0x14>
   22926:	bf00      	nop
   22928:	0002f934 	.word	0x0002f934

0002292c <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   2292c:	4901      	ldr	r1, [pc, #4]	; (22934 <receive_signal_raise+0x8>)
   2292e:	4802      	ldr	r0, [pc, #8]	; (22938 <receive_signal_raise+0xc>)
   22930:	f00c bbff 	b.w	2f132 <k_work_submit_to_queue>
   22934:	20003678 	.word	0x20003678
   22938:	20002b08 	.word	0x20002b08

0002293c <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   2293c:	b410      	push	{r4}
   2293e:	4603      	mov	r3, r0
   22940:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   22942:	4803      	ldr	r0, [pc, #12]	; (22950 <rand_prio_low_vector_get_blocking+0x14>)
   22944:	6881      	ldr	r1, [r0, #8]
   22946:	680c      	ldr	r4, [r1, #0]
   22948:	4619      	mov	r1, r3
   2294a:	4623      	mov	r3, r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   2294c:	bc10      	pop	{r4}
   2294e:	4718      	bx	r3
   22950:	0002f934 	.word	0x0002f934

00022954 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
   22954:	b590      	push	{r4, r7, lr}
   22956:	b083      	sub	sp, #12
	int err = 0;

	bt_hci_driver_register(&drv);
   22958:	4834      	ldr	r0, [pc, #208]	; (22a2c <hci_driver_init+0xd8>)
{
   2295a:	af00      	add	r7, sp, #0
	bt_hci_driver_register(&drv);
   2295c:	f7f5 fb9a 	bl	18094 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   22960:	4833      	ldr	r0, [pc, #204]	; (22a30 <hci_driver_init+0xdc>)
   22962:	f7de f813 	bl	98c <sdc_init>
			err = sdc_support_central();
   22966:	f7de f88d 	bl	a84 <sdc_support_central>
			if (err) {
   2296a:	b120      	cbz	r0, 22976 <hci_driver_init+0x22>
			return -ENOTSUP;
   2296c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   22970:	370c      	adds	r7, #12
   22972:	46bd      	mov	sp, r7
   22974:	bd90      	pop	{r4, r7, pc}
			err = sdc_support_dle_central();
   22976:	f7de f897 	bl	aa8 <sdc_support_dle_central>
			if (err) {
   2297a:	2800      	cmp	r0, #0
   2297c:	d1f6      	bne.n	2296c <hci_driver_init+0x18>
		err = sdc_support_le_2m_phy();
   2297e:	f7de f8a3 	bl	ac8 <sdc_support_le_2m_phy>
		if (err) {
   22982:	2800      	cmp	r0, #0
   22984:	d1f2      	bne.n	2296c <hci_driver_init+0x18>
			err = sdc_support_phy_update_central();
   22986:	f7de f8af 	bl	ae8 <sdc_support_phy_update_central>
			if (err) {
   2298a:	4604      	mov	r4, r0
   2298c:	2800      	cmp	r0, #0
   2298e:	d1ed      	bne.n	2296c <hci_driver_init+0x18>
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   22990:	2101      	movs	r1, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22992:	1d3a      	adds	r2, r7, #4
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   22994:	7139      	strb	r1, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22996:	f7dd ff6d 	bl	874 <sdc_cfg_set>
	if (required_memory < 0) {
   2299a:	2800      	cmp	r0, #0
   2299c:	dbe8      	blt.n	22970 <hci_driver_init+0x1c>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   2299e:	2108      	movs	r1, #8
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   229a0:	1d3a      	adds	r2, r7, #4
   229a2:	4620      	mov	r0, r4
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   229a4:	80b9      	strh	r1, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   229a6:	f7dd ff65 	bl	874 <sdc_cfg_set>
	if (required_memory < 0) {
   229aa:	2800      	cmp	r0, #0
   229ac:	dbe0      	blt.n	22970 <hci_driver_init+0x1c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   229ae:	4b21      	ldr	r3, [pc, #132]	; (22a34 <hci_driver_init+0xe0>)
   229b0:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   229b2:	1d3a      	adds	r2, r7, #4
   229b4:	2103      	movs	r1, #3
   229b6:	4620      	mov	r0, r4
   229b8:	f7dd ff5c 	bl	874 <sdc_cfg_set>
	if (required_memory < 0) {
   229bc:	2800      	cmp	r0, #0
   229be:	dbd7      	blt.n	22970 <hci_driver_init+0x1c>
	cfg.event_length.event_length_us =
   229c0:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   229c4:	1d3a      	adds	r2, r7, #4
   229c6:	2104      	movs	r1, #4
   229c8:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   229ca:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   229cc:	f7dd ff52 	bl	874 <sdc_cfg_set>
	if (required_memory < 0) {
   229d0:	2800      	cmp	r0, #0
   229d2:	dbcd      	blt.n	22970 <hci_driver_init+0x1c>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   229d4:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   229d6:	1d3a      	adds	r2, r7, #4
   229d8:	2106      	movs	r1, #6
   229da:	4620      	mov	r0, r4
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   229dc:	713b      	strb	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   229de:	f7dd ff49 	bl	874 <sdc_cfg_set>
		if (required_memory < 0) {
   229e2:	2800      	cmp	r0, #0
   229e4:	dbc4      	blt.n	22970 <hci_driver_init+0x1c>
	if (required_memory > sizeof(sdc_mempool)) {
   229e6:	f5b0 6fd3 	cmp.w	r0, #1688	; 0x698
   229ea:	dd1d      	ble.n	22a28 <hci_driver_init+0xd4>
		LOG_ERR("Allocated memory too low: %u < %u",
   229ec:	466c      	mov	r4, sp
   229ee:	b08a      	sub	sp, #40	; 0x28
   229f0:	466a      	mov	r2, sp
   229f2:	4b11      	ldr	r3, [pc, #68]	; (22a38 <hci_driver_init+0xe4>)
   229f4:	6153      	str	r3, [r2, #20]
   229f6:	4b11      	ldr	r3, [pc, #68]	; (22a3c <hci_driver_init+0xe8>)
   229f8:	6193      	str	r3, [r2, #24]
   229fa:	f44f 63d3 	mov.w	r3, #1688	; 0x698
   229fe:	e9c2 3007 	strd	r3, r0, [r2, #28]
   22a02:	2305      	movs	r3, #5
   22a04:	f842 3f10 	str.w	r3, [r2, #16]!
   22a08:	480d      	ldr	r0, [pc, #52]	; (22a40 <hci_driver_init+0xec>)
   22a0a:	2300      	movs	r3, #0
   22a0c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   22a10:	f7f1 fb0e 	bl	14030 <z_impl_z_log_msg_static_create>
   22a14:	46a5      	mov	sp, r4
		k_panic();
   22a16:	4040      	eors	r0, r0
   22a18:	f380 8811 	msr	BASEPRI, r0
   22a1c:	f04f 0004 	mov.w	r0, #4
   22a20:	df02      	svc	2
		return -ENOMEM;
   22a22:	f06f 000b 	mvn.w	r0, #11
   22a26:	e7a3      	b.n	22970 <hci_driver_init+0x1c>
	return 0;
   22a28:	2000      	movs	r0, #0
	if (err) {
   22a2a:	e7a1      	b.n	22970 <hci_driver_init+0x1c>
   22a2c:	00030708 	.word	0x00030708
   22a30:	000228b5 	.word	0x000228b5
   22a34:	02031b1b 	.word	0x02031b1b
   22a38:	00034b27 	.word	0x00034b27
   22a3c:	00034c38 	.word	0x00034c38
   22a40:	0002fc5c 	.word	0x0002fc5c

00022a44 <hci_driver_open>:
{
   22a44:	b5b0      	push	{r4, r5, r7, lr}
   22a46:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
   22a48:	4932      	ldr	r1, [pc, #200]	; (22b14 <hci_driver_open+0xd0>)
   22a4a:	4833      	ldr	r0, [pc, #204]	; (22b18 <hci_driver_open+0xd4>)
{
   22a4c:	af00      	add	r7, sp, #0
	k_work_init(&receive_work, receive_work_handler);
   22a4e:	f00c fb43 	bl	2f0d8 <k_work_init>
		hci_ecdh_init();
   22a52:	f000 fe49 	bl	236e8 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   22a56:	f107 000c 	add.w	r0, r7, #12
   22a5a:	f7dd fefd 	bl	858 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   22a5e:	466c      	mov	r4, sp
   22a60:	b08a      	sub	sp, #40	; 0x28
   22a62:	466a      	mov	r2, sp
   22a64:	4b2d      	ldr	r3, [pc, #180]	; (22b1c <hci_driver_open+0xd8>)
   22a66:	6153      	str	r3, [r2, #20]
   22a68:	4b2d      	ldr	r3, [pc, #180]	; (22b20 <hci_driver_open+0xdc>)
   22a6a:	61d3      	str	r3, [r2, #28]
   22a6c:	f240 3301 	movw	r3, #769	; 0x301
   22a70:	8413      	strh	r3, [r2, #32]
   22a72:	4d2c      	ldr	r5, [pc, #176]	; (22b24 <hci_driver_open+0xe0>)
   22a74:	4b2c      	ldr	r3, [pc, #176]	; (22b28 <hci_driver_open+0xe4>)
   22a76:	6195      	str	r5, [r2, #24]
   22a78:	f842 3f10 	str.w	r3, [r2, #16]!
   22a7c:	492b      	ldr	r1, [pc, #172]	; (22b2c <hci_driver_open+0xe8>)
   22a7e:	482c      	ldr	r0, [pc, #176]	; (22b30 <hci_driver_open+0xec>)
   22a80:	f107 030c 	add.w	r3, r7, #12
   22a84:	f7f1 fad4 	bl	14030 <z_impl_z_log_msg_static_create>
   22a88:	46a5      	mov	sp, r4
   22a8a:	482a      	ldr	r0, [pc, #168]	; (22b34 <hci_driver_open+0xf0>)
   22a8c:	f00c f919 	bl	2ecc2 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   22a90:	4603      	mov	r3, r0
   22a92:	b998      	cbnz	r0, 22abc <hci_driver_open+0x78>
		LOG_ERR("Entropy source device not ready");
   22a94:	b088      	sub	sp, #32
   22a96:	466a      	mov	r2, sp
   22a98:	4927      	ldr	r1, [pc, #156]	; (22b38 <hci_driver_open+0xf4>)
   22a9a:	e9c2 1505 	strd	r1, r5, [r2, #20]
   22a9e:	2103      	movs	r1, #3
   22aa0:	f842 1f10 	str.w	r1, [r2, #16]!
   22aa4:	4822      	ldr	r0, [pc, #136]	; (22b30 <hci_driver_open+0xec>)
   22aa6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   22aaa:	f7f1 fac1 	bl	14030 <z_impl_z_log_msg_static_create>
   22aae:	46a5      	mov	sp, r4
		return -ENODEV;
   22ab0:	f06f 0412 	mvn.w	r4, #18
}
   22ab4:	4620      	mov	r0, r4
   22ab6:	3720      	adds	r7, #32
   22ab8:	46bd      	mov	sp, r7
   22aba:	bdb0      	pop	{r4, r5, r7, pc}
	sdc_rand_source_t rand_functions = {
   22abc:	4a1f      	ldr	r2, [pc, #124]	; (22b3c <hci_driver_open+0xf8>)
   22abe:	ca07      	ldmia	r2, {r0, r1, r2}
   22ac0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   22ac4:	4638      	mov	r0, r7
   22ac6:	f7de f867 	bl	b98 <sdc_rand_source_register>
	if (err) {
   22aca:	b190      	cbz	r0, 22af2 <hci_driver_open+0xae>
		LOG_ERR("Failed to register rand source (%d)", err);
   22acc:	b088      	sub	sp, #32
   22ace:	466a      	mov	r2, sp
   22ad0:	4b1b      	ldr	r3, [pc, #108]	; (22b40 <hci_driver_open+0xfc>)
   22ad2:	61d0      	str	r0, [r2, #28]
   22ad4:	e9c2 3505 	strd	r3, r5, [r2, #20]
   22ad8:	2304      	movs	r3, #4
   22ada:	f842 3f10 	str.w	r3, [r2, #16]!
   22ade:	4814      	ldr	r0, [pc, #80]	; (22b30 <hci_driver_open+0xec>)
   22ae0:	2300      	movs	r3, #0
   22ae2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   22ae6:	f7f1 faa3 	bl	14030 <z_impl_z_log_msg_static_create>
   22aea:	46a5      	mov	sp, r4
		return -EINVAL;
   22aec:	f06f 0415 	mvn.w	r4, #21
   22af0:	e7e0      	b.n	22ab4 <hci_driver_open+0x70>
	err = MULTITHREADING_LOCK_ACQUIRE();
   22af2:	f04f 30ff 	mov.w	r0, #4294967295
   22af6:	f04f 31ff 	mov.w	r1, #4294967295
   22afa:	f7ff feaf 	bl	2285c <multithreading_lock_acquire>
	if (err) {
   22afe:	4604      	mov	r4, r0
   22b00:	2800      	cmp	r0, #0
   22b02:	d1d7      	bne.n	22ab4 <hci_driver_open+0x70>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   22b04:	490f      	ldr	r1, [pc, #60]	; (22b44 <hci_driver_open+0x100>)
   22b06:	4810      	ldr	r0, [pc, #64]	; (22b48 <hci_driver_open+0x104>)
   22b08:	f7dd ff16 	bl	938 <sdc_enable>
	if (err) {
   22b0c:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   22b0e:	f7ff fead 	bl	2286c <multithreading_lock_release>
	return 0;
   22b12:	e7cf      	b.n	22ab4 <hci_driver_open+0x70>
   22b14:	0002ea73 	.word	0x0002ea73
   22b18:	20003678 	.word	0x20003678
   22b1c:	00032550 	.word	0x00032550
   22b20:	00034b4d 	.word	0x00034b4d
   22b24:	00034c4f 	.word	0x00034c4f
   22b28:	01000004 	.word	0x01000004
   22b2c:	014024c0 	.word	0x014024c0
   22b30:	0002fc5c 	.word	0x0002fc5c
   22b34:	0002f934 	.word	0x0002f934
   22b38:	00034b74 	.word	0x00034b74
   22b3c:	0002fe5c 	.word	0x0002fe5c
   22b40:	00034b98 	.word	0x00034b98
   22b44:	200023f0 	.word	0x200023f0
   22b48:	0002292d 	.word	0x0002292d

00022b4c <hci_driver_receive_process>:
{
   22b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b4e:	b083      	sub	sp, #12
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   22b50:	f04f 30ff 	mov.w	r0, #4294967295
{
   22b54:	af00      	add	r7, sp, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   22b56:	f04f 31ff 	mov.w	r1, #4294967295
   22b5a:	f7ff fe7f 	bl	2285c <multithreading_lock_acquire>
	if (!errcode) {
   22b5e:	2800      	cmp	r0, #0
   22b60:	d142      	bne.n	22be8 <hci_driver_receive_process+0x9c>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   22b62:	4d37      	ldr	r5, [pc, #220]	; (22c40 <hci_driver_receive_process+0xf4>)
   22b64:	1df9      	adds	r1, r7, #7
   22b66:	4628      	mov	r0, r5
   22b68:	f000 fc80 	bl	2346c <hci_internal_msg_get>
   22b6c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   22b6e:	f7ff fe7d 	bl	2286c <multithreading_lock_release>
	if (errcode) {
   22b72:	2c00      	cmp	r4, #0
   22b74:	d138      	bne.n	22be8 <hci_driver_receive_process+0x9c>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   22b76:	79fb      	ldrb	r3, [r7, #7]
   22b78:	2b04      	cmp	r3, #4
   22b7a:	d138      	bne.n	22bee <hci_driver_receive_process+0xa2>
	switch (hdr->evt) {
   22b7c:	7828      	ldrb	r0, [r5, #0]
   22b7e:	283e      	cmp	r0, #62	; 0x3e
   22b80:	d01d      	beq.n	22bbe <hci_driver_receive_process+0x72>
   22b82:	28ff      	cmp	r0, #255	; 0xff
   22b84:	d022      	beq.n	22bcc <hci_driver_receive_process+0x80>
		switch (subevent) {
   22b86:	f04f 32ff 	mov.w	r2, #4294967295
   22b8a:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   22b8e:	4621      	mov	r1, r4
   22b90:	f7f3 fed6 	bl	16940 <bt_buf_get_evt>
	if (!evt_buf) {
   22b94:	4606      	mov	r6, r0
   22b96:	b9e0      	cbnz	r0, 22bd2 <hci_driver_receive_process+0x86>
		if (discardable) {
   22b98:	bb24      	cbnz	r4, 22be4 <hci_driver_receive_process+0x98>
		LOG_ERR("No event buffer available");
   22b9a:	466d      	mov	r5, sp
   22b9c:	b088      	sub	sp, #32
   22b9e:	466a      	mov	r2, sp
   22ba0:	4b28      	ldr	r3, [pc, #160]	; (22c44 <hci_driver_receive_process+0xf8>)
   22ba2:	6153      	str	r3, [r2, #20]
   22ba4:	4b28      	ldr	r3, [pc, #160]	; (22c48 <hci_driver_receive_process+0xfc>)
		LOG_ERR("No data buffer available");
   22ba6:	6193      	str	r3, [r2, #24]
   22ba8:	2303      	movs	r3, #3
   22baa:	f842 3f10 	str.w	r3, [r2, #16]!
   22bae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   22bb2:	4623      	mov	r3, r4
   22bb4:	4825      	ldr	r0, [pc, #148]	; (22c4c <hci_driver_receive_process+0x100>)
   22bb6:	f7f1 fa3b 	bl	14030 <z_impl_z_log_msg_static_create>
   22bba:	46ad      	mov	sp, r5
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   22bbc:	e012      	b.n	22be4 <hci_driver_receive_process+0x98>
		switch (me->subevent) {
   22bbe:	78ab      	ldrb	r3, [r5, #2]
   22bc0:	2b02      	cmp	r3, #2
		switch (subevent) {
   22bc2:	d1e0      	bne.n	22b86 <hci_driver_receive_process+0x3a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   22bc4:	2200      	movs	r2, #0
   22bc6:	2300      	movs	r3, #0
			return true;
   22bc8:	2401      	movs	r4, #1
   22bca:	e7e0      	b.n	22b8e <hci_driver_receive_process+0x42>
		switch (subevent) {
   22bcc:	78ab      	ldrb	r3, [r5, #2]
   22bce:	2b80      	cmp	r3, #128	; 0x80
   22bd0:	e7f7      	b.n	22bc2 <hci_driver_receive_process+0x76>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   22bd2:	786a      	ldrb	r2, [r5, #1]
   22bd4:	491a      	ldr	r1, [pc, #104]	; (22c40 <hci_driver_receive_process+0xf4>)
   22bd6:	3202      	adds	r2, #2
   22bd8:	300c      	adds	r0, #12
   22bda:	f00b fc30 	bl	2e43e <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   22bde:	4630      	mov	r0, r6
	bt_recv(data_buf);
   22be0:	f7f5 fa20 	bl	18024 <bt_recv>
		receive_signal_raise();
   22be4:	f7ff fea2 	bl	2292c <receive_signal_raise>
}
   22be8:	370c      	adds	r7, #12
   22bea:	46bd      	mov	sp, r7
   22bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   22bee:	2b02      	cmp	r3, #2
   22bf0:	d117      	bne.n	22c22 <hci_driver_receive_process+0xd6>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   22bf2:	f04f 32ff 	mov.w	r2, #4294967295
   22bf6:	f04f 33ff 	mov.w	r3, #4294967295
   22bfa:	2003      	movs	r0, #3
   22bfc:	f7f3 fe70 	bl	168e0 <bt_buf_get_rx>
	if (!data_buf) {
   22c00:	4604      	mov	r4, r0
   22c02:	b930      	cbnz	r0, 22c12 <hci_driver_receive_process+0xc6>
		LOG_ERR("No data buffer available");
   22c04:	466d      	mov	r5, sp
   22c06:	b088      	sub	sp, #32
   22c08:	466a      	mov	r2, sp
   22c0a:	4b11      	ldr	r3, [pc, #68]	; (22c50 <hci_driver_receive_process+0x104>)
   22c0c:	6153      	str	r3, [r2, #20]
   22c0e:	4b11      	ldr	r3, [pc, #68]	; (22c54 <hci_driver_receive_process+0x108>)
   22c10:	e7c9      	b.n	22ba6 <hci_driver_receive_process+0x5a>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   22c12:	886a      	ldrh	r2, [r5, #2]
   22c14:	4629      	mov	r1, r5
   22c16:	3204      	adds	r2, #4
   22c18:	300c      	adds	r0, #12
   22c1a:	f00b fc10 	bl	2e43e <net_buf_simple_add_mem>
	bt_recv(data_buf);
   22c1e:	4620      	mov	r0, r4
   22c20:	e7de      	b.n	22be0 <hci_driver_receive_process+0x94>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   22c22:	466d      	mov	r5, sp
   22c24:	b088      	sub	sp, #32
   22c26:	466a      	mov	r2, sp
   22c28:	490b      	ldr	r1, [pc, #44]	; (22c58 <hci_driver_receive_process+0x10c>)
   22c2a:	6151      	str	r1, [r2, #20]
   22c2c:	490b      	ldr	r1, [pc, #44]	; (22c5c <hci_driver_receive_process+0x110>)
   22c2e:	e9c2 1306 	strd	r1, r3, [r2, #24]
   22c32:	2304      	movs	r3, #4
   22c34:	f842 3f10 	str.w	r3, [r2, #16]!
   22c38:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   22c3c:	4623      	mov	r3, r4
   22c3e:	e7b9      	b.n	22bb4 <hci_driver_receive_process+0x68>
   22c40:	2000448d 	.word	0x2000448d
   22c44:	00034bc0 	.word	0x00034bc0
   22c48:	00034c73 	.word	0x00034c73
   22c4c:	0002fc5c 	.word	0x0002fc5c
   22c50:	00034bde 	.word	0x00034bde
   22c54:	00034c5f 	.word	0x00034c5f
   22c58:	00034bfb 	.word	0x00034bfb
   22c5c:	00034c88 	.word	0x00034c88

00022c60 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   22c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   22c62:	4cc6      	ldr	r4, [pc, #792]	; (22f7c <hci_internal_cmd_put+0x31c>)
   22c64:	8806      	ldrh	r6, [r0, #0]
   22c66:	7823      	ldrb	r3, [r4, #0]
{
   22c68:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   22c6a:	2b00      	cmp	r3, #0
   22c6c:	f040 83f6 	bne.w	2345c <hci_internal_cmd_put+0x7fc>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   22c70:	2304      	movs	r3, #4
   22c72:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   22c76:	4bc2      	ldr	r3, [pc, #776]	; (22f80 <hci_internal_cmd_put+0x320>)
   22c78:	681f      	ldr	r7, [r3, #0]
   22c7a:	b1b7      	cbz	r7, 22caa <hci_internal_cmd_put+0x4a>
		status = user_cmd_handler(cmd_in,
   22c7c:	f10d 0306 	add.w	r3, sp, #6
   22c80:	f10d 0207 	add.w	r2, sp, #7
   22c84:	1c61      	adds	r1, r4, #1
   22c86:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   22c88:	2801      	cmp	r0, #1
   22c8a:	d00e      	beq.n	22caa <hci_internal_cmd_put+0x4a>
	if (generate_command_status_event ||
   22c8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   22c90:	2b00      	cmp	r3, #0
   22c92:	f040 83c1 	bne.w	23418 <hci_internal_cmd_put+0x7b8>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   22c96:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   22c9a:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   22c9c:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   22c9e:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   22ca0:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   22ca2:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   22ca4:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   22ca6:	71a0      	strb	r0, [r4, #6]
}
   22ca8:	e3bf      	b.n	2342a <hci_internal_cmd_put+0x7ca>
		switch (BT_OGF(opcode)) {
   22caa:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   22cae:	ea4f 2396 	mov.w	r3, r6, lsr #10
   22cb2:	d20f      	bcs.n	22cd4 <hci_internal_cmd_put+0x74>
   22cb4:	2b00      	cmp	r3, #0
   22cb6:	d079      	beq.n	22dac <hci_internal_cmd_put+0x14c>
   22cb8:	3b01      	subs	r3, #1
   22cba:	2b07      	cmp	r3, #7
   22cbc:	f200 83a2 	bhi.w	23404 <hci_internal_cmd_put+0x7a4>
   22cc0:	e8df f013 	tbh	[pc, r3, lsl #1]
   22cc4:	03a0000d 	.word	0x03a0000d
   22cc8:	008e003f 	.word	0x008e003f
   22ccc:	03a003a0 	.word	0x03a003a0
   22cd0:	016203a0 	.word	0x016203a0
   22cd4:	2b3f      	cmp	r3, #63	; 0x3f
   22cd6:	f000 82e5 	beq.w	232a4 <hci_internal_cmd_put+0x644>
	switch (opcode)	{
   22cda:	2001      	movs	r0, #1
   22cdc:	e324      	b.n	23328 <hci_internal_cmd_put+0x6c8>
	return ((uint16_t)src[1] << 8) | src[0];
   22cde:	4628      	mov	r0, r5
	switch (opcode)	{
   22ce0:	f240 4206 	movw	r2, #1030	; 0x406
   22ce4:	f930 3b03 	ldrsh.w	r3, [r0], #3
   22ce8:	4293      	cmp	r3, r2
   22cea:	d010      	beq.n	22d0e <hci_internal_cmd_put+0xae>
   22cec:	f240 421d 	movw	r2, #1053	; 0x41d
   22cf0:	4293      	cmp	r3, r2
   22cf2:	d023      	beq.n	22d3c <hci_internal_cmd_put+0xdc>
   22cf4:	2001      	movs	r0, #1
	switch (hci_opcode) {
   22cf6:	f240 4306 	movw	r3, #1030	; 0x406
   22cfa:	429e      	cmp	r6, r3
   22cfc:	f040 837c 	bne.w	233f8 <hci_internal_cmd_put+0x798>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   22d00:	230f      	movs	r3, #15
   22d02:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   22d04:	2304      	movs	r3, #4
   22d06:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   22d08:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   22d0a:	2301      	movs	r3, #1
   22d0c:	e033      	b.n	22d76 <hci_internal_cmd_put+0x116>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   22d0e:	f7ea fd57 	bl	d7c0 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   22d12:	f242 0332 	movw	r3, #8242	; 0x2032
   22d16:	429e      	cmp	r6, r3
   22d18:	f240 8366 	bls.w	233e8 <hci_internal_cmd_put+0x788>
   22d1c:	f242 0385 	movw	r3, #8325	; 0x2085
   22d20:	429e      	cmp	r6, r3
   22d22:	d840      	bhi.n	22da6 <hci_internal_cmd_put+0x146>
   22d24:	f242 036c 	movw	r3, #8300	; 0x206c
   22d28:	429e      	cmp	r6, r3
   22d2a:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   22d2e:	f200 836b 	bhi.w	23408 <hci_internal_cmd_put+0x7a8>
   22d32:	3b03      	subs	r3, #3
   22d34:	b29b      	uxth	r3, r3
   22d36:	2b01      	cmp	r3, #1
   22d38:	d835      	bhi.n	22da6 <hci_internal_cmd_put+0x146>
   22d3a:	e7e1      	b.n	22d00 <hci_internal_cmd_put+0xa0>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   22d3c:	f7ea fd42 	bl	d7c4 <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   22d40:	e7e7      	b.n	22d12 <hci_internal_cmd_put+0xb2>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   22d42:	4628      	mov	r0, r5
	switch (opcode)	{
   22d44:	f640 4263 	movw	r2, #3171	; 0xc63
   22d48:	f930 3b03 	ldrsh.w	r3, [r0], #3
   22d4c:	4293      	cmp	r3, r2
   22d4e:	d03b      	beq.n	22dc8 <hci_internal_cmd_put+0x168>
   22d50:	dc16      	bgt.n	22d80 <hci_internal_cmd_put+0x120>
   22d52:	f640 4203 	movw	r2, #3075	; 0xc03
   22d56:	4293      	cmp	r3, r2
   22d58:	d02a      	beq.n	22db0 <hci_internal_cmd_put+0x150>
   22d5a:	f640 422d 	movw	r2, #3117	; 0xc2d
   22d5e:	4293      	cmp	r3, r2
   22d60:	d029      	beq.n	22db6 <hci_internal_cmd_put+0x156>
   22d62:	f640 4201 	movw	r2, #3073	; 0xc01
   22d66:	4293      	cmp	r3, r2
   22d68:	d01b      	beq.n	22da2 <hci_internal_cmd_put+0x142>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   22d6a:	230f      	movs	r3, #15
   22d6c:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   22d6e:	2304      	movs	r3, #4
   22d70:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   22d72:	2301      	movs	r3, #1
   22d74:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   22d76:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   22d78:	f8a4 6005 	strh.w	r6, [r4, #5]
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
		/* SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
		 * will generate command complete at a later time (unless unsupported)
		 */

		cmd_complete_or_status.occurred = false;
   22d7c:	7023      	strb	r3, [r4, #0]
   22d7e:	e0d5      	b.n	22f2c <hci_internal_cmd_put+0x2cc>
	switch (opcode)	{
   22d80:	f640 427b 	movw	r2, #3195	; 0xc7b
   22d84:	4293      	cmp	r3, r2
   22d86:	d022      	beq.n	22dce <hci_internal_cmd_put+0x16e>
   22d88:	f640 427c 	movw	r2, #3196	; 0xc7c
   22d8c:	4293      	cmp	r3, r2
   22d8e:	d1ec      	bne.n	22d6a <hci_internal_cmd_put+0x10a>
		*param_length_out +=
   22d90:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   22d94:	497b      	ldr	r1, [pc, #492]	; (22f84 <hci_internal_cmd_put+0x324>)
		*param_length_out +=
   22d96:	3302      	adds	r3, #2
   22d98:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   22d9c:	f7ea fc74 	bl	d688 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   22da0:	e001      	b.n	22da6 <hci_internal_cmd_put+0x146>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   22da2:	f7ea fc67 	bl	d674 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   22da6:	2801      	cmp	r0, #1
   22da8:	f47f af75 	bne.w	22c96 <hci_internal_cmd_put+0x36>
	switch (hci_opcode) {
   22dac:	2001      	movs	r0, #1
   22dae:	e333      	b.n	23418 <hci_internal_cmd_put+0x7b8>
		return sdc_hci_cmd_cb_reset();
   22db0:	f7dd ffec 	bl	d8c <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   22db4:	e7f7      	b.n	22da6 <hci_internal_cmd_put+0x146>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   22db6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   22dba:	4972      	ldr	r1, [pc, #456]	; (22f84 <hci_internal_cmd_put+0x324>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   22dbc:	3303      	adds	r3, #3
   22dbe:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   22dc2:	f7ea fc55 	bl	d670 <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   22dc6:	e7ee      	b.n	22da6 <hci_internal_cmd_put+0x146>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   22dc8:	f7ea fc59 	bl	d67e <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   22dcc:	e7eb      	b.n	22da6 <hci_internal_cmd_put+0x146>
		*param_length_out +=
   22dce:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   22dd2:	496c      	ldr	r1, [pc, #432]	; (22f84 <hci_internal_cmd_put+0x324>)
		*param_length_out +=
   22dd4:	3304      	adds	r3, #4
   22dd6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   22dda:	f7ea fc47 	bl	d66c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   22dde:	e7e2      	b.n	22da6 <hci_internal_cmd_put+0x146>
	switch (opcode)	{
   22de0:	882b      	ldrh	r3, [r5, #0]
   22de2:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   22de6:	3b01      	subs	r3, #1
   22de8:	2b08      	cmp	r3, #8
   22dea:	d8be      	bhi.n	22d6a <hci_internal_cmd_put+0x10a>
   22dec:	a201      	add	r2, pc, #4	; (adr r2, 22df4 <hci_internal_cmd_put+0x194>)
   22dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22df2:	bf00      	nop
   22df4:	00022e19 	.word	0x00022e19
   22df8:	00022e2b 	.word	0x00022e2b
   22dfc:	00022f33 	.word	0x00022f33
   22e00:	00022d6b 	.word	0x00022d6b
   22e04:	00022d6b 	.word	0x00022d6b
   22e08:	00022d6b 	.word	0x00022d6b
   22e0c:	00022d6b 	.word	0x00022d6b
   22e10:	00022d6b 	.word	0x00022d6b
   22e14:	00022f6b 	.word	0x00022f6b
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   22e18:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   22e1c:	4859      	ldr	r0, [pc, #356]	; (22f84 <hci_internal_cmd_put+0x324>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   22e1e:	3308      	adds	r3, #8
   22e20:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   22e24:	f7ea fc85 	bl	d732 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   22e28:	e7bd      	b.n	22da6 <hci_internal_cmd_put+0x146>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   22e2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   22e2e:	4d55      	ldr	r5, [pc, #340]	; (22f84 <hci_internal_cmd_put+0x324>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   22e30:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   22e32:	2230      	movs	r2, #48	; 0x30
   22e34:	2100      	movs	r1, #0
   22e36:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   22e38:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   22e3c:	f008 ff3b 	bl	2bcb6 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   22e40:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   22e44:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   22e46:	2300      	movs	r3, #0
   22e48:	71a3      	strb	r3, [r4, #6]
	cmds->hci_disconnect = 1;
   22e4a:	79e3      	ldrb	r3, [r4, #7]
	evt_data->opcode = hci_opcode;
   22e4c:	80a6      	strh	r6, [r4, #4]
	cmds->hci_disconnect = 1;
   22e4e:	f043 0320 	orr.w	r3, r3, #32
   22e52:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   22e54:	7a63      	ldrb	r3, [r4, #9]
   22e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   22e5a:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   22e5c:	7b23      	ldrb	r3, [r4, #12]
   22e5e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   22e62:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   22e64:	7c63      	ldrb	r3, [r4, #17]
   22e66:	f043 0304 	orr.w	r3, r3, #4
   22e6a:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   22e6c:	7d63      	ldrb	r3, [r4, #21]
   22e6e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   22e72:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   22e76:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   22e78:	7da3      	ldrb	r3, [r4, #22]
   22e7a:	f043 0302 	orr.w	r3, r3, #2
   22e7e:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   22e80:	7f63      	ldrb	r3, [r4, #29]
   22e82:	f043 0304 	orr.w	r3, r3, #4
   22e86:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   22e88:	f894 3020 	ldrb.w	r3, [r4, #32]
   22e8c:	f023 0317 	bic.w	r3, r3, #23
   22e90:	f043 0317 	orr.w	r3, r3, #23
   22e94:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_parameters = 1;
   22e98:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   22e9c:	f063 0303 	orn	r3, r3, #3
   22ea0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   22ea4:	23ff      	movs	r3, #255	; 0xff
   22ea6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   22eaa:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   22eae:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   22eb2:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   22eb6:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   22eba:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   22ebe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   22ec2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   22ec6:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   22eca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   22ece:	f063 033f 	orn	r3, r3, #63	; 0x3f
   22ed2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   22ed6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   22eda:	220e      	movs	r2, #14
	cmds->hci_le_write_suggested_default_data_length = 1;
   22edc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   22ee0:	7062      	strb	r2, [r4, #1]
	cmds->hci_le_write_suggested_default_data_length = 1;
   22ee2:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	evt_data->ncmd = 1;
   22ee6:	2201      	movs	r2, #1
   22ee8:	70e2      	strb	r2, [r4, #3]
	cmds->hci_le_write_suggested_default_data_length = 1;
   22eea:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   22eee:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   22ef2:	f063 0301 	orn	r3, r3, #1
   22ef6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   22efa:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   22efe:	4313      	orrs	r3, r2
   22f00:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   22f04:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   22f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   22f0c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   22f10:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   22f14:	f043 0304 	orr.w	r3, r3, #4
   22f18:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   22f1c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   22f20:	f043 0304 	orr.w	r3, r3, #4
   22f24:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	cmd_complete_or_status.occurred = true;
   22f28:	f805 2c07 	strb.w	r2, [r5, #-7]
	}

	return 0;
   22f2c:	2000      	movs	r0, #0
}
   22f2e:	b003      	add	sp, #12
   22f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   22f32:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   22f36:	4d13      	ldr	r5, [pc, #76]	; (22f84 <hci_internal_cmd_put+0x324>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   22f38:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   22f3a:	2208      	movs	r2, #8
   22f3c:	2100      	movs	r1, #0
   22f3e:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   22f40:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   22f44:	f008 feb7 	bl	2bcb6 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   22f48:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   22f4c:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   22f4e:	2300      	movs	r3, #0
   22f50:	71a3      	strb	r3, [r4, #6]
	features->bdedr_not_supported = 1;
   22f52:	7ae3      	ldrb	r3, [r4, #11]
	evt_data->opcode = hci_opcode;
   22f54:	80a6      	strh	r6, [r4, #4]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   22f56:	220e      	movs	r2, #14
	features->bdedr_not_supported = 1;
   22f58:	f023 0360 	bic.w	r3, r3, #96	; 0x60
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   22f5c:	7062      	strb	r2, [r4, #1]
	features->bdedr_not_supported = 1;
   22f5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	evt_data->ncmd = 1;
   22f62:	2201      	movs	r2, #1
   22f64:	70e2      	strb	r2, [r4, #3]
	features->bdedr_not_supported = 1;
   22f66:	72e3      	strb	r3, [r4, #11]
   22f68:	e7de      	b.n	22f28 <hci_internal_cmd_put+0x2c8>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   22f6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   22f6e:	4805      	ldr	r0, [pc, #20]	; (22f84 <hci_internal_cmd_put+0x324>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   22f70:	3306      	adds	r3, #6
   22f72:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   22f76:	f7ea fbda 	bl	d72e <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   22f7a:	e714      	b.n	22da6 <hci_internal_cmd_put+0x146>
   22f7c:	200044d6 	.word	0x200044d6
   22f80:	20003688 	.word	0x20003688
   22f84:	200044dd 	.word	0x200044dd
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   22f88:	4628      	mov	r0, r5
	switch (opcode)	{
   22f8a:	f830 3b03 	ldrh.w	r3, [r0], #3
   22f8e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   22f92:	3b01      	subs	r3, #1
   22f94:	2b5d      	cmp	r3, #93	; 0x5d
   22f96:	d85f      	bhi.n	23058 <hci_internal_cmd_put+0x3f8>
   22f98:	e8df f013 	tbh	[pc, r3, lsl #1]
   22f9c:	00930086 	.word	0x00930086
   22fa0:	005e009c 	.word	0x005e009c
   22fa4:	005e00cd 	.word	0x005e00cd
   22fa8:	005e005e 	.word	0x005e005e
   22fac:	005e005e 	.word	0x005e005e
   22fb0:	00d300d0 	.word	0x00d300d0
   22fb4:	00d900d6 	.word	0x00d900d6
   22fb8:	00e500dc 	.word	0x00e500dc
   22fbc:	00eb00e8 	.word	0x00eb00e8
   22fc0:	00f100ee 	.word	0x00f100ee
   22fc4:	00fd00f4 	.word	0x00fd00f4
   22fc8:	01090100 	.word	0x01090100
   22fcc:	005e0112 	.word	0x005e0112
   22fd0:	0115005e 	.word	0x0115005e
   22fd4:	005e005e 	.word	0x005e005e
   22fd8:	005e005e 	.word	0x005e005e
   22fdc:	012a005e 	.word	0x012a005e
   22fe0:	013c0133 	.word	0x013c0133
   22fe4:	0142013f 	.word	0x0142013f
   22fe8:	014b0148 	.word	0x014b0148
   22fec:	0151014e 	.word	0x0151014e
   22ff0:	005e005e 	.word	0x005e005e
   22ff4:	015d015a 	.word	0x015d015a
   22ff8:	01690160 	.word	0x01690160
   22ffc:	01750172 	.word	0x01750172
   23000:	005e005e 	.word	0x005e005e
   23004:	005e005e 	.word	0x005e005e
   23008:	005e005e 	.word	0x005e005e
   2300c:	005e005e 	.word	0x005e005e
   23010:	005e005e 	.word	0x005e005e
   23014:	005e005e 	.word	0x005e005e
   23018:	005e005e 	.word	0x005e005e
   2301c:	005e005e 	.word	0x005e005e
   23020:	005e005e 	.word	0x005e005e
   23024:	005e005e 	.word	0x005e005e
   23028:	005e005e 	.word	0x005e005e
   2302c:	005e005e 	.word	0x005e005e
   23030:	005e0178 	.word	0x005e0178
   23034:	0181005e 	.word	0x0181005e
   23038:	005e005e 	.word	0x005e005e
   2303c:	005e005e 	.word	0x005e005e
   23040:	005e005e 	.word	0x005e005e
   23044:	005e005e 	.word	0x005e005e
   23048:	005e005e 	.word	0x005e005e
   2304c:	005e005e 	.word	0x005e005e
   23050:	005e005e 	.word	0x005e005e
   23054:	0145005e 	.word	0x0145005e
	switch (hci_opcode) {
   23058:	f242 0332 	movw	r3, #8242	; 0x2032
   2305c:	429e      	cmp	r6, r3
   2305e:	d017      	beq.n	23090 <hci_internal_cmd_put+0x430>
   23060:	f200 81f6 	bhi.w	23450 <hci_internal_cmd_put+0x7f0>
   23064:	f242 0326 	movw	r3, #8230	; 0x2026
   23068:	429e      	cmp	r6, r3
   2306a:	f63f ae9f 	bhi.w	22dac <hci_internal_cmd_put+0x14c>
   2306e:	2001      	movs	r0, #1
   23070:	f242 030c 	movw	r3, #8204	; 0x200c
   23074:	429e      	cmp	r6, r3
   23076:	f67f ae3e 	bls.w	22cf6 <hci_internal_cmd_put+0x96>
   2307a:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   2307e:	4ac8      	ldr	r2, [pc, #800]	; (233a0 <hci_internal_cmd_put+0x740>)
   23080:	3b0d      	subs	r3, #13
   23082:	b29b      	uxth	r3, r3
   23084:	fa22 f303 	lsr.w	r3, r2, r3
   23088:	07db      	lsls	r3, r3, #31
   2308a:	f57f ae8c 	bpl.w	22da6 <hci_internal_cmd_put+0x146>
   2308e:	e637      	b.n	22d00 <hci_internal_cmd_put+0xa0>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   23090:	230f      	movs	r3, #15
   23092:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   23094:	2304      	movs	r3, #4
   23096:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   23098:	2301      	movs	r3, #1
   2309a:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   2309c:	2232      	movs	r2, #50	; 0x32
   2309e:	7162      	strb	r2, [r4, #5]
   230a0:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   230a2:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   230a4:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   230a6:	e669      	b.n	22d7c <hci_internal_cmd_put+0x11c>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   230a8:	f7ea fb75 	bl	d796 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   230ac:	f242 0332 	movw	r3, #8242	; 0x2032
   230b0:	429e      	cmp	r6, r3
   230b2:	f47f ae2e 	bne.w	22d12 <hci_internal_cmd_put+0xb2>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   230b6:	230f      	movs	r3, #15
   230b8:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   230ba:	2304      	movs	r3, #4
   230bc:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   230be:	70e0      	strb	r0, [r4, #3]
   230c0:	e094      	b.n	231ec <hci_internal_cmd_put+0x58c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   230c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   230c6:	48b7      	ldr	r0, [pc, #732]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   230c8:	3303      	adds	r3, #3
   230ca:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   230ce:	f7ea fb46 	bl	d75e <sdc_hci_cmd_le_read_buffer_size>
   230d2:	e7eb      	b.n	230ac <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   230d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   230d8:	4db2      	ldr	r5, [pc, #712]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   230da:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   230dc:	2208      	movs	r2, #8
   230de:	2100      	movs	r1, #0
   230e0:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   230e2:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   230e6:	f008 fde6 	bl	2bcb6 <memset>
	features->params.le_encryption = 1;
   230ea:	79e3      	ldrb	r3, [r4, #7]
   230ec:	f063 0302 	orn	r3, r3, #2
   230f0:	71e3      	strb	r3, [r4, #7]
	features->params.le_2m_phy = 1;
   230f2:	7a23      	ldrb	r3, [r4, #8]
   230f4:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   230f8:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   230fc:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   230fe:	f242 0332 	movw	r3, #8242	; 0x2032
   23102:	429e      	cmp	r6, r3
   23104:	d008      	beq.n	23118 <hci_internal_cmd_put+0x4b8>
   23106:	f200 819d 	bhi.w	23444 <hci_internal_cmd_put+0x7e4>
   2310a:	f242 0326 	movw	r3, #8230	; 0x2026
   2310e:	429e      	cmp	r6, r3
   23110:	f240 8170 	bls.w	233f4 <hci_internal_cmd_put+0x794>
		return 0;
   23114:	2000      	movs	r0, #0
   23116:	e5be      	b.n	22c96 <hci_internal_cmd_put+0x36>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   23118:	230f      	movs	r3, #15
   2311a:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2311c:	2304      	movs	r3, #4
	evt_data->opcode = hci_opcode;
   2311e:	2232      	movs	r2, #50	; 0x32
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   23120:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   23122:	2300      	movs	r3, #0
   23124:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   23126:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
   23128:	2301      	movs	r3, #1
	evt_data->opcode = hci_opcode;
   2312a:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   2312c:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   2312e:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   23130:	f805 3c07 	strb.w	r3, [r5, #-7]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   23134:	e6fa      	b.n	22f2c <hci_internal_cmd_put+0x2cc>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   23136:	f7ea fb39 	bl	d7ac <sdc_hci_cmd_le_set_random_address>
   2313a:	e7b7      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   2313c:	f7ea fb3c 	bl	d7b8 <sdc_hci_cmd_le_set_scan_params>
   23140:	e7b4      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   23142:	f7ea fb37 	bl	d7b4 <sdc_hci_cmd_le_set_scan_enable>
   23146:	e7b1      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   23148:	f7ea faff 	bl	d74a <sdc_hci_cmd_le_create_conn>
   2314c:	e7ae      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_create_conn_cancel();
   2314e:	f7ea fafe 	bl	d74e <sdc_hci_cmd_le_create_conn_cancel>
   23152:	e7ab      	b.n	230ac <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   23154:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   23158:	4892      	ldr	r0, [pc, #584]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   2315a:	3301      	adds	r3, #1
   2315c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   23160:	f7ea fb01 	bl	d766 <sdc_hci_cmd_le_read_filter_accept_list_size>
   23164:	e7a2      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   23166:	f7ea faea 	bl	d73e <sdc_hci_cmd_le_clear_filter_accept_list>
   2316a:	e79f      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   2316c:	f7ea fae3 	bl	d736 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   23170:	e79c      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   23172:	f7ea fb06 	bl	d782 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   23176:	e799      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   23178:	f7ea fae5 	bl	d746 <sdc_hci_cmd_le_conn_update>
   2317c:	e796      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   2317e:	f7ea fb0f 	bl	d7a0 <sdc_hci_cmd_le_set_host_channel_classification>
   23182:	e793      	b.n	230ac <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   23184:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   23188:	4986      	ldr	r1, [pc, #536]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2318a:	3307      	adds	r3, #7
   2318c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   23190:	f7ea fae7 	bl	d762 <sdc_hci_cmd_le_read_channel_map>
   23194:	e78a      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   23196:	f7ea faec 	bl	d772 <sdc_hci_cmd_le_read_remote_features>
   2319a:	e787      	b.n	230ac <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   2319c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   231a0:	4980      	ldr	r1, [pc, #512]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   231a2:	3310      	adds	r3, #16
   231a4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   231a8:	f7ea fad5 	bl	d756 <sdc_hci_cmd_le_encrypt>
   231ac:	e77e      	b.n	230ac <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   231ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   231b2:	487c      	ldr	r0, [pc, #496]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   231b4:	3308      	adds	r3, #8
   231b6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   231ba:	f7ea face 	bl	d75a <sdc_hci_cmd_le_rand>
   231be:	e775      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   231c0:	f7ea fac7 	bl	d752 <sdc_hci_cmd_le_enable_encryption>
   231c4:	e772      	b.n	230ac <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   231c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   231ca:	3308      	adds	r3, #8
   231cc:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   231d0:	2370      	movs	r3, #112	; 0x70
   231d2:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   231d4:	2340      	movs	r3, #64	; 0x40
   231d6:	72e3      	strb	r3, [r4, #11]
	switch (hci_opcode) {
   231d8:	f242 0332 	movw	r3, #8242	; 0x2032
   231dc:	429e      	cmp	r6, r3
   231de:	d192      	bne.n	23106 <hci_internal_cmd_put+0x4a6>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   231e0:	230f      	movs	r3, #15
   231e2:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   231e4:	2304      	movs	r3, #4
   231e6:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   231e8:	2300      	movs	r3, #0
   231ea:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   231ec:	2301      	movs	r3, #1
   231ee:	e755      	b.n	2309c <hci_internal_cmd_put+0x43c>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   231f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   231f4:	496b      	ldr	r1, [pc, #428]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   231f6:	3302      	adds	r3, #2
   231f8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   231fc:	f7ea fac7 	bl	d78e <sdc_hci_cmd_le_set_data_length>
   23200:	e754      	b.n	230ac <hci_internal_cmd_put+0x44c>
		*param_length_out +=
   23202:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   23206:	4867      	ldr	r0, [pc, #412]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out +=
   23208:	3304      	adds	r3, #4
   2320a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   2320e:	f7ea fab4 	bl	d77a <sdc_hci_cmd_le_read_suggested_default_data_length>
   23212:	e74b      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   23214:	f7ea fad2 	bl	d7bc <sdc_hci_cmd_le_write_suggested_default_data_length>
   23218:	e748      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return hci_cmd_le_read_local_p256_public_key();
   2321a:	f000 fa95 	bl	23748 <hci_cmd_le_read_local_p256_public_key>
   2321e:	e745      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   23220:	f00b fc68 	bl	2eaf4 <hci_cmd_le_generate_dhkey>
   23224:	e742      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   23226:	f00b fc68 	bl	2eafa <hci_cmd_le_generate_dhkey_v2>
   2322a:	e73f      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   2322c:	f7ea fa85 	bl	d73a <sdc_hci_cmd_le_add_device_to_resolving_list>
   23230:	e73c      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   23232:	f7ea faa8 	bl	d786 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   23236:	e739      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_clear_resolving_list();
   23238:	f7ea fa83 	bl	d742 <sdc_hci_cmd_le_clear_resolving_list>
   2323c:	e736      	b.n	230ac <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   2323e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   23242:	4858      	ldr	r0, [pc, #352]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   23244:	3301      	adds	r3, #1
   23246:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   2324a:	f7ea fa94 	bl	d776 <sdc_hci_cmd_le_read_resolving_list_size>
   2324e:	e72d      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   23250:	f7ea fa9b 	bl	d78a <sdc_hci_cmd_le_set_address_resolution_enable>
   23254:	e72a      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   23256:	f7ea faab 	bl	d7b0 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   2325a:	e727      	b.n	230ac <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2325c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   23260:	4850      	ldr	r0, [pc, #320]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   23262:	3308      	adds	r3, #8
   23264:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   23268:	f7ea fa7f 	bl	d76a <sdc_hci_cmd_le_read_max_data_length>
   2326c:	e71e      	b.n	230ac <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   2326e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   23272:	494c      	ldr	r1, [pc, #304]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   23274:	3304      	adds	r3, #4
   23276:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2327a:	f7ea fa78 	bl	d76e <sdc_hci_cmd_le_read_phy>
   2327e:	e715      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   23280:	f7ea fa87 	bl	d792 <sdc_hci_cmd_le_set_default_phy>
   23284:	e712      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   23286:	f7ea fa8d 	bl	d7a4 <sdc_hci_cmd_le_set_phy>
   2328a:	e70f      	b.n	230ac <hci_internal_cmd_put+0x44c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   2328c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   23290:	4844      	ldr	r0, [pc, #272]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   23292:	3302      	adds	r3, #2
   23294:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   23298:	f7ea fa71 	bl	d77e <sdc_hci_cmd_le_read_transmit_power>
   2329c:	e706      	b.n	230ac <hci_internal_cmd_put+0x44c>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   2329e:	f7ea fa83 	bl	d7a8 <sdc_hci_cmd_le_set_privacy_mode>
   232a2:	e703      	b.n	230ac <hci_internal_cmd_put+0x44c>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   232a4:	4628      	mov	r0, r5
	switch (opcode)	{
   232a6:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   232aa:	f830 3b03 	ldrh.w	r3, [r0], #3
   232ae:	4293      	cmp	r3, r2
   232b0:	d822      	bhi.n	232f8 <hci_internal_cmd_put+0x698>
   232b2:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   232b6:	f67f ad10 	bls.w	22cda <hci_internal_cmd_put+0x7a>
   232ba:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   232be:	3b01      	subs	r3, #1
   232c0:	2b0a      	cmp	r3, #10
   232c2:	f63f ad0a 	bhi.w	22cda <hci_internal_cmd_put+0x7a>
   232c6:	a201      	add	r2, pc, #4	; (adr r2, 232cc <hci_internal_cmd_put+0x66c>)
   232c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   232cc:	00023319 	.word	0x00023319
   232d0:	00023335 	.word	0x00023335
   232d4:	00022cdb 	.word	0x00022cdb
   232d8:	00022cdb 	.word	0x00022cdb
   232dc:	00022cdb 	.word	0x00022cdb
   232e0:	00023389 	.word	0x00023389
   232e4:	00022cdb 	.word	0x00022cdb
   232e8:	00022cdb 	.word	0x00022cdb
   232ec:	00023365 	.word	0x00023365
   232f0:	00023377 	.word	0x00023377
   232f4:	0002338f 	.word	0x0002338f
   232f8:	f503 7240 	add.w	r2, r3, #768	; 0x300
   232fc:	b292      	uxth	r2, r2
   232fe:	2a05      	cmp	r2, #5
   23300:	f63f aceb 	bhi.w	22cda <hci_internal_cmd_put+0x7a>
   23304:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   23308:	3b01      	subs	r3, #1
   2330a:	2b04      	cmp	r3, #4
   2330c:	d84c      	bhi.n	233a8 <hci_internal_cmd_put+0x748>
   2330e:	e8df f003 	tbb	[pc, r3]
   23312:	5f5c      	.short	0x5f5c
   23314:	6562      	.short	0x6562
   23316:	68          	.byte	0x68
   23317:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   23318:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   2331c:	4821      	ldr	r0, [pc, #132]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   2331e:	330c      	adds	r3, #12
   23320:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   23324:	f7dd fdda 	bl	edc <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   23328:	f026 0308 	bic.w	r3, r6, #8
   2332c:	f64f 5202 	movw	r2, #64770	; 0xfd02
   23330:	4293      	cmp	r3, r2
   23332:	e064      	b.n	233fe <hci_internal_cmd_put+0x79e>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   23334:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   23338:	481a      	ldr	r0, [pc, #104]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   2333a:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   2333c:	2202      	movs	r2, #2
   2333e:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   23340:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   23344:	f008 fcb7 	bl	2bcb6 <memset>
	cmds->read_version_info = 1;
   23348:	79e3      	ldrb	r3, [r4, #7]
   2334a:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   2334e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   23352:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   23354:	7a23      	ldrb	r3, [r4, #8]
   23356:	f023 0307 	bic.w	r3, r3, #7
   2335a:	f043 0307 	orr.w	r3, r3, #7
   2335e:	7223      	strb	r3, [r4, #8]
		return 0;
   23360:	2000      	movs	r0, #0
   23362:	e7e1      	b.n	23328 <hci_internal_cmd_put+0x6c8>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   23364:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   23368:	480e      	ldr	r0, [pc, #56]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   2336a:	3317      	adds	r3, #23
   2336c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   23370:	f7dd fd68 	bl	e44 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   23374:	e7d8      	b.n	23328 <hci_internal_cmd_put+0x6c8>
		*param_length_out +=
   23376:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   2337a:	480a      	ldr	r0, [pc, #40]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out +=
   2337c:	3320      	adds	r3, #32
   2337e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   23382:	f7dd fd17 	bl	db4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   23386:	e7cf      	b.n	23328 <hci_internal_cmd_put+0x6c8>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   23388:	f7ea f9cf 	bl	d72a <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   2338c:	e7cc      	b.n	23328 <hci_internal_cmd_put+0x6c8>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   2338e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   23392:	4804      	ldr	r0, [pc, #16]	; (233a4 <hci_internal_cmd_put+0x744>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   23394:	3301      	adds	r3, #1
   23396:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   2339a:	f7ea f9b2 	bl	d702 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   2339e:	e7c3      	b.n	23328 <hci_internal_cmd_put+0x6c8>
   233a0:	03001241 	.word	0x03001241
   233a4:	200044dd 	.word	0x200044dd
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   233a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   233ac:	482d      	ldr	r0, [pc, #180]	; (23464 <hci_internal_cmd_put+0x804>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   233ae:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   233b0:	2202      	movs	r2, #2
   233b2:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   233b4:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   233b8:	f008 fc7d 	bl	2bcb6 <memset>
	cmds->read_supported_vs_commands = 1;
   233bc:	79e3      	ldrb	r3, [r4, #7]
   233be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   233c2:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   233c6:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   233c8:	e7ca      	b.n	23360 <hci_internal_cmd_put+0x700>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   233ca:	f7ea f993 	bl	d6f4 <sdc_hci_cmd_vs_llpm_mode_set>
   233ce:	e7ab      	b.n	23328 <hci_internal_cmd_put+0x6c8>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   233d0:	f7ea f964 	bl	d69c <sdc_hci_cmd_vs_conn_update>
   233d4:	e7a8      	b.n	23328 <hci_internal_cmd_put+0x6c8>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   233d6:	f7ea f959 	bl	d68c <sdc_hci_cmd_vs_conn_event_extend>
   233da:	e7a5      	b.n	23328 <hci_internal_cmd_put+0x6c8>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   233dc:	f7ea f98c 	bl	d6f8 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   233e0:	e7a2      	b.n	23328 <hci_internal_cmd_put+0x6c8>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   233e2:	f7ea f985 	bl	d6f0 <sdc_hci_cmd_vs_event_length_set>
   233e6:	e79f      	b.n	23328 <hci_internal_cmd_put+0x6c8>
	switch (hci_opcode) {
   233e8:	f242 0326 	movw	r3, #8230	; 0x2026
   233ec:	429e      	cmp	r6, r3
   233ee:	f67f ae3f 	bls.w	23070 <hci_internal_cmd_put+0x410>
   233f2:	e4d8      	b.n	22da6 <hci_internal_cmd_put+0x146>
		return 0;
   233f4:	2000      	movs	r0, #0
   233f6:	e63b      	b.n	23070 <hci_internal_cmd_put+0x410>
	switch (hci_opcode) {
   233f8:	f240 431d 	movw	r3, #1053	; 0x41d
   233fc:	429e      	cmp	r6, r3
   233fe:	f43f ac7f 	beq.w	22d00 <hci_internal_cmd_put+0xa0>
   23402:	e4d0      	b.n	22da6 <hci_internal_cmd_put+0x146>
		switch (BT_OGF(opcode)) {
   23404:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   23406:	e4ce      	b.n	22da6 <hci_internal_cmd_put+0x146>
	switch (hci_opcode) {
   23408:	4a17      	ldr	r2, [pc, #92]	; (23468 <hci_internal_cmd_put+0x808>)
   2340a:	3b2d      	subs	r3, #45	; 0x2d
   2340c:	b29b      	uxth	r3, r3
   2340e:	fa22 f303 	lsr.w	r3, r2, r3
   23412:	07da      	lsls	r2, r3, #31
   23414:	f57f acc7 	bpl.w	22da6 <hci_internal_cmd_put+0x146>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   23418:	230f      	movs	r3, #15
   2341a:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2341c:	2304      	movs	r3, #4
   2341e:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   23420:	2301      	movs	r3, #1
	evt_data->status = status_code;
   23422:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   23424:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   23426:	f8a4 6005 	strh.w	r6, [r4, #5]
	cmd_complete_or_status.occurred = true;
   2342a:	2301      	movs	r3, #1
   2342c:	7023      	strb	r3, [r4, #0]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   2342e:	f242 0383 	movw	r3, #8323	; 0x2083
   23432:	429e      	cmp	r6, r3
   23434:	f47f ad7a 	bne.w	22f2c <hci_internal_cmd_put+0x2cc>
		&&
   23438:	7863      	ldrb	r3, [r4, #1]
   2343a:	2b0e      	cmp	r3, #14
   2343c:	f47f ad76 	bne.w	22f2c <hci_internal_cmd_put+0x2cc>
		cmd_complete_or_status.occurred = false;
   23440:	2300      	movs	r3, #0
   23442:	e49b      	b.n	22d7c <hci_internal_cmd_put+0x11c>
	switch (hci_opcode) {
   23444:	f242 0385 	movw	r3, #8325	; 0x2085
   23448:	429e      	cmp	r6, r3
   2344a:	d905      	bls.n	23458 <hci_internal_cmd_put+0x7f8>
		return 0;
   2344c:	2000      	movs	r0, #0
   2344e:	e4aa      	b.n	22da6 <hci_internal_cmd_put+0x146>
	switch (hci_opcode) {
   23450:	f242 0385 	movw	r3, #8325	; 0x2085
   23454:	2001      	movs	r0, #1
   23456:	e463      	b.n	22d20 <hci_internal_cmd_put+0xc0>
		return 0;
   23458:	2000      	movs	r0, #0
   2345a:	e463      	b.n	22d24 <hci_internal_cmd_put+0xc4>
		return -NRF_EPERM;
   2345c:	f04f 30ff 	mov.w	r0, #4294967295
   23460:	e565      	b.n	22f2e <hci_internal_cmd_put+0x2ce>
   23462:	bf00      	nop
   23464:	200044dd 	.word	0x200044dd
   23468:	01000401 	.word	0x01000401

0002346c <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   2346c:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   2346e:	4c09      	ldr	r4, [pc, #36]	; (23494 <hci_internal_msg_get+0x28>)
   23470:	7823      	ldrb	r3, [r4, #0]
{
   23472:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   23474:	b91b      	cbnz	r3, 2347e <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   23476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   2347a:	f7ea b8e7 	b.w	d64c <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   2347e:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   23480:	1c61      	adds	r1, r4, #1
   23482:	3202      	adds	r2, #2
   23484:	f008 fc0c 	bl	2bca0 <memcpy>
		cmd_complete_or_status.occurred = false;
   23488:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   2348a:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   2348c:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   2348e:	702b      	strb	r3, [r5, #0]
}
   23490:	bd38      	pop	{r3, r4, r5, pc}
   23492:	bf00      	nop
   23494:	200044d6 	.word	0x200044d6

00023498 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   23498:	b570      	push	{r4, r5, r6, lr}
   2349a:	4605      	mov	r5, r0
   2349c:	460e      	mov	r6, r1
   2349e:	4c08      	ldr	r4, [pc, #32]	; (234c0 <bt_rand+0x28>)
   234a0:	4620      	mov	r0, r4
   234a2:	f00b fc0e 	bl	2ecc2 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   234a6:	b138      	cbz	r0, 234b8 <bt_rand+0x20>
   234a8:	68a3      	ldr	r3, [r4, #8]
   234aa:	b2b2      	uxth	r2, r6
   234ac:	4629      	mov	r1, r5
   234ae:	4620      	mov	r0, r4
   234b0:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   234b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   234b6:	4718      	bx	r3
   234b8:	f06f 0012 	mvn.w	r0, #18
   234bc:	bd70      	pop	{r4, r5, r6, pc}
   234be:	bf00      	nop
   234c0:	0002f934 	.word	0x0002f934

000234c4 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   234c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   234c6:	4b25      	ldr	r3, [pc, #148]	; (2355c <ecdh_p256_common_secret+0x98>)
   234c8:	4925      	ldr	r1, [pc, #148]	; (23560 <ecdh_p256_common_secret+0x9c>)
   234ca:	f103 0220 	add.w	r2, r3, #32
   234ce:	2800      	cmp	r0, #0
   234d0:	bf08      	it	eq
   234d2:	4619      	moveq	r1, r3
{
   234d4:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   234d6:	4610      	mov	r0, r2
   234d8:	f002 ff92 	bl	26400 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   234dc:	4604      	mov	r4, r0
   234de:	b190      	cbz	r0, 23506 <ecdh_p256_common_secret+0x42>
		LOG_ERR("public key is not valid (err %d)", err);
   234e0:	466d      	mov	r5, sp
   234e2:	b088      	sub	sp, #32
   234e4:	466a      	mov	r2, sp
   234e6:	4b1f      	ldr	r3, [pc, #124]	; (23564 <ecdh_p256_common_secret+0xa0>)
   234e8:	6153      	str	r3, [r2, #20]
   234ea:	4b1f      	ldr	r3, [pc, #124]	; (23568 <ecdh_p256_common_secret+0xa4>)
   234ec:	e9c2 3006 	strd	r3, r0, [r2, #24]
   234f0:	2304      	movs	r3, #4
   234f2:	f842 3f10 	str.w	r3, [r2, #16]!
   234f6:	481d      	ldr	r0, [pc, #116]	; (2356c <ecdh_p256_common_secret+0xa8>)
   234f8:	2300      	movs	r3, #0
   234fa:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   234fe:	f7f0 fd97 	bl	14030 <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   23502:	2412      	movs	r4, #18
   23504:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   23506:	f04f 32ff 	mov.w	r2, #4294967295
   2350a:	f04f 33ff 	mov.w	r3, #4294967295
   2350e:	2001      	movs	r0, #1
   23510:	f7f3 f9e6 	bl	168e0 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   23514:	f100 060c 	add.w	r6, r0, #12
   23518:	2102      	movs	r1, #2
   2351a:	4605      	mov	r5, r0
   2351c:	4630      	mov	r0, r6
   2351e:	f00a ff88 	bl	2e432 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   23522:	233e      	movs	r3, #62	; 0x3e
   23524:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   23526:	2322      	movs	r3, #34	; 0x22
   23528:	7043      	strb	r3, [r0, #1]
   2352a:	2101      	movs	r1, #1
   2352c:	4630      	mov	r0, r6
   2352e:	f00a ff80 	bl	2e432 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   23532:	2309      	movs	r3, #9
   23534:	7003      	strb	r3, [r0, #0]
   23536:	2121      	movs	r1, #33	; 0x21
   23538:	4630      	mov	r0, r6
   2353a:	f00a ff7a 	bl	2e432 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   2353e:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   23542:	b134      	cbz	r4, 23552 <ecdh_p256_common_secret+0x8e>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   23544:	2220      	movs	r2, #32
   23546:	21ff      	movs	r1, #255	; 0xff
   23548:	f008 fbb5 	bl	2bcb6 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   2354c:	4628      	mov	r0, r5
   2354e:	46bd      	mov	sp, r7
   23550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   23552:	4907      	ldr	r1, [pc, #28]	; (23570 <ecdh_p256_common_secret+0xac>)
   23554:	f00b fac4 	bl	2eae0 <sys_memcpy_swap.constprop.0>
   23558:	e7f8      	b.n	2354c <ecdh_p256_common_secret+0x88>
   2355a:	bf00      	nop
   2355c:	2000451d 	.word	0x2000451d
   23560:	00034d53 	.word	0x00034d53
   23564:	00034cee 	.word	0x00034cee
   23568:	00034d34 	.word	0x00034d34
   2356c:	0002fc54 	.word	0x0002fc54
   23570:	2000453d 	.word	0x2000453d

00023574 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   23574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23578:	4c44      	ldr	r4, [pc, #272]	; (2368c <ecdh_cmd_process+0x118>)
   2357a:	f3bf 8f5b 	dmb	ish
   2357e:	6823      	ldr	r3, [r4, #0]
   23580:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   23584:	2b02      	cmp	r3, #2
{
   23586:	af00      	add	r7, sp, #0
   23588:	46a0      	mov	r8, r4
	switch (atomic_get(&cmd)) {
   2358a:	d058      	beq.n	2363e <ecdh_cmd_process+0xca>
   2358c:	2b04      	cmp	r3, #4
   2358e:	d05b      	beq.n	23648 <ecdh_cmd_process+0xd4>
   23590:	2b01      	cmp	r3, #1
   23592:	d15b      	bne.n	2364c <ecdh_cmd_process+0xd8>
		err = bt_rand(ecdh.private_key_be, 32);
   23594:	4c3e      	ldr	r4, [pc, #248]	; (23690 <ecdh_cmd_process+0x11c>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   23596:	4e3f      	ldr	r6, [pc, #252]	; (23694 <ecdh_cmd_process+0x120>)
		err = bt_rand(ecdh.private_key_be, 32);
   23598:	2120      	movs	r1, #32
   2359a:	4620      	mov	r0, r4
   2359c:	f7ff ff7c 	bl	23498 <bt_rand>
		if (err) {
   235a0:	2800      	cmp	r0, #0
   235a2:	d141      	bne.n	23628 <ecdh_cmd_process+0xb4>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   235a4:	2220      	movs	r2, #32
   235a6:	4631      	mov	r1, r6
   235a8:	4620      	mov	r0, r4
   235aa:	f008 fb52 	bl	2bc52 <memcmp>
   235ae:	2800      	cmp	r0, #0
   235b0:	d0f2      	beq.n	23598 <ecdh_cmd_process+0x24>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   235b2:	4839      	ldr	r0, [pc, #228]	; (23698 <ecdh_cmd_process+0x124>)
   235b4:	4621      	mov	r1, r4
   235b6:	f002 ff0f 	bl	263d8 <ocrypto_ecdh_p256_public_key>
	} while (err);
   235ba:	4605      	mov	r5, r0
   235bc:	2800      	cmp	r0, #0
   235be:	d1eb      	bne.n	23598 <ecdh_cmd_process+0x24>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   235c0:	f04f 32ff 	mov.w	r2, #4294967295
   235c4:	f04f 33ff 	mov.w	r3, #4294967295
   235c8:	2001      	movs	r0, #1
   235ca:	f7f3 f989 	bl	168e0 <bt_buf_get_rx>
   235ce:	f100 060c 	add.w	r6, r0, #12
   235d2:	2102      	movs	r1, #2
   235d4:	4604      	mov	r4, r0
   235d6:	4630      	mov	r0, r6
   235d8:	f00a ff2b 	bl	2e432 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   235dc:	233e      	movs	r3, #62	; 0x3e
   235de:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   235e0:	2342      	movs	r3, #66	; 0x42
   235e2:	7043      	strb	r3, [r0, #1]
   235e4:	2101      	movs	r1, #1
   235e6:	4630      	mov	r0, r6
   235e8:	f00a ff23 	bl	2e432 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   235ec:	2308      	movs	r3, #8
   235ee:	7003      	strb	r3, [r0, #0]
   235f0:	2141      	movs	r1, #65	; 0x41
   235f2:	4630      	mov	r0, r6
   235f4:	f00a ff1d 	bl	2e432 <net_buf_simple_add>
   235f8:	4606      	mov	r6, r0
	evt->status = status;
   235fa:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   235fe:	b1ad      	cbz	r5, 2362c <ecdh_cmd_process+0xb8>
		(void)memset(evt->key, 0, sizeof(evt->key));
   23600:	2240      	movs	r2, #64	; 0x40
   23602:	2100      	movs	r1, #0
   23604:	f008 fb57 	bl	2bcb6 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   23608:	f3bf 8f5b 	dmb	ish
   2360c:	2300      	movs	r3, #0
   2360e:	e858 2f00 	ldrex	r2, [r8]
   23612:	e848 3100 	strex	r1, r3, [r8]
   23616:	2900      	cmp	r1, #0
   23618:	d1f9      	bne.n	2360e <ecdh_cmd_process+0x9a>
   2361a:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   2361e:	b38c      	cbz	r4, 23684 <ecdh_cmd_process+0x110>
		bt_recv(buf);
   23620:	4620      	mov	r0, r4
   23622:	f7f4 fcff 	bl	18024 <bt_recv>
	}
}
   23626:	e02d      	b.n	23684 <ecdh_cmd_process+0x110>
			return BT_HCI_ERR_UNSPECIFIED;
   23628:	251f      	movs	r5, #31
   2362a:	e7c9      	b.n	235c0 <ecdh_cmd_process+0x4c>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   2362c:	491a      	ldr	r1, [pc, #104]	; (23698 <ecdh_cmd_process+0x124>)
   2362e:	f00b fa57 	bl	2eae0 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   23632:	3120      	adds	r1, #32
   23634:	f106 0021 	add.w	r0, r6, #33	; 0x21
   23638:	f00b fa52 	bl	2eae0 <sys_memcpy_swap.constprop.0>
		break;
   2363c:	e7e4      	b.n	23608 <ecdh_cmd_process+0x94>
		buf = ecdh_p256_common_secret(false);
   2363e:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   23640:	f7ff ff40 	bl	234c4 <ecdh_p256_common_secret>
   23644:	4604      	mov	r4, r0
		break;
   23646:	e7df      	b.n	23608 <ecdh_cmd_process+0x94>
		buf = ecdh_p256_common_secret(true);
   23648:	2001      	movs	r0, #1
   2364a:	e7f9      	b.n	23640 <ecdh_cmd_process+0xcc>
		LOG_WRN("Unknown command");
   2364c:	466d      	mov	r5, sp
   2364e:	b088      	sub	sp, #32
   23650:	466a      	mov	r2, sp
   23652:	4b12      	ldr	r3, [pc, #72]	; (2369c <ecdh_cmd_process+0x128>)
   23654:	6153      	str	r3, [r2, #20]
   23656:	4b12      	ldr	r3, [pc, #72]	; (236a0 <ecdh_cmd_process+0x12c>)
   23658:	6193      	str	r3, [r2, #24]
   2365a:	2303      	movs	r3, #3
   2365c:	f842 3f10 	str.w	r3, [r2, #16]!
   23660:	2300      	movs	r3, #0
   23662:	4810      	ldr	r0, [pc, #64]	; (236a4 <ecdh_cmd_process+0x130>)
   23664:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   23668:	f7f0 fce2 	bl	14030 <z_impl_z_log_msg_static_create>
   2366c:	f3bf 8f5b 	dmb	ish
   23670:	46ad      	mov	sp, r5
   23672:	2300      	movs	r3, #0
   23674:	e854 2f00 	ldrex	r2, [r4]
   23678:	e844 3100 	strex	r1, r3, [r4]
   2367c:	2900      	cmp	r1, #0
   2367e:	d1f9      	bne.n	23674 <ecdh_cmd_process+0x100>
   23680:	f3bf 8f5b 	dmb	ish
}
   23684:	46bd      	mov	sp, r7
   23686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2368a:	bf00      	nop
   2368c:	2000369c 	.word	0x2000369c
   23690:	2000451d 	.word	0x2000451d
   23694:	00034d53 	.word	0x00034d53
   23698:	2000453d 	.word	0x2000453d
   2369c:	00034d13 	.word	0x00034d13
   236a0:	00034d42 	.word	0x00034d42
   236a4:	0002fc54 	.word	0x0002fc54

000236a8 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   236a8:	b510      	push	{r4, lr}
   236aa:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   236ac:	2210      	movs	r2, #16
   236ae:	2100      	movs	r1, #0
   236b0:	a801      	add	r0, sp, #4
   236b2:	f008 fb00 	bl	2bcb6 <memset>
   236b6:	4c0b      	ldr	r4, [pc, #44]	; (236e4 <ecdh_thread+0x3c>)
   236b8:	9405      	str	r4, [sp, #20]
   236ba:	2301      	movs	r3, #1
   236bc:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   236c0:	f04f 32ff 	mov.w	r2, #4294967295
   236c4:	f04f 33ff 	mov.w	r3, #4294967295
   236c8:	2101      	movs	r1, #1
   236ca:	a801      	add	r0, sp, #4
   236cc:	f002 fddc 	bl	26288 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   236d0:	4620      	mov	r0, r4
   236d2:	f00c f885 	bl	2f7e0 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   236d6:	9b04      	ldr	r3, [sp, #16]
   236d8:	f36f 3394 	bfc	r3, #14, #7
   236dc:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   236de:	f7ff ff49 	bl	23574 <ecdh_cmd_process>
	while (true) {
   236e2:	e7ed      	b.n	236c0 <ecdh_thread+0x18>
   236e4:	2000368c 	.word	0x2000368c

000236e8 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   236e8:	b510      	push	{r4, lr}
   236ea:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   236ec:	480e      	ldr	r0, [pc, #56]	; (23728 <hci_ecdh_init+0x40>)
   236ee:	f00c f872 	bl	2f7d6 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   236f2:	4c0e      	ldr	r4, [pc, #56]	; (2372c <hci_ecdh_init+0x44>)
   236f4:	490e      	ldr	r1, [pc, #56]	; (23730 <hci_ecdh_init+0x48>)
   236f6:	2200      	movs	r2, #0
   236f8:	2300      	movs	r3, #0
   236fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   236fe:	2300      	movs	r3, #0
   23700:	220a      	movs	r2, #10
   23702:	e9cd 2303 	strd	r2, r3, [sp, #12]
   23706:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2370a:	9300      	str	r3, [sp, #0]
   2370c:	f44f 7262 	mov.w	r2, #904	; 0x388
   23710:	4b08      	ldr	r3, [pc, #32]	; (23734 <hci_ecdh_init+0x4c>)
   23712:	4620      	mov	r0, r4
   23714:	f001 fc9a 	bl	2504c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   23718:	4907      	ldr	r1, [pc, #28]	; (23738 <hci_ecdh_init+0x50>)
   2371a:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   2371c:	b008      	add	sp, #32
   2371e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23722:	f00b bba2 	b.w	2ee6a <z_impl_k_thread_name_set>
   23726:	bf00      	nop
   23728:	2000368c 	.word	0x2000368c
   2372c:	20002a88 	.word	0x20002a88
   23730:	20006a00 	.word	0x20006a00
   23734:	000236a9 	.word	0x000236a9
   23738:	00034d27 	.word	0x00034d27

0002373c <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   2373c:	4801      	ldr	r0, [pc, #4]	; (23744 <hci_ecdh_uninit+0x8>)
   2373e:	f7f2 bb8d 	b.w	15e5c <z_impl_k_thread_abort>
   23742:	bf00      	nop
   23744:	20002a88 	.word	0x20002a88

00023748 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   23748:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2374a:	4b0b      	ldr	r3, [pc, #44]	; (23778 <hci_cmd_le_read_local_p256_public_key+0x30>)
   2374c:	f3bf 8f5b 	dmb	ish
   23750:	2201      	movs	r2, #1
   23752:	e853 1f00 	ldrex	r1, [r3]
   23756:	2900      	cmp	r1, #0
   23758:	d103      	bne.n	23762 <hci_cmd_le_read_local_p256_public_key+0x1a>
   2375a:	e843 2000 	strex	r0, r2, [r3]
   2375e:	2800      	cmp	r0, #0
   23760:	d1f7      	bne.n	23752 <hci_cmd_le_read_local_p256_public_key+0xa>
   23762:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   23766:	d105      	bne.n	23774 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   23768:	4804      	ldr	r0, [pc, #16]	; (2377c <hci_cmd_le_read_local_p256_public_key+0x34>)
   2376a:	2100      	movs	r1, #0
   2376c:	f002 fde8 	bl	26340 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   23770:	2000      	movs	r0, #0
}
   23772:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   23774:	200c      	movs	r0, #12
   23776:	e7fc      	b.n	23772 <hci_cmd_le_read_local_p256_public_key+0x2a>
   23778:	2000369c 	.word	0x2000369c
   2377c:	2000368c 	.word	0x2000368c

00023780 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   23780:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   23782:	2900      	cmp	r1, #0
   23784:	4b11      	ldr	r3, [pc, #68]	; (237cc <cmd_le_generate_dhkey+0x4c>)
   23786:	f3bf 8f5b 	dmb	ish
{
   2378a:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   2378c:	bf0c      	ite	eq
   2378e:	2202      	moveq	r2, #2
   23790:	2204      	movne	r2, #4
   23792:	e853 1f00 	ldrex	r1, [r3]
   23796:	2900      	cmp	r1, #0
   23798:	d103      	bne.n	237a2 <cmd_le_generate_dhkey+0x22>
   2379a:	e843 2000 	strex	r0, r2, [r3]
   2379e:	2800      	cmp	r0, #0
   237a0:	d1f7      	bne.n	23792 <cmd_le_generate_dhkey+0x12>
   237a2:	f3bf 8f5b 	dmb	ish
   237a6:	d10e      	bne.n	237c6 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   237a8:	4621      	mov	r1, r4
   237aa:	4809      	ldr	r0, [pc, #36]	; (237d0 <cmd_le_generate_dhkey+0x50>)
   237ac:	f00b f998 	bl	2eae0 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   237b0:	4808      	ldr	r0, [pc, #32]	; (237d4 <cmd_le_generate_dhkey+0x54>)
   237b2:	f104 0120 	add.w	r1, r4, #32
   237b6:	f00b f993 	bl	2eae0 <sys_memcpy_swap.constprop.0>
   237ba:	4807      	ldr	r0, [pc, #28]	; (237d8 <cmd_le_generate_dhkey+0x58>)
   237bc:	2100      	movs	r1, #0
   237be:	f002 fdbf 	bl	26340 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   237c2:	2000      	movs	r0, #0
}
   237c4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   237c6:	200c      	movs	r0, #12
   237c8:	e7fc      	b.n	237c4 <cmd_le_generate_dhkey+0x44>
   237ca:	bf00      	nop
   237cc:	2000369c 	.word	0x2000369c
   237d0:	2000453d 	.word	0x2000453d
   237d4:	2000455d 	.word	0x2000455d
   237d8:	2000368c 	.word	0x2000368c

000237dc <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   237dc:	4901      	ldr	r1, [pc, #4]	; (237e4 <mpsl_low_prio_irq_handler+0x8>)
   237de:	4802      	ldr	r0, [pc, #8]	; (237e8 <mpsl_low_prio_irq_handler+0xc>)
   237e0:	f00b bca7 	b.w	2f132 <k_work_submit_to_queue>
   237e4:	200036d0 	.word	0x200036d0
   237e8:	20002b08 	.word	0x20002b08

000237ec <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(void)
{
   237ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   237ee:	2332      	movs	r3, #50	; 0x32
   237f0:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   237f4:	4a13      	ldr	r2, [pc, #76]	; (23844 <mpsl_lib_init_sys+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   237f6:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   237f8:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   237fa:	2119      	movs	r1, #25
   237fc:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   237fe:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   23802:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   23806:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2380a:	f7e9 f895 	bl	c938 <mpsl_init>
	if (err) {
   2380e:	4604      	mov	r4, r0
   23810:	b9a0      	cbnz	r0, 2383c <mpsl_lib_init_sys+0x50>
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   23812:	480d      	ldr	r0, [pc, #52]	; (23848 <mpsl_lib_init_sys+0x5c>)
   23814:	4629      	mov	r1, r5
   23816:	f7ed fa1d 	bl	10c54 <mpsl_timeslot_session_count_set>
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   2381a:	4604      	mov	r4, r0
   2381c:	b970      	cbnz	r0, 2383c <mpsl_lib_init_sys+0x50>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2381e:	4601      	mov	r1, r0
   23820:	462a      	mov	r2, r5
   23822:	2008      	movs	r0, #8
   23824:	f7f1 fe02 	bl	1542c <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   23828:	462a      	mov	r2, r5
   2382a:	4621      	mov	r1, r4
   2382c:	200b      	movs	r0, #11
   2382e:	f7f1 fdfd 	bl	1542c <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   23832:	462a      	mov	r2, r5
   23834:	4621      	mov	r1, r4
   23836:	4628      	mov	r0, r5
   23838:	f7f1 fdf8 	bl	1542c <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   2383c:	4620      	mov	r0, r4
   2383e:	b003      	add	sp, #12
   23840:	bd30      	pop	{r4, r5, pc}
   23842:	bf00      	nop
   23844:	0002384d 	.word	0x0002384d
   23848:	200036a0 	.word	0x200036a0

0002384c <m_assert_handler>:
{
   2384c:	b598      	push	{r3, r4, r7, lr}
   2384e:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   23850:	466c      	mov	r4, sp
   23852:	b08a      	sub	sp, #40	; 0x28
   23854:	466a      	mov	r2, sp
   23856:	4b0d      	ldr	r3, [pc, #52]	; (2388c <m_assert_handler+0x40>)
   23858:	6153      	str	r3, [r2, #20]
   2385a:	4b0d      	ldr	r3, [pc, #52]	; (23890 <m_assert_handler+0x44>)
   2385c:	6211      	str	r1, [r2, #32]
   2385e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   23862:	f240 3301 	movw	r3, #769	; 0x301
   23866:	8493      	strh	r3, [r2, #36]	; 0x24
   23868:	4b0a      	ldr	r3, [pc, #40]	; (23894 <m_assert_handler+0x48>)
   2386a:	f842 3f10 	str.w	r3, [r2, #16]!
   2386e:	480a      	ldr	r0, [pc, #40]	; (23898 <m_assert_handler+0x4c>)
   23870:	2300      	movs	r3, #0
   23872:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   23876:	f7f0 fbdb 	bl	14030 <z_impl_z_log_msg_static_create>
   2387a:	46a5      	mov	sp, r4
	k_oops();
   2387c:	4040      	eors	r0, r0
   2387e:	f380 8811 	msr	BASEPRI, r0
   23882:	f04f 0003 	mov.w	r0, #3
   23886:	df02      	svc	2
}
   23888:	46bd      	mov	sp, r7
   2388a:	bd98      	pop	{r3, r4, r7, pc}
   2388c:	00034d7f 	.word	0x00034d7f
   23890:	00034da1 	.word	0x00034da1
   23894:	01000005 	.word	0x01000005
   23898:	0002fcbc 	.word	0x0002fcbc

0002389c <mpsl_low_prio_init>:

static int mpsl_low_prio_init(void)
{
   2389c:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   2389e:	4d0d      	ldr	r5, [pc, #52]	; (238d4 <mpsl_low_prio_init+0x38>)
   238a0:	490d      	ldr	r1, [pc, #52]	; (238d8 <mpsl_low_prio_init+0x3c>)
   238a2:	2400      	movs	r4, #0
   238a4:	9400      	str	r4, [sp, #0]
   238a6:	f06f 0309 	mvn.w	r3, #9
   238aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   238ae:	4628      	mov	r0, r5
   238b0:	f001 fefe 	bl	256b0 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   238b4:	4909      	ldr	r1, [pc, #36]	; (238dc <mpsl_low_prio_init+0x40>)
   238b6:	4628      	mov	r0, r5
   238b8:	f00b fad7 	bl	2ee6a <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   238bc:	4908      	ldr	r1, [pc, #32]	; (238e0 <mpsl_low_prio_init+0x44>)
   238be:	4809      	ldr	r0, [pc, #36]	; (238e4 <mpsl_low_prio_init+0x48>)
   238c0:	f00b fc0a 	bl	2f0d8 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   238c4:	4622      	mov	r2, r4
   238c6:	2104      	movs	r1, #4
   238c8:	2019      	movs	r0, #25
   238ca:	f7f1 fdaf 	bl	1542c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   238ce:	4620      	mov	r0, r4
   238d0:	b003      	add	sp, #12
   238d2:	bd30      	pop	{r4, r5, pc}
   238d4:	20002b08 	.word	0x20002b08
   238d8:	20006e00 	.word	0x20006e00
   238dc:	00034d97 	.word	0x00034d97
   238e0:	0002eb29 	.word	0x0002eb29
   238e4:	200036d0 	.word	0x200036d0

000238e8 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   238e8:	4b01      	ldr	r3, [pc, #4]	; (238f0 <mpsl_hfclk_callback+0x8>)
   238ea:	2000      	movs	r0, #0
   238ec:	681b      	ldr	r3, [r3, #0]
   238ee:	4718      	bx	r3
   238f0:	200036e0 	.word	0x200036e0

000238f4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   238f4:	b120      	cbz	r0, 23900 <nrfx_clock_start+0xc>
   238f6:	2801      	cmp	r0, #1
   238f8:	d106      	bne.n	23908 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   238fa:	4804      	ldr	r0, [pc, #16]	; (2390c <nrfx_clock_start+0x18>)
   238fc:	f7e8 be9c 	b.w	c638 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   23900:	4b03      	ldr	r3, [pc, #12]	; (23910 <nrfx_clock_start+0x1c>)
   23902:	2001      	movs	r0, #1
   23904:	681b      	ldr	r3, [r3, #0]
   23906:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   23908:	4770      	bx	lr
   2390a:	bf00      	nop
   2390c:	000238e9 	.word	0x000238e9
   23910:	200036e0 	.word	0x200036e0

00023914 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   23914:	4b01      	ldr	r3, [pc, #4]	; (2391c <nrfx_clock_init+0x8>)
   23916:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   23918:	4801      	ldr	r0, [pc, #4]	; (23920 <nrfx_clock_init+0xc>)
   2391a:	4770      	bx	lr
   2391c:	200036e0 	.word	0x200036e0
   23920:	0bad0000 	.word	0x0bad0000

00023924 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   23924:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23926:	481d      	ldr	r0, [pc, #116]	; (2399c <timeslot_callback+0x78>)
   23928:	f3bf 8f5b 	dmb	ish
   2392c:	6803      	ldr	r3, [r0, #0]
   2392e:	f3bf 8f5b 	dmb	ish
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);

	if (atomic_get(&_context.timeout_occured)) {
   23932:	b923      	cbnz	r3, 2393e <timeslot_callback+0x1a>
		return NULL;
	}

	switch (signal) {
   23934:	2906      	cmp	r1, #6
   23936:	d804      	bhi.n	23942 <timeslot_callback+0x1e>
   23938:	2904      	cmp	r1, #4
   2393a:	d823      	bhi.n	23984 <timeslot_callback+0x60>
   2393c:	b139      	cbz	r1, 2394e <timeslot_callback+0x2a>
		return NULL;
   2393e:	2000      	movs	r0, #0
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
}
   23940:	bd10      	pop	{r4, pc}
	switch (signal) {
   23942:	2907      	cmp	r1, #7
   23944:	d1fb      	bne.n	2393e <timeslot_callback+0x1a>
	z_impl_k_sem_give(sem);
   23946:	3840      	subs	r0, #64	; 0x40
   23948:	f001 fd0e 	bl	25368 <z_impl_k_sem_give>
}
   2394c:	e7f7      	b.n	2393e <timeslot_callback+0x1a>
		rc = _context.op_desc->handler(_context.op_desc->context);
   2394e:	f850 3c20 	ldr.w	r3, [r0, #-32]
   23952:	f1a0 0440 	sub.w	r4, r0, #64	; 0x40
   23956:	e9d3 2000 	ldrd	r2, r0, [r3]
   2395a:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   2395c:	2801      	cmp	r0, #1
   2395e:	d005      	beq.n	2396c <timeslot_callback+0x48>
			_context.return_param.callback_action =
   23960:	2302      	movs	r3, #2
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   23962:	63e0      	str	r0, [r4, #60]	; 0x3c
			_context.return_param.callback_action =
   23964:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		return NULL;
   23968:	480d      	ldr	r0, [pc, #52]	; (239a0 <timeslot_callback+0x7c>)
   2396a:	e7e9      	b.n	23940 <timeslot_callback+0x1c>
			_context.timeslot_request.params.earliest.timeout_us =
   2396c:	f247 5330 	movw	r3, #30000	; 0x7530
   23970:	6323      	str	r3, [r4, #48]	; 0x30
			_context.return_param.callback_action =
   23972:	2303      	movs	r3, #3
   23974:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			_context.return_param.params.request.p_next =
   23978:	f104 0324 	add.w	r3, r4, #36	; 0x24
			_context.timeslot_request.params.earliest.priority =
   2397c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
			_context.return_param.params.request.p_next =
   23980:	63a3      	str	r3, [r4, #56]	; 0x38
   23982:	e7f1      	b.n	23968 <timeslot_callback+0x44>
	_context.timeslot_request.params.earliest.priority =
   23984:	f800 3c17 	strb.w	r3, [r0, #-23]
	_context.timeslot_request.params.earliest.timeout_us =
   23988:	4b06      	ldr	r3, [pc, #24]	; (239a4 <timeslot_callback+0x80>)
   2398a:	f840 3c10 	str.w	r3, [r0, #-16]
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   2398e:	f1a0 011c 	sub.w	r1, r0, #28
	_context.timeslot_request.params.earliest.priority =
   23992:	3840      	subs	r0, #64	; 0x40
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   23994:	7e00      	ldrb	r0, [r0, #24]
   23996:	f7ed f901 	bl	10b9c <mpsl_timeslot_request>
}
   2399a:	e7d0      	b.n	2393e <timeslot_callback+0x1a>
   2399c:	20003724 	.word	0x20003724
   239a0:	20003718 	.word	0x20003718
   239a4:	0f423fff 	.word	0x0f423fff

000239a8 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   239a8:	4802      	ldr	r0, [pc, #8]	; (239b4 <nrf_flash_sync_init+0xc>)
   239aa:	2201      	movs	r2, #1
   239ac:	2100      	movs	r1, #0
   239ae:	f00b bb10 	b.w	2efd2 <z_impl_k_sem_init>
   239b2:	bf00      	nop
   239b4:	200036e4 	.word	0x200036e4

000239b8 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   239b8:	4b01      	ldr	r3, [pc, #4]	; (239c0 <nrf_flash_sync_set_context+0x8>)
   239ba:	61d8      	str	r0, [r3, #28]
}
   239bc:	4770      	bx	lr
   239be:	bf00      	nop
   239c0:	200036e4 	.word	0x200036e4

000239c4 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   239c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   239c8:	f04f 31ff 	mov.w	r1, #4294967295
{
   239cc:	af00      	add	r7, sp, #0
   239ce:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   239d0:	f04f 30ff 	mov.w	r0, #4294967295
   239d4:	f7fe ff42 	bl	2285c <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   239d8:	4941      	ldr	r1, [pc, #260]	; (23ae0 <nrf_flash_sync_exe+0x11c>)
   239da:	4842      	ldr	r0, [pc, #264]	; (23ae4 <nrf_flash_sync_exe+0x120>)
   239dc:	f7e5 fb80 	bl	90e0 <mpsl_timeslot_session_open>
   239e0:	4604      	mov	r4, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   239e2:	f7fe ff43 	bl	2286c <multithreading_lock_release>

	if (ret < 0) {
   239e6:	2c00      	cmp	r4, #0
   239e8:	da16      	bge.n	23a18 <nrf_flash_sync_exe+0x54>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   239ea:	466d      	mov	r5, sp
   239ec:	b088      	sub	sp, #32
   239ee:	466a      	mov	r2, sp
   239f0:	4b3d      	ldr	r3, [pc, #244]	; (23ae8 <nrf_flash_sync_exe+0x124>)
   239f2:	6153      	str	r3, [r2, #20]
   239f4:	4b3d      	ldr	r3, [pc, #244]	; (23aec <nrf_flash_sync_exe+0x128>)
   239f6:	e9c2 3406 	strd	r3, r4, [r2, #24]
   239fa:	2304      	movs	r3, #4
   239fc:	f842 3f10 	str.w	r3, [r2, #16]!
   23a00:	483b      	ldr	r0, [pc, #236]	; (23af0 <nrf_flash_sync_exe+0x12c>)
   23a02:	2300      	movs	r3, #0
   23a04:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   23a08:	f7f0 fb12 	bl	14030 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   23a0c:	f06f 000b 	mvn.w	r0, #11
   23a10:	46ad      	mov	sp, r5
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   23a12:	46bd      	mov	sp, r7
   23a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   23a18:	4c36      	ldr	r4, [pc, #216]	; (23af4 <nrf_flash_sync_exe+0x130>)
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   23a1a:	f240 1301 	movw	r3, #257	; 0x101
   23a1e:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   23a20:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   23a22:	6225      	str	r5, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   23a24:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   23a26:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   23a28:	f247 5330 	movw	r3, #30000	; 0x7530
   23a2c:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   23a2e:	2600      	movs	r6, #0
	_context.status = -ETIMEDOUT;
   23a30:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   23a34:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   23a38:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   23a3a:	f104 0540 	add.w	r5, r4, #64	; 0x40
   23a3e:	f3bf 8f5b 	dmb	ish
   23a42:	e855 3f00 	ldrex	r3, [r5]
   23a46:	e845 6200 	strex	r2, r6, [r5]
   23a4a:	2a00      	cmp	r2, #0
   23a4c:	d1f9      	bne.n	23a42 <nrf_flash_sync_exe+0x7e>
   23a4e:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   23a52:	f04f 31ff 	mov.w	r1, #4294967295
   23a56:	f04f 30ff 	mov.w	r0, #4294967295
   23a5a:	f7fe feff 	bl	2285c <multithreading_lock_acquire>
	ret = mpsl_timeslot_request(_context.session_id, req);
   23a5e:	f104 0124 	add.w	r1, r4, #36	; 0x24
   23a62:	7e20      	ldrb	r0, [r4, #24]
   23a64:	f7ed f89a 	bl	10b9c <mpsl_timeslot_request>
	MULTITHREADING_LOCK_RELEASE();
   23a68:	f7fe ff00 	bl	2286c <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   23a6c:	4a22      	ldr	r2, [pc, #136]	; (23af8 <nrf_flash_sync_exe+0x134>)
   23a6e:	2300      	movs	r3, #0
   23a70:	4620      	mov	r0, r4
   23a72:	f001 fc9f 	bl	253b4 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   23a76:	42b0      	cmp	r0, r6
   23a78:	da1b      	bge.n	23ab2 <nrf_flash_sync_exe+0xee>
		LOG_ERR("timeout");
   23a7a:	46e8      	mov	r8, sp
   23a7c:	b088      	sub	sp, #32
   23a7e:	466a      	mov	r2, sp
   23a80:	4b1e      	ldr	r3, [pc, #120]	; (23afc <nrf_flash_sync_exe+0x138>)
   23a82:	6153      	str	r3, [r2, #20]
   23a84:	4b19      	ldr	r3, [pc, #100]	; (23aec <nrf_flash_sync_exe+0x128>)
   23a86:	6193      	str	r3, [r2, #24]
   23a88:	2303      	movs	r3, #3
   23a8a:	f842 3f10 	str.w	r3, [r2, #16]!
   23a8e:	4818      	ldr	r0, [pc, #96]	; (23af0 <nrf_flash_sync_exe+0x12c>)
   23a90:	4633      	mov	r3, r6
   23a92:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23a96:	f7f0 facb 	bl	14030 <z_impl_z_log_msg_static_create>
   23a9a:	f3bf 8f5b 	dmb	ish
   23a9e:	46c5      	mov	sp, r8
   23aa0:	2301      	movs	r3, #1
   23aa2:	e855 2f00 	ldrex	r2, [r5]
   23aa6:	e845 3100 	strex	r1, r3, [r5]
   23aaa:	2900      	cmp	r1, #0
   23aac:	d1f9      	bne.n	23aa2 <nrf_flash_sync_exe+0xde>
   23aae:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   23ab2:	f04f 31ff 	mov.w	r1, #4294967295
   23ab6:	f04f 30ff 	mov.w	r0, #4294967295
   23aba:	f7fe fecf 	bl	2285c <multithreading_lock_acquire>
	mpsl_timeslot_session_close(_context.session_id);
   23abe:	7e20      	ldrb	r0, [r4, #24]
   23ac0:	f7ed f8a7 	bl	10c12 <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   23ac4:	f7fe fed2 	bl	2286c <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23ac8:	f3bf 8f5b 	dmb	ish
   23acc:	6c23      	ldr	r3, [r4, #64]	; 0x40
   23ace:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   23ad2:	b113      	cbz	r3, 23ada <nrf_flash_sync_exe+0x116>
	z_impl_k_sem_reset(sem);
   23ad4:	4807      	ldr	r0, [pc, #28]	; (23af4 <nrf_flash_sync_exe+0x130>)
   23ad6:	f001 fc95 	bl	25404 <z_impl_k_sem_reset>
	return _context.status;
   23ada:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   23adc:	e799      	b.n	23a12 <nrf_flash_sync_exe+0x4e>
   23ade:	bf00      	nop
   23ae0:	200036fc 	.word	0x200036fc
   23ae4:	00023925 	.word	0x00023925
   23ae8:	00034dbc 	.word	0x00034dbc
   23aec:	00034df2 	.word	0x00034df2
   23af0:	0002fc94 	.word	0x0002fc94
   23af4:	200036e4 	.word	0x200036e4
   23af8:	000b7b44 	.word	0x000b7b44
   23afc:	00034de6 	.word	0x00034de6

00023b00 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23b00:	4b07      	ldr	r3, [pc, #28]	; (23b20 <nrf_flash_sync_check_time_limit+0x20>)
   23b02:	2201      	movs	r2, #1
   23b04:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   23b06:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   23b0a:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   23b0e:	4418      	add	r0, r3
   23b10:	4b04      	ldr	r3, [pc, #16]	; (23b24 <nrf_flash_sync_check_time_limit+0x24>)
   23b12:	69db      	ldr	r3, [r3, #28]
}
   23b14:	4298      	cmp	r0, r3
   23b16:	bf34      	ite	cc
   23b18:	2000      	movcc	r0, #0
   23b1a:	2001      	movcs	r0, #1
   23b1c:	4770      	bx	lr
   23b1e:	bf00      	nop
   23b20:	40008000 	.word	0x40008000
   23b24:	200036e4 	.word	0x200036e4

00023b28 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23b28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   23b2c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   23b30:	2a08      	cmp	r2, #8
   23b32:	d106      	bne.n	23b42 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   23b34:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   23b38:	2b05      	cmp	r3, #5
   23b3a:	d802      	bhi.n	23b42 <nrf52_errata_103+0x1a>
   23b3c:	4a02      	ldr	r2, [pc, #8]	; (23b48 <nrf52_errata_103+0x20>)
   23b3e:	5cd0      	ldrb	r0, [r2, r3]
   23b40:	4770      	bx	lr
                        return false;
   23b42:	2000      	movs	r0, #0
}
   23b44:	4770      	bx	lr
   23b46:	bf00      	nop
   23b48:	00034e1b 	.word	0x00034e1b

00023b4c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   23b4c:	4a02      	ldr	r2, [pc, #8]	; (23b58 <nvmc_wait+0xc>)
   23b4e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   23b52:	2b00      	cmp	r3, #0
   23b54:	d0fb      	beq.n	23b4e <nvmc_wait+0x2>
}
   23b56:	4770      	bx	lr
   23b58:	4001e000 	.word	0x4001e000

00023b5c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   23b5c:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23b5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   23b62:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   23b66:	2a08      	cmp	r2, #8
   23b68:	d14e      	bne.n	23c08 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   23b6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   23b6e:	2100      	movs	r1, #0
   23b70:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   23b74:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   23b78:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   23b7c:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   23b80:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   23b84:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   23b88:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   23b8c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   23b90:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   23b94:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   23b98:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   23b9c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   23ba0:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   23ba4:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   23ba8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   23bac:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   23bb0:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   23bb4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   23bb8:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   23bbc:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   23bc0:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   23bc4:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   23bc8:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   23bcc:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   23bd0:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   23bd4:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   23bd8:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   23bdc:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   23be0:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   23be4:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   23be8:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   23bec:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   23bf0:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   23bf4:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   23bf8:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   23bfc:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   23c00:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   23c04:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   23c08:	f7ff ff8e 	bl	23b28 <nrf52_errata_103>
   23c0c:	b118      	cbz	r0, 23c16 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   23c0e:	4b3a      	ldr	r3, [pc, #232]	; (23cf8 <SystemInit+0x19c>)
   23c10:	4a3a      	ldr	r2, [pc, #232]	; (23cfc <SystemInit+0x1a0>)
   23c12:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   23c16:	f7ff ff87 	bl	23b28 <nrf52_errata_103>
   23c1a:	b118      	cbz	r0, 23c24 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   23c1c:	4b38      	ldr	r3, [pc, #224]	; (23d00 <SystemInit+0x1a4>)
   23c1e:	22fb      	movs	r2, #251	; 0xfb
   23c20:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   23c24:	f7ff ff80 	bl	23b28 <nrf52_errata_103>
   23c28:	b170      	cbz	r0, 23c48 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   23c2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   23c2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23c32:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   23c36:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   23c3a:	f022 020f 	bic.w	r2, r2, #15
   23c3e:	f003 030f 	and.w	r3, r3, #15
   23c42:	4313      	orrs	r3, r2
   23c44:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   23c48:	f7ff ff6e 	bl	23b28 <nrf52_errata_103>
   23c4c:	b120      	cbz	r0, 23c58 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   23c4e:	4b2d      	ldr	r3, [pc, #180]	; (23d04 <SystemInit+0x1a8>)
   23c50:	f44f 7200 	mov.w	r2, #512	; 0x200
   23c54:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23c58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   23c5c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   23c60:	2b08      	cmp	r3, #8
   23c62:	d11a      	bne.n	23c9a <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   23c64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23c68:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   23c6c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   23c6e:	bf44      	itt	mi
   23c70:	f06f 0201 	mvnmi.w	r2, #1
   23c74:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   23c78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23c7c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   23c80:	2b05      	cmp	r3, #5
   23c82:	d802      	bhi.n	23c8a <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   23c84:	4a20      	ldr	r2, [pc, #128]	; (23d08 <SystemInit+0x1ac>)
   23c86:	5cd3      	ldrb	r3, [r2, r3]
   23c88:	b13b      	cbz	r3, 23c9a <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   23c8a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   23c8e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   23c92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23c96:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   23c9a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   23c9e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   23ca2:	2a00      	cmp	r2, #0
   23ca4:	db03      	blt.n	23cae <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   23ca6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   23caa:	2b00      	cmp	r3, #0
   23cac:	da22      	bge.n	23cf4 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   23cae:	4917      	ldr	r1, [pc, #92]	; (23d0c <SystemInit+0x1b0>)
   23cb0:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   23cb2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   23cb6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   23cba:	2412      	movs	r4, #18
    nvmc_wait();
   23cbc:	f7ff ff46 	bl	23b4c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   23cc0:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   23cc4:	f7ff ff42 	bl	23b4c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   23cc8:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   23ccc:	f7ff ff3e 	bl	23b4c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   23cd0:	2300      	movs	r3, #0
   23cd2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   23cd6:	f7ff ff39 	bl	23b4c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   23cda:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   23cde:	490c      	ldr	r1, [pc, #48]	; (23d10 <SystemInit+0x1b4>)
   23ce0:	4b0c      	ldr	r3, [pc, #48]	; (23d14 <SystemInit+0x1b8>)
   23ce2:	68ca      	ldr	r2, [r1, #12]
   23ce4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   23ce8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   23cea:	60cb      	str	r3, [r1, #12]
   23cec:	f3bf 8f4f 	dsb	sy
    __NOP();
   23cf0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   23cf2:	e7fd      	b.n	23cf0 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   23cf4:	bd10      	pop	{r4, pc}
   23cf6:	bf00      	nop
   23cf8:	40005000 	.word	0x40005000
   23cfc:	00038148 	.word	0x00038148
   23d00:	4000f000 	.word	0x4000f000
   23d04:	40029000 	.word	0x40029000
   23d08:	00034e15 	.word	0x00034e15
   23d0c:	4001e000 	.word	0x4001e000
   23d10:	e000ed00 	.word	0xe000ed00
   23d14:	05fa0004 	.word	0x05fa0004

00023d18 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   23d18:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   23d1a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   23d1c:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   23d1e:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   23d22:	fab2 f382 	clz	r3, r2
   23d26:	f1c3 031f 	rsb	r3, r3, #31
   23d2a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   23d2c:	fa05 f403 	lsl.w	r4, r5, r3
   23d30:	ea22 0404 	bic.w	r4, r2, r4
   23d34:	e850 6f00 	ldrex	r6, [r0]
   23d38:	4296      	cmp	r6, r2
   23d3a:	d104      	bne.n	23d46 <nrfx_flag32_alloc+0x2e>
   23d3c:	e840 4c00 	strex	ip, r4, [r0]
   23d40:	f1bc 0f00 	cmp.w	ip, #0
   23d44:	d1f6      	bne.n	23d34 <nrfx_flag32_alloc+0x1c>
   23d46:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   23d4a:	d1e7      	bne.n	23d1c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   23d4c:	4801      	ldr	r0, [pc, #4]	; (23d54 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   23d4e:	700b      	strb	r3, [r1, #0]
}
   23d50:	bd70      	pop	{r4, r5, r6, pc}
   23d52:	bf00      	nop
   23d54:	0bad0000 	.word	0x0bad0000

00023d58 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   23d58:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   23d5a:	6803      	ldr	r3, [r0, #0]
   23d5c:	40cb      	lsrs	r3, r1
   23d5e:	07db      	lsls	r3, r3, #31
   23d60:	d414      	bmi.n	23d8c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   23d62:	2301      	movs	r3, #1
   23d64:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   23d66:	6802      	ldr	r2, [r0, #0]
   23d68:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   23d6c:	ea43 0102 	orr.w	r1, r3, r2
   23d70:	e850 4f00 	ldrex	r4, [r0]
   23d74:	4294      	cmp	r4, r2
   23d76:	d104      	bne.n	23d82 <nrfx_flag32_free+0x2a>
   23d78:	e840 1c00 	strex	ip, r1, [r0]
   23d7c:	f1bc 0f00 	cmp.w	ip, #0
   23d80:	d1f6      	bne.n	23d70 <nrfx_flag32_free+0x18>
   23d82:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   23d86:	d1ee      	bne.n	23d66 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   23d88:	4801      	ldr	r0, [pc, #4]	; (23d90 <nrfx_flag32_free+0x38>)
}
   23d8a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   23d8c:	4801      	ldr	r0, [pc, #4]	; (23d94 <nrfx_flag32_free+0x3c>)
   23d8e:	e7fc      	b.n	23d8a <nrfx_flag32_free+0x32>
   23d90:	0bad0000 	.word	0x0bad0000
   23d94:	0bad0004 	.word	0x0bad0004

00023d98 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   23d98:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   23d9a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   23d9e:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   23da0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   23da2:	6002      	str	r2, [r0, #0]
}
   23da4:	4802      	ldr	r0, [pc, #8]	; (23db0 <nrf_gpio_pin_port_decode+0x18>)
   23da6:	bf18      	it	ne
   23da8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   23dac:	4770      	bx	lr
   23dae:	bf00      	nop
   23db0:	50000300 	.word	0x50000300

00023db4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   23db4:	4b03      	ldr	r3, [pc, #12]	; (23dc4 <pin_in_use_by_te+0x10>)
   23db6:	3008      	adds	r0, #8
   23db8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   23dbc:	f3c0 1040 	ubfx	r0, r0, #5, #1
   23dc0:	4770      	bx	lr
   23dc2:	bf00      	nop
   23dc4:	200006d4 	.word	0x200006d4

00023dc8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   23dc8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23dca:	f100 0308 	add.w	r3, r0, #8
   23dce:	4c0c      	ldr	r4, [pc, #48]	; (23e00 <call_handler+0x38>)
   23dd0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   23dd4:	05da      	lsls	r2, r3, #23
{
   23dd6:	4605      	mov	r5, r0
   23dd8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23dda:	d507      	bpl.n	23dec <call_handler+0x24>
   23ddc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   23de0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   23de4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   23de8:	6852      	ldr	r2, [r2, #4]
   23dea:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   23dec:	68a3      	ldr	r3, [r4, #8]
   23dee:	b12b      	cbz	r3, 23dfc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   23df0:	68e2      	ldr	r2, [r4, #12]
   23df2:	4631      	mov	r1, r6
   23df4:	4628      	mov	r0, r5
    }
}
   23df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   23dfa:	4718      	bx	r3
}
   23dfc:	bd70      	pop	{r4, r5, r6, pc}
   23dfe:	bf00      	nop
   23e00:	200006d4 	.word	0x200006d4

00023e04 <release_handler>:
{
   23e04:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23e06:	4a12      	ldr	r2, [pc, #72]	; (23e50 <release_handler+0x4c>)
   23e08:	3008      	adds	r0, #8
   23e0a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   23e0e:	05d9      	lsls	r1, r3, #23
   23e10:	d51b      	bpl.n	23e4a <release_handler+0x46>
   23e12:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   23e16:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   23e1a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   23e1e:	f102 040e 	add.w	r4, r2, #14
   23e22:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   23e24:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   23e28:	f413 7f80 	tst.w	r3, #256	; 0x100
   23e2c:	d003      	beq.n	23e36 <release_handler+0x32>
   23e2e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   23e32:	4299      	cmp	r1, r3
   23e34:	d009      	beq.n	23e4a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   23e36:	3001      	adds	r0, #1
   23e38:	2830      	cmp	r0, #48	; 0x30
   23e3a:	d1f3      	bne.n	23e24 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   23e3c:	2300      	movs	r3, #0
   23e3e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   23e42:	4804      	ldr	r0, [pc, #16]	; (23e54 <release_handler+0x50>)
}
   23e44:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   23e46:	f7ff bf87 	b.w	23d58 <nrfx_flag32_free>
}
   23e4a:	bc10      	pop	{r4}
   23e4c:	4770      	bx	lr
   23e4e:	bf00      	nop
   23e50:	200006d4 	.word	0x200006d4
   23e54:	20000748 	.word	0x20000748

00023e58 <pin_handler_trigger_uninit>:
{
   23e58:	b538      	push	{r3, r4, r5, lr}
   23e5a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   23e5c:	f7ff ffaa 	bl	23db4 <pin_in_use_by_te>
   23e60:	4c09      	ldr	r4, [pc, #36]	; (23e88 <pin_handler_trigger_uninit+0x30>)
   23e62:	f102 0508 	add.w	r5, r2, #8
   23e66:	b140      	cbz	r0, 23e7a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23e68:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   23e6c:	4907      	ldr	r1, [pc, #28]	; (23e8c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   23e6e:	0b5b      	lsrs	r3, r3, #13
   23e70:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   23e74:	2000      	movs	r0, #0
   23e76:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   23e7a:	4610      	mov	r0, r2
   23e7c:	f7ff ffc2 	bl	23e04 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   23e80:	2300      	movs	r3, #0
   23e82:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   23e86:	bd38      	pop	{r3, r4, r5, pc}
   23e88:	200006d4 	.word	0x200006d4
   23e8c:	40006000 	.word	0x40006000

00023e90 <nrfx_gpiote_input_configure>:
{
   23e90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   23e94:	4604      	mov	r4, r0
   23e96:	4616      	mov	r6, r2
   23e98:	461d      	mov	r5, r3
    if (p_input_config)
   23e9a:	b301      	cbz	r1, 23ede <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23e9c:	4f4e      	ldr	r7, [pc, #312]	; (23fd8 <nrfx_gpiote_input_configure+0x148>)
   23e9e:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   23ea2:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   23ea6:	079b      	lsls	r3, r3, #30
   23ea8:	d502      	bpl.n	23eb0 <nrfx_gpiote_input_configure+0x20>
   23eaa:	f7ff ff83 	bl	23db4 <pin_in_use_by_te>
   23eae:	bb10      	cbnz	r0, 23ef6 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   23eb0:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   23eb2:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   23eb6:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   23eba:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   23ebe:	f10d 020f 	add.w	r2, sp, #15
   23ec2:	460b      	mov	r3, r1
   23ec4:	4620      	mov	r0, r4
   23ec6:	f10d 010e 	add.w	r1, sp, #14
   23eca:	f00a fe74 	bl	2ebb6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   23ece:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   23ed2:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   23ed6:	f043 0301 	orr.w	r3, r3, #1
   23eda:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   23ede:	b346      	cbz	r6, 23f32 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23ee0:	4b3d      	ldr	r3, [pc, #244]	; (23fd8 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   23ee2:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   23ee6:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23ee8:	f104 0708 	add.w	r7, r4, #8
   23eec:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   23ef0:	0788      	lsls	r0, r1, #30
   23ef2:	d502      	bpl.n	23efa <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   23ef4:	b1aa      	cbz	r2, 23f22 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   23ef6:	4839      	ldr	r0, [pc, #228]	; (23fdc <nrfx_gpiote_input_configure+0x14c>)
   23ef8:	e01d      	b.n	23f36 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   23efa:	f021 0120 	bic.w	r1, r1, #32
   23efe:	04c9      	lsls	r1, r1, #19
   23f00:	0cc9      	lsrs	r1, r1, #19
   23f02:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   23f06:	b162      	cbz	r2, 23f22 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   23f08:	f1bc 0f03 	cmp.w	ip, #3
   23f0c:	d8f3      	bhi.n	23ef6 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   23f0e:	6872      	ldr	r2, [r6, #4]
   23f10:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   23f12:	f1bc 0f00 	cmp.w	ip, #0
   23f16:	d111      	bne.n	23f3c <nrfx_gpiote_input_configure+0xac>
   23f18:	4a31      	ldr	r2, [pc, #196]	; (23fe0 <nrfx_gpiote_input_configure+0x150>)
   23f1a:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   23f1e:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   23f22:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   23f26:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   23f2a:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   23f2e:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   23f32:	bb45      	cbnz	r5, 23f86 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   23f34:	482b      	ldr	r0, [pc, #172]	; (23fe4 <nrfx_gpiote_input_configure+0x154>)
}
   23f36:	b004      	add	sp, #16
   23f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   23f3c:	00b2      	lsls	r2, r6, #2
   23f3e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   23f42:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   23f46:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   23f4a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   23f4e:	f020 0003 	bic.w	r0, r0, #3
   23f52:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   23f56:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   23f5a:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   23f5e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   23f62:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23f66:	0220      	lsls	r0, r4, #8
   23f68:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   23f6c:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   23f70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   23f74:	ea40 000e 	orr.w	r0, r0, lr
   23f78:	f041 0120 	orr.w	r1, r1, #32
   23f7c:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   23f80:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   23f84:	e7cd      	b.n	23f22 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   23f86:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   23f8a:	4620      	mov	r0, r4
   23f8c:	f7ff ff3a 	bl	23e04 <release_handler>
    if (!handler)
   23f90:	2e00      	cmp	r6, #0
   23f92:	d0cf      	beq.n	23f34 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   23f94:	4d10      	ldr	r5, [pc, #64]	; (23fd8 <nrfx_gpiote_input_configure+0x148>)
   23f96:	e9d5 2300 	ldrd	r2, r3, [r5]
   23f9a:	4296      	cmp	r6, r2
   23f9c:	d101      	bne.n	23fa2 <nrfx_gpiote_input_configure+0x112>
   23f9e:	429f      	cmp	r7, r3
   23fa0:	d018      	beq.n	23fd4 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   23fa2:	4811      	ldr	r0, [pc, #68]	; (23fe8 <nrfx_gpiote_input_configure+0x158>)
   23fa4:	f10d 010f 	add.w	r1, sp, #15
   23fa8:	f7ff feb6 	bl	23d18 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   23fac:	4b0d      	ldr	r3, [pc, #52]	; (23fe4 <nrfx_gpiote_input_configure+0x154>)
   23fae:	4298      	cmp	r0, r3
   23fb0:	d1c1      	bne.n	23f36 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   23fb2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   23fb6:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   23fba:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23fbe:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   23fc0:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23fc2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   23fc6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   23fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23fce:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   23fd2:	e7af      	b.n	23f34 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   23fd4:	2200      	movs	r2, #0
   23fd6:	e7ee      	b.n	23fb6 <nrfx_gpiote_input_configure+0x126>
   23fd8:	200006d4 	.word	0x200006d4
   23fdc:	0bad0004 	.word	0x0bad0004
   23fe0:	40006000 	.word	0x40006000
   23fe4:	0bad0000 	.word	0x0bad0000
   23fe8:	20000748 	.word	0x20000748

00023fec <nrfx_gpiote_output_configure>:
{
   23fec:	b5f0      	push	{r4, r5, r6, r7, lr}
   23fee:	4604      	mov	r4, r0
   23ff0:	b085      	sub	sp, #20
   23ff2:	4615      	mov	r5, r2
    if (p_config)
   23ff4:	b319      	cbz	r1, 2403e <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23ff6:	4e33      	ldr	r6, [pc, #204]	; (240c4 <nrfx_gpiote_output_configure+0xd8>)
   23ff8:	f100 0708 	add.w	r7, r0, #8
   23ffc:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   24000:	0793      	lsls	r3, r2, #30
   24002:	d403      	bmi.n	2400c <nrfx_gpiote_output_configure+0x20>
   24004:	f7ff fed6 	bl	23db4 <pin_in_use_by_te>
   24008:	2800      	cmp	r0, #0
   2400a:	d158      	bne.n	240be <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   2400c:	f012 0f1c 	tst.w	r2, #28
   24010:	d002      	beq.n	24018 <nrfx_gpiote_output_configure+0x2c>
   24012:	784b      	ldrb	r3, [r1, #1]
   24014:	2b01      	cmp	r3, #1
   24016:	d052      	beq.n	240be <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   24018:	2301      	movs	r3, #1
   2401a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   2401e:	2300      	movs	r3, #0
   24020:	e9cd 1300 	strd	r1, r3, [sp]
   24024:	1c4a      	adds	r2, r1, #1
   24026:	1c8b      	adds	r3, r1, #2
   24028:	4620      	mov	r0, r4
   2402a:	f10d 010f 	add.w	r1, sp, #15
   2402e:	f00a fdc2 	bl	2ebb6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   24032:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   24036:	f043 0303 	orr.w	r3, r3, #3
   2403a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   2403e:	b915      	cbnz	r5, 24046 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   24040:	4821      	ldr	r0, [pc, #132]	; (240c8 <nrfx_gpiote_output_configure+0xdc>)
}
   24042:	b005      	add	sp, #20
   24044:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   24046:	4e1f      	ldr	r6, [pc, #124]	; (240c4 <nrfx_gpiote_output_configure+0xd8>)
   24048:	f104 0708 	add.w	r7, r4, #8
   2404c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   24050:	0783      	lsls	r3, r0, #30
   24052:	d534      	bpl.n	240be <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   24054:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   24058:	4661      	mov	r1, ip
   2405a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2405c:	f020 0020 	bic.w	r0, r0, #32
   24060:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   24064:	04c0      	lsls	r0, r0, #19
   24066:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   2406a:	0cc0      	lsrs	r0, r0, #19
   2406c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   24070:	2300      	movs	r3, #0
   24072:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   24076:	786a      	ldrb	r2, [r5, #1]
   24078:	2a00      	cmp	r2, #0
   2407a:	d0e1      	beq.n	24040 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2407c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   24080:	78ad      	ldrb	r5, [r5, #2]
   24082:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   24086:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2408a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2408e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   24092:	0223      	lsls	r3, r4, #8
   24094:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   24098:	0412      	lsls	r2, r2, #16
   2409a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2409e:	ea43 030e 	orr.w	r3, r3, lr
   240a2:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   240a4:	052a      	lsls	r2, r5, #20
   240a6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   240aa:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   240ae:	4313      	orrs	r3, r2
   240b0:	f040 0020 	orr.w	r0, r0, #32
   240b4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   240b8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   240bc:	e7c0      	b.n	24040 <nrfx_gpiote_output_configure+0x54>
{
   240be:	4803      	ldr	r0, [pc, #12]	; (240cc <nrfx_gpiote_output_configure+0xe0>)
   240c0:	e7bf      	b.n	24042 <nrfx_gpiote_output_configure+0x56>
   240c2:	bf00      	nop
   240c4:	200006d4 	.word	0x200006d4
   240c8:	0bad0000 	.word	0x0bad0000
   240cc:	0bad0004 	.word	0x0bad0004

000240d0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   240d0:	4b01      	ldr	r3, [pc, #4]	; (240d8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   240d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   240d6:	4770      	bx	lr
   240d8:	200006d4 	.word	0x200006d4

000240dc <nrfx_gpiote_channel_get>:
{
   240dc:	b508      	push	{r3, lr}
   240de:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   240e0:	f7ff fe68 	bl	23db4 <pin_in_use_by_te>
   240e4:	b138      	cbz	r0, 240f6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   240e6:	4b05      	ldr	r3, [pc, #20]	; (240fc <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   240e8:	4805      	ldr	r0, [pc, #20]	; (24100 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   240ea:	3208      	adds	r2, #8
   240ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   240f0:	0b5b      	lsrs	r3, r3, #13
   240f2:	700b      	strb	r3, [r1, #0]
}
   240f4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   240f6:	4803      	ldr	r0, [pc, #12]	; (24104 <nrfx_gpiote_channel_get+0x28>)
   240f8:	e7fc      	b.n	240f4 <nrfx_gpiote_channel_get+0x18>
   240fa:	bf00      	nop
   240fc:	200006d4 	.word	0x200006d4
   24100:	0bad0000 	.word	0x0bad0000
   24104:	0bad0004 	.word	0x0bad0004

00024108 <nrfx_gpiote_init>:
{
   24108:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2410a:	4c0f      	ldr	r4, [pc, #60]	; (24148 <nrfx_gpiote_init+0x40>)
   2410c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   24110:	b9bd      	cbnz	r5, 24142 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   24112:	2260      	movs	r2, #96	; 0x60
   24114:	4629      	mov	r1, r5
   24116:	f104 0010 	add.w	r0, r4, #16
   2411a:	f007 fdcc 	bl	2bcb6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   2411e:	2006      	movs	r0, #6
   24120:	f7f1 f954 	bl	153cc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   24124:	4b09      	ldr	r3, [pc, #36]	; (2414c <nrfx_gpiote_init+0x44>)
    return err_code;
   24126:	480a      	ldr	r0, [pc, #40]	; (24150 <nrfx_gpiote_init+0x48>)
   24128:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   2412c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   24130:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   24134:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   24138:	2301      	movs	r3, #1
   2413a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   2413e:	6763      	str	r3, [r4, #116]	; 0x74
}
   24140:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   24142:	4804      	ldr	r0, [pc, #16]	; (24154 <nrfx_gpiote_init+0x4c>)
   24144:	e7fc      	b.n	24140 <nrfx_gpiote_init+0x38>
   24146:	bf00      	nop
   24148:	200006d4 	.word	0x200006d4
   2414c:	40006000 	.word	0x40006000
   24150:	0bad0000 	.word	0x0bad0000
   24154:	0bad0005 	.word	0x0bad0005

00024158 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   24158:	4b03      	ldr	r3, [pc, #12]	; (24168 <nrfx_gpiote_is_init+0x10>)
   2415a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   2415e:	3800      	subs	r0, #0
   24160:	bf18      	it	ne
   24162:	2001      	movne	r0, #1
   24164:	4770      	bx	lr
   24166:	bf00      	nop
   24168:	200006d4 	.word	0x200006d4

0002416c <nrfx_gpiote_channel_free>:
{
   2416c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   2416e:	4801      	ldr	r0, [pc, #4]	; (24174 <nrfx_gpiote_channel_free+0x8>)
   24170:	f7ff bdf2 	b.w	23d58 <nrfx_flag32_free>
   24174:	20000744 	.word	0x20000744

00024178 <nrfx_gpiote_channel_alloc>:
{
   24178:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2417a:	4801      	ldr	r0, [pc, #4]	; (24180 <nrfx_gpiote_channel_alloc+0x8>)
   2417c:	f7ff bdcc 	b.w	23d18 <nrfx_flag32_alloc>
   24180:	20000744 	.word	0x20000744

00024184 <nrfx_gpiote_trigger_enable>:
{
   24184:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24186:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   24188:	f7ff fe14 	bl	23db4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2418c:	f104 0208 	add.w	r2, r4, #8
   24190:	4b1e      	ldr	r3, [pc, #120]	; (2420c <nrfx_gpiote_trigger_enable+0x88>)
   24192:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   24196:	b1e8      	cbz	r0, 241d4 <nrfx_gpiote_trigger_enable+0x50>
   24198:	f013 0502 	ands.w	r5, r3, #2
   2419c:	d11a      	bne.n	241d4 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2419e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   241a0:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   241a2:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   241a6:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   241aa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   241ae:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   241b2:	6005      	str	r5, [r0, #0]
   241b4:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   241b6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   241ba:	f040 0001 	orr.w	r0, r0, #1
   241be:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   241c2:	b129      	cbz	r1, 241d0 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   241c4:	2201      	movs	r2, #1
   241c6:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   241ca:	4a11      	ldr	r2, [pc, #68]	; (24210 <nrfx_gpiote_trigger_enable+0x8c>)
   241cc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   241d0:	b003      	add	sp, #12
   241d2:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   241d4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   241d8:	2b04      	cmp	r3, #4
   241da:	d012      	beq.n	24202 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   241dc:	2b05      	cmp	r3, #5
   241de:	d012      	beq.n	24206 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   241e0:	a801      	add	r0, sp, #4
   241e2:	9401      	str	r4, [sp, #4]
   241e4:	f7ff fdd8 	bl	23d98 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   241e8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   241ea:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   241ee:	40d9      	lsrs	r1, r3
   241f0:	f001 0101 	and.w	r1, r1, #1
   241f4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   241f6:	4620      	mov	r0, r4
}
   241f8:	b003      	add	sp, #12
   241fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   241fe:	f00a bd23 	b.w	2ec48 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   24202:	2103      	movs	r1, #3
   24204:	e7f7      	b.n	241f6 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   24206:	2102      	movs	r1, #2
   24208:	e7f5      	b.n	241f6 <nrfx_gpiote_trigger_enable+0x72>
   2420a:	bf00      	nop
   2420c:	200006d4 	.word	0x200006d4
   24210:	40006000 	.word	0x40006000

00024214 <nrfx_gpiote_trigger_disable>:
{
   24214:	b508      	push	{r3, lr}
   24216:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   24218:	f7ff fdcc 	bl	23db4 <pin_in_use_by_te>
   2421c:	b1c0      	cbz	r0, 24250 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2421e:	f102 0108 	add.w	r1, r2, #8
   24222:	4b0e      	ldr	r3, [pc, #56]	; (2425c <nrfx_gpiote_trigger_disable+0x48>)
   24224:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   24228:	0799      	lsls	r1, r3, #30
   2422a:	d411      	bmi.n	24250 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2422c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   2422e:	2201      	movs	r2, #1
   24230:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   24232:	009b      	lsls	r3, r3, #2
   24234:	490a      	ldr	r1, [pc, #40]	; (24260 <nrfx_gpiote_trigger_disable+0x4c>)
   24236:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2423a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2423e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   24242:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   24246:	f022 0203 	bic.w	r2, r2, #3
   2424a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   2424e:	bd08      	pop	{r3, pc}
   24250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   24254:	2100      	movs	r1, #0
   24256:	4610      	mov	r0, r2
   24258:	f00a bcf6 	b.w	2ec48 <nrf_gpio_cfg_sense_set>
   2425c:	200006d4 	.word	0x200006d4
   24260:	40006000 	.word	0x40006000

00024264 <nrfx_gpiote_pin_uninit>:
{
   24264:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   24266:	4b0e      	ldr	r3, [pc, #56]	; (242a0 <nrfx_gpiote_pin_uninit+0x3c>)
   24268:	f100 0208 	add.w	r2, r0, #8
{
   2426c:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2426e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   24272:	07db      	lsls	r3, r3, #31
   24274:	d511      	bpl.n	2429a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   24276:	f7ff ffcd 	bl	24214 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   2427a:	4620      	mov	r0, r4
   2427c:	f7ff fdec 	bl	23e58 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24280:	a801      	add	r0, sp, #4
   24282:	9401      	str	r4, [sp, #4]
   24284:	f7ff fd88 	bl	23d98 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   24288:	9b01      	ldr	r3, [sp, #4]
   2428a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2428e:	2202      	movs	r2, #2
   24290:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   24294:	4803      	ldr	r0, [pc, #12]	; (242a4 <nrfx_gpiote_pin_uninit+0x40>)
}
   24296:	b002      	add	sp, #8
   24298:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2429a:	4803      	ldr	r0, [pc, #12]	; (242a8 <nrfx_gpiote_pin_uninit+0x44>)
   2429c:	e7fb      	b.n	24296 <nrfx_gpiote_pin_uninit+0x32>
   2429e:	bf00      	nop
   242a0:	200006d4 	.word	0x200006d4
   242a4:	0bad0000 	.word	0x0bad0000
   242a8:	0bad0004 	.word	0x0bad0004

000242ac <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   242ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   242b0:	4b68      	ldr	r3, [pc, #416]	; (24454 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   242b2:	4869      	ldr	r0, [pc, #420]	; (24458 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   242b4:	4969      	ldr	r1, [pc, #420]	; (2445c <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   242b6:	2600      	movs	r6, #0
{
   242b8:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   242ba:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   242bc:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   242be:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   242c0:	b135      	cbz	r5, 242d0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   242c2:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   242c6:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   242c8:	bf1e      	ittt	ne
   242ca:	601c      	strne	r4, [r3, #0]
   242cc:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   242ce:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   242d0:	3304      	adds	r3, #4
   242d2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   242d4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   242d8:	d1f1      	bne.n	242be <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   242da:	f8df 917c 	ldr.w	r9, [pc, #380]	; 24458 <nrfx_gpiote_irq_handler+0x1ac>
   242de:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   242e2:	2b00      	cmp	r3, #0
   242e4:	f000 8099 	beq.w	2441a <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   242e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   242ec:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   242f0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   242f2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   242f6:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   242fa:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   242fc:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   24300:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   24304:	f10d 0a10 	add.w	sl, sp, #16
   24308:	ea4f 1348 	mov.w	r3, r8, lsl #5
   2430c:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   2430e:	f04f 0b01 	mov.w	fp, #1
   24312:	e049      	b.n	243a8 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   24314:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   24316:	4a52      	ldr	r2, [pc, #328]	; (24460 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   24318:	fa94 f4a4 	rbit	r4, r4
   2431c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   24320:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   24322:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   24324:	f104 0308 	add.w	r3, r4, #8
   24328:	9403      	str	r4, [sp, #12]
   2432a:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   2432e:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   24332:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   24336:	fa0b f202 	lsl.w	r2, fp, r2
   2433a:	ea23 0302 	bic.w	r3, r3, r2
   2433e:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24342:	a803      	add	r0, sp, #12
   24344:	f7ff fd28 	bl	23d98 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   24348:	9b03      	ldr	r3, [sp, #12]
   2434a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2434e:	08b9      	lsrs	r1, r7, #2
   24350:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   24354:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   24358:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2435a:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   2435c:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   24360:	d52c      	bpl.n	243bc <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   24362:	4620      	mov	r0, r4
   24364:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   24366:	b2dd      	uxtb	r5, r3
   24368:	f7ff fd2e 	bl	23dc8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2436c:	a803      	add	r0, sp, #12
   2436e:	9403      	str	r4, [sp, #12]
   24370:	f7ff fd12 	bl	23d98 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   24374:	9b03      	ldr	r3, [sp, #12]
   24376:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2437a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   2437e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   24382:	429d      	cmp	r5, r3
   24384:	d107      	bne.n	24396 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   24386:	2100      	movs	r1, #0
   24388:	4620      	mov	r0, r4
   2438a:	f00a fc5d 	bl	2ec48 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   2438e:	4629      	mov	r1, r5
   24390:	4620      	mov	r0, r4
   24392:	f00a fc59 	bl	2ec48 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24396:	a803      	add	r0, sp, #12
   24398:	9403      	str	r4, [sp, #12]
   2439a:	f7ff fcfd 	bl	23d98 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   2439e:	9b03      	ldr	r3, [sp, #12]
   243a0:	fa0b f303 	lsl.w	r3, fp, r3
   243a4:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   243a8:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   243ac:	2c00      	cmp	r4, #0
   243ae:	d1b1      	bne.n	24314 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   243b0:	f1b8 0f00 	cmp.w	r8, #0
   243b4:	d11d      	bne.n	243f2 <nrfx_gpiote_irq_handler+0x146>
   243b6:	f04f 0801 	mov.w	r8, #1
   243ba:	e7a5      	b.n	24308 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   243bc:	2b02      	cmp	r3, #2
   243be:	d10c      	bne.n	243da <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   243c0:	2103      	movs	r1, #3
   243c2:	4620      	mov	r0, r4
   243c4:	f00a fc40 	bl	2ec48 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   243c8:	f005 0305 	and.w	r3, r5, #5
   243cc:	2b01      	cmp	r3, #1
   243ce:	d1e2      	bne.n	24396 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   243d0:	4639      	mov	r1, r7
   243d2:	4620      	mov	r0, r4
   243d4:	f7ff fcf8 	bl	23dc8 <call_handler>
   243d8:	e7dd      	b.n	24396 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   243da:	2102      	movs	r1, #2
   243dc:	4620      	mov	r0, r4
   243de:	9301      	str	r3, [sp, #4]
   243e0:	f00a fc32 	bl	2ec48 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   243e4:	2d03      	cmp	r5, #3
   243e6:	d0f3      	beq.n	243d0 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   243e8:	9b01      	ldr	r3, [sp, #4]
   243ea:	2b03      	cmp	r3, #3
   243ec:	d1d3      	bne.n	24396 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   243ee:	2d02      	cmp	r5, #2
   243f0:	e7ed      	b.n	243ce <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   243f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   243f6:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   243fa:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   243fe:	4919      	ldr	r1, [pc, #100]	; (24464 <nrfx_gpiote_irq_handler+0x1b8>)
   24400:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   24404:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   24406:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2440a:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   2440e:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   24410:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   24412:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   24416:	f47f af73 	bne.w	24300 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   2441a:	2401      	movs	r4, #1
    while (mask)
   2441c:	b916      	cbnz	r6, 24424 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   2441e:	b007      	add	sp, #28
   24420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   24424:	fa96 f3a6 	rbit	r3, r6
   24428:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   2442c:	fa04 f203 	lsl.w	r2, r4, r3
   24430:	009b      	lsls	r3, r3, #2
   24432:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24436:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2443a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2443e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   24442:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   24446:	f3c0 2005 	ubfx	r0, r0, #8, #6
   2444a:	f3c1 4101 	ubfx	r1, r1, #16, #2
   2444e:	f7ff fcbb 	bl	23dc8 <call_handler>
   24452:	e7e3      	b.n	2441c <nrfx_gpiote_irq_handler+0x170>
   24454:	40006100 	.word	0x40006100
   24458:	40006000 	.word	0x40006000
   2445c:	40006120 	.word	0x40006120
   24460:	200006d4 	.word	0x200006d4
   24464:	50000300 	.word	0x50000300

00024468 <nvmc_word_write>:
   24468:	4a04      	ldr	r2, [pc, #16]	; (2447c <nvmc_word_write+0x14>)
   2446a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF91_SERIES)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2446e:	07db      	lsls	r3, r3, #31
   24470:	d5fb      	bpl.n	2446a <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   24472:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   24474:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   24478:	4770      	bx	lr
   2447a:	bf00      	nop
   2447c:	4001e000 	.word	0x4001e000

00024480 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   24480:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24484:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   24486:	fbb0 f3f2 	udiv	r3, r0, r2
   2448a:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   2448e:	b973      	cbnz	r3, 244ae <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   24490:	4b08      	ldr	r3, [pc, #32]	; (244b4 <nrfx_nvmc_page_erase+0x34>)
   24492:	2202      	movs	r2, #2
   24494:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   24498:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2449c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   244a0:	07d2      	lsls	r2, r2, #31
   244a2:	d5fb      	bpl.n	2449c <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   244a4:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   244a6:	4804      	ldr	r0, [pc, #16]	; (244b8 <nrfx_nvmc_page_erase+0x38>)
   244a8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   244ac:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   244ae:	4803      	ldr	r0, [pc, #12]	; (244bc <nrfx_nvmc_page_erase+0x3c>)
}
   244b0:	4770      	bx	lr
   244b2:	bf00      	nop
   244b4:	4001e000 	.word	0x4001e000
   244b8:	0bad0000 	.word	0x0bad0000
   244bc:	0bad000a 	.word	0x0bad000a

000244c0 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   244c0:	b510      	push	{r4, lr}
   244c2:	4c05      	ldr	r4, [pc, #20]	; (244d8 <nrfx_nvmc_word_write+0x18>)
   244c4:	2301      	movs	r3, #1
   244c6:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   244ca:	f7ff ffcd 	bl	24468 <nvmc_word_write>
   244ce:	2300      	movs	r3, #0
   244d0:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   244d4:	bd10      	pop	{r4, pc}
   244d6:	bf00      	nop
   244d8:	4001e000 	.word	0x4001e000

000244dc <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   244dc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   244de:	4801      	ldr	r0, [pc, #4]	; (244e4 <nrfx_ppi_channel_alloc+0x8>)
   244e0:	f7ff bc1a 	b.w	23d18 <nrfx_flag32_alloc>
   244e4:	20000750 	.word	0x20000750

000244e8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   244e8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   244ea:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   244ee:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   244f0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   244f2:	6002      	str	r2, [r0, #0]
}
   244f4:	4802      	ldr	r0, [pc, #8]	; (24500 <nrf_gpio_pin_port_decode+0x18>)
   244f6:	bf18      	it	ne
   244f8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   244fc:	4770      	bx	lr
   244fe:	bf00      	nop
   24500:	50000300 	.word	0x50000300

00024504 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   24504:	b570      	push	{r4, r5, r6, lr}
   24506:	f000 4460 	and.w	r4, r0, #3758096384	; 0xe0000000
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
    NRFX_ASSERT(p_buffer != NULL);

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   2450a:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
   2450e:	d166      	bne.n	245de <qspi_xfer+0xda>
   24510:	0784      	lsls	r4, r0, #30
   24512:	d164      	bne.n	245de <qspi_xfer+0xda>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   24514:	4d34      	ldr	r5, [pc, #208]	; (245e8 <qspi_xfer+0xe4>)
   24516:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   2451a:	2c01      	cmp	r4, #1
   2451c:	d001      	beq.n	24522 <qspi_xfer+0x1e>
   2451e:	429c      	cmp	r4, r3
   24520:	d15f      	bne.n	245e2 <qspi_xfer+0xde>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   24522:	682c      	ldr	r4, [r5, #0]
   24524:	bb04      	cbnz	r4, 24568 <qspi_xfer+0x64>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   24526:	2b02      	cmp	r3, #2
   24528:	4b30      	ldr	r3, [pc, #192]	; (245ec <qspi_xfer+0xe8>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   2452a:	bf0b      	itete	eq
   2452c:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   24530:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   24534:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   24538:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   2453c:	bf0b      	itete	eq
   2453e:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   24542:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   24546:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   24548:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2454a:	2100      	movs	r1, #0
   2454c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24550:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   24554:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
   24558:	2201      	movs	r2, #1
   2455a:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2455c:	4a23      	ldr	r2, [pc, #140]	; (245ec <qspi_xfer+0xe8>)
   2455e:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   24562:	2b00      	cmp	r3, #0
   24564:	d0fb      	beq.n	2455e <qspi_xfer+0x5a>
   24566:	e00d      	b.n	24584 <qspi_xfer+0x80>
        if (m_cb.p_buffer_primary)
   24568:	68ae      	ldr	r6, [r5, #8]
   2456a:	4c20      	ldr	r4, [pc, #128]	; (245ec <qspi_xfer+0xe8>)
   2456c:	b166      	cbz	r6, 24588 <qspi_xfer+0x84>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   2456e:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   24570:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   24572:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   24574:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   24576:	d12b      	bne.n	245d0 <qspi_xfer+0xcc>
    p_reg->WRITE.DST = dest_addr;
   24578:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   2457c:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   24580:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   24584:	481a      	ldr	r0, [pc, #104]	; (245f0 <qspi_xfer+0xec>)
}
   24586:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   24588:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   2458a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        task = NRF_QSPI_TASK_WRITESTART;
   2458e:	bf0c      	ite	eq
   24590:	2308      	moveq	r3, #8
        task = NRF_QSPI_TASK_READSTART;
   24592:	2304      	movne	r3, #4
            m_cb.size_primary     = length;
   24594:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   24596:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   24598:	60a8      	str	r0, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2459a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    p_reg->WRITE.DST = dest_addr;
   2459e:	bf0b      	itete	eq
   245a0:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   245a4:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   245a8:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   245ac:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   245b0:	bf0c      	ite	eq
   245b2:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   245b6:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   245ba:	490c      	ldr	r1, [pc, #48]	; (245ec <qspi_xfer+0xe8>)
   245bc:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   245be:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   245c2:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   245c6:	2201      	movs	r2, #1
   245c8:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   245cc:	601a      	str	r2, [r3, #0]
}
   245ce:	e7d9      	b.n	24584 <qspi_xfer+0x80>
    p_reg->READ.SRC = src_addr;
   245d0:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   245d4:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   245d8:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   245dc:	e7d2      	b.n	24584 <qspi_xfer+0x80>
        return NRFX_ERROR_INVALID_ADDR;
   245de:	4805      	ldr	r0, [pc, #20]	; (245f4 <qspi_xfer+0xf0>)
   245e0:	e7d1      	b.n	24586 <qspi_xfer+0x82>
        return NRFX_ERROR_BUSY;
   245e2:	4805      	ldr	r0, [pc, #20]	; (245f8 <qspi_xfer+0xf4>)
   245e4:	e7cf      	b.n	24586 <qspi_xfer+0x82>
   245e6:	bf00      	nop
   245e8:	20003728 	.word	0x20003728
   245ec:	40029000 	.word	0x40029000
   245f0:	0bad0000 	.word	0x0bad0000
   245f4:	0bad000a 	.word	0x0bad000a
   245f8:	0bad000b 	.word	0x0bad000b

000245fc <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   245fc:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   245fe:	4d07      	ldr	r5, [pc, #28]	; (2461c <qspi_ready_wait+0x20>)
   24600:	f24c 3450 	movw	r4, #50000	; 0xc350
   24604:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   24608:	b933      	cbnz	r3, 24618 <qspi_ready_wait+0x1c>
   2460a:	200a      	movs	r0, #10
   2460c:	f00a fad1 	bl	2ebb2 <nrfx_busy_wait>
   24610:	3c01      	subs	r4, #1
   24612:	d1f7      	bne.n	24604 <qspi_ready_wait+0x8>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   24614:	4802      	ldr	r0, [pc, #8]	; (24620 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   24616:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   24618:	4802      	ldr	r0, [pc, #8]	; (24624 <qspi_ready_wait+0x28>)
   2461a:	e7fc      	b.n	24616 <qspi_ready_wait+0x1a>
   2461c:	40029000 	.word	0x40029000
   24620:	0bad0007 	.word	0x0bad0007
   24624:	0bad0000 	.word	0x0bad0000

00024628 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   24628:	4b08      	ldr	r3, [pc, #32]	; (2464c <qspi_event_xfer_handle.constprop.0+0x24>)
   2462a:	689a      	ldr	r2, [r3, #8]
   2462c:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   2462e:	691a      	ldr	r2, [r3, #16]
   24630:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   24632:	699a      	ldr	r2, [r3, #24]
   24634:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   24636:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   24638:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   2463a:	b132      	cbz	r2, 2464a <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   2463c:	695a      	ldr	r2, [r3, #20]
   2463e:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   24640:	69da      	ldr	r2, [r3, #28]
   24642:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   24644:	2200      	movs	r2, #0
   24646:	60da      	str	r2, [r3, #12]
   24648:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   2464a:	4770      	bx	lr
   2464c:	20003728 	.word	0x20003728

00024650 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   24650:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   24652:	4b0e      	ldr	r3, [pc, #56]	; (2468c <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   24654:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   24656:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   2465a:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   2465e:	2807      	cmp	r0, #7
   24660:	d813      	bhi.n	2468a <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   24662:	e8df f000 	tbb	[pc, r0]
   24666:	0f11      	.short	0x0f11
   24668:	080a0b0d 	.word	0x080a0b0d
   2466c:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   2466e:	0e10      	lsrs	r0, r2, #24
   24670:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   24672:	0c10      	lsrs	r0, r2, #16
   24674:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   24676:	0a10      	lsrs	r0, r2, #8
   24678:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   2467a:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   2467c:	0e1a      	lsrs	r2, r3, #24
   2467e:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   24680:	0c1a      	lsrs	r2, r3, #16
   24682:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   24684:	0a1a      	lsrs	r2, r3, #8
   24686:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   24688:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   2468a:	bd10      	pop	{r4, pc}
   2468c:	40029000 	.word	0x40029000

00024690 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   24690:	3802      	subs	r0, #2
   24692:	2807      	cmp	r0, #7
   24694:	d81f      	bhi.n	246d6 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   24696:	e8df f000 	tbb	[pc, r0]
   2469a:	2729      	.short	0x2729
   2469c:	21231125 	.word	0x21231125
   246a0:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   246a2:	79cb      	ldrb	r3, [r1, #7]
   246a4:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   246a6:	798a      	ldrb	r2, [r1, #6]
   246a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   246ac:	794a      	ldrb	r2, [r1, #5]
   246ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   246b2:	790a      	ldrb	r2, [r1, #4]
   246b4:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   246b6:	4a0e      	ldr	r2, [pc, #56]	; (246f0 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   246b8:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   246bc:	78cb      	ldrb	r3, [r1, #3]
   246be:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   246c0:	788a      	ldrb	r2, [r1, #2]
   246c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   246c6:	784a      	ldrb	r2, [r1, #1]
   246c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   246cc:	780a      	ldrb	r2, [r1, #0]
   246ce:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   246d0:	4a07      	ldr	r2, [pc, #28]	; (246f0 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   246d2:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   246d6:	4770      	bx	lr
    switch (length)
   246d8:	2300      	movs	r3, #0
   246da:	e7e4      	b.n	246a6 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   246dc:	2300      	movs	r3, #0
   246de:	e7e5      	b.n	246ac <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   246e0:	2300      	movs	r3, #0
   246e2:	e7e6      	b.n	246b2 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   246e4:	2300      	movs	r3, #0
   246e6:	e7eb      	b.n	246c0 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   246e8:	2300      	movs	r3, #0
   246ea:	e7ec      	b.n	246c6 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   246ec:	2300      	movs	r3, #0
   246ee:	e7ed      	b.n	246cc <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   246f0:	40029000 	.word	0x40029000

000246f4 <nrfx_qspi_init>:
{
   246f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   246f8:	4d71      	ldr	r5, [pc, #452]	; (248c0 <nrfx_qspi_init+0x1cc>)
   246fa:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
{
   246fe:	4604      	mov	r4, r0
   24700:	460e      	mov	r6, r1
   24702:	4617      	mov	r7, r2
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   24704:	2b00      	cmp	r3, #0
   24706:	f040 80d5 	bne.w	248b4 <nrfx_qspi_init+0x1c0>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   2470a:	7cc2      	ldrb	r2, [r0, #19]
   2470c:	b11a      	cbz	r2, 24716 <nrfx_qspi_init+0x22>
   2470e:	7d03      	ldrb	r3, [r0, #20]
   24710:	2b00      	cmp	r3, #0
   24712:	f040 8084 	bne.w	2481e <nrfx_qspi_init+0x12a>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   24716:	7923      	ldrb	r3, [r4, #4]
   24718:	2bff      	cmp	r3, #255	; 0xff
   2471a:	f000 80cf 	beq.w	248bc <nrfx_qspi_init+0x1c8>
   2471e:	7961      	ldrb	r1, [r4, #5]
   24720:	29ff      	cmp	r1, #255	; 0xff
   24722:	f000 80cb 	beq.w	248bc <nrfx_qspi_init+0x1c8>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   24726:	79a1      	ldrb	r1, [r4, #6]
   24728:	29ff      	cmp	r1, #255	; 0xff
   2472a:	f000 80c7 	beq.w	248bc <nrfx_qspi_init+0x1c8>
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   2472e:	79e1      	ldrb	r1, [r4, #7]
   24730:	29ff      	cmp	r1, #255	; 0xff
   24732:	f000 80c3 	beq.w	248bc <nrfx_qspi_init+0x1c8>
    if (!p_config->skip_gpio_cfg)
   24736:	2a00      	cmp	r2, #0
   24738:	d142      	bne.n	247c0 <nrfx_qspi_init+0xcc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2473a:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   2473c:	9301      	str	r3, [sp, #4]
   2473e:	f7ff fed3 	bl	244e8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   24742:	9b01      	ldr	r3, [sp, #4]
   24744:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   24748:	f240 3102 	movw	r1, #770	; 0x302
   2474c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24750:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   24752:	7963      	ldrb	r3, [r4, #5]
   24754:	9301      	str	r3, [sp, #4]
   24756:	f7ff fec7 	bl	244e8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2475a:	9b01      	ldr	r3, [sp, #4]
   2475c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   24760:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24764:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   24766:	79a3      	ldrb	r3, [r4, #6]
   24768:	9301      	str	r3, [sp, #4]
   2476a:	f7ff febd 	bl	244e8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2476e:	9b01      	ldr	r3, [sp, #4]
   24770:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   24774:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24778:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   2477a:	79e3      	ldrb	r3, [r4, #7]
   2477c:	9301      	str	r3, [sp, #4]
   2477e:	f7ff feb3 	bl	244e8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   24782:	9b01      	ldr	r3, [sp, #4]
   24784:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   24788:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   2478c:	7a23      	ldrb	r3, [r4, #8]
   2478e:	2bff      	cmp	r3, #255	; 0xff
   24790:	d008      	beq.n	247a4 <nrfx_qspi_init+0xb0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24792:	a801      	add	r0, sp, #4
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   24794:	9301      	str	r3, [sp, #4]
   24796:	f7ff fea7 	bl	244e8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2479a:	9b01      	ldr	r3, [sp, #4]
   2479c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   247a0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   247a4:	7a63      	ldrb	r3, [r4, #9]
   247a6:	2bff      	cmp	r3, #255	; 0xff
   247a8:	d00a      	beq.n	247c0 <nrfx_qspi_init+0xcc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   247aa:	a801      	add	r0, sp, #4
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   247ac:	9301      	str	r3, [sp, #4]
   247ae:	f7ff fe9b 	bl	244e8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   247b2:	9b01      	ldr	r3, [sp, #4]
   247b4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   247b8:	f240 3202 	movw	r2, #770	; 0x302
   247bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   247c0:	7d23      	ldrb	r3, [r4, #20]
   247c2:	bb63      	cbnz	r3, 2481e <nrfx_qspi_init+0x12a>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   247c4:	7923      	ldrb	r3, [r4, #4]
   247c6:	2bff      	cmp	r3, #255	; 0xff
   247c8:	bf18      	it	ne
   247ca:	461a      	movne	r2, r3
   247cc:	4b3d      	ldr	r3, [pc, #244]	; (248c4 <nrfx_qspi_init+0x1d0>)
   247ce:	bf08      	it	eq
   247d0:	f04f 32ff 	moveq.w	r2, #4294967295
   247d4:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   247d8:	7962      	ldrb	r2, [r4, #5]
   247da:	2aff      	cmp	r2, #255	; 0xff
   247dc:	bf08      	it	eq
   247de:	f04f 32ff 	moveq.w	r2, #4294967295
   247e2:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   247e6:	79a2      	ldrb	r2, [r4, #6]
   247e8:	2aff      	cmp	r2, #255	; 0xff
   247ea:	bf08      	it	eq
   247ec:	f04f 32ff 	moveq.w	r2, #4294967295
   247f0:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   247f4:	79e2      	ldrb	r2, [r4, #7]
   247f6:	2aff      	cmp	r2, #255	; 0xff
   247f8:	bf08      	it	eq
   247fa:	f04f 32ff 	moveq.w	r2, #4294967295
   247fe:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   24802:	7a22      	ldrb	r2, [r4, #8]
   24804:	2aff      	cmp	r2, #255	; 0xff
   24806:	bf08      	it	eq
   24808:	f04f 32ff 	moveq.w	r2, #4294967295
   2480c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   24810:	7a62      	ldrb	r2, [r4, #9]
   24812:	2aff      	cmp	r2, #255	; 0xff
   24814:	bf08      	it	eq
   24816:	f04f 32ff 	moveq.w	r2, #4294967295
   2481a:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->INTENCLR = mask;
   2481e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 248c4 <nrfx_qspi_init+0x1d0>
   24822:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24824:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   24826:	f8c8 3308 	str.w	r3, [r8, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2482a:	f8c8 2100 	str.w	r2, [r8, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2482e:	f8c8 3000 	str.w	r3, [r8]
        if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   24832:	f7ff fee3 	bl	245fc <qspi_ready_wait>
   24836:	4b24      	ldr	r3, [pc, #144]	; (248c8 <nrfx_qspi_init+0x1d4>)
   24838:	4298      	cmp	r0, r3
   2483a:	d03c      	beq.n	248b6 <nrfx_qspi_init+0x1c2>
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   2483c:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   2483e:	f8c8 3540 	str.w	r3, [r8, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   24842:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   24844:	7ae1      	ldrb	r1, [r4, #11]
    uint32_t config = p_config->readoc;
   24846:	7aa2      	ldrb	r2, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   24848:	019b      	lsls	r3, r3, #6
   2484a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
   2484e:	4313      	orrs	r3, r2
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   24850:	7b62      	ldrb	r2, [r4, #13]
   24852:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    p_reg->IFCONFIG0 = config;
   24856:	f8c8 3544 	str.w	r3, [r8, #1348]	; 0x544
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   2485a:	f8d8 2600 	ldr.w	r2, [r8, #1536]	; 0x600
    config |= p_config->sck_delay;
   2485e:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   24860:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   24864:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    config |= p_config->sck_delay;
   24868:	4313      	orrs	r3, r2
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   2486a:	7be2      	ldrb	r2, [r4, #15]
   2486c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   24870:	7c22      	ldrb	r2, [r4, #16]
   24872:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   24876:	7c62      	ldrb	r2, [r4, #17]
   24878:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    p_reg->IFCONFIG1 = config;
   2487c:	f8c8 3600 	str.w	r3, [r8, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   24880:	7ce3      	ldrb	r3, [r4, #19]
   24882:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    m_cb.p_context = p_context;
   24886:	e9c5 6700 	strd	r6, r7, [r5]
    if (handler)
   2488a:	b116      	cbz	r6, 24892 <nrfx_qspi_init+0x19e>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   2488c:	2029      	movs	r0, #41	; 0x29
   2488e:	f7f0 fd9d 	bl	153cc <arch_irq_enable>
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   24892:	4b0c      	ldr	r3, [pc, #48]	; (248c4 <nrfx_qspi_init+0x1d0>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   24894:	2201      	movs	r2, #1
    m_cb.p_buffer_primary = NULL;
   24896:	2100      	movs	r1, #0
    m_cb.p_buffer_secondary = NULL;
   24898:	e9c5 1102 	strd	r1, r1, [r5, #8]
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   2489c:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
   248a0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   248a4:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   248a8:	601a      	str	r2, [r3, #0]
}
   248aa:	b002      	add	sp, #8
   248ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return qspi_ready_wait();
   248b0:	f7ff bea4 	b.w	245fc <qspi_ready_wait>
        return NRFX_ERROR_INVALID_STATE;
   248b4:	4805      	ldr	r0, [pc, #20]	; (248cc <nrfx_qspi_init+0x1d8>)
}
   248b6:	b002      	add	sp, #8
   248b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INVALID_PARAM;
   248bc:	4804      	ldr	r0, [pc, #16]	; (248d0 <nrfx_qspi_init+0x1dc>)
   248be:	e7fa      	b.n	248b6 <nrfx_qspi_init+0x1c2>
   248c0:	20003728 	.word	0x20003728
   248c4:	40029000 	.word	0x40029000
   248c8:	0bad0007 	.word	0x0bad0007
   248cc:	0bad0005 	.word	0x0bad0005
   248d0:	0bad0004 	.word	0x0bad0004

000248d4 <nrfx_qspi_cinstr_xfer>:
{
   248d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   248d8:	4615      	mov	r5, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   248da:	4a1f      	ldr	r2, [pc, #124]	; (24958 <nrfx_qspi_cinstr_xfer+0x84>)
   248dc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   248e0:	2a01      	cmp	r2, #1
{
   248e2:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   248e4:	d135      	bne.n	24952 <nrfx_qspi_cinstr_xfer+0x7e>
    if (p_tx_buffer)
   248e6:	b111      	cbz	r1, 248ee <nrfx_qspi_cinstr_xfer+0x1a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   248e8:	7840      	ldrb	r0, [r0, #1]
   248ea:	f7ff fed1 	bl	24690 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   248ee:	4e1b      	ldr	r6, [pc, #108]	; (2495c <nrfx_qspi_cinstr_xfer+0x88>)
        if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   248f0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 24960 <nrfx_qspi_cinstr_xfer+0x8c>
   248f4:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   248f6:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
   248f8:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   248fc:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24900:	6033      	str	r3, [r6, #0]
   24902:	f7ff fe7b 	bl	245fc <qspi_ready_wait>
   24906:	4540      	cmp	r0, r8
   24908:	d102      	bne.n	24910 <nrfx_qspi_cinstr_xfer+0x3c>
            return NRFX_ERROR_TIMEOUT;
   2490a:	4815      	ldr	r0, [pc, #84]	; (24960 <nrfx_qspi_cinstr_xfer+0x8c>)
}
   2490c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24910:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
NRF_STATIC_INLINE void nrf_qspi_cinstr_transfer_start(NRF_QSPI_Type *                p_reg,
                                                      nrf_qspi_cinstr_conf_t const * p_config)
{
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   24914:	78a3      	ldrb	r3, [r4, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   24916:	7862      	ldrb	r2, [r4, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   24918:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   2491a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   2491e:	7822      	ldrb	r2, [r4, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   24920:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   24922:	78e2      	ldrb	r2, [r4, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   24924:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   24928:	7922      	ldrb	r2, [r4, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   2492a:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   2492e:	7962      	ldrb	r2, [r4, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   24930:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   24934:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   24938:	f7ff fe60 	bl	245fc <qspi_ready_wait>
   2493c:	4540      	cmp	r0, r8
   2493e:	d0e4      	beq.n	2490a <nrfx_qspi_cinstr_xfer+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24940:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
    if (p_rx_buffer)
   24944:	b11d      	cbz	r5, 2494e <nrfx_qspi_cinstr_xfer+0x7a>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   24946:	7860      	ldrb	r0, [r4, #1]
   24948:	4629      	mov	r1, r5
   2494a:	f7ff fe81 	bl	24650 <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   2494e:	4805      	ldr	r0, [pc, #20]	; (24964 <nrfx_qspi_cinstr_xfer+0x90>)
   24950:	e7dc      	b.n	2490c <nrfx_qspi_cinstr_xfer+0x38>
        return NRFX_ERROR_BUSY;
   24952:	4805      	ldr	r0, [pc, #20]	; (24968 <nrfx_qspi_cinstr_xfer+0x94>)
   24954:	e7da      	b.n	2490c <nrfx_qspi_cinstr_xfer+0x38>
   24956:	bf00      	nop
   24958:	20003728 	.word	0x20003728
   2495c:	40029000 	.word	0x40029000
   24960:	0bad0007 	.word	0x0bad0007
   24964:	0bad0000 	.word	0x0bad0000
   24968:	0bad000b 	.word	0x0bad000b

0002496c <nrfx_qspi_mem_busy_check>:
{
   2496c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_qspi_cinstr_conf_t const config = {
   2496e:	4a0d      	ldr	r2, [pc, #52]	; (249a4 <nrfx_qspi_mem_busy_check+0x38>)
   24970:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   24972:	f10d 0207 	add.w	r2, sp, #7
    uint8_t status_value = 0;
   24976:	2300      	movs	r3, #0
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   24978:	4611      	mov	r1, r2
   2497a:	a802      	add	r0, sp, #8
    uint8_t status_value = 0;
   2497c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   24980:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   24984:	f7ff ffa6 	bl	248d4 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   24988:	4b07      	ldr	r3, [pc, #28]	; (249a8 <nrfx_qspi_mem_busy_check+0x3c>)
   2498a:	4298      	cmp	r0, r3
   2498c:	d106      	bne.n	2499c <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   2498e:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   24992:	f013 0f01 	tst.w	r3, #1
   24996:	4b05      	ldr	r3, [pc, #20]	; (249ac <nrfx_qspi_mem_busy_check+0x40>)
   24998:	bf18      	it	ne
   2499a:	4618      	movne	r0, r3
}
   2499c:	b005      	add	sp, #20
   2499e:	f85d fb04 	ldr.w	pc, [sp], #4
   249a2:	bf00      	nop
   249a4:	01000205 	.word	0x01000205
   249a8:	0bad0000 	.word	0x0bad0000
   249ac:	0bad000b 	.word	0x0bad000b

000249b0 <nrfx_qspi_uninit>:
{
   249b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   249b4:	2029      	movs	r0, #41	; 0x29
   249b6:	f7f0 fd17 	bl	153e8 <arch_irq_disable>
                         (QSPI_CINSTRCONF_LFEN_Msk));
}

NRF_STATIC_INLINE bool nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI_Type const * p_reg)
{
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   249ba:	4b24      	ldr	r3, [pc, #144]	; (24a4c <nrfx_qspi_uninit+0x9c>)
    if (!m_cb.skip_gpio_cfg)
   249bc:	4d24      	ldr	r5, [pc, #144]	; (24a50 <nrfx_qspi_uninit+0xa0>)
   249be:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   249c2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   249c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
                                                              bool                  finalize)
{
    uint32_t mask = (((uint32_t)length << QSPI_CINSTRCONF_LENGTH_Pos) | (QSPI_CINSTRCONF_LFEN_Msk));
    mask |= (finalize ? QSPI_CINSTRCONF_LFSTOP_Msk : 0);

    p_reg->CINSTRCONF = mask;
   249ca:	bf04      	itt	eq
   249cc:	4a21      	ldreq	r2, [pc, #132]	; (24a54 <nrfx_qspi_uninit+0xa4>)
   249ce:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   249d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    p_reg->INTENCLR = mask;
   249d6:	2201      	movs	r2, #1
   249d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   249dc:	611a      	str	r2, [r3, #16]
            if (var1 == 0x08)
   249de:	f8d1 1130 	ldr.w	r1, [r1, #304]	; 0x130
   249e2:	2908      	cmp	r1, #8
        *(volatile uint32_t *)0x40029054ul = 1ul;
   249e4:	bf08      	it	eq
   249e6:	655a      	streq	r2, [r3, #84]	; 0x54
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   249e8:	4b18      	ldr	r3, [pc, #96]	; (24a4c <nrfx_qspi_uninit+0x9c>)
   249ea:	2200      	movs	r2, #0
   249ec:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   249f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   249f4:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
   249f8:	bb1a      	cbnz	r2, 24a42 <nrfx_qspi_uninit+0x92>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   249fa:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   249fe:	f8d3 8528 	ldr.w	r8, [r3, #1320]	; 0x528
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   24a02:	f8d3 7530 	ldr.w	r7, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   24a06:	f8d3 6534 	ldr.w	r6, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   24a0a:	f8d3 4538 	ldr.w	r4, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   24a0e:	f8d3 153c 	ldr.w	r1, [r3, #1340]	; 0x53c
    nrf_gpio_cfg_default(pins.sck_pin);
   24a12:	b2c0      	uxtb	r0, r0
   24a14:	f00a f935 	bl	2ec82 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   24a18:	fa5f f088 	uxtb.w	r0, r8
   24a1c:	f00a f931 	bl	2ec82 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   24a20:	b2f8      	uxtb	r0, r7
   24a22:	f00a f92e 	bl	2ec82 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   24a26:	b2f0      	uxtb	r0, r6
   24a28:	f00a f92b 	bl	2ec82 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   24a2c:	b2e0      	uxtb	r0, r4
   24a2e:	28ff      	cmp	r0, #255	; 0xff
   24a30:	b2c9      	uxtb	r1, r1
   24a32:	d001      	beq.n	24a38 <nrfx_qspi_uninit+0x88>
        nrf_gpio_cfg_default(pins.io2_pin);
   24a34:	f00a f925 	bl	2ec82 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   24a38:	29ff      	cmp	r1, #255	; 0xff
   24a3a:	d002      	beq.n	24a42 <nrfx_qspi_uninit+0x92>
        nrf_gpio_cfg_default(pins.io3_pin);
   24a3c:	4608      	mov	r0, r1
   24a3e:	f00a f920 	bl	2ec82 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   24a42:	2300      	movs	r3, #0
   24a44:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
   24a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24a4c:	40029000 	.word	0x40029000
   24a50:	20003728 	.word	0x20003728
   24a54:	00030100 	.word	0x00030100

00024a58 <nrfx_qspi_erase>:
    if (!nrfx_is_word_aligned((void const *)start_address))
   24a58:	078b      	lsls	r3, r1, #30
   24a5a:	d121      	bne.n	24aa0 <nrfx_qspi_erase+0x48>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   24a5c:	4a12      	ldr	r2, [pc, #72]	; (24aa8 <nrfx_qspi_erase+0x50>)
   24a5e:	6813      	ldr	r3, [r2, #0]
   24a60:	b11b      	cbz	r3, 24a6a <nrfx_qspi_erase+0x12>
   24a62:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   24a66:	2b01      	cmp	r3, #1
   24a68:	d11c      	bne.n	24aa4 <nrfx_qspi_erase+0x4c>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   24a6a:	2304      	movs	r3, #4
   24a6c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   24a70:	4b0e      	ldr	r3, [pc, #56]	; (24aac <nrfx_qspi_erase+0x54>)
   24a72:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24a76:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   24a78:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24a7c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24a80:	2101      	movs	r1, #1
   24a82:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   24a84:	6810      	ldr	r0, [r2, #0]
   24a86:	b940      	cbnz	r0, 24a9a <nrfx_qspi_erase+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24a88:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   24a8c:	2900      	cmp	r1, #0
   24a8e:	d0fb      	beq.n	24a88 <nrfx_qspi_erase+0x30>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   24a90:	2301      	movs	r3, #1
   24a92:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   24a96:	4806      	ldr	r0, [pc, #24]	; (24ab0 <nrfx_qspi_erase+0x58>)
   24a98:	4770      	bx	lr
    p_reg->INTENSET = mask;
   24a9a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   24a9e:	e7fa      	b.n	24a96 <nrfx_qspi_erase+0x3e>
        return NRFX_ERROR_INVALID_ADDR;
   24aa0:	4804      	ldr	r0, [pc, #16]	; (24ab4 <nrfx_qspi_erase+0x5c>)
   24aa2:	4770      	bx	lr
        return NRFX_ERROR_BUSY;
   24aa4:	4804      	ldr	r0, [pc, #16]	; (24ab8 <nrfx_qspi_erase+0x60>)
}
   24aa6:	4770      	bx	lr
   24aa8:	20003728 	.word	0x20003728
   24aac:	40029000 	.word	0x40029000
   24ab0:	0bad0000 	.word	0x0bad0000
   24ab4:	0bad000a 	.word	0x0bad000a
   24ab8:	0bad000b 	.word	0x0bad000b

00024abc <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   24abc:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24abe:	4b17      	ldr	r3, [pc, #92]	; (24b1c <nrfx_qspi_irq_handler+0x60>)
   24ac0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   24ac4:	b1e2      	cbz	r2, 24b00 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24ac6:	2200      	movs	r2, #0
    switch (m_cb.state)
   24ac8:	4c15      	ldr	r4, [pc, #84]	; (24b20 <nrfx_qspi_irq_handler+0x64>)
   24aca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   24ace:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   24ad2:	2a03      	cmp	r2, #3
   24ad4:	d015      	beq.n	24b02 <nrfx_qspi_irq_handler+0x46>
   24ad6:	2a04      	cmp	r2, #4
   24ad8:	d015      	beq.n	24b06 <nrfx_qspi_irq_handler+0x4a>
   24ada:	2a02      	cmp	r2, #2
   24adc:	d104      	bne.n	24ae8 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   24ade:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   24ae0:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   24ae4:	f7ff fda0 	bl	24628 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   24ae8:	68a3      	ldr	r3, [r4, #8]
   24aea:	b913      	cbnz	r3, 24af2 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   24aec:	2301      	movs	r3, #1
   24aee:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   24af2:	e9d4 3100 	ldrd	r3, r1, [r4]
   24af6:	2000      	movs	r0, #0
   24af8:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   24afa:	2300      	movs	r3, #0
   24afc:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   24b00:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   24b02:	2302      	movs	r3, #2
   24b04:	e7ec      	b.n	24ae0 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   24b06:	2203      	movs	r2, #3
   24b08:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   24b0c:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   24b10:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   24b12:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   24b16:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   24b1a:	e7e5      	b.n	24ae8 <nrfx_qspi_irq_handler+0x2c>
   24b1c:	40029000 	.word	0x40029000
   24b20:	20003728 	.word	0x20003728

00024b24 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   24b24:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   24b26:	4c11      	ldr	r4, [pc, #68]	; (24b6c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   24b28:	4a11      	ldr	r2, [pc, #68]	; (24b70 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   24b2a:	4912      	ldr	r1, [pc, #72]	; (24b74 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   24b2c:	2303      	movs	r3, #3
   24b2e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   24b30:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   24b32:	4b11      	ldr	r3, [pc, #68]	; (24b78 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   24b34:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   24b36:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   24b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
   24b3c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   24b3e:	2300      	movs	r3, #0
   24b40:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   24b42:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   24b44:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   24b46:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   24b48:	4a0c      	ldr	r2, [pc, #48]	; (24b7c <_DoInit+0x58>)
   24b4a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   24b4c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   24b4e:	2210      	movs	r2, #16
   24b50:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   24b52:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   24b54:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   24b56:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   24b58:	f007 f841 	bl	2bbde <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   24b5c:	4908      	ldr	r1, [pc, #32]	; (24b80 <_DoInit+0x5c>)
   24b5e:	4620      	mov	r0, r4
   24b60:	f007 f83d 	bl	2bbde <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   24b64:	2320      	movs	r3, #32
   24b66:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   24b68:	bd10      	pop	{r4, pc}
   24b6a:	bf00      	nop
   24b6c:	2000375c 	.word	0x2000375c
   24b70:	00034e36 	.word	0x00034e36
   24b74:	00034e3f 	.word	0x00034e3f
   24b78:	2000458d 	.word	0x2000458d
   24b7c:	2000457d 	.word	0x2000457d
   24b80:	00034e43 	.word	0x00034e43

00024b84 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24b84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   24b88:	4f21      	ldr	r7, [pc, #132]	; (24c10 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   24b8a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24b8e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   24b90:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24b94:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   24b96:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   24b98:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   24b9a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24b9c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   24b9e:	d831      	bhi.n	24c04 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   24ba0:	f8d2 a020 	ldr.w	sl, [r2, #32]
   24ba4:	ebaa 0905 	sub.w	r9, sl, r5
   24ba8:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   24bac:	4294      	cmp	r4, r2
   24bae:	d811      	bhi.n	24bd4 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   24bb0:	2318      	movs	r3, #24
   24bb2:	fb06 3303 	mla	r3, r6, r3, r3
   24bb6:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   24bb8:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   24bba:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   24bbc:	4641      	mov	r1, r8
   24bbe:	4428      	add	r0, r5
   24bc0:	f007 f86e 	bl	2bca0 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   24bc4:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   24bc6:	2318      	movs	r3, #24
   24bc8:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   24bcc:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   24bce:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   24bd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   24bd4:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   24bd6:	429c      	cmp	r4, r3
   24bd8:	d818      	bhi.n	24c0c <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   24bda:	fb00 bb0b 	mla	fp, r0, fp, fp
   24bde:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   24be0:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   24be2:	f8db 0004 	ldr.w	r0, [fp, #4]
   24be6:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   24be8:	4428      	add	r0, r5
   24bea:	f007 f859 	bl	2bca0 <memcpy>
      if (NumBytes) {
   24bee:	ebb4 040a 	subs.w	r4, r4, sl
   24bf2:	d0e8      	beq.n	24bc6 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   24bf4:	f8db 0004 	ldr.w	r0, [fp, #4]
   24bf8:	4622      	mov	r2, r4
   24bfa:	eb08 0109 	add.w	r1, r8, r9
   24bfe:	f007 f84f 	bl	2bca0 <memcpy>
      return 1;
   24c02:	e7e0      	b.n	24bc6 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   24c04:	3b01      	subs	r3, #1
   24c06:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   24c08:	42a3      	cmp	r3, r4
   24c0a:	d2d1      	bcs.n	24bb0 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   24c0c:	2000      	movs	r0, #0
   24c0e:	e7df      	b.n	24bd0 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   24c10:	2000375c 	.word	0x2000375c

00024c14 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   24c14:	4b03      	ldr	r3, [pc, #12]	; (24c24 <SEGGER_RTT_HasDataUp+0x10>)
   24c16:	2218      	movs	r2, #24
   24c18:	fb02 3300 	mla	r3, r2, r0, r3
   24c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   24c1e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   24c20:	1a80      	subs	r0, r0, r2
   24c22:	4770      	bx	lr
   24c24:	2000375c 	.word	0x2000375c

00024c28 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   24c28:	4803      	ldr	r0, [pc, #12]	; (24c38 <zephyr_rtt_mutex_lock+0x10>)
   24c2a:	f04f 32ff 	mov.w	r2, #4294967295
   24c2e:	f04f 33ff 	mov.w	r3, #4294967295
   24c32:	f000 baaf 	b.w	25194 <z_impl_k_mutex_lock>
   24c36:	bf00      	nop
   24c38:	20000934 	.word	0x20000934

00024c3c <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   24c3c:	4801      	ldr	r0, [pc, #4]	; (24c44 <zephyr_rtt_mutex_unlock+0x8>)
   24c3e:	f000 bb23 	b.w	25288 <z_impl_k_mutex_unlock>
   24c42:	bf00      	nop
   24c44:	20000934 	.word	0x20000934

00024c48 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   24c48:	4b01      	ldr	r3, [pc, #4]	; (24c50 <z_impl_z_errno+0x8>)
   24c4a:	6898      	ldr	r0, [r3, #8]
}
   24c4c:	3064      	adds	r0, #100	; 0x64
   24c4e:	4770      	bx	lr
   24c50:	20003804 	.word	0x20003804

00024c54 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   24c54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c58:	4605      	mov	r5, r0
   24c5a:	af00      	add	r7, sp, #0
   24c5c:	460e      	mov	r6, r1
	__asm__ volatile(
   24c5e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c62:	f3ef 8a11 	mrs	sl, BASEPRI
   24c66:	f383 8812 	msr	BASEPRI_MAX, r3
   24c6a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   24c6e:	f001 f897 	bl	25da0 <z_impl_z_current_get>
   24c72:	2d04      	cmp	r5, #4
   24c74:	bf96      	itet	ls
   24c76:	4b2f      	ldrls	r3, [pc, #188]	; (24d34 <z_fatal_error+0xe0>)
   24c78:	4b2f      	ldrhi	r3, [pc, #188]	; (24d38 <z_fatal_error+0xe4>)
   24c7a:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   24c7e:	46e9      	mov	r9, sp
   24c80:	b08c      	sub	sp, #48	; 0x30
   24c82:	4604      	mov	r4, r0
   24c84:	466a      	mov	r2, sp
   24c86:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 24d3c <z_fatal_error+0xe8>
   24c8a:	6213      	str	r3, [r2, #32]
   24c8c:	f240 4302 	movw	r3, #1026	; 0x402
   24c90:	8513      	strh	r3, [r2, #40]	; 0x28
   24c92:	492b      	ldr	r1, [pc, #172]	; (24d40 <z_fatal_error+0xec>)
   24c94:	4b2b      	ldr	r3, [pc, #172]	; (24d44 <z_fatal_error+0xf0>)
   24c96:	6151      	str	r1, [r2, #20]
   24c98:	f04f 0b00 	mov.w	fp, #0
   24c9c:	e9c2 8506 	strd	r8, r5, [r2, #24]
   24ca0:	f8c2 b024 	str.w	fp, [r2, #36]	; 0x24
   24ca4:	f842 3f10 	str.w	r3, [r2, #16]!
   24ca8:	4827      	ldr	r0, [pc, #156]	; (24d48 <z_fatal_error+0xf4>)
   24caa:	465b      	mov	r3, fp
   24cac:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   24cb0:	f7ef f9be 	bl	14030 <z_impl_z_log_msg_static_create>
   24cb4:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   24cb6:	b196      	cbz	r6, 24cde <z_fatal_error+0x8a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   24cb8:	69f3      	ldr	r3, [r6, #28]
   24cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
   24cbe:	b173      	cbz	r3, 24cde <z_fatal_error+0x8a>
		LOG_ERR("Fault during interrupt handling\n");
   24cc0:	b088      	sub	sp, #32
   24cc2:	466a      	mov	r2, sp
   24cc4:	4b21      	ldr	r3, [pc, #132]	; (24d4c <z_fatal_error+0xf8>)
   24cc6:	e9c2 3805 	strd	r3, r8, [r2, #20]
   24cca:	2303      	movs	r3, #3
   24ccc:	f842 3f10 	str.w	r3, [r2, #16]!
   24cd0:	481d      	ldr	r0, [pc, #116]	; (24d48 <z_fatal_error+0xf4>)
   24cd2:	465b      	mov	r3, fp
   24cd4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   24cd8:	f7ef f9aa 	bl	14030 <z_impl_z_log_msg_static_create>
   24cdc:	46cd      	mov	sp, r9
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   24cde:	b12c      	cbz	r4, 24cec <z_fatal_error+0x98>
   24ce0:	4620      	mov	r0, r4
   24ce2:	f00a f8c5 	bl	2ee70 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   24ce6:	b108      	cbz	r0, 24cec <z_fatal_error+0x98>
   24ce8:	7803      	ldrb	r3, [r0, #0]
   24cea:	b903      	cbnz	r3, 24cee <z_fatal_error+0x9a>
		thread_name = "unknown";
   24cec:	4818      	ldr	r0, [pc, #96]	; (24d50 <z_fatal_error+0xfc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   24cee:	46e9      	mov	r9, sp
   24cf0:	b08a      	sub	sp, #40	; 0x28
   24cf2:	466a      	mov	r2, sp
   24cf4:	4b17      	ldr	r3, [pc, #92]	; (24d54 <z_fatal_error+0x100>)
   24cf6:	e9c2 3805 	strd	r3, r8, [r2, #20]
   24cfa:	f240 4302 	movw	r3, #1026	; 0x402
   24cfe:	8493      	strh	r3, [r2, #36]	; 0x24
   24d00:	4b15      	ldr	r3, [pc, #84]	; (24d58 <z_fatal_error+0x104>)
   24d02:	e9c2 4007 	strd	r4, r0, [r2, #28]
   24d06:	f842 3f10 	str.w	r3, [r2, #16]!
   24d0a:	2300      	movs	r3, #0
   24d0c:	480e      	ldr	r0, [pc, #56]	; (24d48 <z_fatal_error+0xf4>)
   24d0e:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   24d12:	f7ef f98d 	bl	14030 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   24d16:	4631      	mov	r1, r6
   24d18:	46cd      	mov	sp, r9
   24d1a:	4628      	mov	r0, r5
   24d1c:	f7fd fdac 	bl	22878 <k_sys_fatal_error_handler>
	__asm__ volatile(
   24d20:	f38a 8811 	msr	BASEPRI, sl
   24d24:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   24d28:	4620      	mov	r0, r4
   24d2a:	f7f1 f897 	bl	15e5c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   24d2e:	46bd      	mov	sp, r7
   24d30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d34:	00030724 	.word	0x00030724
   24d38:	00034e4a 	.word	0x00034e4a
   24d3c:	00034f0f 	.word	0x00034f0f
   24d40:	00034e58 	.word	0x00034e58
   24d44:	01000006 	.word	0x01000006
   24d48:	0002fce4 	.word	0x0002fce4
   24d4c:	00034e84 	.word	0x00034e84
   24d50:	0003201a 	.word	0x0003201a
   24d54:	00034ea9 	.word	0x00034ea9
   24d58:	01000005 	.word	0x01000005

00024d5c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24d5c:	4b10      	ldr	r3, [pc, #64]	; (24da0 <z_sys_init_run_level+0x44>)
{
   24d5e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24d60:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   24d64:	3001      	adds	r0, #1
   24d66:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   24d6a:	42a6      	cmp	r6, r4
   24d6c:	d800      	bhi.n	24d70 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   24d6e:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   24d70:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   24d74:	b18d      	cbz	r5, 24d9a <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   24d76:	4628      	mov	r0, r5
   24d78:	4798      	blx	r3
			if (rc != 0) {
   24d7a:	b138      	cbz	r0, 24d8c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   24d7c:	2800      	cmp	r0, #0
   24d7e:	bfb8      	it	lt
   24d80:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   24d82:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   24d84:	28ff      	cmp	r0, #255	; 0xff
   24d86:	bfa8      	it	ge
   24d88:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   24d8a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   24d8c:	68ea      	ldr	r2, [r5, #12]
   24d8e:	7853      	ldrb	r3, [r2, #1]
   24d90:	f043 0301 	orr.w	r3, r3, #1
   24d94:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24d96:	3408      	adds	r4, #8
   24d98:	e7e7      	b.n	24d6a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   24d9a:	4798      	blx	r3
   24d9c:	e7fb      	b.n	24d96 <z_sys_init_run_level+0x3a>
   24d9e:	bf00      	nop
   24da0:	00030738 	.word	0x00030738

00024da4 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   24da4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   24da6:	4b0a      	ldr	r3, [pc, #40]	; (24dd0 <bg_thread_main+0x2c>)
   24da8:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   24daa:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   24dac:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   24dae:	f7ff ffd5 	bl	24d5c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   24db2:	f001 fb0b 	bl	263cc <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   24db6:	2004      	movs	r0, #4
   24db8:	f7ff ffd0 	bl	24d5c <z_sys_init_run_level>

	z_init_static_threads();
   24dbc:	f000 f972 	bl	250a4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   24dc0:	f7ed f99e 	bl	12100 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   24dc4:	4a03      	ldr	r2, [pc, #12]	; (24dd4 <bg_thread_main+0x30>)
   24dc6:	7b13      	ldrb	r3, [r2, #12]
   24dc8:	f023 0301 	bic.w	r3, r3, #1
   24dcc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   24dce:	bd08      	pop	{r3, pc}
   24dd0:	2000498d 	.word	0x2000498d
   24dd4:	20002c28 	.word	0x20002c28

00024dd8 <z_bss_zero>:
{
   24dd8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   24dda:	4803      	ldr	r0, [pc, #12]	; (24de8 <z_bss_zero+0x10>)
   24ddc:	4a03      	ldr	r2, [pc, #12]	; (24dec <z_bss_zero+0x14>)
   24dde:	2100      	movs	r1, #0
   24de0:	1a12      	subs	r2, r2, r0
   24de2:	f009 ff79 	bl	2ecd8 <z_early_memset>
}
   24de6:	bd08      	pop	{r3, pc}
   24de8:	20000ad8 	.word	0x20000ad8
   24dec:	20004990 	.word	0x20004990

00024df0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   24df0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   24df2:	2300      	movs	r3, #0
{
   24df4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   24df6:	2201      	movs	r2, #1
   24df8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   24dfc:	4e13      	ldr	r6, [pc, #76]	; (24e4c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   24dfe:	4d14      	ldr	r5, [pc, #80]	; (24e50 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   24e00:	9301      	str	r3, [sp, #4]
   24e02:	220f      	movs	r2, #15
   24e04:	e9cd 3202 	strd	r3, r2, [sp, #8]
   24e08:	4912      	ldr	r1, [pc, #72]	; (24e54 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   24e0a:	2314      	movs	r3, #20
   24e0c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   24e10:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   24e14:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   24e16:	f44f 70c0 	mov.w	r0, #384	; 0x180
   24e1a:	fb00 1104 	mla	r1, r0, r4, r1
   24e1e:	4b0e      	ldr	r3, [pc, #56]	; (24e58 <z_init_cpu+0x68>)
   24e20:	9500      	str	r5, [sp, #0]
   24e22:	f44f 72a0 	mov.w	r2, #320	; 0x140
   24e26:	4630      	mov	r0, r6
   24e28:	f000 f8de 	bl	24fe8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   24e2c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   24e2e:	4a0b      	ldr	r2, [pc, #44]	; (24e5c <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   24e30:	60ee      	str	r6, [r5, #12]
   24e32:	f023 0304 	bic.w	r3, r3, #4
   24e36:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   24e38:	f44f 6304 	mov.w	r3, #2112	; 0x840
   24e3c:	fb04 3303 	mla	r3, r4, r3, r3
   24e40:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   24e42:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
   24e44:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   24e46:	b006      	add	sp, #24
   24e48:	bd70      	pop	{r4, r5, r6, pc}
   24e4a:	bf00      	nop
   24e4c:	20002ba8 	.word	0x20002ba8
   24e50:	20003804 	.word	0x20003804
   24e54:	20007a80 	.word	0x20007a80
   24e58:	0002515d 	.word	0x0002515d
   24e5c:	20007240 	.word	0x20007240

00024e60 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   24e60:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   24e62:	2000      	movs	r0, #0
{
   24e64:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   24e66:	f7ff ff79 	bl	24d5c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   24e6a:	4b2f      	ldr	r3, [pc, #188]	; (24f28 <z_cstart+0xc8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   24e6c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   24e70:	4c2e      	ldr	r4, [pc, #184]	; (24f2c <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   24e72:	4e2f      	ldr	r6, [pc, #188]	; (24f30 <z_cstart+0xd0>)
   24e74:	6963      	ldr	r3, [r4, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   24e76:	4f2f      	ldr	r7, [pc, #188]	; (24f34 <z_cstart+0xd4>)
   24e78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   24e7c:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   24e7e:	23e0      	movs	r3, #224	; 0xe0
   24e80:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   24e84:	2500      	movs	r5, #0
   24e86:	2320      	movs	r3, #32
   24e88:	77e3      	strb	r3, [r4, #31]
   24e8a:	7625      	strb	r5, [r4, #24]
   24e8c:	7665      	strb	r5, [r4, #25]
   24e8e:	76a5      	strb	r5, [r4, #26]
   24e90:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   24e94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24e96:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   24e9a:	6263      	str	r3, [r4, #36]	; 0x24
   24e9c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   24ea0:	f7f0 ff50 	bl	15d44 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   24ea4:	f7f0 fa04 	bl	152b0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   24ea8:	f04f 33ff 	mov.w	r3, #4294967295
   24eac:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   24eae:	62e3      	str	r3, [r4, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   24eb0:	ac06      	add	r4, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   24eb2:	f7f1 f8ab 	bl	1600c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   24eb6:	f7f0 ffe7 	bl	15e88 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   24eba:	f7ee ff45 	bl	13d48 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   24ebe:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   24ec2:	4620      	mov	r0, r4
	dummy_thread->base.user_options = K_ESSENTIAL;
   24ec4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   24ec8:	e9cd 5520 	strd	r5, r5, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   24ecc:	f001 fa60 	bl	26390 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   24ed0:	60b4      	str	r4, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   24ed2:	f009 fef5 	bl	2ecc0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   24ed6:	2001      	movs	r0, #1
   24ed8:	f7ff ff40 	bl	24d5c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   24edc:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   24ede:	4c16      	ldr	r4, [pc, #88]	; (24f38 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   24ee0:	f7ff ff3c 	bl	24d5c <z_sys_init_run_level>
	z_sched_init();
   24ee4:	f000 feb8 	bl	25c58 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   24ee8:	4b14      	ldr	r3, [pc, #80]	; (24f3c <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   24eea:	61b4      	str	r4, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   24eec:	9305      	str	r3, [sp, #20]
   24eee:	2301      	movs	r3, #1
   24ef0:	4913      	ldr	r1, [pc, #76]	; (24f40 <z_cstart+0xe0>)
   24ef2:	9500      	str	r5, [sp, #0]
   24ef4:	e9cd 5303 	strd	r5, r3, [sp, #12]
   24ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   24efc:	463b      	mov	r3, r7
   24efe:	e9cd 5501 	strd	r5, r5, [sp, #4]
   24f02:	4620      	mov	r0, r4
   24f04:	f000 f870 	bl	24fe8 <z_setup_new_thread>
   24f08:	7b62      	ldrb	r2, [r4, #13]
   24f0a:	4606      	mov	r6, r0
   24f0c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   24f10:	4620      	mov	r0, r4
   24f12:	7362      	strb	r2, [r4, #13]
   24f14:	f00a f9ba 	bl	2f28c <z_ready_thread>
	z_init_cpu(0);
   24f18:	4628      	mov	r0, r5
   24f1a:	f7ff ff69 	bl	24df0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   24f1e:	463a      	mov	r2, r7
   24f20:	4631      	mov	r1, r6
   24f22:	4620      	mov	r0, r4
   24f24:	f7f0 fb50 	bl	155c8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   24f28:	20007a80 	.word	0x20007a80
   24f2c:	e000ed00 	.word	0xe000ed00
   24f30:	20003804 	.word	0x20003804
   24f34:	00024da5 	.word	0x00024da5
   24f38:	20002c28 	.word	0x20002c28
   24f3c:	00034f1d 	.word	0x00034f1d
   24f40:	20007c00 	.word	0x20007c00

00024f44 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   24f44:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   24f46:	4c06      	ldr	r4, [pc, #24]	; (24f60 <statics_init+0x1c>)
   24f48:	4d06      	ldr	r5, [pc, #24]	; (24f64 <statics_init+0x20>)
   24f4a:	42ac      	cmp	r4, r5
   24f4c:	d301      	bcc.n	24f52 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   24f4e:	2000      	movs	r0, #0
   24f50:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   24f52:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   24f56:	4620      	mov	r0, r4
   24f58:	f009 fec2 	bl	2ece0 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   24f5c:	3414      	adds	r4, #20
   24f5e:	e7f4      	b.n	24f4a <statics_init+0x6>
   24f60:	200008d0 	.word	0x200008d0
   24f64:	200008e4 	.word	0x200008e4

00024f68 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   24f68:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24f6a:	4c06      	ldr	r4, [pc, #24]	; (24f84 <init_mem_slab_module+0x1c>)
   24f6c:	4d06      	ldr	r5, [pc, #24]	; (24f88 <init_mem_slab_module+0x20>)
	int rc = 0;
   24f6e:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24f70:	42ac      	cmp	r4, r5
   24f72:	d300      	bcc.n	24f76 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   24f74:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   24f76:	4620      	mov	r0, r4
   24f78:	f009 ff24 	bl	2edc4 <create_free_list>
		if (rc < 0) {
   24f7c:	2800      	cmp	r0, #0
   24f7e:	dbf9      	blt.n	24f74 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24f80:	341c      	adds	r4, #28
   24f82:	e7f5      	b.n	24f70 <init_mem_slab_module+0x8>
   24f84:	2000087c 	.word	0x2000087c
   24f88:	200008d0 	.word	0x200008d0

00024f8c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   24f8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24f8e:	460c      	mov	r4, r1
	__asm__ volatile(
   24f90:	f04f 0540 	mov.w	r5, #64	; 0x40
   24f94:	f3ef 8111 	mrs	r1, BASEPRI
   24f98:	f385 8812 	msr	BASEPRI_MAX, r5
   24f9c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   24fa0:	6945      	ldr	r5, [r0, #20]
   24fa2:	b15d      	cbz	r5, 24fbc <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   24fa4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   24fa6:	682b      	ldr	r3, [r5, #0]
   24fa8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   24faa:	6983      	ldr	r3, [r0, #24]
   24fac:	3301      	adds	r3, #1
   24fae:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   24fb0:	2000      	movs	r0, #0
	__asm__ volatile(
   24fb2:	f381 8811 	msr	BASEPRI, r1
   24fb6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   24fba:	e011      	b.n	24fe0 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   24fbc:	ea52 0603 	orrs.w	r6, r2, r3
   24fc0:	d103      	bne.n	24fca <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   24fc2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   24fc4:	f06f 000b 	mvn.w	r0, #11
   24fc8:	e7f3      	b.n	24fb2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   24fca:	e9cd 2300 	strd	r2, r3, [sp]
   24fce:	4602      	mov	r2, r0
   24fd0:	3008      	adds	r0, #8
   24fd2:	f000 fd4b 	bl	25a6c <z_pend_curr>
		if (result == 0) {
   24fd6:	b918      	cbnz	r0, 24fe0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   24fd8:	4b02      	ldr	r3, [pc, #8]	; (24fe4 <k_mem_slab_alloc+0x58>)
   24fda:	689b      	ldr	r3, [r3, #8]
   24fdc:	695b      	ldr	r3, [r3, #20]
   24fde:	6023      	str	r3, [r4, #0]
}
   24fe0:	b002      	add	sp, #8
   24fe2:	bd70      	pop	{r4, r5, r6, pc}
   24fe4:	20003804 	.word	0x20003804

00024fe8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   24fe8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   24fec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   24fee:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   24ff0:	2604      	movs	r6, #4
   24ff2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   24ff4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   24ff6:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   24ff8:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   24ffc:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24ffe:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   25000:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25004:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   25006:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25008:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2500c:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2500e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   25012:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   25016:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   25018:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   2501a:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2501c:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25020:	9202      	str	r2, [sp, #8]
   25022:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   25024:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   25026:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2502a:	9200      	str	r2, [sp, #0]
   2502c:	4642      	mov	r2, r8
{
   2502e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25030:	f7f0 fa98 	bl	15564 <arch_new_thread>
	if (!_current) {
   25034:	4b04      	ldr	r3, [pc, #16]	; (25048 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   25036:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   25038:	689b      	ldr	r3, [r3, #8]
   2503a:	b103      	cbz	r3, 2503e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   2503c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   2503e:	6763      	str	r3, [r4, #116]	; 0x74
}
   25040:	4640      	mov	r0, r8
   25042:	b004      	add	sp, #16
   25044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25048:	20003804 	.word	0x20003804

0002504c <z_impl_k_thread_create>:
{
   2504c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2504e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   25050:	2500      	movs	r5, #0
   25052:	9505      	str	r5, [sp, #20]
   25054:	9d10      	ldr	r5, [sp, #64]	; 0x40
   25056:	9504      	str	r5, [sp, #16]
   25058:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2505a:	9503      	str	r5, [sp, #12]
   2505c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2505e:	9502      	str	r5, [sp, #8]
{
   25060:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   25064:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   25066:	9501      	str	r5, [sp, #4]
   25068:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2506a:	9500      	str	r5, [sp, #0]
{
   2506c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2506e:	f7ff ffbb 	bl	24fe8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   25072:	f1b6 3fff 	cmp.w	r6, #4294967295
   25076:	bf08      	it	eq
   25078:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   2507c:	d005      	beq.n	2508a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2507e:	ea56 0307 	orrs.w	r3, r6, r7
   25082:	d105      	bne.n	25090 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   25084:	4620      	mov	r0, r4
   25086:	f000 fd67 	bl	25b58 <z_sched_start>
}
   2508a:	4620      	mov	r0, r4
   2508c:	b007      	add	sp, #28
   2508e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25090:	4903      	ldr	r1, [pc, #12]	; (250a0 <z_impl_k_thread_create+0x54>)
   25092:	463a      	mov	r2, r7
   25094:	4633      	mov	r3, r6
   25096:	f104 0018 	add.w	r0, r4, #24
   2509a:	f000 ff59 	bl	25f50 <z_add_timeout>
   2509e:	e7f4      	b.n	2508a <z_impl_k_thread_create+0x3e>
   250a0:	0002f315 	.word	0x0002f315

000250a4 <z_init_static_threads>:
{
   250a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   250a8:	4c29      	ldr	r4, [pc, #164]	; (25150 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   250aa:	4d2a      	ldr	r5, [pc, #168]	; (25154 <z_init_static_threads+0xb0>)
{
   250ac:	b087      	sub	sp, #28
   250ae:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   250b0:	42ae      	cmp	r6, r5
   250b2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   250b6:	d30f      	bcc.n	250d8 <z_init_static_threads+0x34>
	k_sched_lock();
   250b8:	f000 fd9e 	bl	25bf8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   250bc:	4c24      	ldr	r4, [pc, #144]	; (25150 <z_init_static_threads+0xac>)
   250be:	f8df 9098 	ldr.w	r9, [pc, #152]	; 25158 <z_init_static_threads+0xb4>
   250c2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   250c6:	f240 37e7 	movw	r7, #999	; 0x3e7
   250ca:	42ac      	cmp	r4, r5
   250cc:	d320      	bcc.n	25110 <z_init_static_threads+0x6c>
}
   250ce:	b007      	add	sp, #28
   250d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   250d4:	f000 bda4 	b.w	25c20 <k_sched_unlock>
		z_setup_new_thread(
   250d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   250dc:	9305      	str	r3, [sp, #20]
   250de:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   250e2:	9304      	str	r3, [sp, #16]
   250e4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   250e8:	9303      	str	r3, [sp, #12]
   250ea:	f854 3c14 	ldr.w	r3, [r4, #-20]
   250ee:	9302      	str	r3, [sp, #8]
   250f0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   250f4:	9301      	str	r3, [sp, #4]
   250f6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   250fa:	9300      	str	r3, [sp, #0]
   250fc:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   25100:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   25104:	f7ff ff70 	bl	24fe8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   25108:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2510c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   2510e:	e7ce      	b.n	250ae <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   25110:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25112:	1c5a      	adds	r2, r3, #1
   25114:	d00d      	beq.n	25132 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   25116:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2511a:	2100      	movs	r1, #0
   2511c:	4638      	mov	r0, r7
   2511e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25122:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   25126:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2512a:	d104      	bne.n	25136 <z_init_static_threads+0x92>
	z_sched_start(thread);
   2512c:	4640      	mov	r0, r8
   2512e:	f000 fd13 	bl	25b58 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   25132:	342c      	adds	r4, #44	; 0x2c
   25134:	e7c9      	b.n	250ca <z_init_static_threads+0x26>
   25136:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2513a:	2300      	movs	r3, #0
   2513c:	f7da ffe0 	bl	100 <__aeabi_uldivmod>
   25140:	4602      	mov	r2, r0
   25142:	460b      	mov	r3, r1
   25144:	f108 0018 	add.w	r0, r8, #24
   25148:	4649      	mov	r1, r9
   2514a:	f000 ff01 	bl	25f50 <z_add_timeout>
   2514e:	e7f0      	b.n	25132 <z_init_static_threads+0x8e>
   25150:	0002fb44 	.word	0x0002fb44
   25154:	0002fb44 	.word	0x0002fb44
   25158:	0002f315 	.word	0x0002f315

0002515c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   2515c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   2515e:	4c0b      	ldr	r4, [pc, #44]	; (2518c <idle+0x30>)
	return !z_sys_post_kernel;
   25160:	4d0b      	ldr	r5, [pc, #44]	; (25190 <idle+0x34>)
	__asm__ volatile(
   25162:	f04f 0240 	mov.w	r2, #64	; 0x40
   25166:	f3ef 8311 	mrs	r3, BASEPRI
   2516a:	f382 8812 	msr	BASEPRI_MAX, r2
   2516e:	f3bf 8f6f 	isb	sy
   25172:	f00a f97d 	bl	2f470 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   25176:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   25178:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2517a:	b913      	cbnz	r3, 25182 <idle+0x26>
	arch_cpu_idle();
   2517c:	f7f0 f89e 	bl	152bc <arch_cpu_idle>
}
   25180:	e7ef      	b.n	25162 <idle+0x6>
   25182:	f7ef fb35 	bl	147f0 <pm_system_suspend>
   25186:	2800      	cmp	r0, #0
   25188:	d1eb      	bne.n	25162 <idle+0x6>
   2518a:	e7f7      	b.n	2517c <idle+0x20>
   2518c:	20003804 	.word	0x20003804
   25190:	2000498d 	.word	0x2000498d

00025194 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   25194:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25198:	4604      	mov	r4, r0
   2519a:	4617      	mov	r7, r2
   2519c:	461e      	mov	r6, r3
   2519e:	f04f 0340 	mov.w	r3, #64	; 0x40
   251a2:	f3ef 8811 	mrs	r8, BASEPRI
   251a6:	f383 8812 	msr	BASEPRI_MAX, r3
   251aa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   251ae:	68c3      	ldr	r3, [r0, #12]
   251b0:	4a33      	ldr	r2, [pc, #204]	; (25280 <z_impl_k_mutex_lock+0xec>)
   251b2:	b17b      	cbz	r3, 251d4 <z_impl_k_mutex_lock+0x40>
   251b4:	6880      	ldr	r0, [r0, #8]
   251b6:	6891      	ldr	r1, [r2, #8]
   251b8:	4288      	cmp	r0, r1
   251ba:	d019      	beq.n	251f0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   251bc:	ea57 0306 	orrs.w	r3, r7, r6
   251c0:	d118      	bne.n	251f4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   251c2:	f388 8811 	msr	BASEPRI, r8
   251c6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   251ca:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   251ce:	b002      	add	sp, #8
   251d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   251d4:	6891      	ldr	r1, [r2, #8]
   251d6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   251da:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   251dc:	3301      	adds	r3, #1
   251de:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   251e0:	6893      	ldr	r3, [r2, #8]
   251e2:	60a3      	str	r3, [r4, #8]
   251e4:	f388 8811 	msr	BASEPRI, r8
   251e8:	f3bf 8f6f 	isb	sy
		return 0;
   251ec:	2000      	movs	r0, #0
   251ee:	e7ee      	b.n	251ce <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   251f0:	6921      	ldr	r1, [r4, #16]
   251f2:	e7f2      	b.n	251da <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   251f4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   251f8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   251fc:	4299      	cmp	r1, r3
   251fe:	bfa8      	it	ge
   25200:	4619      	movge	r1, r3
   25202:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   25206:	4291      	cmp	r1, r2
   25208:	bfb8      	it	lt
   2520a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2520c:	428b      	cmp	r3, r1
   2520e:	dd2e      	ble.n	2526e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   25210:	f009 fe39 	bl	2ee86 <adjust_owner_prio.isra.0>
   25214:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   25216:	e9cd 7600 	strd	r7, r6, [sp]
   2521a:	481a      	ldr	r0, [pc, #104]	; (25284 <z_impl_k_mutex_lock+0xf0>)
   2521c:	4622      	mov	r2, r4
   2521e:	4641      	mov	r1, r8
   25220:	f000 fc24 	bl	25a6c <z_pend_curr>
	if (got_mutex == 0) {
   25224:	2800      	cmp	r0, #0
   25226:	d0e1      	beq.n	251ec <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   25228:	f04f 0340 	mov.w	r3, #64	; 0x40
   2522c:	f3ef 8611 	mrs	r6, BASEPRI
   25230:	f383 8812 	msr	BASEPRI_MAX, r3
   25234:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   25238:	68a0      	ldr	r0, [r4, #8]
   2523a:	b1d0      	cbz	r0, 25272 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2523c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2523e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25240:	429c      	cmp	r4, r3
   25242:	d00a      	beq.n	2525a <z_impl_k_mutex_lock+0xc6>
   25244:	b14b      	cbz	r3, 2525a <z_impl_k_mutex_lock+0xc6>
   25246:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2524a:	4299      	cmp	r1, r3
   2524c:	bfa8      	it	ge
   2524e:	4619      	movge	r1, r3
   25250:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   25254:	4299      	cmp	r1, r3
   25256:	bfb8      	it	lt
   25258:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   2525a:	f009 fe14 	bl	2ee86 <adjust_owner_prio.isra.0>
   2525e:	b140      	cbz	r0, 25272 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   25260:	4808      	ldr	r0, [pc, #32]	; (25284 <z_impl_k_mutex_lock+0xf0>)
   25262:	4631      	mov	r1, r6
   25264:	f000 fc66 	bl	25b34 <z_reschedule>
	return -EAGAIN;
   25268:	f06f 000a 	mvn.w	r0, #10
   2526c:	e7af      	b.n	251ce <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   2526e:	2500      	movs	r5, #0
   25270:	e7d1      	b.n	25216 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   25272:	2d00      	cmp	r5, #0
   25274:	d1f4      	bne.n	25260 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   25276:	f386 8811 	msr	BASEPRI, r6
   2527a:	f3bf 8f6f 	isb	sy
   2527e:	e7f3      	b.n	25268 <z_impl_k_mutex_lock+0xd4>
   25280:	20003804 	.word	0x20003804
   25284:	2000498e 	.word	0x2000498e

00025288 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   25288:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   2528a:	6883      	ldr	r3, [r0, #8]
{
   2528c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   2528e:	b36b      	cbz	r3, 252ec <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   25290:	4a19      	ldr	r2, [pc, #100]	; (252f8 <z_impl_k_mutex_unlock+0x70>)
   25292:	6892      	ldr	r2, [r2, #8]
   25294:	4293      	cmp	r3, r2
   25296:	d12c      	bne.n	252f2 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   25298:	68c3      	ldr	r3, [r0, #12]
   2529a:	2b01      	cmp	r3, #1
   2529c:	d903      	bls.n	252a6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   2529e:	3b01      	subs	r3, #1
   252a0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   252a2:	2000      	movs	r0, #0
}
   252a4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   252a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   252aa:	f3ef 8511 	mrs	r5, BASEPRI
   252ae:	f383 8812 	msr	BASEPRI_MAX, r3
   252b2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   252b6:	6901      	ldr	r1, [r0, #16]
   252b8:	6880      	ldr	r0, [r0, #8]
   252ba:	f009 fde4 	bl	2ee86 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   252be:	4620      	mov	r0, r4
   252c0:	f00a f843 	bl	2f34a <z_unpend_first_thread>
	mutex->owner = new_owner;
   252c4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   252c6:	b158      	cbz	r0, 252e0 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   252c8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   252cc:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   252ce:	2200      	movs	r2, #0
   252d0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   252d2:	f009 ffdb 	bl	2f28c <z_ready_thread>
		z_reschedule(&lock, key);
   252d6:	4809      	ldr	r0, [pc, #36]	; (252fc <z_impl_k_mutex_unlock+0x74>)
   252d8:	4629      	mov	r1, r5
   252da:	f000 fc2b 	bl	25b34 <z_reschedule>
   252de:	e7e0      	b.n	252a2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   252e0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   252e2:	f385 8811 	msr	BASEPRI, r5
   252e6:	f3bf 8f6f 	isb	sy
   252ea:	e7da      	b.n	252a2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   252ec:	f06f 0015 	mvn.w	r0, #21
   252f0:	e7d8      	b.n	252a4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   252f2:	f04f 30ff 	mov.w	r0, #4294967295
   252f6:	e7d5      	b.n	252a4 <z_impl_k_mutex_unlock+0x1c>
   252f8:	20003804 	.word	0x20003804
   252fc:	2000498e 	.word	0x2000498e

00025300 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   25300:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25302:	4611      	mov	r1, r2
	__asm__ volatile(
   25304:	f04f 0240 	mov.w	r2, #64	; 0x40
   25308:	f3ef 8511 	mrs	r5, BASEPRI
   2530c:	f382 8812 	msr	BASEPRI_MAX, r2
   25310:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   25314:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   25316:	b19c      	cbz	r4, 25340 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25318:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2531a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2531c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25320:	4294      	cmp	r4, r2
	list->head = node;
   25322:	6003      	str	r3, [r0, #0]
	list->tail = node;
   25324:	bf08      	it	eq
   25326:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   25328:	2101      	movs	r1, #1
   2532a:	4620      	mov	r0, r4
   2532c:	f009 fe20 	bl	2ef70 <z_queue_node_peek>
   25330:	4604      	mov	r4, r0
	__asm__ volatile(
   25332:	f385 8811 	msr	BASEPRI, r5
   25336:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2533a:	4620      	mov	r0, r4
   2533c:	b003      	add	sp, #12
   2533e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25340:	ea51 0203 	orrs.w	r2, r1, r3
   25344:	d0f5      	beq.n	25332 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25346:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2534a:	e9cd 1300 	strd	r1, r3, [sp]
   2534e:	4610      	mov	r0, r2
   25350:	4629      	mov	r1, r5
   25352:	f000 fb8b 	bl	25a6c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   25356:	2800      	cmp	r0, #0
   25358:	d1ef      	bne.n	2533a <z_impl_k_queue_get+0x3a>
   2535a:	4b02      	ldr	r3, [pc, #8]	; (25364 <z_impl_k_queue_get+0x64>)
   2535c:	689b      	ldr	r3, [r3, #8]
   2535e:	695c      	ldr	r4, [r3, #20]
   25360:	e7eb      	b.n	2533a <z_impl_k_queue_get+0x3a>
   25362:	bf00      	nop
   25364:	20003804 	.word	0x20003804

00025368 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   25368:	b538      	push	{r3, r4, r5, lr}
   2536a:	4604      	mov	r4, r0
	__asm__ volatile(
   2536c:	f04f 0340 	mov.w	r3, #64	; 0x40
   25370:	f3ef 8511 	mrs	r5, BASEPRI
   25374:	f383 8812 	msr	BASEPRI_MAX, r3
   25378:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2537c:	f009 ffe5 	bl	2f34a <z_unpend_first_thread>

	if (thread != NULL) {
   25380:	b148      	cbz	r0, 25396 <z_impl_k_sem_give+0x2e>
   25382:	2200      	movs	r2, #0
   25384:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   25386:	f009 ff81 	bl	2f28c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   2538a:	4629      	mov	r1, r5
   2538c:	4808      	ldr	r0, [pc, #32]	; (253b0 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2538e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   25392:	f000 bbcf 	b.w	25b34 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25396:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2539a:	429a      	cmp	r2, r3
   2539c:	bf18      	it	ne
   2539e:	3301      	addne	r3, #1
   253a0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   253a2:	2102      	movs	r1, #2
   253a4:	f104 0010 	add.w	r0, r4, #16
   253a8:	f00a fa07 	bl	2f7ba <z_handle_obj_poll_events>
}
   253ac:	e7ed      	b.n	2538a <z_impl_k_sem_give+0x22>
   253ae:	bf00      	nop
   253b0:	2000498e 	.word	0x2000498e

000253b4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   253b4:	b513      	push	{r0, r1, r4, lr}
   253b6:	f04f 0440 	mov.w	r4, #64	; 0x40
   253ba:	f3ef 8111 	mrs	r1, BASEPRI
   253be:	f384 8812 	msr	BASEPRI_MAX, r4
   253c2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   253c6:	6884      	ldr	r4, [r0, #8]
   253c8:	b144      	cbz	r4, 253dc <z_impl_k_sem_take+0x28>
		sem->count--;
   253ca:	3c01      	subs	r4, #1
   253cc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   253ce:	f381 8811 	msr	BASEPRI, r1
   253d2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   253d6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   253d8:	b002      	add	sp, #8
   253da:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   253dc:	ea52 0403 	orrs.w	r4, r2, r3
   253e0:	d106      	bne.n	253f0 <z_impl_k_sem_take+0x3c>
   253e2:	f381 8811 	msr	BASEPRI, r1
   253e6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   253ea:	f06f 000f 	mvn.w	r0, #15
   253ee:	e7f3      	b.n	253d8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   253f0:	e9cd 2300 	strd	r2, r3, [sp]
   253f4:	4602      	mov	r2, r0
   253f6:	4802      	ldr	r0, [pc, #8]	; (25400 <z_impl_k_sem_take+0x4c>)
   253f8:	f000 fb38 	bl	25a6c <z_pend_curr>
	return ret;
   253fc:	e7ec      	b.n	253d8 <z_impl_k_sem_take+0x24>
   253fe:	bf00      	nop
   25400:	2000498e 	.word	0x2000498e

00025404 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   25404:	b570      	push	{r4, r5, r6, lr}
   25406:	4604      	mov	r4, r0
	__asm__ volatile(
   25408:	f04f 0340 	mov.w	r3, #64	; 0x40
   2540c:	f3ef 8511 	mrs	r5, BASEPRI
   25410:	f383 8812 	msr	BASEPRI_MAX, r3
   25414:	f3bf 8f6f 	isb	sy
   25418:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   2541c:	4620      	mov	r0, r4
   2541e:	f009 ff94 	bl	2f34a <z_unpend_first_thread>
		if (thread == NULL) {
   25422:	b118      	cbz	r0, 2542c <z_impl_k_sem_reset+0x28>
   25424:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   25426:	f009 ff31 	bl	2f28c <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   2542a:	e7f7      	b.n	2541c <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   2542c:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2542e:	2102      	movs	r1, #2
   25430:	f104 0010 	add.w	r0, r4, #16
   25434:	f00a f9c1 	bl	2f7ba <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   25438:	4629      	mov	r1, r5
   2543a:	4802      	ldr	r0, [pc, #8]	; (25444 <z_impl_k_sem_reset+0x40>)
}
   2543c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   25440:	f000 bb78 	b.w	25b34 <z_reschedule>
   25444:	2000498e 	.word	0x2000498e

00025448 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   25448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   2544a:	4b09      	ldr	r3, [pc, #36]	; (25470 <k_sys_work_q_init+0x28>)
   2544c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2544e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   25450:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   25452:	9300      	str	r3, [sp, #0]
   25454:	4907      	ldr	r1, [pc, #28]	; (25474 <k_sys_work_q_init+0x2c>)
   25456:	4808      	ldr	r0, [pc, #32]	; (25478 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   25458:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   2545c:	f04f 33ff 	mov.w	r3, #4294967295
   25460:	f44f 6200 	mov.w	r2, #2048	; 0x800
   25464:	f000 f924 	bl	256b0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   25468:	4620      	mov	r0, r4
   2546a:	b004      	add	sp, #16
   2546c:	bd10      	pop	{r4, pc}
   2546e:	bf00      	nop
   25470:	00034f25 	.word	0x00034f25
   25474:	20008440 	.word	0x20008440
   25478:	20002ca8 	.word	0x20002ca8

0002547c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   2547c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   25480:	4e4a      	ldr	r6, [pc, #296]	; (255ac <work_queue_main+0x130>)
   25482:	b085      	sub	sp, #20
   25484:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   25486:	f04f 38ff 	mov.w	r8, #4294967295
   2548a:	f04f 39ff 	mov.w	r9, #4294967295
   2548e:	f04f 0340 	mov.w	r3, #64	; 0x40
   25492:	f3ef 8711 	mrs	r7, BASEPRI
   25496:	f383 8812 	msr	BASEPRI_MAX, r3
   2549a:	f3bf 8f6f 	isb	sy
   2549e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   254a2:	b98d      	cbnz	r5, 254c8 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   254a4:	2102      	movs	r1, #2
   254a6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   254aa:	f009 fda2 	bl	2eff2 <flag_test_and_clear>
   254ae:	2800      	cmp	r0, #0
   254b0:	d143      	bne.n	2553a <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   254b2:	2300      	movs	r3, #0
   254b4:	e9cd 8900 	strd	r8, r9, [sp]
   254b8:	9302      	str	r3, [sp, #8]
   254ba:	f104 0288 	add.w	r2, r4, #136	; 0x88
   254be:	4639      	mov	r1, r7
   254c0:	483b      	ldr	r0, [pc, #236]	; (255b0 <work_queue_main+0x134>)
   254c2:	f000 fcd3 	bl	25e6c <z_sched_wait>
			continue;
   254c6:	e7e2      	b.n	2548e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   254c8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   254cc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   254ce:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   254d2:	4295      	cmp	r5, r2
	list->tail = node;
   254d4:	bf08      	it	eq
   254d6:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   254da:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   254de:	f043 0302 	orr.w	r3, r3, #2
   254e2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   254e6:	68eb      	ldr	r3, [r5, #12]
   254e8:	f023 0304 	bic.w	r3, r3, #4
   254ec:	f043 0301 	orr.w	r3, r3, #1
   254f0:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   254f2:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   254f4:	f387 8811 	msr	BASEPRI, r7
   254f8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   254fc:	4628      	mov	r0, r5
   254fe:	4798      	blx	r3
	__asm__ volatile(
   25500:	f04f 0340 	mov.w	r3, #64	; 0x40
   25504:	f3ef 8b11 	mrs	fp, BASEPRI
   25508:	f383 8812 	msr	BASEPRI_MAX, r3
   2550c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   25510:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25512:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   25514:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25518:	d419      	bmi.n	2554e <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   2551a:	60ea      	str	r2, [r5, #12]
   2551c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   25520:	f023 0302 	bic.w	r3, r3, #2
   25524:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   25528:	f38b 8811 	msr	BASEPRI, fp
   2552c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   25530:	05db      	lsls	r3, r3, #23
   25532:	d4ac      	bmi.n	2548e <work_queue_main+0x12>
	z_impl_k_yield();
   25534:	f000 fb98 	bl	25c68 <z_impl_k_yield>
}
   25538:	e7a9      	b.n	2548e <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   2553a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2553e:	2200      	movs	r2, #0
   25540:	2101      	movs	r1, #1
   25542:	4628      	mov	r0, r5
   25544:	f009 ff5b 	bl	2f3fe <z_sched_wake>
   25548:	2800      	cmp	r0, #0
   2554a:	d1f8      	bne.n	2553e <work_queue_main+0xc2>
   2554c:	e7b1      	b.n	254b2 <work_queue_main+0x36>
	return list->head;
   2554e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   25550:	f023 0303 	bic.w	r3, r3, #3
   25554:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25556:	2800      	cmp	r0, #0
   25558:	d0e0      	beq.n	2551c <work_queue_main+0xa0>
	return node->next;
   2555a:	2700      	movs	r7, #0
   2555c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   25560:	463b      	mov	r3, r7
   25562:	2800      	cmp	r0, #0
   25564:	d0da      	beq.n	2551c <work_queue_main+0xa0>
		if (wc->work == work) {
   25566:	6842      	ldr	r2, [r0, #4]
   25568:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   2556a:	4601      	mov	r1, r0
		if (wc->work == work) {
   2556c:	d10c      	bne.n	25588 <work_queue_main+0x10c>
	return node->next;
   2556e:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   25570:	b99f      	cbnz	r7, 2559a <work_queue_main+0x11e>
   25572:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   25574:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   25576:	4282      	cmp	r2, r0
   25578:	d100      	bne.n	2557c <work_queue_main+0x100>
	list->tail = node;
   2557a:	6071      	str	r1, [r6, #4]
	parent->next = child;
   2557c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   25580:	f7ff fef2 	bl	25368 <z_impl_k_sem_give>
}
   25584:	4639      	mov	r1, r7
   25586:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25588:	f1ba 0f00 	cmp.w	sl, #0
   2558c:	d00b      	beq.n	255a6 <work_queue_main+0x12a>
	return node->next;
   2558e:	f8da 2000 	ldr.w	r2, [sl]
   25592:	4650      	mov	r0, sl
   25594:	460f      	mov	r7, r1
   25596:	4692      	mov	sl, r2
   25598:	e7e3      	b.n	25562 <work_queue_main+0xe6>
	parent->next = child;
   2559a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   2559c:	6872      	ldr	r2, [r6, #4]
   2559e:	4282      	cmp	r2, r0
	list->tail = node;
   255a0:	bf08      	it	eq
   255a2:	6077      	streq	r7, [r6, #4]
}
   255a4:	e7ea      	b.n	2557c <work_queue_main+0x100>
   255a6:	4652      	mov	r2, sl
   255a8:	e7f3      	b.n	25592 <work_queue_main+0x116>
   255aa:	bf00      	nop
   255ac:	20003828 	.word	0x20003828
   255b0:	2000498e 	.word	0x2000498e

000255b4 <cancel_sync_locked>:
{
   255b4:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   255b6:	68c3      	ldr	r3, [r0, #12]
   255b8:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   255bc:	079b      	lsls	r3, r3, #30
{
   255be:	4605      	mov	r5, r0
   255c0:	460c      	mov	r4, r1
	if (ret) {
   255c2:	d50d      	bpl.n	255e0 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   255c4:	2201      	movs	r2, #1
   255c6:	2100      	movs	r1, #0
   255c8:	f104 0008 	add.w	r0, r4, #8
   255cc:	f009 fd01 	bl	2efd2 <z_impl_k_sem_init>
	parent->next = child;
   255d0:	2300      	movs	r3, #0
   255d2:	6023      	str	r3, [r4, #0]
	return list->tail;
   255d4:	4b05      	ldr	r3, [pc, #20]	; (255ec <cancel_sync_locked+0x38>)
	canceler->work = work;
   255d6:	6065      	str	r5, [r4, #4]
   255d8:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   255da:	b91a      	cbnz	r2, 255e4 <cancel_sync_locked+0x30>
	list->head = node;
   255dc:	e9c3 4400 	strd	r4, r4, [r3]
}
   255e0:	4630      	mov	r0, r6
   255e2:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   255e4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   255e6:	605c      	str	r4, [r3, #4]
}
   255e8:	e7fa      	b.n	255e0 <cancel_sync_locked+0x2c>
   255ea:	bf00      	nop
   255ec:	20003828 	.word	0x20003828

000255f0 <submit_to_queue_locked>:
{
   255f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   255f2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   255f4:	079a      	lsls	r2, r3, #30
{
   255f6:	4604      	mov	r4, r0
   255f8:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   255fa:	f3c3 0640 	ubfx	r6, r3, #1, #1
   255fe:	d42c      	bmi.n	2565a <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   25600:	075b      	lsls	r3, r3, #29
   25602:	d41a      	bmi.n	2563a <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   25604:	680b      	ldr	r3, [r1, #0]
   25606:	b90b      	cbnz	r3, 2560c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   25608:	6883      	ldr	r3, [r0, #8]
   2560a:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   2560c:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2560e:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   25610:	bf44      	itt	mi
   25612:	68a3      	ldrmi	r3, [r4, #8]
   25614:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   25616:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   25618:	bf4c      	ite	mi
   2561a:	2602      	movmi	r6, #2
		ret = 1;
   2561c:	2601      	movpl	r6, #1
	if (queue == NULL) {
   2561e:	2d00      	cmp	r5, #0
   25620:	d03a      	beq.n	25698 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25622:	4b1f      	ldr	r3, [pc, #124]	; (256a0 <submit_to_queue_locked+0xb0>)
   25624:	689b      	ldr	r3, [r3, #8]
   25626:	42ab      	cmp	r3, r5
   25628:	d00a      	beq.n	25640 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   2562a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2562e:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   25630:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25634:	d414      	bmi.n	25660 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   25636:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   2563a:	2300      	movs	r3, #0
   2563c:	603b      	str	r3, [r7, #0]
	return ret;
   2563e:	e025      	b.n	2568c <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25640:	f009 fc0d 	bl	2ee5e <k_is_in_isr>
   25644:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   25648:	2800      	cmp	r0, #0
   2564a:	d1f0      	bne.n	2562e <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2564c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2564e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25652:	d5f0      	bpl.n	25636 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   25654:	b152      	cbz	r2, 2566c <submit_to_queue_locked+0x7c>
   25656:	075b      	lsls	r3, r3, #29
   25658:	d408      	bmi.n	2566c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   2565a:	f06f 060f 	mvn.w	r6, #15
   2565e:	e7ec      	b.n	2563a <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   25660:	2a00      	cmp	r2, #0
   25662:	d1fa      	bne.n	2565a <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   25664:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   25668:	2b00      	cmp	r3, #0
   2566a:	d1f6      	bne.n	2565a <submit_to_queue_locked+0x6a>
	parent->next = child;
   2566c:	2300      	movs	r3, #0
   2566e:	6023      	str	r3, [r4, #0]
	return list->tail;
   25670:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   25674:	b963      	cbnz	r3, 25690 <submit_to_queue_locked+0xa0>
	list->head = node;
   25676:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   2567a:	4628      	mov	r0, r5
   2567c:	f009 fcd3 	bl	2f026 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   25680:	68e3      	ldr	r3, [r4, #12]
   25682:	f043 0304 	orr.w	r3, r3, #4
   25686:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   25688:	683b      	ldr	r3, [r7, #0]
   2568a:	60a3      	str	r3, [r4, #8]
}
   2568c:	4630      	mov	r0, r6
   2568e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   25690:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25692:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   25696:	e7f0      	b.n	2567a <submit_to_queue_locked+0x8a>
		return -EINVAL;
   25698:	f06f 0615 	mvn.w	r6, #21
   2569c:	e7cd      	b.n	2563a <submit_to_queue_locked+0x4a>
   2569e:	bf00      	nop
   256a0:	20003804 	.word	0x20003804

000256a4 <k_work_submit>:
{
   256a4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   256a6:	4801      	ldr	r0, [pc, #4]	; (256ac <k_work_submit+0x8>)
   256a8:	f009 bd43 	b.w	2f132 <k_work_submit_to_queue>
   256ac:	20002ca8 	.word	0x20002ca8

000256b0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   256b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   256b2:	b089      	sub	sp, #36	; 0x24
   256b4:	4604      	mov	r4, r0
	list->head = NULL;
   256b6:	2000      	movs	r0, #0
	list->tail = NULL;
   256b8:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   256bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   256be:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   256c2:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   256c6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   256ca:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   256ce:	b31d      	cbz	r5, 25718 <k_work_queue_start+0x68>
   256d0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   256d2:	2800      	cmp	r0, #0
   256d4:	f240 1001 	movw	r0, #257	; 0x101
   256d8:	bf08      	it	eq
   256da:	2001      	moveq	r0, #1
	*flagp = flags;
   256dc:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   256e0:	2000      	movs	r0, #0
   256e2:	f04f 36ff 	mov.w	r6, #4294967295
   256e6:	f04f 37ff 	mov.w	r7, #4294967295
   256ea:	e9cd 3003 	strd	r3, r0, [sp, #12]
   256ee:	e9cd 0001 	strd	r0, r0, [sp, #4]
   256f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   256f6:	4b09      	ldr	r3, [pc, #36]	; (2571c <k_work_queue_start+0x6c>)
   256f8:	9400      	str	r4, [sp, #0]
   256fa:	4620      	mov	r0, r4
   256fc:	f7ff fca6 	bl	2504c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   25700:	b125      	cbz	r5, 2570c <k_work_queue_start+0x5c>
   25702:	6829      	ldr	r1, [r5, #0]
   25704:	b111      	cbz	r1, 2570c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   25706:	4620      	mov	r0, r4
   25708:	f009 fbaf 	bl	2ee6a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2570c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   2570e:	b009      	add	sp, #36	; 0x24
   25710:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   25714:	f009 bbae 	b.w	2ee74 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   25718:	2001      	movs	r0, #1
   2571a:	e7df      	b.n	256dc <k_work_queue_start+0x2c>
   2571c:	0002547d 	.word	0x0002547d

00025720 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   25720:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25722:	9001      	str	r0, [sp, #4]
   25724:	4608      	mov	r0, r1
	__asm__ volatile(
   25726:	f04f 0140 	mov.w	r1, #64	; 0x40
   2572a:	f3ef 8411 	mrs	r4, BASEPRI
   2572e:	f381 8812 	msr	BASEPRI_MAX, r1
   25732:	f3bf 8f6f 	isb	sy
	return *flagp;
   25736:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   25738:	f011 0f0e 	tst.w	r1, #14
   2573c:	d116      	bne.n	2576c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2573e:	ea53 0502 	orrs.w	r5, r3, r2
   25742:	d108      	bne.n	25756 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   25744:	a901      	add	r1, sp, #4
   25746:	f7ff ff53 	bl	255f0 <submit_to_queue_locked>
	__asm__ volatile(
   2574a:	f384 8811 	msr	BASEPRI, r4
   2574e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   25752:	b003      	add	sp, #12
   25754:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   25756:	f041 0108 	orr.w	r1, r1, #8
   2575a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   2575c:	9901      	ldr	r1, [sp, #4]
   2575e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25760:	3010      	adds	r0, #16
   25762:	4903      	ldr	r1, [pc, #12]	; (25770 <k_work_schedule_for_queue+0x50>)
   25764:	f000 fbf4 	bl	25f50 <z_add_timeout>
	return ret;
   25768:	2001      	movs	r0, #1
   2576a:	e7ee      	b.n	2574a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   2576c:	2000      	movs	r0, #0
   2576e:	e7ec      	b.n	2574a <k_work_schedule_for_queue+0x2a>
   25770:	0002f09b 	.word	0x0002f09b

00025774 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   25774:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   25776:	4801      	ldr	r0, [pc, #4]	; (2577c <k_work_schedule+0x8>)
   25778:	f7ff bfd2 	b.w	25720 <k_work_schedule_for_queue>
   2577c:	20002ca8 	.word	0x20002ca8

00025780 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   25780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25782:	460c      	mov	r4, r1
   25784:	9001      	str	r0, [sp, #4]
   25786:	4616      	mov	r6, r2
   25788:	461d      	mov	r5, r3
	__asm__ volatile(
   2578a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2578e:	f3ef 8711 	mrs	r7, BASEPRI
   25792:	f383 8812 	msr	BASEPRI_MAX, r3
   25796:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2579a:	4608      	mov	r0, r1
   2579c:	f009 fc34 	bl	2f008 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   257a0:	ea55 0306 	orrs.w	r3, r5, r6
   257a4:	d109      	bne.n	257ba <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   257a6:	a901      	add	r1, sp, #4
   257a8:	4620      	mov	r0, r4
   257aa:	f7ff ff21 	bl	255f0 <submit_to_queue_locked>
	__asm__ volatile(
   257ae:	f387 8811 	msr	BASEPRI, r7
   257b2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   257b6:	b003      	add	sp, #12
   257b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   257ba:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   257bc:	4906      	ldr	r1, [pc, #24]	; (257d8 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   257be:	f043 0308 	orr.w	r3, r3, #8
   257c2:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   257c4:	9b01      	ldr	r3, [sp, #4]
   257c6:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   257c8:	f104 0010 	add.w	r0, r4, #16
   257cc:	4632      	mov	r2, r6
   257ce:	462b      	mov	r3, r5
   257d0:	f000 fbbe 	bl	25f50 <z_add_timeout>
	return ret;
   257d4:	2001      	movs	r0, #1
   257d6:	e7ea      	b.n	257ae <k_work_reschedule_for_queue+0x2e>
   257d8:	0002f09b 	.word	0x0002f09b

000257dc <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   257dc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   257de:	4801      	ldr	r0, [pc, #4]	; (257e4 <k_work_reschedule+0x8>)
   257e0:	f7ff bfce 	b.w	25780 <k_work_reschedule_for_queue>
   257e4:	20002ca8 	.word	0x20002ca8

000257e8 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   257e8:	89c3      	ldrh	r3, [r0, #14]
   257ea:	2b7f      	cmp	r3, #127	; 0x7f
   257ec:	d812      	bhi.n	25814 <sliceable+0x2c>
	int ret = slice_ticks;
   257ee:	4b0a      	ldr	r3, [pc, #40]	; (25818 <sliceable+0x30>)
   257f0:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   257f2:	b163      	cbz	r3, 2580e <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   257f4:	4b09      	ldr	r3, [pc, #36]	; (2581c <sliceable+0x34>)
   257f6:	f990 200e 	ldrsb.w	r2, [r0, #14]
   257fa:	681b      	ldr	r3, [r3, #0]
   257fc:	429a      	cmp	r2, r3
   257fe:	db09      	blt.n	25814 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   25800:	7b43      	ldrb	r3, [r0, #13]
   25802:	06db      	lsls	r3, r3, #27
   25804:	d106      	bne.n	25814 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   25806:	4b06      	ldr	r3, [pc, #24]	; (25820 <sliceable+0x38>)
   25808:	1ac3      	subs	r3, r0, r3
   2580a:	bf18      	it	ne
   2580c:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   2580e:	f003 0001 	and.w	r0, r3, #1
   25812:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   25814:	2300      	movs	r3, #0
   25816:	e7fa      	b.n	2580e <sliceable+0x26>
   25818:	20003838 	.word	0x20003838
   2581c:	20003834 	.word	0x20003834
   25820:	20002ba8 	.word	0x20002ba8

00025824 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   25824:	4b04      	ldr	r3, [pc, #16]	; (25838 <slice_timeout+0x14>)
   25826:	1ac0      	subs	r0, r0, r3
   25828:	4b04      	ldr	r3, [pc, #16]	; (2583c <slice_timeout+0x18>)
   2582a:	10c0      	asrs	r0, r0, #3
   2582c:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   2582e:	4b04      	ldr	r3, [pc, #16]	; (25840 <slice_timeout+0x1c>)
   25830:	2201      	movs	r2, #1
   25832:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   25834:	4770      	bx	lr
   25836:	bf00      	nop
   25838:	20002d48 	.word	0x20002d48
   2583c:	aaaaaaab 	.word	0xaaaaaaab
   25840:	2000498e 	.word	0x2000498e

00025844 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   25844:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   25846:	4b0e      	ldr	r3, [pc, #56]	; (25880 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   25848:	4c0e      	ldr	r4, [pc, #56]	; (25884 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   2584a:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   2584c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   25850:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   25854:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   25856:	4620      	mov	r0, r4
   25858:	f009 fdf4 	bl	2f444 <z_abort_timeout>
	slice_expired[cpu] = false;
   2585c:	4b0a      	ldr	r3, [pc, #40]	; (25888 <z_reset_time_slice+0x44>)
   2585e:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   25860:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   25862:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   25864:	f7ff ffc0 	bl	257e8 <sliceable>
   25868:	b148      	cbz	r0, 2587e <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   2586a:	4b08      	ldr	r3, [pc, #32]	; (2588c <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2586c:	4908      	ldr	r1, [pc, #32]	; (25890 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   2586e:	681a      	ldr	r2, [r3, #0]
   25870:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   25872:	4620      	mov	r0, r4
   25874:	17d3      	asrs	r3, r2, #31
	}
}
   25876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2587a:	f000 bb69 	b.w	25f50 <z_add_timeout>
}
   2587e:	bd70      	pop	{r4, r5, r6, pc}
   25880:	20003804 	.word	0x20003804
   25884:	20002d48 	.word	0x20002d48
   25888:	2000498e 	.word	0x2000498e
   2588c:	20003838 	.word	0x20003838
   25890:	00025825 	.word	0x00025825

00025894 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   25894:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   25896:	4d0d      	ldr	r5, [pc, #52]	; (258cc <update_cache+0x38>)
   25898:	462b      	mov	r3, r5
   2589a:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2589e:	429c      	cmp	r4, r3
   258a0:	d000      	beq.n	258a4 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   258a2:	b904      	cbnz	r4, 258a6 <update_cache+0x12>
   258a4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   258a6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   258a8:	b938      	cbnz	r0, 258ba <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   258aa:	7b5a      	ldrb	r2, [r3, #13]
   258ac:	06d2      	lsls	r2, r2, #27
   258ae:	d104      	bne.n	258ba <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   258b0:	69a2      	ldr	r2, [r4, #24]
   258b2:	b912      	cbnz	r2, 258ba <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   258b4:	89da      	ldrh	r2, [r3, #14]
   258b6:	2a7f      	cmp	r2, #127	; 0x7f
   258b8:	d805      	bhi.n	258c6 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   258ba:	429c      	cmp	r4, r3
   258bc:	d002      	beq.n	258c4 <update_cache+0x30>
			z_reset_time_slice(thread);
   258be:	4620      	mov	r0, r4
   258c0:	f7ff ffc0 	bl	25844 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   258c4:	4623      	mov	r3, r4
   258c6:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   258c8:	bd38      	pop	{r3, r4, r5, pc}
   258ca:	bf00      	nop
   258cc:	20003804 	.word	0x20003804

000258d0 <move_thread_to_end_of_prio_q>:
{
   258d0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   258d2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   258d6:	7b43      	ldrb	r3, [r0, #13]
   258d8:	2a00      	cmp	r2, #0
{
   258da:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   258dc:	da04      	bge.n	258e8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   258de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   258e2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   258e4:	f009 fc8f 	bl	2f206 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   258e8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   258ea:	4a15      	ldr	r2, [pc, #84]	; (25940 <move_thread_to_end_of_prio_q+0x70>)
   258ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
   258f0:	4610      	mov	r0, r2
   258f2:	734b      	strb	r3, [r1, #13]
   258f4:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   258f8:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   258fa:	4283      	cmp	r3, r0
   258fc:	bf08      	it	eq
   258fe:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25900:	b923      	cbnz	r3, 2590c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   25902:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   25906:	6021      	str	r1, [r4, #0]
	list->tail = node;
   25908:	6211      	str	r1, [r2, #32]
}
   2590a:	e00c      	b.n	25926 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   2590c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   25910:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   25914:	42b5      	cmp	r5, r6
   25916:	d00e      	beq.n	25936 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25918:	42ae      	cmp	r6, r5
   2591a:	dd0c      	ble.n	25936 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2591c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   2591e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   25922:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   25924:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   25926:	6890      	ldr	r0, [r2, #8]
   25928:	1a43      	subs	r3, r0, r1
   2592a:	4258      	negs	r0, r3
}
   2592c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   25930:	4158      	adcs	r0, r3
   25932:	f7ff bfaf 	b.w	25894 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   25936:	429c      	cmp	r4, r3
   25938:	d0e3      	beq.n	25902 <move_thread_to_end_of_prio_q+0x32>
   2593a:	681b      	ldr	r3, [r3, #0]
   2593c:	e7e0      	b.n	25900 <move_thread_to_end_of_prio_q+0x30>
   2593e:	bf00      	nop
   25940:	20003804 	.word	0x20003804

00025944 <ready_thread>:
{
   25944:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   25946:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2594a:	7b42      	ldrb	r2, [r0, #13]
   2594c:	2b00      	cmp	r3, #0
   2594e:	db29      	blt.n	259a4 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25950:	06d3      	lsls	r3, r2, #27
   25952:	d127      	bne.n	259a4 <ready_thread+0x60>
	return node->next != NULL;
   25954:	6983      	ldr	r3, [r0, #24]
   25956:	bb2b      	cbnz	r3, 259a4 <ready_thread+0x60>
	return list->head == list;
   25958:	4913      	ldr	r1, [pc, #76]	; (259a8 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   2595a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2595e:	7342      	strb	r2, [r0, #13]
   25960:	460a      	mov	r2, r1
   25962:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25966:	4294      	cmp	r4, r2
   25968:	bf18      	it	ne
   2596a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   2596c:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2596e:	b923      	cbnz	r3, 2597a <ready_thread+0x36>
	node->prev = tail;
   25970:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   25974:	6020      	str	r0, [r4, #0]
	list->tail = node;
   25976:	6208      	str	r0, [r1, #32]
}
   25978:	e00c      	b.n	25994 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   2597a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2597e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   25982:	42b5      	cmp	r5, r6
   25984:	d00a      	beq.n	2599c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25986:	42ae      	cmp	r6, r5
   25988:	dd08      	ble.n	2599c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   2598a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2598c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   25990:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   25992:	6058      	str	r0, [r3, #4]
}
   25994:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   25996:	2000      	movs	r0, #0
   25998:	f7ff bf7c 	b.w	25894 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2599c:	42a3      	cmp	r3, r4
   2599e:	d0e7      	beq.n	25970 <ready_thread+0x2c>
   259a0:	681b      	ldr	r3, [r3, #0]
   259a2:	e7e4      	b.n	2596e <ready_thread+0x2a>
}
   259a4:	bc70      	pop	{r4, r5, r6}
   259a6:	4770      	bx	lr
   259a8:	20003804 	.word	0x20003804

000259ac <unready_thread>:
{
   259ac:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   259ae:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   259b2:	7b43      	ldrb	r3, [r0, #13]
   259b4:	2a00      	cmp	r2, #0
{
   259b6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   259b8:	da04      	bge.n	259c4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   259ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   259be:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   259c0:	f009 fc21 	bl	2f206 <sys_dlist_remove>
	update_cache(thread == _current);
   259c4:	4b04      	ldr	r3, [pc, #16]	; (259d8 <unready_thread+0x2c>)
   259c6:	6898      	ldr	r0, [r3, #8]
   259c8:	1a43      	subs	r3, r0, r1
   259ca:	4258      	negs	r0, r3
   259cc:	4158      	adcs	r0, r3
}
   259ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   259d2:	f7ff bf5f 	b.w	25894 <update_cache>
   259d6:	bf00      	nop
   259d8:	20003804 	.word	0x20003804

000259dc <pend_locked>:
{
   259dc:	b570      	push	{r4, r5, r6, lr}
   259de:	4615      	mov	r5, r2
   259e0:	461c      	mov	r4, r3
   259e2:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   259e4:	f009 fc2a 	bl	2f23c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   259e8:	f1b4 3fff 	cmp.w	r4, #4294967295
   259ec:	bf08      	it	eq
   259ee:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   259f2:	d008      	beq.n	25a06 <pend_locked+0x2a>
   259f4:	462a      	mov	r2, r5
   259f6:	4623      	mov	r3, r4
   259f8:	f106 0018 	add.w	r0, r6, #24
   259fc:	4902      	ldr	r1, [pc, #8]	; (25a08 <pend_locked+0x2c>)
}
   259fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25a02:	f000 baa5 	b.w	25f50 <z_add_timeout>
   25a06:	bd70      	pop	{r4, r5, r6, pc}
   25a08:	0002f315 	.word	0x0002f315

00025a0c <z_time_slice>:
{
   25a0c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   25a0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   25a12:	f3ef 8511 	mrs	r5, BASEPRI
   25a16:	f383 8812 	msr	BASEPRI_MAX, r3
   25a1a:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   25a1e:	4b10      	ldr	r3, [pc, #64]	; (25a60 <z_time_slice+0x54>)
	if (pending_current == curr) {
   25a20:	4a10      	ldr	r2, [pc, #64]	; (25a64 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   25a22:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   25a24:	6810      	ldr	r0, [r2, #0]
   25a26:	42a0      	cmp	r0, r4
   25a28:	d106      	bne.n	25a38 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   25a2a:	f7ff ff0b 	bl	25844 <z_reset_time_slice>
	__asm__ volatile(
   25a2e:	f385 8811 	msr	BASEPRI, r5
   25a32:	f3bf 8f6f 	isb	sy
}
   25a36:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   25a38:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   25a3a:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   25a3c:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   25a3e:	4a0a      	ldr	r2, [pc, #40]	; (25a68 <z_time_slice+0x5c>)
   25a40:	5cd3      	ldrb	r3, [r2, r3]
   25a42:	2b00      	cmp	r3, #0
   25a44:	d0f3      	beq.n	25a2e <z_time_slice+0x22>
   25a46:	4620      	mov	r0, r4
   25a48:	f7ff fece 	bl	257e8 <sliceable>
   25a4c:	2800      	cmp	r0, #0
   25a4e:	d0ee      	beq.n	25a2e <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   25a50:	7b63      	ldrb	r3, [r4, #13]
   25a52:	06db      	lsls	r3, r3, #27
   25a54:	d102      	bne.n	25a5c <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   25a56:	4620      	mov	r0, r4
   25a58:	f7ff ff3a 	bl	258d0 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   25a5c:	4620      	mov	r0, r4
   25a5e:	e7e4      	b.n	25a2a <z_time_slice+0x1e>
   25a60:	20003804 	.word	0x20003804
   25a64:	20003830 	.word	0x20003830
   25a68:	2000498e 	.word	0x2000498e

00025a6c <z_pend_curr>:
{
   25a6c:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   25a6e:	480c      	ldr	r0, [pc, #48]	; (25aa0 <z_pend_curr+0x34>)
   25a70:	4d0c      	ldr	r5, [pc, #48]	; (25aa4 <z_pend_curr+0x38>)
   25a72:	6886      	ldr	r6, [r0, #8]
   25a74:	602e      	str	r6, [r5, #0]
{
   25a76:	460c      	mov	r4, r1
   25a78:	4611      	mov	r1, r2
   25a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   25a7e:	f04f 0640 	mov.w	r6, #64	; 0x40
   25a82:	f3ef 8511 	mrs	r5, BASEPRI
   25a86:	f386 8812 	msr	BASEPRI_MAX, r6
   25a8a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   25a8e:	6880      	ldr	r0, [r0, #8]
   25a90:	f7ff ffa4 	bl	259dc <pend_locked>
	ret = arch_swap(key);
   25a94:	4620      	mov	r0, r4
}
   25a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25a9a:	f7ef bd0f 	b.w	154bc <arch_swap>
   25a9e:	bf00      	nop
   25aa0:	20003804 	.word	0x20003804
   25aa4:	20003830 	.word	0x20003830

00025aa8 <z_set_prio>:
{
   25aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25aaa:	4604      	mov	r4, r0
   25aac:	f04f 0340 	mov.w	r3, #64	; 0x40
   25ab0:	f3ef 8611 	mrs	r6, BASEPRI
   25ab4:	f383 8812 	msr	BASEPRI_MAX, r3
   25ab8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   25abc:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25abe:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   25ac0:	b249      	sxtb	r1, r1
   25ac2:	d119      	bne.n	25af8 <z_set_prio+0x50>
	return node->next != NULL;
   25ac4:	6985      	ldr	r5, [r0, #24]
   25ac6:	b9bd      	cbnz	r5, 25af8 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25acc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25ace:	f009 fb9a 	bl	2f206 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   25ad2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   25ad4:	4a16      	ldr	r2, [pc, #88]	; (25b30 <z_set_prio+0x88>)
				thread->base.prio = prio;
   25ad6:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   25ad8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25adc:	7343      	strb	r3, [r0, #13]
   25ade:	4613      	mov	r3, r2
   25ae0:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25ae4:	4298      	cmp	r0, r3
   25ae6:	bf18      	it	ne
   25ae8:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   25aea:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25aec:	b95d      	cbnz	r5, 25b06 <z_set_prio+0x5e>
	node->prev = tail;
   25aee:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   25af2:	6004      	str	r4, [r0, #0]
	list->tail = node;
   25af4:	6214      	str	r4, [r2, #32]
}
   25af6:	e011      	b.n	25b1c <z_set_prio+0x74>
			thread->base.prio = prio;
   25af8:	73a1      	strb	r1, [r4, #14]
   25afa:	2000      	movs	r0, #0
	__asm__ volatile(
   25afc:	f386 8811 	msr	BASEPRI, r6
   25b00:	f3bf 8f6f 	isb	sy
}
   25b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   25b06:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   25b0a:	42b9      	cmp	r1, r7
   25b0c:	d00b      	beq.n	25b26 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25b0e:	428f      	cmp	r7, r1
   25b10:	dd09      	ble.n	25b26 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   25b12:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   25b14:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   25b18:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   25b1a:	606c      	str	r4, [r5, #4]
			update_cache(1);
   25b1c:	2001      	movs	r0, #1
   25b1e:	f7ff feb9 	bl	25894 <update_cache>
   25b22:	2001      	movs	r0, #1
   25b24:	e7ea      	b.n	25afc <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   25b26:	42a8      	cmp	r0, r5
   25b28:	d0e1      	beq.n	25aee <z_set_prio+0x46>
   25b2a:	682d      	ldr	r5, [r5, #0]
   25b2c:	e7de      	b.n	25aec <z_set_prio+0x44>
   25b2e:	bf00      	nop
   25b30:	20003804 	.word	0x20003804

00025b34 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25b34:	b949      	cbnz	r1, 25b4a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25b36:	f3ef 8005 	mrs	r0, IPSR
   25b3a:	b930      	cbnz	r0, 25b4a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   25b3c:	4b05      	ldr	r3, [pc, #20]	; (25b54 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   25b3e:	699a      	ldr	r2, [r3, #24]
   25b40:	689b      	ldr	r3, [r3, #8]
   25b42:	429a      	cmp	r2, r3
   25b44:	d001      	beq.n	25b4a <z_reschedule+0x16>
   25b46:	f7ef bcb9 	b.w	154bc <arch_swap>
   25b4a:	f381 8811 	msr	BASEPRI, r1
   25b4e:	f3bf 8f6f 	isb	sy
}
   25b52:	4770      	bx	lr
   25b54:	20003804 	.word	0x20003804

00025b58 <z_sched_start>:
{
   25b58:	b510      	push	{r4, lr}
	__asm__ volatile(
   25b5a:	f04f 0240 	mov.w	r2, #64	; 0x40
   25b5e:	f3ef 8411 	mrs	r4, BASEPRI
   25b62:	f382 8812 	msr	BASEPRI_MAX, r2
   25b66:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   25b6a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   25b6c:	0751      	lsls	r1, r2, #29
   25b6e:	d404      	bmi.n	25b7a <z_sched_start+0x22>
	__asm__ volatile(
   25b70:	f384 8811 	msr	BASEPRI, r4
   25b74:	f3bf 8f6f 	isb	sy
}
   25b78:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25b7a:	f022 0204 	bic.w	r2, r2, #4
   25b7e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   25b80:	f7ff fee0 	bl	25944 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   25b84:	4621      	mov	r1, r4
   25b86:	4802      	ldr	r0, [pc, #8]	; (25b90 <z_sched_start+0x38>)
}
   25b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   25b8c:	f7ff bfd2 	b.w	25b34 <z_reschedule>
   25b90:	2000498f 	.word	0x2000498f

00025b94 <z_impl_k_thread_suspend>:
{
   25b94:	b570      	push	{r4, r5, r6, lr}
   25b96:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   25b98:	3018      	adds	r0, #24
   25b9a:	f009 fc53 	bl	2f444 <z_abort_timeout>
	__asm__ volatile(
   25b9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   25ba2:	f3ef 8611 	mrs	r6, BASEPRI
   25ba6:	f383 8812 	msr	BASEPRI_MAX, r3
   25baa:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   25bae:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   25bb2:	7b63      	ldrb	r3, [r4, #13]
   25bb4:	2a00      	cmp	r2, #0
   25bb6:	da05      	bge.n	25bc4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25bbc:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25bbe:	4620      	mov	r0, r4
   25bc0:	f009 fb21 	bl	2f206 <sys_dlist_remove>
		update_cache(thread == _current);
   25bc4:	4d0b      	ldr	r5, [pc, #44]	; (25bf4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   25bc6:	7b63      	ldrb	r3, [r4, #13]
   25bc8:	68a8      	ldr	r0, [r5, #8]
   25bca:	f043 0310 	orr.w	r3, r3, #16
   25bce:	7363      	strb	r3, [r4, #13]
   25bd0:	1b03      	subs	r3, r0, r4
   25bd2:	4258      	negs	r0, r3
   25bd4:	4158      	adcs	r0, r3
   25bd6:	f7ff fe5d 	bl	25894 <update_cache>
	__asm__ volatile(
   25bda:	f386 8811 	msr	BASEPRI, r6
   25bde:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   25be2:	68ab      	ldr	r3, [r5, #8]
   25be4:	42a3      	cmp	r3, r4
   25be6:	d103      	bne.n	25bf0 <z_impl_k_thread_suspend+0x5c>
}
   25be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   25bec:	f009 bbed 	b.w	2f3ca <z_reschedule_unlocked>
}
   25bf0:	bd70      	pop	{r4, r5, r6, pc}
   25bf2:	bf00      	nop
   25bf4:	20003804 	.word	0x20003804

00025bf8 <k_sched_lock>:
	__asm__ volatile(
   25bf8:	f04f 0340 	mov.w	r3, #64	; 0x40
   25bfc:	f3ef 8111 	mrs	r1, BASEPRI
   25c00:	f383 8812 	msr	BASEPRI_MAX, r3
   25c04:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   25c08:	4b04      	ldr	r3, [pc, #16]	; (25c1c <k_sched_lock+0x24>)
   25c0a:	689a      	ldr	r2, [r3, #8]
   25c0c:	7bd3      	ldrb	r3, [r2, #15]
   25c0e:	3b01      	subs	r3, #1
   25c10:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   25c12:	f381 8811 	msr	BASEPRI, r1
   25c16:	f3bf 8f6f 	isb	sy
}
   25c1a:	4770      	bx	lr
   25c1c:	20003804 	.word	0x20003804

00025c20 <k_sched_unlock>:
{
   25c20:	b510      	push	{r4, lr}
	__asm__ volatile(
   25c22:	f04f 0340 	mov.w	r3, #64	; 0x40
   25c26:	f3ef 8411 	mrs	r4, BASEPRI
   25c2a:	f383 8812 	msr	BASEPRI_MAX, r3
   25c2e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   25c32:	4b08      	ldr	r3, [pc, #32]	; (25c54 <k_sched_unlock+0x34>)
   25c34:	689a      	ldr	r2, [r3, #8]
   25c36:	7bd3      	ldrb	r3, [r2, #15]
   25c38:	3301      	adds	r3, #1
   25c3a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   25c3c:	2000      	movs	r0, #0
   25c3e:	f7ff fe29 	bl	25894 <update_cache>
	__asm__ volatile(
   25c42:	f384 8811 	msr	BASEPRI, r4
   25c46:	f3bf 8f6f 	isb	sy
}
   25c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   25c4e:	f009 bbbc 	b.w	2f3ca <z_reschedule_unlocked>
   25c52:	bf00      	nop
   25c54:	20003804 	.word	0x20003804

00025c58 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   25c58:	4b02      	ldr	r3, [pc, #8]	; (25c64 <z_sched_init+0xc>)
   25c5a:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   25c5e:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   25c62:	4770      	bx	lr
   25c64:	20003804 	.word	0x20003804

00025c68 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   25c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   25c6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   25c6e:	f3ef 8511 	mrs	r5, BASEPRI
   25c72:	f383 8812 	msr	BASEPRI_MAX, r3
   25c76:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   25c7a:	4919      	ldr	r1, [pc, #100]	; (25ce0 <z_impl_k_yield+0x78>)
   25c7c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25c7e:	7b43      	ldrb	r3, [r0, #13]
   25c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25c84:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25c86:	f009 fabe 	bl	2f206 <sys_dlist_remove>
	}
	queue_thread(_current);
   25c8a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   25c8c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   25c8e:	4608      	mov	r0, r1
   25c90:	f062 027f 	orn	r2, r2, #127	; 0x7f
   25c94:	735a      	strb	r2, [r3, #13]
   25c96:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   25c9a:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25c9c:	4282      	cmp	r2, r0
   25c9e:	bf08      	it	eq
   25ca0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25ca2:	b922      	cbnz	r2, 25cae <z_impl_k_yield+0x46>
	node->prev = tail;
   25ca4:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   25ca8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   25caa:	620b      	str	r3, [r1, #32]
}
   25cac:	e00c      	b.n	25cc8 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   25cae:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   25cb2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   25cb6:	42be      	cmp	r6, r7
   25cb8:	d00e      	beq.n	25cd8 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25cba:	42b7      	cmp	r7, r6
   25cbc:	dd0c      	ble.n	25cd8 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   25cbe:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   25cc0:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   25cc4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   25cc6:	6053      	str	r3, [r2, #4]
	update_cache(1);
   25cc8:	2001      	movs	r0, #1
   25cca:	f7ff fde3 	bl	25894 <update_cache>
   25cce:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   25cd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   25cd4:	f7ef bbf2 	b.w	154bc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   25cd8:	42a2      	cmp	r2, r4
   25cda:	d0e3      	beq.n	25ca4 <z_impl_k_yield+0x3c>
   25cdc:	6812      	ldr	r2, [r2, #0]
   25cde:	e7e0      	b.n	25ca2 <z_impl_k_yield+0x3a>
   25ce0:	20003804 	.word	0x20003804

00025ce4 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   25ce4:	ea50 0301 	orrs.w	r3, r0, r1
{
   25ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25cec:	4605      	mov	r5, r0
   25cee:	460e      	mov	r6, r1
	if (ticks == 0) {
   25cf0:	d103      	bne.n	25cfa <z_tick_sleep+0x16>
	z_impl_k_yield();
   25cf2:	f7ff ffb9 	bl	25c68 <z_impl_k_yield>
		k_yield();
		return 0;
   25cf6:	2000      	movs	r0, #0
   25cf8:	e02c      	b.n	25d54 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   25cfa:	1c83      	adds	r3, r0, #2
   25cfc:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   25d00:	db2a      	blt.n	25d58 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   25d02:	f009 fbc5 	bl	2f490 <sys_clock_tick_get_32>
   25d06:	182c      	adds	r4, r5, r0
   25d08:	f04f 0340 	mov.w	r3, #64	; 0x40
   25d0c:	f3ef 8811 	mrs	r8, BASEPRI
   25d10:	f383 8812 	msr	BASEPRI_MAX, r3
   25d14:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   25d18:	4f11      	ldr	r7, [pc, #68]	; (25d60 <z_tick_sleep+0x7c>)
   25d1a:	4b12      	ldr	r3, [pc, #72]	; (25d64 <z_tick_sleep+0x80>)
   25d1c:	68b8      	ldr	r0, [r7, #8]
   25d1e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   25d20:	f7ff fe44 	bl	259ac <unready_thread>
	z_add_thread_timeout(_current, timeout);
   25d24:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25d26:	4910      	ldr	r1, [pc, #64]	; (25d68 <z_tick_sleep+0x84>)
   25d28:	462a      	mov	r2, r5
   25d2a:	4633      	mov	r3, r6
   25d2c:	3018      	adds	r0, #24
   25d2e:	f000 f90f 	bl	25f50 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   25d32:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   25d34:	7b53      	ldrb	r3, [r2, #13]
   25d36:	f043 0310 	orr.w	r3, r3, #16
   25d3a:	7353      	strb	r3, [r2, #13]
   25d3c:	4640      	mov	r0, r8
   25d3e:	f7ef fbbd 	bl	154bc <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   25d42:	f009 fba5 	bl	2f490 <sys_clock_tick_get_32>
   25d46:	1a20      	subs	r0, r4, r0
   25d48:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   25d4c:	2801      	cmp	r0, #1
   25d4e:	f173 0300 	sbcs.w	r3, r3, #0
   25d52:	dbd0      	blt.n	25cf6 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   25d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   25d58:	f06f 0401 	mvn.w	r4, #1
   25d5c:	1a24      	subs	r4, r4, r0
   25d5e:	e7d3      	b.n	25d08 <z_tick_sleep+0x24>
   25d60:	20003804 	.word	0x20003804
   25d64:	20003830 	.word	0x20003830
   25d68:	0002f315 	.word	0x0002f315

00025d6c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25d6c:	f1b1 3fff 	cmp.w	r1, #4294967295
   25d70:	bf08      	it	eq
   25d72:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   25d76:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25d78:	d106      	bne.n	25d88 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   25d7a:	4b08      	ldr	r3, [pc, #32]	; (25d9c <z_impl_k_sleep+0x30>)
   25d7c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   25d7e:	f7ff ff09 	bl	25b94 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   25d82:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   25d86:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   25d88:	f7ff ffac 	bl	25ce4 <z_tick_sleep>
   25d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   25d90:	fb80 0303 	smull	r0, r3, r0, r3
   25d94:	0bc0      	lsrs	r0, r0, #15
   25d96:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   25d9a:	e7f4      	b.n	25d86 <z_impl_k_sleep+0x1a>
   25d9c:	20003804 	.word	0x20003804

00025da0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   25da0:	4b01      	ldr	r3, [pc, #4]	; (25da8 <z_impl_z_current_get+0x8>)
   25da2:	6898      	ldr	r0, [r3, #8]
   25da4:	4770      	bx	lr
   25da6:	bf00      	nop
   25da8:	20003804 	.word	0x20003804

00025dac <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   25dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25db0:	4604      	mov	r4, r0
   25db2:	f04f 0340 	mov.w	r3, #64	; 0x40
   25db6:	f3ef 8611 	mrs	r6, BASEPRI
   25dba:	f383 8812 	msr	BASEPRI_MAX, r3
   25dbe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   25dc2:	7b03      	ldrb	r3, [r0, #12]
   25dc4:	07d9      	lsls	r1, r3, #31
   25dc6:	d50b      	bpl.n	25de0 <z_thread_abort+0x34>
	__asm__ volatile(
   25dc8:	f386 8811 	msr	BASEPRI, r6
   25dcc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   25dd0:	4040      	eors	r0, r0
   25dd2:	f380 8811 	msr	BASEPRI, r0
   25dd6:	f04f 0004 	mov.w	r0, #4
   25dda:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   25ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   25de0:	7b43      	ldrb	r3, [r0, #13]
   25de2:	071a      	lsls	r2, r3, #28
   25de4:	d504      	bpl.n	25df0 <z_thread_abort+0x44>
   25de6:	f386 8811 	msr	BASEPRI, r6
   25dea:	f3bf 8f6f 	isb	sy
   25dee:	e7f5      	b.n	25ddc <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   25df0:	f023 0220 	bic.w	r2, r3, #32
   25df4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   25df8:	09d2      	lsrs	r2, r2, #7
   25dfa:	d120      	bne.n	25e3e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   25dfc:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   25dfe:	68a3      	ldr	r3, [r4, #8]
   25e00:	b113      	cbz	r3, 25e08 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   25e02:	4620      	mov	r0, r4
   25e04:	f009 fa07 	bl	2f216 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   25e08:	f104 0018 	add.w	r0, r4, #24
   25e0c:	f009 fb1a 	bl	2f444 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   25e10:	f104 0758 	add.w	r7, r4, #88	; 0x58
   25e14:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   25e18:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25e1a:	42bd      	cmp	r5, r7
   25e1c:	d000      	beq.n	25e20 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   25e1e:	b9b5      	cbnz	r5, 25e4e <z_thread_abort+0xa2>
		update_cache(1);
   25e20:	2001      	movs	r0, #1
   25e22:	f7ff fd37 	bl	25894 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   25e26:	4b10      	ldr	r3, [pc, #64]	; (25e68 <z_thread_abort+0xbc>)
   25e28:	689b      	ldr	r3, [r3, #8]
   25e2a:	42a3      	cmp	r3, r4
   25e2c:	d1db      	bne.n	25de6 <z_thread_abort+0x3a>
   25e2e:	f3ef 8305 	mrs	r3, IPSR
   25e32:	2b00      	cmp	r3, #0
   25e34:	d1d7      	bne.n	25de6 <z_thread_abort+0x3a>
   25e36:	4630      	mov	r0, r6
   25e38:	f7ef fb40 	bl	154bc <arch_swap>
	return ret;
   25e3c:	e7d3      	b.n	25de6 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25e3e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   25e42:	f043 0308 	orr.w	r3, r3, #8
   25e46:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25e48:	f009 f9dd 	bl	2f206 <sys_dlist_remove>
}
   25e4c:	e7d7      	b.n	25dfe <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   25e4e:	4628      	mov	r0, r5
   25e50:	f009 f9e1 	bl	2f216 <unpend_thread_no_timeout>
   25e54:	f105 0018 	add.w	r0, r5, #24
   25e58:	f009 faf4 	bl	2f444 <z_abort_timeout>
   25e5c:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   25e60:	4628      	mov	r0, r5
   25e62:	f7ff fd6f 	bl	25944 <ready_thread>
   25e66:	e7d7      	b.n	25e18 <z_thread_abort+0x6c>
   25e68:	20003804 	.word	0x20003804

00025e6c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   25e6c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   25e6e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   25e72:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   25e74:	e9cd 6700 	strd	r6, r7, [sp]
   25e78:	f7ff fdf8 	bl	25a6c <z_pend_curr>

	if (data != NULL) {
   25e7c:	b11c      	cbz	r4, 25e86 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   25e7e:	4b03      	ldr	r3, [pc, #12]	; (25e8c <z_sched_wait+0x20>)
   25e80:	689b      	ldr	r3, [r3, #8]
   25e82:	695b      	ldr	r3, [r3, #20]
   25e84:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   25e86:	b002      	add	sp, #8
   25e88:	bdd0      	pop	{r4, r6, r7, pc}
   25e8a:	bf00      	nop
   25e8c:	20003804 	.word	0x20003804

00025e90 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   25e90:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   25e92:	4806      	ldr	r0, [pc, #24]	; (25eac <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   25e94:	4a06      	ldr	r2, [pc, #24]	; (25eb0 <z_data_copy+0x20>)
   25e96:	4907      	ldr	r1, [pc, #28]	; (25eb4 <z_data_copy+0x24>)
   25e98:	1a12      	subs	r2, r2, r0
   25e9a:	f008 ff1f 	bl	2ecdc <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   25e9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   25ea2:	4a05      	ldr	r2, [pc, #20]	; (25eb8 <z_data_copy+0x28>)
   25ea4:	4905      	ldr	r1, [pc, #20]	; (25ebc <z_data_copy+0x2c>)
   25ea6:	4806      	ldr	r0, [pc, #24]	; (25ec0 <z_data_copy+0x30>)
   25ea8:	f008 bf18 	b.w	2ecdc <z_early_memcpy>
   25eac:	20000000 	.word	0x20000000
   25eb0:	20000ad8 	.word	0x20000ad8
   25eb4:	00034f60 	.word	0x00034f60
   25eb8:	00000000 	.word	0x00000000
   25ebc:	00034f60 	.word	0x00034f60
   25ec0:	20000000 	.word	0x20000000

00025ec4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   25ec4:	4b03      	ldr	r3, [pc, #12]	; (25ed4 <elapsed+0x10>)
   25ec6:	681b      	ldr	r3, [r3, #0]
   25ec8:	b90b      	cbnz	r3, 25ece <elapsed+0xa>
   25eca:	f7fc bca5 	b.w	22818 <sys_clock_elapsed>
}
   25ece:	2000      	movs	r0, #0
   25ed0:	4770      	bx	lr
   25ed2:	bf00      	nop
   25ed4:	2000383c 	.word	0x2000383c

00025ed8 <next_timeout>:

static int32_t next_timeout(void)
{
   25ed8:	b510      	push	{r4, lr}
	return list->head == list;
   25eda:	4b0e      	ldr	r3, [pc, #56]	; (25f14 <next_timeout+0x3c>)
   25edc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25ede:	429c      	cmp	r4, r3
   25ee0:	d104      	bne.n	25eec <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   25ee2:	f7ff ffef 	bl	25ec4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   25ee6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   25eea:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   25eec:	f7ff ffea 	bl	25ec4 <elapsed>
	if ((to == NULL) ||
   25ef0:	2c00      	cmp	r4, #0
   25ef2:	d0f8      	beq.n	25ee6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   25ef4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   25ef8:	1a1b      	subs	r3, r3, r0
   25efa:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   25efe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   25f02:	f172 0100 	sbcs.w	r1, r2, #0
   25f06:	daee      	bge.n	25ee6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   25f08:	2a00      	cmp	r2, #0
   25f0a:	bfac      	ite	ge
   25f0c:	4618      	movge	r0, r3
   25f0e:	2000      	movlt	r0, #0
	return ret;
   25f10:	e7eb      	b.n	25eea <next_timeout+0x12>
   25f12:	bf00      	nop
   25f14:	20000754 	.word	0x20000754

00025f18 <remove_timeout>:
{
   25f18:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25f1a:	b170      	cbz	r0, 25f3a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   25f1c:	4b0b      	ldr	r3, [pc, #44]	; (25f4c <remove_timeout+0x34>)
   25f1e:	685b      	ldr	r3, [r3, #4]
   25f20:	4298      	cmp	r0, r3
   25f22:	d00a      	beq.n	25f3a <remove_timeout+0x22>
   25f24:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   25f26:	b143      	cbz	r3, 25f3a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   25f28:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   25f2c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   25f30:	1912      	adds	r2, r2, r4
   25f32:	eb41 0105 	adc.w	r1, r1, r5
   25f36:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   25f3a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   25f3e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25f40:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25f42:	2300      	movs	r3, #0
	node->prev = NULL;
   25f44:	e9c0 3300 	strd	r3, r3, [r0]
}
   25f48:	bd30      	pop	{r4, r5, pc}
   25f4a:	bf00      	nop
   25f4c:	20000754 	.word	0x20000754

00025f50 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25f50:	f1b3 3fff 	cmp.w	r3, #4294967295
   25f54:	bf08      	it	eq
   25f56:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   25f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25f5c:	4604      	mov	r4, r0
   25f5e:	461d      	mov	r5, r3
   25f60:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25f62:	d05c      	beq.n	2601e <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   25f64:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   25f66:	f04f 0340 	mov.w	r3, #64	; 0x40
   25f6a:	f3ef 8711 	mrs	r7, BASEPRI
   25f6e:	f383 8812 	msr	BASEPRI_MAX, r3
   25f72:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   25f76:	3201      	adds	r2, #1
   25f78:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   25f7c:	da24      	bge.n	25fc8 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   25f7e:	492d      	ldr	r1, [pc, #180]	; (26034 <z_add_timeout+0xe4>)
   25f80:	e9d1 2000 	ldrd	r2, r0, [r1]
   25f84:	f06f 0301 	mvn.w	r3, #1
   25f88:	1a9b      	subs	r3, r3, r2
   25f8a:	f04f 32ff 	mov.w	r2, #4294967295
   25f8e:	eb62 0000 	sbc.w	r0, r2, r0
   25f92:	1b9e      	subs	r6, r3, r6
   25f94:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   25f98:	2e01      	cmp	r6, #1
   25f9a:	f170 0300 	sbcs.w	r3, r0, #0
   25f9e:	da01      	bge.n	25fa4 <z_add_timeout+0x54>
   25fa0:	2601      	movs	r6, #1
   25fa2:	2000      	movs	r0, #0
   25fa4:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   25fa8:	4e23      	ldr	r6, [pc, #140]	; (26038 <z_add_timeout+0xe8>)
   25faa:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   25fae:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25fb0:	45b4      	cmp	ip, r6
   25fb2:	bf08      	it	eq
   25fb4:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   25fb8:	f1bc 0f00 	cmp.w	ip, #0
   25fbc:	d10d      	bne.n	25fda <z_add_timeout+0x8a>
	node->prev = tail;
   25fbe:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   25fc2:	602c      	str	r4, [r5, #0]
	list->tail = node;
   25fc4:	6074      	str	r4, [r6, #4]
}
   25fc6:	e01c      	b.n	26002 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   25fc8:	f7ff ff7c 	bl	25ec4 <elapsed>
   25fcc:	3601      	adds	r6, #1
   25fce:	f145 0500 	adc.w	r5, r5, #0
   25fd2:	1836      	adds	r6, r6, r0
   25fd4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   25fd8:	e7e4      	b.n	25fa4 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   25fda:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   25fde:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   25fe2:	4293      	cmp	r3, r2
   25fe4:	eb71 0e00 	sbcs.w	lr, r1, r0
   25fe8:	da1a      	bge.n	26020 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   25fea:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   25fec:	f8dc 3004 	ldr.w	r3, [ip, #4]
   25ff0:	eb60 0001 	sbc.w	r0, r0, r1
   25ff4:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   25ff8:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   25ffc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   25ffe:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   26002:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26004:	42b3      	cmp	r3, r6
   26006:	d006      	beq.n	26016 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   26008:	429c      	cmp	r4, r3
   2600a:	d104      	bne.n	26016 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   2600c:	f7ff ff64 	bl	25ed8 <next_timeout>
   26010:	2100      	movs	r1, #0
   26012:	f7fc fbcf 	bl	227b4 <sys_clock_set_timeout>
	__asm__ volatile(
   26016:	f387 8811 	msr	BASEPRI, r7
   2601a:	f3bf 8f6f 	isb	sy
		}
	}
}
   2601e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   26020:	1a9b      	subs	r3, r3, r2
   26022:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   26026:	45ac      	cmp	ip, r5
   26028:	e9c4 3104 	strd	r3, r1, [r4, #16]
   2602c:	d0c7      	beq.n	25fbe <z_add_timeout+0x6e>
   2602e:	f8dc c000 	ldr.w	ip, [ip]
   26032:	e7c1      	b.n	25fb8 <z_add_timeout+0x68>
   26034:	20002d60 	.word	0x20002d60
   26038:	20000754 	.word	0x20000754

0002603c <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   2603c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   26040:	f04f 0340 	mov.w	r3, #64	; 0x40
   26044:	f3ef 8c11 	mrs	ip, BASEPRI
   26048:	f383 8812 	msr	BASEPRI_MAX, r3
   2604c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   26050:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 26104 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   26054:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 26108 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   26058:	4f2c      	ldr	r7, [pc, #176]	; (2610c <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
   2605a:	f8c9 0000 	str.w	r0, [r9]
   2605e:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   26062:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26064:	4550      	cmp	r0, sl
   26066:	bf08      	it	eq
   26068:	2000      	moveq	r0, #0
   2606a:	2500      	movs	r5, #0
		curr_tick += dt;
   2606c:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   26070:	f8d9 3000 	ldr.w	r3, [r9]
   26074:	46e0      	mov	r8, ip
   26076:	b380      	cbz	r0, 260da <sys_clock_announce+0x9e>
   26078:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   2607c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   26080:	42b3      	cmp	r3, r6
   26082:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   26086:	da05      	bge.n	26094 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   26088:	1af6      	subs	r6, r6, r3
   2608a:	eb6c 040e 	sbc.w	r4, ip, lr
   2608e:	e9c0 6404 	strd	r6, r4, [r0, #16]
   26092:	e022      	b.n	260da <sys_clock_announce+0x9e>
		curr_tick += dt;
   26094:	18b2      	adds	r2, r6, r2
   26096:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   2609a:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   2609e:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   260a2:	f7ff ff39 	bl	25f18 <remove_timeout>
	__asm__ volatile(
   260a6:	f388 8811 	msr	BASEPRI, r8
   260aa:	f3bf 8f6f 	isb	sy
		t->fn(t);
   260ae:	6883      	ldr	r3, [r0, #8]
   260b0:	4798      	blx	r3
	__asm__ volatile(
   260b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   260b6:	f3ef 8811 	mrs	r8, BASEPRI
   260ba:	f383 8812 	msr	BASEPRI_MAX, r3
   260be:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   260c2:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   260c6:	f8da 0000 	ldr.w	r0, [sl]
   260ca:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   260cc:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   260ce:	46c4      	mov	ip, r8
   260d0:	f8c9 3000 	str.w	r3, [r9]
   260d4:	d1ca      	bne.n	2606c <sys_clock_announce+0x30>
		curr_tick += dt;
   260d6:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   260da:	189a      	adds	r2, r3, r2
   260dc:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   260e0:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   260e2:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   260e6:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   260ea:	f7ff fef5 	bl	25ed8 <next_timeout>
   260ee:	4621      	mov	r1, r4
   260f0:	f7fc fb60 	bl	227b4 <sys_clock_set_timeout>
	__asm__ volatile(
   260f4:	f388 8811 	msr	BASEPRI, r8
   260f8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   260fc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   26100:	f7ff bc84 	b.w	25a0c <z_time_slice>
   26104:	20000754 	.word	0x20000754
   26108:	2000383c 	.word	0x2000383c
   2610c:	20002d60 	.word	0x20002d60

00026110 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   26110:	b510      	push	{r4, lr}
	__asm__ volatile(
   26112:	f04f 0340 	mov.w	r3, #64	; 0x40
   26116:	f3ef 8411 	mrs	r4, BASEPRI
   2611a:	f383 8812 	msr	BASEPRI_MAX, r3
   2611e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   26122:	f7ff fecf 	bl	25ec4 <elapsed>
   26126:	4a06      	ldr	r2, [pc, #24]	; (26140 <sys_clock_tick_get+0x30>)
   26128:	4603      	mov	r3, r0
   2612a:	e9d2 0100 	ldrd	r0, r1, [r2]
   2612e:	1818      	adds	r0, r3, r0
   26130:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   26134:	f384 8811 	msr	BASEPRI, r4
   26138:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2613c:	bd10      	pop	{r4, pc}
   2613e:	bf00      	nop
   26140:	20002d60 	.word	0x20002d60

00026144 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   26144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26146:	4604      	mov	r4, r0
	__asm__ volatile(
   26148:	f04f 0340 	mov.w	r3, #64	; 0x40
   2614c:	f3ef 8711 	mrs	r7, BASEPRI
   26150:	f383 8812 	msr	BASEPRI_MAX, r3
   26154:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   26158:	6802      	ldr	r2, [r0, #0]
   2615a:	b122      	cbz	r2, 26166 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
   2615c:	f387 8811 	msr	BASEPRI, r7
   26160:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   26164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   26166:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
   2616a:	1c58      	adds	r0, r3, #1
   2616c:	f146 0100 	adc.w	r1, r6, #0
   26170:	2802      	cmp	r0, #2
   26172:	f171 0100 	sbcs.w	r1, r1, #0
   26176:	d327      	bcc.n	261c8 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
   26178:	2b01      	cmp	r3, #1
   2617a:	f176 0100 	sbcs.w	r1, r6, #0
   2617e:	bfbc      	itt	lt
   26180:	2301      	movlt	r3, #1
   26182:	4616      	movlt	r6, r2
   26184:	1e5d      	subs	r5, r3, #1
   26186:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
   2618a:	f009 f985 	bl	2f498 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   2618e:	3001      	adds	r0, #1
   26190:	f141 0100 	adc.w	r1, r1, #0
   26194:	1940      	adds	r0, r0, r5
   26196:	eb46 0101 	adc.w	r1, r6, r1
   2619a:	2801      	cmp	r0, #1
   2619c:	f171 0100 	sbcs.w	r1, r1, #0
   261a0:	db3a      	blt.n	26218 <z_timer_expiration_handler+0xd4>
   261a2:	f009 f979 	bl	2f498 <z_impl_k_uptime_ticks>
   261a6:	3001      	adds	r0, #1
   261a8:	f141 0100 	adc.w	r1, r1, #0
   261ac:	f06f 0201 	mvn.w	r2, #1
   261b0:	1940      	adds	r0, r0, r5
   261b2:	eb46 0301 	adc.w	r3, r6, r1
   261b6:	1a12      	subs	r2, r2, r0
   261b8:	f04f 31ff 	mov.w	r1, #4294967295
   261bc:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   261c0:	4918      	ldr	r1, [pc, #96]	; (26224 <z_timer_expiration_handler+0xe0>)
   261c2:	4620      	mov	r0, r4
   261c4:	f7ff fec4 	bl	25f50 <z_add_timeout>
	timer->status += 1U;
   261c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   261ca:	3301      	adds	r3, #1
   261cc:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   261ce:	6a23      	ldr	r3, [r4, #32]
   261d0:	b173      	cbz	r3, 261f0 <z_timer_expiration_handler+0xac>
   261d2:	f387 8811 	msr	BASEPRI, r7
   261d6:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   261da:	6a23      	ldr	r3, [r4, #32]
   261dc:	4620      	mov	r0, r4
   261de:	4798      	blx	r3
	__asm__ volatile(
   261e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   261e4:	f3ef 8711 	mrs	r7, BASEPRI
   261e8:	f383 8812 	msr	BASEPRI_MAX, r3
   261ec:	f3bf 8f6f 	isb	sy
	return list->head == list;
   261f0:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   261f4:	42a5      	cmp	r5, r4
   261f6:	d0b1      	beq.n	2615c <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
   261f8:	2d00      	cmp	r5, #0
   261fa:	d0af      	beq.n	2615c <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
   261fc:	4628      	mov	r0, r5
   261fe:	f009 f855 	bl	2f2ac <z_unpend_thread_no_timeout>
   26202:	2300      	movs	r3, #0
   26204:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
   26206:	f387 8811 	msr	BASEPRI, r7
   2620a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   2620e:	4628      	mov	r0, r5
}
   26210:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   26214:	f009 b83a 	b.w	2f28c <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   26218:	f06f 0201 	mvn.w	r2, #1
   2621c:	f04f 33ff 	mov.w	r3, #4294967295
   26220:	e7ce      	b.n	261c0 <z_timer_expiration_handler+0x7c>
   26222:	bf00      	nop
   26224:	00026145 	.word	0x00026145

00026228 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   26228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2622c:	f1b3 3fff 	cmp.w	r3, #4294967295
   26230:	bf08      	it	eq
   26232:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   26236:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   2623a:	4605      	mov	r5, r0
   2623c:	461c      	mov	r4, r3
   2623e:	4691      	mov	r9, r2
   26240:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   26242:	d01c      	beq.n	2627e <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   26244:	1c53      	adds	r3, r2, #1
   26246:	f174 33ff 	sbcs.w	r3, r4, #4294967295
   2624a:	db09      	blt.n	26260 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2624c:	2a01      	cmp	r2, #1
   2624e:	f174 0300 	sbcs.w	r3, r4, #0
   26252:	bfbc      	itt	lt
   26254:	2201      	movlt	r2, #1
   26256:	2400      	movlt	r4, #0
   26258:	f112 39ff 	adds.w	r9, r2, #4294967295
   2625c:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   26260:	4628      	mov	r0, r5
   26262:	f009 f8ef 	bl	2f444 <z_abort_timeout>
	timer->period = period;
   26266:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   2626a:	2300      	movs	r3, #0
   2626c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2626e:	464a      	mov	r2, r9
   26270:	4643      	mov	r3, r8
   26272:	4628      	mov	r0, r5
   26274:	4903      	ldr	r1, [pc, #12]	; (26284 <z_impl_k_timer_start+0x5c>)
		     duration);
}
   26276:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2627a:	f7ff be69 	b.w	25f50 <z_add_timeout>
}
   2627e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26282:	bf00      	nop
   26284:	00026145 	.word	0x00026145

00026288 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   26288:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2628c:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2628e:	4b29      	ldr	r3, [pc, #164]	; (26334 <z_impl_k_poll+0xac>)
   26290:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   26292:	2301      	movs	r3, #1
   26294:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   26298:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   2629c:	ea52 0305 	orrs.w	r3, r2, r5
{
   262a0:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   262a2:	bf0c      	ite	eq
   262a4:	2301      	moveq	r3, #1
   262a6:	2300      	movne	r3, #0
   262a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   262ac:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   262ae:	f009 f975 	bl	2f59c <register_events>
   262b2:	4681      	mov	r9, r0
	__asm__ volatile(
   262b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   262b8:	f3ef 8a11 	mrs	sl, BASEPRI
   262bc:	f383 8812 	msr	BASEPRI_MAX, r3
   262c0:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   262c4:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   262c8:	b964      	cbnz	r4, 262e4 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   262ca:	4601      	mov	r1, r0
   262cc:	4652      	mov	r2, sl
   262ce:	4640      	mov	r0, r8
   262d0:	f009 fa35 	bl	2f73e <clear_event_registrations>
	__asm__ volatile(
   262d4:	f38a 8811 	msr	BASEPRI, sl
   262d8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   262dc:	4620      	mov	r0, r4
   262de:	b002      	add	sp, #8
   262e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   262e4:	2300      	movs	r3, #0
   262e6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   262ea:	ea56 0305 	orrs.w	r3, r6, r5
   262ee:	d106      	bne.n	262fe <z_impl_k_poll+0x76>
   262f0:	f38a 8811 	msr	BASEPRI, sl
   262f4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   262f8:	f06f 040a 	mvn.w	r4, #10
   262fc:	e7ee      	b.n	262dc <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   262fe:	e9cd 6500 	strd	r6, r5, [sp]
   26302:	4a0d      	ldr	r2, [pc, #52]	; (26338 <z_impl_k_poll+0xb0>)
   26304:	480d      	ldr	r0, [pc, #52]	; (2633c <z_impl_k_poll+0xb4>)
   26306:	4651      	mov	r1, sl
   26308:	f7ff fbb0 	bl	25a6c <z_pend_curr>
   2630c:	4604      	mov	r4, r0
	__asm__ volatile(
   2630e:	f04f 0340 	mov.w	r3, #64	; 0x40
   26312:	f3ef 8511 	mrs	r5, BASEPRI
   26316:	f383 8812 	msr	BASEPRI_MAX, r3
   2631a:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   2631e:	462a      	mov	r2, r5
   26320:	4649      	mov	r1, r9
   26322:	4640      	mov	r0, r8
   26324:	f009 fa0b 	bl	2f73e <clear_event_registrations>
	__asm__ volatile(
   26328:	f385 8811 	msr	BASEPRI, r5
   2632c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   26330:	e7d4      	b.n	262dc <z_impl_k_poll+0x54>
   26332:	bf00      	nop
   26334:	20003804 	.word	0x20003804
   26338:	2000075c 	.word	0x2000075c
   2633c:	2000498f 	.word	0x2000498f

00026340 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   26340:	b538      	push	{r3, r4, r5, lr}
   26342:	4603      	mov	r3, r0
	__asm__ volatile(
   26344:	f04f 0240 	mov.w	r2, #64	; 0x40
   26348:	f3ef 8511 	mrs	r5, BASEPRI
   2634c:	f382 8812 	msr	BASEPRI_MAX, r2
   26350:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   26354:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   26356:	2101      	movs	r1, #1
   26358:	6081      	str	r1, [r0, #8]
	return list->head == list;
   2635a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2635c:	4283      	cmp	r3, r0
   2635e:	d106      	bne.n	2636e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   26360:	f385 8811 	msr	BASEPRI, r5
   26364:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   26368:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   2636a:	4620      	mov	r0, r4
   2636c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   2636e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   26372:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26374:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26376:	2300      	movs	r3, #0
	node->prev = NULL;
   26378:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2637c:	f009 f985 	bl	2f68a <signal_poll_event>
	z_reschedule(&lock, key);
   26380:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   26382:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   26384:	4801      	ldr	r0, [pc, #4]	; (2638c <z_impl_k_poll_signal_raise+0x4c>)
   26386:	f7ff fbd5 	bl	25b34 <z_reschedule>
	return rc;
   2638a:	e7ee      	b.n	2636a <z_impl_k_poll_signal_raise+0x2a>
   2638c:	2000498f 	.word	0x2000498f

00026390 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   26390:	4b01      	ldr	r3, [pc, #4]	; (26398 <k_thread_system_pool_assign+0x8>)
   26392:	6743      	str	r3, [r0, #116]	; 0x74
}
   26394:	4770      	bx	lr
   26396:	bf00      	nop
   26398:	200008d0 	.word	0x200008d0

0002639c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2639c:	b538      	push	{r3, r4, r5, lr}
   2639e:	4604      	mov	r4, r0
   263a0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   263a2:	f008 fd5c 	bl	2ee5e <k_is_in_isr>
   263a6:	b920      	cbnz	r0, 263b2 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   263a8:	4b06      	ldr	r3, [pc, #24]	; (263c4 <z_thread_aligned_alloc+0x28>)
   263aa:	689b      	ldr	r3, [r3, #8]
   263ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   263ae:	b90b      	cbnz	r3, 263b4 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   263b0:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   263b2:	4b05      	ldr	r3, [pc, #20]	; (263c8 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   263b4:	462a      	mov	r2, r5
   263b6:	4621      	mov	r1, r4
   263b8:	4618      	mov	r0, r3
}
   263ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   263be:	f009 ba12 	b.w	2f7e6 <z_heap_aligned_alloc>
   263c2:	bf00      	nop
   263c4:	20003804 	.word	0x20003804
   263c8:	200008d0 	.word	0x200008d0

000263cc <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   263cc:	4801      	ldr	r0, [pc, #4]	; (263d4 <boot_banner+0x8>)
   263ce:	f003 b89f 	b.w	29510 <printk>
   263d2:	bf00      	nop
   263d4:	00034f2e 	.word	0x00034f2e

000263d8 <ocrypto_ecdh_p256_public_key>:
   263d8:	b530      	push	{r4, r5, lr}
   263da:	b099      	sub	sp, #100	; 0x64
   263dc:	4605      	mov	r5, r0
   263de:	4668      	mov	r0, sp
   263e0:	f000 f828 	bl	26434 <ocrypto_sc_p256_from32bytes>
   263e4:	4669      	mov	r1, sp
   263e6:	4604      	mov	r4, r0
   263e8:	a808      	add	r0, sp, #32
   263ea:	f000 fa53 	bl	26894 <ocrypto_curve_p256_scalarmult_base>
   263ee:	a908      	add	r1, sp, #32
   263f0:	4304      	orrs	r4, r0
   263f2:	4628      	mov	r0, r5
   263f4:	f000 f98a 	bl	2670c <ocrypto_curve_p256_to64bytes>
   263f8:	4620      	mov	r0, r4
   263fa:	b019      	add	sp, #100	; 0x64
   263fc:	bd30      	pop	{r4, r5, pc}
   263fe:	bf00      	nop

00026400 <ocrypto_ecdh_p256_common_secret>:
   26400:	b570      	push	{r4, r5, r6, lr}
   26402:	b098      	sub	sp, #96	; 0x60
   26404:	4605      	mov	r5, r0
   26406:	4668      	mov	r0, sp
   26408:	4616      	mov	r6, r2
   2640a:	f000 f813 	bl	26434 <ocrypto_sc_p256_from32bytes>
   2640e:	4631      	mov	r1, r6
   26410:	4604      	mov	r4, r0
   26412:	a808      	add	r0, sp, #32
   26414:	f000 f946 	bl	266a4 <ocrypto_curve_p256_from64bytes>
   26418:	a908      	add	r1, sp, #32
   2641a:	466a      	mov	r2, sp
   2641c:	4304      	orrs	r4, r0
   2641e:	4608      	mov	r0, r1
   26420:	f000 f982 	bl	26728 <ocrypto_curve_p256_scalarmult>
   26424:	a908      	add	r1, sp, #32
   26426:	4304      	orrs	r4, r0
   26428:	4628      	mov	r0, r5
   2642a:	f000 f96d 	bl	26708 <ocrypto_curve_p256_to32bytes>
   2642e:	4620      	mov	r0, r4
   26430:	b018      	add	sp, #96	; 0x60
   26432:	bd70      	pop	{r4, r5, r6, pc}

00026434 <ocrypto_sc_p256_from32bytes>:
   26434:	b570      	push	{r4, r5, r6, lr}
   26436:	680b      	ldr	r3, [r1, #0]
   26438:	4e12      	ldr	r6, [pc, #72]	; (26484 <ocrypto_sc_p256_from32bytes+0x50>)
   2643a:	ba1b      	rev	r3, r3
   2643c:	61c3      	str	r3, [r0, #28]
   2643e:	684b      	ldr	r3, [r1, #4]
   26440:	ba1b      	rev	r3, r3
   26442:	6183      	str	r3, [r0, #24]
   26444:	688b      	ldr	r3, [r1, #8]
   26446:	ba1b      	rev	r3, r3
   26448:	6143      	str	r3, [r0, #20]
   2644a:	68cb      	ldr	r3, [r1, #12]
   2644c:	ba1b      	rev	r3, r3
   2644e:	6103      	str	r3, [r0, #16]
   26450:	690b      	ldr	r3, [r1, #16]
   26452:	ba1b      	rev	r3, r3
   26454:	60c3      	str	r3, [r0, #12]
   26456:	694b      	ldr	r3, [r1, #20]
   26458:	ba1b      	rev	r3, r3
   2645a:	6083      	str	r3, [r0, #8]
   2645c:	698b      	ldr	r3, [r1, #24]
   2645e:	ba1b      	rev	r3, r3
   26460:	6043      	str	r3, [r0, #4]
   26462:	69cb      	ldr	r3, [r1, #28]
   26464:	ba1b      	rev	r3, r3
   26466:	4632      	mov	r2, r6
   26468:	6003      	str	r3, [r0, #0]
   2646a:	4601      	mov	r1, r0
   2646c:	4604      	mov	r4, r0
   2646e:	f7d9 fe81 	bl	174 <ocrypto_bigint_sub256>
   26472:	4631      	mov	r1, r6
   26474:	4605      	mov	r5, r0
   26476:	4602      	mov	r2, r0
   26478:	4620      	mov	r0, r4
   2647a:	f7d9 fe9b 	bl	1b4 <ocrypto_bigint_cadd256>
   2647e:	1e68      	subs	r0, r5, #1
   26480:	bd70      	pop	{r4, r5, r6, pc}
   26482:	bf00      	nop
   26484:	00030750 	.word	0x00030750

00026488 <p256_zdblu>:
   26488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2648c:	b088      	sub	sp, #32
   2648e:	460c      	mov	r4, r1
   26490:	4606      	mov	r6, r0
   26492:	f102 0120 	add.w	r1, r2, #32
   26496:	4668      	mov	r0, sp
   26498:	f106 0720 	add.w	r7, r6, #32
   2649c:	4690      	mov	r8, r2
   2649e:	f7da f963 	bl	768 <ocrypto_mod_p256_sqr>
   264a2:	466a      	mov	r2, sp
   264a4:	4669      	mov	r1, sp
   264a6:	4668      	mov	r0, sp
   264a8:	f7da f880 	bl	5ac <ocrypto_mod_p256_add>
   264ac:	4669      	mov	r1, sp
   264ae:	4638      	mov	r0, r7
   264b0:	f7da f95a 	bl	768 <ocrypto_mod_p256_sqr>
   264b4:	463a      	mov	r2, r7
   264b6:	4639      	mov	r1, r7
   264b8:	4638      	mov	r0, r7
   264ba:	f104 0520 	add.w	r5, r4, #32
   264be:	f7da f875 	bl	5ac <ocrypto_mod_p256_add>
   264c2:	466a      	mov	r2, sp
   264c4:	4669      	mov	r1, sp
   264c6:	4668      	mov	r0, sp
   264c8:	f7da f870 	bl	5ac <ocrypto_mod_p256_add>
   264cc:	4641      	mov	r1, r8
   264ce:	4628      	mov	r0, r5
   264d0:	f7da f94a 	bl	768 <ocrypto_mod_p256_sqr>
   264d4:	466a      	mov	r2, sp
   264d6:	4641      	mov	r1, r8
   264d8:	4630      	mov	r0, r6
   264da:	f7da f92d 	bl	738 <ocrypto_mod_p256_mul>
   264de:	462a      	mov	r2, r5
   264e0:	4629      	mov	r1, r5
   264e2:	4668      	mov	r0, sp
   264e4:	f7da f862 	bl	5ac <ocrypto_mod_p256_add>
   264e8:	462a      	mov	r2, r5
   264ea:	4669      	mov	r1, sp
   264ec:	4668      	mov	r0, sp
   264ee:	f7da f85d 	bl	5ac <ocrypto_mod_p256_add>
   264f2:	4a12      	ldr	r2, [pc, #72]	; (2653c <p256_zdblu+0xb4>)
   264f4:	4669      	mov	r1, sp
   264f6:	4668      	mov	r0, sp
   264f8:	f7da f858 	bl	5ac <ocrypto_mod_p256_add>
   264fc:	4669      	mov	r1, sp
   264fe:	4620      	mov	r0, r4
   26500:	f7da f932 	bl	768 <ocrypto_mod_p256_sqr>
   26504:	4632      	mov	r2, r6
   26506:	4621      	mov	r1, r4
   26508:	4620      	mov	r0, r4
   2650a:	f7da f88d 	bl	628 <ocrypto_mod_p256_sub>
   2650e:	4632      	mov	r2, r6
   26510:	4621      	mov	r1, r4
   26512:	4620      	mov	r0, r4
   26514:	f7da f888 	bl	628 <ocrypto_mod_p256_sub>
   26518:	4622      	mov	r2, r4
   2651a:	4631      	mov	r1, r6
   2651c:	4628      	mov	r0, r5
   2651e:	f7da f883 	bl	628 <ocrypto_mod_p256_sub>
   26522:	466a      	mov	r2, sp
   26524:	4629      	mov	r1, r5
   26526:	4628      	mov	r0, r5
   26528:	f7da f906 	bl	738 <ocrypto_mod_p256_mul>
   2652c:	463a      	mov	r2, r7
   2652e:	4629      	mov	r1, r5
   26530:	4628      	mov	r0, r5
   26532:	f7da f879 	bl	628 <ocrypto_mod_p256_sub>
   26536:	b008      	add	sp, #32
   26538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2653c:	00030830 	.word	0x00030830

00026540 <p256_zaddc>:
   26540:	b5f0      	push	{r4, r5, r6, r7, lr}
   26542:	b099      	sub	sp, #100	; 0x64
   26544:	4604      	mov	r4, r0
   26546:	460d      	mov	r5, r1
   26548:	460a      	mov	r2, r1
   2654a:	4601      	mov	r1, r0
   2654c:	4668      	mov	r0, sp
   2654e:	f7da f86b 	bl	628 <ocrypto_mod_p256_sub>
   26552:	4669      	mov	r1, sp
   26554:	4668      	mov	r0, sp
   26556:	f7da f907 	bl	768 <ocrypto_mod_p256_sqr>
   2655a:	466a      	mov	r2, sp
   2655c:	4621      	mov	r1, r4
   2655e:	a808      	add	r0, sp, #32
   26560:	f105 0620 	add.w	r6, r5, #32
   26564:	f104 0720 	add.w	r7, r4, #32
   26568:	f7da f8e6 	bl	738 <ocrypto_mod_p256_mul>
   2656c:	466a      	mov	r2, sp
   2656e:	4629      	mov	r1, r5
   26570:	4668      	mov	r0, sp
   26572:	f7da f8e1 	bl	738 <ocrypto_mod_p256_mul>
   26576:	4632      	mov	r2, r6
   26578:	4639      	mov	r1, r7
   2657a:	a810      	add	r0, sp, #64	; 0x40
   2657c:	f7da f816 	bl	5ac <ocrypto_mod_p256_add>
   26580:	4632      	mov	r2, r6
   26582:	4639      	mov	r1, r7
   26584:	4630      	mov	r0, r6
   26586:	f7da f84f 	bl	628 <ocrypto_mod_p256_sub>
   2658a:	4631      	mov	r1, r6
   2658c:	4628      	mov	r0, r5
   2658e:	f7da f8eb 	bl	768 <ocrypto_mod_p256_sqr>
   26592:	466a      	mov	r2, sp
   26594:	a908      	add	r1, sp, #32
   26596:	4620      	mov	r0, r4
   26598:	f7da f808 	bl	5ac <ocrypto_mod_p256_add>
   2659c:	4622      	mov	r2, r4
   2659e:	4629      	mov	r1, r5
   265a0:	4628      	mov	r0, r5
   265a2:	f7da f841 	bl	628 <ocrypto_mod_p256_sub>
   265a6:	466a      	mov	r2, sp
   265a8:	a908      	add	r1, sp, #32
   265aa:	4668      	mov	r0, sp
   265ac:	f7da f83c 	bl	628 <ocrypto_mod_p256_sub>
   265b0:	466a      	mov	r2, sp
   265b2:	4639      	mov	r1, r7
   265b4:	4638      	mov	r0, r7
   265b6:	f7da f8bf 	bl	738 <ocrypto_mod_p256_mul>
   265ba:	462a      	mov	r2, r5
   265bc:	a908      	add	r1, sp, #32
   265be:	4668      	mov	r0, sp
   265c0:	f7da f832 	bl	628 <ocrypto_mod_p256_sub>
   265c4:	466a      	mov	r2, sp
   265c6:	4631      	mov	r1, r6
   265c8:	4630      	mov	r0, r6
   265ca:	f7da f8b5 	bl	738 <ocrypto_mod_p256_mul>
   265ce:	463a      	mov	r2, r7
   265d0:	4631      	mov	r1, r6
   265d2:	4630      	mov	r0, r6
   265d4:	f7da f828 	bl	628 <ocrypto_mod_p256_sub>
   265d8:	a910      	add	r1, sp, #64	; 0x40
   265da:	4668      	mov	r0, sp
   265dc:	f7da f8c4 	bl	768 <ocrypto_mod_p256_sqr>
   265e0:	4622      	mov	r2, r4
   265e2:	4669      	mov	r1, sp
   265e4:	4620      	mov	r0, r4
   265e6:	f7da f81f 	bl	628 <ocrypto_mod_p256_sub>
   265ea:	a908      	add	r1, sp, #32
   265ec:	4622      	mov	r2, r4
   265ee:	4608      	mov	r0, r1
   265f0:	f7da f81a 	bl	628 <ocrypto_mod_p256_sub>
   265f4:	a910      	add	r1, sp, #64	; 0x40
   265f6:	aa08      	add	r2, sp, #32
   265f8:	4608      	mov	r0, r1
   265fa:	f7da f89d 	bl	738 <ocrypto_mod_p256_mul>
   265fe:	463a      	mov	r2, r7
   26600:	a910      	add	r1, sp, #64	; 0x40
   26602:	4638      	mov	r0, r7
   26604:	f7da f810 	bl	628 <ocrypto_mod_p256_sub>
   26608:	b019      	add	sp, #100	; 0x64
   2660a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002660c <p256_zaddu>:
   2660c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26610:	b088      	sub	sp, #32
   26612:	460c      	mov	r4, r1
   26614:	4605      	mov	r5, r0
   26616:	4690      	mov	r8, r2
   26618:	460a      	mov	r2, r1
   2661a:	4601      	mov	r1, r0
   2661c:	4668      	mov	r0, sp
   2661e:	f7da f803 	bl	628 <ocrypto_mod_p256_sub>
   26622:	4669      	mov	r1, sp
   26624:	4668      	mov	r0, sp
   26626:	f7da f89f 	bl	768 <ocrypto_mod_p256_sqr>
   2662a:	466a      	mov	r2, sp
   2662c:	4629      	mov	r1, r5
   2662e:	4628      	mov	r0, r5
   26630:	f104 0620 	add.w	r6, r4, #32
   26634:	f7da f880 	bl	738 <ocrypto_mod_p256_mul>
   26638:	f105 0720 	add.w	r7, r5, #32
   2663c:	466a      	mov	r2, sp
   2663e:	4621      	mov	r1, r4
   26640:	4668      	mov	r0, sp
   26642:	f7da f879 	bl	738 <ocrypto_mod_p256_mul>
   26646:	4632      	mov	r2, r6
   26648:	4639      	mov	r1, r7
   2664a:	4630      	mov	r0, r6
   2664c:	f7d9 ffec 	bl	628 <ocrypto_mod_p256_sub>
   26650:	4631      	mov	r1, r6
   26652:	4620      	mov	r0, r4
   26654:	f7da f888 	bl	768 <ocrypto_mod_p256_sqr>
   26658:	462a      	mov	r2, r5
   2665a:	4621      	mov	r1, r4
   2665c:	4620      	mov	r0, r4
   2665e:	f7d9 ffe3 	bl	628 <ocrypto_mod_p256_sub>
   26662:	466a      	mov	r2, sp
   26664:	4621      	mov	r1, r4
   26666:	4620      	mov	r0, r4
   26668:	f7d9 ffde 	bl	628 <ocrypto_mod_p256_sub>
   2666c:	466a      	mov	r2, sp
   2666e:	4629      	mov	r1, r5
   26670:	4640      	mov	r0, r8
   26672:	f7d9 ffd9 	bl	628 <ocrypto_mod_p256_sub>
   26676:	4642      	mov	r2, r8
   26678:	4639      	mov	r1, r7
   2667a:	4638      	mov	r0, r7
   2667c:	f7da f85c 	bl	738 <ocrypto_mod_p256_mul>
   26680:	4622      	mov	r2, r4
   26682:	4629      	mov	r1, r5
   26684:	4668      	mov	r0, sp
   26686:	f7d9 ffcf 	bl	628 <ocrypto_mod_p256_sub>
   2668a:	466a      	mov	r2, sp
   2668c:	4631      	mov	r1, r6
   2668e:	4630      	mov	r0, r6
   26690:	f7da f852 	bl	738 <ocrypto_mod_p256_mul>
   26694:	463a      	mov	r2, r7
   26696:	4631      	mov	r1, r6
   26698:	4630      	mov	r0, r6
   2669a:	f7d9 ffc5 	bl	628 <ocrypto_mod_p256_sub>
   2669e:	b008      	add	sp, #32
   266a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000266a4 <ocrypto_curve_p256_from64bytes>:
   266a4:	b570      	push	{r4, r5, r6, lr}
   266a6:	f100 0620 	add.w	r6, r0, #32
   266aa:	b090      	sub	sp, #64	; 0x40
   266ac:	460d      	mov	r5, r1
   266ae:	4604      	mov	r4, r0
   266b0:	f000 f914 	bl	268dc <ocrypto_mod_p256_from_bytes>
   266b4:	f105 0120 	add.w	r1, r5, #32
   266b8:	4630      	mov	r0, r6
   266ba:	f000 f90f 	bl	268dc <ocrypto_mod_p256_from_bytes>
   266be:	4621      	mov	r1, r4
   266c0:	a808      	add	r0, sp, #32
   266c2:	f7da f851 	bl	768 <ocrypto_mod_p256_sqr>
   266c6:	a908      	add	r1, sp, #32
   266c8:	4608      	mov	r0, r1
   266ca:	4a0d      	ldr	r2, [pc, #52]	; (26700 <ocrypto_curve_p256_from64bytes+0x5c>)
   266cc:	f7d9 ff6e 	bl	5ac <ocrypto_mod_p256_add>
   266d0:	a908      	add	r1, sp, #32
   266d2:	4622      	mov	r2, r4
   266d4:	4608      	mov	r0, r1
   266d6:	f7da f82f 	bl	738 <ocrypto_mod_p256_mul>
   266da:	a908      	add	r1, sp, #32
   266dc:	4a09      	ldr	r2, [pc, #36]	; (26704 <ocrypto_curve_p256_from64bytes+0x60>)
   266de:	4608      	mov	r0, r1
   266e0:	f7d9 ff64 	bl	5ac <ocrypto_mod_p256_add>
   266e4:	4631      	mov	r1, r6
   266e6:	4668      	mov	r0, sp
   266e8:	f7da f83e 	bl	768 <ocrypto_mod_p256_sqr>
   266ec:	2220      	movs	r2, #32
   266ee:	4669      	mov	r1, sp
   266f0:	eb0d 0002 	add.w	r0, sp, r2
   266f4:	f7d9 ff2c 	bl	550 <ocrypto_constant_time_equal>
   266f8:	3801      	subs	r0, #1
   266fa:	b010      	add	sp, #64	; 0x40
   266fc:	bd70      	pop	{r4, r5, r6, pc}
   266fe:	bf00      	nop
   26700:	00030830 	.word	0x00030830
   26704:	00030810 	.word	0x00030810

00026708 <ocrypto_curve_p256_to32bytes>:
   26708:	f000 b902 	b.w	26910 <ocrypto_mod_p256_to_bytes>

0002670c <ocrypto_curve_p256_to64bytes>:
   2670c:	b538      	push	{r3, r4, r5, lr}
   2670e:	4604      	mov	r4, r0
   26710:	460d      	mov	r5, r1
   26712:	f000 f8fd 	bl	26910 <ocrypto_mod_p256_to_bytes>
   26716:	f105 0120 	add.w	r1, r5, #32
   2671a:	f104 0020 	add.w	r0, r4, #32
   2671e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26722:	f000 b8f5 	b.w	26910 <ocrypto_mod_p256_to_bytes>
   26726:	bf00      	nop

00026728 <ocrypto_curve_p256_scalarmult>:
   26728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2672c:	4613      	mov	r3, r2
   2672e:	b0b8      	sub	sp, #224	; 0xe0
   26730:	4a54      	ldr	r2, [pc, #336]	; (26884 <ocrypto_curve_p256_scalarmult+0x15c>)
   26732:	4689      	mov	r9, r1
   26734:	4680      	mov	r8, r0
   26736:	4619      	mov	r1, r3
   26738:	a810      	add	r0, sp, #64	; 0x40
   2673a:	f7d9 fd1b 	bl	174 <ocrypto_bigint_sub256>
   2673e:	4952      	ldr	r1, [pc, #328]	; (26888 <ocrypto_curve_p256_scalarmult+0x160>)
   26740:	4602      	mov	r2, r0
   26742:	a810      	add	r0, sp, #64	; 0x40
   26744:	f7d9 fd36 	bl	1b4 <ocrypto_bigint_cadd256>
   26748:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   2674a:	494e      	ldr	r1, [pc, #312]	; (26884 <ocrypto_curve_p256_scalarmult+0x15c>)
   2674c:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   26750:	4607      	mov	r7, r0
   26752:	f1c6 0201 	rsb	r2, r6, #1
   26756:	a810      	add	r0, sp, #64	; 0x40
   26758:	f7d9 fd2c 	bl	1b4 <ocrypto_bigint_cadd256>
   2675c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2675e:	464a      	mov	r2, r9
   26760:	ea6f 0a03 	mvn.w	sl, r3
   26764:	a928      	add	r1, sp, #160	; 0xa0
   26766:	a818      	add	r0, sp, #96	; 0x60
   26768:	f7ff fe8e 	bl	26488 <p256_zdblu>
   2676c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   26770:	a920      	add	r1, sp, #128	; 0x80
   26772:	f1ca 0201 	rsb	r2, sl, #1
   26776:	4608      	mov	r0, r1
   26778:	f000 f892 	bl	268a0 <ocrypto_mod_p256_cneg>
   2677c:	f1c7 0701 	rsb	r7, r7, #1
   26780:	24fe      	movs	r4, #254	; 0xfe
   26782:	466a      	mov	r2, sp
   26784:	a918      	add	r1, sp, #96	; 0x60
   26786:	a828      	add	r0, sp, #160	; 0xa0
   26788:	f7ff ff40 	bl	2660c <p256_zaddu>
   2678c:	1163      	asrs	r3, r4, #5
   2678e:	aa38      	add	r2, sp, #224	; 0xe0
   26790:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   26794:	f004 021f 	and.w	r2, r4, #31
   26798:	f853 3ca0 	ldr.w	r3, [r3, #-160]
   2679c:	40d3      	lsrs	r3, r2
   2679e:	4655      	mov	r5, sl
   267a0:	f003 0a01 	and.w	sl, r3, #1
   267a4:	ea8a 0505 	eor.w	r5, sl, r5
   267a8:	462a      	mov	r2, r5
   267aa:	a928      	add	r1, sp, #160	; 0xa0
   267ac:	a818      	add	r0, sp, #96	; 0x60
   267ae:	f7d9 fd5d 	bl	26c <ocrypto_bigint_cswap256>
   267b2:	462a      	mov	r2, r5
   267b4:	a930      	add	r1, sp, #192	; 0xc0
   267b6:	a820      	add	r0, sp, #128	; 0x80
   267b8:	f7d9 fd58 	bl	26c <ocrypto_bigint_cswap256>
   267bc:	3c01      	subs	r4, #1
   267be:	a928      	add	r1, sp, #160	; 0xa0
   267c0:	a818      	add	r0, sp, #96	; 0x60
   267c2:	f7ff febd 	bl	26540 <p256_zaddc>
   267c6:	1c63      	adds	r3, r4, #1
   267c8:	d1db      	bne.n	26782 <ocrypto_curve_p256_scalarmult+0x5a>
   267ca:	f1ca 0201 	rsb	r2, sl, #1
   267ce:	a920      	add	r1, sp, #128	; 0x80
   267d0:	a808      	add	r0, sp, #32
   267d2:	f000 f865 	bl	268a0 <ocrypto_mod_p256_cneg>
   267d6:	ea86 060a 	eor.w	r6, r6, sl
   267da:	466a      	mov	r2, sp
   267dc:	a918      	add	r1, sp, #96	; 0x60
   267de:	a828      	add	r0, sp, #160	; 0xa0
   267e0:	f7ff ff14 	bl	2660c <p256_zaddu>
   267e4:	a928      	add	r1, sp, #160	; 0xa0
   267e6:	4632      	mov	r2, r6
   267e8:	a818      	add	r0, sp, #96	; 0x60
   267ea:	f7d9 fd3f 	bl	26c <ocrypto_bigint_cswap256>
   267ee:	4632      	mov	r2, r6
   267f0:	a930      	add	r1, sp, #192	; 0xc0
   267f2:	a820      	add	r0, sp, #128	; 0x80
   267f4:	f7d9 fd3a 	bl	26c <ocrypto_bigint_cswap256>
   267f8:	a908      	add	r1, sp, #32
   267fa:	466a      	mov	r2, sp
   267fc:	4608      	mov	r0, r1
   267fe:	f7d9 ff9b 	bl	738 <ocrypto_mod_p256_mul>
   26802:	a908      	add	r1, sp, #32
   26804:	4608      	mov	r0, r1
   26806:	f000 f89d 	bl	26944 <ocrypto_mod_p256_inv>
   2680a:	a908      	add	r1, sp, #32
   2680c:	f108 0420 	add.w	r4, r8, #32
   26810:	f109 0220 	add.w	r2, r9, #32
   26814:	4608      	mov	r0, r1
   26816:	f7d9 ff8f 	bl	738 <ocrypto_mod_p256_mul>
   2681a:	a920      	add	r1, sp, #128	; 0x80
   2681c:	aa08      	add	r2, sp, #32
   2681e:	4620      	mov	r0, r4
   26820:	f7d9 ff8a 	bl	738 <ocrypto_mod_p256_mul>
   26824:	aa08      	add	r2, sp, #32
   26826:	a918      	add	r1, sp, #96	; 0x60
   26828:	4668      	mov	r0, sp
   2682a:	f7d9 ff85 	bl	738 <ocrypto_mod_p256_mul>
   2682e:	4669      	mov	r1, sp
   26830:	4668      	mov	r0, sp
   26832:	f7d9 ff99 	bl	768 <ocrypto_mod_p256_sqr>
   26836:	aa18      	add	r2, sp, #96	; 0x60
   26838:	4669      	mov	r1, sp
   2683a:	a808      	add	r0, sp, #32
   2683c:	f7d9 ff7c 	bl	738 <ocrypto_mod_p256_mul>
   26840:	4621      	mov	r1, r4
   26842:	4668      	mov	r0, sp
   26844:	f7d9 ff90 	bl	768 <ocrypto_mod_p256_sqr>
   26848:	aa08      	add	r2, sp, #32
   2684a:	4669      	mov	r1, sp
   2684c:	4610      	mov	r0, r2
   2684e:	f7d9 feeb 	bl	628 <ocrypto_mod_p256_sub>
   26852:	4a0e      	ldr	r2, [pc, #56]	; (2688c <ocrypto_curve_p256_scalarmult+0x164>)
   26854:	a908      	add	r1, sp, #32
   26856:	4668      	mov	r0, sp
   26858:	f7d9 fee6 	bl	628 <ocrypto_mod_p256_sub>
   2685c:	4620      	mov	r0, r4
   2685e:	2120      	movs	r1, #32
   26860:	f7d9 fe8a 	bl	578 <ocrypto_constant_time_is_zero>
   26864:	a908      	add	r1, sp, #32
   26866:	4602      	mov	r2, r0
   26868:	4244      	negs	r4, r0
   2686a:	4668      	mov	r0, sp
   2686c:	f7d9 fcfe 	bl	26c <ocrypto_bigint_cswap256>
   26870:	4640      	mov	r0, r8
   26872:	4a07      	ldr	r2, [pc, #28]	; (26890 <ocrypto_curve_p256_scalarmult+0x168>)
   26874:	4669      	mov	r1, sp
   26876:	f7d9 ff5f 	bl	738 <ocrypto_mod_p256_mul>
   2687a:	433c      	orrs	r4, r7
   2687c:	4620      	mov	r0, r4
   2687e:	b038      	add	sp, #224	; 0xe0
   26880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26884:	00030790 	.word	0x00030790
   26888:	000307b0 	.word	0x000307b0
   2688c:	00030810 	.word	0x00030810
   26890:	00030770 	.word	0x00030770

00026894 <ocrypto_curve_p256_scalarmult_base>:
   26894:	460a      	mov	r2, r1
   26896:	4901      	ldr	r1, [pc, #4]	; (2689c <ocrypto_curve_p256_scalarmult_base+0x8>)
   26898:	f7ff bf46 	b.w	26728 <ocrypto_curve_p256_scalarmult>
   2689c:	000307d0 	.word	0x000307d0

000268a0 <ocrypto_mod_p256_cneg>:
   268a0:	b570      	push	{r4, r5, r6, lr}
   268a2:	b088      	sub	sp, #32
   268a4:	4604      	mov	r4, r0
   268a6:	460d      	mov	r5, r1
   268a8:	4616      	mov	r6, r2
   268aa:	2100      	movs	r1, #0
   268ac:	2220      	movs	r2, #32
   268ae:	4668      	mov	r0, sp
   268b0:	f005 fa01 	bl	2bcb6 <memset>
   268b4:	2300      	movs	r3, #0
   268b6:	4629      	mov	r1, r5
   268b8:	2220      	movs	r2, #32
   268ba:	4620      	mov	r0, r4
   268bc:	9300      	str	r3, [sp, #0]
   268be:	f005 f9ef 	bl	2bca0 <memcpy>
   268c2:	462a      	mov	r2, r5
   268c4:	4669      	mov	r1, sp
   268c6:	4668      	mov	r0, sp
   268c8:	f7d9 feae 	bl	628 <ocrypto_mod_p256_sub>
   268cc:	4632      	mov	r2, r6
   268ce:	4669      	mov	r1, sp
   268d0:	4620      	mov	r0, r4
   268d2:	f7d9 fccb 	bl	26c <ocrypto_bigint_cswap256>
   268d6:	b008      	add	sp, #32
   268d8:	bd70      	pop	{r4, r5, r6, pc}
   268da:	bf00      	nop

000268dc <ocrypto_mod_p256_from_bytes>:
   268dc:	680b      	ldr	r3, [r1, #0]
   268de:	ba1b      	rev	r3, r3
   268e0:	61c3      	str	r3, [r0, #28]
   268e2:	684b      	ldr	r3, [r1, #4]
   268e4:	ba1b      	rev	r3, r3
   268e6:	6183      	str	r3, [r0, #24]
   268e8:	688b      	ldr	r3, [r1, #8]
   268ea:	ba1b      	rev	r3, r3
   268ec:	6143      	str	r3, [r0, #20]
   268ee:	68cb      	ldr	r3, [r1, #12]
   268f0:	ba1b      	rev	r3, r3
   268f2:	6103      	str	r3, [r0, #16]
   268f4:	690b      	ldr	r3, [r1, #16]
   268f6:	ba1b      	rev	r3, r3
   268f8:	60c3      	str	r3, [r0, #12]
   268fa:	694b      	ldr	r3, [r1, #20]
   268fc:	ba1b      	rev	r3, r3
   268fe:	6083      	str	r3, [r0, #8]
   26900:	698b      	ldr	r3, [r1, #24]
   26902:	ba1b      	rev	r3, r3
   26904:	6043      	str	r3, [r0, #4]
   26906:	69cb      	ldr	r3, [r1, #28]
   26908:	ba1b      	rev	r3, r3
   2690a:	6003      	str	r3, [r0, #0]
   2690c:	4770      	bx	lr
   2690e:	bf00      	nop

00026910 <ocrypto_mod_p256_to_bytes>:
   26910:	69cb      	ldr	r3, [r1, #28]
   26912:	ba1b      	rev	r3, r3
   26914:	6003      	str	r3, [r0, #0]
   26916:	698b      	ldr	r3, [r1, #24]
   26918:	ba1b      	rev	r3, r3
   2691a:	6043      	str	r3, [r0, #4]
   2691c:	694b      	ldr	r3, [r1, #20]
   2691e:	ba1b      	rev	r3, r3
   26920:	6083      	str	r3, [r0, #8]
   26922:	690b      	ldr	r3, [r1, #16]
   26924:	ba1b      	rev	r3, r3
   26926:	60c3      	str	r3, [r0, #12]
   26928:	68cb      	ldr	r3, [r1, #12]
   2692a:	ba1b      	rev	r3, r3
   2692c:	6103      	str	r3, [r0, #16]
   2692e:	688b      	ldr	r3, [r1, #8]
   26930:	ba1b      	rev	r3, r3
   26932:	6143      	str	r3, [r0, #20]
   26934:	684b      	ldr	r3, [r1, #4]
   26936:	ba1b      	rev	r3, r3
   26938:	6183      	str	r3, [r0, #24]
   2693a:	680b      	ldr	r3, [r1, #0]
   2693c:	ba1b      	rev	r3, r3
   2693e:	61c3      	str	r3, [r0, #28]
   26940:	4770      	bx	lr
   26942:	bf00      	nop

00026944 <ocrypto_mod_p256_inv>:
   26944:	b570      	push	{r4, r5, r6, lr}
   26946:	b098      	sub	sp, #96	; 0x60
   26948:	460d      	mov	r5, r1
   2694a:	4606      	mov	r6, r0
   2694c:	a810      	add	r0, sp, #64	; 0x40
   2694e:	f7d9 ff0b 	bl	768 <ocrypto_mod_p256_sqr>
   26952:	462a      	mov	r2, r5
   26954:	a910      	add	r1, sp, #64	; 0x40
   26956:	4668      	mov	r0, sp
   26958:	f7d9 feee 	bl	738 <ocrypto_mod_p256_mul>
   2695c:	4669      	mov	r1, sp
   2695e:	a810      	add	r0, sp, #64	; 0x40
   26960:	f7d9 ff02 	bl	768 <ocrypto_mod_p256_sqr>
   26964:	a910      	add	r1, sp, #64	; 0x40
   26966:	4608      	mov	r0, r1
   26968:	f7d9 fefe 	bl	768 <ocrypto_mod_p256_sqr>
   2696c:	466a      	mov	r2, sp
   2696e:	a910      	add	r1, sp, #64	; 0x40
   26970:	a808      	add	r0, sp, #32
   26972:	f7d9 fee1 	bl	738 <ocrypto_mod_p256_mul>
   26976:	a908      	add	r1, sp, #32
   26978:	a810      	add	r0, sp, #64	; 0x40
   2697a:	f7d9 fef5 	bl	768 <ocrypto_mod_p256_sqr>
   2697e:	a910      	add	r1, sp, #64	; 0x40
   26980:	4608      	mov	r0, r1
   26982:	f7d9 fef1 	bl	768 <ocrypto_mod_p256_sqr>
   26986:	a910      	add	r1, sp, #64	; 0x40
   26988:	4608      	mov	r0, r1
   2698a:	f7d9 feed 	bl	768 <ocrypto_mod_p256_sqr>
   2698e:	a910      	add	r1, sp, #64	; 0x40
   26990:	4608      	mov	r0, r1
   26992:	f7d9 fee9 	bl	768 <ocrypto_mod_p256_sqr>
   26996:	a910      	add	r1, sp, #64	; 0x40
   26998:	aa08      	add	r2, sp, #32
   2699a:	4608      	mov	r0, r1
   2699c:	f7d9 fecc 	bl	738 <ocrypto_mod_p256_mul>
   269a0:	a910      	add	r1, sp, #64	; 0x40
   269a2:	4608      	mov	r0, r1
   269a4:	f7d9 fee0 	bl	768 <ocrypto_mod_p256_sqr>
   269a8:	a910      	add	r1, sp, #64	; 0x40
   269aa:	4608      	mov	r0, r1
   269ac:	f7d9 fedc 	bl	768 <ocrypto_mod_p256_sqr>
   269b0:	a910      	add	r1, sp, #64	; 0x40
   269b2:	466a      	mov	r2, sp
   269b4:	a808      	add	r0, sp, #32
   269b6:	f7d9 febf 	bl	738 <ocrypto_mod_p256_mul>
   269ba:	2405      	movs	r4, #5
   269bc:	a908      	add	r1, sp, #32
   269be:	a810      	add	r0, sp, #64	; 0x40
   269c0:	f7d9 fed2 	bl	768 <ocrypto_mod_p256_sqr>
   269c4:	a910      	add	r1, sp, #64	; 0x40
   269c6:	4608      	mov	r0, r1
   269c8:	f7d9 fece 	bl	768 <ocrypto_mod_p256_sqr>
   269cc:	3c01      	subs	r4, #1
   269ce:	a910      	add	r1, sp, #64	; 0x40
   269d0:	d1f5      	bne.n	269be <ocrypto_mod_p256_inv+0x7a>
   269d2:	aa08      	add	r2, sp, #32
   269d4:	4608      	mov	r0, r1
   269d6:	f7d9 feaf 	bl	738 <ocrypto_mod_p256_mul>
   269da:	2405      	movs	r4, #5
   269dc:	a910      	add	r1, sp, #64	; 0x40
   269de:	4608      	mov	r0, r1
   269e0:	f7d9 fec2 	bl	768 <ocrypto_mod_p256_sqr>
   269e4:	a910      	add	r1, sp, #64	; 0x40
   269e6:	4608      	mov	r0, r1
   269e8:	f7d9 febe 	bl	768 <ocrypto_mod_p256_sqr>
   269ec:	3c01      	subs	r4, #1
   269ee:	d1f5      	bne.n	269dc <ocrypto_mod_p256_inv+0x98>
   269f0:	a910      	add	r1, sp, #64	; 0x40
   269f2:	aa08      	add	r2, sp, #32
   269f4:	4608      	mov	r0, r1
   269f6:	f7d9 fe9f 	bl	738 <ocrypto_mod_p256_mul>
   269fa:	a910      	add	r1, sp, #64	; 0x40
   269fc:	a808      	add	r0, sp, #32
   269fe:	f7d9 feb3 	bl	768 <ocrypto_mod_p256_sqr>
   26a02:	a908      	add	r1, sp, #32
   26a04:	4608      	mov	r0, r1
   26a06:	f7d9 feaf 	bl	768 <ocrypto_mod_p256_sqr>
   26a0a:	a908      	add	r1, sp, #32
   26a0c:	466a      	mov	r2, sp
   26a0e:	4668      	mov	r0, sp
   26a10:	f7d9 fe92 	bl	738 <ocrypto_mod_p256_mul>
   26a14:	2410      	movs	r4, #16
   26a16:	4669      	mov	r1, sp
   26a18:	a810      	add	r0, sp, #64	; 0x40
   26a1a:	f7d9 fea5 	bl	768 <ocrypto_mod_p256_sqr>
   26a1e:	a910      	add	r1, sp, #64	; 0x40
   26a20:	4608      	mov	r0, r1
   26a22:	f7d9 fea1 	bl	768 <ocrypto_mod_p256_sqr>
   26a26:	3c01      	subs	r4, #1
   26a28:	a910      	add	r1, sp, #64	; 0x40
   26a2a:	d1f5      	bne.n	26a18 <ocrypto_mod_p256_inv+0xd4>
   26a2c:	462a      	mov	r2, r5
   26a2e:	4608      	mov	r0, r1
   26a30:	f7d9 fe82 	bl	738 <ocrypto_mod_p256_mul>
   26a34:	2440      	movs	r4, #64	; 0x40
   26a36:	a910      	add	r1, sp, #64	; 0x40
   26a38:	4608      	mov	r0, r1
   26a3a:	f7d9 fe95 	bl	768 <ocrypto_mod_p256_sqr>
   26a3e:	a910      	add	r1, sp, #64	; 0x40
   26a40:	4608      	mov	r0, r1
   26a42:	f7d9 fe91 	bl	768 <ocrypto_mod_p256_sqr>
   26a46:	3c01      	subs	r4, #1
   26a48:	d1f5      	bne.n	26a36 <ocrypto_mod_p256_inv+0xf2>
   26a4a:	a910      	add	r1, sp, #64	; 0x40
   26a4c:	466a      	mov	r2, sp
   26a4e:	4608      	mov	r0, r1
   26a50:	f7d9 fe72 	bl	738 <ocrypto_mod_p256_mul>
   26a54:	2410      	movs	r4, #16
   26a56:	a910      	add	r1, sp, #64	; 0x40
   26a58:	4608      	mov	r0, r1
   26a5a:	f7d9 fe85 	bl	768 <ocrypto_mod_p256_sqr>
   26a5e:	a910      	add	r1, sp, #64	; 0x40
   26a60:	4608      	mov	r0, r1
   26a62:	f7d9 fe81 	bl	768 <ocrypto_mod_p256_sqr>
   26a66:	3c01      	subs	r4, #1
   26a68:	d1f5      	bne.n	26a56 <ocrypto_mod_p256_inv+0x112>
   26a6a:	a910      	add	r1, sp, #64	; 0x40
   26a6c:	466a      	mov	r2, sp
   26a6e:	4608      	mov	r0, r1
   26a70:	f7d9 fe62 	bl	738 <ocrypto_mod_p256_mul>
   26a74:	2410      	movs	r4, #16
   26a76:	a910      	add	r1, sp, #64	; 0x40
   26a78:	4608      	mov	r0, r1
   26a7a:	f7d9 fe75 	bl	768 <ocrypto_mod_p256_sqr>
   26a7e:	a910      	add	r1, sp, #64	; 0x40
   26a80:	4608      	mov	r0, r1
   26a82:	f7d9 fe71 	bl	768 <ocrypto_mod_p256_sqr>
   26a86:	3c01      	subs	r4, #1
   26a88:	d1f5      	bne.n	26a76 <ocrypto_mod_p256_inv+0x132>
   26a8a:	a910      	add	r1, sp, #64	; 0x40
   26a8c:	aa08      	add	r2, sp, #32
   26a8e:	4608      	mov	r0, r1
   26a90:	f7d9 fe52 	bl	738 <ocrypto_mod_p256_mul>
   26a94:	462a      	mov	r2, r5
   26a96:	a910      	add	r1, sp, #64	; 0x40
   26a98:	4630      	mov	r0, r6
   26a9a:	f7d9 fe4d 	bl	738 <ocrypto_mod_p256_mul>
   26a9e:	b018      	add	sp, #96	; 0x60
   26aa0:	bd70      	pop	{r4, r5, r6, pc}
   26aa2:	bf00      	nop

00026aa4 <nrf_cc3xx_platform_init>:
   26aa4:	b510      	push	{r4, lr}
   26aa6:	4c0c      	ldr	r4, [pc, #48]	; (26ad8 <nrf_cc3xx_platform_init+0x34>)
   26aa8:	6823      	ldr	r3, [r4, #0]
   26aaa:	b113      	cbz	r3, 26ab2 <nrf_cc3xx_platform_init+0xe>
   26aac:	4b0b      	ldr	r3, [pc, #44]	; (26adc <nrf_cc3xx_platform_init+0x38>)
   26aae:	681b      	ldr	r3, [r3, #0]
   26ab0:	b92b      	cbnz	r3, 26abe <nrf_cc3xx_platform_init+0x1a>
   26ab2:	f000 fe29 	bl	27708 <CC_LibInit>
   26ab6:	b930      	cbnz	r0, 26ac6 <nrf_cc3xx_platform_init+0x22>
   26ab8:	4b08      	ldr	r3, [pc, #32]	; (26adc <nrf_cc3xx_platform_init+0x38>)
   26aba:	2201      	movs	r2, #1
   26abc:	601a      	str	r2, [r3, #0]
   26abe:	2301      	movs	r3, #1
   26ac0:	6023      	str	r3, [r4, #0]
   26ac2:	2000      	movs	r0, #0
   26ac4:	bd10      	pop	{r4, pc}
   26ac6:	3801      	subs	r0, #1
   26ac8:	2806      	cmp	r0, #6
   26aca:	d901      	bls.n	26ad0 <nrf_cc3xx_platform_init+0x2c>
   26acc:	4804      	ldr	r0, [pc, #16]	; (26ae0 <nrf_cc3xx_platform_init+0x3c>)
   26ace:	bd10      	pop	{r4, pc}
   26ad0:	4b04      	ldr	r3, [pc, #16]	; (26ae4 <nrf_cc3xx_platform_init+0x40>)
   26ad2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   26ad6:	bd10      	pop	{r4, pc}
   26ad8:	20003844 	.word	0x20003844
   26adc:	20003840 	.word	0x20003840
   26ae0:	ffff8ffe 	.word	0xffff8ffe
   26ae4:	00030850 	.word	0x00030850

00026ae8 <nrf_cc3xx_platform_abort>:
   26ae8:	f3bf 8f4f 	dsb	sy
   26aec:	4905      	ldr	r1, [pc, #20]	; (26b04 <nrf_cc3xx_platform_abort+0x1c>)
   26aee:	4b06      	ldr	r3, [pc, #24]	; (26b08 <nrf_cc3xx_platform_abort+0x20>)
   26af0:	68ca      	ldr	r2, [r1, #12]
   26af2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   26af6:	4313      	orrs	r3, r2
   26af8:	60cb      	str	r3, [r1, #12]
   26afa:	f3bf 8f4f 	dsb	sy
   26afe:	bf00      	nop
   26b00:	e7fd      	b.n	26afe <nrf_cc3xx_platform_abort+0x16>
   26b02:	bf00      	nop
   26b04:	e000ed00 	.word	0xe000ed00
   26b08:	05fa0004 	.word	0x05fa0004

00026b0c <CC_PalAbort>:
   26b0c:	b410      	push	{r4}
   26b0e:	4b09      	ldr	r3, [pc, #36]	; (26b34 <CC_PalAbort+0x28>)
   26b10:	4909      	ldr	r1, [pc, #36]	; (26b38 <CC_PalAbort+0x2c>)
   26b12:	4c0a      	ldr	r4, [pc, #40]	; (26b3c <CC_PalAbort+0x30>)
   26b14:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   26b18:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   26b1c:	6849      	ldr	r1, [r1, #4]
   26b1e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   26b22:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   26b26:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   26b2a:	2300      	movs	r3, #0
   26b2c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   26b30:	bc10      	pop	{r4}
   26b32:	4708      	bx	r1
   26b34:	5002b000 	.word	0x5002b000
   26b38:	20000764 	.word	0x20000764
   26b3c:	5002a000 	.word	0x5002a000

00026b40 <nrf_cc3xx_platform_set_abort>:
   26b40:	e9d0 1200 	ldrd	r1, r2, [r0]
   26b44:	4b01      	ldr	r3, [pc, #4]	; (26b4c <nrf_cc3xx_platform_set_abort+0xc>)
   26b46:	e9c3 1200 	strd	r1, r2, [r3]
   26b4a:	4770      	bx	lr
   26b4c:	20000764 	.word	0x20000764

00026b50 <nrf_cc3xx_platform_ctr_drbg_init>:
   26b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26b54:	4b13      	ldr	r3, [pc, #76]	; (26ba4 <nrf_cc3xx_platform_ctr_drbg_init+0x54>)
   26b56:	4e14      	ldr	r6, [pc, #80]	; (26ba8 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   26b58:	2800      	cmp	r0, #0
   26b5a:	bf14      	ite	ne
   26b5c:	4604      	movne	r4, r0
   26b5e:	461c      	moveq	r4, r3
   26b60:	b083      	sub	sp, #12
   26b62:	6823      	ldr	r3, [r4, #0]
   26b64:	42b3      	cmp	r3, r6
   26b66:	d019      	beq.n	26b9c <nrf_cc3xx_platform_ctr_drbg_init+0x4c>
   26b68:	460d      	mov	r5, r1
   26b6a:	4620      	mov	r0, r4
   26b6c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   26b70:	f104 0904 	add.w	r9, r4, #4
   26b74:	4617      	mov	r7, r2
   26b76:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   26b7a:	f000 f8e9 	bl	26d50 <mbedtls_platform_zeroize>
   26b7e:	4648      	mov	r0, r9
   26b80:	f000 fcac 	bl	274dc <cc_mbedtls_entropy_init>
   26b84:	4640      	mov	r0, r8
   26b86:	f000 fadb 	bl	27140 <cc_mbedtls_ctr_drbg_init>
   26b8a:	4908      	ldr	r1, [pc, #32]	; (26bac <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   26b8c:	9700      	str	r7, [sp, #0]
   26b8e:	462b      	mov	r3, r5
   26b90:	464a      	mov	r2, r9
   26b92:	4640      	mov	r0, r8
   26b94:	f000 faea 	bl	2716c <cc_mbedtls_ctr_drbg_seed>
   26b98:	b908      	cbnz	r0, 26b9e <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   26b9a:	6026      	str	r6, [r4, #0]
   26b9c:	2000      	movs	r0, #0
   26b9e:	b003      	add	sp, #12
   26ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26ba4:	20003848 	.word	0x20003848
   26ba8:	5ac9bca5 	.word	0x5ac9bca5
   26bac:	00027565 	.word	0x00027565

00026bb0 <nrf_cc3xx_platform_ctr_drbg_get>:
   26bb0:	b570      	push	{r4, r5, r6, lr}
   26bb2:	461d      	mov	r5, r3
   26bb4:	4b0c      	ldr	r3, [pc, #48]	; (26be8 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   26bb6:	2800      	cmp	r0, #0
   26bb8:	bf18      	it	ne
   26bba:	4603      	movne	r3, r0
   26bbc:	480b      	ldr	r0, [pc, #44]	; (26bec <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   26bbe:	681e      	ldr	r6, [r3, #0]
   26bc0:	4286      	cmp	r6, r0
   26bc2:	b082      	sub	sp, #8
   26bc4:	d10d      	bne.n	26be2 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   26bc6:	2600      	movs	r6, #0
   26bc8:	f503 708e 	add.w	r0, r3, #284	; 0x11c
   26bcc:	9600      	str	r6, [sp, #0]
   26bce:	4633      	mov	r3, r6
   26bd0:	4614      	mov	r4, r2
   26bd2:	f000 fb17 	bl	27204 <cc_mbedtls_ctr_drbg_random_with_add>
   26bd6:	2800      	cmp	r0, #0
   26bd8:	bf18      	it	ne
   26bda:	4634      	movne	r4, r6
   26bdc:	602c      	str	r4, [r5, #0]
   26bde:	b002      	add	sp, #8
   26be0:	bd70      	pop	{r4, r5, r6, pc}
   26be2:	4803      	ldr	r0, [pc, #12]	; (26bf0 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   26be4:	e7fb      	b.n	26bde <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   26be6:	bf00      	nop
   26be8:	20003848 	.word	0x20003848
   26bec:	5ac9bca5 	.word	0x5ac9bca5
   26bf0:	ffff8fe8 	.word	0xffff8fe8

00026bf4 <mutex_free>:
   26bf4:	b510      	push	{r4, lr}
   26bf6:	4604      	mov	r4, r0
   26bf8:	b150      	cbz	r0, 26c10 <mutex_free+0x1c>
   26bfa:	6863      	ldr	r3, [r4, #4]
   26bfc:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   26c00:	d005      	beq.n	26c0e <mutex_free+0x1a>
   26c02:	4a06      	ldr	r2, [pc, #24]	; (26c1c <mutex_free+0x28>)
   26c04:	4293      	cmp	r3, r2
   26c06:	d002      	beq.n	26c0e <mutex_free+0x1a>
   26c08:	2300      	movs	r3, #0
   26c0a:	6023      	str	r3, [r4, #0]
   26c0c:	6062      	str	r2, [r4, #4]
   26c0e:	bd10      	pop	{r4, pc}
   26c10:	4b03      	ldr	r3, [pc, #12]	; (26c20 <mutex_free+0x2c>)
   26c12:	4804      	ldr	r0, [pc, #16]	; (26c24 <mutex_free+0x30>)
   26c14:	685b      	ldr	r3, [r3, #4]
   26c16:	4798      	blx	r3
   26c18:	e7ef      	b.n	26bfa <mutex_free+0x6>
   26c1a:	bf00      	nop
   26c1c:	a95c5f2c 	.word	0xa95c5f2c
   26c20:	20000764 	.word	0x20000764
   26c24:	0003086c 	.word	0x0003086c

00026c28 <mutex_lock>:
   26c28:	b1c8      	cbz	r0, 26c5e <mutex_lock+0x36>
   26c2a:	6843      	ldr	r3, [r0, #4]
   26c2c:	4a0d      	ldr	r2, [pc, #52]	; (26c64 <mutex_lock+0x3c>)
   26c2e:	4293      	cmp	r3, r2
   26c30:	d013      	beq.n	26c5a <mutex_lock+0x32>
   26c32:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   26c36:	d00e      	beq.n	26c56 <mutex_lock+0x2e>
   26c38:	2301      	movs	r3, #1
   26c3a:	e850 2f00 	ldrex	r2, [r0]
   26c3e:	4619      	mov	r1, r3
   26c40:	e840 1c00 	strex	ip, r1, [r0]
   26c44:	f09c 0f00 	teq	ip, #0
   26c48:	d1f7      	bne.n	26c3a <mutex_lock+0x12>
   26c4a:	2a01      	cmp	r2, #1
   26c4c:	d0f5      	beq.n	26c3a <mutex_lock+0x12>
   26c4e:	f3bf 8f5f 	dmb	sy
   26c52:	2000      	movs	r0, #0
   26c54:	4770      	bx	lr
   26c56:	4804      	ldr	r0, [pc, #16]	; (26c68 <mutex_lock+0x40>)
   26c58:	4770      	bx	lr
   26c5a:	4804      	ldr	r0, [pc, #16]	; (26c6c <mutex_lock+0x44>)
   26c5c:	4770      	bx	lr
   26c5e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   26c62:	4770      	bx	lr
   26c64:	a95c5f2c 	.word	0xa95c5f2c
   26c68:	ffff8fe9 	.word	0xffff8fe9
   26c6c:	ffff8fea 	.word	0xffff8fea

00026c70 <mutex_unlock>:
   26c70:	b180      	cbz	r0, 26c94 <mutex_unlock+0x24>
   26c72:	6843      	ldr	r3, [r0, #4]
   26c74:	4a09      	ldr	r2, [pc, #36]	; (26c9c <mutex_unlock+0x2c>)
   26c76:	4293      	cmp	r3, r2
   26c78:	d00a      	beq.n	26c90 <mutex_unlock+0x20>
   26c7a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   26c7e:	d005      	beq.n	26c8c <mutex_unlock+0x1c>
   26c80:	f3bf 8f5f 	dmb	sy
   26c84:	2300      	movs	r3, #0
   26c86:	6003      	str	r3, [r0, #0]
   26c88:	4618      	mov	r0, r3
   26c8a:	4770      	bx	lr
   26c8c:	4804      	ldr	r0, [pc, #16]	; (26ca0 <mutex_unlock+0x30>)
   26c8e:	4770      	bx	lr
   26c90:	4804      	ldr	r0, [pc, #16]	; (26ca4 <mutex_unlock+0x34>)
   26c92:	4770      	bx	lr
   26c94:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   26c98:	4770      	bx	lr
   26c9a:	bf00      	nop
   26c9c:	a95c5f2c 	.word	0xa95c5f2c
   26ca0:	ffff8fe9 	.word	0xffff8fe9
   26ca4:	ffff8fea 	.word	0xffff8fea

00026ca8 <mutex_init>:
   26ca8:	b510      	push	{r4, lr}
   26caa:	4604      	mov	r4, r0
   26cac:	b120      	cbz	r0, 26cb8 <mutex_init+0x10>
   26cae:	4b04      	ldr	r3, [pc, #16]	; (26cc0 <mutex_init+0x18>)
   26cb0:	6063      	str	r3, [r4, #4]
   26cb2:	2200      	movs	r2, #0
   26cb4:	6022      	str	r2, [r4, #0]
   26cb6:	bd10      	pop	{r4, pc}
   26cb8:	4802      	ldr	r0, [pc, #8]	; (26cc4 <mutex_init+0x1c>)
   26cba:	f7ff ff27 	bl	26b0c <CC_PalAbort>
   26cbe:	e7f6      	b.n	26cae <mutex_init+0x6>
   26cc0:	3a00003a 	.word	0x3a00003a
   26cc4:	00030894 	.word	0x00030894

00026cc8 <nrf_cc3xx_platform_set_mutexes>:
   26cc8:	b570      	push	{r4, r5, r6, lr}
   26cca:	e9d0 2300 	ldrd	r2, r3, [r0]
   26cce:	4c17      	ldr	r4, [pc, #92]	; (26d2c <nrf_cc3xx_platform_set_mutexes+0x64>)
   26cd0:	4d17      	ldr	r5, [pc, #92]	; (26d30 <nrf_cc3xx_platform_set_mutexes+0x68>)
   26cd2:	6063      	str	r3, [r4, #4]
   26cd4:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   26cd8:	e9c4 3002 	strd	r3, r0, [r4, #8]
   26cdc:	6022      	str	r2, [r4, #0]
   26cde:	6848      	ldr	r0, [r1, #4]
   26ce0:	f8d1 c000 	ldr.w	ip, [r1]
   26ce4:	4b13      	ldr	r3, [pc, #76]	; (26d34 <nrf_cc3xx_platform_set_mutexes+0x6c>)
   26ce6:	e9c3 c000 	strd	ip, r0, [r3]
   26cea:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
   26cee:	f8d1 c008 	ldr.w	ip, [r1, #8]
   26cf2:	f8c3 c008 	str.w	ip, [r3, #8]
   26cf6:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
   26cfa:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   26cfe:	6909      	ldr	r1, [r1, #16]
   26d00:	f8c3 c00c 	str.w	ip, [r3, #12]
   26d04:	6119      	str	r1, [r3, #16]
   26d06:	d010      	beq.n	26d2a <nrf_cc3xx_platform_set_mutexes+0x62>
   26d08:	490b      	ldr	r1, [pc, #44]	; (26d38 <nrf_cc3xx_platform_set_mutexes+0x70>)
   26d0a:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   26d0e:	2300      	movs	r3, #0
   26d10:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   26d14:	f505 708a 	add.w	r0, r5, #276	; 0x114
   26d18:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   26d1c:	4790      	blx	r2
   26d1e:	6823      	ldr	r3, [r4, #0]
   26d20:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   26d24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26d28:	4718      	bx	r3
   26d2a:	bd70      	pop	{r4, r5, r6, pc}
   26d2c:	20000780 	.word	0x20000780
   26d30:	20003848 	.word	0x20003848
   26d34:	2000076c 	.word	0x2000076c
   26d38:	a95c5f2c 	.word	0xa95c5f2c

00026d3c <mbedtls_zeroize_internal>:
   26d3c:	b138      	cbz	r0, 26d4e <mbedtls_zeroize_internal+0x12>
   26d3e:	b131      	cbz	r1, 26d4e <mbedtls_zeroize_internal+0x12>
   26d40:	4401      	add	r1, r0
   26d42:	2200      	movs	r2, #0
   26d44:	4603      	mov	r3, r0
   26d46:	3001      	adds	r0, #1
   26d48:	4281      	cmp	r1, r0
   26d4a:	701a      	strb	r2, [r3, #0]
   26d4c:	d1fa      	bne.n	26d44 <mbedtls_zeroize_internal+0x8>
   26d4e:	4770      	bx	lr

00026d50 <mbedtls_platform_zeroize>:
   26d50:	b138      	cbz	r0, 26d62 <mbedtls_platform_zeroize+0x12>
   26d52:	b131      	cbz	r1, 26d62 <mbedtls_platform_zeroize+0x12>
   26d54:	4401      	add	r1, r0
   26d56:	2200      	movs	r2, #0
   26d58:	4603      	mov	r3, r0
   26d5a:	3001      	adds	r0, #1
   26d5c:	4288      	cmp	r0, r1
   26d5e:	701a      	strb	r2, [r3, #0]
   26d60:	d1fa      	bne.n	26d58 <mbedtls_platform_zeroize+0x8>
   26d62:	4770      	bx	lr

00026d64 <block_cipher_df>:
   26d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d68:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   26d6c:	b0b5      	sub	sp, #212	; 0xd4
   26d6e:	f200 80d7 	bhi.w	26f20 <block_cipher_df+0x1bc>
   26d72:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 26f28 <block_cipher_df+0x1c4>
   26d76:	4614      	mov	r4, r2
   26d78:	460d      	mov	r5, r1
   26d7a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   26d7e:	2100      	movs	r1, #0
   26d80:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
   26d84:	4607      	mov	r7, r0
   26d86:	4648      	mov	r0, r9
   26d88:	f004 ff95 	bl	2bcb6 <memset>
   26d8c:	4640      	mov	r0, r8
   26d8e:	f001 f951 	bl	28034 <cc_mbedtls_aes_init>
   26d92:	2300      	movs	r3, #0
   26d94:	f8a9 3010 	strh.w	r3, [r9, #16]
   26d98:	ba63      	rev16	r3, r4
   26d9a:	f109 0618 	add.w	r6, r9, #24
   26d9e:	f8a9 3012 	strh.w	r3, [r9, #18]
   26da2:	2320      	movs	r3, #32
   26da4:	4629      	mov	r1, r5
   26da6:	4622      	mov	r2, r4
   26da8:	f889 3017 	strb.w	r3, [r9, #23]
   26dac:	4630      	mov	r0, r6
   26dae:	f004 ff77 	bl	2bca0 <memcpy>
   26db2:	4b5e      	ldr	r3, [pc, #376]	; (26f2c <block_cipher_df+0x1c8>)
   26db4:	9307      	str	r3, [sp, #28]
   26db6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   26dba:	2280      	movs	r2, #128	; 0x80
   26dbc:	9308      	str	r3, [sp, #32]
   26dbe:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   26dc2:	9309      	str	r3, [sp, #36]	; 0x24
   26dc4:	5532      	strb	r2, [r6, r4]
   26dc6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   26dca:	a907      	add	r1, sp, #28
   26dcc:	4640      	mov	r0, r8
   26dce:	930a      	str	r3, [sp, #40]	; 0x28
   26dd0:	f001 f946 	bl	28060 <cc_mbedtls_aes_setkey_enc>
   26dd4:	4682      	mov	sl, r0
   26dd6:	2800      	cmp	r0, #0
   26dd8:	d17f      	bne.n	26eda <block_cipher_df+0x176>
   26dda:	f104 0319 	add.w	r3, r4, #25
   26dde:	ae0b      	add	r6, sp, #44	; 0x2c
   26de0:	ac0f      	add	r4, sp, #60	; 0x3c
   26de2:	9302      	str	r3, [sp, #8]
   26de4:	9703      	str	r7, [sp, #12]
   26de6:	9601      	str	r6, [sp, #4]
   26de8:	9404      	str	r4, [sp, #16]
   26dea:	9801      	ldr	r0, [sp, #4]
   26dec:	f8df b140 	ldr.w	fp, [pc, #320]	; 26f30 <block_cipher_df+0x1cc>
   26df0:	2210      	movs	r2, #16
   26df2:	2100      	movs	r1, #0
   26df4:	f004 ff5f 	bl	2bcb6 <memset>
   26df8:	f8dd a008 	ldr.w	sl, [sp, #8]
   26dfc:	9405      	str	r4, [sp, #20]
   26dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26e00:	f85b 4c04 	ldr.w	r4, [fp, #-4]
   26e04:	f85b 7c0c 	ldr.w	r7, [fp, #-12]
   26e08:	990b      	ldr	r1, [sp, #44]	; 0x2c
   26e0a:	f85b 0c10 	ldr.w	r0, [fp, #-16]
   26e0e:	f85b 5c08 	ldr.w	r5, [fp, #-8]
   26e12:	e9dd 620c 	ldrd	r6, r2, [sp, #48]	; 0x30
   26e16:	405c      	eors	r4, r3
   26e18:	9b01      	ldr	r3, [sp, #4]
   26e1a:	407e      	eors	r6, r7
   26e1c:	4055      	eors	r5, r2
   26e1e:	ea81 0700 	eor.w	r7, r1, r0
   26e22:	461a      	mov	r2, r3
   26e24:	2101      	movs	r1, #1
   26e26:	4640      	mov	r0, r8
   26e28:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
   26e2c:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
   26e30:	f001 f930 	bl	28094 <cc_mbedtls_aes_crypt_ecb>
   26e34:	f1ba 0f10 	cmp.w	sl, #16
   26e38:	bf94      	ite	ls
   26e3a:	ebaa 0a0a 	subls.w	sl, sl, sl
   26e3e:	f1aa 0a10 	subhi.w	sl, sl, #16
   26e42:	f10b 0b10 	add.w	fp, fp, #16
   26e46:	2800      	cmp	r0, #0
   26e48:	d165      	bne.n	26f16 <block_cipher_df+0x1b2>
   26e4a:	f1ba 0f00 	cmp.w	sl, #0
   26e4e:	d1d6      	bne.n	26dfe <block_cipher_df+0x9a>
   26e50:	9c05      	ldr	r4, [sp, #20]
   26e52:	9901      	ldr	r1, [sp, #4]
   26e54:	4620      	mov	r0, r4
   26e56:	2210      	movs	r2, #16
   26e58:	f004 ff22 	bl	2bca0 <memcpy>
   26e5c:	f899 3003 	ldrb.w	r3, [r9, #3]
   26e60:	3410      	adds	r4, #16
   26e62:	3301      	adds	r3, #1
   26e64:	45a0      	cmp	r8, r4
   26e66:	f889 3003 	strb.w	r3, [r9, #3]
   26e6a:	d1be      	bne.n	26dea <block_cipher_df+0x86>
   26e6c:	9c04      	ldr	r4, [sp, #16]
   26e6e:	9f03      	ldr	r7, [sp, #12]
   26e70:	9e01      	ldr	r6, [sp, #4]
   26e72:	2280      	movs	r2, #128	; 0x80
   26e74:	4621      	mov	r1, r4
   26e76:	4640      	mov	r0, r8
   26e78:	f001 f8f2 	bl	28060 <cc_mbedtls_aes_setkey_enc>
   26e7c:	4682      	mov	sl, r0
   26e7e:	bb70      	cbnz	r0, 26ede <block_cipher_df+0x17a>
   26e80:	f107 0920 	add.w	r9, r7, #32
   26e84:	463d      	mov	r5, r7
   26e86:	ab13      	add	r3, sp, #76	; 0x4c
   26e88:	461a      	mov	r2, r3
   26e8a:	2101      	movs	r1, #1
   26e8c:	4640      	mov	r0, r8
   26e8e:	f001 f901 	bl	28094 <cc_mbedtls_aes_crypt_ecb>
   26e92:	2210      	movs	r2, #16
   26e94:	4682      	mov	sl, r0
   26e96:	a913      	add	r1, sp, #76	; 0x4c
   26e98:	4628      	mov	r0, r5
   26e9a:	4415      	add	r5, r2
   26e9c:	f1ba 0f00 	cmp.w	sl, #0
   26ea0:	d11d      	bne.n	26ede <block_cipher_df+0x17a>
   26ea2:	f004 fefd 	bl	2bca0 <memcpy>
   26ea6:	454d      	cmp	r5, r9
   26ea8:	d1ed      	bne.n	26e86 <block_cipher_df+0x122>
   26eaa:	4640      	mov	r0, r8
   26eac:	f001 f8d2 	bl	28054 <cc_mbedtls_aes_free>
   26eb0:	481d      	ldr	r0, [pc, #116]	; (26f28 <block_cipher_df+0x1c4>)
   26eb2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   26eb6:	f7ff ff4b 	bl	26d50 <mbedtls_platform_zeroize>
   26eba:	4620      	mov	r0, r4
   26ebc:	2120      	movs	r1, #32
   26ebe:	f7ff ff47 	bl	26d50 <mbedtls_platform_zeroize>
   26ec2:	a807      	add	r0, sp, #28
   26ec4:	2110      	movs	r1, #16
   26ec6:	f7ff ff43 	bl	26d50 <mbedtls_platform_zeroize>
   26eca:	4630      	mov	r0, r6
   26ecc:	2110      	movs	r1, #16
   26ece:	f7ff ff3f 	bl	26d50 <mbedtls_platform_zeroize>
   26ed2:	4650      	mov	r0, sl
   26ed4:	b035      	add	sp, #212	; 0xd4
   26ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26eda:	ac0f      	add	r4, sp, #60	; 0x3c
   26edc:	ae0b      	add	r6, sp, #44	; 0x2c
   26ede:	4640      	mov	r0, r8
   26ee0:	f001 f8b8 	bl	28054 <cc_mbedtls_aes_free>
   26ee4:	4810      	ldr	r0, [pc, #64]	; (26f28 <block_cipher_df+0x1c4>)
   26ee6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   26eea:	f7ff ff31 	bl	26d50 <mbedtls_platform_zeroize>
   26eee:	4620      	mov	r0, r4
   26ef0:	2120      	movs	r1, #32
   26ef2:	f7ff ff2d 	bl	26d50 <mbedtls_platform_zeroize>
   26ef6:	a807      	add	r0, sp, #28
   26ef8:	2110      	movs	r1, #16
   26efa:	f7ff ff29 	bl	26d50 <mbedtls_platform_zeroize>
   26efe:	2110      	movs	r1, #16
   26f00:	4630      	mov	r0, r6
   26f02:	f7ff ff25 	bl	26d50 <mbedtls_platform_zeroize>
   26f06:	2120      	movs	r1, #32
   26f08:	4638      	mov	r0, r7
   26f0a:	f7ff ff21 	bl	26d50 <mbedtls_platform_zeroize>
   26f0e:	4650      	mov	r0, sl
   26f10:	b035      	add	sp, #212	; 0xd4
   26f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f16:	9f03      	ldr	r7, [sp, #12]
   26f18:	9e01      	ldr	r6, [sp, #4]
   26f1a:	9c04      	ldr	r4, [sp, #16]
   26f1c:	4682      	mov	sl, r0
   26f1e:	e7de      	b.n	26ede <block_cipher_df+0x17a>
   26f20:	f06f 0a37 	mvn.w	sl, #55	; 0x37
   26f24:	e7f3      	b.n	26f0e <block_cipher_df+0x1aa>
   26f26:	bf00      	nop
   26f28:	20003a18 	.word	0x20003a18
   26f2c:	03020100 	.word	0x03020100
   26f30:	20003a28 	.word	0x20003a28

00026f34 <ctr_drbg_update_internal>:
   26f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26f38:	b088      	sub	sp, #32
   26f3a:	4604      	mov	r4, r0
   26f3c:	460d      	mov	r5, r1
   26f3e:	2220      	movs	r2, #32
   26f40:	2100      	movs	r1, #0
   26f42:	4668      	mov	r0, sp
   26f44:	f004 feb7 	bl	2bcb6 <memset>
   26f48:	f104 0620 	add.w	r6, r4, #32
   26f4c:	466f      	mov	r7, sp
   26f4e:	7be2      	ldrb	r2, [r4, #15]
   26f50:	3201      	adds	r2, #1
   26f52:	b2d2      	uxtb	r2, r2
   26f54:	73e2      	strb	r2, [r4, #15]
   26f56:	2a00      	cmp	r2, #0
   26f58:	d14d      	bne.n	26ff6 <ctr_drbg_update_internal+0xc2>
   26f5a:	7ba2      	ldrb	r2, [r4, #14]
   26f5c:	3201      	adds	r2, #1
   26f5e:	b2d2      	uxtb	r2, r2
   26f60:	73a2      	strb	r2, [r4, #14]
   26f62:	2a00      	cmp	r2, #0
   26f64:	d147      	bne.n	26ff6 <ctr_drbg_update_internal+0xc2>
   26f66:	7b63      	ldrb	r3, [r4, #13]
   26f68:	3301      	adds	r3, #1
   26f6a:	b2db      	uxtb	r3, r3
   26f6c:	7363      	strb	r3, [r4, #13]
   26f6e:	2b00      	cmp	r3, #0
   26f70:	d141      	bne.n	26ff6 <ctr_drbg_update_internal+0xc2>
   26f72:	7b23      	ldrb	r3, [r4, #12]
   26f74:	3301      	adds	r3, #1
   26f76:	b2db      	uxtb	r3, r3
   26f78:	7323      	strb	r3, [r4, #12]
   26f7a:	2b00      	cmp	r3, #0
   26f7c:	d13b      	bne.n	26ff6 <ctr_drbg_update_internal+0xc2>
   26f7e:	7ae3      	ldrb	r3, [r4, #11]
   26f80:	3301      	adds	r3, #1
   26f82:	b2db      	uxtb	r3, r3
   26f84:	72e3      	strb	r3, [r4, #11]
   26f86:	2b00      	cmp	r3, #0
   26f88:	d135      	bne.n	26ff6 <ctr_drbg_update_internal+0xc2>
   26f8a:	7aa3      	ldrb	r3, [r4, #10]
   26f8c:	3301      	adds	r3, #1
   26f8e:	b2db      	uxtb	r3, r3
   26f90:	72a3      	strb	r3, [r4, #10]
   26f92:	2b00      	cmp	r3, #0
   26f94:	d12f      	bne.n	26ff6 <ctr_drbg_update_internal+0xc2>
   26f96:	7a63      	ldrb	r3, [r4, #9]
   26f98:	3301      	adds	r3, #1
   26f9a:	b2db      	uxtb	r3, r3
   26f9c:	7263      	strb	r3, [r4, #9]
   26f9e:	bb53      	cbnz	r3, 26ff6 <ctr_drbg_update_internal+0xc2>
   26fa0:	7a23      	ldrb	r3, [r4, #8]
   26fa2:	3301      	adds	r3, #1
   26fa4:	b2db      	uxtb	r3, r3
   26fa6:	7223      	strb	r3, [r4, #8]
   26fa8:	bb2b      	cbnz	r3, 26ff6 <ctr_drbg_update_internal+0xc2>
   26faa:	79e3      	ldrb	r3, [r4, #7]
   26fac:	3301      	adds	r3, #1
   26fae:	b2db      	uxtb	r3, r3
   26fb0:	71e3      	strb	r3, [r4, #7]
   26fb2:	bb03      	cbnz	r3, 26ff6 <ctr_drbg_update_internal+0xc2>
   26fb4:	79a3      	ldrb	r3, [r4, #6]
   26fb6:	3301      	adds	r3, #1
   26fb8:	b2db      	uxtb	r3, r3
   26fba:	71a3      	strb	r3, [r4, #6]
   26fbc:	b9db      	cbnz	r3, 26ff6 <ctr_drbg_update_internal+0xc2>
   26fbe:	7963      	ldrb	r3, [r4, #5]
   26fc0:	3301      	adds	r3, #1
   26fc2:	b2db      	uxtb	r3, r3
   26fc4:	7163      	strb	r3, [r4, #5]
   26fc6:	b9b3      	cbnz	r3, 26ff6 <ctr_drbg_update_internal+0xc2>
   26fc8:	7923      	ldrb	r3, [r4, #4]
   26fca:	3301      	adds	r3, #1
   26fcc:	b2db      	uxtb	r3, r3
   26fce:	7123      	strb	r3, [r4, #4]
   26fd0:	b98b      	cbnz	r3, 26ff6 <ctr_drbg_update_internal+0xc2>
   26fd2:	78e3      	ldrb	r3, [r4, #3]
   26fd4:	3301      	adds	r3, #1
   26fd6:	b2db      	uxtb	r3, r3
   26fd8:	70e3      	strb	r3, [r4, #3]
   26fda:	b963      	cbnz	r3, 26ff6 <ctr_drbg_update_internal+0xc2>
   26fdc:	78a3      	ldrb	r3, [r4, #2]
   26fde:	3301      	adds	r3, #1
   26fe0:	b2db      	uxtb	r3, r3
   26fe2:	70a3      	strb	r3, [r4, #2]
   26fe4:	b93b      	cbnz	r3, 26ff6 <ctr_drbg_update_internal+0xc2>
   26fe6:	7863      	ldrb	r3, [r4, #1]
   26fe8:	3301      	adds	r3, #1
   26fea:	b2db      	uxtb	r3, r3
   26fec:	7063      	strb	r3, [r4, #1]
   26fee:	b913      	cbnz	r3, 26ff6 <ctr_drbg_update_internal+0xc2>
   26ff0:	7823      	ldrb	r3, [r4, #0]
   26ff2:	3301      	adds	r3, #1
   26ff4:	7023      	strb	r3, [r4, #0]
   26ff6:	463b      	mov	r3, r7
   26ff8:	4622      	mov	r2, r4
   26ffa:	2101      	movs	r1, #1
   26ffc:	4630      	mov	r0, r6
   26ffe:	f001 f849 	bl	28094 <cc_mbedtls_aes_crypt_ecb>
   27002:	4680      	mov	r8, r0
   27004:	bb50      	cbnz	r0, 2705c <ctr_drbg_update_internal+0x128>
   27006:	3710      	adds	r7, #16
   27008:	ab08      	add	r3, sp, #32
   2700a:	429f      	cmp	r7, r3
   2700c:	d19f      	bne.n	26f4e <ctr_drbg_update_internal+0x1a>
   2700e:	9a02      	ldr	r2, [sp, #8]
   27010:	68ab      	ldr	r3, [r5, #8]
   27012:	9f03      	ldr	r7, [sp, #12]
   27014:	9907      	ldr	r1, [sp, #28]
   27016:	4053      	eors	r3, r2
   27018:	9302      	str	r3, [sp, #8]
   2701a:	4630      	mov	r0, r6
   2701c:	68ee      	ldr	r6, [r5, #12]
   2701e:	9b00      	ldr	r3, [sp, #0]
   27020:	407e      	eors	r6, r7
   27022:	9603      	str	r6, [sp, #12]
   27024:	9f04      	ldr	r7, [sp, #16]
   27026:	692e      	ldr	r6, [r5, #16]
   27028:	407e      	eors	r6, r7
   2702a:	9604      	str	r6, [sp, #16]
   2702c:	696e      	ldr	r6, [r5, #20]
   2702e:	9f05      	ldr	r7, [sp, #20]
   27030:	407e      	eors	r6, r7
   27032:	9605      	str	r6, [sp, #20]
   27034:	9f06      	ldr	r7, [sp, #24]
   27036:	69ae      	ldr	r6, [r5, #24]
   27038:	407e      	eors	r6, r7
   2703a:	9606      	str	r6, [sp, #24]
   2703c:	69ee      	ldr	r6, [r5, #28]
   2703e:	4071      	eors	r1, r6
   27040:	9107      	str	r1, [sp, #28]
   27042:	6829      	ldr	r1, [r5, #0]
   27044:	404b      	eors	r3, r1
   27046:	9300      	str	r3, [sp, #0]
   27048:	9901      	ldr	r1, [sp, #4]
   2704a:	686b      	ldr	r3, [r5, #4]
   2704c:	2280      	movs	r2, #128	; 0x80
   2704e:	404b      	eors	r3, r1
   27050:	4669      	mov	r1, sp
   27052:	9301      	str	r3, [sp, #4]
   27054:	f001 f804 	bl	28060 <cc_mbedtls_aes_setkey_enc>
   27058:	4680      	mov	r8, r0
   2705a:	b138      	cbz	r0, 2706c <ctr_drbg_update_internal+0x138>
   2705c:	4668      	mov	r0, sp
   2705e:	2120      	movs	r1, #32
   27060:	f7ff fe76 	bl	26d50 <mbedtls_platform_zeroize>
   27064:	4640      	mov	r0, r8
   27066:	b008      	add	sp, #32
   27068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2706c:	2210      	movs	r2, #16
   2706e:	eb0d 0102 	add.w	r1, sp, r2
   27072:	4620      	mov	r0, r4
   27074:	f004 fe14 	bl	2bca0 <memcpy>
   27078:	e7f0      	b.n	2705c <ctr_drbg_update_internal+0x128>
   2707a:	bf00      	nop

0002707c <mbedtls_ctr_drbg_reseed_internal>:
   2707c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27080:	4604      	mov	r4, r0
   27082:	6980      	ldr	r0, [r0, #24]
   27084:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   27088:	d852      	bhi.n	27130 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   2708a:	461d      	mov	r5, r3
   2708c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   27090:	42ab      	cmp	r3, r5
   27092:	d34d      	bcc.n	27130 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   27094:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   27098:	1a1b      	subs	r3, r3, r0
   2709a:	4293      	cmp	r3, r2
   2709c:	4616      	mov	r6, r2
   2709e:	d347      	bcc.n	27130 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   270a0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2713c <mbedtls_ctr_drbg_reseed_internal+0xc0>
   270a4:	f44f 72c0 	mov.w	r2, #384	; 0x180
   270a8:	460f      	mov	r7, r1
   270aa:	4648      	mov	r0, r9
   270ac:	2100      	movs	r1, #0
   270ae:	f004 fe02 	bl	2bcb6 <memset>
   270b2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   270b6:	69a2      	ldr	r2, [r4, #24]
   270b8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   270bc:	4649      	mov	r1, r9
   270be:	4798      	blx	r3
   270c0:	2800      	cmp	r0, #0
   270c2:	d138      	bne.n	27136 <mbedtls_ctr_drbg_reseed_internal+0xba>
   270c4:	f8d4 8018 	ldr.w	r8, [r4, #24]
   270c8:	b13d      	cbz	r5, 270da <mbedtls_ctr_drbg_reseed_internal+0x5e>
   270ca:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   270ce:	462a      	mov	r2, r5
   270d0:	eb09 0108 	add.w	r1, r9, r8
   270d4:	4798      	blx	r3
   270d6:	bb70      	cbnz	r0, 27136 <mbedtls_ctr_drbg_reseed_internal+0xba>
   270d8:	44a8      	add	r8, r5
   270da:	b107      	cbz	r7, 270de <mbedtls_ctr_drbg_reseed_internal+0x62>
   270dc:	b9c6      	cbnz	r6, 27110 <mbedtls_ctr_drbg_reseed_internal+0x94>
   270de:	4917      	ldr	r1, [pc, #92]	; (2713c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   270e0:	4642      	mov	r2, r8
   270e2:	4608      	mov	r0, r1
   270e4:	f7ff fe3e 	bl	26d64 <block_cipher_df>
   270e8:	4605      	mov	r5, r0
   270ea:	b138      	cbz	r0, 270fc <mbedtls_ctr_drbg_reseed_internal+0x80>
   270ec:	4813      	ldr	r0, [pc, #76]	; (2713c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   270ee:	f44f 71c0 	mov.w	r1, #384	; 0x180
   270f2:	f7ff fe2d 	bl	26d50 <mbedtls_platform_zeroize>
   270f6:	4628      	mov	r0, r5
   270f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   270fc:	490f      	ldr	r1, [pc, #60]	; (2713c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   270fe:	4620      	mov	r0, r4
   27100:	f7ff ff18 	bl	26f34 <ctr_drbg_update_internal>
   27104:	4605      	mov	r5, r0
   27106:	2800      	cmp	r0, #0
   27108:	d1f0      	bne.n	270ec <mbedtls_ctr_drbg_reseed_internal+0x70>
   2710a:	2301      	movs	r3, #1
   2710c:	6123      	str	r3, [r4, #16]
   2710e:	e7ed      	b.n	270ec <mbedtls_ctr_drbg_reseed_internal+0x70>
   27110:	eb09 0008 	add.w	r0, r9, r8
   27114:	4639      	mov	r1, r7
   27116:	4632      	mov	r2, r6
   27118:	f004 fdc2 	bl	2bca0 <memcpy>
   2711c:	4907      	ldr	r1, [pc, #28]	; (2713c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2711e:	44b0      	add	r8, r6
   27120:	4642      	mov	r2, r8
   27122:	4608      	mov	r0, r1
   27124:	f7ff fe1e 	bl	26d64 <block_cipher_df>
   27128:	4605      	mov	r5, r0
   2712a:	2800      	cmp	r0, #0
   2712c:	d1de      	bne.n	270ec <mbedtls_ctr_drbg_reseed_internal+0x70>
   2712e:	e7e5      	b.n	270fc <mbedtls_ctr_drbg_reseed_internal+0x80>
   27130:	f06f 0537 	mvn.w	r5, #55	; 0x37
   27134:	e7df      	b.n	270f6 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   27136:	f06f 0533 	mvn.w	r5, #51	; 0x33
   2713a:	e7dc      	b.n	270f6 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   2713c:	20003bb8 	.word	0x20003bb8

00027140 <cc_mbedtls_ctr_drbg_init>:
   27140:	b510      	push	{r4, lr}
   27142:	22a4      	movs	r2, #164	; 0xa4
   27144:	4604      	mov	r4, r0
   27146:	2100      	movs	r1, #0
   27148:	f004 fdb5 	bl	2bcb6 <memset>
   2714c:	4b06      	ldr	r3, [pc, #24]	; (27168 <cc_mbedtls_ctr_drbg_init+0x28>)
   2714e:	f04f 31ff 	mov.w	r1, #4294967295
   27152:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   27156:	6121      	str	r1, [r4, #16]
   27158:	61e2      	str	r2, [r4, #28]
   2715a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   2715e:	681b      	ldr	r3, [r3, #0]
   27160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27164:	4718      	bx	r3
   27166:	bf00      	nop
   27168:	200007d0 	.word	0x200007d0

0002716c <cc_mbedtls_ctr_drbg_seed>:
   2716c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27170:	b085      	sub	sp, #20
   27172:	4605      	mov	r5, r0
   27174:	460f      	mov	r7, r1
   27176:	4616      	mov	r6, r2
   27178:	2100      	movs	r1, #0
   2717a:	2210      	movs	r2, #16
   2717c:	4668      	mov	r0, sp
   2717e:	4699      	mov	r9, r3
   27180:	f004 fd99 	bl	2bcb6 <memset>
   27184:	4b1d      	ldr	r3, [pc, #116]	; (271fc <cc_mbedtls_ctr_drbg_seed+0x90>)
   27186:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   2718a:	681b      	ldr	r3, [r3, #0]
   2718c:	4640      	mov	r0, r8
   2718e:	4798      	blx	r3
   27190:	b120      	cbz	r0, 2719c <cc_mbedtls_ctr_drbg_seed+0x30>
   27192:	4604      	mov	r4, r0
   27194:	4620      	mov	r0, r4
   27196:	b005      	add	sp, #20
   27198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2719c:	f105 0420 	add.w	r4, r5, #32
   271a0:	4620      	mov	r0, r4
   271a2:	f000 ff47 	bl	28034 <cc_mbedtls_aes_init>
   271a6:	69aa      	ldr	r2, [r5, #24]
   271a8:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   271ac:	692e      	ldr	r6, [r5, #16]
   271ae:	b9e2      	cbnz	r2, 271ea <cc_mbedtls_ctr_drbg_seed+0x7e>
   271b0:	2220      	movs	r2, #32
   271b2:	2e00      	cmp	r6, #0
   271b4:	61aa      	str	r2, [r5, #24]
   271b6:	db1f      	blt.n	271f8 <cc_mbedtls_ctr_drbg_seed+0x8c>
   271b8:	4620      	mov	r0, r4
   271ba:	4669      	mov	r1, sp
   271bc:	2280      	movs	r2, #128	; 0x80
   271be:	f000 ff4f 	bl	28060 <cc_mbedtls_aes_setkey_enc>
   271c2:	4604      	mov	r4, r0
   271c4:	b930      	cbnz	r0, 271d4 <cc_mbedtls_ctr_drbg_seed+0x68>
   271c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   271c8:	4633      	mov	r3, r6
   271ca:	4649      	mov	r1, r9
   271cc:	4628      	mov	r0, r5
   271ce:	f7ff ff55 	bl	2707c <mbedtls_ctr_drbg_reseed_internal>
   271d2:	4604      	mov	r4, r0
   271d4:	4b0a      	ldr	r3, [pc, #40]	; (27200 <cc_mbedtls_ctr_drbg_seed+0x94>)
   271d6:	4640      	mov	r0, r8
   271d8:	681b      	ldr	r3, [r3, #0]
   271da:	4798      	blx	r3
   271dc:	2800      	cmp	r0, #0
   271de:	bf18      	it	ne
   271e0:	4604      	movne	r4, r0
   271e2:	4620      	mov	r0, r4
   271e4:	b005      	add	sp, #20
   271e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   271ea:	2e00      	cmp	r6, #0
   271ec:	dae4      	bge.n	271b8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   271ee:	2a17      	cmp	r2, #23
   271f0:	d802      	bhi.n	271f8 <cc_mbedtls_ctr_drbg_seed+0x8c>
   271f2:	3201      	adds	r2, #1
   271f4:	0856      	lsrs	r6, r2, #1
   271f6:	e7df      	b.n	271b8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   271f8:	2600      	movs	r6, #0
   271fa:	e7dd      	b.n	271b8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   271fc:	200007cc 	.word	0x200007cc
   27200:	200007c8 	.word	0x200007c8

00027204 <cc_mbedtls_ctr_drbg_random_with_add>:
   27204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27208:	b08d      	sub	sp, #52	; 0x34
   2720a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   2720e:	9f16      	ldr	r7, [sp, #88]	; 0x58
   27210:	f200 80e3 	bhi.w	273da <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   27214:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   27218:	f200 80dc 	bhi.w	273d4 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   2721c:	4604      	mov	r4, r0
   2721e:	4615      	mov	r5, r2
   27220:	460e      	mov	r6, r1
   27222:	2220      	movs	r2, #32
   27224:	2100      	movs	r1, #0
   27226:	a804      	add	r0, sp, #16
   27228:	4698      	mov	r8, r3
   2722a:	f004 fd44 	bl	2bcb6 <memset>
   2722e:	4b6c      	ldr	r3, [pc, #432]	; (273e0 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   27230:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   27234:	681b      	ldr	r3, [r3, #0]
   27236:	4648      	mov	r0, r9
   27238:	4798      	blx	r3
   2723a:	4683      	mov	fp, r0
   2723c:	2800      	cmp	r0, #0
   2723e:	f040 8092 	bne.w	27366 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   27242:	6922      	ldr	r2, [r4, #16]
   27244:	69e3      	ldr	r3, [r4, #28]
   27246:	429a      	cmp	r2, r3
   27248:	f300 8091 	bgt.w	2736e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   2724c:	6963      	ldr	r3, [r4, #20]
   2724e:	2b00      	cmp	r3, #0
   27250:	f040 808d 	bne.w	2736e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   27254:	2f00      	cmp	r7, #0
   27256:	f040 80a9 	bne.w	273ac <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   2725a:	f8df a188 	ldr.w	sl, [pc, #392]	; 273e4 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2725e:	466f      	mov	r7, sp
   27260:	2d00      	cmp	r5, #0
   27262:	f000 8098 	beq.w	27396 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   27266:	f104 0820 	add.w	r8, r4, #32
   2726a:	466f      	mov	r7, sp
   2726c:	e00e      	b.n	2728c <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   2726e:	2d10      	cmp	r5, #16
   27270:	46ab      	mov	fp, r5
   27272:	bf28      	it	cs
   27274:	f04f 0b10 	movcs.w	fp, #16
   27278:	4630      	mov	r0, r6
   2727a:	465a      	mov	r2, fp
   2727c:	4639      	mov	r1, r7
   2727e:	f004 fd0f 	bl	2bca0 <memcpy>
   27282:	ebb5 050b 	subs.w	r5, r5, fp
   27286:	445e      	add	r6, fp
   27288:	f000 8085 	beq.w	27396 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   2728c:	7be3      	ldrb	r3, [r4, #15]
   2728e:	3301      	adds	r3, #1
   27290:	b2db      	uxtb	r3, r3
   27292:	73e3      	strb	r3, [r4, #15]
   27294:	2b00      	cmp	r3, #0
   27296:	d14d      	bne.n	27334 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   27298:	7ba3      	ldrb	r3, [r4, #14]
   2729a:	3301      	adds	r3, #1
   2729c:	b2db      	uxtb	r3, r3
   2729e:	73a3      	strb	r3, [r4, #14]
   272a0:	2b00      	cmp	r3, #0
   272a2:	d147      	bne.n	27334 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   272a4:	7b63      	ldrb	r3, [r4, #13]
   272a6:	3301      	adds	r3, #1
   272a8:	b2db      	uxtb	r3, r3
   272aa:	7363      	strb	r3, [r4, #13]
   272ac:	2b00      	cmp	r3, #0
   272ae:	d141      	bne.n	27334 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   272b0:	7b23      	ldrb	r3, [r4, #12]
   272b2:	3301      	adds	r3, #1
   272b4:	b2db      	uxtb	r3, r3
   272b6:	7323      	strb	r3, [r4, #12]
   272b8:	2b00      	cmp	r3, #0
   272ba:	d13b      	bne.n	27334 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   272bc:	7ae3      	ldrb	r3, [r4, #11]
   272be:	3301      	adds	r3, #1
   272c0:	b2db      	uxtb	r3, r3
   272c2:	72e3      	strb	r3, [r4, #11]
   272c4:	2b00      	cmp	r3, #0
   272c6:	d135      	bne.n	27334 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   272c8:	7aa3      	ldrb	r3, [r4, #10]
   272ca:	3301      	adds	r3, #1
   272cc:	b2db      	uxtb	r3, r3
   272ce:	72a3      	strb	r3, [r4, #10]
   272d0:	2b00      	cmp	r3, #0
   272d2:	d12f      	bne.n	27334 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   272d4:	7a63      	ldrb	r3, [r4, #9]
   272d6:	3301      	adds	r3, #1
   272d8:	b2db      	uxtb	r3, r3
   272da:	7263      	strb	r3, [r4, #9]
   272dc:	bb53      	cbnz	r3, 27334 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   272de:	7a23      	ldrb	r3, [r4, #8]
   272e0:	3301      	adds	r3, #1
   272e2:	b2db      	uxtb	r3, r3
   272e4:	7223      	strb	r3, [r4, #8]
   272e6:	bb2b      	cbnz	r3, 27334 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   272e8:	79e3      	ldrb	r3, [r4, #7]
   272ea:	3301      	adds	r3, #1
   272ec:	b2db      	uxtb	r3, r3
   272ee:	71e3      	strb	r3, [r4, #7]
   272f0:	bb03      	cbnz	r3, 27334 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   272f2:	79a3      	ldrb	r3, [r4, #6]
   272f4:	3301      	adds	r3, #1
   272f6:	b2db      	uxtb	r3, r3
   272f8:	71a3      	strb	r3, [r4, #6]
   272fa:	b9db      	cbnz	r3, 27334 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   272fc:	7963      	ldrb	r3, [r4, #5]
   272fe:	3301      	adds	r3, #1
   27300:	b2db      	uxtb	r3, r3
   27302:	7163      	strb	r3, [r4, #5]
   27304:	b9b3      	cbnz	r3, 27334 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   27306:	7923      	ldrb	r3, [r4, #4]
   27308:	3301      	adds	r3, #1
   2730a:	b2db      	uxtb	r3, r3
   2730c:	7123      	strb	r3, [r4, #4]
   2730e:	b98b      	cbnz	r3, 27334 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   27310:	78e3      	ldrb	r3, [r4, #3]
   27312:	3301      	adds	r3, #1
   27314:	b2db      	uxtb	r3, r3
   27316:	70e3      	strb	r3, [r4, #3]
   27318:	b963      	cbnz	r3, 27334 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2731a:	78a3      	ldrb	r3, [r4, #2]
   2731c:	3301      	adds	r3, #1
   2731e:	b2db      	uxtb	r3, r3
   27320:	70a3      	strb	r3, [r4, #2]
   27322:	b93b      	cbnz	r3, 27334 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   27324:	7863      	ldrb	r3, [r4, #1]
   27326:	3301      	adds	r3, #1
   27328:	b2db      	uxtb	r3, r3
   2732a:	7063      	strb	r3, [r4, #1]
   2732c:	b913      	cbnz	r3, 27334 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2732e:	7823      	ldrb	r3, [r4, #0]
   27330:	3301      	adds	r3, #1
   27332:	7023      	strb	r3, [r4, #0]
   27334:	463b      	mov	r3, r7
   27336:	4622      	mov	r2, r4
   27338:	2101      	movs	r1, #1
   2733a:	4640      	mov	r0, r8
   2733c:	f000 feaa 	bl	28094 <cc_mbedtls_aes_crypt_ecb>
   27340:	4683      	mov	fp, r0
   27342:	2800      	cmp	r0, #0
   27344:	d093      	beq.n	2726e <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   27346:	f8da 3000 	ldr.w	r3, [sl]
   2734a:	4648      	mov	r0, r9
   2734c:	4798      	blx	r3
   2734e:	2120      	movs	r1, #32
   27350:	4603      	mov	r3, r0
   27352:	a804      	add	r0, sp, #16
   27354:	2b00      	cmp	r3, #0
   27356:	bf18      	it	ne
   27358:	469b      	movne	fp, r3
   2735a:	f7ff fcf9 	bl	26d50 <mbedtls_platform_zeroize>
   2735e:	2110      	movs	r1, #16
   27360:	4638      	mov	r0, r7
   27362:	f7ff fcf5 	bl	26d50 <mbedtls_platform_zeroize>
   27366:	4658      	mov	r0, fp
   27368:	b00d      	add	sp, #52	; 0x34
   2736a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2736e:	463a      	mov	r2, r7
   27370:	4641      	mov	r1, r8
   27372:	2300      	movs	r3, #0
   27374:	4620      	mov	r0, r4
   27376:	f7ff fe81 	bl	2707c <mbedtls_ctr_drbg_reseed_internal>
   2737a:	f8df a068 	ldr.w	sl, [pc, #104]	; 273e4 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2737e:	2800      	cmp	r0, #0
   27380:	f43f af6d 	beq.w	2725e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   27384:	f8da 3000 	ldr.w	r3, [sl]
   27388:	4648      	mov	r0, r9
   2738a:	4798      	blx	r3
   2738c:	4683      	mov	fp, r0
   2738e:	2800      	cmp	r0, #0
   27390:	f43f af65 	beq.w	2725e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   27394:	e7e7      	b.n	27366 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   27396:	a904      	add	r1, sp, #16
   27398:	4620      	mov	r0, r4
   2739a:	f7ff fdcb 	bl	26f34 <ctr_drbg_update_internal>
   2739e:	4683      	mov	fp, r0
   273a0:	2800      	cmp	r0, #0
   273a2:	d1d0      	bne.n	27346 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   273a4:	6923      	ldr	r3, [r4, #16]
   273a6:	3301      	adds	r3, #1
   273a8:	6123      	str	r3, [r4, #16]
   273aa:	e7cc      	b.n	27346 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   273ac:	463a      	mov	r2, r7
   273ae:	4641      	mov	r1, r8
   273b0:	a804      	add	r0, sp, #16
   273b2:	f7ff fcd7 	bl	26d64 <block_cipher_df>
   273b6:	4683      	mov	fp, r0
   273b8:	b118      	cbz	r0, 273c2 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   273ba:	f8df a028 	ldr.w	sl, [pc, #40]	; 273e4 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   273be:	466f      	mov	r7, sp
   273c0:	e7c1      	b.n	27346 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   273c2:	a904      	add	r1, sp, #16
   273c4:	4620      	mov	r0, r4
   273c6:	f7ff fdb5 	bl	26f34 <ctr_drbg_update_internal>
   273ca:	4683      	mov	fp, r0
   273cc:	2800      	cmp	r0, #0
   273ce:	f43f af44 	beq.w	2725a <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   273d2:	e7f2      	b.n	273ba <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   273d4:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   273d8:	e7c5      	b.n	27366 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   273da:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   273de:	e7c2      	b.n	27366 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   273e0:	200007cc 	.word	0x200007cc
   273e4:	200007c8 	.word	0x200007c8

000273e8 <entropy_update>:
   273e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   273ec:	2b20      	cmp	r3, #32
   273ee:	b08b      	sub	sp, #44	; 0x2c
   273f0:	461d      	mov	r5, r3
   273f2:	4606      	mov	r6, r0
   273f4:	4688      	mov	r8, r1
   273f6:	4691      	mov	r9, r2
   273f8:	d826      	bhi.n	27448 <entropy_update+0x60>
   273fa:	b2db      	uxtb	r3, r3
   273fc:	af02      	add	r7, sp, #8
   273fe:	f88d 8004 	strb.w	r8, [sp, #4]
   27402:	46b0      	mov	r8, r6
   27404:	f88d 3005 	strb.w	r3, [sp, #5]
   27408:	f858 1b04 	ldr.w	r1, [r8], #4
   2740c:	b921      	cbnz	r1, 27418 <entropy_update+0x30>
   2740e:	4640      	mov	r0, r8
   27410:	f000 fe84 	bl	2811c <cc_mbedtls_sha256_starts>
   27414:	4604      	mov	r4, r0
   27416:	b940      	cbnz	r0, 2742a <entropy_update+0x42>
   27418:	2301      	movs	r3, #1
   2741a:	6033      	str	r3, [r6, #0]
   2741c:	2202      	movs	r2, #2
   2741e:	a901      	add	r1, sp, #4
   27420:	4640      	mov	r0, r8
   27422:	f000 fe8f 	bl	28144 <cc_mbedtls_sha256_update>
   27426:	4604      	mov	r4, r0
   27428:	b138      	cbz	r0, 2743a <entropy_update+0x52>
   2742a:	4638      	mov	r0, r7
   2742c:	2120      	movs	r1, #32
   2742e:	f7ff fc8f 	bl	26d50 <mbedtls_platform_zeroize>
   27432:	4620      	mov	r0, r4
   27434:	b00b      	add	sp, #44	; 0x2c
   27436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2743a:	462a      	mov	r2, r5
   2743c:	4649      	mov	r1, r9
   2743e:	4640      	mov	r0, r8
   27440:	f000 fe80 	bl	28144 <cc_mbedtls_sha256_update>
   27444:	4604      	mov	r4, r0
   27446:	e7f0      	b.n	2742a <entropy_update+0x42>
   27448:	af02      	add	r7, sp, #8
   2744a:	4619      	mov	r1, r3
   2744c:	4610      	mov	r0, r2
   2744e:	2300      	movs	r3, #0
   27450:	463a      	mov	r2, r7
   27452:	f000 fffd 	bl	28450 <cc_mbedtls_sha256>
   27456:	4604      	mov	r4, r0
   27458:	2800      	cmp	r0, #0
   2745a:	d1e6      	bne.n	2742a <entropy_update+0x42>
   2745c:	2320      	movs	r3, #32
   2745e:	46b9      	mov	r9, r7
   27460:	461d      	mov	r5, r3
   27462:	e7cc      	b.n	273fe <entropy_update+0x16>

00027464 <entropy_gather_internal.part.0>:
   27464:	b5f0      	push	{r4, r5, r6, r7, lr}
   27466:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   2746a:	b0a7      	sub	sp, #156	; 0x9c
   2746c:	2b00      	cmp	r3, #0
   2746e:	bfd8      	it	le
   27470:	ae02      	addle	r6, sp, #8
   27472:	dd2c      	ble.n	274ce <entropy_gather_internal.part.0+0x6a>
   27474:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   27478:	4605      	mov	r5, r0
   2747a:	2300      	movs	r3, #0
   2747c:	ae02      	add	r6, sp, #8
   2747e:	9301      	str	r3, [sp, #4]
   27480:	f1a4 0701 	sub.w	r7, r4, #1
   27484:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   27488:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   2748c:	ab01      	add	r3, sp, #4
   2748e:	2290      	movs	r2, #144	; 0x90
   27490:	4631      	mov	r1, r6
   27492:	47a0      	blx	r4
   27494:	fab7 f787 	clz	r7, r7
   27498:	097f      	lsrs	r7, r7, #5
   2749a:	4604      	mov	r4, r0
   2749c:	b910      	cbnz	r0, 274a4 <entropy_gather_internal.part.0+0x40>
   2749e:	9b01      	ldr	r3, [sp, #4]
   274a0:	b93b      	cbnz	r3, 274b2 <entropy_gather_internal.part.0+0x4e>
   274a2:	b1a7      	cbz	r7, 274ce <entropy_gather_internal.part.0+0x6a>
   274a4:	4630      	mov	r0, r6
   274a6:	2190      	movs	r1, #144	; 0x90
   274a8:	f7ff fc52 	bl	26d50 <mbedtls_platform_zeroize>
   274ac:	4620      	mov	r0, r4
   274ae:	b027      	add	sp, #156	; 0x9c
   274b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   274b2:	4601      	mov	r1, r0
   274b4:	4632      	mov	r2, r6
   274b6:	4628      	mov	r0, r5
   274b8:	f7ff ff96 	bl	273e8 <entropy_update>
   274bc:	b950      	cbnz	r0, 274d4 <entropy_gather_internal.part.0+0x70>
   274be:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   274c2:	9a01      	ldr	r2, [sp, #4]
   274c4:	4413      	add	r3, r2
   274c6:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   274ca:	2f00      	cmp	r7, #0
   274cc:	d1ea      	bne.n	274a4 <entropy_gather_internal.part.0+0x40>
   274ce:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   274d2:	e7e7      	b.n	274a4 <entropy_gather_internal.part.0+0x40>
   274d4:	4604      	mov	r4, r0
   274d6:	4620      	mov	r0, r4
   274d8:	b027      	add	sp, #156	; 0x9c
   274da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000274dc <cc_mbedtls_entropy_init>:
   274dc:	b570      	push	{r4, r5, r6, lr}
   274de:	2500      	movs	r5, #0
   274e0:	4604      	mov	r4, r0
   274e2:	f504 7688 	add.w	r6, r4, #272	; 0x110
   274e6:	2214      	movs	r2, #20
   274e8:	4629      	mov	r1, r5
   274ea:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   274ee:	30fc      	adds	r0, #252	; 0xfc
   274f0:	f004 fbe1 	bl	2bcb6 <memset>
   274f4:	2208      	movs	r2, #8
   274f6:	4629      	mov	r1, r5
   274f8:	4630      	mov	r0, r6
   274fa:	f004 fbdc 	bl	2bcb6 <memset>
   274fe:	4b15      	ldr	r3, [pc, #84]	; (27554 <cc_mbedtls_entropy_init+0x78>)
   27500:	4630      	mov	r0, r6
   27502:	681b      	ldr	r3, [r3, #0]
   27504:	4798      	blx	r3
   27506:	4620      	mov	r0, r4
   27508:	f840 5b04 	str.w	r5, [r0], #4
   2750c:	f000 fdec 	bl	280e8 <cc_mbedtls_sha256_init>
   27510:	4b11      	ldr	r3, [pc, #68]	; (27558 <cc_mbedtls_entropy_init+0x7c>)
   27512:	4630      	mov	r0, r6
   27514:	681b      	ldr	r3, [r3, #0]
   27516:	4798      	blx	r3
   27518:	b9d8      	cbnz	r0, 27552 <cc_mbedtls_entropy_init+0x76>
   2751a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   2751e:	42ab      	cmp	r3, r5
   27520:	dc11      	bgt.n	27546 <cc_mbedtls_entropy_init+0x6a>
   27522:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   27526:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   2752a:	2120      	movs	r1, #32
   2752c:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   27530:	2101      	movs	r1, #1
   27532:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   27536:	3301      	adds	r3, #1
   27538:	4908      	ldr	r1, [pc, #32]	; (2755c <cc_mbedtls_entropy_init+0x80>)
   2753a:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   2753e:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   27542:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   27546:	4b06      	ldr	r3, [pc, #24]	; (27560 <cc_mbedtls_entropy_init+0x84>)
   27548:	4630      	mov	r0, r6
   2754a:	681b      	ldr	r3, [r3, #0]
   2754c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27550:	4718      	bx	r3
   27552:	bd70      	pop	{r4, r5, r6, pc}
   27554:	200007d0 	.word	0x200007d0
   27558:	200007cc 	.word	0x200007cc
   2755c:	00027f39 	.word	0x00027f39
   27560:	200007c8 	.word	0x200007c8

00027564 <cc_mbedtls_entropy_func>:
   27564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27568:	2a20      	cmp	r2, #32
   2756a:	b088      	sub	sp, #32
   2756c:	d879      	bhi.n	27662 <cc_mbedtls_entropy_func+0xfe>
   2756e:	4b3e      	ldr	r3, [pc, #248]	; (27668 <cc_mbedtls_entropy_func+0x104>)
   27570:	f500 7988 	add.w	r9, r0, #272	; 0x110
   27574:	681b      	ldr	r3, [r3, #0]
   27576:	4604      	mov	r4, r0
   27578:	4648      	mov	r0, r9
   2757a:	4617      	mov	r7, r2
   2757c:	4688      	mov	r8, r1
   2757e:	4798      	blx	r3
   27580:	4605      	mov	r5, r0
   27582:	b9f8      	cbnz	r0, 275c4 <cc_mbedtls_entropy_func+0x60>
   27584:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   27588:	f240 1601 	movw	r6, #257	; 0x101
   2758c:	2b00      	cmp	r3, #0
   2758e:	d064      	beq.n	2765a <cc_mbedtls_entropy_func+0xf6>
   27590:	4620      	mov	r0, r4
   27592:	f7ff ff67 	bl	27464 <entropy_gather_internal.part.0>
   27596:	4605      	mov	r5, r0
   27598:	b938      	cbnz	r0, 275aa <cc_mbedtls_entropy_func+0x46>
   2759a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   2759e:	2b00      	cmp	r3, #0
   275a0:	dc14      	bgt.n	275cc <cc_mbedtls_entropy_func+0x68>
   275a2:	3e01      	subs	r6, #1
   275a4:	d1f2      	bne.n	2758c <cc_mbedtls_entropy_func+0x28>
   275a6:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   275aa:	466e      	mov	r6, sp
   275ac:	2120      	movs	r1, #32
   275ae:	4630      	mov	r0, r6
   275b0:	f7ff fbce 	bl	26d50 <mbedtls_platform_zeroize>
   275b4:	4b2d      	ldr	r3, [pc, #180]	; (2766c <cc_mbedtls_entropy_func+0x108>)
   275b6:	4648      	mov	r0, r9
   275b8:	681b      	ldr	r3, [r3, #0]
   275ba:	4798      	blx	r3
   275bc:	2800      	cmp	r0, #0
   275be:	bf18      	it	ne
   275c0:	f06f 051d 	mvnne.w	r5, #29
   275c4:	4628      	mov	r0, r5
   275c6:	b008      	add	sp, #32
   275c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   275cc:	e9d4 3241 	ldrd	r3, r2, [r4, #260]	; 0x104
   275d0:	4293      	cmp	r3, r2
   275d2:	d303      	bcc.n	275dc <cc_mbedtls_entropy_func+0x78>
   275d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   275d8:	2a01      	cmp	r2, #1
   275da:	d002      	beq.n	275e2 <cc_mbedtls_entropy_func+0x7e>
   275dc:	3e01      	subs	r6, #1
   275de:	d1d7      	bne.n	27590 <cc_mbedtls_entropy_func+0x2c>
   275e0:	e7e1      	b.n	275a6 <cc_mbedtls_entropy_func+0x42>
   275e2:	2b1f      	cmp	r3, #31
   275e4:	d9fa      	bls.n	275dc <cc_mbedtls_entropy_func+0x78>
   275e6:	466e      	mov	r6, sp
   275e8:	4601      	mov	r1, r0
   275ea:	2220      	movs	r2, #32
   275ec:	4630      	mov	r0, r6
   275ee:	f104 0a04 	add.w	sl, r4, #4
   275f2:	f004 fb60 	bl	2bcb6 <memset>
   275f6:	4631      	mov	r1, r6
   275f8:	4650      	mov	r0, sl
   275fa:	f000 fdcd 	bl	28198 <cc_mbedtls_sha256_finish>
   275fe:	4605      	mov	r5, r0
   27600:	2800      	cmp	r0, #0
   27602:	d1d3      	bne.n	275ac <cc_mbedtls_entropy_func+0x48>
   27604:	4650      	mov	r0, sl
   27606:	f000 fd83 	bl	28110 <cc_mbedtls_sha256_free>
   2760a:	4650      	mov	r0, sl
   2760c:	f000 fd6c 	bl	280e8 <cc_mbedtls_sha256_init>
   27610:	4629      	mov	r1, r5
   27612:	4650      	mov	r0, sl
   27614:	f000 fd82 	bl	2811c <cc_mbedtls_sha256_starts>
   27618:	4605      	mov	r5, r0
   2761a:	2800      	cmp	r0, #0
   2761c:	d1c6      	bne.n	275ac <cc_mbedtls_entropy_func+0x48>
   2761e:	4650      	mov	r0, sl
   27620:	2220      	movs	r2, #32
   27622:	4631      	mov	r1, r6
   27624:	f000 fd8e 	bl	28144 <cc_mbedtls_sha256_update>
   27628:	4605      	mov	r5, r0
   2762a:	2800      	cmp	r0, #0
   2762c:	d1be      	bne.n	275ac <cc_mbedtls_entropy_func+0x48>
   2762e:	4603      	mov	r3, r0
   27630:	4632      	mov	r2, r6
   27632:	2120      	movs	r1, #32
   27634:	4630      	mov	r0, r6
   27636:	f000 ff0b 	bl	28450 <cc_mbedtls_sha256>
   2763a:	4605      	mov	r5, r0
   2763c:	2800      	cmp	r0, #0
   2763e:	d1b5      	bne.n	275ac <cc_mbedtls_entropy_func+0x48>
   27640:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   27644:	2b00      	cmp	r3, #0
   27646:	bfc4      	itt	gt
   27648:	2300      	movgt	r3, #0
   2764a:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   2764e:	463a      	mov	r2, r7
   27650:	4640      	mov	r0, r8
   27652:	4631      	mov	r1, r6
   27654:	f004 fb24 	bl	2bca0 <memcpy>
   27658:	e7a8      	b.n	275ac <cc_mbedtls_entropy_func+0x48>
   2765a:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   2765e:	466e      	mov	r6, sp
   27660:	e7a4      	b.n	275ac <cc_mbedtls_entropy_func+0x48>
   27662:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   27666:	e7ad      	b.n	275c4 <cc_mbedtls_entropy_func+0x60>
   27668:	200007cc 	.word	0x200007cc
   2766c:	200007c8 	.word	0x200007c8

00027670 <RndStartupTest.constprop.0>:
   27670:	b530      	push	{r4, r5, lr}
   27672:	b08d      	sub	sp, #52	; 0x34
   27674:	2100      	movs	r1, #0
   27676:	2228      	movs	r2, #40	; 0x28
   27678:	a802      	add	r0, sp, #8
   2767a:	9101      	str	r1, [sp, #4]
   2767c:	f004 fb1b 	bl	2bcb6 <memset>
   27680:	a802      	add	r0, sp, #8
   27682:	f000 ff0d 	bl	284a0 <RNG_PLAT_SetUserRngParameters>
   27686:	4604      	mov	r4, r0
   27688:	b110      	cbz	r0, 27690 <RndStartupTest.constprop.0+0x20>
   2768a:	4620      	mov	r0, r4
   2768c:	b00d      	add	sp, #52	; 0x34
   2768e:	bd30      	pop	{r4, r5, pc}
   27690:	4d17      	ldr	r5, [pc, #92]	; (276f0 <RndStartupTest.constprop.0+0x80>)
   27692:	f04f 31ff 	mov.w	r1, #4294967295
   27696:	6828      	ldr	r0, [r5, #0]
   27698:	f000 f944 	bl	27924 <CC_PalMutexLock>
   2769c:	4604      	mov	r4, r0
   2769e:	b120      	cbz	r0, 276aa <RndStartupTest.constprop.0+0x3a>
   276a0:	4814      	ldr	r0, [pc, #80]	; (276f4 <RndStartupTest.constprop.0+0x84>)
   276a2:	f7ff fa33 	bl	26b0c <CC_PalAbort>
   276a6:	2c01      	cmp	r4, #1
   276a8:	d018      	beq.n	276dc <RndStartupTest.constprop.0+0x6c>
   276aa:	2000      	movs	r0, #0
   276ac:	f000 f96a 	bl	27984 <CC_PalPowerSaveModeSelect>
   276b0:	b9d0      	cbnz	r0, 276e8 <RndStartupTest.constprop.0+0x78>
   276b2:	4a11      	ldr	r2, [pc, #68]	; (276f8 <RndStartupTest.constprop.0+0x88>)
   276b4:	a902      	add	r1, sp, #8
   276b6:	a801      	add	r0, sp, #4
   276b8:	f000 fc30 	bl	27f1c <LLF_RND_RunTrngStartupTest>
   276bc:	4604      	mov	r4, r0
   276be:	2001      	movs	r0, #1
   276c0:	f000 f960 	bl	27984 <CC_PalPowerSaveModeSelect>
   276c4:	b960      	cbnz	r0, 276e0 <RndStartupTest.constprop.0+0x70>
   276c6:	6828      	ldr	r0, [r5, #0]
   276c8:	f000 f934 	bl	27934 <CC_PalMutexUnlock>
   276cc:	2800      	cmp	r0, #0
   276ce:	d0dc      	beq.n	2768a <RndStartupTest.constprop.0+0x1a>
   276d0:	480a      	ldr	r0, [pc, #40]	; (276fc <RndStartupTest.constprop.0+0x8c>)
   276d2:	f7ff fa1b 	bl	26b0c <CC_PalAbort>
   276d6:	4620      	mov	r0, r4
   276d8:	b00d      	add	sp, #52	; 0x34
   276da:	bd30      	pop	{r4, r5, pc}
   276dc:	2405      	movs	r4, #5
   276de:	e7f2      	b.n	276c6 <RndStartupTest.constprop.0+0x56>
   276e0:	4807      	ldr	r0, [pc, #28]	; (27700 <RndStartupTest.constprop.0+0x90>)
   276e2:	f7ff fa13 	bl	26b0c <CC_PalAbort>
   276e6:	e7ee      	b.n	276c6 <RndStartupTest.constprop.0+0x56>
   276e8:	4806      	ldr	r0, [pc, #24]	; (27704 <RndStartupTest.constprop.0+0x94>)
   276ea:	f7ff fa0f 	bl	26b0c <CC_PalAbort>
   276ee:	e7e0      	b.n	276b2 <RndStartupTest.constprop.0+0x42>
   276f0:	200007b4 	.word	0x200007b4
   276f4:	000308b8 	.word	0x000308b8
   276f8:	20003d38 	.word	0x20003d38
   276fc:	00030910 	.word	0x00030910
   27700:	000308f0 	.word	0x000308f0
   27704:	000308d0 	.word	0x000308d0

00027708 <CC_LibInit>:
   27708:	b530      	push	{r4, r5, lr}
   2770a:	b083      	sub	sp, #12
   2770c:	f000 f85c 	bl	277c8 <CC_HalInit>
   27710:	b128      	cbz	r0, 2771e <CC_LibInit+0x16>
   27712:	f000 f8ab 	bl	2786c <CC_PalTerminate>
   27716:	2403      	movs	r4, #3
   27718:	4620      	mov	r0, r4
   2771a:	b003      	add	sp, #12
   2771c:	bd30      	pop	{r4, r5, pc}
   2771e:	f000 f877 	bl	27810 <CC_PalInit>
   27722:	b9d8      	cbnz	r0, 2775c <CC_LibInit+0x54>
   27724:	f000 f92e 	bl	27984 <CC_PalPowerSaveModeSelect>
   27728:	b9e0      	cbnz	r0, 27764 <CC_LibInit+0x5c>
   2772a:	4c22      	ldr	r4, [pc, #136]	; (277b4 <CC_LibInit+0xac>)
   2772c:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   27730:	0e1b      	lsrs	r3, r3, #24
   27732:	2bf0      	cmp	r3, #240	; 0xf0
   27734:	d10a      	bne.n	2774c <CC_LibInit+0x44>
   27736:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   2773a:	4b1f      	ldr	r3, [pc, #124]	; (277b8 <CC_LibInit+0xb0>)
   2773c:	429a      	cmp	r2, r3
   2773e:	d031      	beq.n	277a4 <CC_LibInit+0x9c>
   27740:	f000 f844 	bl	277cc <CC_HalTerminate>
   27744:	2407      	movs	r4, #7
   27746:	f000 f891 	bl	2786c <CC_PalTerminate>
   2774a:	e7e5      	b.n	27718 <CC_LibInit+0x10>
   2774c:	f000 f83e 	bl	277cc <CC_HalTerminate>
   27750:	f000 f88c 	bl	2786c <CC_PalTerminate>
   27754:	2406      	movs	r4, #6
   27756:	4620      	mov	r0, r4
   27758:	b003      	add	sp, #12
   2775a:	bd30      	pop	{r4, r5, pc}
   2775c:	2404      	movs	r4, #4
   2775e:	4620      	mov	r0, r4
   27760:	b003      	add	sp, #12
   27762:	bd30      	pop	{r4, r5, pc}
   27764:	f000 f832 	bl	277cc <CC_HalTerminate>
   27768:	f000 f880 	bl	2786c <CC_PalTerminate>
   2776c:	f7ff ff80 	bl	27670 <RndStartupTest.constprop.0>
   27770:	4604      	mov	r4, r0
   27772:	b998      	cbnz	r0, 2779c <CC_LibInit+0x94>
   27774:	4d11      	ldr	r5, [pc, #68]	; (277bc <CC_LibInit+0xb4>)
   27776:	682b      	ldr	r3, [r5, #0]
   27778:	2b00      	cmp	r3, #0
   2777a:	d1cd      	bne.n	27718 <CC_LibInit+0x10>
   2777c:	4602      	mov	r2, r0
   2777e:	4601      	mov	r1, r0
   27780:	f7ff f9e6 	bl	26b50 <nrf_cc3xx_platform_ctr_drbg_init>
   27784:	b950      	cbnz	r0, 2779c <CC_LibInit+0x94>
   27786:	490e      	ldr	r1, [pc, #56]	; (277c0 <CC_LibInit+0xb8>)
   27788:	ab01      	add	r3, sp, #4
   2778a:	2268      	movs	r2, #104	; 0x68
   2778c:	f7ff fa10 	bl	26bb0 <nrf_cc3xx_platform_ctr_drbg_get>
   27790:	b920      	cbnz	r0, 2779c <CC_LibInit+0x94>
   27792:	4b0c      	ldr	r3, [pc, #48]	; (277c4 <CC_LibInit+0xbc>)
   27794:	602b      	str	r3, [r5, #0]
   27796:	4620      	mov	r0, r4
   27798:	b003      	add	sp, #12
   2779a:	bd30      	pop	{r4, r5, pc}
   2779c:	2405      	movs	r4, #5
   2779e:	4620      	mov	r0, r4
   277a0:	b003      	add	sp, #12
   277a2:	bd30      	pop	{r4, r5, pc}
   277a4:	2001      	movs	r0, #1
   277a6:	f000 f8ed 	bl	27984 <CC_PalPowerSaveModeSelect>
   277aa:	2800      	cmp	r0, #0
   277ac:	d1da      	bne.n	27764 <CC_LibInit+0x5c>
   277ae:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   277b2:	e7db      	b.n	2776c <CC_LibInit+0x64>
   277b4:	5002b000 	.word	0x5002b000
   277b8:	20e00000 	.word	0x20e00000
   277bc:	20003f58 	.word	0x20003f58
   277c0:	20003f5c 	.word	0x20003f5c
   277c4:	5a5aea5a 	.word	0x5a5aea5a

000277c8 <CC_HalInit>:
   277c8:	2000      	movs	r0, #0
   277ca:	4770      	bx	lr

000277cc <CC_HalTerminate>:
   277cc:	2000      	movs	r0, #0
   277ce:	4770      	bx	lr

000277d0 <CC_HalClearInterruptBit>:
   277d0:	0543      	lsls	r3, r0, #21
   277d2:	d504      	bpl.n	277de <CC_HalClearInterruptBit+0xe>
   277d4:	4b04      	ldr	r3, [pc, #16]	; (277e8 <CC_HalClearInterruptBit+0x18>)
   277d6:	f04f 32ff 	mov.w	r2, #4294967295
   277da:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   277de:	4b02      	ldr	r3, [pc, #8]	; (277e8 <CC_HalClearInterruptBit+0x18>)
   277e0:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   277e4:	4770      	bx	lr
   277e6:	bf00      	nop
   277e8:	5002b000 	.word	0x5002b000

000277ec <CC_HalMaskInterrupt>:
   277ec:	4b01      	ldr	r3, [pc, #4]	; (277f4 <CC_HalMaskInterrupt+0x8>)
   277ee:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   277f2:	4770      	bx	lr
   277f4:	5002b000 	.word	0x5002b000

000277f8 <CC_HalWaitInterrupt>:
   277f8:	b108      	cbz	r0, 277fe <CC_HalWaitInterrupt+0x6>
   277fa:	f000 b86b 	b.w	278d4 <CC_PalWaitInterrupt>
   277fe:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   27802:	4770      	bx	lr

00027804 <CC_HalWaitInterruptRND>:
   27804:	b108      	cbz	r0, 2780a <CC_HalWaitInterruptRND+0x6>
   27806:	f000 b84f 	b.w	278a8 <CC_PalWaitInterruptRND>
   2780a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   2780e:	4770      	bx	lr

00027810 <CC_PalInit>:
   27810:	b510      	push	{r4, lr}
   27812:	4811      	ldr	r0, [pc, #68]	; (27858 <CC_PalInit+0x48>)
   27814:	f000 f872 	bl	278fc <CC_PalMutexCreate>
   27818:	b100      	cbz	r0, 2781c <CC_PalInit+0xc>
   2781a:	bd10      	pop	{r4, pc}
   2781c:	480f      	ldr	r0, [pc, #60]	; (2785c <CC_PalInit+0x4c>)
   2781e:	f000 f86d 	bl	278fc <CC_PalMutexCreate>
   27822:	2800      	cmp	r0, #0
   27824:	d1f9      	bne.n	2781a <CC_PalInit+0xa>
   27826:	4c0e      	ldr	r4, [pc, #56]	; (27860 <CC_PalInit+0x50>)
   27828:	4620      	mov	r0, r4
   2782a:	f000 f867 	bl	278fc <CC_PalMutexCreate>
   2782e:	2800      	cmp	r0, #0
   27830:	d1f3      	bne.n	2781a <CC_PalInit+0xa>
   27832:	4b0c      	ldr	r3, [pc, #48]	; (27864 <CC_PalInit+0x54>)
   27834:	480c      	ldr	r0, [pc, #48]	; (27868 <CC_PalInit+0x58>)
   27836:	601c      	str	r4, [r3, #0]
   27838:	f000 f860 	bl	278fc <CC_PalMutexCreate>
   2783c:	4601      	mov	r1, r0
   2783e:	2800      	cmp	r0, #0
   27840:	d1eb      	bne.n	2781a <CC_PalInit+0xa>
   27842:	f000 f82d 	bl	278a0 <CC_PalDmaInit>
   27846:	4604      	mov	r4, r0
   27848:	b108      	cbz	r0, 2784e <CC_PalInit+0x3e>
   2784a:	4620      	mov	r0, r4
   2784c:	bd10      	pop	{r4, pc}
   2784e:	f000 f87b 	bl	27948 <CC_PalPowerSaveModeInit>
   27852:	4620      	mov	r0, r4
   27854:	e7fa      	b.n	2784c <CC_PalInit+0x3c>
   27856:	bf00      	nop
   27858:	200007c4 	.word	0x200007c4
   2785c:	200007c0 	.word	0x200007c0
   27860:	200007bc 	.word	0x200007bc
   27864:	200007b4 	.word	0x200007b4
   27868:	200007b8 	.word	0x200007b8

0002786c <CC_PalTerminate>:
   2786c:	b508      	push	{r3, lr}
   2786e:	4808      	ldr	r0, [pc, #32]	; (27890 <CC_PalTerminate+0x24>)
   27870:	f000 f84e 	bl	27910 <CC_PalMutexDestroy>
   27874:	4807      	ldr	r0, [pc, #28]	; (27894 <CC_PalTerminate+0x28>)
   27876:	f000 f84b 	bl	27910 <CC_PalMutexDestroy>
   2787a:	4807      	ldr	r0, [pc, #28]	; (27898 <CC_PalTerminate+0x2c>)
   2787c:	f000 f848 	bl	27910 <CC_PalMutexDestroy>
   27880:	4806      	ldr	r0, [pc, #24]	; (2789c <CC_PalTerminate+0x30>)
   27882:	f000 f845 	bl	27910 <CC_PalMutexDestroy>
   27886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2788a:	f000 b80b 	b.w	278a4 <CC_PalDmaTerminate>
   2788e:	bf00      	nop
   27890:	200007c4 	.word	0x200007c4
   27894:	200007c0 	.word	0x200007c0
   27898:	200007bc 	.word	0x200007bc
   2789c:	200007b8 	.word	0x200007b8

000278a0 <CC_PalDmaInit>:
   278a0:	2000      	movs	r0, #0
   278a2:	4770      	bx	lr

000278a4 <CC_PalDmaTerminate>:
   278a4:	4770      	bx	lr
   278a6:	bf00      	nop

000278a8 <CC_PalWaitInterruptRND>:
   278a8:	b410      	push	{r4}
   278aa:	4c09      	ldr	r4, [pc, #36]	; (278d0 <CC_PalWaitInterruptRND+0x28>)
   278ac:	4602      	mov	r2, r0
   278ae:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   278b2:	4213      	tst	r3, r2
   278b4:	d0fb      	beq.n	278ae <CC_PalWaitInterruptRND+0x6>
   278b6:	b121      	cbz	r1, 278c2 <CC_PalWaitInterruptRND+0x1a>
   278b8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   278bc:	600b      	str	r3, [r1, #0]
   278be:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   278c2:	4b03      	ldr	r3, [pc, #12]	; (278d0 <CC_PalWaitInterruptRND+0x28>)
   278c4:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   278c8:	2000      	movs	r0, #0
   278ca:	bc10      	pop	{r4}
   278cc:	4770      	bx	lr
   278ce:	bf00      	nop
   278d0:	5002b000 	.word	0x5002b000

000278d4 <CC_PalWaitInterrupt>:
   278d4:	4a04      	ldr	r2, [pc, #16]	; (278e8 <CC_PalWaitInterrupt+0x14>)
   278d6:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   278da:	4218      	tst	r0, r3
   278dc:	d0fb      	beq.n	278d6 <CC_PalWaitInterrupt+0x2>
   278de:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   278e2:	2000      	movs	r0, #0
   278e4:	4770      	bx	lr
   278e6:	bf00      	nop
   278e8:	5002b000 	.word	0x5002b000

000278ec <CC_PalMemCopyPlat>:
   278ec:	f004 b9c1 	b.w	2bc72 <memmove>

000278f0 <CC_PalMemSetPlat>:
   278f0:	f004 b9e1 	b.w	2bcb6 <memset>

000278f4 <CC_PalMemSetZeroPlat>:
   278f4:	460a      	mov	r2, r1
   278f6:	2100      	movs	r1, #0
   278f8:	f004 b9dd 	b.w	2bcb6 <memset>

000278fc <CC_PalMutexCreate>:
   278fc:	b508      	push	{r3, lr}
   278fe:	4b03      	ldr	r3, [pc, #12]	; (2790c <CC_PalMutexCreate+0x10>)
   27900:	6802      	ldr	r2, [r0, #0]
   27902:	681b      	ldr	r3, [r3, #0]
   27904:	6810      	ldr	r0, [r2, #0]
   27906:	4798      	blx	r3
   27908:	2000      	movs	r0, #0
   2790a:	bd08      	pop	{r3, pc}
   2790c:	20000780 	.word	0x20000780

00027910 <CC_PalMutexDestroy>:
   27910:	b508      	push	{r3, lr}
   27912:	4b03      	ldr	r3, [pc, #12]	; (27920 <CC_PalMutexDestroy+0x10>)
   27914:	6802      	ldr	r2, [r0, #0]
   27916:	685b      	ldr	r3, [r3, #4]
   27918:	6810      	ldr	r0, [r2, #0]
   2791a:	4798      	blx	r3
   2791c:	2000      	movs	r0, #0
   2791e:	bd08      	pop	{r3, pc}
   27920:	20000780 	.word	0x20000780

00027924 <CC_PalMutexLock>:
   27924:	4b02      	ldr	r3, [pc, #8]	; (27930 <CC_PalMutexLock+0xc>)
   27926:	6802      	ldr	r2, [r0, #0]
   27928:	689b      	ldr	r3, [r3, #8]
   2792a:	6810      	ldr	r0, [r2, #0]
   2792c:	4718      	bx	r3
   2792e:	bf00      	nop
   27930:	20000780 	.word	0x20000780

00027934 <CC_PalMutexUnlock>:
   27934:	b508      	push	{r3, lr}
   27936:	4b03      	ldr	r3, [pc, #12]	; (27944 <CC_PalMutexUnlock+0x10>)
   27938:	6802      	ldr	r2, [r0, #0]
   2793a:	68db      	ldr	r3, [r3, #12]
   2793c:	6810      	ldr	r0, [r2, #0]
   2793e:	4798      	blx	r3
   27940:	2000      	movs	r0, #0
   27942:	bd08      	pop	{r3, pc}
   27944:	20000780 	.word	0x20000780

00027948 <CC_PalPowerSaveModeInit>:
   27948:	b570      	push	{r4, r5, r6, lr}
   2794a:	4c09      	ldr	r4, [pc, #36]	; (27970 <CC_PalPowerSaveModeInit+0x28>)
   2794c:	4d09      	ldr	r5, [pc, #36]	; (27974 <CC_PalPowerSaveModeInit+0x2c>)
   2794e:	6920      	ldr	r0, [r4, #16]
   27950:	68ab      	ldr	r3, [r5, #8]
   27952:	4798      	blx	r3
   27954:	b118      	cbz	r0, 2795e <CC_PalPowerSaveModeInit+0x16>
   27956:	4b08      	ldr	r3, [pc, #32]	; (27978 <CC_PalPowerSaveModeInit+0x30>)
   27958:	4808      	ldr	r0, [pc, #32]	; (2797c <CC_PalPowerSaveModeInit+0x34>)
   2795a:	685b      	ldr	r3, [r3, #4]
   2795c:	4798      	blx	r3
   2795e:	4a08      	ldr	r2, [pc, #32]	; (27980 <CC_PalPowerSaveModeInit+0x38>)
   27960:	68eb      	ldr	r3, [r5, #12]
   27962:	6920      	ldr	r0, [r4, #16]
   27964:	2100      	movs	r1, #0
   27966:	6011      	str	r1, [r2, #0]
   27968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2796c:	4718      	bx	r3
   2796e:	bf00      	nop
   27970:	2000076c 	.word	0x2000076c
   27974:	20000780 	.word	0x20000780
   27978:	20000764 	.word	0x20000764
   2797c:	00030928 	.word	0x00030928
   27980:	20003fc4 	.word	0x20003fc4

00027984 <CC_PalPowerSaveModeSelect>:
   27984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27986:	4d1a      	ldr	r5, [pc, #104]	; (279f0 <CC_PalPowerSaveModeSelect+0x6c>)
   27988:	4e1a      	ldr	r6, [pc, #104]	; (279f4 <CC_PalPowerSaveModeSelect+0x70>)
   2798a:	4604      	mov	r4, r0
   2798c:	68b2      	ldr	r2, [r6, #8]
   2798e:	6928      	ldr	r0, [r5, #16]
   27990:	4790      	blx	r2
   27992:	b9e8      	cbnz	r0, 279d0 <CC_PalPowerSaveModeSelect+0x4c>
   27994:	4f18      	ldr	r7, [pc, #96]	; (279f8 <CC_PalPowerSaveModeSelect+0x74>)
   27996:	683b      	ldr	r3, [r7, #0]
   27998:	b14c      	cbz	r4, 279ae <CC_PalPowerSaveModeSelect+0x2a>
   2799a:	b1a3      	cbz	r3, 279c6 <CC_PalPowerSaveModeSelect+0x42>
   2799c:	2b01      	cmp	r3, #1
   2799e:	d019      	beq.n	279d4 <CC_PalPowerSaveModeSelect+0x50>
   279a0:	3b01      	subs	r3, #1
   279a2:	603b      	str	r3, [r7, #0]
   279a4:	6928      	ldr	r0, [r5, #16]
   279a6:	68f3      	ldr	r3, [r6, #12]
   279a8:	4798      	blx	r3
   279aa:	2000      	movs	r0, #0
   279ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   279ae:	b943      	cbnz	r3, 279c2 <CC_PalPowerSaveModeSelect+0x3e>
   279b0:	4a12      	ldr	r2, [pc, #72]	; (279fc <CC_PalPowerSaveModeSelect+0x78>)
   279b2:	2101      	movs	r1, #1
   279b4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   279b8:	4911      	ldr	r1, [pc, #68]	; (27a00 <CC_PalPowerSaveModeSelect+0x7c>)
   279ba:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   279be:	2a00      	cmp	r2, #0
   279c0:	d1fb      	bne.n	279ba <CC_PalPowerSaveModeSelect+0x36>
   279c2:	3301      	adds	r3, #1
   279c4:	603b      	str	r3, [r7, #0]
   279c6:	68f3      	ldr	r3, [r6, #12]
   279c8:	6928      	ldr	r0, [r5, #16]
   279ca:	4798      	blx	r3
   279cc:	2000      	movs	r0, #0
   279ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   279d0:	480c      	ldr	r0, [pc, #48]	; (27a04 <CC_PalPowerSaveModeSelect+0x80>)
   279d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   279d4:	4a0a      	ldr	r2, [pc, #40]	; (27a00 <CC_PalPowerSaveModeSelect+0x7c>)
   279d6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   279da:	2b00      	cmp	r3, #0
   279dc:	d1fb      	bne.n	279d6 <CC_PalPowerSaveModeSelect+0x52>
   279de:	4a07      	ldr	r2, [pc, #28]	; (279fc <CC_PalPowerSaveModeSelect+0x78>)
   279e0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   279e4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   279e8:	f7ff ff00 	bl	277ec <CC_HalMaskInterrupt>
   279ec:	683b      	ldr	r3, [r7, #0]
   279ee:	e7d7      	b.n	279a0 <CC_PalPowerSaveModeSelect+0x1c>
   279f0:	2000076c 	.word	0x2000076c
   279f4:	20000780 	.word	0x20000780
   279f8:	20003fc4 	.word	0x20003fc4
   279fc:	5002a000 	.word	0x5002a000
   27a00:	5002b000 	.word	0x5002b000
   27a04:	ffff8fe9 	.word	0xffff8fe9

00027a08 <mutex_init>:
   27a08:	4b01      	ldr	r3, [pc, #4]	; (27a10 <mutex_init+0x8>)
   27a0a:	681b      	ldr	r3, [r3, #0]
   27a0c:	4718      	bx	r3
   27a0e:	bf00      	nop
   27a10:	20000780 	.word	0x20000780

00027a14 <mutex_lock>:
   27a14:	4b01      	ldr	r3, [pc, #4]	; (27a1c <mutex_lock+0x8>)
   27a16:	689b      	ldr	r3, [r3, #8]
   27a18:	4718      	bx	r3
   27a1a:	bf00      	nop
   27a1c:	20000780 	.word	0x20000780

00027a20 <mutex_unlock>:
   27a20:	4b01      	ldr	r3, [pc, #4]	; (27a28 <mutex_unlock+0x8>)
   27a22:	68db      	ldr	r3, [r3, #12]
   27a24:	4718      	bx	r3
   27a26:	bf00      	nop
   27a28:	20000780 	.word	0x20000780

00027a2c <startTrngHW>:
   27a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27a30:	2800      	cmp	r0, #0
   27a32:	d078      	beq.n	27b26 <startTrngHW+0xfa>
   27a34:	460c      	mov	r4, r1
   27a36:	2900      	cmp	r1, #0
   27a38:	d075      	beq.n	27b26 <startTrngHW+0xfa>
   27a3a:	461d      	mov	r5, r3
   27a3c:	2b00      	cmp	r3, #0
   27a3e:	d072      	beq.n	27b26 <startTrngHW+0xfa>
   27a40:	4607      	mov	r7, r0
   27a42:	b11a      	cbz	r2, 27a4c <startTrngHW+0x20>
   27a44:	2201      	movs	r2, #1
   27a46:	2300      	movs	r3, #0
   27a48:	602a      	str	r2, [r5, #0]
   27a4a:	6003      	str	r3, [r0, #0]
   27a4c:	682b      	ldr	r3, [r5, #0]
   27a4e:	2b00      	cmp	r3, #0
   27a50:	d064      	beq.n	27b1c <startTrngHW+0xf0>
   27a52:	4629      	mov	r1, r5
   27a54:	4620      	mov	r0, r4
   27a56:	f000 fddb 	bl	28610 <LLF_RND_GetFastestRosc>
   27a5a:	4680      	mov	r8, r0
   27a5c:	2800      	cmp	r0, #0
   27a5e:	d15f      	bne.n	27b20 <startTrngHW+0xf4>
   27a60:	6828      	ldr	r0, [r5, #0]
   27a62:	4621      	mov	r1, r4
   27a64:	f000 fdba 	bl	285dc <LLF_RND_GetRoscSampleCnt>
   27a68:	4680      	mov	r8, r0
   27a6a:	2800      	cmp	r0, #0
   27a6c:	d158      	bne.n	27b20 <startTrngHW+0xf4>
   27a6e:	682b      	ldr	r3, [r5, #0]
   27a70:	2b08      	cmp	r3, #8
   27a72:	d06c      	beq.n	27b4e <startTrngHW+0x122>
   27a74:	2b04      	cmp	r3, #4
   27a76:	d06d      	beq.n	27b54 <startTrngHW+0x128>
   27a78:	f1a3 0902 	sub.w	r9, r3, #2
   27a7c:	fab9 f989 	clz	r9, r9
   27a80:	ea4f 1959 	mov.w	r9, r9, lsr #5
   27a84:	4e35      	ldr	r6, [pc, #212]	; (27b5c <startTrngHW+0x130>)
   27a86:	2101      	movs	r1, #1
   27a88:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   27a8c:	f8c6 1140 	str.w	r1, [r6, #320]	; 0x140
   27a90:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   27a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27a96:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
   27a9a:	f8d6 2130 	ldr.w	r2, [r6, #304]	; 0x130
   27a9e:	4293      	cmp	r3, r2
   27aa0:	d1f6      	bne.n	27a90 <startTrngHW+0x64>
   27aa2:	f04f 0a00 	mov.w	sl, #0
   27aa6:	f04f 30ff 	mov.w	r0, #4294967295
   27aaa:	f8c6 a12c 	str.w	sl, [r6, #300]	; 0x12c
   27aae:	f7ff fe8f 	bl	277d0 <CC_HalClearInterruptBit>
   27ab2:	f06f 031b 	mvn.w	r3, #27
   27ab6:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
   27aba:	4650      	mov	r0, sl
   27abc:	f7ff fe96 	bl	277ec <CC_HalMaskInterrupt>
   27ac0:	f8c6 910c 	str.w	r9, [r6, #268]	; 0x10c
   27ac4:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   27ac8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   27acc:	f7ff fe8e 	bl	277ec <CC_HalMaskInterrupt>
   27ad0:	230a      	movs	r3, #10
   27ad2:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
   27ad6:	9b08      	ldr	r3, [sp, #32]
   27ad8:	2b01      	cmp	r3, #1
   27ada:	d029      	beq.n	27b30 <startTrngHW+0x104>
   27adc:	6923      	ldr	r3, [r4, #16]
   27ade:	4a20      	ldr	r2, [pc, #128]	; (27b60 <startTrngHW+0x134>)
   27ae0:	fba2 2303 	umull	r2, r3, r2, r3
   27ae4:	091b      	lsrs	r3, r3, #4
   27ae6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   27ae8:	fb02 f303 	mul.w	r3, r2, r3
   27aec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27af0:	4a1a      	ldr	r2, [pc, #104]	; (27b5c <startTrngHW+0x130>)
   27af2:	03db      	lsls	r3, r3, #15
   27af4:	099b      	lsrs	r3, r3, #6
   27af6:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
   27afa:	2301      	movs	r3, #1
   27afc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   27b00:	683b      	ldr	r3, [r7, #0]
   27b02:	682a      	ldr	r2, [r5, #0]
   27b04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   27b08:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   27b0c:	603b      	str	r3, [r7, #0]
   27b0e:	682a      	ldr	r2, [r5, #0]
   27b10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   27b14:	603b      	str	r3, [r7, #0]
   27b16:	4640      	mov	r0, r8
   27b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27b1c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 27b64 <startTrngHW+0x138>
   27b20:	4640      	mov	r0, r8
   27b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27b26:	f8df 8040 	ldr.w	r8, [pc, #64]	; 27b68 <startTrngHW+0x13c>
   27b2a:	4640      	mov	r0, r8
   27b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27b30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27b34:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   27b38:	3201      	adds	r2, #1
   27b3a:	d006      	beq.n	27b4a <startTrngHW+0x11e>
   27b3c:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   27b40:	4a07      	ldr	r2, [pc, #28]	; (27b60 <startTrngHW+0x134>)
   27b42:	fba2 2303 	umull	r2, r3, r2, r3
   27b46:	091b      	lsrs	r3, r3, #4
   27b48:	e7cd      	b.n	27ae6 <startTrngHW+0xba>
   27b4a:	2316      	movs	r3, #22
   27b4c:	e7cb      	b.n	27ae6 <startTrngHW+0xba>
   27b4e:	f04f 0903 	mov.w	r9, #3
   27b52:	e797      	b.n	27a84 <startTrngHW+0x58>
   27b54:	f04f 0902 	mov.w	r9, #2
   27b58:	e794      	b.n	27a84 <startTrngHW+0x58>
   27b5a:	bf00      	nop
   27b5c:	5002b000 	.word	0x5002b000
   27b60:	aaaaaaab 	.word	0xaaaaaaab
   27b64:	00f10c31 	.word	0x00f10c31
   27b68:	00f10c35 	.word	0x00f10c35

00027b6c <LLF_RND_RepetitionCounterTest>:
   27b6c:	b350      	cbz	r0, 27bc4 <LLF_RND_RepetitionCounterTest+0x58>
   27b6e:	1e4b      	subs	r3, r1, #1
   27b70:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   27b74:	d226      	bcs.n	27bc4 <LLF_RND_RepetitionCounterTest+0x58>
   27b76:	f04f 0c00 	mov.w	ip, #0
   27b7a:	b530      	push	{r4, r5, lr}
   27b7c:	00cd      	lsls	r5, r1, #3
   27b7e:	46e6      	mov	lr, ip
   27b80:	4664      	mov	r4, ip
   27b82:	0963      	lsrs	r3, r4, #5
   27b84:	f004 011f 	and.w	r1, r4, #31
   27b88:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   27b8c:	291f      	cmp	r1, #31
   27b8e:	fa23 f301 	lsr.w	r3, r3, r1
   27b92:	d006      	beq.n	27ba2 <LLF_RND_RepetitionCounterTest+0x36>
   27b94:	f003 0301 	and.w	r3, r3, #1
   27b98:	b91c      	cbnz	r4, 27ba2 <LLF_RND_RepetitionCounterTest+0x36>
   27b9a:	2401      	movs	r4, #1
   27b9c:	469e      	mov	lr, r3
   27b9e:	46a4      	mov	ip, r4
   27ba0:	e7ef      	b.n	27b82 <LLF_RND_RepetitionCounterTest+0x16>
   27ba2:	459e      	cmp	lr, r3
   27ba4:	f104 0401 	add.w	r4, r4, #1
   27ba8:	d006      	beq.n	27bb8 <LLF_RND_RepetitionCounterTest+0x4c>
   27baa:	469e      	mov	lr, r3
   27bac:	f04f 0c01 	mov.w	ip, #1
   27bb0:	42ac      	cmp	r4, r5
   27bb2:	d1e6      	bne.n	27b82 <LLF_RND_RepetitionCounterTest+0x16>
   27bb4:	2000      	movs	r0, #0
   27bb6:	bd30      	pop	{r4, r5, pc}
   27bb8:	f10c 0c01 	add.w	ip, ip, #1
   27bbc:	4594      	cmp	ip, r2
   27bbe:	d1f7      	bne.n	27bb0 <LLF_RND_RepetitionCounterTest+0x44>
   27bc0:	4801      	ldr	r0, [pc, #4]	; (27bc8 <LLF_RND_RepetitionCounterTest+0x5c>)
   27bc2:	bd30      	pop	{r4, r5, pc}
   27bc4:	4800      	ldr	r0, [pc, #0]	; (27bc8 <LLF_RND_RepetitionCounterTest+0x5c>)
   27bc6:	4770      	bx	lr
   27bc8:	00f10c36 	.word	0x00f10c36

00027bcc <LLF_RND_AdaptiveProportionTest>:
   27bcc:	b3c8      	cbz	r0, 27c42 <LLF_RND_AdaptiveProportionTest+0x76>
   27bce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27bd2:	1e4c      	subs	r4, r1, #1
   27bd4:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   27bd8:	d21c      	bcs.n	27c14 <LLF_RND_AdaptiveProportionTest+0x48>
   27bda:	b1db      	cbz	r3, 27c14 <LLF_RND_AdaptiveProportionTest+0x48>
   27bdc:	b1d2      	cbz	r2, 27c14 <LLF_RND_AdaptiveProportionTest+0x48>
   27bde:	f04f 0e00 	mov.w	lr, #0
   27be2:	00cf      	lsls	r7, r1, #3
   27be4:	4676      	mov	r6, lr
   27be6:	46f0      	mov	r8, lr
   27be8:	4675      	mov	r5, lr
   27bea:	f103 39ff 	add.w	r9, r3, #4294967295
   27bee:	096c      	lsrs	r4, r5, #5
   27bf0:	f005 011f 	and.w	r1, r5, #31
   27bf4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   27bf8:	291f      	cmp	r1, #31
   27bfa:	fa24 fc01 	lsr.w	ip, r4, r1
   27bfe:	d00c      	beq.n	27c1a <LLF_RND_AdaptiveProportionTest+0x4e>
   27c00:	f00c 0c01 	and.w	ip, ip, #1
   27c04:	b94d      	cbnz	r5, 27c1a <LLF_RND_AdaptiveProportionTest+0x4e>
   27c06:	2601      	movs	r6, #1
   27c08:	46e0      	mov	r8, ip
   27c0a:	4635      	mov	r5, r6
   27c0c:	46b6      	mov	lr, r6
   27c0e:	e7ee      	b.n	27bee <LLF_RND_AdaptiveProportionTest+0x22>
   27c10:	4296      	cmp	r6, r2
   27c12:	d918      	bls.n	27c46 <LLF_RND_AdaptiveProportionTest+0x7a>
   27c14:	480d      	ldr	r0, [pc, #52]	; (27c4c <LLF_RND_AdaptiveProportionTest+0x80>)
   27c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27c1a:	4573      	cmp	r3, lr
   27c1c:	d00c      	beq.n	27c38 <LLF_RND_AdaptiveProportionTest+0x6c>
   27c1e:	45c4      	cmp	ip, r8
   27c20:	bf08      	it	eq
   27c22:	3601      	addeq	r6, #1
   27c24:	45f1      	cmp	r9, lr
   27c26:	d0f3      	beq.n	27c10 <LLF_RND_AdaptiveProportionTest+0x44>
   27c28:	f10e 0e01 	add.w	lr, lr, #1
   27c2c:	3501      	adds	r5, #1
   27c2e:	42bd      	cmp	r5, r7
   27c30:	d1dd      	bne.n	27bee <LLF_RND_AdaptiveProportionTest+0x22>
   27c32:	2000      	movs	r0, #0
   27c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27c38:	f04f 0e01 	mov.w	lr, #1
   27c3c:	46e0      	mov	r8, ip
   27c3e:	4676      	mov	r6, lr
   27c40:	e7f4      	b.n	27c2c <LLF_RND_AdaptiveProportionTest+0x60>
   27c42:	4802      	ldr	r0, [pc, #8]	; (27c4c <LLF_RND_AdaptiveProportionTest+0x80>)
   27c44:	4770      	bx	lr
   27c46:	469e      	mov	lr, r3
   27c48:	e7f0      	b.n	27c2c <LLF_RND_AdaptiveProportionTest+0x60>
   27c4a:	bf00      	nop
   27c4c:	00f10c37 	.word	0x00f10c37

00027c50 <getTrngSource>:
   27c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c54:	b091      	sub	sp, #68	; 0x44
   27c56:	460d      	mov	r5, r1
   27c58:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   27c5c:	4682      	mov	sl, r0
   27c5e:	2900      	cmp	r1, #0
   27c60:	d16e      	bne.n	27d40 <getTrngSource+0xf0>
   27c62:	6928      	ldr	r0, [r5, #16]
   27c64:	9006      	str	r0, [sp, #24]
   27c66:	981a      	ldr	r0, [sp, #104]	; 0x68
   27c68:	601c      	str	r4, [r3, #0]
   27c6a:	2300      	movs	r3, #0
   27c6c:	6003      	str	r3, [r0, #0]
   27c6e:	2a00      	cmp	r2, #0
   27c70:	f000 812e 	beq.w	27ed0 <getTrngSource+0x280>
   27c74:	4b9c      	ldr	r3, [pc, #624]	; (27ee8 <getTrngSource+0x298>)
   27c76:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   27c78:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   27c7c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   27c80:	429a      	cmp	r2, r3
   27c82:	d169      	bne.n	27d58 <getTrngSource+0x108>
   27c84:	290a      	cmp	r1, #10
   27c86:	d167      	bne.n	27d58 <getTrngSource+0x108>
   27c88:	f89a 3003 	ldrb.w	r3, [sl, #3]
   27c8c:	9308      	str	r3, [sp, #32]
   27c8e:	f104 0308 	add.w	r3, r4, #8
   27c92:	9906      	ldr	r1, [sp, #24]
   27c94:	9307      	str	r3, [sp, #28]
   27c96:	4b95      	ldr	r3, [pc, #596]	; (27eec <getTrngSource+0x29c>)
   27c98:	4c93      	ldr	r4, [pc, #588]	; (27ee8 <getTrngSource+0x298>)
   27c9a:	fba3 2301 	umull	r2, r3, r3, r1
   27c9e:	089b      	lsrs	r3, r3, #2
   27ca0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27ca4:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   27ca8:	9303      	str	r3, [sp, #12]
   27caa:	2304      	movs	r3, #4
   27cac:	9305      	str	r3, [sp, #20]
   27cae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   27cb0:	9e06      	ldr	r6, [sp, #24]
   27cb2:	601e      	str	r6, [r3, #0]
   27cb4:	2e00      	cmp	r6, #0
   27cb6:	f000 80e9 	beq.w	27e8c <getTrngSource+0x23c>
   27cba:	2700      	movs	r7, #0
   27cbc:	f000 fcb8 	bl	28630 <LLF_RND_TurnOffTrng>
   27cc0:	9709      	str	r7, [sp, #36]	; 0x24
   27cc2:	f1ba 0f00 	cmp.w	sl, #0
   27cc6:	f000 80d5 	beq.w	27e74 <getTrngSource+0x224>
   27cca:	f8dd 801c 	ldr.w	r8, [sp, #28]
   27cce:	f04f 0901 	mov.w	r9, #1
   27cd2:	2d00      	cmp	r5, #0
   27cd4:	f000 80ce 	beq.w	27e74 <getTrngSource+0x224>
   27cd8:	9b08      	ldr	r3, [sp, #32]
   27cda:	2b00      	cmp	r3, #0
   27cdc:	d03e      	beq.n	27d5c <getTrngSource+0x10c>
   27cde:	a908      	add	r1, sp, #32
   27ce0:	4628      	mov	r0, r5
   27ce2:	f000 fc95 	bl	28610 <LLF_RND_GetFastestRosc>
   27ce6:	2800      	cmp	r0, #0
   27ce8:	d03a      	beq.n	27d60 <getTrngSource+0x110>
   27cea:	4b81      	ldr	r3, [pc, #516]	; (27ef0 <getTrngSource+0x2a0>)
   27cec:	4298      	cmp	r0, r3
   27cee:	d020      	beq.n	27d32 <getTrngSource+0xe2>
   27cf0:	9b08      	ldr	r3, [sp, #32]
   27cf2:	2b08      	cmp	r3, #8
   27cf4:	f000 80e4 	beq.w	27ec0 <getTrngSource+0x270>
   27cf8:	005b      	lsls	r3, r3, #1
   27cfa:	2200      	movs	r2, #0
   27cfc:	9308      	str	r3, [sp, #32]
   27cfe:	9200      	str	r2, [sp, #0]
   27d00:	ab08      	add	r3, sp, #32
   27d02:	4629      	mov	r1, r5
   27d04:	4650      	mov	r0, sl
   27d06:	f7ff fe91 	bl	27a2c <startTrngHW>
   27d0a:	4b7a      	ldr	r3, [pc, #488]	; (27ef4 <getTrngSource+0x2a4>)
   27d0c:	4298      	cmp	r0, r3
   27d0e:	f000 80d3 	beq.w	27eb8 <getTrngSource+0x268>
   27d12:	b970      	cbnz	r0, 27d32 <getTrngSource+0xe2>
   27d14:	f8da 2000 	ldr.w	r2, [sl]
   27d18:	0a13      	lsrs	r3, r2, #8
   27d1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   27d1e:	4313      	orrs	r3, r2
   27d20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   27d24:	f8ca 3000 	str.w	r3, [sl]
   27d28:	9b05      	ldr	r3, [sp, #20]
   27d2a:	3b01      	subs	r3, #1
   27d2c:	9305      	str	r3, [sp, #20]
   27d2e:	d1be      	bne.n	27cae <getTrngSource+0x5e>
   27d30:	2000      	movs	r0, #0
   27d32:	9003      	str	r0, [sp, #12]
   27d34:	f000 fc7c 	bl	28630 <LLF_RND_TurnOffTrng>
   27d38:	9803      	ldr	r0, [sp, #12]
   27d3a:	b011      	add	sp, #68	; 0x44
   27d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27d40:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   27d44:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   27d48:	3601      	adds	r6, #1
   27d4a:	bf14      	ite	ne
   27d4c:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   27d50:	f44f 7004 	moveq.w	r0, #528	; 0x210
   27d54:	9006      	str	r0, [sp, #24]
   27d56:	e786      	b.n	27c66 <getTrngSource+0x16>
   27d58:	4867      	ldr	r0, [pc, #412]	; (27ef8 <getTrngSource+0x2a8>)
   27d5a:	e7ea      	b.n	27d32 <getTrngSource+0xe2>
   27d5c:	4865      	ldr	r0, [pc, #404]	; (27ef4 <getTrngSource+0x2a4>)
   27d5e:	e7c4      	b.n	27cea <getTrngSource+0x9a>
   27d60:	9808      	ldr	r0, [sp, #32]
   27d62:	4629      	mov	r1, r5
   27d64:	f000 fc3a 	bl	285dc <LLF_RND_GetRoscSampleCnt>
   27d68:	2800      	cmp	r0, #0
   27d6a:	d1be      	bne.n	27cea <getTrngSource+0x9a>
   27d6c:	9b08      	ldr	r3, [sp, #32]
   27d6e:	2b08      	cmp	r3, #8
   27d70:	f000 80a8 	beq.w	27ec4 <getTrngSource+0x274>
   27d74:	2b04      	cmp	r3, #4
   27d76:	f000 80a8 	beq.w	27eca <getTrngSource+0x27a>
   27d7a:	f1a3 0302 	sub.w	r3, r3, #2
   27d7e:	fab3 f383 	clz	r3, r3
   27d82:	095b      	lsrs	r3, r3, #5
   27d84:	9304      	str	r3, [sp, #16]
   27d86:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   27d8a:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   27d8e:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   27d92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   27d94:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   27d98:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   27d9c:	4293      	cmp	r3, r2
   27d9e:	d1f6      	bne.n	27d8e <getTrngSource+0x13e>
   27da0:	f04f 0b00 	mov.w	fp, #0
   27da4:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   27da8:	f04f 30ff 	mov.w	r0, #4294967295
   27dac:	f7ff fd10 	bl	277d0 <CC_HalClearInterruptBit>
   27db0:	f06f 031b 	mvn.w	r3, #27
   27db4:	4658      	mov	r0, fp
   27db6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   27dba:	f7ff fd17 	bl	277ec <CC_HalMaskInterrupt>
   27dbe:	9b04      	ldr	r3, [sp, #16]
   27dc0:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   27dc4:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   27dc8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   27dcc:	f7ff fd0e 	bl	277ec <CC_HalMaskInterrupt>
   27dd0:	230a      	movs	r3, #10
   27dd2:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   27dd6:	692b      	ldr	r3, [r5, #16]
   27dd8:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   27ddc:	fbab 2303 	umull	r2, r3, fp, r3
   27de0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   27de2:	091b      	lsrs	r3, r3, #4
   27de4:	fb02 f303 	mul.w	r3, r2, r3
   27de8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27dec:	03db      	lsls	r3, r3, #15
   27dee:	099b      	lsrs	r3, r3, #6
   27df0:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   27df4:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   27df8:	f8da 3000 	ldr.w	r3, [sl]
   27dfc:	9908      	ldr	r1, [sp, #32]
   27dfe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   27e02:	020b      	lsls	r3, r1, #8
   27e04:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   27e08:	4313      	orrs	r3, r2
   27e0a:	f8ca 3000 	str.w	r3, [sl]
   27e0e:	a809      	add	r0, sp, #36	; 0x24
   27e10:	f000 fbd4 	bl	285bc <LLF_RND_WaitRngInterrupt>
   27e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27e16:	f003 031a 	and.w	r3, r3, #26
   27e1a:	4303      	orrs	r3, r0
   27e1c:	f47f af68 	bne.w	27cf0 <getTrngSource+0xa0>
   27e20:	fbab 3b06 	umull	r3, fp, fp, r6
   27e24:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   27e28:	930a      	str	r3, [sp, #40]	; 0x28
   27e2a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   27e2e:	930b      	str	r3, [sp, #44]	; 0x2c
   27e30:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   27e34:	930c      	str	r3, [sp, #48]	; 0x30
   27e36:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   27e3a:	930d      	str	r3, [sp, #52]	; 0x34
   27e3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   27e40:	930e      	str	r3, [sp, #56]	; 0x38
   27e42:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   27e46:	930f      	str	r3, [sp, #60]	; 0x3c
   27e48:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   27e4c:	d101      	bne.n	27e52 <getTrngSource+0x202>
   27e4e:	9b03      	ldr	r3, [sp, #12]
   27e50:	b993      	cbnz	r3, 27e78 <getTrngSource+0x228>
   27e52:	4640      	mov	r0, r8
   27e54:	2218      	movs	r2, #24
   27e56:	a90a      	add	r1, sp, #40	; 0x28
   27e58:	3e18      	subs	r6, #24
   27e5a:	f7ff fd47 	bl	278ec <CC_PalMemCopyPlat>
   27e5e:	f108 0818 	add.w	r8, r8, #24
   27e62:	3701      	adds	r7, #1
   27e64:	b196      	cbz	r6, 27e8c <getTrngSource+0x23c>
   27e66:	f000 fbe3 	bl	28630 <LLF_RND_TurnOffTrng>
   27e6a:	2300      	movs	r3, #0
   27e6c:	9309      	str	r3, [sp, #36]	; 0x24
   27e6e:	2d00      	cmp	r5, #0
   27e70:	f47f af32 	bne.w	27cd8 <getTrngSource+0x88>
   27e74:	4821      	ldr	r0, [pc, #132]	; (27efc <getTrngSource+0x2ac>)
   27e76:	e738      	b.n	27cea <getTrngSource+0x9a>
   27e78:	4640      	mov	r0, r8
   27e7a:	1af6      	subs	r6, r6, r3
   27e7c:	461a      	mov	r2, r3
   27e7e:	a90a      	add	r1, sp, #40	; 0x28
   27e80:	4498      	add	r8, r3
   27e82:	3701      	adds	r7, #1
   27e84:	f7ff fd32 	bl	278ec <CC_PalMemCopyPlat>
   27e88:	2e00      	cmp	r6, #0
   27e8a:	d1ec      	bne.n	27e66 <getTrngSource+0x216>
   27e8c:	9f06      	ldr	r7, [sp, #24]
   27e8e:	9e07      	ldr	r6, [sp, #28]
   27e90:	696a      	ldr	r2, [r5, #20]
   27e92:	4639      	mov	r1, r7
   27e94:	4630      	mov	r0, r6
   27e96:	f7ff fe69 	bl	27b6c <LLF_RND_RepetitionCounterTest>
   27e9a:	69aa      	ldr	r2, [r5, #24]
   27e9c:	b940      	cbnz	r0, 27eb0 <getTrngSource+0x260>
   27e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   27ea2:	4639      	mov	r1, r7
   27ea4:	4630      	mov	r0, r6
   27ea6:	f7ff fe91 	bl	27bcc <LLF_RND_AdaptiveProportionTest>
   27eaa:	2800      	cmp	r0, #0
   27eac:	f43f af40 	beq.w	27d30 <getTrngSource+0xe0>
   27eb0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   27eb2:	2300      	movs	r3, #0
   27eb4:	6013      	str	r3, [r2, #0]
   27eb6:	e718      	b.n	27cea <getTrngSource+0x9a>
   27eb8:	6a2b      	ldr	r3, [r5, #32]
   27eba:	2b00      	cmp	r3, #0
   27ebc:	f43f af39 	beq.w	27d32 <getTrngSource+0xe2>
   27ec0:	480f      	ldr	r0, [pc, #60]	; (27f00 <getTrngSource+0x2b0>)
   27ec2:	e736      	b.n	27d32 <getTrngSource+0xe2>
   27ec4:	2303      	movs	r3, #3
   27ec6:	9304      	str	r3, [sp, #16]
   27ec8:	e75d      	b.n	27d86 <getTrngSource+0x136>
   27eca:	2302      	movs	r3, #2
   27ecc:	9304      	str	r3, [sp, #16]
   27ece:	e75a      	b.n	27d86 <getTrngSource+0x136>
   27ed0:	9100      	str	r1, [sp, #0]
   27ed2:	ab08      	add	r3, sp, #32
   27ed4:	2201      	movs	r2, #1
   27ed6:	4629      	mov	r1, r5
   27ed8:	4650      	mov	r0, sl
   27eda:	f7ff fda7 	bl	27a2c <startTrngHW>
   27ede:	2800      	cmp	r0, #0
   27ee0:	f43f aed5 	beq.w	27c8e <getTrngSource+0x3e>
   27ee4:	e725      	b.n	27d32 <getTrngSource+0xe2>
   27ee6:	bf00      	nop
   27ee8:	5002b000 	.word	0x5002b000
   27eec:	aaaaaaab 	.word	0xaaaaaaab
   27ef0:	00f10c02 	.word	0x00f10c02
   27ef4:	00f10c31 	.word	0x00f10c31
   27ef8:	00f10c30 	.word	0x00f10c30
   27efc:	00f10c35 	.word	0x00f10c35
   27f00:	00f10c32 	.word	0x00f10c32

00027f04 <LLF_RND_GetTrngSource>:
   27f04:	b410      	push	{r4}
   27f06:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   27f0a:	9401      	str	r4, [sp, #4]
   27f0c:	9c03      	ldr	r4, [sp, #12]
   27f0e:	9402      	str	r4, [sp, #8]
   27f10:	2400      	movs	r4, #0
   27f12:	9403      	str	r4, [sp, #12]
   27f14:	bc10      	pop	{r4}
   27f16:	f7ff be9b 	b.w	27c50 <getTrngSource>
   27f1a:	bf00      	nop

00027f1c <LLF_RND_RunTrngStartupTest>:
   27f1c:	b510      	push	{r4, lr}
   27f1e:	b086      	sub	sp, #24
   27f20:	ab05      	add	r3, sp, #20
   27f22:	2401      	movs	r4, #1
   27f24:	e9cd 2401 	strd	r2, r4, [sp, #4]
   27f28:	9300      	str	r3, [sp, #0]
   27f2a:	2200      	movs	r2, #0
   27f2c:	ab04      	add	r3, sp, #16
   27f2e:	f7ff fe8f 	bl	27c50 <getTrngSource>
   27f32:	b006      	add	sp, #24
   27f34:	bd10      	pop	{r4, pc}
   27f36:	bf00      	nop

00027f38 <mbedtls_hardware_poll>:
   27f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   27f3a:	b087      	sub	sp, #28
   27f3c:	2900      	cmp	r1, #0
   27f3e:	d066      	beq.n	2800e <mbedtls_hardware_poll+0xd6>
   27f40:	461e      	mov	r6, r3
   27f42:	2b00      	cmp	r3, #0
   27f44:	d063      	beq.n	2800e <mbedtls_hardware_poll+0xd6>
   27f46:	4614      	mov	r4, r2
   27f48:	2a00      	cmp	r2, #0
   27f4a:	d060      	beq.n	2800e <mbedtls_hardware_poll+0xd6>
   27f4c:	4f31      	ldr	r7, [pc, #196]	; (28014 <mbedtls_hardware_poll+0xdc>)
   27f4e:	460d      	mov	r5, r1
   27f50:	6838      	ldr	r0, [r7, #0]
   27f52:	f04f 31ff 	mov.w	r1, #4294967295
   27f56:	f7ff fce5 	bl	27924 <CC_PalMutexLock>
   27f5a:	2800      	cmp	r0, #0
   27f5c:	d14d      	bne.n	27ffa <mbedtls_hardware_poll+0xc2>
   27f5e:	2000      	movs	r0, #0
   27f60:	f7ff fd10 	bl	27984 <CC_PalPowerSaveModeSelect>
   27f64:	2800      	cmp	r0, #0
   27f66:	d144      	bne.n	27ff2 <mbedtls_hardware_poll+0xba>
   27f68:	482b      	ldr	r0, [pc, #172]	; (28018 <mbedtls_hardware_poll+0xe0>)
   27f6a:	f000 fa99 	bl	284a0 <RNG_PLAT_SetUserRngParameters>
   27f6e:	4603      	mov	r3, r0
   27f70:	b1d8      	cbz	r0, 27faa <mbedtls_hardware_poll+0x72>
   27f72:	2001      	movs	r0, #1
   27f74:	f04f 35ff 	mov.w	r5, #4294967295
   27f78:	f7ff fd04 	bl	27984 <CC_PalPowerSaveModeSelect>
   27f7c:	2800      	cmp	r0, #0
   27f7e:	d134      	bne.n	27fea <mbedtls_hardware_poll+0xb2>
   27f80:	4826      	ldr	r0, [pc, #152]	; (2801c <mbedtls_hardware_poll+0xe4>)
   27f82:	f44f 7108 	mov.w	r1, #544	; 0x220
   27f86:	f7fe fed9 	bl	26d3c <mbedtls_zeroize_internal>
   27f8a:	4825      	ldr	r0, [pc, #148]	; (28020 <mbedtls_hardware_poll+0xe8>)
   27f8c:	2104      	movs	r1, #4
   27f8e:	f7fe fed5 	bl	26d3c <mbedtls_zeroize_internal>
   27f92:	4821      	ldr	r0, [pc, #132]	; (28018 <mbedtls_hardware_poll+0xe0>)
   27f94:	2128      	movs	r1, #40	; 0x28
   27f96:	f7fe fed1 	bl	26d3c <mbedtls_zeroize_internal>
   27f9a:	6838      	ldr	r0, [r7, #0]
   27f9c:	f7ff fcca 	bl	27934 <CC_PalMutexUnlock>
   27fa0:	2800      	cmp	r0, #0
   27fa2:	d12e      	bne.n	28002 <mbedtls_hardware_poll+0xca>
   27fa4:	4628      	mov	r0, r5
   27fa6:	b007      	add	sp, #28
   27fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27faa:	4a1c      	ldr	r2, [pc, #112]	; (2801c <mbedtls_hardware_poll+0xe4>)
   27fac:	9202      	str	r2, [sp, #8]
   27fae:	aa05      	add	r2, sp, #20
   27fb0:	9201      	str	r2, [sp, #4]
   27fb2:	aa04      	add	r2, sp, #16
   27fb4:	9003      	str	r0, [sp, #12]
   27fb6:	9200      	str	r2, [sp, #0]
   27fb8:	4917      	ldr	r1, [pc, #92]	; (28018 <mbedtls_hardware_poll+0xe0>)
   27fba:	4819      	ldr	r0, [pc, #100]	; (28020 <mbedtls_hardware_poll+0xe8>)
   27fbc:	461a      	mov	r2, r3
   27fbe:	f7ff ffa1 	bl	27f04 <LLF_RND_GetTrngSource>
   27fc2:	4603      	mov	r3, r0
   27fc4:	2800      	cmp	r0, #0
   27fc6:	d1d4      	bne.n	27f72 <mbedtls_hardware_poll+0x3a>
   27fc8:	4628      	mov	r0, r5
   27fca:	461d      	mov	r5, r3
   27fcc:	9b05      	ldr	r3, [sp, #20]
   27fce:	9904      	ldr	r1, [sp, #16]
   27fd0:	429c      	cmp	r4, r3
   27fd2:	4622      	mov	r2, r4
   27fd4:	bf28      	it	cs
   27fd6:	461a      	movcs	r2, r3
   27fd8:	6032      	str	r2, [r6, #0]
   27fda:	3108      	adds	r1, #8
   27fdc:	f7ff fc86 	bl	278ec <CC_PalMemCopyPlat>
   27fe0:	2001      	movs	r0, #1
   27fe2:	f7ff fccf 	bl	27984 <CC_PalPowerSaveModeSelect>
   27fe6:	2800      	cmp	r0, #0
   27fe8:	d0ca      	beq.n	27f80 <mbedtls_hardware_poll+0x48>
   27fea:	480e      	ldr	r0, [pc, #56]	; (28024 <mbedtls_hardware_poll+0xec>)
   27fec:	f7fe fd8e 	bl	26b0c <CC_PalAbort>
   27ff0:	e7c6      	b.n	27f80 <mbedtls_hardware_poll+0x48>
   27ff2:	480d      	ldr	r0, [pc, #52]	; (28028 <mbedtls_hardware_poll+0xf0>)
   27ff4:	f7fe fd8a 	bl	26b0c <CC_PalAbort>
   27ff8:	e7b6      	b.n	27f68 <mbedtls_hardware_poll+0x30>
   27ffa:	480c      	ldr	r0, [pc, #48]	; (2802c <mbedtls_hardware_poll+0xf4>)
   27ffc:	f7fe fd86 	bl	26b0c <CC_PalAbort>
   28000:	e7ad      	b.n	27f5e <mbedtls_hardware_poll+0x26>
   28002:	480b      	ldr	r0, [pc, #44]	; (28030 <mbedtls_hardware_poll+0xf8>)
   28004:	f7fe fd82 	bl	26b0c <CC_PalAbort>
   28008:	4628      	mov	r0, r5
   2800a:	b007      	add	sp, #28
   2800c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2800e:	f04f 35ff 	mov.w	r5, #4294967295
   28012:	e7c7      	b.n	27fa4 <mbedtls_hardware_poll+0x6c>
   28014:	200007b4 	.word	0x200007b4
   28018:	20003fcc 	.word	0x20003fcc
   2801c:	20003ff4 	.word	0x20003ff4
   28020:	20003fc8 	.word	0x20003fc8
   28024:	000308f0 	.word	0x000308f0
   28028:	000308d0 	.word	0x000308d0
   2802c:	000308b8 	.word	0x000308b8
   28030:	00030948 	.word	0x00030948

00028034 <cc_mbedtls_aes_init>:
   28034:	b510      	push	{r4, lr}
   28036:	4604      	mov	r4, r0
   28038:	b130      	cbz	r0, 28048 <cc_mbedtls_aes_init+0x14>
   2803a:	2200      	movs	r2, #0
   2803c:	2301      	movs	r3, #1
   2803e:	6562      	str	r2, [r4, #84]	; 0x54
   28040:	65a2      	str	r2, [r4, #88]	; 0x58
   28042:	65e3      	str	r3, [r4, #92]	; 0x5c
   28044:	6623      	str	r3, [r4, #96]	; 0x60
   28046:	bd10      	pop	{r4, pc}
   28048:	4801      	ldr	r0, [pc, #4]	; (28050 <cc_mbedtls_aes_init+0x1c>)
   2804a:	f7fe fd5f 	bl	26b0c <CC_PalAbort>
   2804e:	e7f4      	b.n	2803a <cc_mbedtls_aes_init+0x6>
   28050:	00030960 	.word	0x00030960

00028054 <cc_mbedtls_aes_free>:
   28054:	b118      	cbz	r0, 2805e <cc_mbedtls_aes_free+0xa>
   28056:	2274      	movs	r2, #116	; 0x74
   28058:	2100      	movs	r1, #0
   2805a:	f7ff bc49 	b.w	278f0 <CC_PalMemSetPlat>
   2805e:	4770      	bx	lr

00028060 <cc_mbedtls_aes_setkey_enc>:
   28060:	b190      	cbz	r0, 28088 <cc_mbedtls_aes_setkey_enc+0x28>
   28062:	b1a1      	cbz	r1, 2808e <cc_mbedtls_aes_setkey_enc+0x2e>
   28064:	b510      	push	{r4, lr}
   28066:	2a80      	cmp	r2, #128	; 0x80
   28068:	f04f 0400 	mov.w	r4, #0
   2806c:	6384      	str	r4, [r0, #56]	; 0x38
   2806e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   28072:	d106      	bne.n	28082 <cc_mbedtls_aes_setkey_enc+0x22>
   28074:	2210      	movs	r2, #16
   28076:	6304      	str	r4, [r0, #48]	; 0x30
   28078:	4410      	add	r0, r2
   2807a:	f7ff fc37 	bl	278ec <CC_PalMemCopyPlat>
   2807e:	4620      	mov	r0, r4
   28080:	bd10      	pop	{r4, pc}
   28082:	f06f 001f 	mvn.w	r0, #31
   28086:	bd10      	pop	{r4, pc}
   28088:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2808c:	4770      	bx	lr
   2808e:	f06f 001f 	mvn.w	r0, #31
   28092:	4770      	bx	lr

00028094 <cc_mbedtls_aes_crypt_ecb>:
   28094:	b328      	cbz	r0, 280e2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   28096:	b322      	cbz	r2, 280e2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   28098:	b31b      	cbz	r3, 280e2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2809a:	2901      	cmp	r1, #1
   2809c:	d821      	bhi.n	280e2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2809e:	b570      	push	{r4, r5, r6, lr}
   280a0:	4604      	mov	r4, r0
   280a2:	6b81      	ldr	r1, [r0, #56]	; 0x38
   280a4:	b086      	sub	sp, #24
   280a6:	d017      	beq.n	280d8 <cc_mbedtls_aes_crypt_ecb+0x44>
   280a8:	2901      	cmp	r1, #1
   280aa:	d117      	bne.n	280dc <cc_mbedtls_aes_crypt_ecb+0x48>
   280ac:	2510      	movs	r5, #16
   280ae:	2100      	movs	r1, #0
   280b0:	eb0d 0605 	add.w	r6, sp, r5
   280b4:	6361      	str	r1, [r4, #52]	; 0x34
   280b6:	4610      	mov	r0, r2
   280b8:	9500      	str	r5, [sp, #0]
   280ba:	9601      	str	r6, [sp, #4]
   280bc:	aa02      	add	r2, sp, #8
   280be:	4629      	mov	r1, r5
   280c0:	f000 fac2 	bl	28648 <SetDataBuffersInfo>
   280c4:	b950      	cbnz	r0, 280dc <cc_mbedtls_aes_crypt_ecb+0x48>
   280c6:	462b      	mov	r3, r5
   280c8:	4632      	mov	r2, r6
   280ca:	a902      	add	r1, sp, #8
   280cc:	4620      	mov	r0, r4
   280ce:	f000 fd43 	bl	28b58 <ProcessAesDrv>
   280d2:	b918      	cbnz	r0, 280dc <cc_mbedtls_aes_crypt_ecb+0x48>
   280d4:	b006      	add	sp, #24
   280d6:	bd70      	pop	{r4, r5, r6, pc}
   280d8:	2900      	cmp	r1, #0
   280da:	d0e7      	beq.n	280ac <cc_mbedtls_aes_crypt_ecb+0x18>
   280dc:	f06f 0021 	mvn.w	r0, #33	; 0x21
   280e0:	e7f8      	b.n	280d4 <cc_mbedtls_aes_crypt_ecb+0x40>
   280e2:	f06f 0021 	mvn.w	r0, #33	; 0x21
   280e6:	4770      	bx	lr

000280e8 <cc_mbedtls_sha256_init>:
   280e8:	b510      	push	{r4, lr}
   280ea:	4604      	mov	r4, r0
   280ec:	b128      	cbz	r0, 280fa <cc_mbedtls_sha256_init+0x12>
   280ee:	4620      	mov	r0, r4
   280f0:	21f4      	movs	r1, #244	; 0xf4
   280f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   280f6:	f7ff bbfd 	b.w	278f4 <CC_PalMemSetZeroPlat>
   280fa:	4804      	ldr	r0, [pc, #16]	; (2810c <cc_mbedtls_sha256_init+0x24>)
   280fc:	f7fe fd06 	bl	26b0c <CC_PalAbort>
   28100:	4620      	mov	r0, r4
   28102:	21f4      	movs	r1, #244	; 0xf4
   28104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28108:	f7ff bbf4 	b.w	278f4 <CC_PalMemSetZeroPlat>
   2810c:	00030974 	.word	0x00030974

00028110 <cc_mbedtls_sha256_free>:
   28110:	b110      	cbz	r0, 28118 <cc_mbedtls_sha256_free+0x8>
   28112:	21f4      	movs	r1, #244	; 0xf4
   28114:	f7fe be12 	b.w	26d3c <mbedtls_zeroize_internal>
   28118:	4770      	bx	lr
   2811a:	bf00      	nop

0002811c <cc_mbedtls_sha256_starts>:
   2811c:	b508      	push	{r3, lr}
   2811e:	b121      	cbz	r1, 2812a <cc_mbedtls_sha256_starts+0xe>
   28120:	2901      	cmp	r1, #1
   28122:	d008      	beq.n	28136 <cc_mbedtls_sha256_starts+0x1a>
   28124:	f06f 0036 	mvn.w	r0, #54	; 0x36
   28128:	bd08      	pop	{r3, pc}
   2812a:	2101      	movs	r1, #1
   2812c:	f000 f858 	bl	281e0 <mbedtls_sha_starts_internal>
   28130:	2800      	cmp	r0, #0
   28132:	d1f7      	bne.n	28124 <cc_mbedtls_sha256_starts+0x8>
   28134:	bd08      	pop	{r3, pc}
   28136:	2102      	movs	r1, #2
   28138:	f000 f852 	bl	281e0 <mbedtls_sha_starts_internal>
   2813c:	2800      	cmp	r0, #0
   2813e:	d0f9      	beq.n	28134 <cc_mbedtls_sha256_starts+0x18>
   28140:	e7f0      	b.n	28124 <cc_mbedtls_sha256_starts+0x8>
   28142:	bf00      	nop

00028144 <cc_mbedtls_sha256_update>:
   28144:	b530      	push	{r4, r5, lr}
   28146:	4605      	mov	r5, r0
   28148:	1888      	adds	r0, r1, r2
   2814a:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   2814e:	b0a1      	sub	sp, #132	; 0x84
   28150:	460b      	mov	r3, r1
   28152:	4614      	mov	r4, r2
   28154:	d801      	bhi.n	2815a <cc_mbedtls_sha256_update+0x16>
   28156:	2a80      	cmp	r2, #128	; 0x80
   28158:	d90c      	bls.n	28174 <cc_mbedtls_sha256_update+0x30>
   2815a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2815e:	d917      	bls.n	28190 <cc_mbedtls_sha256_update+0x4c>
   28160:	4622      	mov	r2, r4
   28162:	4619      	mov	r1, r3
   28164:	4628      	mov	r0, r5
   28166:	f000 f87d 	bl	28264 <mbedtls_sha_update_internal>
   2816a:	4604      	mov	r4, r0
   2816c:	b984      	cbnz	r4, 28190 <cc_mbedtls_sha256_update+0x4c>
   2816e:	4620      	mov	r0, r4
   28170:	b021      	add	sp, #132	; 0x84
   28172:	bd30      	pop	{r4, r5, pc}
   28174:	4668      	mov	r0, sp
   28176:	f7ff fbb9 	bl	278ec <CC_PalMemCopyPlat>
   2817a:	4622      	mov	r2, r4
   2817c:	4669      	mov	r1, sp
   2817e:	4628      	mov	r0, r5
   28180:	f000 f870 	bl	28264 <mbedtls_sha_update_internal>
   28184:	2180      	movs	r1, #128	; 0x80
   28186:	4604      	mov	r4, r0
   28188:	4668      	mov	r0, sp
   2818a:	f7ff fbb3 	bl	278f4 <CC_PalMemSetZeroPlat>
   2818e:	e7ed      	b.n	2816c <cc_mbedtls_sha256_update+0x28>
   28190:	f06f 0436 	mvn.w	r4, #54	; 0x36
   28194:	e7eb      	b.n	2816e <cc_mbedtls_sha256_update+0x2a>
   28196:	bf00      	nop

00028198 <cc_mbedtls_sha256_finish>:
   28198:	b570      	push	{r4, r5, r6, lr}
   2819a:	b1e8      	cbz	r0, 281d8 <cc_mbedtls_sha256_finish+0x40>
   2819c:	460e      	mov	r6, r1
   2819e:	b1d9      	cbz	r1, 281d8 <cc_mbedtls_sha256_finish+0x40>
   281a0:	4604      	mov	r4, r0
   281a2:	f000 f831 	bl	28208 <mbedtls_sha_finish_internal>
   281a6:	4605      	mov	r5, r0
   281a8:	b9b0      	cbnz	r0, 281d8 <cc_mbedtls_sha256_finish+0x40>
   281aa:	6823      	ldr	r3, [r4, #0]
   281ac:	2b01      	cmp	r3, #1
   281ae:	d00b      	beq.n	281c8 <cc_mbedtls_sha256_finish+0x30>
   281b0:	2b02      	cmp	r3, #2
   281b2:	d001      	beq.n	281b8 <cc_mbedtls_sha256_finish+0x20>
   281b4:	4628      	mov	r0, r5
   281b6:	bd70      	pop	{r4, r5, r6, pc}
   281b8:	221c      	movs	r2, #28
   281ba:	f104 0108 	add.w	r1, r4, #8
   281be:	4630      	mov	r0, r6
   281c0:	f7ff fb94 	bl	278ec <CC_PalMemCopyPlat>
   281c4:	4628      	mov	r0, r5
   281c6:	bd70      	pop	{r4, r5, r6, pc}
   281c8:	2220      	movs	r2, #32
   281ca:	f104 0108 	add.w	r1, r4, #8
   281ce:	4630      	mov	r0, r6
   281d0:	f7ff fb8c 	bl	278ec <CC_PalMemCopyPlat>
   281d4:	4628      	mov	r0, r5
   281d6:	bd70      	pop	{r4, r5, r6, pc}
   281d8:	f06f 0536 	mvn.w	r5, #54	; 0x36
   281dc:	e7ea      	b.n	281b4 <cc_mbedtls_sha256_finish+0x1c>
   281de:	bf00      	nop

000281e0 <mbedtls_sha_starts_internal>:
   281e0:	b178      	cbz	r0, 28202 <mbedtls_sha_starts_internal+0x22>
   281e2:	b538      	push	{r3, r4, r5, lr}
   281e4:	4604      	mov	r4, r0
   281e6:	460d      	mov	r5, r1
   281e8:	21f0      	movs	r1, #240	; 0xf0
   281ea:	f7ff fb83 	bl	278f4 <CC_PalMemSetZeroPlat>
   281ee:	2340      	movs	r3, #64	; 0x40
   281f0:	6025      	str	r5, [r4, #0]
   281f2:	65e3      	str	r3, [r4, #92]	; 0x5c
   281f4:	4620      	mov	r0, r4
   281f6:	f000 fa5b 	bl	286b0 <InitHashDrv>
   281fa:	3800      	subs	r0, #0
   281fc:	bf18      	it	ne
   281fe:	2001      	movne	r0, #1
   28200:	bd38      	pop	{r3, r4, r5, pc}
   28202:	2001      	movs	r0, #1
   28204:	4770      	bx	lr
   28206:	bf00      	nop

00028208 <mbedtls_sha_finish_internal>:
   28208:	b570      	push	{r4, r5, r6, lr}
   2820a:	6e05      	ldr	r5, [r0, #96]	; 0x60
   2820c:	b0a4      	sub	sp, #144	; 0x90
   2820e:	4604      	mov	r4, r0
   28210:	ae04      	add	r6, sp, #16
   28212:	b9e5      	cbnz	r5, 2824e <mbedtls_sha_finish_internal+0x46>
   28214:	2201      	movs	r2, #1
   28216:	2300      	movs	r3, #0
   28218:	6062      	str	r2, [r4, #4]
   2821a:	4630      	mov	r0, r6
   2821c:	e9cd 3300 	strd	r3, r3, [sp]
   28220:	aa02      	add	r2, sp, #8
   28222:	4629      	mov	r1, r5
   28224:	f000 fa10 	bl	28648 <SetDataBuffersInfo>
   28228:	b110      	cbz	r0, 28230 <mbedtls_sha_finish_internal+0x28>
   2822a:	2001      	movs	r0, #1
   2822c:	b024      	add	sp, #144	; 0x90
   2822e:	bd70      	pop	{r4, r5, r6, pc}
   28230:	462a      	mov	r2, r5
   28232:	a902      	add	r1, sp, #8
   28234:	4620      	mov	r0, r4
   28236:	f000 fa63 	bl	28700 <ProcessHashDrv>
   2823a:	2800      	cmp	r0, #0
   2823c:	d1f5      	bne.n	2822a <mbedtls_sha_finish_internal+0x22>
   2823e:	4620      	mov	r0, r4
   28240:	f000 fb74 	bl	2892c <FinishHashDrv>
   28244:	2800      	cmp	r0, #0
   28246:	d1f0      	bne.n	2822a <mbedtls_sha_finish_internal+0x22>
   28248:	6620      	str	r0, [r4, #96]	; 0x60
   2824a:	b024      	add	sp, #144	; 0x90
   2824c:	bd70      	pop	{r4, r5, r6, pc}
   2824e:	2d80      	cmp	r5, #128	; 0x80
   28250:	462a      	mov	r2, r5
   28252:	f100 0164 	add.w	r1, r0, #100	; 0x64
   28256:	bf28      	it	cs
   28258:	2280      	movcs	r2, #128	; 0x80
   2825a:	4630      	mov	r0, r6
   2825c:	f7ff fb46 	bl	278ec <CC_PalMemCopyPlat>
   28260:	6e25      	ldr	r5, [r4, #96]	; 0x60
   28262:	e7d7      	b.n	28214 <mbedtls_sha_finish_internal+0xc>

00028264 <mbedtls_sha_update_internal>:
   28264:	2800      	cmp	r0, #0
   28266:	f000 80ae 	beq.w	283c6 <mbedtls_sha_update_internal+0x162>
   2826a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2826e:	4614      	mov	r4, r2
   28270:	b0a5      	sub	sp, #148	; 0x94
   28272:	2a00      	cmp	r2, #0
   28274:	d03d      	beq.n	282f2 <mbedtls_sha_update_internal+0x8e>
   28276:	460f      	mov	r7, r1
   28278:	2900      	cmp	r1, #0
   2827a:	d049      	beq.n	28310 <mbedtls_sha_update_internal+0xac>
   2827c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   28280:	4605      	mov	r5, r0
   28282:	6e00      	ldr	r0, [r0, #96]	; 0x60
   28284:	d320      	bcc.n	282c8 <mbedtls_sha_update_internal+0x64>
   28286:	f64f 78ff 	movw	r8, #65535	; 0xffff
   2828a:	f105 0a64 	add.w	sl, r5, #100	; 0x64
   2828e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   28290:	1a1a      	subs	r2, r3, r0
   28292:	fbb2 f1f3 	udiv	r1, r2, r3
   28296:	fb03 2211 	mls	r2, r3, r1, r2
   2829a:	2a00      	cmp	r2, #0
   2829c:	d165      	bne.n	2836a <mbedtls_sha_update_internal+0x106>
   2829e:	4283      	cmp	r3, r0
   282a0:	46b9      	mov	r9, r7
   282a2:	f64f 76ff 	movw	r6, #65535	; 0xffff
   282a6:	d072      	beq.n	2838e <mbedtls_sha_update_internal+0x12a>
   282a8:	fbb6 fbf3 	udiv	fp, r6, r3
   282ac:	fb03 fb0b 	mul.w	fp, r3, fp
   282b0:	f1bb 0f00 	cmp.w	fp, #0
   282b4:	d130      	bne.n	28318 <mbedtls_sha_update_internal+0xb4>
   282b6:	2e00      	cmp	r6, #0
   282b8:	d145      	bne.n	28346 <mbedtls_sha_update_internal+0xe2>
   282ba:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   282be:	3cff      	subs	r4, #255	; 0xff
   282c0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   282c4:	4447      	add	r7, r8
   282c6:	d2e2      	bcs.n	2828e <mbedtls_sha_update_internal+0x2a>
   282c8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   282ca:	1a16      	subs	r6, r2, r0
   282cc:	fbb6 f3f2 	udiv	r3, r6, r2
   282d0:	fb02 6613 	mls	r6, r2, r3, r6
   282d4:	42a6      	cmp	r6, r4
   282d6:	bf28      	it	cs
   282d8:	4626      	movcs	r6, r4
   282da:	2e00      	cmp	r6, #0
   282dc:	d175      	bne.n	283ca <mbedtls_sha_update_internal+0x166>
   282de:	4282      	cmp	r2, r0
   282e0:	f000 808d 	beq.w	283fe <mbedtls_sha_update_internal+0x19a>
   282e4:	fbb4 f6f2 	udiv	r6, r4, r2
   282e8:	fb02 f606 	mul.w	r6, r2, r6
   282ec:	b92e      	cbnz	r6, 282fa <mbedtls_sha_update_internal+0x96>
   282ee:	2c00      	cmp	r4, #0
   282f0:	d179      	bne.n	283e6 <mbedtls_sha_update_internal+0x182>
   282f2:	2000      	movs	r0, #0
   282f4:	b025      	add	sp, #148	; 0x94
   282f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   282fa:	2300      	movs	r3, #0
   282fc:	e9cd 3300 	strd	r3, r3, [sp]
   28300:	aa02      	add	r2, sp, #8
   28302:	4631      	mov	r1, r6
   28304:	4638      	mov	r0, r7
   28306:	f000 f99f 	bl	28648 <SetDataBuffersInfo>
   2830a:	2800      	cmp	r0, #0
   2830c:	f000 8095 	beq.w	2843a <mbedtls_sha_update_internal+0x1d6>
   28310:	2001      	movs	r0, #1
   28312:	b025      	add	sp, #148	; 0x94
   28314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28318:	2300      	movs	r3, #0
   2831a:	e9cd 3300 	strd	r3, r3, [sp]
   2831e:	aa02      	add	r2, sp, #8
   28320:	4659      	mov	r1, fp
   28322:	4648      	mov	r0, r9
   28324:	f000 f990 	bl	28648 <SetDataBuffersInfo>
   28328:	2800      	cmp	r0, #0
   2832a:	d1f1      	bne.n	28310 <mbedtls_sha_update_internal+0xac>
   2832c:	a902      	add	r1, sp, #8
   2832e:	465a      	mov	r2, fp
   28330:	4628      	mov	r0, r5
   28332:	f000 f9e5 	bl	28700 <ProcessHashDrv>
   28336:	2800      	cmp	r0, #0
   28338:	d1ea      	bne.n	28310 <mbedtls_sha_update_internal+0xac>
   2833a:	eba6 060b 	sub.w	r6, r6, fp
   2833e:	6e28      	ldr	r0, [r5, #96]	; 0x60
   28340:	44d9      	add	r9, fp
   28342:	2e00      	cmp	r6, #0
   28344:	d0b9      	beq.n	282ba <mbedtls_sha_update_internal+0x56>
   28346:	3019      	adds	r0, #25
   28348:	4649      	mov	r1, r9
   2834a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   2834e:	4632      	mov	r2, r6
   28350:	f7ff facc 	bl	278ec <CC_PalMemCopyPlat>
   28354:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   28358:	6e28      	ldr	r0, [r5, #96]	; 0x60
   2835a:	3cff      	subs	r4, #255	; 0xff
   2835c:	4430      	add	r0, r6
   2835e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   28362:	4447      	add	r7, r8
   28364:	6628      	str	r0, [r5, #96]	; 0x60
   28366:	d292      	bcs.n	2828e <mbedtls_sha_update_internal+0x2a>
   28368:	e7ae      	b.n	282c8 <mbedtls_sha_update_internal+0x64>
   2836a:	4542      	cmp	r2, r8
   2836c:	bf28      	it	cs
   2836e:	4642      	movcs	r2, r8
   28370:	4450      	add	r0, sl
   28372:	4639      	mov	r1, r7
   28374:	4616      	mov	r6, r2
   28376:	f7ff fab9 	bl	278ec <CC_PalMemCopyPlat>
   2837a:	6e28      	ldr	r0, [r5, #96]	; 0x60
   2837c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2837e:	4430      	add	r0, r6
   28380:	4283      	cmp	r3, r0
   28382:	eb07 0906 	add.w	r9, r7, r6
   28386:	6628      	str	r0, [r5, #96]	; 0x60
   28388:	eba8 0606 	sub.w	r6, r8, r6
   2838c:	d18c      	bne.n	282a8 <mbedtls_sha_update_internal+0x44>
   2838e:	2b80      	cmp	r3, #128	; 0x80
   28390:	bf28      	it	cs
   28392:	2380      	movcs	r3, #128	; 0x80
   28394:	461a      	mov	r2, r3
   28396:	4651      	mov	r1, sl
   28398:	a804      	add	r0, sp, #16
   2839a:	f7ff faa7 	bl	278ec <CC_PalMemCopyPlat>
   2839e:	2300      	movs	r3, #0
   283a0:	e9cd 3300 	strd	r3, r3, [sp]
   283a4:	aa02      	add	r2, sp, #8
   283a6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   283a8:	a804      	add	r0, sp, #16
   283aa:	f000 f94d 	bl	28648 <SetDataBuffersInfo>
   283ae:	2800      	cmp	r0, #0
   283b0:	d1ae      	bne.n	28310 <mbedtls_sha_update_internal+0xac>
   283b2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   283b4:	a902      	add	r1, sp, #8
   283b6:	4628      	mov	r0, r5
   283b8:	f000 f9a2 	bl	28700 <ProcessHashDrv>
   283bc:	2800      	cmp	r0, #0
   283be:	d1a7      	bne.n	28310 <mbedtls_sha_update_internal+0xac>
   283c0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   283c2:	6628      	str	r0, [r5, #96]	; 0x60
   283c4:	e770      	b.n	282a8 <mbedtls_sha_update_internal+0x44>
   283c6:	2001      	movs	r0, #1
   283c8:	4770      	bx	lr
   283ca:	f105 0364 	add.w	r3, r5, #100	; 0x64
   283ce:	4639      	mov	r1, r7
   283d0:	4632      	mov	r2, r6
   283d2:	4418      	add	r0, r3
   283d4:	f7ff fa8a 	bl	278ec <CC_PalMemCopyPlat>
   283d8:	6e28      	ldr	r0, [r5, #96]	; 0x60
   283da:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   283dc:	4430      	add	r0, r6
   283de:	1ba4      	subs	r4, r4, r6
   283e0:	4437      	add	r7, r6
   283e2:	6628      	str	r0, [r5, #96]	; 0x60
   283e4:	e77b      	b.n	282de <mbedtls_sha_update_internal+0x7a>
   283e6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   283e8:	3319      	adds	r3, #25
   283ea:	eb05 0083 	add.w	r0, r5, r3, lsl #2
   283ee:	4622      	mov	r2, r4
   283f0:	4639      	mov	r1, r7
   283f2:	f7ff fa7b 	bl	278ec <CC_PalMemCopyPlat>
   283f6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   283f8:	4423      	add	r3, r4
   283fa:	662b      	str	r3, [r5, #96]	; 0x60
   283fc:	e779      	b.n	282f2 <mbedtls_sha_update_internal+0x8e>
   283fe:	2a80      	cmp	r2, #128	; 0x80
   28400:	bf28      	it	cs
   28402:	2280      	movcs	r2, #128	; 0x80
   28404:	f105 0164 	add.w	r1, r5, #100	; 0x64
   28408:	a804      	add	r0, sp, #16
   2840a:	f7ff fa6f 	bl	278ec <CC_PalMemCopyPlat>
   2840e:	2300      	movs	r3, #0
   28410:	e9cd 3300 	strd	r3, r3, [sp]
   28414:	a804      	add	r0, sp, #16
   28416:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   28418:	aa02      	add	r2, sp, #8
   2841a:	f000 f915 	bl	28648 <SetDataBuffersInfo>
   2841e:	2800      	cmp	r0, #0
   28420:	f47f af76 	bne.w	28310 <mbedtls_sha_update_internal+0xac>
   28424:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   28426:	a902      	add	r1, sp, #8
   28428:	4628      	mov	r0, r5
   2842a:	f000 f969 	bl	28700 <ProcessHashDrv>
   2842e:	2800      	cmp	r0, #0
   28430:	f47f af6e 	bne.w	28310 <mbedtls_sha_update_internal+0xac>
   28434:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   28436:	6628      	str	r0, [r5, #96]	; 0x60
   28438:	e754      	b.n	282e4 <mbedtls_sha_update_internal+0x80>
   2843a:	a902      	add	r1, sp, #8
   2843c:	4632      	mov	r2, r6
   2843e:	4628      	mov	r0, r5
   28440:	f000 f95e 	bl	28700 <ProcessHashDrv>
   28444:	2800      	cmp	r0, #0
   28446:	f47f af63 	bne.w	28310 <mbedtls_sha_update_internal+0xac>
   2844a:	4437      	add	r7, r6
   2844c:	1ba4      	subs	r4, r4, r6
   2844e:	e74e      	b.n	282ee <mbedtls_sha_update_internal+0x8a>

00028450 <cc_mbedtls_sha256>:
   28450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28452:	461c      	mov	r4, r3
   28454:	4605      	mov	r5, r0
   28456:	4811      	ldr	r0, [pc, #68]	; (2849c <cc_mbedtls_sha256+0x4c>)
   28458:	460e      	mov	r6, r1
   2845a:	4617      	mov	r7, r2
   2845c:	f7ff fe44 	bl	280e8 <cc_mbedtls_sha256_init>
   28460:	4621      	mov	r1, r4
   28462:	480e      	ldr	r0, [pc, #56]	; (2849c <cc_mbedtls_sha256+0x4c>)
   28464:	f7ff fe5a 	bl	2811c <cc_mbedtls_sha256_starts>
   28468:	4604      	mov	r4, r0
   2846a:	b120      	cbz	r0, 28476 <cc_mbedtls_sha256+0x26>
   2846c:	480b      	ldr	r0, [pc, #44]	; (2849c <cc_mbedtls_sha256+0x4c>)
   2846e:	f7ff fe4f 	bl	28110 <cc_mbedtls_sha256_free>
   28472:	4620      	mov	r0, r4
   28474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28476:	4809      	ldr	r0, [pc, #36]	; (2849c <cc_mbedtls_sha256+0x4c>)
   28478:	4632      	mov	r2, r6
   2847a:	4629      	mov	r1, r5
   2847c:	f7ff fe62 	bl	28144 <cc_mbedtls_sha256_update>
   28480:	4604      	mov	r4, r0
   28482:	2800      	cmp	r0, #0
   28484:	d1f2      	bne.n	2846c <cc_mbedtls_sha256+0x1c>
   28486:	4639      	mov	r1, r7
   28488:	4804      	ldr	r0, [pc, #16]	; (2849c <cc_mbedtls_sha256+0x4c>)
   2848a:	f7ff fe85 	bl	28198 <cc_mbedtls_sha256_finish>
   2848e:	4604      	mov	r4, r0
   28490:	4802      	ldr	r0, [pc, #8]	; (2849c <cc_mbedtls_sha256+0x4c>)
   28492:	f7ff fe3d 	bl	28110 <cc_mbedtls_sha256_free>
   28496:	4620      	mov	r0, r4
   28498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2849a:	bf00      	nop
   2849c:	20004214 	.word	0x20004214

000284a0 <RNG_PLAT_SetUserRngParameters>:
   284a0:	b530      	push	{r4, r5, lr}
   284a2:	b083      	sub	sp, #12
   284a4:	231c      	movs	r3, #28
   284a6:	a901      	add	r1, sp, #4
   284a8:	4605      	mov	r5, r0
   284aa:	9301      	str	r3, [sp, #4]
   284ac:	f000 f832 	bl	28514 <CC_PalTrngParamGet>
   284b0:	4604      	mov	r4, r0
   284b2:	b938      	cbnz	r0, 284c4 <RNG_PLAT_SetUserRngParameters+0x24>
   284b4:	9b01      	ldr	r3, [sp, #4]
   284b6:	2b1c      	cmp	r3, #28
   284b8:	d007      	beq.n	284ca <RNG_PLAT_SetUserRngParameters+0x2a>
   284ba:	4c14      	ldr	r4, [pc, #80]	; (2850c <RNG_PLAT_SetUserRngParameters+0x6c>)
   284bc:	211c      	movs	r1, #28
   284be:	4628      	mov	r0, r5
   284c0:	f7ff fa18 	bl	278f4 <CC_PalMemSetZeroPlat>
   284c4:	4620      	mov	r0, r4
   284c6:	b003      	add	sp, #12
   284c8:	bd30      	pop	{r4, r5, pc}
   284ca:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
   284ce:	1e13      	subs	r3, r2, #0
   284d0:	bf18      	it	ne
   284d2:	2301      	movne	r3, #1
   284d4:	3900      	subs	r1, #0
   284d6:	682a      	ldr	r2, [r5, #0]
   284d8:	bf18      	it	ne
   284da:	2101      	movne	r1, #1
   284dc:	009b      	lsls	r3, r3, #2
   284de:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   284e2:	2a00      	cmp	r2, #0
   284e4:	bf18      	it	ne
   284e6:	f043 0301 	orrne.w	r3, r3, #1
   284ea:	68ea      	ldr	r2, [r5, #12]
   284ec:	2001      	movs	r0, #1
   284ee:	61e8      	str	r0, [r5, #28]
   284f0:	b92a      	cbnz	r2, 284fe <RNG_PLAT_SetUserRngParameters+0x5e>
   284f2:	e9c5 3408 	strd	r3, r4, [r5, #32]
   284f6:	2b00      	cmp	r3, #0
   284f8:	d1e4      	bne.n	284c4 <RNG_PLAT_SetUserRngParameters+0x24>
   284fa:	4c05      	ldr	r4, [pc, #20]	; (28510 <RNG_PLAT_SetUserRngParameters+0x70>)
   284fc:	e7de      	b.n	284bc <RNG_PLAT_SetUserRngParameters+0x1c>
   284fe:	f043 0308 	orr.w	r3, r3, #8
   28502:	4620      	mov	r0, r4
   28504:	e9c5 3408 	strd	r3, r4, [r5, #32]
   28508:	b003      	add	sp, #12
   2850a:	bd30      	pop	{r4, r5, pc}
   2850c:	00f00c37 	.word	0x00f00c37
   28510:	00f00c0e 	.word	0x00f00c0e

00028514 <CC_PalTrngParamGet>:
   28514:	b118      	cbz	r0, 2851e <CC_PalTrngParamGet+0xa>
   28516:	b111      	cbz	r1, 2851e <CC_PalTrngParamGet+0xa>
   28518:	680b      	ldr	r3, [r1, #0]
   2851a:	2b1c      	cmp	r3, #28
   2851c:	d001      	beq.n	28522 <CC_PalTrngParamGet+0xe>
   2851e:	2001      	movs	r0, #1
   28520:	4770      	bx	lr
   28522:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28526:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   2852a:	3201      	adds	r2, #1
   2852c:	bf14      	ite	ne
   2852e:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   28532:	f241 225c 	movweq	r2, #4700	; 0x125c
   28536:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2853a:	6002      	str	r2, [r0, #0]
   2853c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   28540:	3201      	adds	r2, #1
   28542:	bf14      	ite	ne
   28544:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   28548:	f641 1264 	movweq	r2, #6500	; 0x1964
   2854c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28550:	6042      	str	r2, [r0, #4]
   28552:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   28556:	3201      	adds	r2, #1
   28558:	bf14      	ite	ne
   2855a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   2855e:	f640 62d8 	movweq	r2, #3800	; 0xed8
   28562:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28566:	6082      	str	r2, [r0, #8]
   28568:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   2856c:	3201      	adds	r2, #1
   2856e:	bf14      	ite	ne
   28570:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   28574:	f241 3288 	movweq	r2, #5000	; 0x1388
   28578:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2857c:	60c2      	str	r2, [r0, #12]
   2857e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   28582:	3201      	adds	r2, #1
   28584:	bf14      	ite	ne
   28586:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   2858a:	2290      	moveq	r2, #144	; 0x90
   2858c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28590:	6102      	str	r2, [r0, #16]
   28592:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   28596:	3201      	adds	r2, #1
   28598:	bf14      	ite	ne
   2859a:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   2859e:	2251      	moveq	r2, #81	; 0x51
   285a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   285a4:	6142      	str	r2, [r0, #20]
   285a6:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   285aa:	3201      	adds	r2, #1
   285ac:	bf14      	ite	ne
   285ae:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   285b2:	f240 3337 	movweq	r3, #823	; 0x337
   285b6:	6183      	str	r3, [r0, #24]
   285b8:	2000      	movs	r0, #0
   285ba:	4770      	bx	lr

000285bc <LLF_RND_WaitRngInterrupt>:
   285bc:	b508      	push	{r3, lr}
   285be:	4601      	mov	r1, r0
   285c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   285c4:	f7ff f91e 	bl	27804 <CC_HalWaitInterruptRND>
   285c8:	4b03      	ldr	r3, [pc, #12]	; (285d8 <LLF_RND_WaitRngInterrupt+0x1c>)
   285ca:	2200      	movs	r2, #0
   285cc:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   285d0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   285d4:	bd08      	pop	{r3, pc}
   285d6:	bf00      	nop
   285d8:	5002b000 	.word	0x5002b000

000285dc <LLF_RND_GetRoscSampleCnt>:
   285dc:	3801      	subs	r0, #1
   285de:	2807      	cmp	r0, #7
   285e0:	d805      	bhi.n	285ee <LLF_RND_GetRoscSampleCnt+0x12>
   285e2:	e8df f000 	tbb	[pc, r0]
   285e6:	0e10      	.short	0x0e10
   285e8:	04040a04 	.word	0x04040a04
   285ec:	0604      	.short	0x0604
   285ee:	4807      	ldr	r0, [pc, #28]	; (2860c <LLF_RND_GetRoscSampleCnt+0x30>)
   285f0:	4770      	bx	lr
   285f2:	68cb      	ldr	r3, [r1, #12]
   285f4:	624b      	str	r3, [r1, #36]	; 0x24
   285f6:	2000      	movs	r0, #0
   285f8:	4770      	bx	lr
   285fa:	688b      	ldr	r3, [r1, #8]
   285fc:	624b      	str	r3, [r1, #36]	; 0x24
   285fe:	2000      	movs	r0, #0
   28600:	4770      	bx	lr
   28602:	684b      	ldr	r3, [r1, #4]
   28604:	e7f6      	b.n	285f4 <LLF_RND_GetRoscSampleCnt+0x18>
   28606:	680b      	ldr	r3, [r1, #0]
   28608:	e7f4      	b.n	285f4 <LLF_RND_GetRoscSampleCnt+0x18>
   2860a:	bf00      	nop
   2860c:	00f10c31 	.word	0x00f10c31

00028610 <LLF_RND_GetFastestRosc>:
   28610:	680b      	ldr	r3, [r1, #0]
   28612:	e002      	b.n	2861a <LLF_RND_GetFastestRosc+0xa>
   28614:	2b08      	cmp	r3, #8
   28616:	600b      	str	r3, [r1, #0]
   28618:	d806      	bhi.n	28628 <LLF_RND_GetFastestRosc+0x18>
   2861a:	6a02      	ldr	r2, [r0, #32]
   2861c:	4213      	tst	r3, r2
   2861e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   28622:	d0f7      	beq.n	28614 <LLF_RND_GetFastestRosc+0x4>
   28624:	2000      	movs	r0, #0
   28626:	4770      	bx	lr
   28628:	4800      	ldr	r0, [pc, #0]	; (2862c <LLF_RND_GetFastestRosc+0x1c>)
   2862a:	4770      	bx	lr
   2862c:	00f10c31 	.word	0x00f10c31

00028630 <LLF_RND_TurnOffTrng>:
   28630:	4b04      	ldr	r3, [pc, #16]	; (28644 <LLF_RND_TurnOffTrng+0x14>)
   28632:	2200      	movs	r2, #0
   28634:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   28638:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2863c:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   28640:	f7ff b8c6 	b.w	277d0 <CC_HalClearInterruptBit>
   28644:	5002b000 	.word	0x5002b000

00028648 <SetDataBuffersInfo>:
   28648:	b5f0      	push	{r4, r5, r6, r7, lr}
   2864a:	b083      	sub	sp, #12
   2864c:	461d      	mov	r5, r3
   2864e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   28652:	f04f 0300 	mov.w	r3, #0
   28656:	f88d 3007 	strb.w	r3, [sp, #7]
   2865a:	d324      	bcc.n	286a6 <SetDataBuffersInfo+0x5e>
   2865c:	468c      	mov	ip, r1
   2865e:	4484      	add	ip, r0
   28660:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   28664:	4604      	mov	r4, r0
   28666:	d81e      	bhi.n	286a6 <SetDataBuffersInfo+0x5e>
   28668:	4617      	mov	r7, r2
   2866a:	f10d 0307 	add.w	r3, sp, #7
   2866e:	2201      	movs	r2, #1
   28670:	f000 fe64 	bl	2933c <CC_PalDataBufferAttrGet>
   28674:	4606      	mov	r6, r0
   28676:	b9b0      	cbnz	r0, 286a6 <SetDataBuffersInfo+0x5e>
   28678:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2867a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2867e:	603c      	str	r4, [r7, #0]
   28680:	713b      	strb	r3, [r7, #4]
   28682:	b192      	cbz	r2, 286aa <SetDataBuffersInfo+0x62>
   28684:	b14d      	cbz	r5, 2869a <SetDataBuffersInfo+0x52>
   28686:	4602      	mov	r2, r0
   28688:	9908      	ldr	r1, [sp, #32]
   2868a:	f10d 0307 	add.w	r3, sp, #7
   2868e:	4628      	mov	r0, r5
   28690:	f000 fe54 	bl	2933c <CC_PalDataBufferAttrGet>
   28694:	b938      	cbnz	r0, 286a6 <SetDataBuffersInfo+0x5e>
   28696:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2869a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2869c:	4630      	mov	r0, r6
   2869e:	6015      	str	r5, [r2, #0]
   286a0:	7113      	strb	r3, [r2, #4]
   286a2:	b003      	add	sp, #12
   286a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   286a6:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   286aa:	4630      	mov	r0, r6
   286ac:	b003      	add	sp, #12
   286ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000286b0 <InitHashDrv>:
   286b0:	b1d8      	cbz	r0, 286ea <InitHashDrv+0x3a>
   286b2:	b508      	push	{r3, lr}
   286b4:	6803      	ldr	r3, [r0, #0]
   286b6:	2b01      	cmp	r3, #1
   286b8:	d004      	beq.n	286c4 <InitHashDrv+0x14>
   286ba:	2b02      	cmp	r3, #2
   286bc:	d00f      	beq.n	286de <InitHashDrv+0x2e>
   286be:	b143      	cbz	r3, 286d2 <InitHashDrv+0x22>
   286c0:	480b      	ldr	r0, [pc, #44]	; (286f0 <InitHashDrv+0x40>)
   286c2:	bd08      	pop	{r3, pc}
   286c4:	490b      	ldr	r1, [pc, #44]	; (286f4 <InitHashDrv+0x44>)
   286c6:	2220      	movs	r2, #32
   286c8:	3008      	adds	r0, #8
   286ca:	f7ff f90f 	bl	278ec <CC_PalMemCopyPlat>
   286ce:	2000      	movs	r0, #0
   286d0:	bd08      	pop	{r3, pc}
   286d2:	4909      	ldr	r1, [pc, #36]	; (286f8 <InitHashDrv+0x48>)
   286d4:	2214      	movs	r2, #20
   286d6:	3008      	adds	r0, #8
   286d8:	f7ff f908 	bl	278ec <CC_PalMemCopyPlat>
   286dc:	e7f7      	b.n	286ce <InitHashDrv+0x1e>
   286de:	4907      	ldr	r1, [pc, #28]	; (286fc <InitHashDrv+0x4c>)
   286e0:	2220      	movs	r2, #32
   286e2:	3008      	adds	r0, #8
   286e4:	f7ff f902 	bl	278ec <CC_PalMemCopyPlat>
   286e8:	e7f1      	b.n	286ce <InitHashDrv+0x1e>
   286ea:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   286ee:	4770      	bx	lr
   286f0:	00f30001 	.word	0x00f30001
   286f4:	00030984 	.word	0x00030984
   286f8:	000309c4 	.word	0x000309c4
   286fc:	000309a4 	.word	0x000309a4

00028700 <ProcessHashDrv>:
   28700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28704:	2900      	cmp	r1, #0
   28706:	f000 80f9 	beq.w	288fc <ProcessHashDrv+0x1fc>
   2870a:	4604      	mov	r4, r0
   2870c:	2800      	cmp	r0, #0
   2870e:	f000 80f9 	beq.w	28904 <ProcessHashDrv+0x204>
   28712:	6803      	ldr	r3, [r0, #0]
   28714:	4690      	mov	r8, r2
   28716:	460f      	mov	r7, r1
   28718:	2b00      	cmp	r3, #0
   2871a:	f000 80c3 	beq.w	288a4 <ProcessHashDrv+0x1a4>
   2871e:	3b01      	subs	r3, #1
   28720:	2b01      	cmp	r3, #1
   28722:	f200 80d7 	bhi.w	288d4 <ProcessHashDrv+0x1d4>
   28726:	4879      	ldr	r0, [pc, #484]	; (2890c <ProcessHashDrv+0x20c>)
   28728:	f04f 31ff 	mov.w	r1, #4294967295
   2872c:	f04f 0902 	mov.w	r9, #2
   28730:	f7ff f8f8 	bl	27924 <CC_PalMutexLock>
   28734:	2800      	cmp	r0, #0
   28736:	f040 80bf 	bne.w	288b8 <ProcessHashDrv+0x1b8>
   2873a:	2000      	movs	r0, #0
   2873c:	f7ff f922 	bl	27984 <CC_PalPowerSaveModeSelect>
   28740:	4606      	mov	r6, r0
   28742:	2800      	cmp	r0, #0
   28744:	f040 80c2 	bne.w	288cc <ProcessHashDrv+0x1cc>
   28748:	4a71      	ldr	r2, [pc, #452]	; (28910 <ProcessHashDrv+0x210>)
   2874a:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   2874e:	2b00      	cmp	r3, #0
   28750:	d1fb      	bne.n	2874a <ProcessHashDrv+0x4a>
   28752:	4d6f      	ldr	r5, [pc, #444]	; (28910 <ProcessHashDrv+0x210>)
   28754:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   28758:	2b00      	cmp	r3, #0
   2875a:	d1fb      	bne.n	28754 <ProcessHashDrv+0x54>
   2875c:	f04f 30ff 	mov.w	r0, #4294967295
   28760:	f7ff f836 	bl	277d0 <CC_HalClearInterruptBit>
   28764:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   28768:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   2876c:	f7ff f83e 	bl	277ec <CC_HalMaskInterrupt>
   28770:	2301      	movs	r3, #1
   28772:	2207      	movs	r2, #7
   28774:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   28778:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   2877c:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   28780:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   28782:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   28786:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   28788:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   2878c:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   28790:	6823      	ldr	r3, [r4, #0]
   28792:	b15b      	cbz	r3, 287ac <ProcessHashDrv+0xac>
   28794:	3b01      	subs	r3, #1
   28796:	2b01      	cmp	r3, #1
   28798:	d818      	bhi.n	287cc <ProcessHashDrv+0xcc>
   2879a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2879c:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   287a0:	6a23      	ldr	r3, [r4, #32]
   287a2:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   287a6:	69e3      	ldr	r3, [r4, #28]
   287a8:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   287ac:	4b58      	ldr	r3, [pc, #352]	; (28910 <ProcessHashDrv+0x210>)
   287ae:	69a2      	ldr	r2, [r4, #24]
   287b0:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   287b4:	6962      	ldr	r2, [r4, #20]
   287b6:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   287ba:	6922      	ldr	r2, [r4, #16]
   287bc:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   287c0:	68e2      	ldr	r2, [r4, #12]
   287c2:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   287c6:	68a2      	ldr	r2, [r4, #8]
   287c8:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   287cc:	4a50      	ldr	r2, [pc, #320]	; (28910 <ProcessHashDrv+0x210>)
   287ce:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   287d2:	2b00      	cmp	r3, #0
   287d4:	d1fb      	bne.n	287ce <ProcessHashDrv+0xce>
   287d6:	f1b8 0f00 	cmp.w	r8, #0
   287da:	d05f      	beq.n	2889c <ProcessHashDrv+0x19c>
   287dc:	6863      	ldr	r3, [r4, #4]
   287de:	2b01      	cmp	r3, #1
   287e0:	bf08      	it	eq
   287e2:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   287e6:	4b4a      	ldr	r3, [pc, #296]	; (28910 <ProcessHashDrv+0x210>)
   287e8:	683a      	ldr	r2, [r7, #0]
   287ea:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   287ee:	2040      	movs	r0, #64	; 0x40
   287f0:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   287f4:	f7ff f800 	bl	277f8 <CC_HalWaitInterrupt>
   287f8:	4606      	mov	r6, r0
   287fa:	4a45      	ldr	r2, [pc, #276]	; (28910 <ProcessHashDrv+0x210>)
   287fc:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   28800:	2b00      	cmp	r3, #0
   28802:	d1fb      	bne.n	287fc <ProcessHashDrv+0xfc>
   28804:	4a42      	ldr	r2, [pc, #264]	; (28910 <ProcessHashDrv+0x210>)
   28806:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   2880a:	2b00      	cmp	r3, #0
   2880c:	d1fb      	bne.n	28806 <ProcessHashDrv+0x106>
   2880e:	6823      	ldr	r3, [r4, #0]
   28810:	b15b      	cbz	r3, 2882a <ProcessHashDrv+0x12a>
   28812:	3b01      	subs	r3, #1
   28814:	2b01      	cmp	r3, #1
   28816:	d818      	bhi.n	2884a <ProcessHashDrv+0x14a>
   28818:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   2881c:	6263      	str	r3, [r4, #36]	; 0x24
   2881e:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   28822:	6223      	str	r3, [r4, #32]
   28824:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   28828:	61e3      	str	r3, [r4, #28]
   2882a:	4b39      	ldr	r3, [pc, #228]	; (28910 <ProcessHashDrv+0x210>)
   2882c:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   28830:	61a2      	str	r2, [r4, #24]
   28832:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   28836:	6162      	str	r2, [r4, #20]
   28838:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   2883c:	6122      	str	r2, [r4, #16]
   2883e:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   28842:	60e2      	str	r2, [r4, #12]
   28844:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   28848:	60a3      	str	r3, [r4, #8]
   2884a:	4a31      	ldr	r2, [pc, #196]	; (28910 <ProcessHashDrv+0x210>)
   2884c:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   28850:	64a1      	str	r1, [r4, #72]	; 0x48
   28852:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   28856:	64e1      	str	r1, [r4, #76]	; 0x4c
   28858:	2300      	movs	r3, #0
   2885a:	2101      	movs	r1, #1
   2885c:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   28860:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   28864:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   28868:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2886c:	2b00      	cmp	r3, #0
   2886e:	d1fb      	bne.n	28868 <ProcessHashDrv+0x168>
   28870:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   28874:	2e00      	cmp	r6, #0
   28876:	d13b      	bne.n	288f0 <ProcessHashDrv+0x1f0>
   28878:	4b25      	ldr	r3, [pc, #148]	; (28910 <ProcessHashDrv+0x210>)
   2887a:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   2887e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   28882:	f7fe ffb3 	bl	277ec <CC_HalMaskInterrupt>
   28886:	2001      	movs	r0, #1
   28888:	f7ff f87c 	bl	27984 <CC_PalPowerSaveModeSelect>
   2888c:	bb60      	cbnz	r0, 288e8 <ProcessHashDrv+0x1e8>
   2888e:	481f      	ldr	r0, [pc, #124]	; (2890c <ProcessHashDrv+0x20c>)
   28890:	f7ff f850 	bl	27934 <CC_PalMutexUnlock>
   28894:	bb10      	cbnz	r0, 288dc <ProcessHashDrv+0x1dc>
   28896:	4630      	mov	r0, r6
   28898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2889c:	2304      	movs	r3, #4
   2889e:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   288a2:	e7aa      	b.n	287fa <ProcessHashDrv+0xfa>
   288a4:	4819      	ldr	r0, [pc, #100]	; (2890c <ProcessHashDrv+0x20c>)
   288a6:	f04f 31ff 	mov.w	r1, #4294967295
   288aa:	f04f 0901 	mov.w	r9, #1
   288ae:	f7ff f839 	bl	27924 <CC_PalMutexLock>
   288b2:	2800      	cmp	r0, #0
   288b4:	f43f af41 	beq.w	2873a <ProcessHashDrv+0x3a>
   288b8:	4816      	ldr	r0, [pc, #88]	; (28914 <ProcessHashDrv+0x214>)
   288ba:	f7fe f927 	bl	26b0c <CC_PalAbort>
   288be:	2000      	movs	r0, #0
   288c0:	f7ff f860 	bl	27984 <CC_PalPowerSaveModeSelect>
   288c4:	4606      	mov	r6, r0
   288c6:	2800      	cmp	r0, #0
   288c8:	f43f af3e 	beq.w	28748 <ProcessHashDrv+0x48>
   288cc:	4812      	ldr	r0, [pc, #72]	; (28918 <ProcessHashDrv+0x218>)
   288ce:	f7fe f91d 	bl	26b0c <CC_PalAbort>
   288d2:	e739      	b.n	28748 <ProcessHashDrv+0x48>
   288d4:	4e11      	ldr	r6, [pc, #68]	; (2891c <ProcessHashDrv+0x21c>)
   288d6:	4630      	mov	r0, r6
   288d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   288dc:	4810      	ldr	r0, [pc, #64]	; (28920 <ProcessHashDrv+0x220>)
   288de:	f7fe f915 	bl	26b0c <CC_PalAbort>
   288e2:	4630      	mov	r0, r6
   288e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   288e8:	480e      	ldr	r0, [pc, #56]	; (28924 <ProcessHashDrv+0x224>)
   288ea:	f7fe f90f 	bl	26b0c <CC_PalAbort>
   288ee:	e7ce      	b.n	2888e <ProcessHashDrv+0x18e>
   288f0:	2110      	movs	r1, #16
   288f2:	f104 0008 	add.w	r0, r4, #8
   288f6:	f7fe fffd 	bl	278f4 <CC_PalMemSetZeroPlat>
   288fa:	e7bd      	b.n	28878 <ProcessHashDrv+0x178>
   288fc:	4e0a      	ldr	r6, [pc, #40]	; (28928 <ProcessHashDrv+0x228>)
   288fe:	4630      	mov	r0, r6
   28900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   28904:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   28908:	e7c5      	b.n	28896 <ProcessHashDrv+0x196>
   2890a:	bf00      	nop
   2890c:	200007c4 	.word	0x200007c4
   28910:	5002b000 	.word	0x5002b000
   28914:	000308b8 	.word	0x000308b8
   28918:	000308d0 	.word	0x000308d0
   2891c:	00f30001 	.word	0x00f30001
   28920:	00030910 	.word	0x00030910
   28924:	000308f0 	.word	0x000308f0
   28928:	00f30003 	.word	0x00f30003

0002892c <FinishHashDrv>:
   2892c:	b398      	cbz	r0, 28996 <FinishHashDrv+0x6a>
   2892e:	b470      	push	{r4, r5, r6}
   28930:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   28934:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   28938:	ba26      	rev	r6, r4
   2893a:	ba0d      	rev	r5, r1
   2893c:	ba14      	rev	r4, r2
   2893e:	ba19      	rev	r1, r3
   28940:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   28944:	ba12      	rev	r2, r2
   28946:	e9c0 4104 	strd	r4, r1, [r0, #16]
   2894a:	6182      	str	r2, [r0, #24]
   2894c:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   28950:	e9c0 6502 	strd	r6, r5, [r0, #8]
   28954:	ba1b      	rev	r3, r3
   28956:	ba25      	rev	r5, r4
   28958:	e9c0 3507 	strd	r3, r5, [r0, #28]
   2895c:	ba14      	rev	r4, r2
   2895e:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   28962:	6a81      	ldr	r1, [r0, #40]	; 0x28
   28964:	ba12      	rev	r2, r2
   28966:	ba09      	rev	r1, r1
   28968:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   2896c:	62c2      	str	r2, [r0, #44]	; 0x2c
   2896e:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   28972:	ba1b      	rev	r3, r3
   28974:	ba25      	rev	r5, r4
   28976:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   2897a:	ba14      	rev	r4, r2
   2897c:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   28980:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   28982:	ba12      	rev	r2, r2
   28984:	ba09      	rev	r1, r1
   28986:	ba1b      	rev	r3, r3
   28988:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   2898c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   28990:	2000      	movs	r0, #0
   28992:	bc70      	pop	{r4, r5, r6}
   28994:	4770      	bx	lr
   28996:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   2899a:	4770      	bx	lr

0002899c <LoadAesKey>:
   2899c:	2800      	cmp	r0, #0
   2899e:	d047      	beq.n	28a30 <LoadAesKey+0x94>
   289a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   289a4:	2b00      	cmp	r3, #0
   289a6:	d034      	beq.n	28a12 <LoadAesKey+0x76>
   289a8:	2b03      	cmp	r3, #3
   289aa:	b510      	push	{r4, lr}
   289ac:	d013      	beq.n	289d6 <LoadAesKey+0x3a>
   289ae:	4822      	ldr	r0, [pc, #136]	; (28a38 <LoadAesKey+0x9c>)
   289b0:	4c22      	ldr	r4, [pc, #136]	; (28a3c <LoadAesKey+0xa0>)
   289b2:	6822      	ldr	r2, [r4, #0]
   289b4:	4b22      	ldr	r3, [pc, #136]	; (28a40 <LoadAesKey+0xa4>)
   289b6:	6812      	ldr	r2, [r2, #0]
   289b8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   289bc:	6822      	ldr	r2, [r4, #0]
   289be:	6852      	ldr	r2, [r2, #4]
   289c0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   289c4:	6822      	ldr	r2, [r4, #0]
   289c6:	6892      	ldr	r2, [r2, #8]
   289c8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   289cc:	6822      	ldr	r2, [r4, #0]
   289ce:	68d2      	ldr	r2, [r2, #12]
   289d0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   289d4:	bd10      	pop	{r4, pc}
   289d6:	6b01      	ldr	r1, [r0, #48]	; 0x30
   289d8:	6c00      	ldr	r0, [r0, #64]	; 0x40
   289da:	4c18      	ldr	r4, [pc, #96]	; (28a3c <LoadAesKey+0xa0>)
   289dc:	f000 fba8 	bl	29130 <kmu_validate_kdr_slot_and_size>
   289e0:	2800      	cmp	r0, #0
   289e2:	d1e6      	bne.n	289b2 <LoadAesKey+0x16>
   289e4:	6822      	ldr	r2, [r4, #0]
   289e6:	4b16      	ldr	r3, [pc, #88]	; (28a40 <LoadAesKey+0xa4>)
   289e8:	6812      	ldr	r2, [r2, #0]
   289ea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   289ee:	6822      	ldr	r2, [r4, #0]
   289f0:	6852      	ldr	r2, [r2, #4]
   289f2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   289f6:	6822      	ldr	r2, [r4, #0]
   289f8:	6892      	ldr	r2, [r2, #8]
   289fa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   289fe:	6822      	ldr	r2, [r4, #0]
   28a00:	68d2      	ldr	r2, [r2, #12]
   28a02:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   28a06:	f000 fba1 	bl	2914c <kmu_use_kdr_key>
   28a0a:	2800      	cmp	r0, #0
   28a0c:	d1d1      	bne.n	289b2 <LoadAesKey+0x16>
   28a0e:	2000      	movs	r0, #0
   28a10:	bd10      	pop	{r4, pc}
   28a12:	4b0b      	ldr	r3, [pc, #44]	; (28a40 <LoadAesKey+0xa4>)
   28a14:	6902      	ldr	r2, [r0, #16]
   28a16:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   28a1a:	6942      	ldr	r2, [r0, #20]
   28a1c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   28a20:	6982      	ldr	r2, [r0, #24]
   28a22:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   28a26:	69c2      	ldr	r2, [r0, #28]
   28a28:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   28a2c:	2000      	movs	r0, #0
   28a2e:	4770      	bx	lr
   28a30:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   28a34:	4770      	bx	lr
   28a36:	bf00      	nop
   28a38:	00f10009 	.word	0x00f10009
   28a3c:	200007b0 	.word	0x200007b0
   28a40:	5002b000 	.word	0x5002b000

00028a44 <InitAes.part.0>:
   28a44:	4a37      	ldr	r2, [pc, #220]	; (28b24 <InitAes.part.0+0xe0>)
   28a46:	b538      	push	{r3, r4, r5, lr}
   28a48:	4604      	mov	r4, r0
   28a4a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   28a4e:	2b00      	cmp	r3, #0
   28a50:	d1fb      	bne.n	28a4a <InitAes.part.0+0x6>
   28a52:	4a34      	ldr	r2, [pc, #208]	; (28b24 <InitAes.part.0+0xe0>)
   28a54:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   28a58:	2b00      	cmp	r3, #0
   28a5a:	d1fb      	bne.n	28a54 <InitAes.part.0+0x10>
   28a5c:	4a31      	ldr	r2, [pc, #196]	; (28b24 <InitAes.part.0+0xe0>)
   28a5e:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   28a62:	2b00      	cmp	r3, #0
   28a64:	d1fb      	bne.n	28a5e <InitAes.part.0+0x1a>
   28a66:	4a2f      	ldr	r2, [pc, #188]	; (28b24 <InitAes.part.0+0xe0>)
   28a68:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   28a6c:	2b00      	cmp	r3, #0
   28a6e:	d1fb      	bne.n	28a68 <InitAes.part.0+0x24>
   28a70:	4a2c      	ldr	r2, [pc, #176]	; (28b24 <InitAes.part.0+0xe0>)
   28a72:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   28a76:	2b00      	cmp	r3, #0
   28a78:	d1fb      	bne.n	28a72 <InitAes.part.0+0x2e>
   28a7a:	4d2a      	ldr	r5, [pc, #168]	; (28b24 <InitAes.part.0+0xe0>)
   28a7c:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   28a80:	2b00      	cmp	r3, #0
   28a82:	d1fb      	bne.n	28a7c <InitAes.part.0+0x38>
   28a84:	f04f 30ff 	mov.w	r0, #4294967295
   28a88:	f7fe fea2 	bl	277d0 <CC_HalClearInterruptBit>
   28a8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   28a8e:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   28a92:	f023 0304 	bic.w	r3, r3, #4
   28a96:	2b03      	cmp	r3, #3
   28a98:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   28a9a:	d039      	beq.n	28b10 <InitAes.part.0+0xcc>
   28a9c:	2b01      	cmp	r3, #1
   28a9e:	bf0c      	ite	eq
   28aa0:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   28aa4:	f020 0020 	bicne.w	r0, r0, #32
   28aa8:	f7fe fea0 	bl	277ec <CC_HalMaskInterrupt>
   28aac:	4a1d      	ldr	r2, [pc, #116]	; (28b24 <InitAes.part.0+0xe0>)
   28aae:	2301      	movs	r3, #1
   28ab0:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   28ab4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   28ab8:	2b00      	cmp	r3, #0
   28aba:	d1fb      	bne.n	28ab4 <InitAes.part.0+0x70>
   28abc:	4a19      	ldr	r2, [pc, #100]	; (28b24 <InitAes.part.0+0xe0>)
   28abe:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   28ac2:	2b00      	cmp	r3, #0
   28ac4:	d1fb      	bne.n	28abe <InitAes.part.0+0x7a>
   28ac6:	4917      	ldr	r1, [pc, #92]	; (28b24 <InitAes.part.0+0xe0>)
   28ac8:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   28acc:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   28ad0:	2b00      	cmp	r3, #0
   28ad2:	d1fb      	bne.n	28acc <InitAes.part.0+0x88>
   28ad4:	4a13      	ldr	r2, [pc, #76]	; (28b24 <InitAes.part.0+0xe0>)
   28ad6:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   28ada:	2b00      	cmp	r3, #0
   28adc:	d1fb      	bne.n	28ad6 <InitAes.part.0+0x92>
   28ade:	6b62      	ldr	r2, [r4, #52]	; 0x34
   28ae0:	f022 0104 	bic.w	r1, r2, #4
   28ae4:	2903      	cmp	r1, #3
   28ae6:	bf18      	it	ne
   28ae8:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   28aea:	490e      	ldr	r1, [pc, #56]	; (28b24 <InitAes.part.0+0xe0>)
   28aec:	ea4f 0282 	mov.w	r2, r2, lsl #2
   28af0:	bf18      	it	ne
   28af2:	f003 0301 	andne.w	r3, r3, #1
   28af6:	f002 021c 	and.w	r2, r2, #28
   28afa:	431a      	orrs	r2, r3
   28afc:	f8c1 24c0 	str.w	r2, [r1, #1216]	; 0x4c0
   28b00:	6b63      	ldr	r3, [r4, #52]	; 0x34
   28b02:	2b07      	cmp	r3, #7
   28b04:	bf04      	itt	eq
   28b06:	2301      	moveq	r3, #1
   28b08:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   28b0c:	2000      	movs	r0, #0
   28b0e:	bd38      	pop	{r3, r4, r5, pc}
   28b10:	2b01      	cmp	r3, #1
   28b12:	bf0c      	ite	eq
   28b14:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   28b18:	f020 0010 	bicne.w	r0, r0, #16
   28b1c:	f7fe fe66 	bl	277ec <CC_HalMaskInterrupt>
   28b20:	e7c4      	b.n	28aac <InitAes.part.0+0x68>
   28b22:	bf00      	nop
   28b24:	5002b000 	.word	0x5002b000

00028b28 <write_invalid_key>:
   28b28:	4a09      	ldr	r2, [pc, #36]	; (28b50 <write_invalid_key+0x28>)
   28b2a:	4b0a      	ldr	r3, [pc, #40]	; (28b54 <write_invalid_key+0x2c>)
   28b2c:	6811      	ldr	r1, [r2, #0]
   28b2e:	6809      	ldr	r1, [r1, #0]
   28b30:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   28b34:	6811      	ldr	r1, [r2, #0]
   28b36:	6849      	ldr	r1, [r1, #4]
   28b38:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   28b3c:	6811      	ldr	r1, [r2, #0]
   28b3e:	6889      	ldr	r1, [r1, #8]
   28b40:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   28b44:	6812      	ldr	r2, [r2, #0]
   28b46:	68d2      	ldr	r2, [r2, #12]
   28b48:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   28b4c:	4770      	bx	lr
   28b4e:	bf00      	nop
   28b50:	200007b0 	.word	0x200007b0
   28b54:	5002b000 	.word	0x5002b000

00028b58 <ProcessAesDrv>:
   28b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b5c:	b085      	sub	sp, #20
   28b5e:	2900      	cmp	r1, #0
   28b60:	f000 80ec 	beq.w	28d3c <ProcessAesDrv+0x1e4>
   28b64:	4690      	mov	r8, r2
   28b66:	2a00      	cmp	r2, #0
   28b68:	f000 80e8 	beq.w	28d3c <ProcessAesDrv+0x1e4>
   28b6c:	4605      	mov	r5, r0
   28b6e:	2800      	cmp	r0, #0
   28b70:	f000 8129 	beq.w	28dc6 <ProcessAesDrv+0x26e>
   28b74:	4699      	mov	r9, r3
   28b76:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   28b78:	460e      	mov	r6, r1
   28b7a:	2b00      	cmp	r3, #0
   28b7c:	d152      	bne.n	28c24 <ProcessAesDrv+0xcc>
   28b7e:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   28b82:	d254      	bcs.n	28c2e <ProcessAesDrv+0xd6>
   28b84:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   28b88:	2b04      	cmp	r3, #4
   28b8a:	f000 80ff 	beq.w	28d8c <ProcessAesDrv+0x234>
   28b8e:	2700      	movs	r7, #0
   28b90:	48ad      	ldr	r0, [pc, #692]	; (28e48 <ProcessAesDrv+0x2f0>)
   28b92:	f04f 31ff 	mov.w	r1, #4294967295
   28b96:	f7fe fec5 	bl	27924 <CC_PalMutexLock>
   28b9a:	2800      	cmp	r0, #0
   28b9c:	f040 80d5 	bne.w	28d4a <ProcessAesDrv+0x1f2>
   28ba0:	2000      	movs	r0, #0
   28ba2:	f7fe feef 	bl	27984 <CC_PalPowerSaveModeSelect>
   28ba6:	2800      	cmp	r0, #0
   28ba8:	f040 80d8 	bne.w	28d5c <ProcessAesDrv+0x204>
   28bac:	48a7      	ldr	r0, [pc, #668]	; (28e4c <ProcessAesDrv+0x2f4>)
   28bae:	2301      	movs	r3, #1
   28bb0:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   28bb4:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   28bb8:	2c00      	cmp	r4, #0
   28bba:	d1fb      	bne.n	28bb4 <ProcessAesDrv+0x5c>
   28bbc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   28bbe:	2b03      	cmp	r3, #3
   28bc0:	dc3a      	bgt.n	28c38 <ProcessAesDrv+0xe0>
   28bc2:	2b00      	cmp	r3, #0
   28bc4:	da3b      	bge.n	28c3e <ProcessAesDrv+0xe6>
   28bc6:	4ca2      	ldr	r4, [pc, #648]	; (28e50 <ProcessAesDrv+0x2f8>)
   28bc8:	4aa0      	ldr	r2, [pc, #640]	; (28e4c <ProcessAesDrv+0x2f4>)
   28bca:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   28bce:	2b00      	cmp	r3, #0
   28bd0:	d1fb      	bne.n	28bca <ProcessAesDrv+0x72>
   28bd2:	2f00      	cmp	r7, #0
   28bd4:	f040 80d1 	bne.w	28d7a <ProcessAesDrv+0x222>
   28bd8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   28bda:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   28bdc:	f023 0304 	bic.w	r3, r3, #4
   28be0:	2b03      	cmp	r3, #3
   28be2:	4b9a      	ldr	r3, [pc, #616]	; (28e4c <ProcessAesDrv+0x2f4>)
   28be4:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   28be8:	f000 809f 	beq.w	28d2a <ProcessAesDrv+0x1d2>
   28bec:	2a01      	cmp	r2, #1
   28bee:	bf0c      	ite	eq
   28bf0:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   28bf4:	f040 0020 	orrne.w	r0, r0, #32
   28bf8:	f7fe fdf8 	bl	277ec <CC_HalMaskInterrupt>
   28bfc:	4b93      	ldr	r3, [pc, #588]	; (28e4c <ProcessAesDrv+0x2f4>)
   28bfe:	2200      	movs	r2, #0
   28c00:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   28c04:	2001      	movs	r0, #1
   28c06:	f7fe febd 	bl	27984 <CC_PalPowerSaveModeSelect>
   28c0a:	2800      	cmp	r0, #0
   28c0c:	f040 80b1 	bne.w	28d72 <ProcessAesDrv+0x21a>
   28c10:	488d      	ldr	r0, [pc, #564]	; (28e48 <ProcessAesDrv+0x2f0>)
   28c12:	f7fe fe8f 	bl	27934 <CC_PalMutexUnlock>
   28c16:	2800      	cmp	r0, #0
   28c18:	f040 80a4 	bne.w	28d64 <ProcessAesDrv+0x20c>
   28c1c:	4620      	mov	r0, r4
   28c1e:	b005      	add	sp, #20
   28c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c24:	2b01      	cmp	r3, #1
   28c26:	d1ad      	bne.n	28b84 <ProcessAesDrv+0x2c>
   28c28:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   28c2c:	d3aa      	bcc.n	28b84 <ProcessAesDrv+0x2c>
   28c2e:	4c89      	ldr	r4, [pc, #548]	; (28e54 <ProcessAesDrv+0x2fc>)
   28c30:	4620      	mov	r0, r4
   28c32:	b005      	add	sp, #20
   28c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c38:	3b06      	subs	r3, #6
   28c3a:	2b01      	cmp	r3, #1
   28c3c:	d8c3      	bhi.n	28bc6 <ProcessAesDrv+0x6e>
   28c3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   28c40:	2b01      	cmp	r3, #1
   28c42:	f200 80be 	bhi.w	28dc2 <ProcessAesDrv+0x26a>
   28c46:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   28c48:	2b01      	cmp	r3, #1
   28c4a:	d87c      	bhi.n	28d46 <ProcessAesDrv+0x1ee>
   28c4c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   28c4e:	2b01      	cmp	r3, #1
   28c50:	f200 80e8 	bhi.w	28e24 <ProcessAesDrv+0x2cc>
   28c54:	4628      	mov	r0, r5
   28c56:	f7ff fef5 	bl	28a44 <InitAes.part.0>
   28c5a:	4604      	mov	r4, r0
   28c5c:	2800      	cmp	r0, #0
   28c5e:	d1b3      	bne.n	28bc8 <ProcessAesDrv+0x70>
   28c60:	4628      	mov	r0, r5
   28c62:	f7ff fe9b 	bl	2899c <LoadAesKey>
   28c66:	4604      	mov	r4, r0
   28c68:	2800      	cmp	r0, #0
   28c6a:	d1ad      	bne.n	28bc8 <ProcessAesDrv+0x70>
   28c6c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   28c6e:	2b07      	cmp	r3, #7
   28c70:	d8a9      	bhi.n	28bc6 <ProcessAesDrv+0x6e>
   28c72:	2201      	movs	r2, #1
   28c74:	409a      	lsls	r2, r3
   28c76:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   28c7a:	f040 80d5 	bne.w	28e28 <ProcessAesDrv+0x2d0>
   28c7e:	f012 0f44 	tst.w	r2, #68	; 0x44
   28c82:	f040 80ba 	bne.w	28dfa <ProcessAesDrv+0x2a2>
   28c86:	07d2      	lsls	r2, r2, #31
   28c88:	d59d      	bpl.n	28bc6 <ProcessAesDrv+0x6e>
   28c8a:	f023 0304 	bic.w	r3, r3, #4
   28c8e:	2b03      	cmp	r3, #3
   28c90:	6832      	ldr	r2, [r6, #0]
   28c92:	d00d      	beq.n	28cb0 <ProcessAesDrv+0x158>
   28c94:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   28c96:	f8d8 1000 	ldr.w	r1, [r8]
   28c9a:	2b01      	cmp	r3, #1
   28c9c:	4b6b      	ldr	r3, [pc, #428]	; (28e4c <ProcessAesDrv+0x2f4>)
   28c9e:	bf0b      	itete	eq
   28ca0:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   28ca4:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   28ca8:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   28cac:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   28cb0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   28cb2:	2b01      	cmp	r3, #1
   28cb4:	4b65      	ldr	r3, [pc, #404]	; (28e4c <ProcessAesDrv+0x2f4>)
   28cb6:	bf0b      	itete	eq
   28cb8:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   28cbc:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   28cc0:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   28cc4:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   28cc8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   28cca:	f023 0304 	bic.w	r3, r3, #4
   28cce:	2b03      	cmp	r3, #3
   28cd0:	f000 80a2 	beq.w	28e18 <ProcessAesDrv+0x2c0>
   28cd4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   28cd6:	2b01      	cmp	r3, #1
   28cd8:	bf14      	ite	ne
   28cda:	2020      	movne	r0, #32
   28cdc:	2080      	moveq	r0, #128	; 0x80
   28cde:	f7fe fd8b 	bl	277f8 <CC_HalWaitInterrupt>
   28ce2:	4604      	mov	r4, r0
   28ce4:	2800      	cmp	r0, #0
   28ce6:	f47f af6f 	bne.w	28bc8 <ProcessAesDrv+0x70>
   28cea:	4b58      	ldr	r3, [pc, #352]	; (28e4c <ProcessAesDrv+0x2f4>)
   28cec:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   28cf0:	2c00      	cmp	r4, #0
   28cf2:	d1fb      	bne.n	28cec <ProcessAesDrv+0x194>
   28cf4:	6b69      	ldr	r1, [r5, #52]	; 0x34
   28cf6:	2907      	cmp	r1, #7
   28cf8:	d814      	bhi.n	28d24 <ProcessAesDrv+0x1cc>
   28cfa:	2201      	movs	r2, #1
   28cfc:	408a      	lsls	r2, r1
   28cfe:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   28d02:	f040 80bb 	bne.w	28e7c <ProcessAesDrv+0x324>
   28d06:	f012 0f44 	tst.w	r2, #68	; 0x44
   28d0a:	d00b      	beq.n	28d24 <ProcessAesDrv+0x1cc>
   28d0c:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   28d10:	602a      	str	r2, [r5, #0]
   28d12:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   28d16:	606a      	str	r2, [r5, #4]
   28d18:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   28d1c:	60aa      	str	r2, [r5, #8]
   28d1e:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   28d22:	60eb      	str	r3, [r5, #12]
   28d24:	2301      	movs	r3, #1
   28d26:	65ab      	str	r3, [r5, #88]	; 0x58
   28d28:	e74e      	b.n	28bc8 <ProcessAesDrv+0x70>
   28d2a:	2a01      	cmp	r2, #1
   28d2c:	bf0c      	ite	eq
   28d2e:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   28d32:	f040 0010 	orrne.w	r0, r0, #16
   28d36:	f7fe fd59 	bl	277ec <CC_HalMaskInterrupt>
   28d3a:	e75f      	b.n	28bfc <ProcessAesDrv+0xa4>
   28d3c:	4c46      	ldr	r4, [pc, #280]	; (28e58 <ProcessAesDrv+0x300>)
   28d3e:	4620      	mov	r0, r4
   28d40:	b005      	add	sp, #20
   28d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28d46:	4c45      	ldr	r4, [pc, #276]	; (28e5c <ProcessAesDrv+0x304>)
   28d48:	e73e      	b.n	28bc8 <ProcessAesDrv+0x70>
   28d4a:	4845      	ldr	r0, [pc, #276]	; (28e60 <ProcessAesDrv+0x308>)
   28d4c:	f7fd fede 	bl	26b0c <CC_PalAbort>
   28d50:	2000      	movs	r0, #0
   28d52:	f7fe fe17 	bl	27984 <CC_PalPowerSaveModeSelect>
   28d56:	2800      	cmp	r0, #0
   28d58:	f43f af28 	beq.w	28bac <ProcessAesDrv+0x54>
   28d5c:	4841      	ldr	r0, [pc, #260]	; (28e64 <ProcessAesDrv+0x30c>)
   28d5e:	f7fd fed5 	bl	26b0c <CC_PalAbort>
   28d62:	e723      	b.n	28bac <ProcessAesDrv+0x54>
   28d64:	4840      	ldr	r0, [pc, #256]	; (28e68 <ProcessAesDrv+0x310>)
   28d66:	f7fd fed1 	bl	26b0c <CC_PalAbort>
   28d6a:	4620      	mov	r0, r4
   28d6c:	b005      	add	sp, #20
   28d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28d72:	483e      	ldr	r0, [pc, #248]	; (28e6c <ProcessAesDrv+0x314>)
   28d74:	f7fd feca 	bl	26b0c <CC_PalAbort>
   28d78:	e74a      	b.n	28c10 <ProcessAesDrv+0xb8>
   28d7a:	2304      	movs	r3, #4
   28d7c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   28d80:	2120      	movs	r1, #32
   28d82:	f105 0010 	add.w	r0, r5, #16
   28d86:	f7fe fdb5 	bl	278f4 <CC_PalMemSetZeroPlat>
   28d8a:	e725      	b.n	28bd8 <ProcessAesDrv+0x80>
   28d8c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   28d8e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   28d90:	f000 f9c0 	bl	29114 <kmu_validate_slot_and_size>
   28d94:	b998      	cbnz	r0, 28dbe <ProcessAesDrv+0x266>
   28d96:	4f36      	ldr	r7, [pc, #216]	; (28e70 <ProcessAesDrv+0x318>)
   28d98:	4c2c      	ldr	r4, [pc, #176]	; (28e4c <ProcessAesDrv+0x2f4>)
   28d9a:	683b      	ldr	r3, [r7, #0]
   28d9c:	681b      	ldr	r3, [r3, #0]
   28d9e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   28da2:	683b      	ldr	r3, [r7, #0]
   28da4:	685b      	ldr	r3, [r3, #4]
   28da6:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   28daa:	683b      	ldr	r3, [r7, #0]
   28dac:	689b      	ldr	r3, [r3, #8]
   28dae:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   28db2:	683b      	ldr	r3, [r7, #0]
   28db4:	68db      	ldr	r3, [r3, #12]
   28db6:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   28dba:	6b29      	ldr	r1, [r5, #48]	; 0x30
   28dbc:	b131      	cbz	r1, 28dcc <ProcessAesDrv+0x274>
   28dbe:	2701      	movs	r7, #1
   28dc0:	e6e6      	b.n	28b90 <ProcessAesDrv+0x38>
   28dc2:	4c2c      	ldr	r4, [pc, #176]	; (28e74 <ProcessAesDrv+0x31c>)
   28dc4:	e700      	b.n	28bc8 <ProcessAesDrv+0x70>
   28dc6:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   28dca:	e727      	b.n	28c1c <ProcessAesDrv+0xc4>
   28dcc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   28dce:	9301      	str	r3, [sp, #4]
   28dd0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   28dd2:	9300      	str	r3, [sp, #0]
   28dd4:	f105 0a10 	add.w	sl, r5, #16
   28dd8:	f04f 0b10 	mov.w	fp, #16
   28ddc:	f8cd a008 	str.w	sl, [sp, #8]
   28de0:	f8cd b00c 	str.w	fp, [sp, #12]
   28de4:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   28de8:	6c28      	ldr	r0, [r5, #64]	; 0x40
   28dea:	f000 f9b9 	bl	29160 <kmu_derive_cmac>
   28dee:	2800      	cmp	r0, #0
   28df0:	d151      	bne.n	28e96 <ProcessAesDrv+0x33e>
   28df2:	2300      	movs	r3, #0
   28df4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   28df8:	e7e1      	b.n	28dbe <ProcessAesDrv+0x266>
   28dfa:	4b14      	ldr	r3, [pc, #80]	; (28e4c <ProcessAesDrv+0x2f4>)
   28dfc:	682a      	ldr	r2, [r5, #0]
   28dfe:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   28e02:	686a      	ldr	r2, [r5, #4]
   28e04:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   28e08:	68aa      	ldr	r2, [r5, #8]
   28e0a:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   28e0e:	68ea      	ldr	r2, [r5, #12]
   28e10:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   28e14:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   28e16:	e738      	b.n	28c8a <ProcessAesDrv+0x132>
   28e18:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   28e1a:	2b01      	cmp	r3, #1
   28e1c:	bf14      	ite	ne
   28e1e:	2010      	movne	r0, #16
   28e20:	2040      	moveq	r0, #64	; 0x40
   28e22:	e75c      	b.n	28cde <ProcessAesDrv+0x186>
   28e24:	4c14      	ldr	r4, [pc, #80]	; (28e78 <ProcessAesDrv+0x320>)
   28e26:	e6cf      	b.n	28bc8 <ProcessAesDrv+0x70>
   28e28:	4b08      	ldr	r3, [pc, #32]	; (28e4c <ProcessAesDrv+0x2f4>)
   28e2a:	682a      	ldr	r2, [r5, #0]
   28e2c:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   28e30:	686a      	ldr	r2, [r5, #4]
   28e32:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   28e36:	68aa      	ldr	r2, [r5, #8]
   28e38:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   28e3c:	68ea      	ldr	r2, [r5, #12]
   28e3e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   28e42:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   28e44:	e721      	b.n	28c8a <ProcessAesDrv+0x132>
   28e46:	bf00      	nop
   28e48:	200007c4 	.word	0x200007c4
   28e4c:	5002b000 	.word	0x5002b000
   28e50:	00f10001 	.word	0x00f10001
   28e54:	00f10005 	.word	0x00f10005
   28e58:	00f1000b 	.word	0x00f1000b
   28e5c:	00f10003 	.word	0x00f10003
   28e60:	000308b8 	.word	0x000308b8
   28e64:	000308d0 	.word	0x000308d0
   28e68:	00030910 	.word	0x00030910
   28e6c:	000308f0 	.word	0x000308f0
   28e70:	200007b0 	.word	0x200007b0
   28e74:	00f10002 	.word	0x00f10002
   28e78:	00f10004 	.word	0x00f10004
   28e7c:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   28e80:	602a      	str	r2, [r5, #0]
   28e82:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   28e86:	606a      	str	r2, [r5, #4]
   28e88:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   28e8c:	60aa      	str	r2, [r5, #8]
   28e8e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   28e92:	60eb      	str	r3, [r5, #12]
   28e94:	e746      	b.n	28d24 <ProcessAesDrv+0x1cc>
   28e96:	683b      	ldr	r3, [r7, #0]
   28e98:	681b      	ldr	r3, [r3, #0]
   28e9a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   28e9e:	683b      	ldr	r3, [r7, #0]
   28ea0:	685b      	ldr	r3, [r3, #4]
   28ea2:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   28ea6:	683b      	ldr	r3, [r7, #0]
   28ea8:	689b      	ldr	r3, [r3, #8]
   28eaa:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   28eae:	683b      	ldr	r3, [r7, #0]
   28eb0:	68db      	ldr	r3, [r3, #12]
   28eb2:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   28eb6:	4659      	mov	r1, fp
   28eb8:	4650      	mov	r0, sl
   28eba:	f7fe fd1b 	bl	278f4 <CC_PalMemSetZeroPlat>
   28ebe:	e798      	b.n	28df2 <ProcessAesDrv+0x29a>

00028ec0 <FinishAesDrv>:
   28ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28ec4:	b309      	cbz	r1, 28f0a <FinishAesDrv+0x4a>
   28ec6:	b302      	cbz	r2, 28f0a <FinishAesDrv+0x4a>
   28ec8:	4604      	mov	r4, r0
   28eca:	2800      	cmp	r0, #0
   28ecc:	f000 80af 	beq.w	2902e <FinishAesDrv+0x16e>
   28ed0:	461d      	mov	r5, r3
   28ed2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   28ed4:	2b07      	cmp	r3, #7
   28ed6:	460e      	mov	r6, r1
   28ed8:	d01b      	beq.n	28f12 <FinishAesDrv+0x52>
   28eda:	b95d      	cbnz	r5, 28ef4 <FinishAesDrv+0x34>
   28edc:	2b03      	cmp	r3, #3
   28ede:	d110      	bne.n	28f02 <FinishAesDrv+0x42>
   28ee0:	6d83      	ldr	r3, [r0, #88]	; 0x58
   28ee2:	b973      	cbnz	r3, 28f02 <FinishAesDrv+0x42>
   28ee4:	f100 0364 	add.w	r3, r0, #100	; 0x64
   28ee8:	6645      	str	r5, [r0, #100]	; 0x64
   28eea:	6685      	str	r5, [r0, #104]	; 0x68
   28eec:	66c5      	str	r5, [r0, #108]	; 0x6c
   28eee:	6705      	str	r5, [r0, #112]	; 0x70
   28ef0:	600b      	str	r3, [r1, #0]
   28ef2:	2510      	movs	r5, #16
   28ef4:	462b      	mov	r3, r5
   28ef6:	4631      	mov	r1, r6
   28ef8:	4620      	mov	r0, r4
   28efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   28efe:	f7ff be2b 	b.w	28b58 <ProcessAesDrv>
   28f02:	462f      	mov	r7, r5
   28f04:	4638      	mov	r0, r7
   28f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28f0a:	4f76      	ldr	r7, [pc, #472]	; (290e4 <FinishAesDrv+0x224>)
   28f0c:	4638      	mov	r0, r7
   28f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28f12:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   28f14:	2b00      	cmp	r3, #0
   28f16:	f040 808d 	bne.w	29034 <FinishAesDrv+0x174>
   28f1a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   28f1e:	f080 8090 	bcs.w	29042 <FinishAesDrv+0x182>
   28f22:	b91d      	cbnz	r5, 28f2c <FinishAesDrv+0x6c>
   28f24:	6da3      	ldr	r3, [r4, #88]	; 0x58
   28f26:	2b00      	cmp	r3, #0
   28f28:	f040 808b 	bne.w	29042 <FinishAesDrv+0x182>
   28f2c:	486e      	ldr	r0, [pc, #440]	; (290e8 <FinishAesDrv+0x228>)
   28f2e:	f04f 31ff 	mov.w	r1, #4294967295
   28f32:	f7fe fcf7 	bl	27924 <CC_PalMutexLock>
   28f36:	2800      	cmp	r0, #0
   28f38:	f040 808f 	bne.w	2905a <FinishAesDrv+0x19a>
   28f3c:	2000      	movs	r0, #0
   28f3e:	f7fe fd21 	bl	27984 <CC_PalPowerSaveModeSelect>
   28f42:	2800      	cmp	r0, #0
   28f44:	f040 8085 	bne.w	29052 <FinishAesDrv+0x192>
   28f48:	4a68      	ldr	r2, [pc, #416]	; (290ec <FinishAesDrv+0x22c>)
   28f4a:	2301      	movs	r3, #1
   28f4c:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   28f50:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   28f54:	2b00      	cmp	r3, #0
   28f56:	d1fb      	bne.n	28f50 <FinishAesDrv+0x90>
   28f58:	6b63      	ldr	r3, [r4, #52]	; 0x34
   28f5a:	2b03      	cmp	r3, #3
   28f5c:	dd4f      	ble.n	28ffe <FinishAesDrv+0x13e>
   28f5e:	3b06      	subs	r3, #6
   28f60:	2b01      	cmp	r3, #1
   28f62:	d84e      	bhi.n	29002 <FinishAesDrv+0x142>
   28f64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   28f66:	2b01      	cmp	r3, #1
   28f68:	d86d      	bhi.n	29046 <FinishAesDrv+0x186>
   28f6a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   28f6c:	2b01      	cmp	r3, #1
   28f6e:	d878      	bhi.n	29062 <FinishAesDrv+0x1a2>
   28f70:	6e23      	ldr	r3, [r4, #96]	; 0x60
   28f72:	2b01      	cmp	r3, #1
   28f74:	d877      	bhi.n	29066 <FinishAesDrv+0x1a6>
   28f76:	4620      	mov	r0, r4
   28f78:	f7ff fd64 	bl	28a44 <InitAes.part.0>
   28f7c:	4607      	mov	r7, r0
   28f7e:	2800      	cmp	r0, #0
   28f80:	d140      	bne.n	29004 <FinishAesDrv+0x144>
   28f82:	4620      	mov	r0, r4
   28f84:	f7ff fd0a 	bl	2899c <LoadAesKey>
   28f88:	4607      	mov	r7, r0
   28f8a:	2800      	cmp	r0, #0
   28f8c:	d13a      	bne.n	29004 <FinishAesDrv+0x144>
   28f8e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   28f90:	2a07      	cmp	r2, #7
   28f92:	d836      	bhi.n	29002 <FinishAesDrv+0x142>
   28f94:	2301      	movs	r3, #1
   28f96:	4093      	lsls	r3, r2
   28f98:	f013 0f8a 	tst.w	r3, #138	; 0x8a
   28f9c:	f040 8081 	bne.w	290a2 <FinishAesDrv+0x1e2>
   28fa0:	f013 0f44 	tst.w	r3, #68	; 0x44
   28fa4:	d16f      	bne.n	29086 <FinishAesDrv+0x1c6>
   28fa6:	07db      	lsls	r3, r3, #31
   28fa8:	d52b      	bpl.n	29002 <FinishAesDrv+0x142>
   28faa:	4b50      	ldr	r3, [pc, #320]	; (290ec <FinishAesDrv+0x22c>)
   28fac:	2201      	movs	r2, #1
   28fae:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   28fb2:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   28fb6:	6831      	ldr	r1, [r6, #0]
   28fb8:	2d00      	cmp	r5, #0
   28fba:	d156      	bne.n	2906a <FinishAesDrv+0x1aa>
   28fbc:	6da1      	ldr	r1, [r4, #88]	; 0x58
   28fbe:	b909      	cbnz	r1, 28fc4 <FinishAesDrv+0x104>
   28fc0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   28fc4:	4b49      	ldr	r3, [pc, #292]	; (290ec <FinishAesDrv+0x22c>)
   28fc6:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   28fca:	2f00      	cmp	r7, #0
   28fcc:	d1fb      	bne.n	28fc6 <FinishAesDrv+0x106>
   28fce:	6b61      	ldr	r1, [r4, #52]	; 0x34
   28fd0:	2907      	cmp	r1, #7
   28fd2:	d817      	bhi.n	29004 <FinishAesDrv+0x144>
   28fd4:	2201      	movs	r2, #1
   28fd6:	408a      	lsls	r2, r1
   28fd8:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   28fdc:	d16f      	bne.n	290be <FinishAesDrv+0x1fe>
   28fde:	f012 0f44 	tst.w	r2, #68	; 0x44
   28fe2:	d00f      	beq.n	29004 <FinishAesDrv+0x144>
   28fe4:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   28fe8:	6022      	str	r2, [r4, #0]
   28fea:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   28fee:	6062      	str	r2, [r4, #4]
   28ff0:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   28ff4:	60a2      	str	r2, [r4, #8]
   28ff6:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   28ffa:	60e3      	str	r3, [r4, #12]
   28ffc:	e002      	b.n	29004 <FinishAesDrv+0x144>
   28ffe:	2b00      	cmp	r3, #0
   29000:	dab0      	bge.n	28f64 <FinishAesDrv+0xa4>
   29002:	4f3b      	ldr	r7, [pc, #236]	; (290f0 <FinishAesDrv+0x230>)
   29004:	4a39      	ldr	r2, [pc, #228]	; (290ec <FinishAesDrv+0x22c>)
   29006:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2900a:	2b00      	cmp	r3, #0
   2900c:	d1fb      	bne.n	29006 <FinishAesDrv+0x146>
   2900e:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   29012:	2001      	movs	r0, #1
   29014:	f7fe fcb6 	bl	27984 <CC_PalPowerSaveModeSelect>
   29018:	b9b8      	cbnz	r0, 2904a <FinishAesDrv+0x18a>
   2901a:	4833      	ldr	r0, [pc, #204]	; (290e8 <FinishAesDrv+0x228>)
   2901c:	f7fe fc8a 	bl	27934 <CC_PalMutexUnlock>
   29020:	2800      	cmp	r0, #0
   29022:	f43f af6f 	beq.w	28f04 <FinishAesDrv+0x44>
   29026:	4833      	ldr	r0, [pc, #204]	; (290f4 <FinishAesDrv+0x234>)
   29028:	f7fd fd70 	bl	26b0c <CC_PalAbort>
   2902c:	e76a      	b.n	28f04 <FinishAesDrv+0x44>
   2902e:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   29032:	e767      	b.n	28f04 <FinishAesDrv+0x44>
   29034:	2b01      	cmp	r3, #1
   29036:	f47f af74 	bne.w	28f22 <FinishAesDrv+0x62>
   2903a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2903e:	f4ff af70 	bcc.w	28f22 <FinishAesDrv+0x62>
   29042:	4f2d      	ldr	r7, [pc, #180]	; (290f8 <FinishAesDrv+0x238>)
   29044:	e75e      	b.n	28f04 <FinishAesDrv+0x44>
   29046:	4f2d      	ldr	r7, [pc, #180]	; (290fc <FinishAesDrv+0x23c>)
   29048:	e7dc      	b.n	29004 <FinishAesDrv+0x144>
   2904a:	482d      	ldr	r0, [pc, #180]	; (29100 <FinishAesDrv+0x240>)
   2904c:	f7fd fd5e 	bl	26b0c <CC_PalAbort>
   29050:	e7e3      	b.n	2901a <FinishAesDrv+0x15a>
   29052:	482c      	ldr	r0, [pc, #176]	; (29104 <FinishAesDrv+0x244>)
   29054:	f7fd fd5a 	bl	26b0c <CC_PalAbort>
   29058:	e776      	b.n	28f48 <FinishAesDrv+0x88>
   2905a:	482b      	ldr	r0, [pc, #172]	; (29108 <FinishAesDrv+0x248>)
   2905c:	f7fd fd56 	bl	26b0c <CC_PalAbort>
   29060:	e76c      	b.n	28f3c <FinishAesDrv+0x7c>
   29062:	4f2a      	ldr	r7, [pc, #168]	; (2910c <FinishAesDrv+0x24c>)
   29064:	e7ce      	b.n	29004 <FinishAesDrv+0x144>
   29066:	4f2a      	ldr	r7, [pc, #168]	; (29110 <FinishAesDrv+0x250>)
   29068:	e7cc      	b.n	29004 <FinishAesDrv+0x144>
   2906a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   2906c:	2a01      	cmp	r2, #1
   2906e:	d033      	beq.n	290d8 <FinishAesDrv+0x218>
   29070:	f8c3 1c30 	str.w	r1, [r3, #3120]	; 0xc30
   29074:	2010      	movs	r0, #16
   29076:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   2907a:	f7fe fbbd 	bl	277f8 <CC_HalWaitInterrupt>
   2907e:	4607      	mov	r7, r0
   29080:	2800      	cmp	r0, #0
   29082:	d09f      	beq.n	28fc4 <FinishAesDrv+0x104>
   29084:	e7be      	b.n	29004 <FinishAesDrv+0x144>
   29086:	4b19      	ldr	r3, [pc, #100]	; (290ec <FinishAesDrv+0x22c>)
   29088:	6822      	ldr	r2, [r4, #0]
   2908a:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   2908e:	6862      	ldr	r2, [r4, #4]
   29090:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   29094:	68a2      	ldr	r2, [r4, #8]
   29096:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   2909a:	68e2      	ldr	r2, [r4, #12]
   2909c:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   290a0:	e783      	b.n	28faa <FinishAesDrv+0xea>
   290a2:	4b12      	ldr	r3, [pc, #72]	; (290ec <FinishAesDrv+0x22c>)
   290a4:	6822      	ldr	r2, [r4, #0]
   290a6:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   290aa:	6862      	ldr	r2, [r4, #4]
   290ac:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   290b0:	68a2      	ldr	r2, [r4, #8]
   290b2:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   290b6:	68e2      	ldr	r2, [r4, #12]
   290b8:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   290bc:	e775      	b.n	28faa <FinishAesDrv+0xea>
   290be:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   290c2:	6022      	str	r2, [r4, #0]
   290c4:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   290c8:	6062      	str	r2, [r4, #4]
   290ca:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   290ce:	60a2      	str	r2, [r4, #8]
   290d0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   290d4:	60e3      	str	r3, [r4, #12]
   290d6:	e795      	b.n	29004 <FinishAesDrv+0x144>
   290d8:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
   290dc:	2040      	movs	r0, #64	; 0x40
   290de:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   290e2:	e7ca      	b.n	2907a <FinishAesDrv+0x1ba>
   290e4:	00f1000b 	.word	0x00f1000b
   290e8:	200007c4 	.word	0x200007c4
   290ec:	5002b000 	.word	0x5002b000
   290f0:	00f10001 	.word	0x00f10001
   290f4:	00030910 	.word	0x00030910
   290f8:	00f10005 	.word	0x00f10005
   290fc:	00f10002 	.word	0x00f10002
   29100:	000308f0 	.word	0x000308f0
   29104:	000308d0 	.word	0x000308d0
   29108:	000308b8 	.word	0x000308b8
   2910c:	00f10003 	.word	0x00f10003
   29110:	00f10004 	.word	0x00f10004

00029114 <kmu_validate_slot_and_size>:
   29114:	b929      	cbnz	r1, 29122 <kmu_validate_slot_and_size+0xe>
   29116:	4b04      	ldr	r3, [pc, #16]	; (29128 <kmu_validate_slot_and_size+0x14>)
   29118:	2800      	cmp	r0, #0
   2911a:	bf14      	ite	ne
   2911c:	4618      	movne	r0, r3
   2911e:	2000      	moveq	r0, #0
   29120:	4770      	bx	lr
   29122:	4802      	ldr	r0, [pc, #8]	; (2912c <kmu_validate_slot_and_size+0x18>)
   29124:	4770      	bx	lr
   29126:	bf00      	nop
   29128:	00f70001 	.word	0x00f70001
   2912c:	00f70003 	.word	0x00f70003

00029130 <kmu_validate_kdr_slot_and_size>:
   29130:	b929      	cbnz	r1, 2913e <kmu_validate_kdr_slot_and_size+0xe>
   29132:	4b04      	ldr	r3, [pc, #16]	; (29144 <kmu_validate_kdr_slot_and_size+0x14>)
   29134:	2800      	cmp	r0, #0
   29136:	bf14      	ite	ne
   29138:	4618      	movne	r0, r3
   2913a:	2000      	moveq	r0, #0
   2913c:	4770      	bx	lr
   2913e:	4802      	ldr	r0, [pc, #8]	; (29148 <kmu_validate_kdr_slot_and_size+0x18>)
   29140:	4770      	bx	lr
   29142:	bf00      	nop
   29144:	00f70001 	.word	0x00f70001
   29148:	00f70003 	.word	0x00f70003

0002914c <kmu_use_kdr_key>:
   2914c:	4b03      	ldr	r3, [pc, #12]	; (2915c <kmu_use_kdr_key+0x10>)
   2914e:	2000      	movs	r0, #0
   29150:	2201      	movs	r2, #1
   29152:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   29156:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   2915a:	4770      	bx	lr
   2915c:	5002b000 	.word	0x5002b000

00029160 <kmu_derive_cmac>:
   29160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29164:	b0cc      	sub	sp, #304	; 0x130
   29166:	2400      	movs	r4, #0
   29168:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   2916a:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   2916e:	4682      	mov	sl, r0
   29170:	4689      	mov	r9, r1
   29172:	4616      	mov	r6, r2
   29174:	4621      	mov	r1, r4
   29176:	2274      	movs	r2, #116	; 0x74
   29178:	a80e      	add	r0, sp, #56	; 0x38
   2917a:	461f      	mov	r7, r3
   2917c:	f002 fd9b 	bl	2bcb6 <memset>
   29180:	2280      	movs	r2, #128	; 0x80
   29182:	4621      	mov	r1, r4
   29184:	a82c      	add	r0, sp, #176	; 0xb0
   29186:	942b      	str	r4, [sp, #172]	; 0xac
   29188:	f002 fd95 	bl	2bcb6 <memset>
   2918c:	2384      	movs	r3, #132	; 0x84
   2918e:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   29192:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   29196:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   2919a:	9305      	str	r3, [sp, #20]
   2919c:	d863      	bhi.n	29266 <kmu_derive_cmac+0x106>
   2919e:	f7ff fcc3 	bl	28b28 <write_invalid_key>
   291a2:	ab05      	add	r3, sp, #20
   291a4:	4630      	mov	r0, r6
   291a6:	ae2b      	add	r6, sp, #172	; 0xac
   291a8:	9301      	str	r3, [sp, #4]
   291aa:	9502      	str	r5, [sp, #8]
   291ac:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   291b0:	4639      	mov	r1, r7
   291b2:	9600      	str	r6, [sp, #0]
   291b4:	f000 f862 	bl	2927c <UtilCmacBuildDataForDerivation>
   291b8:	2800      	cmp	r0, #0
   291ba:	d14f      	bne.n	2925c <kmu_derive_cmac+0xfc>
   291bc:	2303      	movs	r3, #3
   291be:	f88d 3013 	strb.w	r3, [sp, #19]
   291c2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   291c6:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   291ca:	2307      	movs	r3, #7
   291cc:	2200      	movs	r2, #0
   291ce:	901c      	str	r0, [sp, #112]	; 0x70
   291d0:	2110      	movs	r1, #16
   291d2:	a80e      	add	r0, sp, #56	; 0x38
   291d4:	931b      	str	r3, [sp, #108]	; 0x6c
   291d6:	2401      	movs	r4, #1
   291d8:	2301      	movs	r3, #1
   291da:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   291de:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   291e2:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   291e6:	9426      	str	r4, [sp, #152]	; 0x98
   291e8:	f10d 0920 	add.w	r9, sp, #32
   291ec:	f7fe fb82 	bl	278f4 <CC_PalMemSetZeroPlat>
   291f0:	2210      	movs	r2, #16
   291f2:	9200      	str	r2, [sp, #0]
   291f4:	9905      	ldr	r1, [sp, #20]
   291f6:	f8cd 9004 	str.w	r9, [sp, #4]
   291fa:	ab0a      	add	r3, sp, #40	; 0x28
   291fc:	4630      	mov	r0, r6
   291fe:	aa06      	add	r2, sp, #24
   29200:	f7ff fa22 	bl	28648 <SetDataBuffersInfo>
   29204:	4607      	mov	r7, r0
   29206:	b170      	cbz	r0, 29226 <kmu_derive_cmac+0xc6>
   29208:	e01d      	b.n	29246 <kmu_derive_cmac+0xe6>
   2920a:	a90e      	add	r1, sp, #56	; 0x38
   2920c:	eb08 0007 	add.w	r0, r8, r7
   29210:	f7fe fb6c 	bl	278ec <CC_PalMemCopyPlat>
   29214:	2110      	movs	r1, #16
   29216:	a80e      	add	r0, sp, #56	; 0x38
   29218:	f7fe fb6c 	bl	278f4 <CC_PalMemSetZeroPlat>
   2921c:	3401      	adds	r4, #1
   2921e:	1bad      	subs	r5, r5, r6
   29220:	4437      	add	r7, r6
   29222:	b2e4      	uxtb	r4, r4
   29224:	d024      	beq.n	29270 <kmu_derive_cmac+0x110>
   29226:	2d10      	cmp	r5, #16
   29228:	464a      	mov	r2, r9
   2922a:	9b05      	ldr	r3, [sp, #20]
   2922c:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   29230:	a906      	add	r1, sp, #24
   29232:	a80e      	add	r0, sp, #56	; 0x38
   29234:	462e      	mov	r6, r5
   29236:	bf28      	it	cs
   29238:	2610      	movcs	r6, #16
   2923a:	f7ff fe41 	bl	28ec0 <FinishAesDrv>
   2923e:	4632      	mov	r2, r6
   29240:	2800      	cmp	r0, #0
   29242:	d0e2      	beq.n	2920a <kmu_derive_cmac+0xaa>
   29244:	4607      	mov	r7, r0
   29246:	a80e      	add	r0, sp, #56	; 0x38
   29248:	2274      	movs	r2, #116	; 0x74
   2924a:	2100      	movs	r1, #0
   2924c:	f7fe fb50 	bl	278f0 <CC_PalMemSetPlat>
   29250:	f7ff fc6a 	bl	28b28 <write_invalid_key>
   29254:	4638      	mov	r0, r7
   29256:	b04c      	add	sp, #304	; 0x130
   29258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2925c:	4f05      	ldr	r7, [pc, #20]	; (29274 <kmu_derive_cmac+0x114>)
   2925e:	4638      	mov	r0, r7
   29260:	b04c      	add	sp, #304	; 0x130
   29262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29266:	4f04      	ldr	r7, [pc, #16]	; (29278 <kmu_derive_cmac+0x118>)
   29268:	4638      	mov	r0, r7
   2926a:	b04c      	add	sp, #304	; 0x130
   2926c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29270:	462f      	mov	r7, r5
   29272:	e7e8      	b.n	29246 <kmu_derive_cmac+0xe6>
   29274:	00f1000e 	.word	0x00f1000e
   29278:	00f1000f 	.word	0x00f1000f

0002927c <UtilCmacBuildDataForDerivation>:
   2927c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29280:	b082      	sub	sp, #8
   29282:	461e      	mov	r6, r3
   29284:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   29286:	2300      	movs	r3, #0
   29288:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2928c:	9301      	str	r3, [sp, #4]
   2928e:	d83e      	bhi.n	2930e <UtilCmacBuildDataForDerivation+0x92>
   29290:	00ed      	lsls	r5, r5, #3
   29292:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   29296:	4617      	mov	r7, r2
   29298:	f101 32ff 	add.w	r2, r1, #4294967295
   2929c:	bf34      	ite	cc
   2929e:	2303      	movcc	r3, #3
   292a0:	2304      	movcs	r3, #4
   292a2:	2a3f      	cmp	r2, #63	; 0x3f
   292a4:	460c      	mov	r4, r1
   292a6:	9300      	str	r3, [sp, #0]
   292a8:	d831      	bhi.n	2930e <UtilCmacBuildDataForDerivation+0x92>
   292aa:	b380      	cbz	r0, 2930e <UtilCmacBuildDataForDerivation+0x92>
   292ac:	bb66      	cbnz	r6, 29308 <UtilCmacBuildDataForDerivation+0x8c>
   292ae:	9a08      	ldr	r2, [sp, #32]
   292b0:	b36a      	cbz	r2, 2930e <UtilCmacBuildDataForDerivation+0x92>
   292b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   292b4:	6811      	ldr	r1, [r2, #0]
   292b6:	b351      	cbz	r1, 2930e <UtilCmacBuildDataForDerivation+0x92>
   292b8:	19a2      	adds	r2, r4, r6
   292ba:	4413      	add	r3, r2
   292bc:	4299      	cmp	r1, r3
   292be:	d326      	bcc.n	2930e <UtilCmacBuildDataForDerivation+0x92>
   292c0:	9b08      	ldr	r3, [sp, #32]
   292c2:	4601      	mov	r1, r0
   292c4:	4622      	mov	r2, r4
   292c6:	1c58      	adds	r0, r3, #1
   292c8:	f7fe fb10 	bl	278ec <CC_PalMemCopyPlat>
   292cc:	9b08      	ldr	r3, [sp, #32]
   292ce:	f104 0802 	add.w	r8, r4, #2
   292d2:	441c      	add	r4, r3
   292d4:	2300      	movs	r3, #0
   292d6:	7063      	strb	r3, [r4, #1]
   292d8:	bb26      	cbnz	r6, 29324 <UtilCmacBuildDataForDerivation+0xa8>
   292da:	9b08      	ldr	r3, [sp, #32]
   292dc:	9500      	str	r5, [sp, #0]
   292de:	2dff      	cmp	r5, #255	; 0xff
   292e0:	eb03 0008 	add.w	r0, r3, r8
   292e4:	d917      	bls.n	29316 <UtilCmacBuildDataForDerivation+0x9a>
   292e6:	022b      	lsls	r3, r5, #8
   292e8:	b29b      	uxth	r3, r3
   292ea:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
   292ee:	2202      	movs	r2, #2
   292f0:	a901      	add	r1, sp, #4
   292f2:	9301      	str	r3, [sp, #4]
   292f4:	f7fe fafa 	bl	278ec <CC_PalMemCopyPlat>
   292f8:	f108 0302 	add.w	r3, r8, #2
   292fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   292fe:	2000      	movs	r0, #0
   29300:	6013      	str	r3, [r2, #0]
   29302:	b002      	add	sp, #8
   29304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29308:	b10f      	cbz	r7, 2930e <UtilCmacBuildDataForDerivation+0x92>
   2930a:	2e40      	cmp	r6, #64	; 0x40
   2930c:	d9cf      	bls.n	292ae <UtilCmacBuildDataForDerivation+0x32>
   2930e:	480a      	ldr	r0, [pc, #40]	; (29338 <UtilCmacBuildDataForDerivation+0xbc>)
   29310:	b002      	add	sp, #8
   29312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29316:	2201      	movs	r2, #1
   29318:	4669      	mov	r1, sp
   2931a:	f7fe fae7 	bl	278ec <CC_PalMemCopyPlat>
   2931e:	f108 0301 	add.w	r3, r8, #1
   29322:	e7eb      	b.n	292fc <UtilCmacBuildDataForDerivation+0x80>
   29324:	9b08      	ldr	r3, [sp, #32]
   29326:	4632      	mov	r2, r6
   29328:	eb03 0008 	add.w	r0, r3, r8
   2932c:	4639      	mov	r1, r7
   2932e:	f7fe fadd 	bl	278ec <CC_PalMemCopyPlat>
   29332:	44b0      	add	r8, r6
   29334:	e7d1      	b.n	292da <UtilCmacBuildDataForDerivation+0x5e>
   29336:	bf00      	nop
   29338:	80000006 	.word	0x80000006

0002933c <CC_PalDataBufferAttrGet>:
   2933c:	2000      	movs	r0, #0
   2933e:	7018      	strb	r0, [r3, #0]
   29340:	4770      	bx	lr
   29342:	bf00      	nop

00029344 <cbpprintf_external>:
{
   29344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29348:	4606      	mov	r6, r0
   2934a:	460d      	mov	r5, r1
   2934c:	4617      	mov	r7, r2
	if (buf == NULL) {
   2934e:	4698      	mov	r8, r3
   29350:	b32b      	cbz	r3, 2939e <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   29352:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   29356:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2935a:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   2935c:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2935e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   29362:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   29366:	441c      	add	r4, r3
   29368:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2936a:	f04f 0a00 	mov.w	sl, #0
   2936e:	45ca      	cmp	sl, r9
   29370:	d309      	bcc.n	29386 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   29372:	f8d8 2004 	ldr.w	r2, [r8, #4]
   29376:	f108 0308 	add.w	r3, r8, #8
   2937a:	4639      	mov	r1, r7
   2937c:	4630      	mov	r0, r6
   2937e:	46ac      	mov	ip, r5
}
   29380:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   29384:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   29386:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   2938a:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   2938e:	4620      	mov	r0, r4
   29390:	f002 fc2f 	bl	2bbf2 <strlen>
   29394:	3001      	adds	r0, #1
   29396:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   29398:	f10a 0a01 	add.w	sl, sl, #1
   2939c:	e7e7      	b.n	2936e <cbpprintf_external+0x2a>
}
   2939e:	f06f 0015 	mvn.w	r0, #21
   293a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000293a6 <is_ptr>:
{
   293a6:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   293a8:	2500      	movs	r5, #0
{
   293aa:	4602      	mov	r2, r0
	bool mod = false;
   293ac:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   293ae:	4614      	mov	r4, r2
   293b0:	f814 3b01 	ldrb.w	r3, [r4], #1
   293b4:	b90b      	cbnz	r3, 293ba <is_ptr+0x14>
					return false;
   293b6:	4618      	mov	r0, r3
   293b8:	e009      	b.n	293ce <is_ptr+0x28>
		if (mod) {
   293ba:	b198      	cbz	r0, 293e4 <is_ptr+0x3e>
			if (cnt == n) {
   293bc:	428d      	cmp	r5, r1
   293be:	d107      	bne.n	293d0 <is_ptr+0x2a>
				if (c == 'p') {
   293c0:	2b70      	cmp	r3, #112	; 0x70
   293c2:	d004      	beq.n	293ce <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   293c4:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   293c8:	2a3a      	cmp	r2, #58	; 0x3a
   293ca:	d80b      	bhi.n	293e4 <is_ptr+0x3e>
					return false;
   293cc:	2000      	movs	r0, #0
}
   293ce:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   293d0:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   293d4:	2e3a      	cmp	r6, #58	; 0x3a
   293d6:	d805      	bhi.n	293e4 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   293d8:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   293da:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   293dc:	1c94      	adds	r4, r2, #2
   293de:	2b00      	cmp	r3, #0
   293e0:	d0e9      	beq.n	293b6 <is_ptr+0x10>
   293e2:	2000      	movs	r0, #0
		if (c == '%') {
   293e4:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   293e6:	bf08      	it	eq
   293e8:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   293ec:	4622      	mov	r2, r4
   293ee:	e7de      	b.n	293ae <is_ptr+0x8>

000293f0 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   293f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   293f2:	2364      	movs	r3, #100	; 0x64
{
   293f4:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   293f6:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   293f8:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   293fa:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   293fc:	b969      	cbnz	r1, 2941a <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   293fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   29400:	429a      	cmp	r2, r3
   29402:	fbb2 f4f3 	udiv	r4, r2, r3
   29406:	d20c      	bcs.n	29422 <u8_to_dec+0x32>
   29408:	2b01      	cmp	r3, #1
   2940a:	d00a      	beq.n	29422 <u8_to_dec+0x32>
   2940c:	b948      	cbnz	r0, 29422 <u8_to_dec+0x32>
		value -= digit * divisor;
   2940e:	fb03 2214 	mls	r2, r3, r4, r2
   29412:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   29414:	240a      	movs	r4, #10
   29416:	fbb3 f3f4 	udiv	r3, r3, r4
	while (buflen > 0 && divisor > 0) {
   2941a:	3e01      	subs	r6, #1
   2941c:	d1f0      	bne.n	29400 <u8_to_dec+0x10>
		*buf = '\0';
   2941e:	702e      	strb	r6, [r5, #0]
	return num_digits;
   29420:	e7ed      	b.n	293fe <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   29422:	3430      	adds	r4, #48	; 0x30
   29424:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   29428:	fbb2 f4f3 	udiv	r4, r2, r3
   2942c:	3901      	subs	r1, #1
   2942e:	fb03 2214 	mls	r2, r3, r4, r2
			num_digits++;
   29432:	3001      	adds	r0, #1
		divisor /= 10;
   29434:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   29438:	b2c9      	uxtb	r1, r1
			num_digits++;
   2943a:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   2943c:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   2943e:	b2db      	uxtb	r3, r3
   29440:	e7dc      	b.n	293fc <u8_to_dec+0xc>

00029442 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   29442:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   29446:	b2db      	uxtb	r3, r3
   29448:	2b09      	cmp	r3, #9
   2944a:	d802      	bhi.n	29452 <char2hex+0x10>
		*x = c - '0';
   2944c:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2944e:	2000      	movs	r0, #0
   29450:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   29452:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   29456:	2b05      	cmp	r3, #5
   29458:	d802      	bhi.n	29460 <char2hex+0x1e>
		*x = c - 'a' + 10;
   2945a:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   2945c:	b2c3      	uxtb	r3, r0
   2945e:	e7f5      	b.n	2944c <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   29460:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   29464:	2b05      	cmp	r3, #5
   29466:	d801      	bhi.n	2946c <char2hex+0x2a>
		*x = c - 'A' + 10;
   29468:	3837      	subs	r0, #55	; 0x37
   2946a:	e7f7      	b.n	2945c <char2hex+0x1a>
		return -EINVAL;
   2946c:	f06f 0015 	mvn.w	r0, #21
}
   29470:	4770      	bx	lr

00029472 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   29472:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29474:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   29476:	f001 0001 	and.w	r0, r1, #1
   2947a:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   2947e:	429e      	cmp	r6, r3
   29480:	ea4f 0751 	mov.w	r7, r1, lsr #1
   29484:	d903      	bls.n	2948e <hex2bin+0x1c>
		return 0;
   29486:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   29488:	4630      	mov	r0, r6
   2948a:	b003      	add	sp, #12
   2948c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   2948e:	b158      	cbz	r0, 294a8 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   29490:	7828      	ldrb	r0, [r5, #0]
   29492:	f10d 0107 	add.w	r1, sp, #7
   29496:	f7ff ffd4 	bl	29442 <char2hex>
   2949a:	2800      	cmp	r0, #0
   2949c:	dbf3      	blt.n	29486 <hex2bin+0x14>
		buf[0] = dec;
   2949e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   294a2:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   294a6:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   294a8:	3501      	adds	r5, #1
   294aa:	4417      	add	r7, r2
   294ac:	42ba      	cmp	r2, r7
   294ae:	d0eb      	beq.n	29488 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   294b0:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   294b4:	f10d 0107 	add.w	r1, sp, #7
   294b8:	f7ff ffc3 	bl	29442 <char2hex>
   294bc:	2800      	cmp	r0, #0
   294be:	dbe2      	blt.n	29486 <hex2bin+0x14>
		buf[i] = dec << 4;
   294c0:	f89d 4007 	ldrb.w	r4, [sp, #7]
   294c4:	0124      	lsls	r4, r4, #4
   294c6:	b2e4      	uxtb	r4, r4
   294c8:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   294ca:	f815 0b02 	ldrb.w	r0, [r5], #2
   294ce:	f7ff ffb8 	bl	29442 <char2hex>
   294d2:	2800      	cmp	r0, #0
   294d4:	dbd7      	blt.n	29486 <hex2bin+0x14>
		buf[i] += dec;
   294d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   294da:	441c      	add	r4, r3
   294dc:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   294e0:	e7e4      	b.n	294ac <hex2bin+0x3a>

000294e2 <arch_printk_char_out>:
}
   294e2:	2000      	movs	r0, #0
   294e4:	4770      	bx	lr

000294e6 <str_out>:
{
   294e6:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   294e8:	688a      	ldr	r2, [r1, #8]
   294ea:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   294ec:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   294ee:	b114      	cbz	r4, 294f6 <str_out+0x10>
   294f0:	684b      	ldr	r3, [r1, #4]
   294f2:	4293      	cmp	r3, r2
   294f4:	dc01      	bgt.n	294fa <str_out+0x14>
		ctx->count++;
   294f6:	608d      	str	r5, [r1, #8]
}
   294f8:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   294fa:	3b01      	subs	r3, #1
   294fc:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   294fe:	bf08      	it	eq
   29500:	2200      	moveq	r2, #0
   29502:	608d      	str	r5, [r1, #8]
   29504:	bf0c      	ite	eq
   29506:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   29508:	54a0      	strbne	r0, [r4, r2]
   2950a:	e7f5      	b.n	294f8 <str_out+0x12>

0002950c <vprintk>:
		z_log_vprintk(fmt, ap);
   2950c:	f001 b805 	b.w	2a51a <z_log_vprintk>

00029510 <printk>:
{
   29510:	b40f      	push	{r0, r1, r2, r3}
   29512:	b507      	push	{r0, r1, r2, lr}
   29514:	a904      	add	r1, sp, #16
   29516:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2951a:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   2951c:	f000 fffd 	bl	2a51a <z_log_vprintk>
}
   29520:	b003      	add	sp, #12
   29522:	f85d eb04 	ldr.w	lr, [sp], #4
   29526:	b004      	add	sp, #16
   29528:	4770      	bx	lr

0002952a <snprintk>:
{
   2952a:	b40c      	push	{r2, r3}
   2952c:	b507      	push	{r0, r1, r2, lr}
   2952e:	ab04      	add	r3, sp, #16
   29530:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   29534:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   29536:	f7e9 fa4f 	bl	129d8 <vsnprintk>
}
   2953a:	b003      	add	sp, #12
   2953c:	f85d eb04 	ldr.w	lr, [sp], #4
   29540:	b002      	add	sp, #8
   29542:	4770      	bx	lr

00029544 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   29544:	4604      	mov	r4, r0
   29546:	b508      	push	{r3, lr}
   29548:	4608      	mov	r0, r1
   2954a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2954c:	461a      	mov	r2, r3
   2954e:	47a0      	blx	r4
	return z_impl_z_current_get();
   29550:	f7fc fc26 	bl	25da0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   29554:	f7ec fc82 	bl	15e5c <z_impl_k_thread_abort>

00029558 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   29558:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2955c:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   2955e:	0840      	lsrs	r0, r0, #1
   29560:	4770      	bx	lr

00029562 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   29562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29564:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   29566:	f7ff fff7 	bl	29558 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2956a:	fab0 f080 	clz	r0, r0
   2956e:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   29572:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   29576:	00ca      	lsls	r2, r1, #3
   29578:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   2957c:	1d17      	adds	r7, r2, #4
{
   2957e:	460c      	mov	r4, r1
   29580:	3206      	adds	r2, #6
   29582:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   29584:	b956      	cbnz	r6, 2959c <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   29586:	2101      	movs	r1, #1
   29588:	fa01 f000 	lsl.w	r0, r1, r0
   2958c:	68d9      	ldr	r1, [r3, #12]
   2958e:	4301      	orrs	r1, r0
   29590:	60d9      	str	r1, [r3, #12]
		b->next = c;
   29592:	f8cc 4010 	str.w	r4, [ip, #16]
   29596:	53dd      	strh	r5, [r3, r7]
   29598:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   2959a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2959c:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2959e:	3104      	adds	r1, #4
   295a0:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   295a2:	53d8      	strh	r0, [r3, r7]
   295a4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   295a8:	529e      	strh	r6, [r3, r2]
   295aa:	80c5      	strh	r5, [r0, #6]
   295ac:	525d      	strh	r5, [r3, r1]
   295ae:	e7f4      	b.n	2959a <free_list_add+0x38>

000295b0 <free_list_remove_bidx>:
{
   295b0:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   295b2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   295b6:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   295b8:	4299      	cmp	r1, r3
   295ba:	f102 0104 	add.w	r1, r2, #4
   295be:	d10a      	bne.n	295d6 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   295c0:	2301      	movs	r3, #1
   295c2:	fa03 f202 	lsl.w	r2, r3, r2
   295c6:	68c3      	ldr	r3, [r0, #12]
   295c8:	ea23 0302 	bic.w	r3, r3, r2
   295cc:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   295ce:	2300      	movs	r3, #0
   295d0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   295d4:	bd10      	pop	{r4, pc}
   295d6:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   295d8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   295dc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   295e0:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   295e4:	80cb      	strh	r3, [r1, #6]
   295e6:	8082      	strh	r2, [r0, #4]
}
   295e8:	e7f4      	b.n	295d4 <free_list_remove_bidx+0x24>

000295ea <free_list_remove>:
{
   295ea:	b508      	push	{r3, lr}
   295ec:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   295ee:	f7ff ffb3 	bl	29558 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   295f2:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   295f6:	f1c2 021f 	rsb	r2, r2, #31
   295fa:	4618      	mov	r0, r3
}
   295fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   29600:	f7ff bfd6 	b.w	295b0 <free_list_remove_bidx>

00029604 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   29604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29608:	fab1 f581 	clz	r5, r1
   2960c:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   29610:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   29614:	4603      	mov	r3, r0
	if (b->next) {
   29616:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2961a:	460e      	mov	r6, r1
	if (b->next) {
   2961c:	b1c2      	cbz	r2, 29650 <alloc_chunk+0x4c>
   2961e:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   29620:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   29624:	4618      	mov	r0, r3
   29626:	4621      	mov	r1, r4
   29628:	f7ff ff96 	bl	29558 <chunk_size>
   2962c:	42b0      	cmp	r0, r6
   2962e:	d306      	bcc.n	2963e <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   29630:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   29632:	4618      	mov	r0, r3
   29634:	f7ff ffbc 	bl	295b0 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   29638:	4620      	mov	r0, r4
   2963a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2963e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   29642:	3f01      	subs	r7, #1
   29644:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   29646:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2964a:	d001      	beq.n	29650 <alloc_chunk+0x4c>
   2964c:	4282      	cmp	r2, r0
   2964e:	d1e7      	bne.n	29620 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   29650:	f1c5 0220 	rsb	r2, r5, #32
   29654:	f04f 34ff 	mov.w	r4, #4294967295
   29658:	4094      	lsls	r4, r2
   2965a:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2965c:	4014      	ands	r4, r2
   2965e:	d0eb      	beq.n	29638 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   29660:	fa94 f2a4 	rbit	r2, r4
   29664:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   29668:	1d11      	adds	r1, r2, #4
   2966a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2966e:	4621      	mov	r1, r4
   29670:	e7df      	b.n	29632 <alloc_chunk+0x2e>

00029672 <merge_chunks>:
{
   29672:	b538      	push	{r3, r4, r5, lr}
   29674:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   29676:	f7ff ff6f 	bl	29558 <chunk_size>
{
   2967a:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2967c:	4604      	mov	r4, r0
   2967e:	4611      	mov	r1, r2
   29680:	4618      	mov	r0, r3
   29682:	f7ff ff69 	bl	29558 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   29686:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2968a:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2968c:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2968e:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   29690:	4618      	mov	r0, r3
   29692:	f7ff ff61 	bl	29558 <chunk_size>
	void *cmem = &buf[c];
   29696:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   29698:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2969c:	bd38      	pop	{r3, r4, r5, pc}

0002969e <split_chunks>:
{
   2969e:	b538      	push	{r3, r4, r5, lr}
   296a0:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   296a2:	f7ff ff59 	bl	29558 <chunk_size>
{
   296a6:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   296a8:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   296aa:	1a51      	subs	r1, r2, r1
   296ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   296b0:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   296b2:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   296b4:	8060      	strh	r0, [r4, #2]
   296b6:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   296ba:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   296bc:	8044      	strh	r4, [r0, #2]
   296be:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   296c2:	4618      	mov	r0, r3
   296c4:	4611      	mov	r1, r2
   296c6:	f7ff ff47 	bl	29558 <chunk_size>
	void *cmem = &buf[c];
   296ca:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   296cc:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   296d0:	bd38      	pop	{r3, r4, r5, pc}

000296d2 <free_chunk>:
{
   296d2:	b538      	push	{r3, r4, r5, lr}
   296d4:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   296d6:	f7ff ff3f 	bl	29558 <chunk_size>
   296da:	460c      	mov	r4, r1
   296dc:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   296de:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   296e2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   296e4:	07da      	lsls	r2, r3, #31
   296e6:	d40a      	bmi.n	296fe <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   296e8:	4628      	mov	r0, r5
   296ea:	f7ff ff7e 	bl	295ea <free_list_remove>
	return c + chunk_size(h, c);
   296ee:	4621      	mov	r1, r4
   296f0:	4628      	mov	r0, r5
   296f2:	f7ff ff31 	bl	29558 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   296f6:	1822      	adds	r2, r4, r0
   296f8:	4628      	mov	r0, r5
   296fa:	f7ff ffba 	bl	29672 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   296fe:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   29702:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   29704:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   29708:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2970a:	07db      	lsls	r3, r3, #31
   2970c:	d40c      	bmi.n	29728 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2970e:	4628      	mov	r0, r5
   29710:	f7ff ff6b 	bl	295ea <free_list_remove>
		return ((uint16_t *)cmem)[f];
   29714:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   29718:	4622      	mov	r2, r4
   2971a:	1a61      	subs	r1, r4, r1
   2971c:	4628      	mov	r0, r5
   2971e:	f7ff ffa8 	bl	29672 <merge_chunks>
   29722:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   29726:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   29728:	4621      	mov	r1, r4
   2972a:	4628      	mov	r0, r5
}
   2972c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   29730:	f7ff bf17 	b.w	29562 <free_list_add>

00029734 <sys_heap_free>:
	if (mem == NULL) {
   29734:	b161      	cbz	r1, 29750 <sys_heap_free+0x1c>
   29736:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   29738:	3904      	subs	r1, #4
   2973a:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   2973c:	f021 0307 	bic.w	r3, r1, #7
   29740:	4403      	add	r3, r0
	free_chunk(h, c);
   29742:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   29744:	885a      	ldrh	r2, [r3, #2]
   29746:	f022 0201 	bic.w	r2, r2, #1
   2974a:	805a      	strh	r2, [r3, #2]
   2974c:	f7ff bfc1 	b.w	296d2 <free_chunk>
}
   29750:	4770      	bx	lr

00029752 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   29752:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   29754:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   29756:	b909      	cbnz	r1, 2975c <sys_heap_alloc+0xa>
		return NULL;
   29758:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2975a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2975c:	68ab      	ldr	r3, [r5, #8]
   2975e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   29762:	d9f9      	bls.n	29758 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   29764:	310b      	adds	r1, #11
   29766:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   29768:	4621      	mov	r1, r4
   2976a:	4628      	mov	r0, r5
   2976c:	f7ff ff4a 	bl	29604 <alloc_chunk>
	if (c == 0U) {
   29770:	4606      	mov	r6, r0
   29772:	2800      	cmp	r0, #0
   29774:	d0f0      	beq.n	29758 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   29776:	4601      	mov	r1, r0
   29778:	4628      	mov	r0, r5
   2977a:	f7ff feed 	bl	29558 <chunk_size>
   2977e:	42a0      	cmp	r0, r4
   29780:	d907      	bls.n	29792 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   29782:	1932      	adds	r2, r6, r4
   29784:	4628      	mov	r0, r5
   29786:	f7ff ff8a 	bl	2969e <split_chunks>
		free_list_add(h, c + chunk_sz);
   2978a:	4611      	mov	r1, r2
   2978c:	4628      	mov	r0, r5
   2978e:	f7ff fee8 	bl	29562 <free_list_add>
	void *cmem = &buf[c];
   29792:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   29796:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   29798:	8853      	ldrh	r3, [r2, #2]
   2979a:	f043 0301 	orr.w	r3, r3, #1
   2979e:	8053      	strh	r3, [r2, #2]
   297a0:	3004      	adds	r0, #4
	return mem;
   297a2:	e7da      	b.n	2975a <sys_heap_alloc+0x8>

000297a4 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   297a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   297a8:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   297ac:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   297b0:	6806      	ldr	r6, [r0, #0]
{
   297b2:	460f      	mov	r7, r1
   297b4:	4614      	mov	r4, r2
	if (align != rew) {
   297b6:	d00c      	beq.n	297d2 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   297b8:	424b      	negs	r3, r1
   297ba:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   297bc:	2b04      	cmp	r3, #4
   297be:	461a      	mov	r2, r3
   297c0:	464f      	mov	r7, r9
   297c2:	bf28      	it	cs
   297c4:	2204      	movcs	r2, #4
	rew = align & -align;
   297c6:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   297c8:	b964      	cbnz	r4, 297e4 <sys_heap_aligned_alloc+0x40>
		return NULL;
   297ca:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   297cc:	4628      	mov	r0, r5
   297ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   297d2:	2904      	cmp	r1, #4
   297d4:	d804      	bhi.n	297e0 <sys_heap_aligned_alloc+0x3c>
}
   297d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   297da:	4611      	mov	r1, r2
   297dc:	f7ff bfb9 	b.w	29752 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   297e0:	2204      	movs	r2, #4
   297e2:	e7f1      	b.n	297c8 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   297e4:	68b3      	ldr	r3, [r6, #8]
   297e6:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   297ea:	d9ee      	bls.n	297ca <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   297ec:	f104 010b 	add.w	r1, r4, #11
   297f0:	4439      	add	r1, r7
   297f2:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   297f4:	08c9      	lsrs	r1, r1, #3
   297f6:	4630      	mov	r0, r6
   297f8:	f7ff ff04 	bl	29604 <alloc_chunk>
	if (c0 == 0) {
   297fc:	4680      	mov	r8, r0
   297fe:	2800      	cmp	r0, #0
   29800:	d0e3      	beq.n	297ca <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   29802:	f109 0504 	add.w	r5, r9, #4
   29806:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   2980a:	1e7b      	subs	r3, r7, #1
   2980c:	4435      	add	r5, r6
   2980e:	441d      	add	r5, r3
   29810:	427f      	negs	r7, r7
   29812:	403d      	ands	r5, r7
   29814:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   29818:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2981a:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2981c:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2981e:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   29820:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   29824:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   29826:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2982a:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2982e:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   29832:	d208      	bcs.n	29846 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   29834:	4601      	mov	r1, r0
   29836:	463a      	mov	r2, r7
   29838:	4630      	mov	r0, r6
   2983a:	f7ff ff30 	bl	2969e <split_chunks>
		free_list_add(h, c0);
   2983e:	4641      	mov	r1, r8
   29840:	4630      	mov	r0, r6
   29842:	f7ff fe8e 	bl	29562 <free_list_add>
	return c + chunk_size(h, c);
   29846:	4639      	mov	r1, r7
   29848:	4630      	mov	r0, r6
   2984a:	f7ff fe85 	bl	29558 <chunk_size>
   2984e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   29850:	4284      	cmp	r4, r0
   29852:	d207      	bcs.n	29864 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   29854:	4630      	mov	r0, r6
   29856:	4622      	mov	r2, r4
   29858:	f7ff ff21 	bl	2969e <split_chunks>
		free_list_add(h, c_end);
   2985c:	4621      	mov	r1, r4
   2985e:	4630      	mov	r0, r6
   29860:	f7ff fe7f 	bl	29562 <free_list_add>
	void *cmem = &buf[c];
   29864:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   29868:	8873      	ldrh	r3, [r6, #2]
   2986a:	f043 0301 	orr.w	r3, r3, #1
   2986e:	8073      	strh	r3, [r6, #2]
   29870:	e7ac      	b.n	297cc <sys_heap_aligned_alloc+0x28>

00029872 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   29872:	3a04      	subs	r2, #4
{
   29874:	b4f0      	push	{r4, r5, r6, r7}
   29876:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   29878:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2987a:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2987c:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   29880:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   29884:	1a0e      	subs	r6, r1, r0
   29886:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   29888:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   2988a:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   2988e:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   29890:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   29894:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   29896:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   29898:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   2989a:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2989e:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   298a0:	f1c2 0220 	rsb	r2, r2, #32
   298a4:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   298a6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   298aa:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   298ae:	4294      	cmp	r4, r2
   298b0:	d1fb      	bne.n	298aa <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   298b2:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   298b4:	f042 0201 	orr.w	r2, r2, #1
   298b8:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   298ba:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   298be:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   298c0:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   298c2:	8007      	strh	r7, [r0, #0]
   298c4:	8065      	strh	r5, [r4, #2]
   298c6:	1984      	adds	r4, r0, r6
   298c8:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   298cc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   298d0:	8067      	strh	r7, [r4, #2]
   298d2:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   298d4:	885a      	ldrh	r2, [r3, #2]
   298d6:	f042 0201 	orr.w	r2, r2, #1
   298da:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   298dc:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   298de:	f7ff be40 	b.w	29562 <free_list_add>

000298e2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   298e2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   298e4:	f013 0307 	ands.w	r3, r3, #7
   298e8:	d105      	bne.n	298f6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   298ea:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   298ec:	2b00      	cmp	r3, #0
   298ee:	bf0c      	ite	eq
   298f0:	2000      	moveq	r0, #0
   298f2:	2003      	movne	r0, #3
   298f4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   298f6:	2b02      	cmp	r3, #2
   298f8:	d105      	bne.n	29906 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   298fa:	8b40      	ldrh	r0, [r0, #26]
   298fc:	fab0 f080 	clz	r0, r0
   29900:	0940      	lsrs	r0, r0, #5
   29902:	0080      	lsls	r0, r0, #2
   29904:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   29906:	2b01      	cmp	r3, #1
   29908:	d105      	bne.n	29916 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2990a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2990c:	2b00      	cmp	r3, #0
   2990e:	bf0c      	ite	eq
   29910:	2000      	moveq	r0, #0
   29912:	2005      	movne	r0, #5
   29914:	4770      	bx	lr
	int evt = EVT_NOP;
   29916:	2000      	movs	r0, #0
}
   29918:	4770      	bx	lr

0002991a <validate_args>:
{
   2991a:	b510      	push	{r4, lr}
   2991c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2991e:	b100      	cbz	r0, 29922 <validate_args+0x8>
   29920:	b911      	cbnz	r1, 29928 <validate_args+0xe>
		return -EINVAL;
   29922:	f06f 0015 	mvn.w	r0, #21
}
   29926:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   29928:	1d08      	adds	r0, r1, #4
   2992a:	f000 f895 	bl	29a58 <sys_notify_validate>
	if ((rv == 0)
   2992e:	2800      	cmp	r0, #0
   29930:	d1f9      	bne.n	29926 <validate_args+0xc>
	    && ((cli->notify.flags
   29932:	68a3      	ldr	r3, [r4, #8]
   29934:	2b03      	cmp	r3, #3
   29936:	d9f6      	bls.n	29926 <validate_args+0xc>
   29938:	e7f3      	b.n	29922 <validate_args+0x8>

0002993a <notify_one>:
{
   2993a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2993e:	460d      	mov	r5, r1
   29940:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   29942:	4619      	mov	r1, r3
   29944:	1d28      	adds	r0, r5, #4
{
   29946:	4690      	mov	r8, r2
   29948:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2994a:	f000 f899 	bl	29a80 <sys_notify_finalize>
	if (cb) {
   2994e:	4604      	mov	r4, r0
   29950:	b138      	cbz	r0, 29962 <notify_one+0x28>
		cb(mgr, cli, state, res);
   29952:	4633      	mov	r3, r6
   29954:	4642      	mov	r2, r8
   29956:	4629      	mov	r1, r5
   29958:	4638      	mov	r0, r7
   2995a:	46a4      	mov	ip, r4
}
   2995c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   29960:	4760      	bx	ip
}
   29962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029966 <transition_complete>:
{
   29966:	b410      	push	{r4}
	__asm__ volatile(
   29968:	f04f 0440 	mov.w	r4, #64	; 0x40
   2996c:	f3ef 8211 	mrs	r2, BASEPRI
   29970:	f384 8812 	msr	BASEPRI_MAX, r4
   29974:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   29978:	6141      	str	r1, [r0, #20]
}
   2997a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   2997c:	2101      	movs	r1, #1
   2997e:	f7e9 b841 	b.w	12a04 <process_event>

00029982 <onoff_manager_init>:
{
   29982:	b538      	push	{r3, r4, r5, lr}
   29984:	460c      	mov	r4, r1
	if ((mgr == NULL)
   29986:	4605      	mov	r5, r0
   29988:	b158      	cbz	r0, 299a2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2998a:	b151      	cbz	r1, 299a2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2998c:	680b      	ldr	r3, [r1, #0]
   2998e:	b143      	cbz	r3, 299a2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   29990:	684b      	ldr	r3, [r1, #4]
   29992:	b133      	cbz	r3, 299a2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   29994:	221c      	movs	r2, #28
   29996:	2100      	movs	r1, #0
   29998:	f002 f98d 	bl	2bcb6 <memset>
   2999c:	612c      	str	r4, [r5, #16]
	return 0;
   2999e:	2000      	movs	r0, #0
}
   299a0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   299a2:	f06f 0015 	mvn.w	r0, #21
   299a6:	e7fb      	b.n	299a0 <onoff_manager_init+0x1e>

000299a8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   299a8:	b570      	push	{r4, r5, r6, lr}
   299aa:	4605      	mov	r5, r0
   299ac:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   299ae:	f7ff ffb4 	bl	2991a <validate_args>

	if (rv < 0) {
   299b2:	1e04      	subs	r4, r0, #0
   299b4:	db15      	blt.n	299e2 <onoff_request+0x3a>
   299b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   299ba:	f3ef 8211 	mrs	r2, BASEPRI
   299be:	f383 8812 	msr	BASEPRI_MAX, r3
   299c2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   299c6:	8b6b      	ldrh	r3, [r5, #26]
   299c8:	8b2c      	ldrh	r4, [r5, #24]
   299ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   299ce:	428b      	cmp	r3, r1
   299d0:	f004 0407 	and.w	r4, r4, #7
   299d4:	d107      	bne.n	299e6 <onoff_request+0x3e>
	__asm__ volatile(
   299d6:	f382 8811 	msr	BASEPRI, r2
   299da:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   299de:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   299e2:	4620      	mov	r0, r4
   299e4:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   299e6:	2c02      	cmp	r4, #2
   299e8:	d10c      	bne.n	29a04 <onoff_request+0x5c>
		mgr->refs += 1U;
   299ea:	3301      	adds	r3, #1
   299ec:	836b      	strh	r3, [r5, #26]
   299ee:	f382 8811 	msr	BASEPRI, r2
   299f2:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   299f6:	2300      	movs	r3, #0
   299f8:	4622      	mov	r2, r4
   299fa:	4631      	mov	r1, r6
   299fc:	4628      	mov	r0, r5
   299fe:	f7ff ff9c 	bl	2993a <notify_one>
   29a02:	e7ee      	b.n	299e2 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   29a04:	2c06      	cmp	r4, #6
   29a06:	d814      	bhi.n	29a32 <onoff_request+0x8a>
   29a08:	e8df f004 	tbb	[pc, r4]
   29a0c:	13131304 	.word	0x13131304
   29a10:	1a04      	.short	0x1a04
   29a12:	04          	.byte	0x04
   29a13:	00          	.byte	0x00
	parent->next = child;
   29a14:	2300      	movs	r3, #0
   29a16:	6033      	str	r3, [r6, #0]
	return list->tail;
   29a18:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   29a1a:	b93b      	cbnz	r3, 29a2c <onoff_request+0x84>
	list->head = node;
   29a1c:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   29a20:	b9ac      	cbnz	r4, 29a4e <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   29a22:	2102      	movs	r1, #2
   29a24:	4628      	mov	r0, r5
   29a26:	f7e8 ffed 	bl	12a04 <process_event>
   29a2a:	e7da      	b.n	299e2 <onoff_request+0x3a>
	parent->next = child;
   29a2c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   29a2e:	606e      	str	r6, [r5, #4]
}
   29a30:	e7f6      	b.n	29a20 <onoff_request+0x78>
   29a32:	f382 8811 	msr	BASEPRI, r2
   29a36:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   29a3a:	f06f 0404 	mvn.w	r4, #4
   29a3e:	e7d0      	b.n	299e2 <onoff_request+0x3a>
   29a40:	f382 8811 	msr	BASEPRI, r2
   29a44:	f3bf 8f6f 	isb	sy
   29a48:	f06f 0485 	mvn.w	r4, #133	; 0x85
   29a4c:	e7c9      	b.n	299e2 <onoff_request+0x3a>
   29a4e:	f382 8811 	msr	BASEPRI, r2
   29a52:	f3bf 8f6f 	isb	sy
		if (notify) {
   29a56:	e7c4      	b.n	299e2 <onoff_request+0x3a>

00029a58 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   29a58:	4603      	mov	r3, r0
   29a5a:	b140      	cbz	r0, 29a6e <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   29a5c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   29a5e:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   29a62:	2a02      	cmp	r2, #2
   29a64:	d006      	beq.n	29a74 <sys_notify_validate+0x1c>
   29a66:	2a03      	cmp	r2, #3
   29a68:	d004      	beq.n	29a74 <sys_notify_validate+0x1c>
   29a6a:	2a01      	cmp	r2, #1
   29a6c:	d005      	beq.n	29a7a <sys_notify_validate+0x22>
   29a6e:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   29a72:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   29a74:	681a      	ldr	r2, [r3, #0]
   29a76:	2a00      	cmp	r2, #0
   29a78:	d0f9      	beq.n	29a6e <sys_notify_validate+0x16>
		notify->result = 0;
   29a7a:	2000      	movs	r0, #0
   29a7c:	6098      	str	r0, [r3, #8]
   29a7e:	4770      	bx	lr

00029a80 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   29a80:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   29a82:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   29a84:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   29a86:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   29a8a:	2a02      	cmp	r2, #2
{
   29a8c:	4603      	mov	r3, r0
	switch (method) {
   29a8e:	f04f 0400 	mov.w	r4, #0
   29a92:	d007      	beq.n	29aa4 <sys_notify_finalize+0x24>
   29a94:	2a03      	cmp	r2, #3
   29a96:	d002      	beq.n	29a9e <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   29a98:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   29a9a:	2000      	movs	r0, #0
   29a9c:	e001      	b.n	29aa2 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   29a9e:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   29aa0:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   29aa2:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   29aa4:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   29aa6:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   29aa8:	2800      	cmp	r0, #0
   29aaa:	d0f6      	beq.n	29a9a <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   29aac:	f7fc fc48 	bl	26340 <z_impl_k_poll_signal_raise>
   29ab0:	e7f3      	b.n	29a9a <sys_notify_finalize+0x1a>

00029ab2 <encode_uint>:
{
   29ab2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ab6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   29ab8:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   29aba:	2b6f      	cmp	r3, #111	; 0x6f
{
   29abc:	4680      	mov	r8, r0
   29abe:	460f      	mov	r7, r1
   29ac0:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   29ac2:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   29ac6:	d029      	beq.n	29b1c <encode_uint+0x6a>
   29ac8:	d824      	bhi.n	29b14 <encode_uint+0x62>
		return 10;
   29aca:	2b58      	cmp	r3, #88	; 0x58
   29acc:	bf0c      	ite	eq
   29ace:	2610      	moveq	r6, #16
   29ad0:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   29ad2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   29ad6:	4632      	mov	r2, r6
   29ad8:	2300      	movs	r3, #0
   29ada:	4640      	mov	r0, r8
   29adc:	4639      	mov	r1, r7
   29ade:	f7d6 fb0f 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   29ae2:	2a09      	cmp	r2, #9
   29ae4:	b2d4      	uxtb	r4, r2
   29ae6:	d81e      	bhi.n	29b26 <encode_uint+0x74>
   29ae8:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   29aea:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   29aec:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   29aee:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   29af2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   29af6:	d301      	bcc.n	29afc <encode_uint+0x4a>
   29af8:	45d1      	cmp	r9, sl
   29afa:	d811      	bhi.n	29b20 <encode_uint+0x6e>
	if (conv->flag_hash) {
   29afc:	782b      	ldrb	r3, [r5, #0]
   29afe:	069b      	lsls	r3, r3, #26
   29b00:	d505      	bpl.n	29b0e <encode_uint+0x5c>
		if (radix == 8) {
   29b02:	2e08      	cmp	r6, #8
   29b04:	d115      	bne.n	29b32 <encode_uint+0x80>
			conv->altform_0 = true;
   29b06:	78ab      	ldrb	r3, [r5, #2]
   29b08:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   29b0c:	70ab      	strb	r3, [r5, #2]
}
   29b0e:	4648      	mov	r0, r9
   29b10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   29b14:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   29b18:	2b70      	cmp	r3, #112	; 0x70
   29b1a:	e7d7      	b.n	29acc <encode_uint+0x1a>
	switch (specifier) {
   29b1c:	2608      	movs	r6, #8
   29b1e:	e7d8      	b.n	29ad2 <encode_uint+0x20>
		value /= radix;
   29b20:	4680      	mov	r8, r0
   29b22:	460f      	mov	r7, r1
   29b24:	e7d7      	b.n	29ad6 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   29b26:	f1bb 0f19 	cmp.w	fp, #25
   29b2a:	bf94      	ite	ls
   29b2c:	3437      	addls	r4, #55	; 0x37
   29b2e:	3457      	addhi	r4, #87	; 0x57
   29b30:	e7db      	b.n	29aea <encode_uint+0x38>
		} else if (radix == 16) {
   29b32:	2e10      	cmp	r6, #16
   29b34:	d1eb      	bne.n	29b0e <encode_uint+0x5c>
			conv->altform_0c = true;
   29b36:	78ab      	ldrb	r3, [r5, #2]
   29b38:	f043 0310 	orr.w	r3, r3, #16
   29b3c:	e7e6      	b.n	29b0c <encode_uint+0x5a>

00029b3e <outs>:
{
   29b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29b42:	4607      	mov	r7, r0
   29b44:	4688      	mov	r8, r1
   29b46:	4615      	mov	r5, r2
   29b48:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   29b4a:	4614      	mov	r4, r2
   29b4c:	42b4      	cmp	r4, r6
   29b4e:	d305      	bcc.n	29b5c <outs+0x1e>
   29b50:	b10e      	cbz	r6, 29b56 <outs+0x18>
	return (int)count;
   29b52:	1b60      	subs	r0, r4, r5
   29b54:	e008      	b.n	29b68 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   29b56:	7823      	ldrb	r3, [r4, #0]
   29b58:	2b00      	cmp	r3, #0
   29b5a:	d0fa      	beq.n	29b52 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   29b5c:	f814 0b01 	ldrb.w	r0, [r4], #1
   29b60:	4641      	mov	r1, r8
   29b62:	47b8      	blx	r7
		if (rc < 0) {
   29b64:	2800      	cmp	r0, #0
   29b66:	daf1      	bge.n	29b4c <outs+0xe>
}
   29b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029b6c <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   29b6c:	b40f      	push	{r0, r1, r2, r3}
   29b6e:	b507      	push	{r0, r1, r2, lr}
   29b70:	a904      	add	r1, sp, #16
   29b72:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   29b76:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   29b78:	f7ff fcc8 	bl	2950c <vprintk>

	va_end(ap);
}
   29b7c:	b003      	add	sp, #12
   29b7e:	f85d eb04 	ldr.w	lr, [sp], #4
   29b82:	b004      	add	sp, #16
   29b84:	4770      	bx	lr

00029b86 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   29b86:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   29b88:	6903      	ldr	r3, [r0, #16]
{
   29b8a:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   29b8c:	f013 0008 	ands.w	r0, r3, #8
   29b90:	d109      	bne.n	29ba6 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   29b92:	6813      	ldr	r3, [r2, #0]
   29b94:	68d4      	ldr	r4, [r2, #12]
   29b96:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
   29b98:	bf97      	itett	ls
   29b9a:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   29b9c:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   29b9e:	1ad3      	subls	r3, r2, r3

	return true;
   29ba0:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   29ba2:	600b      	str	r3, [r1, #0]
}
   29ba4:	bd10      	pop	{r4, pc}
   29ba6:	2300      	movs	r3, #0
		return false;
   29ba8:	4618      	mov	r0, r3
   29baa:	e7fa      	b.n	29ba2 <free_space+0x1c>

00029bac <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   29bac:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   29bae:	a901      	add	r1, sp, #4
{
   29bb0:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   29bb2:	f7ff ffe8 	bl	29b86 <free_space>
   29bb6:	b120      	cbz	r0, 29bc2 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   29bb8:	9b01      	ldr	r3, [sp, #4]
   29bba:	68e2      	ldr	r2, [r4, #12]
   29bbc:	3b01      	subs	r3, #1
   29bbe:	4413      	add	r3, r2
   29bc0:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   29bc2:	6a20      	ldr	r0, [r4, #32]
   29bc4:	9b01      	ldr	r3, [sp, #4]
   29bc6:	1ac0      	subs	r0, r0, r3
}
   29bc8:	3801      	subs	r0, #1
   29bca:	b002      	add	sp, #8
   29bcc:	bd10      	pop	{r4, pc}

00029bce <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
   29bce:	b510      	push	{r4, lr}
   29bd0:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   29bd2:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   29bd4:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   29bd6:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   29bd8:	07d2      	lsls	r2, r2, #31
   29bda:	d502      	bpl.n	29be2 <idx_inc+0x14>
		return i & (buffer->size - 1);
   29bdc:	3b01      	subs	r3, #1
   29bde:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   29be0:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   29be2:	4298      	cmp	r0, r3
   29be4:	bf28      	it	cs
   29be6:	1ac0      	subcs	r0, r0, r3
   29be8:	e7fa      	b.n	29be0 <idx_inc+0x12>

00029bea <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
   29bea:	b510      	push	{r4, lr}
   29bec:	4604      	mov	r4, r0
   29bee:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   29bf0:	68c1      	ldr	r1, [r0, #12]
   29bf2:	f7ff ffec 	bl	29bce <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   29bf6:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   29bf8:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   29bfa:	f023 0308 	bic.w	r3, r3, #8
   29bfe:	6123      	str	r3, [r4, #16]
}
   29c00:	bd10      	pop	{r4, pc}

00029c02 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   29c02:	b538      	push	{r3, r4, r5, lr}
   29c04:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   29c06:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   29c08:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   29c0a:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   29c0c:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   29c10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
   29c14:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   29c16:	6801      	ldr	r1, [r0, #0]
   29c18:	462a      	mov	r2, r5
   29c1a:	f7ff ffd8 	bl	29bce <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   29c1e:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   29c20:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   29c22:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   29c24:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   29c26:	bf02      	ittt	eq
   29c28:	6923      	ldreq	r3, [r4, #16]
   29c2a:	f043 0308 	orreq.w	r3, r3, #8
   29c2e:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   29c30:	462a      	mov	r2, r5
   29c32:	4620      	mov	r0, r4
   29c34:	f7ff ffcb 	bl	29bce <idx_inc>
   29c38:	6060      	str	r0, [r4, #4]
}
   29c3a:	bd38      	pop	{r3, r4, r5, pc}

00029c3c <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
   29c3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   29c40:	68c7      	ldr	r7, [r0, #12]
   29c42:	69c6      	ldr	r6, [r0, #28]
{
   29c44:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   29c46:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   29c4a:	f003 0303 	and.w	r3, r3, #3
   29c4e:	2b02      	cmp	r3, #2
{
   29c50:	4604      	mov	r4, r0
   29c52:	4688      	mov	r8, r1
   29c54:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   29c56:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   29c5a:	f04f 0300 	mov.w	r3, #0
   29c5e:	d009      	beq.n	29c74 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
   29c60:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   29c62:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   29c66:	6923      	ldr	r3, [r4, #16]
   29c68:	0799      	lsls	r1, r3, #30
   29c6a:	d410      	bmi.n	29c8e <drop_item_locked+0x52>
		return false;
   29c6c:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
   29c6e:	b003      	add	sp, #12
   29c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   29c74:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   29c78:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   29c7a:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   29c7c:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   29c80:	d0f1      	beq.n	29c66 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   29c82:	f7ff ffb2 	bl	29bea <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   29c86:	68e3      	ldr	r3, [r4, #12]
   29c88:	60a3      	str	r3, [r4, #8]
		return true;
   29c8a:	2001      	movs	r0, #1
   29c8c:	e7ef      	b.n	29c6e <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   29c8e:	69a3      	ldr	r3, [r4, #24]
   29c90:	4650      	mov	r0, sl
   29c92:	4798      	blx	r3
	return item->hdr.valid;
   29c94:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
   29c98:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
   29c9a:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   29c9c:	d5e6      	bpl.n	29c6c <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   29c9e:	f013 0302 	ands.w	r3, r3, #2
   29ca2:	d01d      	beq.n	29ce0 <drop_item_locked+0xa4>
		if (free_wlen) {
   29ca4:	f1b8 0f00 	cmp.w	r8, #0
   29ca8:	d003      	beq.n	29cb2 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   29caa:	4641      	mov	r1, r8
   29cac:	4620      	mov	r0, r4
   29cae:	f7ff ffa8 	bl	29c02 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   29cb2:	6861      	ldr	r1, [r4, #4]
   29cb4:	462a      	mov	r2, r5
   29cb6:	4620      	mov	r0, r4
   29cb8:	f7ff ff89 	bl	29bce <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   29cbc:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   29cc0:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   29cc2:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   29cc4:	d104      	bne.n	29cd0 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   29cc6:	462a      	mov	r2, r5
   29cc8:	4620      	mov	r0, r4
   29cca:	f7ff ff80 	bl	29bce <idx_inc>
   29cce:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   29cd0:	68a3      	ldr	r3, [r4, #8]
   29cd2:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   29cd4:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   29cd6:	6923      	ldr	r3, [r4, #16]
   29cd8:	f043 0308 	orr.w	r3, r3, #8
   29cdc:	6123      	str	r3, [r4, #16]
   29cde:	e7d4      	b.n	29c8a <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   29ce0:	4601      	mov	r1, r0
   29ce2:	4620      	mov	r0, r4
   29ce4:	9301      	str	r3, [sp, #4]
   29ce6:	f7ff ff80 	bl	29bea <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   29cea:	68e2      	ldr	r2, [r4, #12]
   29cec:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   29cee:	f1b8 0f00 	cmp.w	r8, #0
   29cf2:	d004      	beq.n	29cfe <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   29cf4:	6821      	ldr	r1, [r4, #0]
   29cf6:	69e2      	ldr	r2, [r4, #28]
   29cf8:	9b01      	ldr	r3, [sp, #4]
   29cfa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   29cfe:	eb05 0208 	add.w	r2, r5, r8
   29d02:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   29d06:	6821      	ldr	r1, [r4, #0]
   29d08:	4620      	mov	r0, r4
   29d0a:	f7ff ff60 	bl	29bce <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   29d0e:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   29d10:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   29d12:	f043 0308 	orr.w	r3, r3, #8
   29d16:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   29d18:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   29d1c:	f36f 0300 	bfc	r3, #0, #1
   29d20:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   29d24:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   29d28:	e7af      	b.n	29c8a <drop_item_locked+0x4e>

00029d2a <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
   29d2a:	b570      	push	{r4, r5, r6, lr}
   29d2c:	4604      	mov	r4, r0
   29d2e:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   29d30:	f7ff ff4d 	bl	29bce <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   29d34:	6823      	ldr	r3, [r4, #0]
   29d36:	4283      	cmp	r3, r0
   29d38:	d105      	bne.n	29d46 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
   29d3a:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   29d3c:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   29d3e:	f023 0308 	bic.w	r3, r3, #8
   29d42:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
   29d44:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   29d46:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
   29d48:	00ab      	lsls	r3, r5, #2
   29d4a:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   29d4e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   29d52:	4620      	mov	r0, r4
   29d54:	6861      	ldr	r1, [r4, #4]
   29d56:	462a      	mov	r2, r5
   29d58:	f7ff ff39 	bl	29bce <idx_inc>
   29d5c:	6060      	str	r0, [r4, #4]
   29d5e:	e7f1      	b.n	29d44 <post_drop_action+0x1a>

00029d60 <max_utilization_update>:
{
   29d60:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   29d62:	6903      	ldr	r3, [r0, #16]
   29d64:	075b      	lsls	r3, r3, #29
{
   29d66:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   29d68:	d506      	bpl.n	29d78 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   29d6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
   29d6c:	f7ff ff1e 	bl	29bac <get_usage>
   29d70:	4285      	cmp	r5, r0
   29d72:	bf2c      	ite	cs
   29d74:	6265      	strcs	r5, [r4, #36]	; 0x24
   29d76:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   29d78:	bd38      	pop	{r3, r4, r5, pc}

00029d7a <mpsc_pbuf_init>:
{
   29d7a:	b538      	push	{r3, r4, r5, lr}
   29d7c:	460d      	mov	r5, r1
   29d7e:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   29d80:	221c      	movs	r2, #28
   29d82:	2100      	movs	r1, #0
   29d84:	f001 ff97 	bl	2bcb6 <memset>
	buffer->get_wlen = cfg->get_wlen;
   29d88:	68eb      	ldr	r3, [r5, #12]
   29d8a:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   29d8c:	68ab      	ldr	r3, [r5, #8]
   29d8e:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   29d90:	682b      	ldr	r3, [r5, #0]
   29d92:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   29d94:	686b      	ldr	r3, [r5, #4]
   29d96:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   29d98:	2200      	movs	r2, #0
   29d9a:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   29d9c:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   29d9e:	b123      	cbz	r3, 29daa <mpsc_pbuf_init+0x30>
   29da0:	1e59      	subs	r1, r3, #1
   29da2:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   29da4:	bf08      	it	eq
   29da6:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   29daa:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   29dac:	2201      	movs	r2, #1
   29dae:	f104 0028 	add.w	r0, r4, #40	; 0x28
   29db2:	2100      	movs	r1, #0
}
   29db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29db8:	f005 b90b 	b.w	2efd2 <z_impl_k_sem_init>

00029dbc <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   29dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29dc0:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
   29dc2:	2500      	movs	r5, #0
{
   29dc4:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   29dc6:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
   29dc8:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
   29dca:	428b      	cmp	r3, r1
{
   29dcc:	4604      	mov	r4, r0
   29dce:	460e      	mov	r6, r1
   29dd0:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
   29dd2:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   29dd4:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
   29dd6:	d33a      	bcc.n	29e4e <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
   29dd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   29ddc:	f3ef 8b11 	mrs	fp, BASEPRI
   29de0:	f383 8812 	msr	BASEPRI_MAX, r3
   29de4:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
   29de8:	9a05      	ldr	r2, [sp, #20]
   29dea:	46d8      	mov	r8, fp
   29dec:	b12a      	cbz	r2, 29dfa <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   29dee:	4629      	mov	r1, r5
   29df0:	4620      	mov	r0, r4
   29df2:	f7ff ff9a 	bl	29d2a <post_drop_action>
			tmp_wr_idx_shift = 0;
   29df6:	2300      	movs	r3, #0
   29df8:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
   29dfa:	a904      	add	r1, sp, #16
   29dfc:	4620      	mov	r0, r4
   29dfe:	f7ff fec2 	bl	29b86 <free_space>

		if (free_wlen >= wlen) {
   29e02:	9904      	ldr	r1, [sp, #16]
   29e04:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
   29e06:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
   29e08:	d32a      	bcc.n	29e60 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   29e0a:	6822      	ldr	r2, [r4, #0]
			item =
   29e0c:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   29e0e:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   29e12:	f021 0103 	bic.w	r1, r1, #3
   29e16:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   29e1a:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   29e1e:	6821      	ldr	r1, [r4, #0]
   29e20:	4632      	mov	r2, r6
   29e22:	4620      	mov	r0, r4
   29e24:	f7ff fed3 	bl	29bce <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   29e28:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   29e2a:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   29e2c:	4298      	cmp	r0, r3
   29e2e:	d012      	beq.n	29e56 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   29e30:	2700      	movs	r7, #0
	__asm__ volatile(
   29e32:	f388 8811 	msr	BASEPRI, r8
   29e36:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   29e3a:	9903      	ldr	r1, [sp, #12]
   29e3c:	b129      	cbz	r1, 29e4a <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   29e3e:	6962      	ldr	r2, [r4, #20]
   29e40:	b10a      	cbz	r2, 29e46 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
   29e42:	4620      	mov	r0, r4
   29e44:	4790      	blx	r2
			}
			dropped_item = NULL;
   29e46:	2300      	movs	r3, #0
   29e48:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
   29e4a:	2f00      	cmp	r7, #0
   29e4c:	d1c4      	bne.n	29dd8 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   29e4e:	4648      	mov	r0, r9
   29e50:	b007      	add	sp, #28
   29e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   29e56:	6923      	ldr	r3, [r4, #16]
   29e58:	f043 0308 	orr.w	r3, r3, #8
   29e5c:	6123      	str	r3, [r4, #16]
   29e5e:	e7e7      	b.n	29e30 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
   29e60:	b118      	cbz	r0, 29e6a <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
   29e62:	4620      	mov	r0, r4
   29e64:	f7ff fecd 	bl	29c02 <add_skip_item>
			cont = true;
   29e68:	e7e3      	b.n	29e32 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   29e6a:	9b00      	ldr	r3, [sp, #0]
   29e6c:	ea5a 0303 	orrs.w	r3, sl, r3
   29e70:	d01a      	beq.n	29ea8 <mpsc_pbuf_alloc+0xec>
   29e72:	9101      	str	r1, [sp, #4]
   29e74:	f004 fff3 	bl	2ee5e <k_is_in_isr>
   29e78:	9901      	ldr	r1, [sp, #4]
   29e7a:	b9a8      	cbnz	r0, 29ea8 <mpsc_pbuf_alloc+0xec>
   29e7c:	f38b 8811 	msr	BASEPRI, fp
   29e80:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   29e84:	9b00      	ldr	r3, [sp, #0]
   29e86:	4652      	mov	r2, sl
   29e88:	f104 0028 	add.w	r0, r4, #40	; 0x28
   29e8c:	f7fb fa92 	bl	253b4 <z_impl_k_sem_take>
	__asm__ volatile(
   29e90:	f04f 0340 	mov.w	r3, #64	; 0x40
   29e94:	f3ef 8811 	mrs	r8, BASEPRI
   29e98:	f383 8812 	msr	BASEPRI_MAX, r3
   29e9c:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
   29ea0:	fab0 f780 	clz	r7, r0
   29ea4:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   29ea6:	e7c4      	b.n	29e32 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
   29ea8:	ab05      	add	r3, sp, #20
   29eaa:	aa03      	add	r2, sp, #12
   29eac:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   29eae:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   29eb0:	f7ff fec4 	bl	29c3c <drop_item_locked>
   29eb4:	4607      	mov	r7, r0
   29eb6:	e7bc      	b.n	29e32 <mpsc_pbuf_alloc+0x76>

00029eb8 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   29eb8:	b570      	push	{r4, r5, r6, lr}
   29eba:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   29ebc:	6983      	ldr	r3, [r0, #24]
   29ebe:	4608      	mov	r0, r1
{
   29ec0:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   29ec2:	4798      	blx	r3
   29ec4:	4602      	mov	r2, r0
   29ec6:	f04f 0340 	mov.w	r3, #64	; 0x40
   29eca:	f3ef 8611 	mrs	r6, BASEPRI
   29ece:	f383 8812 	msr	BASEPRI_MAX, r3
   29ed2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   29ed6:	782b      	ldrb	r3, [r5, #0]
   29ed8:	f043 0301 	orr.w	r3, r3, #1
   29edc:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   29ede:	6861      	ldr	r1, [r4, #4]
   29ee0:	4620      	mov	r0, r4
   29ee2:	f7ff fe74 	bl	29bce <idx_inc>
   29ee6:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   29ee8:	4620      	mov	r0, r4
   29eea:	f7ff ff39 	bl	29d60 <max_utilization_update>
	__asm__ volatile(
   29eee:	f386 8811 	msr	BASEPRI, r6
   29ef2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   29ef6:	bd70      	pop	{r4, r5, r6, pc}

00029ef8 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   29ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29efa:	4604      	mov	r4, r0
	__asm__ volatile(
   29efc:	f04f 0340 	mov.w	r3, #64	; 0x40
   29f00:	f3ef 8611 	mrs	r6, BASEPRI
   29f04:	f383 8812 	msr	BASEPRI_MAX, r3
   29f08:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   29f0c:	6923      	ldr	r3, [r4, #16]
   29f0e:	f013 0f08 	tst.w	r3, #8
   29f12:	68a3      	ldr	r3, [r4, #8]
   29f14:	d102      	bne.n	29f1c <mpsc_pbuf_claim+0x24>
   29f16:	6862      	ldr	r2, [r4, #4]
   29f18:	4293      	cmp	r3, r2
   29f1a:	d900      	bls.n	29f1e <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
   29f1c:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   29f1e:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   29f20:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   29f22:	b92a      	cbnz	r2, 29f30 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
   29f24:	f386 8811 	msr	BASEPRI, r6
   29f28:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
   29f2c:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   29f2e:	e033      	b.n	29f98 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
   29f30:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
   29f34:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
   29f38:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   29f3c:	d0f2      	beq.n	29f24 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
   29f3e:	2802      	cmp	r0, #2
   29f40:	d103      	bne.n	29f4a <mpsc_pbuf_claim+0x52>
		return item->skip.len;
   29f42:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   29f46:	08ad      	lsrs	r5, r5, #2
   29f48:	d105      	bne.n	29f56 <mpsc_pbuf_claim+0x5e>
   29f4a:	07d0      	lsls	r0, r2, #31
   29f4c:	d412      	bmi.n	29f74 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
   29f4e:	69a3      	ldr	r3, [r4, #24]
   29f50:	4638      	mov	r0, r7
   29f52:	4798      	blx	r3
   29f54:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   29f56:	68a1      	ldr	r1, [r4, #8]
   29f58:	462a      	mov	r2, r5
   29f5a:	4620      	mov	r0, r4
   29f5c:	f7ff fe37 	bl	29bce <idx_inc>
				rd_idx_inc(buffer, inc);
   29f60:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
   29f62:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   29f64:	4620      	mov	r0, r4
   29f66:	f7ff fe40 	bl	29bea <rd_idx_inc>
   29f6a:	f386 8811 	msr	BASEPRI, r6
   29f6e:	f3bf 8f6f 	isb	sy
	} while (cont);
   29f72:	e7c3      	b.n	29efc <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   29f74:	f042 0202 	orr.w	r2, r2, #2
   29f78:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
   29f7c:	4638      	mov	r0, r7
   29f7e:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   29f80:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   29f82:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   29f84:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   29f86:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   29f88:	4620      	mov	r0, r4
   29f8a:	f7ff fe20 	bl	29bce <idx_inc>
				buffer->tmp_rd_idx =
   29f8e:	60a0      	str	r0, [r4, #8]
   29f90:	f386 8811 	msr	BASEPRI, r6
   29f94:	f3bf 8f6f 	isb	sy
}
   29f98:	4638      	mov	r0, r7
   29f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029f9c <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   29f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29f9e:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   29fa0:	6983      	ldr	r3, [r0, #24]
   29fa2:	4608      	mov	r0, r1
{
   29fa4:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   29fa6:	4798      	blx	r3
   29fa8:	4606      	mov	r6, r0
	__asm__ volatile(
   29faa:	f04f 0340 	mov.w	r3, #64	; 0x40
   29fae:	f3ef 8711 	mrs	r7, BASEPRI
   29fb2:	f383 8812 	msr	BASEPRI_MAX, r3
   29fb6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   29fba:	782b      	ldrb	r3, [r5, #0]
   29fbc:	f36f 0300 	bfc	r3, #0, #1
   29fc0:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   29fc2:	6923      	ldr	r3, [r4, #16]
   29fc4:	079b      	lsls	r3, r3, #30
   29fc6:	d505      	bpl.n	29fd4 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   29fc8:	68e2      	ldr	r2, [r4, #12]
   29fca:	69e3      	ldr	r3, [r4, #28]
   29fcc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   29fd0:	429d      	cmp	r5, r3
   29fd2:	d11a      	bne.n	2a00a <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
   29fd4:	782b      	ldrb	r3, [r5, #0]
   29fd6:	f36f 0341 	bfc	r3, #1, #1
   29fda:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   29fdc:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   29fe0:	4299      	cmp	r1, r3
   29fe2:	d104      	bne.n	29fee <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   29fe4:	4632      	mov	r2, r6
   29fe6:	4620      	mov	r0, r4
   29fe8:	f7ff fdf1 	bl	29bce <idx_inc>
   29fec:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   29fee:	4631      	mov	r1, r6
   29ff0:	4620      	mov	r0, r4
   29ff2:	f7ff fdfa 	bl	29bea <rd_idx_inc>
	__asm__ volatile(
   29ff6:	f387 8811 	msr	BASEPRI, r7
   29ffa:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   29ffe:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   2a002:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a006:	f7fb b9af 	b.w	25368 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   2a00a:	682b      	ldr	r3, [r5, #0]
   2a00c:	f360 039f 	bfi	r3, r0, #2, #30
   2a010:	602b      	str	r3, [r5, #0]
   2a012:	e7f0      	b.n	29ff6 <mpsc_pbuf_free+0x5a>

0002a014 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   2a014:	6902      	ldr	r2, [r0, #16]
   2a016:	6883      	ldr	r3, [r0, #8]
   2a018:	0712      	lsls	r2, r2, #28
   2a01a:	d402      	bmi.n	2a022 <mpsc_pbuf_is_pending+0xe>
   2a01c:	6842      	ldr	r2, [r0, #4]
   2a01e:	429a      	cmp	r2, r3
   2a020:	d200      	bcs.n	2a024 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   2a022:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   2a024:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   2a026:	1e18      	subs	r0, r3, #0
   2a028:	bf18      	it	ne
   2a02a:	2001      	movne	r0, #1
   2a02c:	4770      	bx	lr

0002a02e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2a02e:	4770      	bx	lr

0002a030 <nvs_flash_rd>:
{
   2a030:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2a032:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2a034:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   2a036:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2a038:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2a03a:	fa16 f181 	uxtah	r1, r6, r1
   2a03e:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   2a042:	6884      	ldr	r4, [r0, #8]
   2a044:	6824      	ldr	r4, [r4, #0]
   2a046:	46a4      	mov	ip, r4
}
   2a048:	bc70      	pop	{r4, r5, r6}
   2a04a:	4760      	bx	ip

0002a04c <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2a04c:	680b      	ldr	r3, [r1, #0]
   2a04e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2a052:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2a054:	89c0      	ldrh	r0, [r0, #14]
   2a056:	0c1a      	lsrs	r2, r3, #16
   2a058:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2a05c:	bf04      	itt	eq
   2a05e:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2a062:	600b      	streq	r3, [r1, #0]
}
   2a064:	4770      	bx	lr

0002a066 <nvs_flash_block_cmp>:
{
   2a066:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a06a:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2a06c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2a06e:	681d      	ldr	r5, [r3, #0]
   2a070:	426d      	negs	r5, r5
{
   2a072:	b089      	sub	sp, #36	; 0x24
   2a074:	4681      	mov	r9, r0
   2a076:	460e      	mov	r6, r1
   2a078:	4617      	mov	r7, r2
	block_size =
   2a07a:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   2a07e:	b91c      	cbnz	r4, 2a088 <nvs_flash_block_cmp+0x22>
	return 0;
   2a080:	4620      	mov	r0, r4
}
   2a082:	b009      	add	sp, #36	; 0x24
   2a084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2a088:	42ac      	cmp	r4, r5
   2a08a:	46a0      	mov	r8, r4
   2a08c:	bf28      	it	cs
   2a08e:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2a090:	4643      	mov	r3, r8
   2a092:	466a      	mov	r2, sp
   2a094:	4631      	mov	r1, r6
   2a096:	4648      	mov	r0, r9
   2a098:	f7ff ffca 	bl	2a030 <nvs_flash_rd>
		if (rc) {
   2a09c:	2800      	cmp	r0, #0
   2a09e:	d1f0      	bne.n	2a082 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2a0a0:	4642      	mov	r2, r8
   2a0a2:	4669      	mov	r1, sp
   2a0a4:	4638      	mov	r0, r7
   2a0a6:	f001 fdd4 	bl	2bc52 <memcmp>
		if (rc) {
   2a0aa:	b920      	cbnz	r0, 2a0b6 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2a0ac:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2a0b0:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2a0b2:	4447      	add	r7, r8
   2a0b4:	e7e3      	b.n	2a07e <nvs_flash_block_cmp+0x18>
			return 1;
   2a0b6:	2001      	movs	r0, #1
   2a0b8:	e7e3      	b.n	2a082 <nvs_flash_block_cmp+0x1c>

0002a0ba <nvs_flash_cmp_const>:
{
   2a0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a0be:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2a0c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2a0c2:	681d      	ldr	r5, [r3, #0]
   2a0c4:	426d      	negs	r5, r5
{
   2a0c6:	b088      	sub	sp, #32
	block_size =
   2a0c8:	f005 0520 	and.w	r5, r5, #32
{
   2a0cc:	4607      	mov	r7, r0
   2a0ce:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2a0d0:	4668      	mov	r0, sp
{
   2a0d2:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2a0d4:	462a      	mov	r2, r5
   2a0d6:	f001 fdee 	bl	2bcb6 <memset>
	while (len) {
   2a0da:	b91c      	cbnz	r4, 2a0e4 <nvs_flash_cmp_const+0x2a>
	return 0;
   2a0dc:	4620      	mov	r0, r4
}
   2a0de:	b008      	add	sp, #32
   2a0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2a0e4:	42ac      	cmp	r4, r5
   2a0e6:	46a0      	mov	r8, r4
   2a0e8:	bf28      	it	cs
   2a0ea:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2a0ec:	4643      	mov	r3, r8
   2a0ee:	466a      	mov	r2, sp
   2a0f0:	4631      	mov	r1, r6
   2a0f2:	4638      	mov	r0, r7
   2a0f4:	f7ff ffb7 	bl	2a066 <nvs_flash_block_cmp>
		if (rc) {
   2a0f8:	2800      	cmp	r0, #0
   2a0fa:	d1f0      	bne.n	2a0de <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   2a0fc:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2a100:	4446      	add	r6, r8
   2a102:	e7ea      	b.n	2a0da <nvs_flash_cmp_const+0x20>

0002a104 <nvs_flash_erase_sector>:
{
   2a104:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2a106:	8982      	ldrh	r2, [r0, #12]
   2a108:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   2a10a:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2a10c:	0c09      	lsrs	r1, r1, #16
{
   2a10e:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   2a110:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   2a112:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2a114:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   2a118:	6883      	ldr	r3, [r0, #8]
   2a11a:	689b      	ldr	r3, [r3, #8]
   2a11c:	4798      	blx	r3
	if (rc) {
   2a11e:	b950      	cbnz	r0, 2a136 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2a120:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2a122:	89a3      	ldrh	r3, [r4, #12]
   2a124:	7912      	ldrb	r2, [r2, #4]
   2a126:	4629      	mov	r1, r5
   2a128:	4620      	mov	r0, r4
   2a12a:	f7ff ffc6 	bl	2a0ba <nvs_flash_cmp_const>
		rc = -ENXIO;
   2a12e:	2800      	cmp	r0, #0
   2a130:	bf18      	it	ne
   2a132:	f06f 0005 	mvnne.w	r0, #5
}
   2a136:	bd38      	pop	{r3, r4, r5, pc}

0002a138 <nvs_ate_crc8_update>:
{
   2a138:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2a13a:	4601      	mov	r1, r0
{
   2a13c:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2a13e:	2207      	movs	r2, #7
   2a140:	20ff      	movs	r0, #255	; 0xff
   2a142:	f7e8 fd6d 	bl	12c20 <crc8_ccitt>
	entry->crc8 = crc8;
   2a146:	71e0      	strb	r0, [r4, #7]
}
   2a148:	bd10      	pop	{r4, pc}

0002a14a <z_log_msg_static_create.constprop.0>:
   2a14a:	2300      	movs	r3, #0
   2a14c:	f7e9 bf70 	b.w	14030 <z_impl_z_log_msg_static_create>

0002a150 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2a150:	7803      	ldrb	r3, [r0, #0]
   2a152:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2a154:	bf81      	itttt	hi
   2a156:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2a15a:	18c9      	addhi	r1, r1, r3
   2a15c:	425b      	neghi	r3, r3
   2a15e:	4019      	andhi	r1, r3
}
   2a160:	4608      	mov	r0, r1
   2a162:	4770      	bx	lr

0002a164 <nvs_ate_valid>:
{
   2a164:	b570      	push	{r4, r5, r6, lr}
   2a166:	460c      	mov	r4, r1
   2a168:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2a16a:	2108      	movs	r1, #8
   2a16c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2a16e:	f7ff ffef 	bl	2a150 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2a172:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2a174:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2a176:	4621      	mov	r1, r4
   2a178:	20ff      	movs	r0, #255	; 0xff
   2a17a:	f7e8 fd51 	bl	12c20 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2a17e:	79e3      	ldrb	r3, [r4, #7]
   2a180:	4283      	cmp	r3, r0
   2a182:	d107      	bne.n	2a194 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2a184:	89aa      	ldrh	r2, [r5, #12]
   2a186:	8863      	ldrh	r3, [r4, #2]
   2a188:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2a18a:	4283      	cmp	r3, r0
   2a18c:	bf2c      	ite	cs
   2a18e:	2000      	movcs	r0, #0
   2a190:	2001      	movcc	r0, #1
}
   2a192:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2a194:	2000      	movs	r0, #0
   2a196:	e7fc      	b.n	2a192 <nvs_ate_valid+0x2e>

0002a198 <nvs_close_ate_valid>:
{
   2a198:	b538      	push	{r3, r4, r5, lr}
   2a19a:	4605      	mov	r5, r0
   2a19c:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2a19e:	f7ff ffe1 	bl	2a164 <nvs_ate_valid>
   2a1a2:	b1a0      	cbz	r0, 2a1ce <nvs_close_ate_valid+0x36>
   2a1a4:	88a0      	ldrh	r0, [r4, #4]
   2a1a6:	b998      	cbnz	r0, 2a1d0 <nvs_close_ate_valid+0x38>
   2a1a8:	8822      	ldrh	r2, [r4, #0]
   2a1aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2a1ae:	429a      	cmp	r2, r3
   2a1b0:	d10d      	bne.n	2a1ce <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2a1b2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2a1b4:	2108      	movs	r1, #8
   2a1b6:	f7ff ffcb 	bl	2a150 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   2a1ba:	8862      	ldrh	r2, [r4, #2]
   2a1bc:	89ab      	ldrh	r3, [r5, #12]
   2a1be:	1a9b      	subs	r3, r3, r2
   2a1c0:	fbb3 f2f0 	udiv	r2, r3, r0
   2a1c4:	fb02 3010 	mls	r0, r2, r0, r3
   2a1c8:	fab0 f080 	clz	r0, r0
   2a1cc:	0940      	lsrs	r0, r0, #5
}
   2a1ce:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2a1d0:	2000      	movs	r0, #0
   2a1d2:	e7fc      	b.n	2a1ce <nvs_close_ate_valid+0x36>

0002a1d4 <nvs_prev_ate>:
{
   2a1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a1d6:	4604      	mov	r4, r0
   2a1d8:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2a1da:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2a1dc:	2108      	movs	r1, #8
   2a1de:	f7ff ffb7 	bl	2a150 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2a1e2:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2a1e4:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2a1e6:	2308      	movs	r3, #8
   2a1e8:	4620      	mov	r0, r4
   2a1ea:	f7ff ff21 	bl	2a030 <nvs_flash_rd>
	if (rc) {
   2a1ee:	4606      	mov	r6, r0
   2a1f0:	2800      	cmp	r0, #0
   2a1f2:	d136      	bne.n	2a262 <nvs_prev_ate+0x8e>
	*addr += ate_size;
   2a1f4:	682b      	ldr	r3, [r5, #0]
   2a1f6:	443b      	add	r3, r7
   2a1f8:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2a1fa:	89a2      	ldrh	r2, [r4, #12]
   2a1fc:	b299      	uxth	r1, r3
   2a1fe:	1bd2      	subs	r2, r2, r7
   2a200:	4291      	cmp	r1, r2
   2a202:	d12e      	bne.n	2a262 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2a204:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2a206:	bf03      	ittte	eq
   2a208:	89e2      	ldrheq	r2, [r4, #14]
   2a20a:	f102 32ff 	addeq.w	r2, r2, #4294967295
   2a20e:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   2a212:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   2a216:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2a218:	2308      	movs	r3, #8
   2a21a:	466a      	mov	r2, sp
   2a21c:	4620      	mov	r0, r4
   2a21e:	f7ff ff07 	bl	2a030 <nvs_flash_rd>
	if (rc) {
   2a222:	b9e8      	cbnz	r0, 2a260 <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2a224:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2a226:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2a228:	466b      	mov	r3, sp
		if (data8[i] != value) {
   2a22a:	f813 1b01 	ldrb.w	r1, [r3], #1
   2a22e:	428a      	cmp	r2, r1
   2a230:	d10c      	bne.n	2a24c <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2a232:	3001      	adds	r0, #1
   2a234:	2808      	cmp	r0, #8
   2a236:	d1f8      	bne.n	2a22a <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   2a238:	6863      	ldr	r3, [r4, #4]
   2a23a:	e005      	b.n	2a248 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   2a23c:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   2a23e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   2a242:	0c1b      	lsrs	r3, r3, #16
   2a244:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   2a246:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   2a248:	602b      	str	r3, [r5, #0]
		return 0;
   2a24a:	e00a      	b.n	2a262 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2a24c:	4669      	mov	r1, sp
   2a24e:	4620      	mov	r0, r4
   2a250:	f7ff ffa2 	bl	2a198 <nvs_close_ate_valid>
   2a254:	2800      	cmp	r0, #0
   2a256:	d1f1      	bne.n	2a23c <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   2a258:	4629      	mov	r1, r5
   2a25a:	4620      	mov	r0, r4
   2a25c:	f7e9 f8c2 	bl	133e4 <nvs_recover_last_ate>
   2a260:	4606      	mov	r6, r0
}
   2a262:	4630      	mov	r0, r6
   2a264:	b003      	add	sp, #12
   2a266:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a268 <nvs_flash_al_wrt>:
{
   2a268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a26c:	4607      	mov	r7, r0
   2a26e:	b089      	sub	sp, #36	; 0x24
   2a270:	4690      	mov	r8, r2
	if (!len) {
   2a272:	461e      	mov	r6, r3
   2a274:	b91b      	cbnz	r3, 2a27e <nvs_flash_al_wrt+0x16>
		return 0;
   2a276:	2000      	movs	r0, #0
}
   2a278:	b009      	add	sp, #36	; 0x24
   2a27a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   2a27e:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2a280:	8983      	ldrh	r3, [r0, #12]
   2a282:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2a284:	fa14 f181 	uxtah	r1, r4, r1
   2a288:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2a28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a28e:	681d      	ldr	r5, [r3, #0]
   2a290:	426d      	negs	r5, r5
	if (blen > 0) {
   2a292:	4035      	ands	r5, r6
   2a294:	d00c      	beq.n	2a2b0 <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2a296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   2a298:	6883      	ldr	r3, [r0, #8]
   2a29a:	4621      	mov	r1, r4
   2a29c:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2a2a0:	462b      	mov	r3, r5
   2a2a2:	47c8      	blx	r9
		if (rc) {
   2a2a4:	2800      	cmp	r0, #0
   2a2a6:	d1e7      	bne.n	2a278 <nvs_flash_al_wrt+0x10>
	if (len) {
   2a2a8:	1b76      	subs	r6, r6, r5
   2a2aa:	d0e4      	beq.n	2a276 <nvs_flash_al_wrt+0xe>
		offset += blen;
   2a2ac:	442c      	add	r4, r5
		data8 += blen;
   2a2ae:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   2a2b0:	4632      	mov	r2, r6
   2a2b2:	4641      	mov	r1, r8
   2a2b4:	4668      	mov	r0, sp
   2a2b6:	f001 fcf3 	bl	2bca0 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   2a2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a2bc:	681a      	ldr	r2, [r3, #0]
   2a2be:	7919      	ldrb	r1, [r3, #4]
   2a2c0:	1b92      	subs	r2, r2, r6
   2a2c2:	eb0d 0006 	add.w	r0, sp, r6
   2a2c6:	f001 fcf6 	bl	2bcb6 <memset>
				 fs->flash_parameters->write_block_size);
   2a2ca:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   2a2ce:	681b      	ldr	r3, [r3, #0]
   2a2d0:	6882      	ldr	r2, [r0, #8]
   2a2d2:	4621      	mov	r1, r4
   2a2d4:	6855      	ldr	r5, [r2, #4]
   2a2d6:	466a      	mov	r2, sp
   2a2d8:	47a8      	blx	r5
	return rc;
   2a2da:	e7cd      	b.n	2a278 <nvs_flash_al_wrt+0x10>

0002a2dc <nvs_flash_ate_wrt>:
{
   2a2dc:	b510      	push	{r4, lr}
   2a2de:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2a2e0:	2308      	movs	r3, #8
   2a2e2:	6841      	ldr	r1, [r0, #4]
{
   2a2e4:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2a2e6:	f7ff ffbf 	bl	2a268 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2a2ea:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2a2ec:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2a2ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2a2f0:	f7ff ff2e 	bl	2a150 <nvs_al_size.isra.0>
   2a2f4:	6863      	ldr	r3, [r4, #4]
   2a2f6:	1a1b      	subs	r3, r3, r0
   2a2f8:	6063      	str	r3, [r4, #4]
}
   2a2fa:	4610      	mov	r0, r2
   2a2fc:	bd10      	pop	{r4, pc}

0002a2fe <nvs_add_gc_done_ate>:
{
   2a2fe:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   2a300:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2a304:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   2a308:	2300      	movs	r3, #0
{
   2a30a:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   2a30c:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2a310:	6883      	ldr	r3, [r0, #8]
   2a312:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   2a316:	4668      	mov	r0, sp
   2a318:	f7ff ff0e 	bl	2a138 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   2a31c:	4669      	mov	r1, sp
   2a31e:	4620      	mov	r0, r4
   2a320:	f7ff ffdc 	bl	2a2dc <nvs_flash_ate_wrt>
}
   2a324:	b002      	add	sp, #8
   2a326:	bd10      	pop	{r4, pc}

0002a328 <nvs_gc>:
{
   2a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a32c:	4604      	mov	r4, r0
   2a32e:	b095      	sub	sp, #84	; 0x54
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2a330:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2a332:	2108      	movs	r1, #8
   2a334:	f7ff ff0c 	bl	2a150 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2a338:	6863      	ldr	r3, [r4, #4]
   2a33a:	0c1b      	lsrs	r3, r3, #16
   2a33c:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2a33e:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   2a340:	a903      	add	r1, sp, #12
   2a342:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2a344:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   2a346:	f7ff fe81 	bl	2a04c <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2a34a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2a34e:	89a6      	ldrh	r6, [r4, #12]
   2a350:	445e      	add	r6, fp
   2a352:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2a354:	aa06      	add	r2, sp, #24
   2a356:	2308      	movs	r3, #8
   2a358:	4631      	mov	r1, r6
   2a35a:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2a35c:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2a35e:	f7ff fe67 	bl	2a030 <nvs_flash_rd>
	if (rc < 0) {
   2a362:	1e02      	subs	r2, r0, #0
   2a364:	f2c0 80a9 	blt.w	2a4ba <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2a368:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2a36a:	aa06      	add	r2, sp, #24
   2a36c:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2a36e:	2300      	movs	r3, #0
		if (data8[i] != value) {
   2a370:	f812 0b01 	ldrb.w	r0, [r2], #1
   2a374:	4281      	cmp	r1, r0
   2a376:	f040 808f 	bne.w	2a498 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2a37a:	3301      	adds	r3, #1
   2a37c:	2b08      	cmp	r3, #8
   2a37e:	d1f7      	bne.n	2a370 <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   2a380:	68a3      	ldr	r3, [r4, #8]
   2a382:	6862      	ldr	r2, [r4, #4]
   2a384:	442b      	add	r3, r5
   2a386:	429a      	cmp	r2, r3
   2a388:	d27e      	bcs.n	2a488 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   2a38a:	4659      	mov	r1, fp
   2a38c:	4620      	mov	r0, r4
   2a38e:	f7ff feb9 	bl	2a104 <nvs_flash_erase_sector>
   2a392:	4602      	mov	r2, r0
	if (rc) {
   2a394:	e091      	b.n	2a4ba <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   2a396:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   2a39a:	0c36      	lsrs	r6, r6, #16
   2a39c:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   2a39e:	441e      	add	r6, r3
   2a3a0:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2a3a2:	aa08      	add	r2, sp, #32
   2a3a4:	a904      	add	r1, sp, #16
   2a3a6:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   2a3a8:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2a3ac:	f7ff ff12 	bl	2a1d4 <nvs_prev_ate>
		if (rc) {
   2a3b0:	4602      	mov	r2, r0
   2a3b2:	2800      	cmp	r0, #0
   2a3b4:	f040 8081 	bne.w	2a4ba <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   2a3b8:	a908      	add	r1, sp, #32
   2a3ba:	4620      	mov	r0, r4
   2a3bc:	f7ff fed2 	bl	2a164 <nvs_ate_valid>
   2a3c0:	b918      	cbnz	r0, 2a3ca <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   2a3c2:	9b01      	ldr	r3, [sp, #4]
   2a3c4:	459a      	cmp	sl, r3
   2a3c6:	d1ec      	bne.n	2a3a2 <nvs_gc+0x7a>
   2a3c8:	e7da      	b.n	2a380 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   2a3ca:	6863      	ldr	r3, [r4, #4]
   2a3cc:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2a3ce:	aa0a      	add	r2, sp, #40	; 0x28
   2a3d0:	a905      	add	r1, sp, #20
   2a3d2:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   2a3d4:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2a3d6:	f7ff fefd 	bl	2a1d4 <nvs_prev_ate>
			if (rc) {
   2a3da:	4602      	mov	r2, r0
   2a3dc:	2800      	cmp	r0, #0
   2a3de:	d16c      	bne.n	2a4ba <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   2a3e0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2a3e4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2a3e8:	429a      	cmp	r2, r3
   2a3ea:	d027      	beq.n	2a43c <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   2a3ec:	6862      	ldr	r2, [r4, #4]
   2a3ee:	9b05      	ldr	r3, [sp, #20]
   2a3f0:	429a      	cmp	r2, r3
   2a3f2:	d1ec      	bne.n	2a3ce <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   2a3f4:	4556      	cmp	r6, sl
   2a3f6:	d1e4      	bne.n	2a3c2 <nvs_gc+0x9a>
   2a3f8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2a3fc:	2b00      	cmp	r3, #0
   2a3fe:	d0e0      	beq.n	2a3c2 <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   2a400:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   2a404:	ea4f 431a 	mov.w	r3, sl, lsr #16
   2a408:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   2a40a:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   2a40c:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2a40e:	68a3      	ldr	r3, [r4, #8]
   2a410:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   2a414:	f7ff fe90 	bl	2a138 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2a418:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   2a41a:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2a41e:	681e      	ldr	r6, [r3, #0]
   2a420:	4276      	negs	r6, r6
	block_size =
   2a422:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   2a426:	f1b9 0f00 	cmp.w	r9, #0
   2a42a:	d10e      	bne.n	2a44a <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   2a42c:	a908      	add	r1, sp, #32
   2a42e:	4620      	mov	r0, r4
   2a430:	f7ff ff54 	bl	2a2dc <nvs_flash_ate_wrt>
			if (rc) {
   2a434:	4602      	mov	r2, r0
   2a436:	2800      	cmp	r0, #0
   2a438:	d0c3      	beq.n	2a3c2 <nvs_gc+0x9a>
   2a43a:	e03e      	b.n	2a4ba <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   2a43c:	a90a      	add	r1, sp, #40	; 0x28
   2a43e:	4620      	mov	r0, r4
   2a440:	f7ff fe90 	bl	2a164 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   2a444:	2800      	cmp	r0, #0
   2a446:	d0d1      	beq.n	2a3ec <nvs_gc+0xc4>
   2a448:	e7d4      	b.n	2a3f4 <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   2a44a:	454e      	cmp	r6, r9
   2a44c:	46b0      	mov	r8, r6
   2a44e:	bf28      	it	cs
   2a450:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   2a452:	aa0c      	add	r2, sp, #48	; 0x30
   2a454:	4643      	mov	r3, r8
   2a456:	4639      	mov	r1, r7
   2a458:	4620      	mov	r0, r4
   2a45a:	f7ff fde9 	bl	2a030 <nvs_flash_rd>
		if (rc) {
   2a45e:	4602      	mov	r2, r0
   2a460:	bb58      	cbnz	r0, 2a4ba <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2a462:	4643      	mov	r3, r8
   2a464:	68a1      	ldr	r1, [r4, #8]
   2a466:	aa0c      	add	r2, sp, #48	; 0x30
   2a468:	4620      	mov	r0, r4
   2a46a:	f7ff fefd 	bl	2a268 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   2a46e:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2a470:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   2a472:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2a474:	f7ff fe6c 	bl	2a150 <nvs_al_size.isra.0>
   2a478:	68a3      	ldr	r3, [r4, #8]
   2a47a:	4403      	add	r3, r0
   2a47c:	60a3      	str	r3, [r4, #8]
		if (rc) {
   2a47e:	b9e2      	cbnz	r2, 2a4ba <nvs_gc+0x192>
		len -= bytes_to_copy;
   2a480:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   2a484:	4447      	add	r7, r8
   2a486:	e7ce      	b.n	2a426 <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   2a488:	4620      	mov	r0, r4
   2a48a:	f7ff ff38 	bl	2a2fe <nvs_add_gc_done_ate>
		if (rc) {
   2a48e:	4602      	mov	r2, r0
   2a490:	2800      	cmp	r0, #0
   2a492:	f43f af7a 	beq.w	2a38a <nvs_gc+0x62>
   2a496:	e010      	b.n	2a4ba <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   2a498:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2a49a:	a906      	add	r1, sp, #24
   2a49c:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   2a49e:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2a4a0:	f7ff fe7a 	bl	2a198 <nvs_close_ate_valid>
   2a4a4:	2800      	cmp	r0, #0
   2a4a6:	f47f af76 	bne.w	2a396 <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   2a4aa:	a904      	add	r1, sp, #16
   2a4ac:	4620      	mov	r0, r4
   2a4ae:	f7e8 ff99 	bl	133e4 <nvs_recover_last_ate>
		if (rc) {
   2a4b2:	4602      	mov	r2, r0
   2a4b4:	2800      	cmp	r0, #0
   2a4b6:	f43f af74 	beq.w	2a3a2 <nvs_gc+0x7a>
}
   2a4ba:	4610      	mov	r0, r2
   2a4bc:	b015      	add	sp, #84	; 0x54
   2a4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a4c2 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   2a4c2:	2300      	movs	r3, #0
   2a4c4:	461a      	mov	r2, r3
   2a4c6:	f7e9 b9bf 	b.w	13848 <nvs_write>

0002a4ca <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2a4ca:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2a4cc:	2400      	movs	r4, #0
   2a4ce:	9400      	str	r4, [sp, #0]
   2a4d0:	f7e9 faa2 	bl	13a18 <nvs_read_hist>
	return rc;
}
   2a4d4:	b002      	add	sp, #8
   2a4d6:	bd10      	pop	{r4, pc}

0002a4d8 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   2a4d8:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   2a4da:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2a4dc:	bf5f      	itttt	pl
   2a4de:	6803      	ldrpl	r3, [r0, #0]
   2a4e0:	8842      	ldrhpl	r2, [r0, #2]
   2a4e2:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   2a4e6:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   2a4ea:	bf5d      	ittte	pl
   2a4ec:	3017      	addpl	r0, #23
   2a4ee:	f020 0007 	bicpl.w	r0, r0, #7
   2a4f2:	0880      	lsrpl	r0, r0, #2
	return 0;
   2a4f4:	2000      	movmi	r0, #0
}
   2a4f6:	4770      	bx	lr

0002a4f8 <dummy_timestamp>:
}
   2a4f8:	2000      	movs	r0, #0
   2a4fa:	4770      	bx	lr

0002a4fc <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   2a4fc:	f004 ba6b 	b.w	2e9d6 <sys_clock_cycle_get_32>

0002a500 <atomic_inc>:
{
   2a500:	4603      	mov	r3, r0
}
   2a502:	f3bf 8f5b 	dmb	ish
   2a506:	e853 0f00 	ldrex	r0, [r3]
   2a50a:	1c42      	adds	r2, r0, #1
   2a50c:	e843 2100 	strex	r1, r2, [r3]
   2a510:	2900      	cmp	r1, #0
   2a512:	d1f8      	bne.n	2a506 <atomic_inc+0x6>
   2a514:	f3bf 8f5b 	dmb	ish
   2a518:	4770      	bx	lr

0002a51a <z_log_vprintk>:
{
   2a51a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   2a51c:	2300      	movs	r3, #0
   2a51e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2a522:	e9cd 3300 	strd	r3, r3, [sp]
   2a526:	461a      	mov	r2, r3
   2a528:	4619      	mov	r1, r3
   2a52a:	4618      	mov	r0, r3
   2a52c:	f7e9 fe08 	bl	14140 <z_impl_z_log_msg_runtime_vcreate>
}
   2a530:	b005      	add	sp, #20
   2a532:	f85d fb04 	ldr.w	pc, [sp], #4

0002a536 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   2a536:	2001      	movs	r0, #1
   2a538:	f7e9 bbb6 	b.w	13ca8 <z_log_dropped>

0002a53c <z_log_get_tag>:
}
   2a53c:	2000      	movs	r0, #0
   2a53e:	4770      	bx	lr

0002a540 <z_cbprintf_cpy>:
{
   2a540:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   2a542:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   2a546:	1b9b      	subs	r3, r3, r6
   2a548:	428b      	cmp	r3, r1
{
   2a54a:	460c      	mov	r4, r1
   2a54c:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   2a54e:	d30a      	bcc.n	2a566 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   2a550:	6813      	ldr	r3, [r2, #0]
   2a552:	460a      	mov	r2, r1
   2a554:	4601      	mov	r1, r0
   2a556:	1998      	adds	r0, r3, r6
   2a558:	f001 fba2 	bl	2bca0 <memcpy>
	desc->off += len;
   2a55c:	68ab      	ldr	r3, [r5, #8]
   2a55e:	4423      	add	r3, r4
   2a560:	60ab      	str	r3, [r5, #8]
	return len;
   2a562:	4620      	mov	r0, r4
}
   2a564:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   2a566:	f06f 001b 	mvn.w	r0, #27
   2a56a:	e7fb      	b.n	2a564 <z_cbprintf_cpy+0x24>

0002a56c <z_log_msg_finalize>:
{
   2a56c:	b570      	push	{r4, r5, r6, lr}
   2a56e:	460e      	mov	r6, r1
   2a570:	4615      	mov	r5, r2
   2a572:	4619      	mov	r1, r3
	if (!msg) {
   2a574:	4604      	mov	r4, r0
   2a576:	b918      	cbnz	r0, 2a580 <z_log_msg_finalize+0x14>
}
   2a578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2a57c:	f7e9 bb94 	b.w	13ca8 <z_log_dropped>
	if (data) {
   2a580:	b133      	cbz	r3, 2a590 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   2a582:	f3c2 234a 	ubfx	r3, r2, #9, #11
   2a586:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   2a588:	0d12      	lsrs	r2, r2, #20
   2a58a:	4418      	add	r0, r3
   2a58c:	f001 fb88 	bl	2bca0 <memcpy>
	msg->hdr.source = source;
   2a590:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2a594:	4620      	mov	r0, r4
}
   2a596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   2a59a:	f7e9 bd15 	b.w	13fc8 <z_log_msg_commit>

0002a59e <buffer_write>:
{
   2a59e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a5a0:	4606      	mov	r6, r0
   2a5a2:	460d      	mov	r5, r1
   2a5a4:	4614      	mov	r4, r2
   2a5a6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2a5a8:	4621      	mov	r1, r4
   2a5aa:	4628      	mov	r0, r5
   2a5ac:	463a      	mov	r2, r7
   2a5ae:	47b0      	blx	r6
	} while (len != 0);
   2a5b0:	1a24      	subs	r4, r4, r0
		buf += processed;
   2a5b2:	4405      	add	r5, r0
	} while (len != 0);
   2a5b4:	d1f8      	bne.n	2a5a8 <buffer_write+0xa>
}
   2a5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a5b8 <cbvprintf>:
{
   2a5b8:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2a5ba:	2400      	movs	r4, #0
   2a5bc:	9400      	str	r4, [sp, #0]
   2a5be:	f7e8 fb45 	bl	12c4c <z_cbvprintf_impl>
}
   2a5c2:	b002      	add	sp, #8
   2a5c4:	bd10      	pop	{r4, pc}

0002a5c6 <log_output_flush>:
{
   2a5c6:	b510      	push	{r4, lr}
		     output->control_block->offset,
   2a5c8:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   2a5ca:	6881      	ldr	r1, [r0, #8]
{
   2a5cc:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2a5ce:	e9d2 2300 	ldrd	r2, r3, [r2]
   2a5d2:	6800      	ldr	r0, [r0, #0]
   2a5d4:	f7ff ffe3 	bl	2a59e <buffer_write>
	output->control_block->offset = 0;
   2a5d8:	6863      	ldr	r3, [r4, #4]
   2a5da:	2200      	movs	r2, #0
   2a5dc:	601a      	str	r2, [r3, #0]
}
   2a5de:	bd10      	pop	{r4, pc}

0002a5e0 <out_func>:
{
   2a5e0:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   2a5e2:	684b      	ldr	r3, [r1, #4]
   2a5e4:	681a      	ldr	r2, [r3, #0]
   2a5e6:	68cb      	ldr	r3, [r1, #12]
   2a5e8:	429a      	cmp	r2, r3
{
   2a5ea:	4605      	mov	r5, r0
   2a5ec:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   2a5ee:	d102      	bne.n	2a5f6 <out_func+0x16>
		log_output_flush(out_ctx);
   2a5f0:	4608      	mov	r0, r1
   2a5f2:	f7ff ffe8 	bl	2a5c6 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2a5f6:	6863      	ldr	r3, [r4, #4]
   2a5f8:	f3bf 8f5b 	dmb	ish
   2a5fc:	e853 2f00 	ldrex	r2, [r3]
   2a600:	1c51      	adds	r1, r2, #1
   2a602:	e843 1000 	strex	r0, r1, [r3]
   2a606:	2800      	cmp	r0, #0
   2a608:	d1f8      	bne.n	2a5fc <out_func+0x1c>
   2a60a:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   2a60e:	68a3      	ldr	r3, [r4, #8]
   2a610:	549d      	strb	r5, [r3, r2]
}
   2a612:	2000      	movs	r0, #0
   2a614:	bd38      	pop	{r3, r4, r5, pc}

0002a616 <cr_out_func>:
	if (c == '\n') {
   2a616:	280a      	cmp	r0, #10
{
   2a618:	b538      	push	{r3, r4, r5, lr}
   2a61a:	4604      	mov	r4, r0
   2a61c:	460d      	mov	r5, r1
	if (c == '\n') {
   2a61e:	d102      	bne.n	2a626 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   2a620:	200d      	movs	r0, #13
   2a622:	f7ff ffdd 	bl	2a5e0 <out_func>
	out_func(c, ctx);
   2a626:	4629      	mov	r1, r5
   2a628:	4620      	mov	r0, r4
   2a62a:	f7ff ffd9 	bl	2a5e0 <out_func>
}
   2a62e:	2000      	movs	r0, #0
   2a630:	bd38      	pop	{r3, r4, r5, pc}

0002a632 <log_backend_uart_init>:
}
   2a632:	4770      	bx	lr

0002a634 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   2a634:	4770      	bx	lr

0002a636 <get_sectors_cb>:
{
   2a636:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   2a638:	684c      	ldr	r4, [r1, #4]
   2a63a:	6803      	ldr	r3, [r0, #0]
   2a63c:	42a3      	cmp	r3, r4
   2a63e:	d201      	bcs.n	2a644 <get_sectors_cb+0xe>
		*bail_value = true;
   2a640:	2001      	movs	r0, #1
}
   2a642:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   2a644:	688a      	ldr	r2, [r1, #8]
   2a646:	4422      	add	r2, r4
   2a648:	4293      	cmp	r3, r2
   2a64a:	d301      	bcc.n	2a650 <get_sectors_cb+0x1a>
		*bail_value = false;
   2a64c:	2000      	movs	r0, #0
   2a64e:	e7f8      	b.n	2a642 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   2a650:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   2a654:	694e      	ldr	r6, [r1, #20]
   2a656:	42b5      	cmp	r5, r6
   2a658:	d303      	bcc.n	2a662 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   2a65a:	f06f 030b 	mvn.w	r3, #11
   2a65e:	618b      	str	r3, [r1, #24]
		return true;
   2a660:	e7f4      	b.n	2a64c <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   2a662:	1b1b      	subs	r3, r3, r4
   2a664:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2a668:	6843      	ldr	r3, [r0, #4]
   2a66a:	6908      	ldr	r0, [r1, #16]
   2a66c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   2a670:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   2a672:	690b      	ldr	r3, [r1, #16]
   2a674:	3301      	adds	r3, #1
   2a676:	610b      	str	r3, [r1, #16]
	return true;
   2a678:	e7e2      	b.n	2a640 <get_sectors_cb+0xa>

0002a67a <settings_load>:
	return settings_load_subtree(NULL);
   2a67a:	2000      	movs	r0, #0
   2a67c:	f7ea ba18 	b.w	14ab0 <settings_load_subtree>

0002a680 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   2a680:	2200      	movs	r2, #0
   2a682:	4611      	mov	r1, r2
   2a684:	f7ea b9da 	b.w	14a3c <settings_save_one>

0002a688 <settings_name_steq>:
{
   2a688:	4603      	mov	r3, r0
   2a68a:	b510      	push	{r4, lr}
   2a68c:	4608      	mov	r0, r1
	if (next) {
   2a68e:	b10a      	cbz	r2, 2a694 <settings_name_steq+0xc>
		*next = NULL;
   2a690:	2100      	movs	r1, #0
   2a692:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   2a694:	b153      	cbz	r3, 2a6ac <settings_name_steq+0x24>
   2a696:	b1d0      	cbz	r0, 2a6ce <settings_name_steq+0x46>
   2a698:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   2a69a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2a69e:	b180      	cbz	r0, 2a6c2 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   2a6a0:	f813 4b01 	ldrb.w	r4, [r3], #1
   2a6a4:	42a0      	cmp	r0, r4
   2a6a6:	d101      	bne.n	2a6ac <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2a6a8:	283d      	cmp	r0, #61	; 0x3d
   2a6aa:	d1f6      	bne.n	2a69a <settings_name_steq+0x12>
		return 0;
   2a6ac:	2000      	movs	r0, #0
   2a6ae:	e00e      	b.n	2a6ce <settings_name_steq+0x46>
			*next = name + 1;
   2a6b0:	3301      	adds	r3, #1
   2a6b2:	6013      	str	r3, [r2, #0]
   2a6b4:	e00a      	b.n	2a6cc <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2a6b6:	283d      	cmp	r0, #61	; 0x3d
   2a6b8:	d008      	beq.n	2a6cc <settings_name_steq+0x44>
   2a6ba:	fab0 f080 	clz	r0, r0
   2a6be:	0940      	lsrs	r0, r0, #5
   2a6c0:	e005      	b.n	2a6ce <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2a6c2:	7818      	ldrb	r0, [r3, #0]
   2a6c4:	282f      	cmp	r0, #47	; 0x2f
   2a6c6:	d1f6      	bne.n	2a6b6 <settings_name_steq+0x2e>
		if (next) {
   2a6c8:	2a00      	cmp	r2, #0
   2a6ca:	d1f1      	bne.n	2a6b0 <settings_name_steq+0x28>
		return 1;
   2a6cc:	2001      	movs	r0, #1
}
   2a6ce:	bd10      	pop	{r4, pc}

0002a6d0 <settings_name_next>:
{
   2a6d0:	b510      	push	{r4, lr}
	if (next) {
   2a6d2:	b109      	cbz	r1, 2a6d8 <settings_name_next+0x8>
		*next = NULL;
   2a6d4:	2300      	movs	r3, #0
   2a6d6:	600b      	str	r3, [r1, #0]
	if (!name) {
   2a6d8:	b158      	cbz	r0, 2a6f2 <settings_name_next+0x22>
   2a6da:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2a6dc:	781a      	ldrb	r2, [r3, #0]
   2a6de:	461c      	mov	r4, r3
   2a6e0:	3301      	adds	r3, #1
   2a6e2:	b12a      	cbz	r2, 2a6f0 <settings_name_next+0x20>
   2a6e4:	2a3d      	cmp	r2, #61	; 0x3d
   2a6e6:	d003      	beq.n	2a6f0 <settings_name_next+0x20>
   2a6e8:	2a2f      	cmp	r2, #47	; 0x2f
   2a6ea:	d1f7      	bne.n	2a6dc <settings_name_next+0xc>
		if (next) {
   2a6ec:	b101      	cbz	r1, 2a6f0 <settings_name_next+0x20>
			*next = name + 1;
   2a6ee:	600b      	str	r3, [r1, #0]
   2a6f0:	1a20      	subs	r0, r4, r0
}
   2a6f2:	bd10      	pop	{r4, pc}

0002a6f4 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = CONTAINER_OF(cs, struct settings_nvs, cf_store);

	return &cf->cf_nvs;
}
   2a6f4:	3008      	adds	r0, #8
   2a6f6:	4770      	bx	lr

0002a6f8 <settings_nvs_read_fn>:
{
   2a6f8:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2a6fa:	4613      	mov	r3, r2
{
   2a6fc:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2a6fe:	460a      	mov	r2, r1
   2a700:	8881      	ldrh	r1, [r0, #4]
   2a702:	6800      	ldr	r0, [r0, #0]
   2a704:	f7ff fee1 	bl	2a4ca <nvs_read>
}
   2a708:	42a0      	cmp	r0, r4
   2a70a:	bfa8      	it	ge
   2a70c:	4620      	movge	r0, r4
   2a70e:	bd10      	pop	{r4, pc}

0002a710 <settings_nvs_save>:
{
   2a710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a714:	b097      	sub	sp, #92	; 0x5c
   2a716:	4604      	mov	r4, r0
   2a718:	9201      	str	r2, [sp, #4]
   2a71a:	469a      	mov	sl, r3
	if (!name) {
   2a71c:	4689      	mov	r9, r1
   2a71e:	2900      	cmp	r1, #0
   2a720:	d07e      	beq.n	2a820 <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   2a722:	b1da      	cbz	r2, 2a75c <settings_nvs_save+0x4c>
   2a724:	faba f78a 	clz	r7, sl
   2a728:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   2a72a:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   2a72c:	3501      	adds	r5, #1
   2a72e:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   2a730:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2a732:	f104 0b08 	add.w	fp, r4, #8
		name_id--;
   2a736:	1e6e      	subs	r6, r5, #1
   2a738:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   2a73a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2a73e:	d029      	beq.n	2a794 <settings_nvs_save+0x84>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2a740:	234a      	movs	r3, #74	; 0x4a
   2a742:	aa03      	add	r2, sp, #12
   2a744:	4631      	mov	r1, r6
   2a746:	4658      	mov	r0, fp
   2a748:	f7ff febf 	bl	2a4ca <nvs_read>
		if (rc < 0) {
   2a74c:	2800      	cmp	r0, #0
   2a74e:	da07      	bge.n	2a760 <settings_nvs_save+0x50>
		name_id--;
   2a750:	f110 0f02 	cmn.w	r0, #2
   2a754:	bf08      	it	eq
   2a756:	46b0      	moveq	r8, r6
   2a758:	4635      	mov	r5, r6
   2a75a:	e7ec      	b.n	2a736 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   2a75c:	2701      	movs	r7, #1
   2a75e:	e7e4      	b.n	2a72a <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   2a760:	f100 0358 	add.w	r3, r0, #88	; 0x58
   2a764:	eb0d 0003 	add.w	r0, sp, r3
   2a768:	2300      	movs	r3, #0
   2a76a:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   2a76e:	a903      	add	r1, sp, #12
   2a770:	4648      	mov	r0, r9
   2a772:	f001 fa4e 	bl	2bc12 <strcmp>
   2a776:	2800      	cmp	r0, #0
   2a778:	d1ee      	bne.n	2a758 <settings_nvs_save+0x48>
		if (!delete) {
   2a77a:	b32f      	cbz	r7, 2a7c8 <settings_nvs_save+0xb8>
		if (name_id == cf->last_name_id) {
   2a77c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2a77e:	42b3      	cmp	r3, r6
   2a780:	d00b      	beq.n	2a79a <settings_nvs_save+0x8a>
		rc = nvs_delete(&cf->cf_nvs, name_id);
   2a782:	4631      	mov	r1, r6
   2a784:	4658      	mov	r0, fp
   2a786:	f7ff fe9c 	bl	2a4c2 <nvs_delete>
		if (rc >= 0) {
   2a78a:	2800      	cmp	r0, #0
   2a78c:	da12      	bge.n	2a7b4 <settings_nvs_save+0xa4>
}
   2a78e:	b017      	add	sp, #92	; 0x5c
   2a790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   2a794:	b3b7      	cbz	r7, 2a804 <settings_nvs_save+0xf4>
			return 0;
   2a796:	2000      	movs	r0, #0
   2a798:	e7f9      	b.n	2a78e <settings_nvs_save+0x7e>
			cf->last_name_id--;
   2a79a:	4622      	mov	r2, r4
   2a79c:	1e73      	subs	r3, r6, #1
   2a79e:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2a7a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2a7a6:	2302      	movs	r3, #2
   2a7a8:	4658      	mov	r0, fp
   2a7aa:	f7e9 f84d 	bl	13848 <nvs_write>
			if (rc < 0) {
   2a7ae:	2800      	cmp	r0, #0
   2a7b0:	dae7      	bge.n	2a782 <settings_nvs_save+0x72>
   2a7b2:	e7ec      	b.n	2a78e <settings_nvs_save+0x7e>
			rc = nvs_delete(&cf->cf_nvs, name_id +
   2a7b4:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   2a7b8:	313f      	adds	r1, #63	; 0x3f
   2a7ba:	b289      	uxth	r1, r1
   2a7bc:	4658      	mov	r0, fp
   2a7be:	f7ff fe80 	bl	2a4c2 <nvs_delete>
	if (rc < 0) {
   2a7c2:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2a7c6:	e7e2      	b.n	2a78e <settings_nvs_save+0x7e>
		name_id--;
   2a7c8:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   2a7ca:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   2a7ce:	d02a      	beq.n	2a826 <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2a7d0:	f104 0508 	add.w	r5, r4, #8
   2a7d4:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   2a7d8:	9a01      	ldr	r2, [sp, #4]
   2a7da:	4653      	mov	r3, sl
   2a7dc:	b289      	uxth	r1, r1
   2a7de:	4628      	mov	r0, r5
   2a7e0:	f7e9 f832 	bl	13848 <nvs_write>
	if (rc < 0) {
   2a7e4:	2800      	cmp	r0, #0
   2a7e6:	dbd2      	blt.n	2a78e <settings_nvs_save+0x7e>
	if (write_name) {
   2a7e8:	b977      	cbnz	r7, 2a808 <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   2a7ea:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2a7ec:	4543      	cmp	r3, r8
   2a7ee:	d2d2      	bcs.n	2a796 <settings_nvs_save+0x86>
		cf->last_name_id = write_name_id;
   2a7f0:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2a7f2:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   2a7f4:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2a7f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2a7fc:	4628      	mov	r0, r5
   2a7fe:	f7e9 f823 	bl	13848 <nvs_write>
   2a802:	e7de      	b.n	2a7c2 <settings_nvs_save+0xb2>
	write_name = true;
   2a804:	2701      	movs	r7, #1
   2a806:	e7e0      	b.n	2a7ca <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   2a808:	4648      	mov	r0, r9
   2a80a:	f001 f9f2 	bl	2bbf2 <strlen>
   2a80e:	464a      	mov	r2, r9
   2a810:	4603      	mov	r3, r0
   2a812:	4641      	mov	r1, r8
   2a814:	4628      	mov	r0, r5
   2a816:	f7e9 f817 	bl	13848 <nvs_write>
		if (rc < 0) {
   2a81a:	2800      	cmp	r0, #0
   2a81c:	dae5      	bge.n	2a7ea <settings_nvs_save+0xda>
   2a81e:	e7b6      	b.n	2a78e <settings_nvs_save+0x7e>
		return -EINVAL;
   2a820:	f06f 0015 	mvn.w	r0, #21
   2a824:	e7b3      	b.n	2a78e <settings_nvs_save+0x7e>
		return -ENOMEM;
   2a826:	f06f 000b 	mvn.w	r0, #11
   2a82a:	e7b0      	b.n	2a78e <settings_nvs_save+0x7e>

0002a82c <settings_nvs_backend_init>:
{
   2a82c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   2a82e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   2a830:	6303      	str	r3, [r0, #48]	; 0x30
{
   2a832:	4604      	mov	r4, r0
	if (cf->cf_nvs.flash_device == NULL) {
   2a834:	b1c3      	cbz	r3, 2a868 <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   2a836:	f100 0608 	add.w	r6, r0, #8
   2a83a:	4630      	mov	r0, r6
   2a83c:	f7e8 fe04 	bl	13448 <nvs_mount>
	if (rc) {
   2a840:	4605      	mov	r5, r0
   2a842:	b970      	cbnz	r0, 2a862 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   2a844:	2302      	movs	r3, #2
   2a846:	f10d 0206 	add.w	r2, sp, #6
   2a84a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2a84e:	4630      	mov	r0, r6
   2a850:	f7ff fe3b 	bl	2a4ca <nvs_read>
	if (rc < 0) {
   2a854:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   2a856:	bfac      	ite	ge
   2a858:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   2a85c:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   2a860:	8723      	strh	r3, [r4, #56]	; 0x38
}
   2a862:	4628      	mov	r0, r5
   2a864:	b002      	add	sp, #8
   2a866:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2a868:	f06f 0512 	mvn.w	r5, #18
   2a86c:	e7f9      	b.n	2a862 <settings_nvs_backend_init+0x36>

0002a86e <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2a86e:	b538      	push	{r3, r4, r5, lr}
   2a870:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2a872:	42ab      	cmp	r3, r5
{
   2a874:	4611      	mov	r1, r2
   2a876:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2a878:	d804      	bhi.n	2a884 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   2a87a:	461a      	mov	r2, r3
   2a87c:	f001 fa10 	bl	2bca0 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2a880:	4620      	mov	r0, r4
   2a882:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2a884:	2400      	movs	r4, #0
   2a886:	e7fb      	b.n	2a880 <_copy+0x12>

0002a888 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2a888:	f001 ba15 	b.w	2bcb6 <memset>

0002a88c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2a88c:	09c3      	lsrs	r3, r0, #7
   2a88e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2a892:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2a896:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2a89a:	b2c0      	uxtb	r0, r0
   2a89c:	4770      	bx	lr

0002a89e <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   2a89e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a8a2:	4606      	mov	r6, r0
   2a8a4:	b0a9      	sub	sp, #164	; 0xa4
   2a8a6:	4688      	mov	r8, r1
   2a8a8:	4614      	mov	r4, r2
   2a8aa:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2a8ac:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   2a8b0:	f7ea faec 	bl	14e8c <uECC_get_rng>
		if (!rng_function ||
   2a8b4:	4603      	mov	r3, r0
   2a8b6:	2800      	cmp	r0, #0
   2a8b8:	d03e      	beq.n	2a938 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   2a8ba:	2140      	movs	r1, #64	; 0x40
   2a8bc:	a808      	add	r0, sp, #32
   2a8be:	4798      	blx	r3
		if (!rng_function ||
   2a8c0:	b3d0      	cbz	r0, 2a938 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2a8c2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   2a8c6:	f112 031f 	adds.w	r3, r2, #31
   2a8ca:	bf48      	it	mi
   2a8cc:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   2a8d0:	466d      	mov	r5, sp
   2a8d2:	464a      	mov	r2, r9
   2a8d4:	a908      	add	r1, sp, #32
   2a8d6:	4628      	mov	r0, r5
   2a8d8:	f343 1347 	sbfx	r3, r3, #5, #8
   2a8dc:	f000 f9f6 	bl	2accc <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   2a8e0:	4622      	mov	r2, r4
   2a8e2:	4629      	mov	r1, r5
   2a8e4:	a818      	add	r0, sp, #96	; 0x60
   2a8e6:	f000 fe09 	bl	2b4fc <EccPoint_compute_public_key>
   2a8ea:	b318      	cbz	r0, 2a934 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   2a8ec:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   2a8f0:	1dd9      	adds	r1, r3, #7
   2a8f2:	bf48      	it	mi
   2a8f4:	f103 010e 	addmi.w	r1, r3, #14
   2a8f8:	462a      	mov	r2, r5
   2a8fa:	4640      	mov	r0, r8
   2a8fc:	10c9      	asrs	r1, r1, #3
   2a8fe:	f000 fe25 	bl	2b54c <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   2a902:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2a906:	aa18      	add	r2, sp, #96	; 0x60
   2a908:	4630      	mov	r0, r6
   2a90a:	f000 fe1f 	bl	2b54c <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2a90e:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   2a912:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2a916:	ab18      	add	r3, sp, #96	; 0x60
   2a918:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   2a91c:	1870      	adds	r0, r6, r1
   2a91e:	f000 fe15 	bl	2b54c <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   2a922:	2220      	movs	r2, #32
   2a924:	2100      	movs	r1, #0
   2a926:	4628      	mov	r0, r5
   2a928:	f001 f9c5 	bl	2bcb6 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   2a92c:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   2a92e:	b029      	add	sp, #164	; 0xa4
   2a930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   2a934:	3f01      	subs	r7, #1
   2a936:	d1bb      	bne.n	2a8b0 <uECC_make_key+0x12>
        		return 0;
   2a938:	2000      	movs	r0, #0
   2a93a:	e7f8      	b.n	2a92e <uECC_make_key+0x90>

0002a93c <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   2a93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a940:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   2a942:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   2a946:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   2a94a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   2a94e:	b0a4      	sub	sp, #144	; 0x90
   2a950:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   2a952:	1dda      	adds	r2, r3, #7
   2a954:	bf48      	it	mi
   2a956:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   2a95a:	ad04      	add	r5, sp, #16
{
   2a95c:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   2a95e:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   2a960:	4628      	mov	r0, r5
   2a962:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   2a964:	9502      	str	r5, [sp, #8]
   2a966:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   2a968:	f000 fe04 	bl	2b574 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   2a96c:	463a      	mov	r2, r7
   2a96e:	4649      	mov	r1, r9
   2a970:	a814      	add	r0, sp, #80	; 0x50
   2a972:	f000 fdff 	bl	2b574 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   2a976:	ab14      	add	r3, sp, #80	; 0x50
   2a978:	eb09 0107 	add.w	r1, r9, r7
   2a97c:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   2a980:	463a      	mov	r2, r7
   2a982:	f000 fdf7 	bl	2b574 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   2a986:	4623      	mov	r3, r4
   2a988:	4632      	mov	r2, r6
   2a98a:	4629      	mov	r1, r5
   2a98c:	4628      	mov	r0, r5
   2a98e:	f000 fd89 	bl	2b4a4 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   2a992:	fab0 f380 	clz	r3, r0
   2a996:	9401      	str	r4, [sp, #4]
   2a998:	aa24      	add	r2, sp, #144	; 0x90
   2a99a:	095b      	lsrs	r3, r3, #5
   2a99c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   2a9a0:	8863      	ldrh	r3, [r4, #2]
   2a9a2:	3301      	adds	r3, #1
   2a9a4:	b21b      	sxth	r3, r3
   2a9a6:	9300      	str	r3, [sp, #0]
   2a9a8:	f851 2c88 	ldr.w	r2, [r1, #-136]
   2a9ac:	a914      	add	r1, sp, #80	; 0x50
   2a9ae:	2300      	movs	r3, #0
   2a9b0:	4608      	mov	r0, r1
   2a9b2:	f000 fcaf 	bl	2b314 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   2a9b6:	aa14      	add	r2, sp, #80	; 0x50
   2a9b8:	4639      	mov	r1, r7
   2a9ba:	4640      	mov	r0, r8
   2a9bc:	f000 fdc6 	bl	2b54c <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   2a9c0:	4621      	mov	r1, r4
   2a9c2:	a814      	add	r0, sp, #80	; 0x50
   2a9c4:	f000 fc1b 	bl	2b1fe <EccPoint_isZero>
   2a9c8:	af02      	add	r7, sp, #8
   2a9ca:	4604      	mov	r4, r0
   2a9cc:	2208      	movs	r2, #8
   2a9ce:	2100      	movs	r1, #0
   2a9d0:	4638      	mov	r0, r7
   2a9d2:	f001 f970 	bl	2bcb6 <memset>
   2a9d6:	2220      	movs	r2, #32
   2a9d8:	2100      	movs	r1, #0
   2a9da:	4630      	mov	r0, r6
   2a9dc:	f001 f96b 	bl	2bcb6 <memset>
   2a9e0:	2220      	movs	r2, #32
   2a9e2:	2100      	movs	r1, #0
   2a9e4:	4628      	mov	r0, r5
   2a9e6:	f001 f966 	bl	2bcb6 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   2a9ea:	fab4 f084 	clz	r0, r4
   2a9ee:	0940      	lsrs	r0, r0, #5
   2a9f0:	b024      	add	sp, #144	; 0x90
   2a9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002a9f6 <uECC_vli_add>:
{
   2a9f6:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   2a9f8:	2400      	movs	r4, #0
{
   2a9fa:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   2a9fc:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2a9fe:	b265      	sxtb	r5, r4
   2aa00:	42ab      	cmp	r3, r5
   2aa02:	dc00      	bgt.n	2aa06 <uECC_vli_add+0x10>
}
   2aa04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   2aa06:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   2aa0a:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   2aa0e:	443d      	add	r5, r7
   2aa10:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   2aa12:	42af      	cmp	r7, r5
   2aa14:	f000 0001 	and.w	r0, r0, #1
   2aa18:	bf18      	it	ne
   2aa1a:	2000      	movne	r0, #0
		result[i] = sum;
   2aa1c:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2aa20:	bf88      	it	hi
   2aa22:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   2aa26:	3401      	adds	r4, #1
   2aa28:	e7e9      	b.n	2a9fe <uECC_vli_add+0x8>

0002aa2a <uECC_vli_rshift1>:
	vli += num_words;
   2aa2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   2aa2e:	2300      	movs	r3, #0
	while (vli-- > end) {
   2aa30:	4288      	cmp	r0, r1
   2aa32:	d300      	bcc.n	2aa36 <uECC_vli_rshift1+0xc>
}
   2aa34:	4770      	bx	lr
		uECC_word_t temp = *vli;
   2aa36:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   2aa3a:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   2aa3e:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   2aa40:	07d3      	lsls	r3, r2, #31
   2aa42:	e7f5      	b.n	2aa30 <uECC_vli_rshift1+0x6>

0002aa44 <vli_modInv_update>:
{
   2aa44:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   2aa46:	6803      	ldr	r3, [r0, #0]
   2aa48:	07db      	lsls	r3, r3, #31
{
   2aa4a:	4605      	mov	r5, r0
   2aa4c:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   2aa4e:	d404      	bmi.n	2aa5a <vli_modInv_update+0x16>
}
   2aa50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uECC_vli_rshift1(uv, num_words);
   2aa54:	4611      	mov	r1, r2
   2aa56:	f7ff bfe8 	b.w	2aa2a <uECC_vli_rshift1>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   2aa5a:	4613      	mov	r3, r2
   2aa5c:	460a      	mov	r2, r1
   2aa5e:	4601      	mov	r1, r0
   2aa60:	f7ff ffc9 	bl	2a9f6 <uECC_vli_add>
	uECC_vli_rshift1(uv, num_words);
   2aa64:	4621      	mov	r1, r4
		carry = uECC_vli_add(uv, uv, mod, num_words);
   2aa66:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   2aa68:	4628      	mov	r0, r5
   2aa6a:	f7ff ffde 	bl	2aa2a <uECC_vli_rshift1>
	if (carry) {
   2aa6e:	b146      	cbz	r6, 2aa82 <vli_modInv_update+0x3e>
		uv[num_words - 1] |= HIGH_BIT_SET;
   2aa70:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   2aa74:	3c01      	subs	r4, #1
   2aa76:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   2aa7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2aa7e:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
   2aa82:	bd70      	pop	{r4, r5, r6, pc}

0002aa84 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   2aa84:	f04f 0c00 	mov.w	ip, #0
{
   2aa88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   2aa8c:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   2aa8e:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   2aa90:	fa4f f98c 	sxtb.w	r9, ip
   2aa94:	454b      	cmp	r3, r9
   2aa96:	dc16      	bgt.n	2aac6 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   2aa98:	f04f 36ff 	mov.w	r6, #4294967295
   2aa9c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   2aaa0:	9601      	str	r6, [sp, #4]
   2aaa2:	f04f 0800 	mov.w	r8, #0
   2aaa6:	9f01      	ldr	r7, [sp, #4]
   2aaa8:	fa53 fe88 	uxtab	lr, r3, r8
   2aaac:	fa4f fe8e 	sxtb.w	lr, lr
   2aab0:	45be      	cmp	lr, r7
   2aab2:	fa5f f688 	uxtb.w	r6, r8
   2aab6:	db28      	blt.n	2ab0a <uECC_vli_mult+0x86>
	result[num_words * 2 - 1] = r0;
   2aab8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2aabc:	f840 4c04 	str.w	r4, [r0, #-4]
}
   2aac0:	b003      	add	sp, #12
   2aac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   2aac6:	f04f 0e00 	mov.w	lr, #0
   2aaca:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   2aace:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   2aad0:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2aad4:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   2aad8:	fba6 6707 	umull	r6, r7, r6, r7
   2aadc:	1936      	adds	r6, r6, r4
		for (i = 0; i <= k; ++i) {
   2aade:	f10e 0e01 	add.w	lr, lr, #1
   2aae2:	416f      	adcs	r7, r5
	*r0 = (uECC_word_t)r01;
   2aae4:	4634      	mov	r4, r6
		for (i = 0; i <= k; ++i) {
   2aae6:	fa4f f68e 	sxtb.w	r6, lr
   2aaea:	f04f 0b00 	mov.w	fp, #0
   2aaee:	bf28      	it	cs
   2aaf0:	f04f 0b01 	movcs.w	fp, #1
   2aaf4:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   2aaf6:	44d8      	add	r8, fp
	*r1 = r01 >> uECC_WORD_BITS;
   2aaf8:	463d      	mov	r5, r7
		for (i = 0; i <= k; ++i) {
   2aafa:	dde9      	ble.n	2aad0 <uECC_vli_mult+0x4c>
		result[k] = r0;
   2aafc:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r2 += (r01 < p);
   2ab00:	4645      	mov	r5, r8
   2ab02:	f10c 0c01 	add.w	ip, ip, #1
	*r1 = r01 >> uECC_WORD_BITS;
   2ab06:	463c      	mov	r4, r7
   2ab08:	e7c2      	b.n	2aa90 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2ab0a:	3601      	adds	r6, #1
   2ab0c:	46a9      	mov	r9, r5
   2ab0e:	b276      	sxtb	r6, r6
   2ab10:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   2ab14:	2500      	movs	r5, #0
   2ab16:	b277      	sxtb	r7, r6
   2ab18:	42bb      	cmp	r3, r7
   2ab1a:	dc05      	bgt.n	2ab28 <uECC_vli_mult+0xa4>
		result[k] = r0;
   2ab1c:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   2ab20:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   2ab24:	464c      	mov	r4, r9
   2ab26:	e7be      	b.n	2aaa6 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2ab28:	f06f 0703 	mvn.w	r7, #3
   2ab2c:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   2ab2e:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   2ab32:	f85a 7007 	ldr.w	r7, [sl, r7]
   2ab36:	fba7 7c0c 	umull	r7, ip, r7, ip
   2ab3a:	193f      	adds	r7, r7, r4
   2ab3c:	eb5c 0c09 	adcs.w	ip, ip, r9
   2ab40:	f04f 0b00 	mov.w	fp, #0
   2ab44:	bf28      	it	cs
   2ab46:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   2ab4a:	445d      	add	r5, fp
	*r1 = r01 >> uECC_WORD_BITS;
   2ab4c:	46e1      	mov	r9, ip
	*r0 = (uECC_word_t)r01;
   2ab4e:	463c      	mov	r4, r7
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2ab50:	3601      	adds	r6, #1
   2ab52:	e7e0      	b.n	2ab16 <uECC_vli_mult+0x92>

0002ab54 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   2ab54:	2300      	movs	r3, #0
{
   2ab56:	b510      	push	{r4, lr}
		 vli[i] = 0;
   2ab58:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   2ab5a:	b25a      	sxtb	r2, r3
   2ab5c:	4291      	cmp	r1, r2
   2ab5e:	dc00      	bgt.n	2ab62 <uECC_vli_clear+0xe>
}
   2ab60:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   2ab62:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2ab66:	3301      	adds	r3, #1
   2ab68:	e7f7      	b.n	2ab5a <uECC_vli_clear+0x6>

0002ab6a <uECC_vli_isZero>:
{
   2ab6a:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   2ab6c:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   2ab6e:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   2ab70:	b25c      	sxtb	r4, r3
   2ab72:	42a1      	cmp	r1, r4
   2ab74:	dc03      	bgt.n	2ab7e <uECC_vli_isZero+0x14>
}
   2ab76:	fab2 f082 	clz	r0, r2
   2ab7a:	0940      	lsrs	r0, r0, #5
   2ab7c:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   2ab7e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2ab82:	3301      	adds	r3, #1
   2ab84:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   2ab86:	e7f3      	b.n	2ab70 <uECC_vli_isZero+0x6>

0002ab88 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2ab88:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   2ab8a:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2ab8c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   2ab90:	f001 011f 	and.w	r1, r1, #31
   2ab94:	408b      	lsls	r3, r1
}
   2ab96:	4018      	ands	r0, r3
   2ab98:	4770      	bx	lr

0002ab9a <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2ab9a:	1e4b      	subs	r3, r1, #1
{
   2ab9c:	b510      	push	{r4, lr}
   2ab9e:	b25b      	sxtb	r3, r3
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2aba0:	1d04      	adds	r4, r0, #4
   2aba2:	061a      	lsls	r2, r3, #24
   2aba4:	d403      	bmi.n	2abae <uECC_vli_numBits+0x14>
   2aba6:	1e5a      	subs	r2, r3, #1
   2aba8:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
   2abac:	b171      	cbz	r1, 2abcc <uECC_vli_numBits+0x32>
	return (i + 1);
   2abae:	3301      	adds	r3, #1
   2abb0:	b25b      	sxtb	r3, r3
	if (num_digits == 0) {
   2abb2:	b183      	cbz	r3, 2abd6 <uECC_vli_numBits+0x3c>
	digit = vli[num_digits - 1];
   2abb4:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   2abb8:	3a01      	subs	r2, #1
   2abba:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
	for (i = 0; digit; ++i) {
   2abbe:	2200      	movs	r2, #0
   2abc0:	b931      	cbnz	r1, 2abd0 <uECC_vli_numBits+0x36>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   2abc2:	3b01      	subs	r3, #1
   2abc4:	eb02 1243 	add.w	r2, r2, r3, lsl #5
   2abc8:	b210      	sxth	r0, r2
}
   2abca:	bd10      	pop	{r4, pc}
   2abcc:	4613      	mov	r3, r2
   2abce:	e7e8      	b.n	2aba2 <uECC_vli_numBits+0x8>
		digit >>= 1;
   2abd0:	0849      	lsrs	r1, r1, #1
	for (i = 0; digit; ++i) {
   2abd2:	3201      	adds	r2, #1
   2abd4:	e7f4      	b.n	2abc0 <uECC_vli_numBits+0x26>
		return 0;
   2abd6:	4618      	mov	r0, r3
   2abd8:	e7f7      	b.n	2abca <uECC_vli_numBits+0x30>

0002abda <uECC_vli_set>:
{
   2abda:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   2abdc:	2300      	movs	r3, #0
   2abde:	b25c      	sxtb	r4, r3
   2abe0:	42a2      	cmp	r2, r4
   2abe2:	dc00      	bgt.n	2abe6 <uECC_vli_set+0xc>
}
   2abe4:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   2abe6:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   2abea:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2abee:	3301      	adds	r3, #1
   2abf0:	e7f5      	b.n	2abde <uECC_vli_set+0x4>

0002abf2 <uECC_vli_cmp_unsafe>:
{
   2abf2:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   2abf4:	3a01      	subs	r2, #1
   2abf6:	b252      	sxtb	r2, r2
   2abf8:	0613      	lsls	r3, r2, #24
   2abfa:	d501      	bpl.n	2ac00 <uECC_vli_cmp_unsafe+0xe>
	return 0;
   2abfc:	2000      	movs	r0, #0
}
   2abfe:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   2ac00:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   2ac04:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   2ac08:	429c      	cmp	r4, r3
   2ac0a:	d805      	bhi.n	2ac18 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   2ac0c:	f102 32ff 	add.w	r2, r2, #4294967295
   2ac10:	d2f2      	bcs.n	2abf8 <uECC_vli_cmp_unsafe+0x6>
			return -1;
   2ac12:	f04f 30ff 	mov.w	r0, #4294967295
   2ac16:	e7f2      	b.n	2abfe <uECC_vli_cmp_unsafe+0xc>
			return 1;
   2ac18:	2001      	movs	r0, #1
   2ac1a:	e7f0      	b.n	2abfe <uECC_vli_cmp_unsafe+0xc>

0002ac1c <uECC_vli_equal>:
{
   2ac1c:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   2ac1e:	3a01      	subs	r2, #1
   2ac20:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   2ac22:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   2ac24:	0614      	lsls	r4, r2, #24
   2ac26:	d503      	bpl.n	2ac30 <uECC_vli_equal+0x14>
}
   2ac28:	1e18      	subs	r0, r3, #0
   2ac2a:	bf18      	it	ne
   2ac2c:	2001      	movne	r0, #1
   2ac2e:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   2ac30:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   2ac34:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   2ac38:	406c      	eors	r4, r5
   2ac3a:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   2ac3c:	3a01      	subs	r2, #1
   2ac3e:	e7f1      	b.n	2ac24 <uECC_vli_equal+0x8>

0002ac40 <uECC_vli_sub>:
{
   2ac40:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   2ac42:	2400      	movs	r4, #0
{
   2ac44:	4606      	mov	r6, r0
   2ac46:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   2ac48:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2ac4a:	b265      	sxtb	r5, r4
   2ac4c:	4565      	cmp	r5, ip
   2ac4e:	db00      	blt.n	2ac52 <uECC_vli_sub+0x12>
}
   2ac50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   2ac52:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   2ac56:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   2ac5a:	1a3d      	subs	r5, r7, r0
   2ac5c:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   2ac5e:	42af      	cmp	r7, r5
   2ac60:	f000 0001 	and.w	r0, r0, #1
   2ac64:	bf18      	it	ne
   2ac66:	2000      	movne	r0, #0
		result[i] = diff;
   2ac68:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2ac6c:	bf38      	it	cc
   2ac6e:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   2ac72:	3401      	adds	r4, #1
   2ac74:	e7e9      	b.n	2ac4a <uECC_vli_sub+0xa>

0002ac76 <uECC_vli_modAdd>:
{
   2ac76:	b570      	push	{r4, r5, r6, lr}
   2ac78:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   2ac7c:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   2ac7e:	4633      	mov	r3, r6
{
   2ac80:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   2ac82:	f7ff feb8 	bl	2a9f6 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   2ac86:	b930      	cbnz	r0, 2ac96 <uECC_vli_modAdd+0x20>
   2ac88:	4632      	mov	r2, r6
   2ac8a:	4621      	mov	r1, r4
   2ac8c:	4628      	mov	r0, r5
   2ac8e:	f7ff ffb0 	bl	2abf2 <uECC_vli_cmp_unsafe>
   2ac92:	2801      	cmp	r0, #1
   2ac94:	d007      	beq.n	2aca6 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   2ac96:	4633      	mov	r3, r6
   2ac98:	462a      	mov	r2, r5
   2ac9a:	4621      	mov	r1, r4
   2ac9c:	4620      	mov	r0, r4
}
   2ac9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   2aca2:	f7ff bfcd 	b.w	2ac40 <uECC_vli_sub>
}
   2aca6:	bd70      	pop	{r4, r5, r6, pc}

0002aca8 <uECC_vli_modSub>:
{
   2aca8:	b570      	push	{r4, r5, r6, lr}
   2acaa:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   2acae:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   2acb0:	4633      	mov	r3, r6
{
   2acb2:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   2acb4:	f7ff ffc4 	bl	2ac40 <uECC_vli_sub>
	if (l_borrow) {
   2acb8:	b138      	cbz	r0, 2acca <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   2acba:	4633      	mov	r3, r6
   2acbc:	462a      	mov	r2, r5
   2acbe:	4621      	mov	r1, r4
   2acc0:	4620      	mov	r0, r4
}
   2acc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   2acc6:	f7ff be96 	b.w	2a9f6 <uECC_vli_add>
}
   2acca:	bd70      	pop	{r4, r5, r6, pc}

0002accc <uECC_vli_mmod>:
{
   2accc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2acd0:	b0a5      	sub	sp, #148	; 0x94
   2acd2:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   2acd4:	ab14      	add	r3, sp, #80	; 0x50
   2acd6:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   2acda:	9001      	str	r0, [sp, #4]
			   uECC_vli_numBits(mod, num_words);
   2acdc:	4629      	mov	r1, r5
   2acde:	4610      	mov	r0, r2
{
   2ace0:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   2ace2:	f7ff ff5a 	bl	2ab9a <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   2ace6:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   2acea:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2acec:	2c00      	cmp	r4, #0
   2acee:	4621      	mov	r1, r4
   2acf0:	bfb8      	it	lt
   2acf2:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2acf6:	4263      	negs	r3, r4
   2acf8:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2acfc:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2ad00:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   2ad04:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2ad06:	bf58      	it	pl
   2ad08:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   2ad0a:	f7ff ff23 	bl	2ab54 <uECC_vli_clear>
	if (bit_shift > 0) {
   2ad0e:	2e00      	cmp	r6, #0
   2ad10:	ea4f 0081 	mov.w	r0, r1, lsl #2
   2ad14:	dd2d      	ble.n	2ad72 <uECC_vli_mmod+0xa6>
   2ad16:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   2ad18:	2200      	movs	r2, #0
   2ad1a:	4418      	add	r0, r3
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   2ad1c:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2ad20:	4613      	mov	r3, r2
   2ad22:	429d      	cmp	r5, r3
   2ad24:	d81a      	bhi.n	2ad5c <uECC_vli_mmod+0x90>
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2ad26:	ab04      	add	r3, sp, #16
   2ad28:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   2ad2c:	9300      	str	r3, [sp, #0]
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2ad2e:	1e6f      	subs	r7, r5, #1
   2ad30:	ab24      	add	r3, sp, #144	; 0x90
		for (i = 0; i < num_words * 2; ++i) {
   2ad32:	ea4f 0845 	mov.w	r8, r5, lsl #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2ad36:	ea4f 0985 	mov.w	r9, r5, lsl #2
   2ad3a:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2ad3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   2ad40:	2c00      	cmp	r4, #0
   2ad42:	da53      	bge.n	2adec <uECC_vli_mmod+0x120>
	uECC_vli_set(result, v[index], num_words);
   2ad44:	ab24      	add	r3, sp, #144	; 0x90
   2ad46:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2ad4a:	9801      	ldr	r0, [sp, #4]
   2ad4c:	f856 1c88 	ldr.w	r1, [r6, #-136]
   2ad50:	462a      	mov	r2, r5
   2ad52:	f7ff ff42 	bl	2abda <uECC_vli_set>
}
   2ad56:	b025      	add	sp, #148	; 0x94
   2ad58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   2ad5c:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   2ad60:	fa0c f106 	lsl.w	r1, ip, r6
   2ad64:	430a      	orrs	r2, r1
   2ad66:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2ad6a:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   2ad6c:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2ad70:	e7d7      	b.n	2ad22 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   2ad72:	ab04      	add	r3, sp, #16
   2ad74:	462a      	mov	r2, r5
   2ad76:	4639      	mov	r1, r7
   2ad78:	4418      	add	r0, r3
   2ad7a:	f7ff ff2e 	bl	2abda <uECC_vli_set>
   2ad7e:	e7d2      	b.n	2ad26 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2ad80:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   2ad84:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   2ad88:	ab24      	add	r3, sp, #144	; 0x90
   2ad8a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   2ad8e:	f10c 0c01 	add.w	ip, ip, #1
   2ad92:	f853 3c80 	ldr.w	r3, [r3, #-128]
   2ad96:	440b      	add	r3, r1
   2ad98:	1ad3      	subs	r3, r2, r3
   2ad9a:	bf34      	ite	cc
   2ad9c:	f04f 0b01 	movcc.w	fp, #1
   2ada0:	f04f 0b00 	movcs.w	fp, #0
			if (diff != v[index][i]) {
   2ada4:	429a      	cmp	r2, r3
			v[1 - index][i] = diff;
   2ada6:	f85e 2c88 	ldr.w	r2, [lr, #-136]
   2adaa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
				borrow = (diff > v[index][i]);
   2adae:	bf18      	it	ne
   2adb0:	4659      	movne	r1, fp
		for (i = 0; i < num_words * 2; ++i) {
   2adb2:	fa4f f08c 	sxtb.w	r0, ip
   2adb6:	4540      	cmp	r0, r8
   2adb8:	dbe2      	blt.n	2ad80 <uECC_vli_mmod+0xb4>
		index = !(index ^ borrow);
   2adba:	1a73      	subs	r3, r6, r1
   2adbc:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   2adbe:	4629      	mov	r1, r5
   2adc0:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   2adc2:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   2adc4:	f7ff fe31 	bl	2aa2a <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2adc8:	f109 0390 	add.w	r3, r9, #144	; 0x90
   2adcc:	446b      	add	r3, sp
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2adce:	9800      	ldr	r0, [sp, #0]
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2add0:	f853 2c80 	ldr.w	r2, [r3, #-128]
   2add4:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2add8:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2adda:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   2adde:	3c01      	subs	r4, #1
   2ade0:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   2ade4:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2ade6:	f7ff fe20 	bl	2aa2a <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   2adea:	e7a9      	b.n	2ad40 <uECC_vli_mmod+0x74>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2adec:	ab24      	add	r3, sp, #144	; 0x90
   2adee:	f04f 0c00 	mov.w	ip, #0
			v[1 - index][i] = diff;
   2adf2:	f1c6 0e01 	rsb	lr, r6, #1
		uECC_word_t borrow = 0;
   2adf6:	4661      	mov	r1, ip
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2adf8:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   2adfc:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
   2ae00:	e7d7      	b.n	2adb2 <uECC_vli_mmod+0xe6>

0002ae02 <uECC_vli_modMult_fast>:
{
   2ae02:	b530      	push	{r4, r5, lr}
   2ae04:	461c      	mov	r4, r3
   2ae06:	b091      	sub	sp, #68	; 0x44
   2ae08:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   2ae0a:	f993 3000 	ldrsb.w	r3, [r3]
   2ae0e:	4668      	mov	r0, sp
   2ae10:	f7ff fe38 	bl	2aa84 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   2ae14:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   2ae18:	4669      	mov	r1, sp
   2ae1a:	4628      	mov	r0, r5
   2ae1c:	4798      	blx	r3
}
   2ae1e:	b011      	add	sp, #68	; 0x44
   2ae20:	bd30      	pop	{r4, r5, pc}

0002ae22 <uECC_vli_modSquare_fast>:
{
   2ae22:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   2ae24:	460a      	mov	r2, r1
   2ae26:	f7ff bfec 	b.w	2ae02 <uECC_vli_modMult_fast>

0002ae2a <double_jacobian_default>:
{
   2ae2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   2ae2e:	f993 6000 	ldrsb.w	r6, [r3]
{
   2ae32:	b092      	sub	sp, #72	; 0x48
   2ae34:	4604      	mov	r4, r0
   2ae36:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   2ae38:	4610      	mov	r0, r2
   2ae3a:	4631      	mov	r1, r6
{
   2ae3c:	4615      	mov	r5, r2
   2ae3e:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   2ae40:	f7ff fe93 	bl	2ab6a <uECC_vli_isZero>
   2ae44:	2800      	cmp	r0, #0
   2ae46:	f040 8091 	bne.w	2af6c <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   2ae4a:	463a      	mov	r2, r7
   2ae4c:	4649      	mov	r1, r9
   2ae4e:	a802      	add	r0, sp, #8
   2ae50:	f7ff ffe7 	bl	2ae22 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   2ae54:	463b      	mov	r3, r7
   2ae56:	aa02      	add	r2, sp, #8
   2ae58:	4621      	mov	r1, r4
   2ae5a:	a80a      	add	r0, sp, #40	; 0x28
   2ae5c:	f7ff ffd1 	bl	2ae02 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   2ae60:	a902      	add	r1, sp, #8
   2ae62:	4608      	mov	r0, r1
   2ae64:	463a      	mov	r2, r7
   2ae66:	f7ff ffdc 	bl	2ae22 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   2ae6a:	463b      	mov	r3, r7
   2ae6c:	462a      	mov	r2, r5
   2ae6e:	4649      	mov	r1, r9
   2ae70:	4648      	mov	r0, r9
   2ae72:	f7ff ffc6 	bl	2ae02 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   2ae76:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   2ae7a:	463a      	mov	r2, r7
   2ae7c:	4629      	mov	r1, r5
   2ae7e:	4628      	mov	r0, r5
   2ae80:	f7ff ffcf 	bl	2ae22 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   2ae84:	4643      	mov	r3, r8
   2ae86:	462a      	mov	r2, r5
   2ae88:	4621      	mov	r1, r4
   2ae8a:	4620      	mov	r0, r4
   2ae8c:	9600      	str	r6, [sp, #0]
   2ae8e:	f7ff fef2 	bl	2ac76 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   2ae92:	4643      	mov	r3, r8
   2ae94:	462a      	mov	r2, r5
   2ae96:	4629      	mov	r1, r5
   2ae98:	4628      	mov	r0, r5
   2ae9a:	9600      	str	r6, [sp, #0]
   2ae9c:	f7ff feeb 	bl	2ac76 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   2aea0:	4643      	mov	r3, r8
   2aea2:	462a      	mov	r2, r5
   2aea4:	4621      	mov	r1, r4
   2aea6:	4628      	mov	r0, r5
   2aea8:	9600      	str	r6, [sp, #0]
   2aeaa:	f7ff fefd 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   2aeae:	463b      	mov	r3, r7
   2aeb0:	462a      	mov	r2, r5
   2aeb2:	4621      	mov	r1, r4
   2aeb4:	4620      	mov	r0, r4
   2aeb6:	f7ff ffa4 	bl	2ae02 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   2aeba:	4643      	mov	r3, r8
   2aebc:	4622      	mov	r2, r4
   2aebe:	4621      	mov	r1, r4
   2aec0:	4628      	mov	r0, r5
   2aec2:	9600      	str	r6, [sp, #0]
   2aec4:	f7ff fed7 	bl	2ac76 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   2aec8:	4643      	mov	r3, r8
   2aeca:	9600      	str	r6, [sp, #0]
   2aecc:	462a      	mov	r2, r5
   2aece:	4621      	mov	r1, r4
   2aed0:	4620      	mov	r0, r4
   2aed2:	f7ff fed0 	bl	2ac76 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2aed6:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   2aed8:	07db      	lsls	r3, r3, #31
   2aeda:	d54a      	bpl.n	2af72 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   2aedc:	4633      	mov	r3, r6
   2aede:	4642      	mov	r2, r8
   2aee0:	4621      	mov	r1, r4
   2aee2:	4620      	mov	r0, r4
   2aee4:	f7ff fd87 	bl	2a9f6 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   2aee8:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   2aeea:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   2aeec:	4620      	mov	r0, r4
   2aeee:	f7ff fd9c 	bl	2aa2a <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   2aef2:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   2aef6:	3b01      	subs	r3, #1
   2aef8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   2aefc:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   2af00:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   2af04:	463a      	mov	r2, r7
   2af06:	4621      	mov	r1, r4
   2af08:	4628      	mov	r0, r5
   2af0a:	f7ff ff8a 	bl	2ae22 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   2af0e:	4643      	mov	r3, r8
   2af10:	aa0a      	add	r2, sp, #40	; 0x28
   2af12:	4629      	mov	r1, r5
   2af14:	4628      	mov	r0, r5
   2af16:	9600      	str	r6, [sp, #0]
   2af18:	f7ff fec6 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   2af1c:	4643      	mov	r3, r8
   2af1e:	aa0a      	add	r2, sp, #40	; 0x28
   2af20:	4629      	mov	r1, r5
   2af22:	4628      	mov	r0, r5
   2af24:	9600      	str	r6, [sp, #0]
   2af26:	f7ff febf 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   2af2a:	a90a      	add	r1, sp, #40	; 0x28
   2af2c:	4608      	mov	r0, r1
   2af2e:	4643      	mov	r3, r8
   2af30:	462a      	mov	r2, r5
   2af32:	9600      	str	r6, [sp, #0]
   2af34:	f7ff feb8 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   2af38:	463b      	mov	r3, r7
   2af3a:	aa0a      	add	r2, sp, #40	; 0x28
   2af3c:	4621      	mov	r1, r4
   2af3e:	4620      	mov	r0, r4
   2af40:	f7ff ff5f 	bl	2ae02 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   2af44:	aa02      	add	r2, sp, #8
   2af46:	4643      	mov	r3, r8
   2af48:	4610      	mov	r0, r2
   2af4a:	4621      	mov	r1, r4
   2af4c:	9600      	str	r6, [sp, #0]
   2af4e:	f7ff feab 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   2af52:	4632      	mov	r2, r6
   2af54:	4629      	mov	r1, r5
   2af56:	4620      	mov	r0, r4
   2af58:	f7ff fe3f 	bl	2abda <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   2af5c:	4649      	mov	r1, r9
   2af5e:	4628      	mov	r0, r5
   2af60:	f7ff fe3b 	bl	2abda <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   2af64:	a902      	add	r1, sp, #8
   2af66:	4648      	mov	r0, r9
   2af68:	f7ff fe37 	bl	2abda <uECC_vli_set>
}
   2af6c:	b012      	add	sp, #72	; 0x48
   2af6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   2af72:	4631      	mov	r1, r6
   2af74:	4620      	mov	r0, r4
   2af76:	f7ff fd58 	bl	2aa2a <uECC_vli_rshift1>
   2af7a:	e7c3      	b.n	2af04 <double_jacobian_default+0xda>

0002af7c <x_side_default>:
{
   2af7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2af80:	4615      	mov	r5, r2
   2af82:	b08a      	sub	sp, #40	; 0x28
   2af84:	4604      	mov	r4, r0
   2af86:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2af88:	221c      	movs	r2, #28
   2af8a:	2100      	movs	r1, #0
   2af8c:	a803      	add	r0, sp, #12
   2af8e:	f000 fe92 	bl	2bcb6 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   2af92:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   2af94:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2af98:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   2af9a:	462a      	mov	r2, r5
   2af9c:	4631      	mov	r1, r6
   2af9e:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2afa0:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   2afa2:	f7ff ff3e 	bl	2ae22 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   2afa6:	463b      	mov	r3, r7
   2afa8:	aa02      	add	r2, sp, #8
   2afaa:	4621      	mov	r1, r4
   2afac:	4620      	mov	r0, r4
   2afae:	f8cd 8000 	str.w	r8, [sp]
   2afb2:	f7ff fe79 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   2afb6:	462b      	mov	r3, r5
   2afb8:	4632      	mov	r2, r6
   2afba:	4621      	mov	r1, r4
   2afbc:	4620      	mov	r0, r4
   2afbe:	f7ff ff20 	bl	2ae02 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   2afc2:	f8cd 8000 	str.w	r8, [sp]
   2afc6:	463b      	mov	r3, r7
   2afc8:	f105 0284 	add.w	r2, r5, #132	; 0x84
   2afcc:	4621      	mov	r1, r4
   2afce:	4620      	mov	r0, r4
   2afd0:	f7ff fe51 	bl	2ac76 <uECC_vli_modAdd>
}
   2afd4:	b00a      	add	sp, #40	; 0x28
   2afd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002afda <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   2afda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2afde:	b09a      	sub	sp, #104	; 0x68
   2afe0:	4616      	mov	r6, r2
   2afe2:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2afe6:	4644      	mov	r4, r8
{
   2afe8:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   2afea:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2afee:	9500      	str	r5, [sp, #0]
{
   2aff0:	4607      	mov	r7, r0
   2aff2:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2aff4:	4623      	mov	r3, r4
   2aff6:	4602      	mov	r2, r0
   2aff8:	4631      	mov	r1, r6
   2affa:	a802      	add	r0, sp, #8
   2affc:	f7ff fe54 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2b000:	a902      	add	r1, sp, #8
   2b002:	4642      	mov	r2, r8
   2b004:	4608      	mov	r0, r1
   2b006:	f7ff ff0c 	bl	2ae22 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2b00a:	4643      	mov	r3, r8
   2b00c:	aa02      	add	r2, sp, #8
   2b00e:	4639      	mov	r1, r7
   2b010:	4638      	mov	r0, r7
   2b012:	f7ff fef6 	bl	2ae02 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2b016:	4643      	mov	r3, r8
   2b018:	aa02      	add	r2, sp, #8
   2b01a:	4631      	mov	r1, r6
   2b01c:	4630      	mov	r0, r6
   2b01e:	f7ff fef0 	bl	2ae02 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   2b022:	4623      	mov	r3, r4
   2b024:	4652      	mov	r2, sl
   2b026:	4649      	mov	r1, r9
   2b028:	a802      	add	r0, sp, #8
   2b02a:	9500      	str	r5, [sp, #0]
   2b02c:	f7ff fe23 	bl	2ac76 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2b030:	4623      	mov	r3, r4
   2b032:	4652      	mov	r2, sl
   2b034:	4649      	mov	r1, r9
   2b036:	4648      	mov	r0, r9
   2b038:	9500      	str	r5, [sp, #0]
   2b03a:	f7ff fe35 	bl	2aca8 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   2b03e:	4623      	mov	r3, r4
   2b040:	463a      	mov	r2, r7
   2b042:	4631      	mov	r1, r6
   2b044:	a80a      	add	r0, sp, #40	; 0x28
   2b046:	9500      	str	r5, [sp, #0]
   2b048:	f7ff fe2e 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   2b04c:	4643      	mov	r3, r8
   2b04e:	aa0a      	add	r2, sp, #40	; 0x28
   2b050:	4651      	mov	r1, sl
   2b052:	4650      	mov	r0, sl
   2b054:	f7ff fed5 	bl	2ae02 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   2b058:	4623      	mov	r3, r4
   2b05a:	4632      	mov	r2, r6
   2b05c:	4639      	mov	r1, r7
   2b05e:	a80a      	add	r0, sp, #40	; 0x28
   2b060:	9500      	str	r5, [sp, #0]
   2b062:	f7ff fe08 	bl	2ac76 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   2b066:	4642      	mov	r2, r8
   2b068:	4649      	mov	r1, r9
   2b06a:	4630      	mov	r0, r6
   2b06c:	f7ff fed9 	bl	2ae22 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   2b070:	4623      	mov	r3, r4
   2b072:	aa0a      	add	r2, sp, #40	; 0x28
   2b074:	4631      	mov	r1, r6
   2b076:	4630      	mov	r0, r6
   2b078:	9500      	str	r5, [sp, #0]
   2b07a:	f7ff fe15 	bl	2aca8 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   2b07e:	4623      	mov	r3, r4
   2b080:	4632      	mov	r2, r6
   2b082:	4639      	mov	r1, r7
   2b084:	a812      	add	r0, sp, #72	; 0x48
   2b086:	9500      	str	r5, [sp, #0]
   2b088:	f7ff fe0e 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   2b08c:	4643      	mov	r3, r8
   2b08e:	aa12      	add	r2, sp, #72	; 0x48
   2b090:	4649      	mov	r1, r9
   2b092:	4648      	mov	r0, r9
   2b094:	f7ff feb5 	bl	2ae02 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   2b098:	4623      	mov	r3, r4
   2b09a:	4652      	mov	r2, sl
   2b09c:	4649      	mov	r1, r9
   2b09e:	4648      	mov	r0, r9
   2b0a0:	9500      	str	r5, [sp, #0]
   2b0a2:	f7ff fe01 	bl	2aca8 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   2b0a6:	4642      	mov	r2, r8
   2b0a8:	a902      	add	r1, sp, #8
   2b0aa:	a812      	add	r0, sp, #72	; 0x48
   2b0ac:	f7ff feb9 	bl	2ae22 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   2b0b0:	a912      	add	r1, sp, #72	; 0x48
   2b0b2:	4623      	mov	r3, r4
   2b0b4:	aa0a      	add	r2, sp, #40	; 0x28
   2b0b6:	4608      	mov	r0, r1
   2b0b8:	9500      	str	r5, [sp, #0]
   2b0ba:	f7ff fdf5 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   2b0be:	4623      	mov	r3, r4
   2b0c0:	463a      	mov	r2, r7
   2b0c2:	a912      	add	r1, sp, #72	; 0x48
   2b0c4:	a80a      	add	r0, sp, #40	; 0x28
   2b0c6:	9500      	str	r5, [sp, #0]
   2b0c8:	f7ff fdee 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   2b0cc:	a90a      	add	r1, sp, #40	; 0x28
   2b0ce:	4643      	mov	r3, r8
   2b0d0:	aa02      	add	r2, sp, #8
   2b0d2:	4608      	mov	r0, r1
   2b0d4:	f7ff fe95 	bl	2ae02 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   2b0d8:	4623      	mov	r3, r4
   2b0da:	4652      	mov	r2, sl
   2b0dc:	a90a      	add	r1, sp, #40	; 0x28
   2b0de:	4650      	mov	r0, sl
   2b0e0:	9500      	str	r5, [sp, #0]
   2b0e2:	f7ff fde1 	bl	2aca8 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   2b0e6:	462a      	mov	r2, r5
   2b0e8:	a912      	add	r1, sp, #72	; 0x48
   2b0ea:	4638      	mov	r0, r7
   2b0ec:	f7ff fd75 	bl	2abda <uECC_vli_set>
}
   2b0f0:	b01a      	add	sp, #104	; 0x68
   2b0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002b0f6 <uECC_vli_modInv>:
{
   2b0f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b0f8:	460f      	mov	r7, r1
   2b0fa:	b0a1      	sub	sp, #132	; 0x84
   2b0fc:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   2b0fe:	4619      	mov	r1, r3
   2b100:	4638      	mov	r0, r7
{
   2b102:	4615      	mov	r5, r2
   2b104:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   2b106:	f7ff fd30 	bl	2ab6a <uECC_vli_isZero>
   2b10a:	b128      	cbz	r0, 2b118 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   2b10c:	4630      	mov	r0, r6
}
   2b10e:	b021      	add	sp, #132	; 0x84
   2b110:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   2b114:	f7ff bd1e 	b.w	2ab54 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   2b118:	4622      	mov	r2, r4
   2b11a:	4639      	mov	r1, r7
   2b11c:	4668      	mov	r0, sp
   2b11e:	f7ff fd5c 	bl	2abda <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   2b122:	4629      	mov	r1, r5
   2b124:	a808      	add	r0, sp, #32
   2b126:	f7ff fd58 	bl	2abda <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   2b12a:	a810      	add	r0, sp, #64	; 0x40
   2b12c:	4621      	mov	r1, r4
   2b12e:	f7ff fd11 	bl	2ab54 <uECC_vli_clear>
	u[0] = 1;
   2b132:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   2b134:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   2b136:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   2b138:	f7ff fd0c 	bl	2ab54 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   2b13c:	4622      	mov	r2, r4
   2b13e:	a908      	add	r1, sp, #32
   2b140:	4668      	mov	r0, sp
   2b142:	f7ff fd56 	bl	2abf2 <uECC_vli_cmp_unsafe>
   2b146:	b930      	cbnz	r0, 2b156 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   2b148:	4622      	mov	r2, r4
   2b14a:	a910      	add	r1, sp, #64	; 0x40
   2b14c:	4630      	mov	r0, r6
   2b14e:	f7ff fd44 	bl	2abda <uECC_vli_set>
}
   2b152:	b021      	add	sp, #132	; 0x84
   2b154:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   2b156:	9b00      	ldr	r3, [sp, #0]
   2b158:	07da      	lsls	r2, r3, #31
   2b15a:	d409      	bmi.n	2b170 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   2b15c:	4621      	mov	r1, r4
   2b15e:	4668      	mov	r0, sp
   2b160:	f7ff fc63 	bl	2aa2a <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   2b164:	4622      	mov	r2, r4
   2b166:	4629      	mov	r1, r5
   2b168:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   2b16a:	f7ff fc6b 	bl	2aa44 <vli_modInv_update>
   2b16e:	e7e5      	b.n	2b13c <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   2b170:	9b08      	ldr	r3, [sp, #32]
   2b172:	07db      	lsls	r3, r3, #31
   2b174:	d407      	bmi.n	2b186 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   2b176:	4621      	mov	r1, r4
   2b178:	a808      	add	r0, sp, #32
   2b17a:	f7ff fc56 	bl	2aa2a <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   2b17e:	4622      	mov	r2, r4
   2b180:	4629      	mov	r1, r5
   2b182:	a818      	add	r0, sp, #96	; 0x60
   2b184:	e7f1      	b.n	2b16a <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   2b186:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   2b188:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   2b18a:	dd1c      	ble.n	2b1c6 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   2b18c:	aa08      	add	r2, sp, #32
   2b18e:	4669      	mov	r1, sp
   2b190:	4668      	mov	r0, sp
   2b192:	f7ff fd55 	bl	2ac40 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   2b196:	4621      	mov	r1, r4
   2b198:	4668      	mov	r0, sp
   2b19a:	f7ff fc46 	bl	2aa2a <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   2b19e:	4622      	mov	r2, r4
   2b1a0:	a918      	add	r1, sp, #96	; 0x60
   2b1a2:	a810      	add	r0, sp, #64	; 0x40
   2b1a4:	f7ff fd25 	bl	2abf2 <uECC_vli_cmp_unsafe>
   2b1a8:	2800      	cmp	r0, #0
   2b1aa:	da05      	bge.n	2b1b8 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   2b1ac:	a910      	add	r1, sp, #64	; 0x40
   2b1ae:	4623      	mov	r3, r4
   2b1b0:	462a      	mov	r2, r5
   2b1b2:	4608      	mov	r0, r1
   2b1b4:	f7ff fc1f 	bl	2a9f6 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   2b1b8:	a910      	add	r1, sp, #64	; 0x40
   2b1ba:	4623      	mov	r3, r4
   2b1bc:	aa18      	add	r2, sp, #96	; 0x60
   2b1be:	4608      	mov	r0, r1
   2b1c0:	f7ff fd3e 	bl	2ac40 <uECC_vli_sub>
   2b1c4:	e7ce      	b.n	2b164 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   2b1c6:	466a      	mov	r2, sp
   2b1c8:	a808      	add	r0, sp, #32
   2b1ca:	f7ff fd39 	bl	2ac40 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   2b1ce:	4621      	mov	r1, r4
   2b1d0:	a808      	add	r0, sp, #32
   2b1d2:	f7ff fc2a 	bl	2aa2a <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   2b1d6:	4622      	mov	r2, r4
   2b1d8:	a910      	add	r1, sp, #64	; 0x40
   2b1da:	a818      	add	r0, sp, #96	; 0x60
   2b1dc:	f7ff fd09 	bl	2abf2 <uECC_vli_cmp_unsafe>
   2b1e0:	2800      	cmp	r0, #0
   2b1e2:	da05      	bge.n	2b1f0 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   2b1e4:	a918      	add	r1, sp, #96	; 0x60
   2b1e6:	4623      	mov	r3, r4
   2b1e8:	462a      	mov	r2, r5
   2b1ea:	4608      	mov	r0, r1
   2b1ec:	f7ff fc03 	bl	2a9f6 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   2b1f0:	a918      	add	r1, sp, #96	; 0x60
   2b1f2:	4623      	mov	r3, r4
   2b1f4:	aa10      	add	r2, sp, #64	; 0x40
   2b1f6:	4608      	mov	r0, r1
   2b1f8:	f7ff fd22 	bl	2ac40 <uECC_vli_sub>
   2b1fc:	e7bf      	b.n	2b17e <uECC_vli_modInv+0x88>

0002b1fe <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   2b1fe:	7809      	ldrb	r1, [r1, #0]
   2b200:	0049      	lsls	r1, r1, #1
   2b202:	b249      	sxtb	r1, r1
   2b204:	f7ff bcb1 	b.w	2ab6a <uECC_vli_isZero>

0002b208 <apply_z>:
{
   2b208:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b20a:	4615      	mov	r5, r2
   2b20c:	b089      	sub	sp, #36	; 0x24
   2b20e:	461c      	mov	r4, r3
   2b210:	4607      	mov	r7, r0
   2b212:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   2b214:	461a      	mov	r2, r3
   2b216:	4629      	mov	r1, r5
   2b218:	4668      	mov	r0, sp
   2b21a:	f7ff fe02 	bl	2ae22 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   2b21e:	4623      	mov	r3, r4
   2b220:	466a      	mov	r2, sp
   2b222:	4639      	mov	r1, r7
   2b224:	4638      	mov	r0, r7
   2b226:	f7ff fdec 	bl	2ae02 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   2b22a:	4623      	mov	r3, r4
   2b22c:	462a      	mov	r2, r5
   2b22e:	4669      	mov	r1, sp
   2b230:	4668      	mov	r0, sp
   2b232:	f7ff fde6 	bl	2ae02 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   2b236:	4623      	mov	r3, r4
   2b238:	466a      	mov	r2, sp
   2b23a:	4631      	mov	r1, r6
   2b23c:	4630      	mov	r0, r6
   2b23e:	f7ff fde0 	bl	2ae02 <uECC_vli_modMult_fast>
}
   2b242:	b009      	add	sp, #36	; 0x24
   2b244:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b246 <XYcZ_add>:
{
   2b246:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b24a:	b08a      	sub	sp, #40	; 0x28
   2b24c:	4614      	mov	r4, r2
   2b24e:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   2b252:	4655      	mov	r5, sl
{
   2b254:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   2b256:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2b25a:	9600      	str	r6, [sp, #0]
{
   2b25c:	4680      	mov	r8, r0
   2b25e:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2b260:	462b      	mov	r3, r5
   2b262:	4602      	mov	r2, r0
   2b264:	4621      	mov	r1, r4
   2b266:	a802      	add	r0, sp, #8
   2b268:	f7ff fd1e 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2b26c:	a902      	add	r1, sp, #8
   2b26e:	4652      	mov	r2, sl
   2b270:	4608      	mov	r0, r1
   2b272:	f7ff fdd6 	bl	2ae22 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2b276:	4653      	mov	r3, sl
   2b278:	aa02      	add	r2, sp, #8
   2b27a:	4641      	mov	r1, r8
   2b27c:	4640      	mov	r0, r8
   2b27e:	f7ff fdc0 	bl	2ae02 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2b282:	4653      	mov	r3, sl
   2b284:	aa02      	add	r2, sp, #8
   2b286:	4621      	mov	r1, r4
   2b288:	4620      	mov	r0, r4
   2b28a:	f7ff fdba 	bl	2ae02 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2b28e:	462b      	mov	r3, r5
   2b290:	464a      	mov	r2, r9
   2b292:	4639      	mov	r1, r7
   2b294:	4638      	mov	r0, r7
   2b296:	9600      	str	r6, [sp, #0]
   2b298:	f7ff fd06 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   2b29c:	4652      	mov	r2, sl
   2b29e:	4639      	mov	r1, r7
   2b2a0:	a802      	add	r0, sp, #8
   2b2a2:	f7ff fdbe 	bl	2ae22 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   2b2a6:	a902      	add	r1, sp, #8
   2b2a8:	462b      	mov	r3, r5
   2b2aa:	4642      	mov	r2, r8
   2b2ac:	4608      	mov	r0, r1
   2b2ae:	9600      	str	r6, [sp, #0]
   2b2b0:	f7ff fcfa 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   2b2b4:	a902      	add	r1, sp, #8
   2b2b6:	462b      	mov	r3, r5
   2b2b8:	4622      	mov	r2, r4
   2b2ba:	4608      	mov	r0, r1
   2b2bc:	9600      	str	r6, [sp, #0]
   2b2be:	f7ff fcf3 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   2b2c2:	462b      	mov	r3, r5
   2b2c4:	4642      	mov	r2, r8
   2b2c6:	4621      	mov	r1, r4
   2b2c8:	4620      	mov	r0, r4
   2b2ca:	9600      	str	r6, [sp, #0]
   2b2cc:	f7ff fcec 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   2b2d0:	4653      	mov	r3, sl
   2b2d2:	4622      	mov	r2, r4
   2b2d4:	4649      	mov	r1, r9
   2b2d6:	4648      	mov	r0, r9
   2b2d8:	f7ff fd93 	bl	2ae02 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   2b2dc:	462b      	mov	r3, r5
   2b2de:	aa02      	add	r2, sp, #8
   2b2e0:	4641      	mov	r1, r8
   2b2e2:	4620      	mov	r0, r4
   2b2e4:	9600      	str	r6, [sp, #0]
   2b2e6:	f7ff fcdf 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   2b2ea:	4653      	mov	r3, sl
   2b2ec:	4622      	mov	r2, r4
   2b2ee:	4639      	mov	r1, r7
   2b2f0:	4638      	mov	r0, r7
   2b2f2:	f7ff fd86 	bl	2ae02 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   2b2f6:	462b      	mov	r3, r5
   2b2f8:	464a      	mov	r2, r9
   2b2fa:	4639      	mov	r1, r7
   2b2fc:	4638      	mov	r0, r7
   2b2fe:	9600      	str	r6, [sp, #0]
   2b300:	f7ff fcd2 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   2b304:	4632      	mov	r2, r6
   2b306:	a902      	add	r1, sp, #8
   2b308:	4620      	mov	r0, r4
   2b30a:	f7ff fc66 	bl	2abda <uECC_vli_set>
}
   2b30e:	b00a      	add	sp, #40	; 0x28
   2b310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002b314 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   2b314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b318:	b0af      	sub	sp, #188	; 0xbc
   2b31a:	4691      	mov	r9, r2
   2b31c:	9c39      	ldr	r4, [sp, #228]	; 0xe4
   2b31e:	9002      	str	r0, [sp, #8]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2b320:	f994 6000 	ldrsb.w	r6, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   2b324:	a816      	add	r0, sp, #88	; 0x58
   2b326:	4632      	mov	r2, r6
{
   2b328:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   2b32a:	f7ff fc56 	bl	2abda <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2b32e:	00b3      	lsls	r3, r6, #2
   2b330:	9303      	str	r3, [sp, #12]
   2b332:	eb01 0386 	add.w	r3, r1, r6, lsl #2
{
   2b336:	4688      	mov	r8, r1
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2b338:	a826      	add	r0, sp, #152	; 0x98
   2b33a:	4619      	mov	r1, r3
   2b33c:	9304      	str	r3, [sp, #16]
   2b33e:	f7ff fc4c 	bl	2abda <uECC_vli_set>
	if (initial_Z) {
   2b342:	2d00      	cmp	r5, #0
   2b344:	f000 8081 	beq.w	2b44a <EccPoint_mult+0x136>
		uECC_vli_set(z, initial_Z, num_words);
   2b348:	4629      	mov	r1, r5
   2b34a:	a806      	add	r0, sp, #24
   2b34c:	f7ff fc45 	bl	2abda <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   2b350:	4632      	mov	r2, r6
   2b352:	a916      	add	r1, sp, #88	; 0x58
   2b354:	a80e      	add	r0, sp, #56	; 0x38
   2b356:	f7ff fc40 	bl	2abda <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   2b35a:	a926      	add	r1, sp, #152	; 0x98
   2b35c:	a81e      	add	r0, sp, #120	; 0x78
   2b35e:	f7ff fc3c 	bl	2abda <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   2b362:	4623      	mov	r3, r4
   2b364:	aa06      	add	r2, sp, #24
   2b366:	a816      	add	r0, sp, #88	; 0x58
   2b368:	f7ff ff4e 	bl	2b208 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   2b36c:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   2b370:	4623      	mov	r3, r4
   2b372:	aa06      	add	r2, sp, #24
   2b374:	a926      	add	r1, sp, #152	; 0x98
   2b376:	a816      	add	r0, sp, #88	; 0x58
   2b378:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   2b37a:	4623      	mov	r3, r4
   2b37c:	aa06      	add	r2, sp, #24
   2b37e:	a91e      	add	r1, sp, #120	; 0x78
   2b380:	a80e      	add	r0, sp, #56	; 0x38
   2b382:	f7ff ff41 	bl	2b208 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   2b386:	f9bd 50e0 	ldrsh.w	r5, [sp, #224]	; 0xe0
   2b38a:	3d02      	subs	r5, #2
   2b38c:	b22d      	sxth	r5, r5
   2b38e:	2d00      	cmp	r5, #0
   2b390:	dc62      	bgt.n	2b458 <EccPoint_mult+0x144>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2b392:	f8d9 5000 	ldr.w	r5, [r9]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2b396:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2b398:	f005 0701 	and.w	r7, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2b39c:	ab0e      	add	r3, sp, #56	; 0x38
   2b39e:	eb03 1947 	add.w	r9, r3, r7, lsl #5
   2b3a2:	43ed      	mvns	r5, r5
   2b3a4:	ab1e      	add	r3, sp, #120	; 0x78
   2b3a6:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   2b3aa:	f005 0501 	and.w	r5, r5, #1
   2b3ae:	ab0e      	add	r3, sp, #56	; 0x38
   2b3b0:	eb03 1a45 	add.w	sl, r3, r5, lsl #5
   2b3b4:	ab1e      	add	r3, sp, #120	; 0x78
   2b3b6:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   2b3ba:	462b      	mov	r3, r5
   2b3bc:	4652      	mov	r2, sl
   2b3be:	4639      	mov	r1, r7
   2b3c0:	4648      	mov	r0, r9

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2b3c2:	f104 0b04 	add.w	fp, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2b3c6:	f7ff fe08 	bl	2afda <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2b3ca:	465b      	mov	r3, fp
   2b3cc:	aa0e      	add	r2, sp, #56	; 0x38
   2b3ce:	a916      	add	r1, sp, #88	; 0x58
   2b3d0:	a806      	add	r0, sp, #24
   2b3d2:	9600      	str	r6, [sp, #0]
   2b3d4:	f7ff fc68 	bl	2aca8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   2b3d8:	a906      	add	r1, sp, #24
   2b3da:	4623      	mov	r3, r4
   2b3dc:	463a      	mov	r2, r7
   2b3de:	4608      	mov	r0, r1
   2b3e0:	f7ff fd0f 	bl	2ae02 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   2b3e4:	a906      	add	r1, sp, #24
   2b3e6:	4623      	mov	r3, r4
   2b3e8:	4642      	mov	r2, r8
   2b3ea:	4608      	mov	r0, r1
   2b3ec:	f7ff fd09 	bl	2ae02 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2b3f0:	a906      	add	r1, sp, #24
   2b3f2:	4633      	mov	r3, r6
   2b3f4:	465a      	mov	r2, fp
   2b3f6:	4608      	mov	r0, r1
   2b3f8:	f7ff fe7d 	bl	2b0f6 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   2b3fc:	a906      	add	r1, sp, #24
   2b3fe:	9a04      	ldr	r2, [sp, #16]
   2b400:	4623      	mov	r3, r4
   2b402:	4608      	mov	r0, r1
   2b404:	f7ff fcfd 	bl	2ae02 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   2b408:	a906      	add	r1, sp, #24
   2b40a:	4623      	mov	r3, r4
   2b40c:	464a      	mov	r2, r9
   2b40e:	4608      	mov	r0, r1
   2b410:	f7ff fcf7 	bl	2ae02 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2b414:	463b      	mov	r3, r7
   2b416:	464a      	mov	r2, r9
   2b418:	4629      	mov	r1, r5
   2b41a:	4650      	mov	r0, sl
   2b41c:	9400      	str	r4, [sp, #0]
   2b41e:	f7ff ff12 	bl	2b246 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   2b422:	4623      	mov	r3, r4
   2b424:	aa06      	add	r2, sp, #24
   2b426:	a91e      	add	r1, sp, #120	; 0x78
   2b428:	a80e      	add	r0, sp, #56	; 0x38
   2b42a:	f7ff feed 	bl	2b208 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2b42e:	9802      	ldr	r0, [sp, #8]
   2b430:	4632      	mov	r2, r6
   2b432:	a90e      	add	r1, sp, #56	; 0x38
   2b434:	f7ff fbd1 	bl	2abda <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   2b438:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   2b43c:	a91e      	add	r1, sp, #120	; 0x78
   2b43e:	4418      	add	r0, r3
   2b440:	f7ff fbcb 	bl	2abda <uECC_vli_set>
}
   2b444:	b02f      	add	sp, #188	; 0xbc
   2b446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   2b44a:	4631      	mov	r1, r6
   2b44c:	a806      	add	r0, sp, #24
   2b44e:	f7ff fb81 	bl	2ab54 <uECC_vli_clear>
		z[0] = 1;
   2b452:	2301      	movs	r3, #1
   2b454:	9306      	str	r3, [sp, #24]
   2b456:	e77b      	b.n	2b350 <EccPoint_mult+0x3c>
		nb = !uECC_vli_testBit(scalar, i);
   2b458:	4629      	mov	r1, r5
   2b45a:	4648      	mov	r0, r9
   2b45c:	f7ff fb94 	bl	2ab88 <uECC_vli_testBit>
   2b460:	fab0 f780 	clz	r7, r0
   2b464:	097f      	lsrs	r7, r7, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2b466:	f1c7 0101 	rsb	r1, r7, #1
   2b46a:	ab0e      	add	r3, sp, #56	; 0x38
   2b46c:	eb03 1b41 	add.w	fp, r3, r1, lsl #5
   2b470:	ab1e      	add	r3, sp, #120	; 0x78
   2b472:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   2b476:	ab0e      	add	r3, sp, #56	; 0x38
   2b478:	eb03 1a47 	add.w	sl, r3, r7, lsl #5
   2b47c:	ab1e      	add	r3, sp, #120	; 0x78
   2b47e:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   2b482:	463b      	mov	r3, r7
   2b484:	4652      	mov	r2, sl
   2b486:	4658      	mov	r0, fp
   2b488:	9400      	str	r4, [sp, #0]
   2b48a:	9105      	str	r1, [sp, #20]
   2b48c:	f7ff fda5 	bl	2afda <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2b490:	9905      	ldr	r1, [sp, #20]
   2b492:	9400      	str	r4, [sp, #0]
   2b494:	460b      	mov	r3, r1
   2b496:	465a      	mov	r2, fp
   2b498:	4639      	mov	r1, r7
   2b49a:	4650      	mov	r0, sl
   2b49c:	f7ff fed3 	bl	2b246 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   2b4a0:	3d01      	subs	r5, #1
   2b4a2:	e773      	b.n	2b38c <EccPoint_mult+0x78>

0002b4a4 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   2b4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2b4a8:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   2b4ac:	f119 061f 	adds.w	r6, r9, #31
   2b4b0:	bf48      	it	mi
   2b4b2:	f109 063e 	addmi.w	r6, r9, #62	; 0x3e
{
   2b4b6:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2b4b8:	f103 0524 	add.w	r5, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2b4bc:	f346 1647 	sbfx	r6, r6, #5, #8
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2b4c0:	4601      	mov	r1, r0
{
   2b4c2:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2b4c4:	4633      	mov	r3, r6
   2b4c6:	462a      	mov	r2, r5
   2b4c8:	4638      	mov	r0, r7
   2b4ca:	f7ff fa94 	bl	2a9f6 <uECC_vli_add>
   2b4ce:	4604      	mov	r4, r0
   2b4d0:	b990      	cbnz	r0, 2b4f8 <regularize_k+0x54>
   2b4d2:	ebb9 1f46 	cmp.w	r9, r6, lsl #5
   2b4d6:	da06      	bge.n	2b4e6 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   2b4d8:	4649      	mov	r1, r9
   2b4da:	4638      	mov	r0, r7
   2b4dc:	f7ff fb54 	bl	2ab88 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   2b4e0:	1e04      	subs	r4, r0, #0
   2b4e2:	bf18      	it	ne
   2b4e4:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   2b4e6:	4633      	mov	r3, r6
   2b4e8:	462a      	mov	r2, r5
   2b4ea:	4639      	mov	r1, r7
   2b4ec:	4640      	mov	r0, r8
   2b4ee:	f7ff fa82 	bl	2a9f6 <uECC_vli_add>

	return carry;
}
   2b4f2:	4620      	mov	r0, r4
   2b4f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2b4f8:	2401      	movs	r4, #1
   2b4fa:	e7f4      	b.n	2b4e6 <regularize_k+0x42>

0002b4fc <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   2b4fc:	b530      	push	{r4, r5, lr}
   2b4fe:	4614      	mov	r4, r2
   2b500:	b095      	sub	sp, #84	; 0x54
   2b502:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2b504:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2b506:	4623      	mov	r3, r4
{
   2b508:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2b50a:	a904      	add	r1, sp, #16
   2b50c:	9102      	str	r1, [sp, #8]
   2b50e:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2b510:	f7ff ffc8 	bl	2b4a4 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   2b514:	fab0 f380 	clz	r3, r0
   2b518:	9401      	str	r4, [sp, #4]
   2b51a:	095b      	lsrs	r3, r3, #5
   2b51c:	aa14      	add	r2, sp, #80	; 0x50
   2b51e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2b522:	8863      	ldrh	r3, [r4, #2]
   2b524:	3301      	adds	r3, #1
   2b526:	b21b      	sxth	r3, r3
   2b528:	9300      	str	r3, [sp, #0]
   2b52a:	f852 2c48 	ldr.w	r2, [r2, #-72]
   2b52e:	2300      	movs	r3, #0
   2b530:	f104 0144 	add.w	r1, r4, #68	; 0x44
   2b534:	4628      	mov	r0, r5
   2b536:	f7ff feed 	bl	2b314 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   2b53a:	4621      	mov	r1, r4
   2b53c:	4628      	mov	r0, r5
   2b53e:	f7ff fe5e 	bl	2b1fe <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   2b542:	fab0 f080 	clz	r0, r0
   2b546:	0940      	lsrs	r0, r0, #5
   2b548:	b015      	add	sp, #84	; 0x54
   2b54a:	bd30      	pop	{r4, r5, pc}

0002b54c <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   2b54c:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   2b54e:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2b550:	1e4f      	subs	r7, r1, #1
   2b552:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   2b554:	428c      	cmp	r4, r1
   2b556:	f105 0501 	add.w	r5, r5, #1
   2b55a:	db00      	blt.n	2b55e <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   2b55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2b55e:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   2b560:	f023 0603 	bic.w	r6, r3, #3
   2b564:	f003 0303 	and.w	r3, r3, #3
   2b568:	5996      	ldr	r6, [r2, r6]
   2b56a:	00db      	lsls	r3, r3, #3
   2b56c:	fa26 f303 	lsr.w	r3, r6, r3
   2b570:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   2b572:	e7ee      	b.n	2b552 <uECC_vli_nativeToBytes+0x6>

0002b574 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   2b574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b576:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2b578:	1cd1      	adds	r1, r2, #3
   2b57a:	bf48      	it	mi
   2b57c:	1d91      	addmi	r1, r2, #6
   2b57e:	f341 0187 	sbfx	r1, r1, #2, #8
{
   2b582:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2b584:	f7ff fae6 	bl	2ab54 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   2b588:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2b58a:	1e67      	subs	r7, r4, #1
   2b58c:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   2b58e:	42a2      	cmp	r2, r4
   2b590:	f105 0501 	add.w	r5, r5, #1
   2b594:	db00      	blt.n	2b598 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   2b596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2b598:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   2b59a:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   2b59e:	5cb2      	ldrb	r2, [r6, r2]
   2b5a0:	f003 0303 	and.w	r3, r3, #3
   2b5a4:	00db      	lsls	r3, r3, #3
   2b5a6:	409a      	lsls	r2, r3
		native[b / uECC_WORD_SIZE] |=
   2b5a8:	5843      	ldr	r3, [r0, r1]
   2b5aa:	4313      	orrs	r3, r2
   2b5ac:	5043      	str	r3, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   2b5ae:	e7ed      	b.n	2b58c <uECC_vli_bytesToNative+0x18>

0002b5b0 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   2b5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b5b2:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2b5b4:	f991 6000 	ldrsb.w	r6, [r1]
{
   2b5b8:	4605      	mov	r5, r0
   2b5ba:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   2b5bc:	f7ff fe1f 	bl	2b1fe <EccPoint_isZero>
   2b5c0:	bb28      	cbnz	r0, 2b60e <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2b5c2:	1d27      	adds	r7, r4, #4
   2b5c4:	4632      	mov	r2, r6
   2b5c6:	4629      	mov	r1, r5
   2b5c8:	4638      	mov	r0, r7
   2b5ca:	f7ff fb12 	bl	2abf2 <uECC_vli_cmp_unsafe>
   2b5ce:	2801      	cmp	r0, #1
   2b5d0:	d120      	bne.n	2b614 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   2b5d2:	4632      	mov	r2, r6
   2b5d4:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   2b5d8:	4638      	mov	r0, r7
   2b5da:	f7ff fb0a 	bl	2abf2 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2b5de:	2801      	cmp	r0, #1
   2b5e0:	d118      	bne.n	2b614 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   2b5e2:	4622      	mov	r2, r4
   2b5e4:	4668      	mov	r0, sp
   2b5e6:	f7ff fc1c 	bl	2ae22 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   2b5ea:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   2b5ee:	4622      	mov	r2, r4
   2b5f0:	4629      	mov	r1, r5
   2b5f2:	a808      	add	r0, sp, #32
   2b5f4:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   2b5f6:	4632      	mov	r2, r6
   2b5f8:	a908      	add	r1, sp, #32
   2b5fa:	4668      	mov	r0, sp
   2b5fc:	f7ff fb0e 	bl	2ac1c <uECC_vli_equal>
		return -3;

	return 0;
   2b600:	2800      	cmp	r0, #0
   2b602:	bf14      	ite	ne
   2b604:	f06f 0002 	mvnne.w	r0, #2
   2b608:	2000      	moveq	r0, #0
}
   2b60a:	b011      	add	sp, #68	; 0x44
   2b60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   2b60e:	f04f 30ff 	mov.w	r0, #4294967295
   2b612:	e7fa      	b.n	2b60a <uECC_valid_point+0x5a>
		return -2;
   2b614:	f06f 0001 	mvn.w	r0, #1
   2b618:	e7f7      	b.n	2b60a <uECC_valid_point+0x5a>

0002b61a <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   2b61a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b61c:	460c      	mov	r4, r1

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2b61e:	f991 7001 	ldrsb.w	r7, [r1, #1]
{
   2b622:	b091      	sub	sp, #68	; 0x44
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   2b624:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2b626:	4601      	mov	r1, r0
{
   2b628:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2b62a:	463a      	mov	r2, r7
   2b62c:	4668      	mov	r0, sp
   2b62e:	f7ff ffa1 	bl	2b574 <uECC_vli_bytesToNative>
	_public + curve->num_words,
   2b632:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   2b636:	463a      	mov	r2, r7
   2b638:	19e9      	adds	r1, r5, r7
   2b63a:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   2b63e:	f7ff ff99 	bl	2b574 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   2b642:	2210      	movs	r2, #16
   2b644:	4631      	mov	r1, r6
   2b646:	4668      	mov	r0, sp
   2b648:	f7ff fad3 	bl	2abf2 <uECC_vli_cmp_unsafe>
   2b64c:	b128      	cbz	r0, 2b65a <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   2b64e:	4621      	mov	r1, r4
   2b650:	4668      	mov	r0, sp
   2b652:	f7ff ffad 	bl	2b5b0 <uECC_valid_point>
}
   2b656:	b011      	add	sp, #68	; 0x44
   2b658:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -4;
   2b65a:	f06f 0003 	mvn.w	r0, #3
   2b65e:	e7fa      	b.n	2b656 <uECC_valid_public_key+0x3c>

0002b660 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2b660:	78cb      	ldrb	r3, [r1, #3]
   2b662:	7802      	ldrb	r2, [r0, #0]
   2b664:	4053      	eors	r3, r2
   2b666:	7003      	strb	r3, [r0, #0]
   2b668:	884b      	ldrh	r3, [r1, #2]
   2b66a:	7842      	ldrb	r2, [r0, #1]
   2b66c:	4053      	eors	r3, r2
   2b66e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2b670:	680a      	ldr	r2, [r1, #0]
   2b672:	7883      	ldrb	r3, [r0, #2]
   2b674:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b678:	7083      	strb	r3, [r0, #2]
   2b67a:	680a      	ldr	r2, [r1, #0]
   2b67c:	78c3      	ldrb	r3, [r0, #3]
   2b67e:	4053      	eors	r3, r2
   2b680:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2b682:	79cb      	ldrb	r3, [r1, #7]
   2b684:	7902      	ldrb	r2, [r0, #4]
   2b686:	4053      	eors	r3, r2
   2b688:	7103      	strb	r3, [r0, #4]
   2b68a:	88cb      	ldrh	r3, [r1, #6]
   2b68c:	7942      	ldrb	r2, [r0, #5]
   2b68e:	4053      	eors	r3, r2
   2b690:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2b692:	684a      	ldr	r2, [r1, #4]
   2b694:	7983      	ldrb	r3, [r0, #6]
   2b696:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b69a:	7183      	strb	r3, [r0, #6]
   2b69c:	684a      	ldr	r2, [r1, #4]
   2b69e:	79c3      	ldrb	r3, [r0, #7]
   2b6a0:	4053      	eors	r3, r2
   2b6a2:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2b6a4:	7acb      	ldrb	r3, [r1, #11]
   2b6a6:	7a02      	ldrb	r2, [r0, #8]
   2b6a8:	4053      	eors	r3, r2
   2b6aa:	7203      	strb	r3, [r0, #8]
   2b6ac:	7a42      	ldrb	r2, [r0, #9]
   2b6ae:	894b      	ldrh	r3, [r1, #10]
   2b6b0:	4053      	eors	r3, r2
   2b6b2:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2b6b4:	688a      	ldr	r2, [r1, #8]
   2b6b6:	7a83      	ldrb	r3, [r0, #10]
   2b6b8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b6bc:	7283      	strb	r3, [r0, #10]
   2b6be:	688a      	ldr	r2, [r1, #8]
   2b6c0:	7ac3      	ldrb	r3, [r0, #11]
   2b6c2:	4053      	eors	r3, r2
   2b6c4:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2b6c6:	7bcb      	ldrb	r3, [r1, #15]
   2b6c8:	7b02      	ldrb	r2, [r0, #12]
   2b6ca:	4053      	eors	r3, r2
   2b6cc:	7303      	strb	r3, [r0, #12]
   2b6ce:	89cb      	ldrh	r3, [r1, #14]
   2b6d0:	7b42      	ldrb	r2, [r0, #13]
   2b6d2:	4053      	eors	r3, r2
   2b6d4:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2b6d6:	68ca      	ldr	r2, [r1, #12]
   2b6d8:	7b83      	ldrb	r3, [r0, #14]
   2b6da:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b6de:	7383      	strb	r3, [r0, #14]
   2b6e0:	68ca      	ldr	r2, [r1, #12]
   2b6e2:	7bc3      	ldrb	r3, [r0, #15]
   2b6e4:	4053      	eors	r3, r2
   2b6e6:	73c3      	strb	r3, [r0, #15]
}
   2b6e8:	4770      	bx	lr

0002b6ea <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2b6ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2b6ec:	7802      	ldrb	r2, [r0, #0]
   2b6ee:	f88d 2000 	strb.w	r2, [sp]
   2b6f2:	7942      	ldrb	r2, [r0, #5]
   2b6f4:	f88d 2001 	strb.w	r2, [sp, #1]
   2b6f8:	7a82      	ldrb	r2, [r0, #10]
   2b6fa:	f88d 2002 	strb.w	r2, [sp, #2]
   2b6fe:	7bc2      	ldrb	r2, [r0, #15]
   2b700:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2b704:	7902      	ldrb	r2, [r0, #4]
   2b706:	f88d 2004 	strb.w	r2, [sp, #4]
   2b70a:	7a42      	ldrb	r2, [r0, #9]
   2b70c:	f88d 2005 	strb.w	r2, [sp, #5]
   2b710:	7b82      	ldrb	r2, [r0, #14]
   2b712:	f88d 2006 	strb.w	r2, [sp, #6]
   2b716:	78c2      	ldrb	r2, [r0, #3]
   2b718:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2b71c:	7a02      	ldrb	r2, [r0, #8]
   2b71e:	f88d 2008 	strb.w	r2, [sp, #8]
   2b722:	7b42      	ldrb	r2, [r0, #13]
   2b724:	f88d 2009 	strb.w	r2, [sp, #9]
   2b728:	7882      	ldrb	r2, [r0, #2]
   2b72a:	f88d 200a 	strb.w	r2, [sp, #10]
   2b72e:	79c2      	ldrb	r2, [r0, #7]
   2b730:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2b734:	7b02      	ldrb	r2, [r0, #12]
   2b736:	f88d 200c 	strb.w	r2, [sp, #12]
   2b73a:	7842      	ldrb	r2, [r0, #1]
   2b73c:	7ac3      	ldrb	r3, [r0, #11]
   2b73e:	f88d 200d 	strb.w	r2, [sp, #13]
   2b742:	7982      	ldrb	r2, [r0, #6]
   2b744:	f88d 200e 	strb.w	r2, [sp, #14]
   2b748:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b74c:	2310      	movs	r3, #16
   2b74e:	466a      	mov	r2, sp
   2b750:	4619      	mov	r1, r3
   2b752:	f7ff f88c 	bl	2a86e <_copy>
}
   2b756:	b005      	add	sp, #20
   2b758:	f85d fb04 	ldr.w	pc, [sp], #4

0002b75c <mult_row_column>:
{
   2b75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b75e:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b760:	7808      	ldrb	r0, [r1, #0]
{
   2b762:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b764:	f7ff f892 	bl	2a88c <_double_byte>
   2b768:	4605      	mov	r5, r0
   2b76a:	7860      	ldrb	r0, [r4, #1]
   2b76c:	f7ff f88e 	bl	2a88c <_double_byte>
   2b770:	78a2      	ldrb	r2, [r4, #2]
   2b772:	7863      	ldrb	r3, [r4, #1]
   2b774:	4053      	eors	r3, r2
   2b776:	78e2      	ldrb	r2, [r4, #3]
   2b778:	4053      	eors	r3, r2
   2b77a:	405d      	eors	r5, r3
   2b77c:	4068      	eors	r0, r5
   2b77e:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2b780:	7860      	ldrb	r0, [r4, #1]
   2b782:	7827      	ldrb	r7, [r4, #0]
   2b784:	f7ff f882 	bl	2a88c <_double_byte>
   2b788:	4605      	mov	r5, r0
   2b78a:	78a0      	ldrb	r0, [r4, #2]
   2b78c:	f7ff f87e 	bl	2a88c <_double_byte>
   2b790:	78a3      	ldrb	r3, [r4, #2]
   2b792:	405f      	eors	r7, r3
   2b794:	78e3      	ldrb	r3, [r4, #3]
   2b796:	405f      	eors	r7, r3
   2b798:	407d      	eors	r5, r7
   2b79a:	4068      	eors	r0, r5
   2b79c:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2b79e:	7863      	ldrb	r3, [r4, #1]
   2b7a0:	7827      	ldrb	r7, [r4, #0]
   2b7a2:	78a0      	ldrb	r0, [r4, #2]
   2b7a4:	405f      	eors	r7, r3
   2b7a6:	f7ff f871 	bl	2a88c <_double_byte>
   2b7aa:	4605      	mov	r5, r0
   2b7ac:	78e0      	ldrb	r0, [r4, #3]
   2b7ae:	f7ff f86d 	bl	2a88c <_double_byte>
   2b7b2:	78e3      	ldrb	r3, [r4, #3]
   2b7b4:	405f      	eors	r7, r3
   2b7b6:	407d      	eors	r5, r7
   2b7b8:	4068      	eors	r0, r5
   2b7ba:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2b7bc:	7820      	ldrb	r0, [r4, #0]
   2b7be:	f7ff f865 	bl	2a88c <_double_byte>
   2b7c2:	7862      	ldrb	r2, [r4, #1]
   2b7c4:	7823      	ldrb	r3, [r4, #0]
   2b7c6:	4053      	eors	r3, r2
   2b7c8:	78a2      	ldrb	r2, [r4, #2]
   2b7ca:	4053      	eors	r3, r2
   2b7cc:	ea80 0503 	eor.w	r5, r0, r3
   2b7d0:	78e0      	ldrb	r0, [r4, #3]
   2b7d2:	f7ff f85b 	bl	2a88c <_double_byte>
   2b7d6:	b2ed      	uxtb	r5, r5
   2b7d8:	4045      	eors	r5, r0
   2b7da:	70f5      	strb	r5, [r6, #3]
}
   2b7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b7de <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2b7de:	b570      	push	{r4, r5, r6, lr}
   2b7e0:	4614      	mov	r4, r2
   2b7e2:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2b7e4:	4605      	mov	r5, r0
   2b7e6:	2800      	cmp	r0, #0
   2b7e8:	d049      	beq.n	2b87e <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2b7ea:	2900      	cmp	r1, #0
   2b7ec:	d049      	beq.n	2b882 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2b7ee:	2a00      	cmp	r2, #0
   2b7f0:	d049      	beq.n	2b886 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2b7f2:	2310      	movs	r3, #16
   2b7f4:	460a      	mov	r2, r1
   2b7f6:	4668      	mov	r0, sp
   2b7f8:	4619      	mov	r1, r3
   2b7fa:	f7ff f838 	bl	2a86e <_copy>
	add_round_key(state, s->words);
   2b7fe:	4621      	mov	r1, r4
   2b800:	4668      	mov	r0, sp
   2b802:	f7ff ff2d 	bl	2b660 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2b806:	3410      	adds	r4, #16
   2b808:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2b80c:	4668      	mov	r0, sp
   2b80e:	f7e9 fc05 	bl	1501c <sub_bytes>
		shift_rows(state);
   2b812:	4668      	mov	r0, sp
   2b814:	f7ff ff69 	bl	2b6ea <shift_rows>
	mult_row_column(t, s);
   2b818:	4669      	mov	r1, sp
   2b81a:	a804      	add	r0, sp, #16
   2b81c:	f7ff ff9e 	bl	2b75c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2b820:	a901      	add	r1, sp, #4
   2b822:	a805      	add	r0, sp, #20
   2b824:	f7ff ff9a 	bl	2b75c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2b828:	a902      	add	r1, sp, #8
   2b82a:	a806      	add	r0, sp, #24
   2b82c:	f7ff ff96 	bl	2b75c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2b830:	a903      	add	r1, sp, #12
   2b832:	a807      	add	r0, sp, #28
   2b834:	f7ff ff92 	bl	2b75c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b838:	2310      	movs	r3, #16
   2b83a:	4619      	mov	r1, r3
   2b83c:	eb0d 0203 	add.w	r2, sp, r3
   2b840:	4668      	mov	r0, sp
   2b842:	f7ff f814 	bl	2a86e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2b846:	4621      	mov	r1, r4
   2b848:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2b84a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2b84c:	f7ff ff08 	bl	2b660 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2b850:	42b4      	cmp	r4, r6
   2b852:	d1db      	bne.n	2b80c <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2b854:	f7e9 fbe2 	bl	1501c <sub_bytes>
	shift_rows(state);
   2b858:	4668      	mov	r0, sp
   2b85a:	f7ff ff46 	bl	2b6ea <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2b85e:	4621      	mov	r1, r4
   2b860:	4668      	mov	r0, sp
   2b862:	f7ff fefd 	bl	2b660 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2b866:	2310      	movs	r3, #16
   2b868:	4619      	mov	r1, r3
   2b86a:	466a      	mov	r2, sp
   2b86c:	4628      	mov	r0, r5
   2b86e:	f7fe fffe 	bl	2a86e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2b872:	4668      	mov	r0, sp
   2b874:	2210      	movs	r2, #16
   2b876:	2100      	movs	r1, #0
   2b878:	f7ff f806 	bl	2a888 <_set>

	return TC_CRYPTO_SUCCESS;
   2b87c:	2001      	movs	r0, #1
}
   2b87e:	b008      	add	sp, #32
   2b880:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b882:	4608      	mov	r0, r1
   2b884:	e7fb      	b.n	2b87e <tc_aes_encrypt+0xa0>
   2b886:	4610      	mov	r0, r2
   2b888:	e7f9      	b.n	2b87e <tc_aes_encrypt+0xa0>

0002b88a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2b88a:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b88c:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2b88e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b890:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2b894:	2b00      	cmp	r3, #0
   2b896:	bfac      	ite	ge
   2b898:	2300      	movge	r3, #0
   2b89a:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2b89c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2b8a0:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2b8a4:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   2b8a6:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2b8aa:	d002      	beq.n	2b8b2 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2b8ac:	7813      	ldrb	r3, [r2, #0]
   2b8ae:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2b8b0:	e7f4      	b.n	2b89c <gf_double+0x12>
	}
}
   2b8b2:	bd10      	pop	{r4, pc}

0002b8b4 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2b8b4:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2b8b6:	b120      	cbz	r0, 2b8c2 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2b8b8:	2258      	movs	r2, #88	; 0x58
   2b8ba:	2100      	movs	r1, #0
   2b8bc:	f7fe ffe4 	bl	2a888 <_set>
   2b8c0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2b8c2:	bd08      	pop	{r3, pc}

0002b8c4 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2b8c4:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b8c6:	4604      	mov	r4, r0
   2b8c8:	b188      	cbz	r0, 2b8ee <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b8ca:	2210      	movs	r2, #16
   2b8cc:	2100      	movs	r1, #0
   2b8ce:	f7fe ffdb 	bl	2a888 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2b8d2:	2210      	movs	r2, #16
   2b8d4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b8d8:	2100      	movs	r1, #0
   2b8da:	f7fe ffd5 	bl	2a888 <_set>
	s->leftover_offset = 0;
   2b8de:	2300      	movs	r3, #0
   2b8e0:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2b8e2:	2200      	movs	r2, #0
   2b8e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2b8e8:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2b8ec:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2b8ee:	bd10      	pop	{r4, pc}

0002b8f0 <tc_cmac_setup>:
{
   2b8f0:	b570      	push	{r4, r5, r6, lr}
   2b8f2:	4604      	mov	r4, r0
   2b8f4:	460d      	mov	r5, r1
   2b8f6:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2b8f8:	b310      	cbz	r0, 2b940 <tc_cmac_setup+0x50>
   2b8fa:	b311      	cbz	r1, 2b942 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2b8fc:	2258      	movs	r2, #88	; 0x58
   2b8fe:	2100      	movs	r1, #0
   2b900:	f7fe ffc2 	bl	2a888 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2b904:	4629      	mov	r1, r5
	s->sched = sched;
   2b906:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2b908:	4630      	mov	r0, r6
   2b90a:	f7e9 fb93 	bl	15034 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b90e:	2210      	movs	r2, #16
   2b910:	2100      	movs	r1, #0
   2b912:	4620      	mov	r0, r4
   2b914:	f7fe ffb8 	bl	2a888 <_set>
	gf_double (s->K1, s->iv);
   2b918:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b91c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b91e:	4621      	mov	r1, r4
   2b920:	4620      	mov	r0, r4
   2b922:	f7ff ff5c 	bl	2b7de <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2b926:	4621      	mov	r1, r4
   2b928:	4628      	mov	r0, r5
   2b92a:	f7ff ffae 	bl	2b88a <gf_double>
	gf_double (s->K2, s->K1);
   2b92e:	4629      	mov	r1, r5
   2b930:	f104 0020 	add.w	r0, r4, #32
   2b934:	f7ff ffa9 	bl	2b88a <gf_double>
	tc_cmac_init(s);
   2b938:	4620      	mov	r0, r4
   2b93a:	f7ff ffc3 	bl	2b8c4 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2b93e:	2001      	movs	r0, #1
}
   2b940:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b942:	4608      	mov	r0, r1
   2b944:	e7fc      	b.n	2b940 <tc_cmac_setup+0x50>

0002b946 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2b946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b94a:	460e      	mov	r6, r1
   2b94c:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b94e:	4604      	mov	r4, r0
   2b950:	2800      	cmp	r0, #0
   2b952:	d060      	beq.n	2ba16 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2b954:	b1fa      	cbz	r2, 2b996 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2b956:	2900      	cmp	r1, #0
   2b958:	d05d      	beq.n	2ba16 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2b95a:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2b95e:	ea53 0102 	orrs.w	r1, r3, r2
   2b962:	d058      	beq.n	2ba16 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2b964:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   2b966:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2b96a:	f142 32ff 	adc.w	r2, r2, #4294967295
   2b96e:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2b972:	f1b8 0f00 	cmp.w	r8, #0
   2b976:	d02c      	beq.n	2b9d2 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2b978:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b97c:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2b980:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b982:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2b984:	d20a      	bcs.n	2b99c <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b986:	462b      	mov	r3, r5
   2b988:	4632      	mov	r2, r6
   2b98a:	4629      	mov	r1, r5
   2b98c:	f7fe ff6f 	bl	2a86e <_copy>
			s->leftover_offset += data_length;
   2b990:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2b992:	442b      	add	r3, r5
   2b994:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   2b996:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   2b998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   2b99c:	463b      	mov	r3, r7
   2b99e:	4632      	mov	r2, r6
   2b9a0:	4639      	mov	r1, r7
   2b9a2:	f7fe ff64 	bl	2a86e <_copy>
		data_length -= remaining_space;
   2b9a6:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   2b9a8:	2300      	movs	r3, #0
   2b9aa:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2b9ac:	4445      	add	r5, r8
		data += remaining_space;
   2b9ae:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b9b0:	1e63      	subs	r3, r4, #1
   2b9b2:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2b9b6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b9ba:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b9be:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2b9c0:	ea82 0200 	eor.w	r2, r2, r0
   2b9c4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b9c6:	d1f6      	bne.n	2b9b6 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b9c8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b9ca:	4621      	mov	r1, r4
   2b9cc:	4620      	mov	r0, r4
   2b9ce:	f7ff ff06 	bl	2b7de <tc_aes_encrypt>
   2b9d2:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2b9d6:	2d10      	cmp	r5, #16
   2b9d8:	d80a      	bhi.n	2b9f0 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   2b9da:	2d00      	cmp	r5, #0
   2b9dc:	d0db      	beq.n	2b996 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   2b9de:	462b      	mov	r3, r5
   2b9e0:	4632      	mov	r2, r6
   2b9e2:	4629      	mov	r1, r5
   2b9e4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b9e8:	f7fe ff41 	bl	2a86e <_copy>
		s->leftover_offset = data_length;
   2b9ec:	6465      	str	r5, [r4, #68]	; 0x44
   2b9ee:	e7d2      	b.n	2b996 <tc_cmac_update+0x50>
   2b9f0:	1e63      	subs	r3, r4, #1
   2b9f2:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   2b9f4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b9f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b9fc:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2b9fe:	ea82 0200 	eor.w	r2, r2, r0
   2ba02:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2ba04:	d1f6      	bne.n	2b9f4 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2ba06:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2ba08:	4621      	mov	r1, r4
   2ba0a:	4620      	mov	r0, r4
   2ba0c:	f7ff fee7 	bl	2b7de <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2ba10:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2ba12:	3d10      	subs	r5, #16
   2ba14:	e7df      	b.n	2b9d6 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2ba16:	2000      	movs	r0, #0
   2ba18:	e7be      	b.n	2b998 <tc_cmac_update+0x52>

0002ba1a <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2ba1a:	b570      	push	{r4, r5, r6, lr}
   2ba1c:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2ba1e:	4605      	mov	r5, r0
   2ba20:	b1e8      	cbz	r0, 2ba5e <tc_cmac_final+0x44>
   2ba22:	b369      	cbz	r1, 2ba80 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2ba24:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2ba26:	2a10      	cmp	r2, #16
   2ba28:	d11a      	bne.n	2ba60 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2ba2a:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2ba2c:	1e63      	subs	r3, r4, #1
   2ba2e:	3901      	subs	r1, #1
   2ba30:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2ba34:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2ba38:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2ba3c:	4072      	eors	r2, r6
   2ba3e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2ba42:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2ba44:	ea82 0206 	eor.w	r2, r2, r6
   2ba48:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2ba4a:	d1f3      	bne.n	2ba34 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2ba4c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2ba4e:	4621      	mov	r1, r4
   2ba50:	4628      	mov	r0, r5
   2ba52:	f7ff fec4 	bl	2b7de <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2ba56:	4620      	mov	r0, r4
   2ba58:	f7ff ff2c 	bl	2b8b4 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2ba5c:	2001      	movs	r0, #1
}
   2ba5e:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2ba60:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2ba64:	2100      	movs	r1, #0
   2ba66:	f1c2 0210 	rsb	r2, r2, #16
   2ba6a:	4420      	add	r0, r4
   2ba6c:	f7fe ff0c 	bl	2a888 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2ba70:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2ba72:	4423      	add	r3, r4
   2ba74:	2280      	movs	r2, #128	; 0x80
   2ba76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2ba7a:	f104 0120 	add.w	r1, r4, #32
   2ba7e:	e7d5      	b.n	2ba2c <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2ba80:	4608      	mov	r0, r1
   2ba82:	e7ec      	b.n	2ba5e <tc_cmac_final+0x44>

0002ba84 <abort_function>:
{
   2ba84:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2ba86:	2000      	movs	r0, #0
   2ba88:	f7e7 fc92 	bl	133b0 <sys_reboot>

0002ba8c <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2ba8c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2ba8e:	6800      	ldr	r0, [r0, #0]
   2ba90:	f7e9 bc2e 	b.w	152f0 <z_arm_fatal_error>

0002ba94 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2ba94:	2100      	movs	r1, #0
   2ba96:	2001      	movs	r0, #1
   2ba98:	f7e9 bc2a 	b.w	152f0 <z_arm_fatal_error>

0002ba9c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2ba9c:	b508      	push	{r3, lr}
	handler();
   2ba9e:	f7e9 fced 	bl	1547c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2baa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2baa6:	f7e9 bdc5 	b.w	15634 <z_arm_exc_exit>

0002baaa <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   2baaa:	2300      	movs	r3, #0
   2baac:	f7e8 bac0 	b.w	14030 <z_impl_z_log_msg_static_create>

0002bab0 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   2bab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bab4:	4684      	mov	ip, r0
   2bab6:	460f      	mov	r7, r1
	register const char *s = nptr;
   2bab8:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   2baba:	4621      	mov	r1, r4
   2babc:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2bac0:	2b20      	cmp	r3, #32
   2bac2:	d0fa      	beq.n	2baba <strtoul+0xa>
   2bac4:	f1a3 0009 	sub.w	r0, r3, #9
   2bac8:	2804      	cmp	r0, #4
   2baca:	d9f6      	bls.n	2baba <strtoul+0xa>
	} while (isspace((unsigned char)c) != 0);
	if (c == '-') {
   2bacc:	2b2d      	cmp	r3, #45	; 0x2d
   2bace:	d125      	bne.n	2bb1c <strtoul+0x6c>
		neg = 1;
		c = *s++;
   2bad0:	784b      	ldrb	r3, [r1, #1]
   2bad2:	1c8c      	adds	r4, r1, #2
		neg = 1;
   2bad4:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2bad8:	bb3a      	cbnz	r2, 2bb2a <strtoul+0x7a>
   2bada:	2b30      	cmp	r3, #48	; 0x30
   2badc:	d032      	beq.n	2bb44 <strtoul+0x94>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   2bade:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2bae0:	f04f 31ff 	mov.w	r1, #4294967295
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   2bae4:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2bae6:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   2baea:	fb02 f801 	mul.w	r8, r2, r1
   2baee:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   2baf2:	4628      	mov	r0, r5
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2baf4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit((unsigned char)c) != 0) {
   2baf8:	2e09      	cmp	r6, #9
   2bafa:	d82a      	bhi.n	2bb52 <strtoul+0xa2>
			c -= '0';
   2bafc:	4633      	mov	r3, r6
		} else if (isalpha((unsigned char)c) != 0) {
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   2bafe:	429a      	cmp	r2, r3
   2bb00:	dd37      	ble.n	2bb72 <strtoul+0xc2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2bb02:	1c6e      	adds	r6, r5, #1
   2bb04:	d007      	beq.n	2bb16 <strtoul+0x66>
   2bb06:	4288      	cmp	r0, r1
   2bb08:	d830      	bhi.n	2bb6c <strtoul+0xbc>
   2bb0a:	d101      	bne.n	2bb10 <strtoul+0x60>
   2bb0c:	4543      	cmp	r3, r8
   2bb0e:	dc2d      	bgt.n	2bb6c <strtoul+0xbc>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   2bb10:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   2bb14:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
   2bb16:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c) != 0) {
   2bb1a:	e7eb      	b.n	2baf4 <strtoul+0x44>
	} else if (c == '+') {
   2bb1c:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2bb1e:	bf04      	itt	eq
   2bb20:	784b      	ldrbeq	r3, [r1, #1]
   2bb22:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   2bb24:	f04f 0e00 	mov.w	lr, #0
   2bb28:	e7d6      	b.n	2bad8 <strtoul+0x28>
	if ((base == 0 || base == 16) &&
   2bb2a:	2a10      	cmp	r2, #16
   2bb2c:	d1d8      	bne.n	2bae0 <strtoul+0x30>
   2bb2e:	2b30      	cmp	r3, #48	; 0x30
   2bb30:	d1d6      	bne.n	2bae0 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2bb32:	7821      	ldrb	r1, [r4, #0]
   2bb34:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   2bb38:	2958      	cmp	r1, #88	; 0x58
   2bb3a:	d1d1      	bne.n	2bae0 <strtoul+0x30>
		c = s[1];
   2bb3c:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   2bb3e:	2210      	movs	r2, #16
		s += 2;
   2bb40:	3402      	adds	r4, #2
	if (base == 0) {
   2bb42:	e7cd      	b.n	2bae0 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2bb44:	7822      	ldrb	r2, [r4, #0]
   2bb46:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   2bb4a:	2a58      	cmp	r2, #88	; 0x58
   2bb4c:	d0f6      	beq.n	2bb3c <strtoul+0x8c>
		base = c == '0' ? 8 : 10;
   2bb4e:	2208      	movs	r2, #8
   2bb50:	e7c6      	b.n	2bae0 <strtoul+0x30>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2bb52:	f043 0620 	orr.w	r6, r3, #32
   2bb56:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha((unsigned char)c) != 0) {
   2bb58:	2e19      	cmp	r6, #25
   2bb5a:	d80a      	bhi.n	2bb72 <strtoul+0xc2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2bb5c:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
   2bb60:	2e1a      	cmp	r6, #26
   2bb62:	bf34      	ite	cc
   2bb64:	2637      	movcc	r6, #55	; 0x37
   2bb66:	2657      	movcs	r6, #87	; 0x57
   2bb68:	1b9b      	subs	r3, r3, r6
   2bb6a:	e7c8      	b.n	2bafe <strtoul+0x4e>
			any = -1;
   2bb6c:	f04f 35ff 	mov.w	r5, #4294967295
   2bb70:	e7d1      	b.n	2bb16 <strtoul+0x66>
		}
	}
	if (any < 0) {
   2bb72:	1c6b      	adds	r3, r5, #1
   2bb74:	d107      	bne.n	2bb86 <strtoul+0xd6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2bb76:	f7f9 f867 	bl	24c48 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   2bb7a:	2322      	movs	r3, #34	; 0x22
   2bb7c:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   2bb7e:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   2bb80:	b947      	cbnz	r7, 2bb94 <strtoul+0xe4>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   2bb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   2bb86:	f1be 0f00 	cmp.w	lr, #0
   2bb8a:	d000      	beq.n	2bb8e <strtoul+0xde>
		acc = -acc;
   2bb8c:	4240      	negs	r0, r0
	if (endptr != NULL) {
   2bb8e:	2f00      	cmp	r7, #0
   2bb90:	d0f7      	beq.n	2bb82 <strtoul+0xd2>
		*endptr = (char *)(any ? s - 1 : nptr);
   2bb92:	b10d      	cbz	r5, 2bb98 <strtoul+0xe8>
   2bb94:	f104 3cff 	add.w	ip, r4, #4294967295
   2bb98:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   2bb9c:	e7f1      	b.n	2bb82 <strtoul+0xd2>

0002bb9e <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   2bb9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   2bba2:	f891 8000 	ldrb.w	r8, [r1]
{
   2bba6:	4605      	mov	r5, r0
	if (c != 0) {
   2bba8:	f1b8 0f00 	cmp.w	r8, #0
   2bbac:	d010      	beq.n	2bbd0 <strstr+0x32>
	c = *find++;
   2bbae:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   2bbb0:	4620      	mov	r0, r4
   2bbb2:	f000 f81e 	bl	2bbf2 <strlen>
   2bbb6:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   2bbb8:	462e      	mov	r6, r5
   2bbba:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   2bbbe:	b163      	cbz	r3, 2bbda <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   2bbc0:	4598      	cmp	r8, r3
   2bbc2:	d108      	bne.n	2bbd6 <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   2bbc4:	463a      	mov	r2, r7
   2bbc6:	4621      	mov	r1, r4
   2bbc8:	4630      	mov	r0, r6
   2bbca:	f000 f82e 	bl	2bc2a <strncmp>
   2bbce:	b910      	cbnz	r0, 2bbd6 <strstr+0x38>
		s--;
	}
	return (char *)s;
}
   2bbd0:	4628      	mov	r0, r5
   2bbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   2bbd6:	4635      	mov	r5, r6
   2bbd8:	e7ee      	b.n	2bbb8 <strstr+0x1a>
					return NULL;
   2bbda:	461d      	mov	r5, r3
   2bbdc:	e7f8      	b.n	2bbd0 <strstr+0x32>

0002bbde <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2bbde:	3901      	subs	r1, #1
   2bbe0:	4603      	mov	r3, r0
   2bbe2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2bbe6:	b90a      	cbnz	r2, 2bbec <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   2bbe8:	701a      	strb	r2, [r3, #0]

	return dest;
}
   2bbea:	4770      	bx	lr
		*d = *s;
   2bbec:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   2bbf0:	e7f7      	b.n	2bbe2 <strcpy+0x4>

0002bbf2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2bbf2:	4603      	mov	r3, r0
	size_t n = 0;
   2bbf4:	2000      	movs	r0, #0

	while (*s != '\0') {
   2bbf6:	5c1a      	ldrb	r2, [r3, r0]
   2bbf8:	b902      	cbnz	r2, 2bbfc <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   2bbfa:	4770      	bx	lr
		n++;
   2bbfc:	3001      	adds	r0, #1
   2bbfe:	e7fa      	b.n	2bbf6 <strlen+0x4>

0002bc00 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2bc00:	4603      	mov	r3, r0
	size_t n = 0;
   2bc02:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2bc04:	5c1a      	ldrb	r2, [r3, r0]
   2bc06:	b10a      	cbz	r2, 2bc0c <strnlen+0xc>
   2bc08:	4288      	cmp	r0, r1
   2bc0a:	d100      	bne.n	2bc0e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2bc0c:	4770      	bx	lr
		n++;
   2bc0e:	3001      	adds	r0, #1
   2bc10:	e7f8      	b.n	2bc04 <strnlen+0x4>

0002bc12 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2bc12:	1e43      	subs	r3, r0, #1
   2bc14:	3901      	subs	r1, #1
   2bc16:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2bc1a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2bc1e:	4282      	cmp	r2, r0
   2bc20:	d101      	bne.n	2bc26 <strcmp+0x14>
   2bc22:	2a00      	cmp	r2, #0
   2bc24:	d1f7      	bne.n	2bc16 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2bc26:	1a10      	subs	r0, r2, r0
   2bc28:	4770      	bx	lr

0002bc2a <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   2bc2a:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   2bc2c:	460b      	mov	r3, r1
   2bc2e:	4605      	mov	r5, r0
   2bc30:	b16a      	cbz	r2, 2bc4e <strncmp+0x24>
   2bc32:	f810 6b01 	ldrb.w	r6, [r0], #1
   2bc36:	781c      	ldrb	r4, [r3, #0]
   2bc38:	42b4      	cmp	r4, r6
   2bc3a:	f101 0101 	add.w	r1, r1, #1
   2bc3e:	d100      	bne.n	2bc42 <strncmp+0x18>
   2bc40:	b91c      	cbnz	r4, 2bc4a <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   2bc42:	782a      	ldrb	r2, [r5, #0]
   2bc44:	781b      	ldrb	r3, [r3, #0]
   2bc46:	1ad0      	subs	r0, r2, r3
   2bc48:	e002      	b.n	2bc50 <strncmp+0x26>
		n--;
   2bc4a:	3a01      	subs	r2, #1
   2bc4c:	e7ee      	b.n	2bc2c <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   2bc4e:	4610      	mov	r0, r2
}
   2bc50:	bd70      	pop	{r4, r5, r6, pc}

0002bc52 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   2bc52:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2bc54:	b15a      	cbz	r2, 2bc6e <memcmp+0x1c>
   2bc56:	3901      	subs	r1, #1
   2bc58:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2bc5a:	f810 2b01 	ldrb.w	r2, [r0], #1
   2bc5e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2bc62:	42a0      	cmp	r0, r4
   2bc64:	d001      	beq.n	2bc6a <memcmp+0x18>
   2bc66:	429a      	cmp	r2, r3
   2bc68:	d0f7      	beq.n	2bc5a <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2bc6a:	1ad0      	subs	r0, r2, r3
}
   2bc6c:	bd10      	pop	{r4, pc}
		return 0;
   2bc6e:	4610      	mov	r0, r2
   2bc70:	e7fc      	b.n	2bc6c <memcmp+0x1a>

0002bc72 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   2bc72:	1a43      	subs	r3, r0, r1
   2bc74:	4293      	cmp	r3, r2
{
   2bc76:	b510      	push	{r4, lr}
   2bc78:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   2bc7c:	d308      	bcc.n	2bc90 <memmove+0x1e>
   2bc7e:	3901      	subs	r1, #1
	char *dest = d;
   2bc80:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   2bc82:	429a      	cmp	r2, r3
   2bc84:	d00b      	beq.n	2bc9e <memmove+0x2c>
			*dest = *src;
   2bc86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2bc8a:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   2bc8e:	e7f8      	b.n	2bc82 <memmove+0x10>
   2bc90:	440a      	add	r2, r1
			dest[n] = src[n];
   2bc92:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2bc96:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   2bc9a:	428a      	cmp	r2, r1
   2bc9c:	d1f9      	bne.n	2bc92 <memmove+0x20>
		}
	}

	return d;
}
   2bc9e:	bd10      	pop	{r4, pc}

0002bca0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   2bca0:	b510      	push	{r4, lr}
   2bca2:	1e43      	subs	r3, r0, #1
   2bca4:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2bca6:	4291      	cmp	r1, r2
   2bca8:	d100      	bne.n	2bcac <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   2bcaa:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   2bcac:	f811 4b01 	ldrb.w	r4, [r1], #1
   2bcb0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2bcb4:	e7f7      	b.n	2bca6 <memcpy+0x6>

0002bcb6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2bcb6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   2bcb8:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   2bcba:	4603      	mov	r3, r0
	while (n > 0) {
   2bcbc:	4293      	cmp	r3, r2
   2bcbe:	d100      	bne.n	2bcc2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2bcc0:	4770      	bx	lr
		*(d_byte++) = c_byte;
   2bcc2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2bcc6:	e7f9      	b.n	2bcbc <memset+0x6>

0002bcc8 <_stdout_hook_default>:
}
   2bcc8:	f04f 30ff 	mov.w	r0, #4294967295
   2bccc:	4770      	bx	lr

0002bcce <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2bcce:	2806      	cmp	r0, #6
   2bcd0:	d108      	bne.n	2bce4 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2bcd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2bcd6:	2201      	movs	r2, #1
   2bcd8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2bcdc:	f3bf 8f4f 	dsb	sy
        __WFE();
   2bce0:	bf20      	wfe
    while (true)
   2bce2:	e7fd      	b.n	2bce0 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2bce4:	4770      	bx	lr

0002bce6 <pm_state_exit_post_ops>:
   2bce6:	2300      	movs	r3, #0
   2bce8:	f383 8811 	msr	BASEPRI, r3
   2bcec:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2bcf0:	4770      	bx	lr

0002bcf2 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   2bcf2:	b530      	push	{r4, r5, lr}
   2bcf4:	b085      	sub	sp, #20
   2bcf6:	4604      	mov	r4, r0
   2bcf8:	4615      	mov	r5, r2

	LOG_DBG("irk %s", bt_hex(irk, 16));
	LOG_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   2bcfa:	4668      	mov	r0, sp
   2bcfc:	2203      	movs	r2, #3
   2bcfe:	f7ff ffcf 	bl	2bca0 <memcpy>
	(void)memset(res + 3, 0, 13);
   2bd02:	220d      	movs	r2, #13
   2bd04:	2100      	movs	r1, #0
   2bd06:	f10d 0003 	add.w	r0, sp, #3
   2bd0a:	f7ff ffd4 	bl	2bcb6 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2bd0e:	4620      	mov	r0, r4
   2bd10:	466a      	mov	r2, sp
   2bd12:	4669      	mov	r1, sp
   2bd14:	f002 feaf 	bl	2ea76 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   2bd18:	4604      	mov	r4, r0
   2bd1a:	b920      	cbnz	r0, 2bd26 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   2bd1c:	2203      	movs	r2, #3
   2bd1e:	4669      	mov	r1, sp
   2bd20:	4628      	mov	r0, r5
   2bd22:	f7ff ffbd 	bl	2bca0 <memcpy>

	return 0;
}
   2bd26:	4620      	mov	r0, r4
   2bd28:	b005      	add	sp, #20
   2bd2a:	bd30      	pop	{r4, r5, pc}

0002bd2c <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2bd2c:	b513      	push	{r0, r1, r4, lr}
   2bd2e:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   2bd30:	aa01      	add	r2, sp, #4
   2bd32:	3103      	adds	r1, #3
   2bd34:	f7ff ffdd 	bl	2bcf2 <ah>
	if (err) {
   2bd38:	b948      	cbnz	r0, 2bd4e <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   2bd3a:	2203      	movs	r2, #3
   2bd3c:	a901      	add	r1, sp, #4
   2bd3e:	4620      	mov	r0, r4
   2bd40:	f7ff ff87 	bl	2bc52 <memcmp>
   2bd44:	fab0 f080 	clz	r0, r0
   2bd48:	0940      	lsrs	r0, r0, #5
}
   2bd4a:	b002      	add	sp, #8
   2bd4c:	bd10      	pop	{r4, pc}
		return false;
   2bd4e:	2000      	movs	r0, #0
   2bd50:	e7fb      	b.n	2bd4a <bt_rpa_irk_matches+0x1e>

0002bd52 <send_cmd_status>:
{
   2bd52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2bd56:	f04f 32ff 	mov.w	r2, #4294967295
{
   2bd5a:	4606      	mov	r6, r0
   2bd5c:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2bd5e:	f04f 33ff 	mov.w	r3, #4294967295
   2bd62:	2100      	movs	r1, #0
   2bd64:	200f      	movs	r0, #15
   2bd66:	f7ea fdeb 	bl	16940 <bt_buf_get_evt>
   2bd6a:	2701      	movs	r7, #1
   2bd6c:	f100 080c 	add.w	r8, r0, #12
   2bd70:	4604      	mov	r4, r0
   2bd72:	7607      	strb	r7, [r0, #24]
   2bd74:	2102      	movs	r1, #2
   2bd76:	4640      	mov	r0, r8
   2bd78:	f002 fb5b 	bl	2e432 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2bd7c:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   2bd7e:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2bd80:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   2bd82:	7041      	strb	r1, [r0, #1]
   2bd84:	4640      	mov	r0, r8
   2bd86:	f002 fb54 	bl	2e432 <net_buf_simple_add>
	evt->ncmd = 1U;
   2bd8a:	7047      	strb	r7, [r0, #1]
	evt->opcode = sys_cpu_to_le16(opcode);
   2bd8c:	8046      	strh	r6, [r0, #2]
	evt->status = status;
   2bd8e:	7005      	strb	r5, [r0, #0]
		bt_recv(buf);
   2bd90:	4620      	mov	r0, r4
}
   2bd92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
   2bd96:	f7ec b945 	b.w	18024 <bt_recv>

0002bd9a <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   2bd9a:	f101 0320 	add.w	r3, r1, #32
   2bd9e:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   2bda0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2bda4:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2bda8:	428b      	cmp	r3, r1
   2bdaa:	d1f9      	bne.n	2bda0 <sys_memcpy_swap.constprop.0+0x6>
}
   2bdac:	4770      	bx	lr

0002bdae <bt_hci_ecc_supported_commands>:
void bt_hci_ecc_supported_commands(uint8_t *supported_commands)
{
	/* LE Read Local P-256 Public Key */
	supported_commands[34] |= BIT(1);
	/* LE Generate DH Key v1 */
	supported_commands[34] |= BIT(2);
   2bdae:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   2bdb2:	f043 0306 	orr.w	r3, r3, #6
   2bdb6:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	/* LE Generate DH Key v2 */
	supported_commands[41] |= BIT(2);
   2bdba:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   2bdbe:	f043 0304 	orr.w	r3, r3, #4
   2bdc2:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   2bdc6:	4770      	bx	lr

0002bdc8 <default_CSPRNG>:

int default_CSPRNG(uint8_t *dst, unsigned int len)
{
   2bdc8:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   2bdca:	f7f7 fb65 	bl	23498 <bt_rand>
}
   2bdce:	fab0 f080 	clz	r0, r0
   2bdd2:	0940      	lsrs	r0, r0, #5
   2bdd4:	bd08      	pop	{r3, pc}

0002bdd6 <bt_settings_decode_key>:
{
   2bdd6:	b570      	push	{r4, r5, r6, lr}
   2bdd8:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   2bdda:	2100      	movs	r1, #0
{
   2bddc:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   2bdde:	f7fe fc77 	bl	2a6d0 <settings_name_next>
   2bde2:	280d      	cmp	r0, #13
   2bde4:	d118      	bne.n	2be18 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2bde6:	7b23      	ldrb	r3, [r4, #12]
   2bde8:	2b30      	cmp	r3, #48	; 0x30
   2bdea:	d013      	beq.n	2be14 <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   2bdec:	2b31      	cmp	r3, #49	; 0x31
   2bdee:	d113      	bne.n	2be18 <bt_settings_decode_key+0x42>
   2bdf0:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   2bdf2:	f805 3b06 	strb.w	r3, [r5], #6
   2bdf6:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2bdfa:	462a      	mov	r2, r5
   2bdfc:	4620      	mov	r0, r4
   2bdfe:	2301      	movs	r3, #1
   2be00:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   2be02:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2be04:	f7fd fb35 	bl	29472 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2be08:	42b4      	cmp	r4, r6
   2be0a:	f105 35ff 	add.w	r5, r5, #4294967295
   2be0e:	d1f4      	bne.n	2bdfa <bt_settings_decode_key+0x24>
	return 0;
   2be10:	2000      	movs	r0, #0
}
   2be12:	bd70      	pop	{r4, r5, r6, pc}
   2be14:	2300      	movs	r3, #0
   2be16:	e7ec      	b.n	2bdf2 <bt_settings_decode_key+0x1c>
		return -EINVAL;
   2be18:	f06f 0015 	mvn.w	r0, #21
   2be1c:	e7f9      	b.n	2be12 <bt_settings_decode_key+0x3c>

0002be1e <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2be1e:	b510      	push	{r4, lr}
   2be20:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2be22:	7801      	ldrb	r1, [r0, #0]
   2be24:	7822      	ldrb	r2, [r4, #0]
   2be26:	428a      	cmp	r2, r1
{
   2be28:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2be2a:	d00f      	beq.n	2be4c <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2be2c:	4669      	mov	r1, sp
   2be2e:	f7ea fd21 	bl	16874 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2be32:	a905      	add	r1, sp, #20
   2be34:	4620      	mov	r0, r4
   2be36:	f7ea fd1d 	bl	16874 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2be3a:	2210      	movs	r2, #16
   2be3c:	f10d 0115 	add.w	r1, sp, #21
   2be40:	f10d 0001 	add.w	r0, sp, #1
   2be44:	f7ff ff05 	bl	2bc52 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2be48:	b00a      	add	sp, #40	; 0x28
   2be4a:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2be4c:	2a01      	cmp	r2, #1
   2be4e:	d006      	beq.n	2be5e <bt_uuid_cmp+0x40>
   2be50:	2a02      	cmp	r2, #2
   2be52:	d007      	beq.n	2be64 <bt_uuid_cmp+0x46>
   2be54:	b972      	cbnz	r2, 2be74 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2be56:	8840      	ldrh	r0, [r0, #2]
   2be58:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2be5a:	1ac0      	subs	r0, r0, r3
   2be5c:	e7f4      	b.n	2be48 <bt_uuid_cmp+0x2a>
   2be5e:	6840      	ldr	r0, [r0, #4]
   2be60:	6863      	ldr	r3, [r4, #4]
   2be62:	e7fa      	b.n	2be5a <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2be64:	2210      	movs	r2, #16
   2be66:	1c61      	adds	r1, r4, #1
   2be68:	3001      	adds	r0, #1
}
   2be6a:	b00a      	add	sp, #40	; 0x28
   2be6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2be70:	f7ff beef 	b.w	2bc52 <memcmp>
	switch (u1->type) {
   2be74:	f06f 0015 	mvn.w	r0, #21
   2be78:	e7e6      	b.n	2be48 <bt_uuid_cmp+0x2a>

0002be7a <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2be7a:	2a04      	cmp	r2, #4
{
   2be7c:	b510      	push	{r4, lr}
	switch (data_len) {
   2be7e:	d00a      	beq.n	2be96 <bt_uuid_create+0x1c>
   2be80:	2a10      	cmp	r2, #16
   2be82:	d00d      	beq.n	2bea0 <bt_uuid_create+0x26>
   2be84:	2a02      	cmp	r2, #2
   2be86:	f04f 0300 	mov.w	r3, #0
   2be8a:	d10f      	bne.n	2beac <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2be8c:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2be8e:	880b      	ldrh	r3, [r1, #0]
   2be90:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2be92:	2001      	movs	r0, #1
}
   2be94:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   2be96:	2301      	movs	r3, #1
   2be98:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2be9a:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2be9c:	6043      	str	r3, [r0, #4]
		break;
   2be9e:	e7f8      	b.n	2be92 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   2bea0:	2302      	movs	r3, #2
   2bea2:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2bea6:	f7ff fefb 	bl	2bca0 <memcpy>
		break;
   2beaa:	e7f2      	b.n	2be92 <bt_uuid_create+0x18>
	switch (data_len) {
   2beac:	4618      	mov	r0, r3
   2beae:	e7f1      	b.n	2be94 <bt_uuid_create+0x1a>

0002beb0 <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2beb0:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2beb2:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2beb4:	2106      	movs	r1, #6
{
   2beb6:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2beb8:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2bebc:	f7f7 faec 	bl	23498 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2bec0:	b918      	cbnz	r0, 2beca <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2bec2:	79a3      	ldrb	r3, [r4, #6]
   2bec4:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2bec8:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2beca:	bd10      	pop	{r4, pc}

0002becc <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   2becc:	b510      	push	{r4, lr}
   2bece:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   2bed0:	2207      	movs	r2, #7
   2bed2:	f7ff fee5 	bl	2bca0 <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   2bed6:	7823      	ldrb	r3, [r4, #0]
   2bed8:	f023 0302 	bic.w	r3, r3, #2
   2bedc:	7023      	strb	r3, [r4, #0]
}
   2bede:	bd10      	pop	{r4, pc}

0002bee0 <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   2bee0:	7800      	ldrb	r0, [r0, #0]
}
   2bee2:	f3c0 0040 	ubfx	r0, r0, #1, #1
   2bee6:	4770      	bx	lr

0002bee8 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2bee8:	280f      	cmp	r0, #15
   2beea:	d807      	bhi.n	2befc <bt_hci_evt_get_flags+0x14>
   2beec:	280d      	cmp	r0, #13
   2beee:	d80b      	bhi.n	2bf08 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2bef0:	2805      	cmp	r0, #5
   2bef2:	bf08      	it	eq
   2bef4:	2003      	moveq	r0, #3
   2bef6:	bf18      	it	ne
   2bef8:	2002      	movne	r0, #2
   2befa:	4770      	bx	lr
	switch (evt) {
   2befc:	2813      	cmp	r0, #19
   2befe:	d003      	beq.n	2bf08 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   2bf00:	281a      	cmp	r0, #26
   2bf02:	bf08      	it	eq
   2bf04:	2001      	moveq	r0, #1
   2bf06:	e7f6      	b.n	2bef6 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2bf08:	2001      	movs	r0, #1
	}
}
   2bf0a:	4770      	bx	lr

0002bf0c <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2bf0c:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   2bf10:	b183      	cbz	r3, 2bf34 <update_sec_level+0x28>
   2bf12:	7b5a      	ldrb	r2, [r3, #13]
   2bf14:	07d1      	lsls	r1, r2, #31
   2bf16:	d50d      	bpl.n	2bf34 <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2bf18:	06d2      	lsls	r2, r2, #27
   2bf1a:	d50d      	bpl.n	2bf38 <update_sec_level+0x2c>
   2bf1c:	7b1b      	ldrb	r3, [r3, #12]
   2bf1e:	2b10      	cmp	r3, #16
   2bf20:	bf14      	ite	ne
   2bf22:	2303      	movne	r3, #3
   2bf24:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   2bf26:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2bf28:	7a80      	ldrb	r0, [r0, #10]
}
   2bf2a:	4298      	cmp	r0, r3
   2bf2c:	bf8c      	ite	hi
   2bf2e:	2000      	movhi	r0, #0
   2bf30:	2001      	movls	r0, #1
   2bf32:	4770      	bx	lr
   2bf34:	2302      	movs	r3, #2
   2bf36:	e7f6      	b.n	2bf26 <update_sec_level+0x1a>
   2bf38:	2303      	movs	r3, #3
   2bf3a:	e7f4      	b.n	2bf26 <update_sec_level+0x1a>

0002bf3c <hci_vendor_event>:
}
   2bf3c:	4770      	bx	lr

0002bf3e <bt_addr_le_copy>:
   2bf3e:	2207      	movs	r2, #7
   2bf40:	f7ff beae 	b.w	2bca0 <memcpy>

0002bf44 <atomic_or>:
{
   2bf44:	b510      	push	{r4, lr}
   2bf46:	4603      	mov	r3, r0
}
   2bf48:	f3bf 8f5b 	dmb	ish
   2bf4c:	e853 0f00 	ldrex	r0, [r3]
   2bf50:	ea40 0201 	orr.w	r2, r0, r1
   2bf54:	e843 2400 	strex	r4, r2, [r3]
   2bf58:	2c00      	cmp	r4, #0
   2bf5a:	d1f7      	bne.n	2bf4c <atomic_or+0x8>
   2bf5c:	f3bf 8f5b 	dmb	ish
   2bf60:	bd10      	pop	{r4, pc}

0002bf62 <z_log_msg_static_create.constprop.0>:
   2bf62:	2300      	movs	r3, #0
   2bf64:	f7e8 b864 	b.w	14030 <z_impl_z_log_msg_static_create>

0002bf68 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bf68:	f3bf 8f5b 	dmb	ish
   2bf6c:	e850 3f00 	ldrex	r3, [r0]
   2bf70:	400b      	ands	r3, r1
   2bf72:	e840 3200 	strex	r2, r3, [r0]
   2bf76:	2a00      	cmp	r2, #0
   2bf78:	d1f8      	bne.n	2bf6c <atomic_and.isra.0+0x4>
   2bf7a:	f3bf 8f5b 	dmb	ish
}
   2bf7e:	4770      	bx	lr

0002bf80 <sys_put_le64>:
	dst[1] = val >> 8;
   2bf80:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2bf84:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2bf86:	0e00      	lsrs	r0, r0, #24
   2bf88:	7053      	strb	r3, [r2, #1]
   2bf8a:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2bf8c:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2bf8e:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2bf92:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2bf94:	7093      	strb	r3, [r2, #2]
   2bf96:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2bf98:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2bf9a:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2bf9c:	71d1      	strb	r1, [r2, #7]
}
   2bf9e:	4770      	bx	lr

0002bfa0 <le_conn_param_neg_reply>:
{
   2bfa0:	b570      	push	{r4, r5, r6, lr}
   2bfa2:	4606      	mov	r6, r0
   2bfa4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   2bfa6:	f242 0021 	movw	r0, #8225	; 0x2021
   2bfaa:	2103      	movs	r1, #3
   2bfac:	f7eb faaa 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   2bfb0:	4604      	mov	r4, r0
   2bfb2:	b918      	cbnz	r0, 2bfbc <le_conn_param_neg_reply+0x1c>
}
   2bfb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2bfb8:	f7ea bd6c 	b.w	16a94 <le_conn_param_neg_reply.part.0>
   2bfbc:	2103      	movs	r1, #3
   2bfbe:	300c      	adds	r0, #12
   2bfc0:	f002 fa37 	bl	2e432 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   2bfc4:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   2bfc6:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2bfc8:	4621      	mov	r1, r4
   2bfca:	f242 0021 	movw	r0, #8225	; 0x2021
}
   2bfce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2bfd2:	f7eb bad1 	b.w	17578 <bt_hci_cmd_send>

0002bfd6 <bt_hci_disconnect>:
{
   2bfd6:	b570      	push	{r4, r5, r6, lr}
   2bfd8:	4606      	mov	r6, r0
   2bfda:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2bfdc:	f240 4006 	movw	r0, #1030	; 0x406
   2bfe0:	2103      	movs	r1, #3
   2bfe2:	f7eb fa8f 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   2bfe6:	4604      	mov	r4, r0
   2bfe8:	b168      	cbz	r0, 2c006 <bt_hci_disconnect+0x30>
   2bfea:	2103      	movs	r1, #3
   2bfec:	300c      	adds	r0, #12
   2bfee:	f002 fa20 	bl	2e432 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2bff2:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2bff4:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2bff6:	4621      	mov	r1, r4
   2bff8:	2200      	movs	r2, #0
}
   2bffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2bffe:	f240 4006 	movw	r0, #1030	; 0x406
   2c002:	f7eb bbdb 	b.w	177bc <bt_hci_cmd_send_sync>
}
   2c006:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c00a:	bd70      	pop	{r4, r5, r6, pc}

0002c00c <bt_le_set_data_len>:
{
   2c00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c00e:	4607      	mov	r7, r0
   2c010:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2c012:	f242 0022 	movw	r0, #8226	; 0x2022
   2c016:	2106      	movs	r1, #6
{
   2c018:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2c01a:	f7eb fa73 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   2c01e:	4604      	mov	r4, r0
   2c020:	b178      	cbz	r0, 2c042 <bt_le_set_data_len+0x36>
   2c022:	2106      	movs	r1, #6
   2c024:	300c      	adds	r0, #12
   2c026:	f002 fa04 	bl	2e432 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c02a:	883b      	ldrh	r3, [r7, #0]
   2c02c:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2c02e:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2c030:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2c032:	4621      	mov	r1, r4
   2c034:	2200      	movs	r2, #0
}
   2c036:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2c03a:	f242 0022 	movw	r0, #8226	; 0x2022
   2c03e:	f7eb bbbd 	b.w	177bc <bt_hci_cmd_send_sync>
}
   2c042:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c048 <bt_le_set_phy>:
{
   2c048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c04c:	4681      	mov	r9, r0
   2c04e:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2c050:	f242 0032 	movw	r0, #8242	; 0x2032
   2c054:	2107      	movs	r1, #7
{
   2c056:	f89d a020 	ldrb.w	sl, [sp, #32]
   2c05a:	4617      	mov	r7, r2
   2c05c:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2c05e:	f7eb fa51 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   2c062:	4605      	mov	r5, r0
   2c064:	b1a0      	cbz	r0, 2c090 <bt_le_set_phy+0x48>
   2c066:	2107      	movs	r1, #7
   2c068:	300c      	adds	r0, #12
   2c06a:	f002 f9e2 	bl	2e432 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c06e:	f8b9 3000 	ldrh.w	r3, [r9]
   2c072:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   2c074:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2c078:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2c07a:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   2c07c:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2c080:	4629      	mov	r1, r5
   2c082:	2200      	movs	r2, #0
}
   2c084:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2c088:	f242 0032 	movw	r0, #8242	; 0x2032
   2c08c:	f7eb bb96 	b.w	177bc <bt_hci_cmd_send_sync>
}
   2c090:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002c098 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2c098:	68c0      	ldr	r0, [r0, #12]
   2c09a:	f7eb bced 	b.w	17a78 <bt_hci_le_enh_conn_complete>

0002c09e <bt_le_conn_params_valid>:
{
   2c09e:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2c0a0:	8803      	ldrh	r3, [r0, #0]
   2c0a2:	8842      	ldrh	r2, [r0, #2]
   2c0a4:	4293      	cmp	r3, r2
   2c0a6:	d819      	bhi.n	2c0dc <bt_le_conn_params_valid+0x3e>
   2c0a8:	2b05      	cmp	r3, #5
   2c0aa:	d917      	bls.n	2c0dc <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2c0ac:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2c0b0:	d814      	bhi.n	2c0dc <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2c0b2:	8883      	ldrh	r3, [r0, #4]
   2c0b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2c0b8:	d210      	bcs.n	2c0dc <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2c0ba:	88c0      	ldrh	r0, [r0, #6]
   2c0bc:	f1a0 010a 	sub.w	r1, r0, #10
   2c0c0:	b289      	uxth	r1, r1
   2c0c2:	f640 4476 	movw	r4, #3190	; 0xc76
   2c0c6:	42a1      	cmp	r1, r4
   2c0c8:	d808      	bhi.n	2c0dc <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2c0ca:	3301      	adds	r3, #1
   2c0cc:	b29b      	uxth	r3, r3
   2c0ce:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2c0d0:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2c0d4:	bf34      	ite	cc
   2c0d6:	2001      	movcc	r0, #1
   2c0d8:	2000      	movcs	r0, #0
}
   2c0da:	bd10      	pop	{r4, pc}
		return false;
   2c0dc:	2000      	movs	r0, #0
   2c0de:	e7fc      	b.n	2c0da <bt_le_conn_params_valid+0x3c>

0002c0e0 <bt_send>:
		return bt_hci_ecc_send(buf);
   2c0e0:	f7ea b9c6 	b.w	16470 <bt_hci_ecc_send>

0002c0e4 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2c0e4:	2000      	movs	r0, #0
   2c0e6:	4770      	bx	lr

0002c0e8 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2c0e8:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2c0ea:	f7f4 f9dd 	bl	204a8 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2c0ee:	b118      	cbz	r0, 2c0f8 <bt_addr_le_is_bonded+0x10>
   2c0f0:	89c0      	ldrh	r0, [r0, #14]
   2c0f2:	3800      	subs	r0, #0
   2c0f4:	bf18      	it	ne
   2c0f6:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   2c0f8:	bd08      	pop	{r3, pc}

0002c0fa <bt_addr_le_eq>:
{
   2c0fa:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2c0fc:	2207      	movs	r2, #7
   2c0fe:	f7ff fda8 	bl	2bc52 <memcmp>
}
   2c102:	fab0 f080 	clz	r0, r0
   2c106:	0940      	lsrs	r0, r0, #5
   2c108:	bd08      	pop	{r3, pc}

0002c10a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2c10a:	2207      	movs	r2, #7
   2c10c:	f7ff bdc8 	b.w	2bca0 <memcpy>

0002c110 <hci_id_add>:
{
   2c110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c114:	4688      	mov	r8, r1
   2c116:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   2c118:	4605      	mov	r5, r0
   2c11a:	bb08      	cbnz	r0, 2c160 <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   2c11c:	2127      	movs	r1, #39	; 0x27
   2c11e:	f242 0027 	movw	r0, #8231	; 0x2027
   2c122:	f7eb f9ef 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   2c126:	4604      	mov	r4, r0
   2c128:	b1f0      	cbz	r0, 2c168 <hci_id_add+0x58>
   2c12a:	2127      	movs	r1, #39	; 0x27
   2c12c:	300c      	adds	r0, #12
   2c12e:	f002 f980 	bl	2e432 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2c132:	4641      	mov	r1, r8
   2c134:	4606      	mov	r6, r0
   2c136:	f7ff ffe8 	bl	2c10a <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   2c13a:	4639      	mov	r1, r7
   2c13c:	2210      	movs	r2, #16
   2c13e:	1df0      	adds	r0, r6, #7
   2c140:	f7ff fdae 	bl	2bca0 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   2c144:	4629      	mov	r1, r5
   2c146:	2210      	movs	r2, #16
   2c148:	f106 0017 	add.w	r0, r6, #23
   2c14c:	f7ff fdb3 	bl	2bcb6 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2c150:	462a      	mov	r2, r5
   2c152:	4621      	mov	r1, r4
   2c154:	f242 0027 	movw	r0, #8231	; 0x2027
}
   2c158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2c15c:	f7eb bb2e 	b.w	177bc <bt_hci_cmd_send_sync>
		return -EINVAL;
   2c160:	f06f 0015 	mvn.w	r0, #21
}
   2c164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   2c168:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c16c:	e7fa      	b.n	2c164 <hci_id_add+0x54>

0002c16e <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2c16e:	7a03      	ldrb	r3, [r0, #8]
   2c170:	075b      	lsls	r3, r3, #29
{
   2c172:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2c174:	d505      	bpl.n	2c182 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2c176:	4601      	mov	r1, r0
   2c178:	322a      	adds	r2, #42	; 0x2a
   2c17a:	f811 0b01 	ldrb.w	r0, [r1], #1
   2c17e:	f7ff bfc7 	b.w	2c110 <hci_id_add>
}
   2c182:	4770      	bx	lr

0002c184 <z_log_msg_static_create.constprop.0>:
   2c184:	2300      	movs	r3, #0
   2c186:	f7e7 bf53 	b.w	14030 <z_impl_z_log_msg_static_create>

0002c18a <addr_res_enable>:
{
   2c18a:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2c18c:	2101      	movs	r1, #1
{
   2c18e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2c190:	f242 002d 	movw	r0, #8237	; 0x202d
   2c194:	f7eb f9b6 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   2c198:	4604      	mov	r4, r0
   2c19a:	b158      	cbz	r0, 2c1b4 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2c19c:	4629      	mov	r1, r5
   2c19e:	300c      	adds	r0, #12
   2c1a0:	f002 f956 	bl	2e450 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2c1a4:	4621      	mov	r1, r4
   2c1a6:	2200      	movs	r2, #0
}
   2c1a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2c1ac:	f242 002d 	movw	r0, #8237	; 0x202d
   2c1b0:	f7eb bb04 	b.w	177bc <bt_hci_cmd_send_sync>
}
   2c1b4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c1b8:	bd38      	pop	{r3, r4, r5, pc}

0002c1ba <find_rl_conflict>:
{
   2c1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conflict->found) {
   2c1be:	684f      	ldr	r7, [r1, #4]
{
   2c1c0:	b086      	sub	sp, #24
   2c1c2:	4605      	mov	r5, r0
   2c1c4:	460c      	mov	r4, r1
	if (conflict->found) {
   2c1c6:	b9c7      	cbnz	r7, 2c1fa <find_rl_conflict+0x40>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   2c1c8:	7a03      	ldrb	r3, [r0, #8]
   2c1ca:	075b      	lsls	r3, r3, #29
   2c1cc:	d515      	bpl.n	2c1fa <find_rl_conflict+0x40>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   2c1ce:	6808      	ldr	r0, [r1, #0]
   2c1d0:	1c69      	adds	r1, r5, #1
   2c1d2:	3001      	adds	r0, #1
   2c1d4:	f7ff ff91 	bl	2c0fa <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2c1d8:	f8d4 8000 	ldr.w	r8, [r4]
   2c1dc:	2216      	movs	r2, #22
   2c1de:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   2c1e0:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2c1e2:	4668      	mov	r0, sp
   2c1e4:	f7ff fd67 	bl	2bcb6 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   2c1e8:	2210      	movs	r2, #16
   2c1ea:	4669      	mov	r1, sp
   2c1ec:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   2c1f0:	f7ff fd2f 	bl	2bc52 <memcmp>
   2c1f4:	b920      	cbnz	r0, 2c200 <find_rl_conflict+0x46>
	if (addr_conflict || irk_conflict) {
   2c1f6:	b106      	cbz	r6, 2c1fa <find_rl_conflict+0x40>
		conflict->found = resident;
   2c1f8:	6065      	str	r5, [r4, #4]
}
   2c1fa:	b006      	add	sp, #24
   2c1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c200:	6820      	ldr	r0, [r4, #0]
   2c202:	2210      	movs	r2, #16
   2c204:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   2c208:	302a      	adds	r0, #42	; 0x2a
   2c20a:	f7ff fd22 	bl	2bc52 <memcmp>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2c20e:	2800      	cmp	r0, #0
   2c210:	d0f2      	beq.n	2c1f8 <find_rl_conflict+0x3e>
   2c212:	e7f0      	b.n	2c1f6 <find_rl_conflict+0x3c>

0002c214 <bt_lookup_id_addr>:
{
   2c214:	b510      	push	{r4, lr}
   2c216:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2c218:	b930      	cbnz	r0, 2c228 <bt_lookup_id_addr+0x14>
   2c21a:	b119      	cbz	r1, 2c224 <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   2c21c:	f7f4 f900 	bl	20420 <bt_keys_find_irk>
		if (keys) {
   2c220:	b100      	cbz	r0, 2c224 <bt_lookup_id_addr+0x10>
			return &keys->addr;
   2c222:	1c44      	adds	r4, r0, #1
}
   2c224:	4620      	mov	r0, r4
   2c226:	bd10      	pop	{r4, pc}
		return NULL;
   2c228:	2400      	movs	r4, #0
   2c22a:	e7fb      	b.n	2c224 <bt_lookup_id_addr+0x10>

0002c22c <bt_id_set_private_addr>:
{
   2c22c:	b507      	push	{r0, r1, r2, lr}
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   2c22e:	b980      	cbnz	r0, 2c252 <bt_id_set_private_addr+0x26>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2c230:	2106      	movs	r1, #6
   2c232:	4668      	mov	r0, sp
   2c234:	f7f7 f930 	bl	23498 <bt_rand>
	if (err) {
   2c238:	b940      	cbnz	r0, 2c24c <bt_id_set_private_addr+0x20>
	BT_ADDR_SET_NRPA(&nrpa);
   2c23a:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   2c23e:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2c240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2c244:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   2c248:	f7ec fa0e 	bl	18668 <set_random_address>
}
   2c24c:	b003      	add	sp, #12
   2c24e:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2c252:	f06f 0015 	mvn.w	r0, #21
   2c256:	e7f9      	b.n	2c24c <bt_id_set_private_addr+0x20>

0002c258 <bt_id_scan_random_addr_check>:
}
   2c258:	2001      	movs	r0, #1
   2c25a:	4770      	bx	lr

0002c25c <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2c25c:	7a03      	ldrb	r3, [r0, #8]
   2c25e:	07d9      	lsls	r1, r3, #31
   2c260:	d504      	bpl.n	2c26c <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2c262:	f023 0301 	bic.w	r3, r3, #1
   2c266:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2c268:	f7ec baf2 	b.w	18850 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2c26c:	0799      	lsls	r1, r3, #30
   2c26e:	d504      	bpl.n	2c27a <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2c270:	f023 0302 	bic.w	r3, r3, #2
   2c274:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2c276:	f7ec bb05 	b.w	18884 <bt_id_del>
}
   2c27a:	4770      	bx	lr

0002c27c <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   2c27c:	2000      	movs	r0, #0
   2c27e:	4770      	bx	lr

0002c280 <atomic_and>:
{
   2c280:	b510      	push	{r4, lr}
   2c282:	4603      	mov	r3, r0
}
   2c284:	f3bf 8f5b 	dmb	ish
   2c288:	e853 0f00 	ldrex	r0, [r3]
   2c28c:	ea00 0201 	and.w	r2, r0, r1
   2c290:	e843 2400 	strex	r4, r2, [r3]
   2c294:	2c00      	cmp	r4, #0
   2c296:	d1f7      	bne.n	2c288 <atomic_and+0x8>
   2c298:	f3bf 8f5b 	dmb	ish
   2c29c:	bd10      	pop	{r4, pc}

0002c29e <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   2c29e:	f7ec bc8d 	b.w	18bbc <bt_le_scan_set_enable_legacy>

0002c2a2 <sys_slist_find_and_remove>:
	return list->head;
   2c2a2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c2a4:	2200      	movs	r2, #0
   2c2a6:	b90b      	cbnz	r3, 2c2ac <sys_slist_find_and_remove+0xa>
   2c2a8:	4618      	mov	r0, r3
   2c2aa:	4770      	bx	lr
   2c2ac:	428b      	cmp	r3, r1
   2c2ae:	d110      	bne.n	2c2d2 <sys_slist_find_and_remove+0x30>
	return node->next;
   2c2b0:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c2b2:	b942      	cbnz	r2, 2c2c6 <sys_slist_find_and_remove+0x24>
   2c2b4:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2c2b6:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c2b8:	4291      	cmp	r1, r2
   2c2ba:	d100      	bne.n	2c2be <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2c2bc:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2c2be:	2300      	movs	r3, #0
   2c2c0:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c2c2:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2c2c4:	4770      	bx	lr
	parent->next = child;
   2c2c6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c2c8:	6843      	ldr	r3, [r0, #4]
   2c2ca:	4299      	cmp	r1, r3
	list->tail = node;
   2c2cc:	bf08      	it	eq
   2c2ce:	6042      	streq	r2, [r0, #4]
}
   2c2d0:	e7f5      	b.n	2c2be <sys_slist_find_and_remove+0x1c>
	return node->next;
   2c2d2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c2d4:	681b      	ldr	r3, [r3, #0]
   2c2d6:	e7e6      	b.n	2c2a6 <sys_slist_find_and_remove+0x4>

0002c2d8 <atomic_and>:
{
   2c2d8:	b510      	push	{r4, lr}
   2c2da:	4603      	mov	r3, r0
}
   2c2dc:	f3bf 8f5b 	dmb	ish
   2c2e0:	e853 0f00 	ldrex	r0, [r3]
   2c2e4:	ea00 0201 	and.w	r2, r0, r1
   2c2e8:	e843 2400 	strex	r4, r2, [r3]
   2c2ec:	2c00      	cmp	r4, #0
   2c2ee:	d1f7      	bne.n	2c2e0 <atomic_and+0x8>
   2c2f0:	f3bf 8f5b 	dmb	ish
   2c2f4:	bd10      	pop	{r4, pc}

0002c2f6 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c2f6:	f3bf 8f5b 	dmb	ish
   2c2fa:	6800      	ldr	r0, [r0, #0]
   2c2fc:	f3bf 8f5b 	dmb	ish
}
   2c300:	4770      	bx	lr

0002c302 <z_log_msg_static_create.constprop.0>:
   2c302:	2300      	movs	r3, #0
   2c304:	f7e7 be94 	b.w	14030 <z_impl_z_log_msg_static_create>

0002c308 <atomic_dec.isra.0>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2c308:	f3bf 8f5b 	dmb	ish
   2c30c:	e850 3f00 	ldrex	r3, [r0]
   2c310:	3b01      	subs	r3, #1
   2c312:	e840 3200 	strex	r2, r3, [r0]
   2c316:	2a00      	cmp	r2, #0
   2c318:	d1f8      	bne.n	2c30c <atomic_dec.isra.0+0x4>
   2c31a:	f3bf 8f5b 	dmb	ish
}
   2c31e:	4770      	bx	lr

0002c320 <tx_complete_work>:
	tx_notify(conn);
   2c320:	3828      	subs	r0, #40	; 0x28
   2c322:	f7ed b859 	b.w	193d8 <tx_notify>

0002c326 <bt_conn_reset_rx_state>:
{
   2c326:	b510      	push	{r4, lr}
   2c328:	4604      	mov	r4, r0
	if (!conn->rx) {
   2c32a:	6900      	ldr	r0, [r0, #16]
   2c32c:	b118      	cbz	r0, 2c336 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2c32e:	f7f4 fb77 	bl	20a20 <net_buf_unref>
	conn->rx = NULL;
   2c332:	2300      	movs	r3, #0
   2c334:	6123      	str	r3, [r4, #16]
}
   2c336:	bd10      	pop	{r4, pc}

0002c338 <conn_cleanup>:
{
   2c338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c33c:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   2c33e:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2c340:	f104 0638 	add.w	r6, r4, #56	; 0x38
   2c344:	2300      	movs	r3, #0
   2c346:	2200      	movs	r2, #0
   2c348:	4630      	mov	r0, r6
   2c34a:	f002 f811 	bl	2e370 <net_buf_get>
   2c34e:	4603      	mov	r3, r0
   2c350:	b950      	cbnz	r0, 2c368 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   2c352:	4620      	mov	r0, r4
   2c354:	f7ff ffe7 	bl	2c326 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2c358:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2c35c:	2200      	movs	r2, #0
}
   2c35e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2c362:	2300      	movs	r3, #0
   2c364:	f7f9 ba3a 	b.w	257dc <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   2c368:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   2c36a:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   2c36c:	f7f4 fb58 	bl	20a20 <net_buf_unref>
		if (tx) {
   2c370:	2d00      	cmp	r5, #0
   2c372:	d0e7      	beq.n	2c344 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   2c374:	4629      	mov	r1, r5
   2c376:	4620      	mov	r0, r4
   2c378:	f7ed f85e 	bl	19438 <conn_tx_destroy>
   2c37c:	e7e0      	b.n	2c340 <conn_cleanup+0x8>

0002c37e <bt_conn_ref>:
{
   2c37e:	b510      	push	{r4, lr}
   2c380:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   2c382:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   2c386:	4610      	mov	r0, r2
   2c388:	f7ff ffb5 	bl	2c2f6 <atomic_get>
		if (!old) {
   2c38c:	b180      	cbz	r0, 2c3b0 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2c38e:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2c392:	1c41      	adds	r1, r0, #1
   2c394:	e852 4f00 	ldrex	r4, [r2]
   2c398:	4284      	cmp	r4, r0
   2c39a:	d104      	bne.n	2c3a6 <bt_conn_ref+0x28>
   2c39c:	e842 1c00 	strex	ip, r1, [r2]
   2c3a0:	f1bc 0f00 	cmp.w	ip, #0
   2c3a4:	d1f6      	bne.n	2c394 <bt_conn_ref+0x16>
   2c3a6:	f3bf 8f5b 	dmb	ish
   2c3aa:	d1ec      	bne.n	2c386 <bt_conn_ref+0x8>
}
   2c3ac:	4618      	mov	r0, r3
   2c3ae:	bd10      	pop	{r4, pc}
			return NULL;
   2c3b0:	4603      	mov	r3, r0
   2c3b2:	e7fb      	b.n	2c3ac <bt_conn_ref+0x2e>

0002c3b4 <conn_lookup_handle>:
{
   2c3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c3b8:	4606      	mov	r6, r0
   2c3ba:	460d      	mov	r5, r1
   2c3bc:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   2c3be:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2c3c0:	f04f 08c0 	mov.w	r8, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2c3c4:	42ac      	cmp	r4, r5
   2c3c6:	d102      	bne.n	2c3ce <conn_lookup_handle+0x1a>
	return NULL;
   2c3c8:	2000      	movs	r0, #0
}
   2c3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2c3ce:	fb08 6004 	mla	r0, r8, r4, r6
   2c3d2:	f7ff ffd4 	bl	2c37e <bt_conn_ref>
		if (!conn) {
   2c3d6:	b158      	cbz	r0, 2c3f0 <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(conn)) {
   2c3d8:	7b43      	ldrb	r3, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2c3da:	2b01      	cmp	r3, #1
   2c3dc:	d002      	beq.n	2c3e4 <conn_lookup_handle+0x30>
   2c3de:	3b07      	subs	r3, #7
   2c3e0:	2b01      	cmp	r3, #1
   2c3e2:	d802      	bhi.n	2c3ea <conn_lookup_handle+0x36>
		if (conn->handle != handle) {
   2c3e4:	8803      	ldrh	r3, [r0, #0]
   2c3e6:	42bb      	cmp	r3, r7
   2c3e8:	d0ef      	beq.n	2c3ca <conn_lookup_handle+0x16>
	old = atomic_dec(&conn->ref);
   2c3ea:	30b8      	adds	r0, #184	; 0xb8
   2c3ec:	f7ff ff8c 	bl	2c308 <atomic_dec.isra.0>
	for (i = 0; i < size; i++) {
   2c3f0:	3401      	adds	r4, #1
   2c3f2:	e7e7      	b.n	2c3c4 <conn_lookup_handle+0x10>

0002c3f4 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   2c3f4:	30b8      	adds	r0, #184	; 0xb8
   2c3f6:	f7ff bf87 	b.w	2c308 <atomic_dec.isra.0>

0002c3fa <bt_conn_connected>:
{
   2c3fa:	b510      	push	{r4, lr}
   2c3fc:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2c3fe:	f7ee f83f 	bl	1a480 <bt_l2cap_connected>
	notify_connected(conn);
   2c402:	4620      	mov	r0, r4
}
   2c404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2c408:	f7ec bfae 	b.w	19368 <notify_connected>

0002c40c <bt_conn_ltk_present>:
{
   2c40c:	b510      	push	{r4, lr}
   2c40e:	4604      	mov	r4, r0
	const struct bt_keys *keys = conn->le.keys;
   2c410:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
	if (!keys) {
   2c414:	b928      	cbnz	r0, 2c422 <bt_conn_ltk_present+0x16>
		keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   2c416:	7a20      	ldrb	r0, [r4, #8]
   2c418:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2c41c:	f7f4 f844 	bl	204a8 <bt_keys_find_addr>
	if (keys) {
   2c420:	b138      	cbz	r0, 2c432 <bt_conn_ltk_present+0x26>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2c422:	78e2      	ldrb	r2, [r4, #3]
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
   2c424:	89c3      	ldrh	r3, [r0, #14]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2c426:	b92a      	cbnz	r2, 2c434 <bt_conn_ltk_present+0x28>
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
   2c428:	f013 0f21 	tst.w	r3, #33	; 0x21
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK);
   2c42c:	bf14      	ite	ne
   2c42e:	2001      	movne	r0, #1
   2c430:	2000      	moveq	r0, #0
}
   2c432:	bd10      	pop	{r4, pc}
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK);
   2c434:	f013 0f24 	tst.w	r3, #36	; 0x24
   2c438:	e7f8      	b.n	2c42c <bt_conn_ltk_present+0x20>

0002c43a <bt_conn_le_start_encryption>:
{
   2c43a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c43e:	4682      	mov	sl, r0
   2c440:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   2c442:	f242 0019 	movw	r0, #8217	; 0x2019
   2c446:	211c      	movs	r1, #28
{
   2c448:	9e08      	ldr	r6, [sp, #32]
   2c44a:	4690      	mov	r8, r2
   2c44c:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   2c44e:	f7eb f859 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   2c452:	4605      	mov	r5, r0
   2c454:	b340      	cbz	r0, 2c4a8 <bt_conn_le_start_encryption+0x6e>
	return net_buf_simple_add(&buf->b, len);
   2c456:	211c      	movs	r1, #28
   2c458:	300c      	adds	r0, #12
   2c45a:	f001 ffea 	bl	2e432 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c45e:	f8ba 3000 	ldrh.w	r3, [sl]
   2c462:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   2c464:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c466:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   2c46a:	4649      	mov	r1, r9
   2c46c:	f7ff fc18 	bl	2bca0 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   2c470:	2202      	movs	r2, #2
   2c472:	4641      	mov	r1, r8
   2c474:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   2c478:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   2c47a:	f7ff fc11 	bl	2bca0 <memcpy>
	memcpy(cp->ltk, ltk, len);
   2c47e:	4632      	mov	r2, r6
   2c480:	4639      	mov	r1, r7
   2c482:	4620      	mov	r0, r4
   2c484:	f7ff fc0c 	bl	2bca0 <memcpy>
	if (len < sizeof(cp->ltk)) {
   2c488:	2e0f      	cmp	r6, #15
   2c48a:	d805      	bhi.n	2c498 <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   2c48c:	f1c6 0210 	rsb	r2, r6, #16
   2c490:	2100      	movs	r1, #0
   2c492:	19a0      	adds	r0, r4, r6
   2c494:	f7ff fc0f 	bl	2bcb6 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   2c498:	4629      	mov	r1, r5
   2c49a:	2200      	movs	r2, #0
}
   2c49c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   2c4a0:	f242 0019 	movw	r0, #8217	; 0x2019
   2c4a4:	f7eb b98a 	b.w	177bc <bt_hci_cmd_send_sync>
}
   2c4a8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002c4b0 <bt_conn_set_security>:
{
   2c4b0:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2c4b2:	7b43      	ldrb	r3, [r0, #13]
   2c4b4:	2b07      	cmp	r3, #7
{
   2c4b6:	4604      	mov	r4, r0
   2c4b8:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2c4ba:	d126      	bne.n	2c50a <bt_conn_set_security+0x5a>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2c4bc:	7a43      	ldrb	r3, [r0, #9]
   2c4be:	428b      	cmp	r3, r1
   2c4c0:	d219      	bcs.n	2c4f6 <bt_conn_set_security+0x46>
   2c4c2:	7a83      	ldrb	r3, [r0, #10]
   2c4c4:	428b      	cmp	r3, r1
   2c4c6:	d216      	bcs.n	2c4f6 <bt_conn_set_security+0x46>
	if (val) {
   2c4c8:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2c4ca:	f100 0004 	add.w	r0, r0, #4
   2c4ce:	d514      	bpl.n	2c4fa <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c4d0:	f3bf 8f5b 	dmb	ish
   2c4d4:	e850 3f00 	ldrex	r3, [r0]
   2c4d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2c4dc:	e840 3200 	strex	r2, r3, [r0]
   2c4e0:	2a00      	cmp	r2, #0
   2c4e2:	d1f7      	bne.n	2c4d4 <bt_conn_set_security+0x24>
   2c4e4:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2c4e8:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2c4ec:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2c4ee:	4620      	mov	r0, r4
   2c4f0:	f001 fd75 	bl	2dfde <bt_smp_start_security>
	if (err) {
   2c4f4:	b930      	cbnz	r0, 2c504 <bt_conn_set_security+0x54>
		return -ENOTCONN;
   2c4f6:	2000      	movs	r0, #0
}
   2c4f8:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c4fa:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2c4fe:	f7ff feeb 	bl	2c2d8 <atomic_and>
   2c502:	e7f1      	b.n	2c4e8 <bt_conn_set_security+0x38>
		conn->required_sec_level = conn->sec_level;
   2c504:	7a63      	ldrb	r3, [r4, #9]
   2c506:	72a3      	strb	r3, [r4, #10]
   2c508:	e7f6      	b.n	2c4f8 <bt_conn_set_security+0x48>
		return -ENOTCONN;
   2c50a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2c50e:	e7f3      	b.n	2c4f8 <bt_conn_set_security+0x48>

0002c510 <bt_conn_get_security>:
}
   2c510:	7a40      	ldrb	r0, [r0, #9]
   2c512:	4770      	bx	lr

0002c514 <conn_le_create_helper>:
{
   2c514:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c516:	4605      	mov	r5, r0
   2c518:	460c      	mov	r4, r1
	if (bt_addr_le_is_resolved(peer)) {
   2c51a:	f7ff fce1 	bl	2bee0 <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(&dst, peer);
   2c51e:	4629      	mov	r1, r5
	if (bt_addr_le_is_resolved(peer)) {
   2c520:	b1a8      	cbz	r0, 2c54e <conn_le_create_helper+0x3a>
		bt_addr_le_copy_resolved(&dst, peer);
   2c522:	4668      	mov	r0, sp
   2c524:	f7ff fcd2 	bl	2becc <bt_addr_le_copy_resolved>
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   2c528:	4669      	mov	r1, sp
   2c52a:	2000      	movs	r0, #0
   2c52c:	f7ed fc4a 	bl	19dc4 <bt_conn_add_le>
	if (!conn) {
   2c530:	b158      	cbz	r0, 2c54a <conn_le_create_helper+0x36>
	conn->le.interval_min = param->interval_min;
   2c532:	8823      	ldrh	r3, [r4, #0]
   2c534:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   2c538:	8863      	ldrh	r3, [r4, #2]
   2c53a:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   2c53e:	88a3      	ldrh	r3, [r4, #4]
   2c540:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   2c544:	88e3      	ldrh	r3, [r4, #6]
   2c546:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
}
   2c54a:	b003      	add	sp, #12
   2c54c:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   2c54e:	f7ff fe61 	bl	2c214 <bt_lookup_id_addr>
   2c552:	2207      	movs	r2, #7
   2c554:	4601      	mov	r1, r0
   2c556:	4668      	mov	r0, sp
   2c558:	f7ff fba2 	bl	2bca0 <memcpy>
}
   2c55c:	e7e4      	b.n	2c528 <conn_le_create_helper+0x14>

0002c55e <bt_conn_is_peer_addr_le>:
{
   2c55e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2c560:	7a03      	ldrb	r3, [r0, #8]
   2c562:	428b      	cmp	r3, r1
{
   2c564:	4604      	mov	r4, r0
   2c566:	4615      	mov	r5, r2
	if (id != conn->id) {
   2c568:	d115      	bne.n	2c596 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2c56a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2c56e:	2207      	movs	r2, #7
   2c570:	4628      	mov	r0, r5
   2c572:	f7ff fb6e 	bl	2bc52 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2c576:	b180      	cbz	r0, 2c59a <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2c578:	78e3      	ldrb	r3, [r4, #3]
   2c57a:	2207      	movs	r2, #7
   2c57c:	b943      	cbnz	r3, 2c590 <bt_conn_is_peer_addr_le+0x32>
   2c57e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2c582:	4628      	mov	r0, r5
   2c584:	f7ff fb65 	bl	2bc52 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2c588:	fab0 f080 	clz	r0, r0
   2c58c:	0940      	lsrs	r0, r0, #5
}
   2c58e:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   2c590:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2c594:	e7f5      	b.n	2c582 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2c596:	2000      	movs	r0, #0
   2c598:	e7f9      	b.n	2c58e <bt_conn_is_peer_addr_le+0x30>
		return true;
   2c59a:	2001      	movs	r0, #1
   2c59c:	e7f7      	b.n	2c58e <bt_conn_is_peer_addr_le+0x30>

0002c59e <bt_conn_get_dst>:
}
   2c59e:	3088      	adds	r0, #136	; 0x88
   2c5a0:	4770      	bx	lr

0002c5a2 <bt_conn_disconnect>:
{
   2c5a2:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2c5a4:	7883      	ldrb	r3, [r0, #2]
   2c5a6:	2b01      	cmp	r3, #1
{
   2c5a8:	4604      	mov	r4, r0
   2c5aa:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2c5ac:	d103      	bne.n	2c5b6 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   2c5ae:	2100      	movs	r1, #0
   2c5b0:	3088      	adds	r0, #136	; 0x88
   2c5b2:	f7ed fd29 	bl	1a008 <bt_le_set_auto_conn>
	switch (conn->state) {
   2c5b6:	7b63      	ldrb	r3, [r4, #13]
   2c5b8:	3b02      	subs	r3, #2
   2c5ba:	2b06      	cmp	r3, #6
   2c5bc:	d825      	bhi.n	2c60a <bt_conn_disconnect+0x68>
   2c5be:	e8df f003 	tbb	[pc, r3]
   2c5c2:	2404      	.short	0x2404
   2c5c4:	160e2424 	.word	0x160e2424
   2c5c8:	0c          	.byte	0x0c
   2c5c9:	00          	.byte	0x00
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c5ca:	4620      	mov	r0, r4
		conn->err = reason;
   2c5cc:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c5ce:	2100      	movs	r1, #0
   2c5d0:	f7ed f9dc 	bl	1998c <bt_conn_set_state>
			bt_le_scan_update(false);
   2c5d4:	2000      	movs	r0, #0
   2c5d6:	f7ec fb79 	bl	18ccc <bt_le_scan_update>
{
   2c5da:	2000      	movs	r0, #0
}
   2c5dc:	bd38      	pop	{r3, r4, r5, pc}
			k_work_cancel_delayable(&conn->deferred_work);
   2c5de:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2c5e2:	f002 fdcb 	bl	2f17c <k_work_cancel_delayable>
}
   2c5e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   2c5ea:	f7eb ba2b 	b.w	17a44 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   2c5ee:	8820      	ldrh	r0, [r4, #0]
   2c5f0:	4629      	mov	r1, r5
   2c5f2:	f7ff fcf0 	bl	2bfd6 <bt_hci_disconnect>
	if (err) {
   2c5f6:	2800      	cmp	r0, #0
   2c5f8:	d1f0      	bne.n	2c5dc <bt_conn_disconnect+0x3a>
	if (conn->state == BT_CONN_CONNECTED) {
   2c5fa:	7b63      	ldrb	r3, [r4, #13]
   2c5fc:	2b07      	cmp	r3, #7
   2c5fe:	d1ec      	bne.n	2c5da <bt_conn_disconnect+0x38>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2c600:	2108      	movs	r1, #8
   2c602:	4620      	mov	r0, r4
   2c604:	f7ed f9c2 	bl	1998c <bt_conn_set_state>
   2c608:	e7e7      	b.n	2c5da <bt_conn_disconnect+0x38>
		return -ENOTCONN;
   2c60a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2c60e:	e7e5      	b.n	2c5dc <bt_conn_disconnect+0x3a>

0002c610 <bt_conn_le_conn_update>:
{
   2c610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c612:	4607      	mov	r7, r0
   2c614:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2c616:	f242 0013 	movw	r0, #8211	; 0x2013
   2c61a:	210e      	movs	r1, #14
   2c61c:	f7ea ff72 	bl	17504 <bt_hci_cmd_create>
	if (!buf) {
   2c620:	4606      	mov	r6, r0
   2c622:	b1d0      	cbz	r0, 2c65a <bt_conn_le_conn_update+0x4a>
   2c624:	210e      	movs	r1, #14
   2c626:	300c      	adds	r0, #12
   2c628:	f001 ff03 	bl	2e432 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2c62c:	220e      	movs	r2, #14
   2c62e:	4604      	mov	r4, r0
   2c630:	2100      	movs	r1, #0
   2c632:	f7ff fb40 	bl	2bcb6 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2c636:	883b      	ldrh	r3, [r7, #0]
   2c638:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2c63a:	882b      	ldrh	r3, [r5, #0]
   2c63c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2c63e:	886b      	ldrh	r3, [r5, #2]
   2c640:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2c642:	88ab      	ldrh	r3, [r5, #4]
   2c644:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2c646:	88eb      	ldrh	r3, [r5, #6]
   2c648:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c64a:	4631      	mov	r1, r6
   2c64c:	2200      	movs	r2, #0
}
   2c64e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c652:	f242 0013 	movw	r0, #8211	; 0x2013
   2c656:	f7eb b8b1 	b.w	177bc <bt_hci_cmd_send_sync>
}
   2c65a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c660 <l2cap_connected>:
}
   2c660:	4770      	bx	lr

0002c662 <z_log_msg_static_create.constprop.0>:
   2c662:	2300      	movs	r3, #0
   2c664:	f7e7 bce4 	b.w	14030 <z_impl_z_log_msg_static_create>

0002c668 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2c668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c66a:	4605      	mov	r5, r0
   2c66c:	460f      	mov	r7, r1
   2c66e:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   2c670:	2300      	movs	r3, #0
   2c672:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2c676:	2104      	movs	r1, #4
   2c678:	2000      	movs	r0, #0
   2c67a:	f7ed fab5 	bl	19be8 <bt_conn_create_pdu_timeout>
	if (!buf) {
   2c67e:	4604      	mov	r4, r0
   2c680:	b920      	cbnz	r0, 2c68c <l2cap_create_le_sig_pdu.constprop.0+0x24>
   2c682:	4628      	mov	r0, r5
}
   2c684:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2c688:	f7ed beb6 	b.w	1a3f8 <l2cap_create_le_sig_pdu.part.0>
   2c68c:	2104      	movs	r1, #4
   2c68e:	300c      	adds	r0, #12
   2c690:	f001 fecf 	bl	2e432 <net_buf_simple_add>
	hdr->code = code;
   2c694:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   2c696:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   2c698:	8046      	strh	r6, [r0, #2]
}
   2c69a:	4620      	mov	r0, r4
   2c69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c69e <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   2c69e:	4770      	bx	lr

0002c6a0 <bt_l2cap_chan_del>:
{
   2c6a0:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2c6a2:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2c6a6:	4604      	mov	r4, r0
	if (!chan->conn) {
   2c6a8:	b123      	cbz	r3, 2c6b4 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2c6aa:	686b      	ldr	r3, [r5, #4]
   2c6ac:	b103      	cbz	r3, 2c6b0 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2c6ae:	4798      	blx	r3
	chan->conn = NULL;
   2c6b0:	2300      	movs	r3, #0
   2c6b2:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2c6b4:	68e3      	ldr	r3, [r4, #12]
   2c6b6:	b10b      	cbz	r3, 2c6bc <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2c6b8:	4620      	mov	r0, r4
   2c6ba:	4798      	blx	r3
	if (ops->released) {
   2c6bc:	6a2b      	ldr	r3, [r5, #32]
   2c6be:	b11b      	cbz	r3, 2c6c8 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2c6c0:	4620      	mov	r0, r4
}
   2c6c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2c6c6:	4718      	bx	r3
}
   2c6c8:	bd70      	pop	{r4, r5, r6, pc}

0002c6ca <bt_l2cap_disconnected>:
{
   2c6ca:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2c6cc:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c6ce:	b130      	cbz	r0, 2c6de <bt_l2cap_disconnected+0x14>
	return node->next;
   2c6d0:	f850 4908 	ldr.w	r4, [r0], #-8
   2c6d4:	b104      	cbz	r4, 2c6d8 <bt_l2cap_disconnected+0xe>
   2c6d6:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2c6d8:	f7ff ffe2 	bl	2c6a0 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c6dc:	b904      	cbnz	r4, 2c6e0 <bt_l2cap_disconnected+0x16>
}
   2c6de:	bd38      	pop	{r3, r4, r5, pc}
   2c6e0:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c6e2:	b12d      	cbz	r5, 2c6f0 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   2c6e4:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c6e6:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   2c6e8:	f7ff ffda 	bl	2c6a0 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c6ec:	462c      	mov	r4, r5
   2c6ee:	e7f7      	b.n	2c6e0 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   2c6f0:	4620      	mov	r0, r4
}
   2c6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2c6f6:	f7ff bfd3 	b.w	2c6a0 <bt_l2cap_chan_del>

0002c6fa <bt_l2cap_security_changed>:
{
   2c6fa:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2c6fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
   2c6fe:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c700:	b1bb      	cbz	r3, 2c732 <bt_l2cap_security_changed+0x38>
   2c702:	4618      	mov	r0, r3
	return node->next;
   2c704:	f850 4908 	ldr.w	r4, [r0], #-8
   2c708:	b104      	cbz	r4, 2c70c <bt_l2cap_security_changed+0x12>
   2c70a:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2c70c:	f853 3c04 	ldr.w	r3, [r3, #-4]
   2c710:	689b      	ldr	r3, [r3, #8]
   2c712:	b10b      	cbz	r3, 2c718 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2c714:	4629      	mov	r1, r5
   2c716:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c718:	b15c      	cbz	r4, 2c732 <bt_l2cap_security_changed+0x38>
   2c71a:	4620      	mov	r0, r4
   2c71c:	68a4      	ldr	r4, [r4, #8]
   2c71e:	6843      	ldr	r3, [r0, #4]
   2c720:	b124      	cbz	r4, 2c72c <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   2c722:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c724:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2c726:	2b00      	cmp	r3, #0
   2c728:	d1f4      	bne.n	2c714 <bt_l2cap_security_changed+0x1a>
   2c72a:	e7f6      	b.n	2c71a <bt_l2cap_security_changed+0x20>
   2c72c:	689b      	ldr	r3, [r3, #8]
   2c72e:	2b00      	cmp	r3, #0
   2c730:	d1f0      	bne.n	2c714 <bt_l2cap_security_changed+0x1a>
}
   2c732:	bd38      	pop	{r3, r4, r5, pc}

0002c734 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2c734:	3104      	adds	r1, #4
   2c736:	f7ed ba57 	b.w	19be8 <bt_conn_create_pdu_timeout>

0002c73a <bt_l2cap_send_cb>:
{
   2c73a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c73e:	4614      	mov	r4, r2
   2c740:	4605      	mov	r5, r0
   2c742:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2c744:	f102 000c 	add.w	r0, r2, #12
   2c748:	2104      	movs	r1, #4
   2c74a:	461e      	mov	r6, r3
   2c74c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2c750:	f001 fe90 	bl	2e474 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c754:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   2c756:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c758:	3a04      	subs	r2, #4
   2c75a:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2c75c:	4643      	mov	r3, r8
   2c75e:	4632      	mov	r2, r6
   2c760:	4621      	mov	r1, r4
   2c762:	4628      	mov	r0, r5
}
   2c764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2c768:	f7ed b83c 	b.w	197e4 <bt_conn_send_cb>

0002c76c <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   2c76c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c76e:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2c770:	2202      	movs	r2, #2
   2c772:	2001      	movs	r0, #1
   2c774:	f7ff ff78 	bl	2c668 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2c778:	4604      	mov	r4, r0
   2c77a:	b198      	cbz	r0, 2c7a4 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   2c77c:	2102      	movs	r1, #2
   2c77e:	300c      	adds	r0, #12
   2c780:	f001 fe57 	bl	2e432 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2c784:	2300      	movs	r3, #0
   2c786:	7003      	strb	r3, [r0, #0]
   2c788:	7043      	strb	r3, [r0, #1]
   2c78a:	4622      	mov	r2, r4
   2c78c:	9300      	str	r3, [sp, #0]
   2c78e:	2105      	movs	r1, #5
   2c790:	4628      	mov	r0, r5
   2c792:	f7ff ffd2 	bl	2c73a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2c796:	b128      	cbz	r0, 2c7a4 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   2c798:	4620      	mov	r0, r4
}
   2c79a:	b003      	add	sp, #12
   2c79c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2c7a0:	f7f4 b93e 	b.w	20a20 <net_buf_unref>
}
   2c7a4:	b003      	add	sp, #12
   2c7a6:	bd30      	pop	{r4, r5, pc}

0002c7a8 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2c7a8:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c7aa:	b130      	cbz	r0, 2c7ba <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2c7ac:	8b83      	ldrh	r3, [r0, #28]
   2c7ae:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c7b0:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2c7b4:	d001      	beq.n	2c7ba <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   2c7b6:	6880      	ldr	r0, [r0, #8]
   2c7b8:	e7f7      	b.n	2c7aa <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2c7ba:	4770      	bx	lr

0002c7bc <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2c7bc:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c7be:	b130      	cbz	r0, 2c7ce <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2c7c0:	8983      	ldrh	r3, [r0, #12]
   2c7c2:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c7c4:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2c7c8:	d001      	beq.n	2c7ce <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   2c7ca:	6880      	ldr	r0, [r0, #8]
   2c7cc:	e7f7      	b.n	2c7be <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2c7ce:	4770      	bx	lr

0002c7d0 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2c7d0:	4770      	bx	lr

0002c7d2 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2c7d2:	4603      	mov	r3, r0
	return list->head;
   2c7d4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2c7d6:	b128      	cbz	r0, 2c7e4 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c7d8:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2c7da:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2c7dc:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c7de:	4288      	cmp	r0, r1
	list->tail = node;
   2c7e0:	bf08      	it	eq
   2c7e2:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2c7e4:	4770      	bx	lr

0002c7e6 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2c7e6:	4603      	mov	r3, r0
	size_t bytes = 0;
   2c7e8:	2000      	movs	r0, #0

	while (buf) {
   2c7ea:	b903      	cbnz	r3, 2c7ee <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2c7ec:	4770      	bx	lr
		bytes += buf->len;
   2c7ee:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2c7f0:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2c7f2:	4410      	add	r0, r2
		buf = buf->frags;
   2c7f4:	e7f9      	b.n	2c7ea <net_buf_frags_len+0x4>

0002c7f6 <attr_read_type_cb>:
{
   2c7f6:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2c7f8:	68d4      	ldr	r4, [r2, #12]
   2c7fa:	7823      	ldrb	r3, [r4, #0]
   2c7fc:	3102      	adds	r1, #2
   2c7fe:	b913      	cbnz	r3, 2c806 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2c800:	7021      	strb	r1, [r4, #0]
	return true;
   2c802:	2001      	movs	r0, #1
}
   2c804:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2c806:	428b      	cmp	r3, r1
   2c808:	d0fb      	beq.n	2c802 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2c80a:	8a03      	ldrh	r3, [r0, #16]
   2c80c:	3b02      	subs	r3, #2
   2c80e:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2c810:	2000      	movs	r0, #0
   2c812:	6110      	str	r0, [r2, #16]
		return false;
   2c814:	e7f6      	b.n	2c804 <attr_read_type_cb+0xe>

0002c816 <att_prepare_write_req>:
}
   2c816:	2006      	movs	r0, #6
   2c818:	4770      	bx	lr

0002c81a <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c81a:	f3bf 8f5b 	dmb	ish
   2c81e:	6800      	ldr	r0, [r0, #0]
   2c820:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c824:	4108      	asrs	r0, r1
}
   2c826:	f000 0001 	and.w	r0, r0, #1
   2c82a:	4770      	bx	lr

0002c82c <att_notify_mult>:
{
   2c82c:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   2c82e:	6803      	ldr	r3, [r0, #0]
   2c830:	8a0a      	ldrh	r2, [r1, #16]
   2c832:	6818      	ldr	r0, [r3, #0]
   2c834:	68c9      	ldr	r1, [r1, #12]
   2c836:	f7f1 faeb 	bl	1de10 <bt_gatt_mult_notification>
}
   2c83a:	2000      	movs	r0, #0
   2c83c:	bd08      	pop	{r3, pc}

0002c83e <att_notify>:
{
   2c83e:	b538      	push	{r3, r4, r5, lr}
   2c840:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2c842:	f101 000c 	add.w	r0, r1, #12
   2c846:	460c      	mov	r4, r1
   2c848:	f001 fe34 	bl	2e4b4 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2c84c:	682d      	ldr	r5, [r5, #0]
   2c84e:	8a23      	ldrh	r3, [r4, #16]
   2c850:	68e2      	ldr	r2, [r4, #12]
   2c852:	4601      	mov	r1, r0
   2c854:	6828      	ldr	r0, [r5, #0]
   2c856:	f001 f8f8 	bl	2da4a <bt_gatt_notification>
}
   2c85a:	2000      	movs	r0, #0
   2c85c:	bd38      	pop	{r3, r4, r5, pc}

0002c85e <att_chan_mtu_updated>:
{
   2c85e:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2c860:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2c862:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c864:	b352      	cbz	r2, 2c8bc <att_chan_mtu_updated+0x5e>
	return node->next;
   2c866:	6813      	ldr	r3, [r2, #0]
   2c868:	b103      	cbz	r3, 2c86c <att_chan_mtu_updated+0xe>
   2c86a:	3b88      	subs	r3, #136	; 0x88
   2c86c:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   2c870:	2200      	movs	r2, #0
   2c872:	4611      	mov	r1, r2
   2c874:	e000      	b.n	2c878 <att_chan_mtu_updated+0x1a>
   2c876:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   2c878:	4284      	cmp	r4, r0
   2c87a:	d007      	beq.n	2c88c <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2c87c:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2c87e:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2c880:	42b1      	cmp	r1, r6
   2c882:	bf38      	it	cc
   2c884:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2c886:	42a2      	cmp	r2, r4
   2c888:	bf38      	it	cc
   2c88a:	4622      	movcc	r2, r4
   2c88c:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c88e:	b12b      	cbz	r3, 2c89c <att_chan_mtu_updated+0x3e>
   2c890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   2c894:	2b00      	cmp	r3, #0
   2c896:	d1ee      	bne.n	2c876 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   2c898:	4284      	cmp	r4, r0
   2c89a:	d1ef      	bne.n	2c87c <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2c89c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2c89e:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2c8a0:	428b      	cmp	r3, r1
   2c8a2:	d801      	bhi.n	2c8a8 <att_chan_mtu_updated+0x4a>
   2c8a4:	4290      	cmp	r0, r2
   2c8a6:	d90b      	bls.n	2c8c0 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2c8a8:	4282      	cmp	r2, r0
   2c8aa:	bf38      	it	cc
   2c8ac:	4602      	movcc	r2, r0
   2c8ae:	4299      	cmp	r1, r3
   2c8b0:	6828      	ldr	r0, [r5, #0]
   2c8b2:	bf38      	it	cc
   2c8b4:	4619      	movcc	r1, r3
}
   2c8b6:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2c8b8:	f7f1 bb70 	b.w	1df9c <bt_gatt_att_max_mtu_changed>
   2c8bc:	4611      	mov	r1, r2
   2c8be:	e7ed      	b.n	2c89c <att_chan_mtu_updated+0x3e>
}
   2c8c0:	bc70      	pop	{r4, r5, r6}
   2c8c2:	4770      	bx	lr

0002c8c4 <write_cb>:
{
   2c8c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c8c6:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2c8c8:	4601      	mov	r1, r0
{
   2c8ca:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2c8cc:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2c8d0:	6820      	ldr	r0, [r4, #0]
   2c8d2:	f000 ff72 	bl	2d7ba <bt_gatt_check_perm>
   2c8d6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2c8d8:	bb00      	cbnz	r0, 2c91c <write_cb+0x58>
	if (!data->req) {
   2c8da:	7a23      	ldrb	r3, [r4, #8]
   2c8dc:	b1b3      	cbz	r3, 2c90c <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2c8de:	f1a3 0218 	sub.w	r2, r3, #24
   2c8e2:	4253      	negs	r3, r2
   2c8e4:	4153      	adcs	r3, r2
   2c8e6:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2c8e8:	9301      	str	r3, [sp, #4]
   2c8ea:	8a63      	ldrh	r3, [r4, #18]
   2c8ec:	9300      	str	r3, [sp, #0]
   2c8ee:	68ae      	ldr	r6, [r5, #8]
   2c8f0:	8a23      	ldrh	r3, [r4, #16]
   2c8f2:	68e2      	ldr	r2, [r4, #12]
   2c8f4:	6820      	ldr	r0, [r4, #0]
   2c8f6:	4629      	mov	r1, r5
   2c8f8:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   2c8fa:	2800      	cmp	r0, #0
   2c8fc:	db08      	blt.n	2c910 <write_cb+0x4c>
   2c8fe:	8a23      	ldrh	r3, [r4, #16]
   2c900:	4298      	cmp	r0, r3
   2c902:	d10e      	bne.n	2c922 <write_cb+0x5e>
	data->err = 0U;
   2c904:	2300      	movs	r3, #0
   2c906:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2c908:	2001      	movs	r0, #1
   2c90a:	e008      	b.n	2c91e <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2c90c:	2302      	movs	r3, #2
   2c90e:	e7eb      	b.n	2c8e8 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2c910:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2c914:	d305      	bcc.n	2c922 <write_cb+0x5e>
		return -err;
   2c916:	4240      	negs	r0, r0
   2c918:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2c91a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2c91c:	2000      	movs	r0, #0
}
   2c91e:	b002      	add	sp, #8
   2c920:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   2c922:	200e      	movs	r0, #14
   2c924:	e7f9      	b.n	2c91a <write_cb+0x56>

0002c926 <bt_gatt_foreach_attr>:
{
   2c926:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2c928:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2c92c:	2300      	movs	r3, #0
   2c92e:	9300      	str	r3, [sp, #0]
   2c930:	461a      	mov	r2, r3
   2c932:	f7f0 f88f 	bl	1ca54 <bt_gatt_foreach_attr_type>
}
   2c936:	b005      	add	sp, #20
   2c938:	f85d fb04 	ldr.w	pc, [sp], #4

0002c93c <find_info_cb>:
{
   2c93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2c93e:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2c940:	6817      	ldr	r7, [r2, #0]
{
   2c942:	4605      	mov	r5, r0
   2c944:	460e      	mov	r6, r1
   2c946:	4614      	mov	r4, r2
	if (!data->rsp) {
   2c948:	b963      	cbnz	r3, 2c964 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2c94a:	6850      	ldr	r0, [r2, #4]
   2c94c:	2101      	movs	r1, #1
   2c94e:	300c      	adds	r0, #12
   2c950:	f001 fd6f 	bl	2e432 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2c954:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2c956:	682b      	ldr	r3, [r5, #0]
   2c958:	781b      	ldrb	r3, [r3, #0]
   2c95a:	2b00      	cmp	r3, #0
   2c95c:	bf14      	ite	ne
   2c95e:	2302      	movne	r3, #2
   2c960:	2301      	moveq	r3, #1
   2c962:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2c964:	68a3      	ldr	r3, [r4, #8]
   2c966:	781b      	ldrb	r3, [r3, #0]
   2c968:	2b01      	cmp	r3, #1
   2c96a:	d003      	beq.n	2c974 <find_info_cb+0x38>
   2c96c:	2b02      	cmp	r3, #2
   2c96e:	d019      	beq.n	2c9a4 <find_info_cb+0x68>
   2c970:	2000      	movs	r0, #0
   2c972:	e016      	b.n	2c9a2 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2c974:	682b      	ldr	r3, [r5, #0]
   2c976:	781b      	ldrb	r3, [r3, #0]
   2c978:	2b00      	cmp	r3, #0
   2c97a:	d1f9      	bne.n	2c970 <find_info_cb+0x34>
   2c97c:	6860      	ldr	r0, [r4, #4]
   2c97e:	2104      	movs	r1, #4
   2c980:	300c      	adds	r0, #12
   2c982:	f001 fd56 	bl	2e432 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2c986:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2c988:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2c98a:	682a      	ldr	r2, [r5, #0]
   2c98c:	68e3      	ldr	r3, [r4, #12]
   2c98e:	8852      	ldrh	r2, [r2, #2]
   2c990:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2c992:	6863      	ldr	r3, [r4, #4]
   2c994:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2c996:	8a1b      	ldrh	r3, [r3, #16]
   2c998:	1ac0      	subs	r0, r0, r3
   2c99a:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   2c99c:	bf94      	ite	ls
   2c99e:	2000      	movls	r0, #0
   2c9a0:	2001      	movhi	r0, #1
}
   2c9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2c9a4:	682b      	ldr	r3, [r5, #0]
   2c9a6:	781b      	ldrb	r3, [r3, #0]
   2c9a8:	2b02      	cmp	r3, #2
   2c9aa:	d1e1      	bne.n	2c970 <find_info_cb+0x34>
   2c9ac:	6860      	ldr	r0, [r4, #4]
   2c9ae:	2112      	movs	r1, #18
   2c9b0:	300c      	adds	r0, #12
   2c9b2:	f001 fd3e 	bl	2e432 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2c9b6:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2c9b8:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2c9ba:	6829      	ldr	r1, [r5, #0]
   2c9bc:	68e0      	ldr	r0, [r4, #12]
   2c9be:	2210      	movs	r2, #16
   2c9c0:	3101      	adds	r1, #1
   2c9c2:	3002      	adds	r0, #2
   2c9c4:	f7ff f96c 	bl	2bca0 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2c9c8:	6863      	ldr	r3, [r4, #4]
   2c9ca:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2c9cc:	8a1b      	ldrh	r3, [r3, #16]
   2c9ce:	1ac0      	subs	r0, r0, r3
   2c9d0:	2812      	cmp	r0, #18
   2c9d2:	e7e3      	b.n	2c99c <find_info_cb+0x60>

0002c9d4 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2c9d4:	68d0      	ldr	r0, [r2, #12]
   2c9d6:	7803      	ldrb	r3, [r0, #0]
   2c9d8:	3104      	adds	r1, #4
   2c9da:	b913      	cbnz	r3, 2c9e2 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2c9dc:	7001      	strb	r1, [r0, #0]
	return true;
   2c9de:	2001      	movs	r0, #1
   2c9e0:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2c9e2:	428b      	cmp	r3, r1
   2c9e4:	d0fb      	beq.n	2c9de <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2c9e6:	6891      	ldr	r1, [r2, #8]
   2c9e8:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   2c9ea:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2c9ec:	3b04      	subs	r3, #4
   2c9ee:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2c9f0:	6110      	str	r0, [r2, #16]
}
   2c9f2:	4770      	bx	lr

0002c9f4 <z_log_msg_static_create.constprop.0>:
   2c9f4:	2300      	movs	r3, #0
   2c9f6:	f7e7 bb1b 	b.w	14030 <z_impl_z_log_msg_static_create>

0002c9fa <chan_req_send>:
{
   2c9fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c9fc:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2c9fe:	6888      	ldr	r0, [r1, #8]
   2ca00:	f7ff fef1 	bl	2c7e6 <net_buf_frags_len>
   2ca04:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   2ca06:	4283      	cmp	r3, r0
{
   2ca08:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ca0a:	d30b      	bcc.n	2ca24 <chan_req_send+0x2a>
	chan->req = req;
   2ca0c:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   2ca0e:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   2ca10:	2600      	movs	r6, #0
   2ca12:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2ca14:	4628      	mov	r0, r5
   2ca16:	4639      	mov	r1, r7
   2ca18:	f7ed ffda 	bl	1a9d0 <chan_send>
	if (err) {
   2ca1c:	b108      	cbz	r0, 2ca22 <chan_req_send+0x28>
		req->buf = buf;
   2ca1e:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2ca20:	63ae      	str	r6, [r5, #56]	; 0x38
}
   2ca22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2ca24:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2ca28:	e7fb      	b.n	2ca22 <chan_req_send+0x28>

0002ca2a <process_queue>:
{
   2ca2a:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2ca2c:	2200      	movs	r2, #0
{
   2ca2e:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   2ca30:	2300      	movs	r3, #0
   2ca32:	4608      	mov	r0, r1
{
   2ca34:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2ca36:	f001 fc9b 	bl	2e370 <net_buf_get>
	if (buf) {
   2ca3a:	4605      	mov	r5, r0
   2ca3c:	b158      	cbz	r0, 2ca56 <process_queue+0x2c>
	return chan_send(chan, buf);
   2ca3e:	4601      	mov	r1, r0
   2ca40:	4620      	mov	r0, r4
   2ca42:	f7ed ffc5 	bl	1a9d0 <chan_send>
		if (err) {
   2ca46:	4604      	mov	r4, r0
   2ca48:	b118      	cbz	r0, 2ca52 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2ca4a:	4629      	mov	r1, r5
   2ca4c:	4630      	mov	r0, r6
   2ca4e:	f002 fab2 	bl	2efb6 <k_queue_prepend>
}
   2ca52:	4620      	mov	r0, r4
   2ca54:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2ca56:	f06f 0401 	mvn.w	r4, #1
   2ca5a:	e7fa      	b.n	2ca52 <process_queue+0x28>

0002ca5c <bt_att_chan_send_rsp>:
{
   2ca5c:	b538      	push	{r3, r4, r5, lr}
   2ca5e:	4604      	mov	r4, r0
   2ca60:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2ca62:	f7ed ffb5 	bl	1a9d0 <chan_send>
	if (err) {
   2ca66:	b130      	cbz	r0, 2ca76 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2ca68:	4629      	mov	r1, r5
   2ca6a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   2ca6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2ca72:	f001 bcac 	b.w	2e3ce <net_buf_put>
}
   2ca76:	bd38      	pop	{r3, r4, r5, pc}

0002ca78 <att_chan_read>:
{
   2ca78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ca7c:	4680      	mov	r8, r0
   2ca7e:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2ca80:	4610      	mov	r0, r2
{
   2ca82:	4699      	mov	r9, r3
   2ca84:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2ca86:	f7ff feae 	bl	2c7e6 <net_buf_frags_len>
   2ca8a:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2ca8e:	4283      	cmp	r3, r0
{
   2ca90:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2ca92:	d97a      	bls.n	2cb8a <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2ca94:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2ca98:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2ca9a:	4630      	mov	r0, r6
   2ca9c:	f001 fc9d 	bl	2e3da <net_buf_frag_last>
	size_t len, total = 0;
   2caa0:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2caa4:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2caa6:	4630      	mov	r0, r6
   2caa8:	f7ff fe9d 	bl	2c7e6 <net_buf_frags_len>
   2caac:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2cab0:	f105 070c 	add.w	r7, r5, #12
   2cab4:	1a24      	subs	r4, r4, r0
   2cab6:	4638      	mov	r0, r7
   2cab8:	f001 fd08 	bl	2e4cc <net_buf_simple_tailroom>
   2cabc:	4284      	cmp	r4, r0
   2cabe:	d211      	bcs.n	2cae4 <att_chan_read+0x6c>
   2cac0:	4630      	mov	r0, r6
   2cac2:	f7ff fe90 	bl	2c7e6 <net_buf_frags_len>
   2cac6:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2caca:	1a24      	subs	r4, r4, r0
		if (!len) {
   2cacc:	bb34      	cbnz	r4, 2cb1c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2cace:	7ab0      	ldrb	r0, [r6, #10]
   2cad0:	f7f3 fee4 	bl	2089c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2cad4:	2200      	movs	r2, #0
   2cad6:	2300      	movs	r3, #0
   2cad8:	f001 fc45 	bl	2e366 <net_buf_alloc_fixed>
			if (!frag) {
   2cadc:	4605      	mov	r5, r0
   2cade:	b930      	cbnz	r0, 2caee <att_chan_read+0x76>
	return total;
   2cae0:	4657      	mov	r7, sl
   2cae2:	e02c      	b.n	2cb3e <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2cae4:	4638      	mov	r0, r7
   2cae6:	f001 fcf1 	bl	2e4cc <net_buf_simple_tailroom>
   2caea:	4604      	mov	r4, r0
   2caec:	e7ee      	b.n	2cacc <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2caee:	4601      	mov	r1, r0
   2caf0:	4630      	mov	r0, r6
   2caf2:	f001 fc83 	bl	2e3fc <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2caf6:	4630      	mov	r0, r6
   2caf8:	f7ff fe75 	bl	2c7e6 <net_buf_frags_len>
   2cafc:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2cb00:	f105 070c 	add.w	r7, r5, #12
   2cb04:	1a24      	subs	r4, r4, r0
   2cb06:	4638      	mov	r0, r7
   2cb08:	f001 fce0 	bl	2e4cc <net_buf_simple_tailroom>
   2cb0c:	4284      	cmp	r4, r0
   2cb0e:	d21a      	bcs.n	2cb46 <att_chan_read+0xce>
   2cb10:	4630      	mov	r0, r6
   2cb12:	f7ff fe68 	bl	2c7e6 <net_buf_frags_len>
   2cb16:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2cb1a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2cb1c:	68e9      	ldr	r1, [r5, #12]
   2cb1e:	8a2a      	ldrh	r2, [r5, #16]
   2cb20:	f8cd 9000 	str.w	r9, [sp]
   2cb24:	f8db 7004 	ldr.w	r7, [fp, #4]
   2cb28:	9803      	ldr	r0, [sp, #12]
   2cb2a:	440a      	add	r2, r1
   2cb2c:	b2a3      	uxth	r3, r4
   2cb2e:	4659      	mov	r1, fp
   2cb30:	47b8      	blx	r7
		if (read < 0) {
   2cb32:	1e07      	subs	r7, r0, #0
   2cb34:	da0c      	bge.n	2cb50 <att_chan_read+0xd8>
				return total;
   2cb36:	f1ba 0f00 	cmp.w	sl, #0
   2cb3a:	bf18      	it	ne
   2cb3c:	4657      	movne	r7, sl
}
   2cb3e:	4638      	mov	r0, r7
   2cb40:	b005      	add	sp, #20
   2cb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cb46:	4638      	mov	r0, r7
   2cb48:	f001 fcc0 	bl	2e4cc <net_buf_simple_tailroom>
   2cb4c:	4604      	mov	r4, r0
   2cb4e:	e7e5      	b.n	2cb1c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2cb50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cb52:	b993      	cbnz	r3, 2cb7a <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2cb54:	4639      	mov	r1, r7
   2cb56:	f105 000c 	add.w	r0, r5, #12
   2cb5a:	f001 fc6a 	bl	2e432 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2cb5e:	4630      	mov	r0, r6
   2cb60:	f7ff fe41 	bl	2c7e6 <net_buf_frags_len>
   2cb64:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2cb68:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2cb6a:	4283      	cmp	r3, r0
		total += read;
   2cb6c:	44ba      	add	sl, r7
		offset += read;
   2cb6e:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2cb72:	d9b5      	bls.n	2cae0 <att_chan_read+0x68>
   2cb74:	42a7      	cmp	r7, r4
   2cb76:	d096      	beq.n	2caa6 <att_chan_read+0x2e>
   2cb78:	e7b2      	b.n	2cae0 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2cb7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2cb7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cb7e:	4639      	mov	r1, r7
   2cb80:	4628      	mov	r0, r5
   2cb82:	4798      	blx	r3
   2cb84:	2800      	cmp	r0, #0
   2cb86:	d1e5      	bne.n	2cb54 <att_chan_read+0xdc>
   2cb88:	e7aa      	b.n	2cae0 <att_chan_read+0x68>
		return 0;
   2cb8a:	2700      	movs	r7, #0
   2cb8c:	e7d7      	b.n	2cb3e <att_chan_read+0xc6>

0002cb8e <sys_slist_find_and_remove.isra.0>:
	return list->head;
   2cb8e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cb90:	2200      	movs	r2, #0
   2cb92:	b903      	cbnz	r3, 2cb96 <sys_slist_find_and_remove.isra.0+0x8>
   2cb94:	4770      	bx	lr
   2cb96:	428b      	cmp	r3, r1
   2cb98:	d10f      	bne.n	2cbba <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   2cb9a:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cb9c:	b93a      	cbnz	r2, 2cbae <sys_slist_find_and_remove.isra.0+0x20>
   2cb9e:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2cba0:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cba2:	4291      	cmp	r1, r2
   2cba4:	d100      	bne.n	2cba8 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2cba6:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2cba8:	2300      	movs	r3, #0
   2cbaa:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cbac:	4770      	bx	lr
	parent->next = child;
   2cbae:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cbb0:	6843      	ldr	r3, [r0, #4]
   2cbb2:	4299      	cmp	r1, r3
	list->tail = node;
   2cbb4:	bf08      	it	eq
   2cbb6:	6042      	streq	r2, [r0, #4]
}
   2cbb8:	e7f6      	b.n	2cba8 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2cbba:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cbbc:	681b      	ldr	r3, [r3, #0]
   2cbbe:	e7e8      	b.n	2cb92 <sys_slist_find_and_remove.isra.0+0x4>

0002cbc0 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2cbc0:	2301      	movs	r3, #1
   2cbc2:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2cbc4:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2cbc6:	f3bf 8f5b 	dmb	ish
   2cbca:	e850 2f00 	ldrex	r2, [r0]
   2cbce:	401a      	ands	r2, r3
   2cbd0:	e840 2100 	strex	r1, r2, [r0]
   2cbd4:	2900      	cmp	r1, #0
   2cbd6:	d1f8      	bne.n	2cbca <atomic_clear_bit+0xa>
   2cbd8:	f3bf 8f5b 	dmb	ish
}
   2cbdc:	4770      	bx	lr

0002cbde <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   2cbde:	2006      	movs	r0, #6
   2cbe0:	4770      	bx	lr

0002cbe2 <atomic_test_and_set_bit>:
{
   2cbe2:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2cbe4:	2301      	movs	r3, #1
   2cbe6:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cbea:	f3bf 8f5b 	dmb	ish
   2cbee:	e850 3f00 	ldrex	r3, [r0]
   2cbf2:	ea43 0201 	orr.w	r2, r3, r1
   2cbf6:	e840 2400 	strex	r4, r2, [r0]
   2cbfa:	2c00      	cmp	r4, #0
   2cbfc:	d1f7      	bne.n	2cbee <atomic_test_and_set_bit+0xc>
   2cbfe:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2cc02:	4219      	tst	r1, r3
}
   2cc04:	bf14      	ite	ne
   2cc06:	2001      	movne	r0, #1
   2cc08:	2000      	moveq	r0, #0
   2cc0a:	bd10      	pop	{r4, pc}

0002cc0c <read_cb>:
{
   2cc0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   2cc0e:	6816      	ldr	r6, [r2, #0]
{
   2cc10:	4605      	mov	r5, r0
	data->err = 0x00;
   2cc12:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2cc14:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   2cc16:	7313      	strb	r3, [r2, #12]
{
   2cc18:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2cc1a:	4629      	mov	r1, r5
   2cc1c:	2295      	movs	r2, #149	; 0x95
   2cc1e:	f000 fdcc 	bl	2d7ba <bt_gatt_check_perm>
   2cc22:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2cc24:	b980      	cbnz	r0, 2cc48 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2cc26:	e9cd 0000 	strd	r0, r0, [sp]
   2cc2a:	4629      	mov	r1, r5
   2cc2c:	88a3      	ldrh	r3, [r4, #4]
   2cc2e:	68a2      	ldr	r2, [r4, #8]
   2cc30:	4630      	mov	r0, r6
   2cc32:	f7ff ff21 	bl	2ca78 <att_chan_read>
	if (ret < 0) {
   2cc36:	2800      	cmp	r0, #0
   2cc38:	da09      	bge.n	2cc4e <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   2cc3a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   2cc3e:	bf26      	itte	cs
   2cc40:	4240      	negcs	r0, r0
   2cc42:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   2cc44:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   2cc46:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2cc48:	2000      	movs	r0, #0
}
   2cc4a:	b002      	add	sp, #8
   2cc4c:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   2cc4e:	2001      	movs	r0, #1
   2cc50:	e7fb      	b.n	2cc4a <read_cb+0x3e>

0002cc52 <read_vl_cb>:
{
   2cc52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2cc56:	f8d2 8000 	ldr.w	r8, [r2]
{
   2cc5a:	4606      	mov	r6, r0
	data->err = 0x00;
   2cc5c:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2cc5e:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2cc62:	7313      	strb	r3, [r2, #12]
{
   2cc64:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2cc66:	4631      	mov	r1, r6
   2cc68:	2295      	movs	r2, #149	; 0x95
   2cc6a:	f000 fda6 	bl	2d7ba <bt_gatt_check_perm>
   2cc6e:	4605      	mov	r5, r0
   2cc70:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2cc72:	b9e0      	cbnz	r0, 2ccae <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2cc74:	68a0      	ldr	r0, [r4, #8]
   2cc76:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2cc7a:	8a02      	ldrh	r2, [r0, #16]
   2cc7c:	1a9b      	subs	r3, r3, r2
   2cc7e:	2b01      	cmp	r3, #1
   2cc80:	dd15      	ble.n	2ccae <read_vl_cb+0x5c>
   2cc82:	2102      	movs	r1, #2
   2cc84:	300c      	adds	r0, #12
   2cc86:	f001 fbd4 	bl	2e432 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2cc8a:	e9cd 5500 	strd	r5, r5, [sp]
   2cc8e:	4607      	mov	r7, r0
   2cc90:	88a3      	ldrh	r3, [r4, #4]
   2cc92:	68a2      	ldr	r2, [r4, #8]
   2cc94:	4631      	mov	r1, r6
   2cc96:	4640      	mov	r0, r8
   2cc98:	f7ff feee 	bl	2ca78 <att_chan_read>
	if (read < 0) {
   2cc9c:	1e03      	subs	r3, r0, #0
   2cc9e:	da0a      	bge.n	2ccb6 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2cca0:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2cca4:	bf26      	itte	cs
   2cca6:	425b      	negcs	r3, r3
   2cca8:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2ccaa:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   2ccac:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2ccae:	2000      	movs	r0, #0
}
   2ccb0:	b002      	add	sp, #8
   2ccb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   2ccb6:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2ccb8:	2001      	movs	r0, #1
   2ccba:	e7f9      	b.n	2ccb0 <read_vl_cb+0x5e>

0002ccbc <bt_att_sent>:
{
   2ccbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   2ccbe:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   2ccc2:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2ccc4:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   2ccc6:	2104      	movs	r1, #4
   2ccc8:	3030      	adds	r0, #48	; 0x30
   2ccca:	f7ff ff79 	bl	2cbc0 <atomic_clear_bit>
	if (!att) {
   2ccce:	b304      	cbz	r4, 2cd12 <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2ccd0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2ccd2:	b98b      	cbnz	r3, 2ccf8 <bt_att_sent+0x3c>
   2ccd4:	6863      	ldr	r3, [r4, #4]
   2ccd6:	b17b      	cbz	r3, 2ccf8 <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2ccd8:	1d20      	adds	r0, r4, #4
   2ccda:	f7ff fd7a 	bl	2c7d2 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2ccde:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2cce0:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2cce2:	4638      	mov	r0, r7
   2cce4:	f7ff fe89 	bl	2c9fa <chan_req_send>
   2cce8:	2800      	cmp	r0, #0
   2ccea:	da12      	bge.n	2cd12 <bt_att_sent+0x56>
	return list->head;
   2ccec:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2ccee:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2ccf0:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2ccf2:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2ccf4:	b903      	cbnz	r3, 2ccf8 <bt_att_sent+0x3c>
	list->tail = node;
   2ccf6:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2ccf8:	f105 0138 	add.w	r1, r5, #56	; 0x38
   2ccfc:	4638      	mov	r0, r7
   2ccfe:	f7ff fe94 	bl	2ca2a <process_queue>
	if (!err) {
   2cd02:	b130      	cbz	r0, 2cd12 <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   2cd04:	f104 010c 	add.w	r1, r4, #12
   2cd08:	4638      	mov	r0, r7
}
   2cd0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2cd0e:	f7ff be8c 	b.w	2ca2a <process_queue>
}
   2cd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002cd14 <att_req_send_process>:
{
   2cd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2cd18:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2cd1a:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2cd1c:	2c00      	cmp	r4, #0
   2cd1e:	d03a      	beq.n	2cd96 <att_req_send_process+0x82>
	return node->next;
   2cd20:	f854 6988 	ldr.w	r6, [r4], #-136
   2cd24:	b106      	cbz	r6, 2cd28 <att_req_send_process+0x14>
   2cd26:	3e88      	subs	r6, #136	; 0x88
{
   2cd28:	2300      	movs	r3, #0
   2cd2a:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   2cd2c:	f108 0704 	add.w	r7, r8, #4
   2cd30:	e013      	b.n	2cd5a <att_req_send_process+0x46>
		if (!req && prev &&
   2cd32:	b1bb      	cbz	r3, 2cd64 <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2cd34:	2103      	movs	r1, #3
   2cd36:	f104 0034 	add.w	r0, r4, #52	; 0x34
   2cd3a:	f7ff fd6e 	bl	2c81a <atomic_test_bit>
   2cd3e:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2cd40:	f103 0034 	add.w	r0, r3, #52	; 0x34
   2cd44:	f7ff fd69 	bl	2c81a <atomic_test_bit>
		if (!req && prev &&
   2cd48:	4282      	cmp	r2, r0
   2cd4a:	d10b      	bne.n	2cd64 <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2cd4c:	b31e      	cbz	r6, 2cd96 <att_req_send_process+0x82>
   2cd4e:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   2cd52:	b102      	cbz	r2, 2cd56 <att_req_send_process+0x42>
   2cd54:	3a88      	subs	r2, #136	; 0x88
{
   2cd56:	4634      	mov	r4, r6
   2cd58:	4616      	mov	r6, r2
		if (chan->req) {
   2cd5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2cd5c:	2a00      	cmp	r2, #0
   2cd5e:	d1f5      	bne.n	2cd4c <att_req_send_process+0x38>
		if (!req && prev &&
   2cd60:	2d00      	cmp	r5, #0
   2cd62:	d0e6      	beq.n	2cd32 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2cd64:	4638      	mov	r0, r7
   2cd66:	f7ff fd34 	bl	2c7d2 <sys_slist_get>
	if (node) {
   2cd6a:	4605      	mov	r5, r0
   2cd6c:	b908      	cbnz	r0, 2cd72 <att_req_send_process+0x5e>
   2cd6e:	4623      	mov	r3, r4
   2cd70:	e7ec      	b.n	2cd4c <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   2cd72:	4601      	mov	r1, r0
   2cd74:	4620      	mov	r0, r4
   2cd76:	f7ff fe40 	bl	2c9fa <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2cd7a:	2800      	cmp	r0, #0
   2cd7c:	da0b      	bge.n	2cd96 <att_req_send_process+0x82>
	return list->head;
   2cd7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   2cd82:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2cd84:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2cd88:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2cd8c:	2b00      	cmp	r3, #0
   2cd8e:	d1ee      	bne.n	2cd6e <att_req_send_process+0x5a>
	list->tail = node;
   2cd90:	f8c8 5008 	str.w	r5, [r8, #8]
}
   2cd94:	e7eb      	b.n	2cd6e <att_req_send_process+0x5a>
}
   2cd96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002cd9a <bt_att_status>:
{
   2cd9a:	b538      	push	{r3, r4, r5, lr}
   2cd9c:	4605      	mov	r5, r0
   2cd9e:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2cda0:	2100      	movs	r1, #0
   2cda2:	f7ff fd3a 	bl	2c81a <atomic_test_bit>
   2cda6:	b1b8      	cbz	r0, 2cdd8 <bt_att_status+0x3e>
	if (!chan->att) {
   2cda8:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2cdac:	b1a0      	cbz	r0, 2cdd8 <bt_att_status+0x3e>
	if (chan->req) {
   2cdae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2cdb0:	b993      	cbnz	r3, 2cdd8 <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   2cdb2:	3004      	adds	r0, #4
   2cdb4:	f7ff fd0d 	bl	2c7d2 <sys_slist_get>
	if (!node) {
   2cdb8:	4604      	mov	r4, r0
   2cdba:	b168      	cbz	r0, 2cdd8 <bt_att_status+0x3e>
	return chan_req_send(chan, req);
   2cdbc:	4601      	mov	r1, r0
   2cdbe:	1f28      	subs	r0, r5, #4
   2cdc0:	f7ff fe1b 	bl	2c9fa <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2cdc4:	2800      	cmp	r0, #0
   2cdc6:	da07      	bge.n	2cdd8 <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   2cdc8:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   2cdcc:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2cdce:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2cdd0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2cdd2:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2cdd4:	b902      	cbnz	r2, 2cdd8 <bt_att_status+0x3e>
	list->tail = node;
   2cdd6:	609c      	str	r4, [r3, #8]
}
   2cdd8:	bd38      	pop	{r3, r4, r5, pc}

0002cdda <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2cdda:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2cddc:	6883      	ldr	r3, [r0, #8]
   2cdde:	699b      	ldr	r3, [r3, #24]
   2cde0:	b10b      	cbz	r3, 2cde6 <att_sent+0xc>
		chan->ops->sent(chan);
   2cde2:	3004      	adds	r0, #4
   2cde4:	4718      	bx	r3
}
   2cde6:	4770      	bx	lr

0002cde8 <att_unknown>:
{
   2cde8:	b510      	push	{r4, lr}
   2cdea:	460c      	mov	r4, r1
	if (!err) {
   2cdec:	b90a      	cbnz	r2, 2cdf2 <att_unknown+0xa>
		att_sent(conn, user_data);
   2cdee:	f7ff fff4 	bl	2cdda <att_sent>
	tx_meta_data_free(user_data);
   2cdf2:	4620      	mov	r0, r4
}
   2cdf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2cdf8:	f7ed bd16 	b.w	1a828 <tx_meta_data_free>

0002cdfc <att_tx_complete>:
{
   2cdfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ce00:	4606      	mov	r6, r0
   2ce02:	460d      	mov	r5, r1
	if (!err) {
   2ce04:	4614      	mov	r4, r2
   2ce06:	b122      	cbz	r2, 2ce12 <att_tx_complete+0x16>
}
   2ce08:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   2ce0c:	4608      	mov	r0, r1
   2ce0e:	f7ed bd0b 	b.w	1a828 <tx_meta_data_free>
		att_sent(conn, user_data);
   2ce12:	f7ff ffe2 	bl	2cdda <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2ce16:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   2ce18:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2ce1c:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   2ce20:	4628      	mov	r0, r5
   2ce22:	f7ed fd01 	bl	1a828 <tx_meta_data_free>
	if (!err && func) {
   2ce26:	b92f      	cbnz	r7, 2ce34 <att_tx_complete+0x38>
}
   2ce28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2ce2c:	4649      	mov	r1, r9
   2ce2e:	4630      	mov	r0, r6
   2ce30:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2ce32:	3401      	adds	r4, #1
   2ce34:	b2a3      	uxth	r3, r4
   2ce36:	4543      	cmp	r3, r8
   2ce38:	d3f8      	bcc.n	2ce2c <att_tx_complete+0x30>
   2ce3a:	e7f5      	b.n	2ce28 <att_tx_complete+0x2c>

0002ce3c <att_req_sent>:
{
   2ce3c:	b510      	push	{r4, lr}
   2ce3e:	460c      	mov	r4, r1
	if (!err) {
   2ce40:	b90a      	cbnz	r2, 2ce46 <att_req_sent+0xa>
		att_sent(conn, user_data);
   2ce42:	f7ff ffca 	bl	2cdda <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2ce46:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2ce48:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2ce4a:	b12b      	cbz	r3, 2ce58 <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2ce4c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2ce50:	2300      	movs	r3, #0
   2ce52:	3058      	adds	r0, #88	; 0x58
   2ce54:	f7f8 fcc2 	bl	257dc <k_work_reschedule>
	tx_meta_data_free(user_data);
   2ce58:	4620      	mov	r0, r4
}
   2ce5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2ce5e:	f7ed bce3 	b.w	1a828 <tx_meta_data_free>

0002ce62 <att_cfm_sent>:
{
   2ce62:	b510      	push	{r4, lr}
   2ce64:	460c      	mov	r4, r1
	if (!err) {
   2ce66:	b90a      	cbnz	r2, 2ce6c <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2ce68:	f7ff ffb7 	bl	2cdda <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   2ce6c:	6820      	ldr	r0, [r4, #0]
   2ce6e:	2101      	movs	r1, #1
   2ce70:	3034      	adds	r0, #52	; 0x34
   2ce72:	f7ff fea5 	bl	2cbc0 <atomic_clear_bit>
	tx_meta_data_free(data);
   2ce76:	4620      	mov	r0, r4
}
   2ce78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2ce7c:	f7ed bcd4 	b.w	1a828 <tx_meta_data_free>

0002ce80 <att_rsp_sent>:
{
   2ce80:	b510      	push	{r4, lr}
   2ce82:	460c      	mov	r4, r1
	if (!err) {
   2ce84:	b90a      	cbnz	r2, 2ce8a <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2ce86:	f7ff ffa8 	bl	2cdda <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   2ce8a:	6820      	ldr	r0, [r4, #0]
   2ce8c:	2100      	movs	r1, #0
   2ce8e:	3034      	adds	r0, #52	; 0x34
   2ce90:	f7ff fe96 	bl	2cbc0 <atomic_clear_bit>
	tx_meta_data_free(data);
   2ce94:	4620      	mov	r0, r4
}
   2ce96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2ce9a:	f7ed bcc5 	b.w	1a828 <tx_meta_data_free>

0002ce9e <att_indicate>:
{
   2ce9e:	b570      	push	{r4, r5, r6, lr}
   2cea0:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   2cea2:	f101 000c 	add.w	r0, r1, #12
   2cea6:	460d      	mov	r5, r1
   2cea8:	f001 fb04 	bl	2e4b4 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2ceac:	6826      	ldr	r6, [r4, #0]
   2ceae:	8a2b      	ldrh	r3, [r5, #16]
   2ceb0:	68ea      	ldr	r2, [r5, #12]
   2ceb2:	4601      	mov	r1, r0
   2ceb4:	6830      	ldr	r0, [r6, #0]
   2ceb6:	f000 fdc8 	bl	2da4a <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   2ceba:	211e      	movs	r1, #30
   2cebc:	2200      	movs	r2, #0
   2cebe:	4620      	mov	r0, r4
   2cec0:	f7ed ffb0 	bl	1ae24 <bt_att_chan_create_pdu>
	if (!buf) {
   2cec4:	4601      	mov	r1, r0
   2cec6:	b110      	cbz	r0, 2cece <att_indicate+0x30>
	bt_att_chan_send_rsp(chan, buf);
   2cec8:	4620      	mov	r0, r4
   2ceca:	f7ff fdc7 	bl	2ca5c <bt_att_chan_send_rsp>
}
   2cece:	2000      	movs	r0, #0
   2ced0:	bd70      	pop	{r4, r5, r6, pc}

0002ced2 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2ced2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ced6:	4688      	mov	r8, r1
   2ced8:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2ceda:	2101      	movs	r1, #1
   2cedc:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2cede:	4605      	mov	r5, r0
   2cee0:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2cee2:	f7ed ff9f 	bl	1ae24 <bt_att_chan_create_pdu>
	if (!buf) {
   2cee6:	4604      	mov	r4, r0
   2cee8:	b170      	cbz	r0, 2cf08 <send_err_rsp.part.0+0x36>
	return net_buf_simple_add(&buf->b, len);
   2ceea:	2104      	movs	r1, #4
   2ceec:	300c      	adds	r0, #12
   2ceee:	f001 faa0 	bl	2e432 <net_buf_simple_add>
	rsp->request = req;
   2cef2:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   2cef6:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   2cefa:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2cefc:	4621      	mov	r1, r4
   2cefe:	4628      	mov	r0, r5
}
   2cf00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2cf04:	f7ff bdaa 	b.w	2ca5c <bt_att_chan_send_rsp>
}
   2cf08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002cf0c <att_write_req>:
{
   2cf0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2cf0e:	460c      	mov	r4, r1
   2cf10:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2cf12:	f101 000c 	add.w	r0, r1, #12
   2cf16:	f001 facd 	bl	2e4b4 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2cf1a:	8a22      	ldrh	r2, [r4, #16]
   2cf1c:	9201      	str	r2, [sp, #4]
   2cf1e:	68e2      	ldr	r2, [r4, #12]
   2cf20:	9200      	str	r2, [sp, #0]
   2cf22:	4603      	mov	r3, r0
   2cf24:	2213      	movs	r2, #19
   2cf26:	2112      	movs	r1, #18
   2cf28:	4628      	mov	r0, r5
   2cf2a:	f7ee f8b7 	bl	1b09c <att_write_rsp.constprop.0>
}
   2cf2e:	b003      	add	sp, #12
   2cf30:	bd30      	pop	{r4, r5, pc}

0002cf32 <att_write_cmd>:
{
   2cf32:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2cf34:	460c      	mov	r4, r1
   2cf36:	4605      	mov	r5, r0
   2cf38:	f101 000c 	add.w	r0, r1, #12
   2cf3c:	f001 faba 	bl	2e4b4 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2cf40:	8a22      	ldrh	r2, [r4, #16]
   2cf42:	9201      	str	r2, [sp, #4]
   2cf44:	68e2      	ldr	r2, [r4, #12]
   2cf46:	9200      	str	r2, [sp, #0]
   2cf48:	2200      	movs	r2, #0
   2cf4a:	4603      	mov	r3, r0
   2cf4c:	4611      	mov	r1, r2
   2cf4e:	4628      	mov	r0, r5
   2cf50:	f7ee f8a4 	bl	1b09c <att_write_rsp.constprop.0>
}
   2cf54:	b003      	add	sp, #12
   2cf56:	bd30      	pop	{r4, r5, pc}

0002cf58 <att_read_blob_req>:
{
   2cf58:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2cf5a:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2cf5c:	8813      	ldrh	r3, [r2, #0]
   2cf5e:	8852      	ldrh	r2, [r2, #2]
   2cf60:	9200      	str	r2, [sp, #0]
   2cf62:	210c      	movs	r1, #12
   2cf64:	220d      	movs	r2, #13
   2cf66:	f7ee faaf 	bl	1b4c8 <att_read_rsp>
}
   2cf6a:	b003      	add	sp, #12
   2cf6c:	f85d fb04 	ldr.w	pc, [sp], #4

0002cf70 <att_read_req>:
{
   2cf70:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2cf72:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2cf74:	2200      	movs	r2, #0
   2cf76:	881b      	ldrh	r3, [r3, #0]
   2cf78:	9200      	str	r2, [sp, #0]
   2cf7a:	210a      	movs	r1, #10
   2cf7c:	220b      	movs	r2, #11
   2cf7e:	f7ee faa3 	bl	1b4c8 <att_read_rsp>
}
   2cf82:	b003      	add	sp, #12
   2cf84:	f85d fb04 	ldr.w	pc, [sp], #4

0002cf88 <att_mtu_req>:
{
   2cf88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cf8c:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2cf8e:	f850 2b34 	ldr.w	r2, [r0], #52
{
   2cf92:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2cf94:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2cf96:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2cf98:	f7ff fc3f 	bl	2c81a <atomic_test_bit>
   2cf9c:	4604      	mov	r4, r0
   2cf9e:	bb60      	cbnz	r0, 2cffa <att_mtu_req+0x72>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2cfa0:	68db      	ldr	r3, [r3, #12]
   2cfa2:	881f      	ldrh	r7, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2cfa4:	2f16      	cmp	r7, #22
   2cfa6:	d92a      	bls.n	2cffe <att_mtu_req+0x76>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2cfa8:	2202      	movs	r2, #2
   2cfaa:	4630      	mov	r0, r6
   2cfac:	f7ee f926 	bl	1b1fc <bt_att_create_pdu>
	if (!pdu) {
   2cfb0:	4680      	mov	r8, r0
   2cfb2:	b330      	cbz	r0, 2d002 <att_mtu_req+0x7a>
	return net_buf_simple_add(&buf->b, len);
   2cfb4:	2102      	movs	r1, #2
   2cfb6:	300c      	adds	r0, #12
   2cfb8:	f001 fa3b 	bl	2e432 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2cfbc:	2341      	movs	r3, #65	; 0x41
   2cfbe:	7003      	strb	r3, [r0, #0]
   2cfc0:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2cfc2:	4641      	mov	r1, r8
   2cfc4:	4628      	mov	r0, r5
   2cfc6:	f7ff fd49 	bl	2ca5c <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2cfca:	2f41      	cmp	r7, #65	; 0x41
   2cfcc:	bf28      	it	cs
   2cfce:	2741      	movcs	r7, #65	; 0x41
   2cfd0:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2cfd2:	856f      	strh	r7, [r5, #42]	; 0x2a
   2cfd4:	3604      	adds	r6, #4
   2cfd6:	f3bf 8f5b 	dmb	ish
   2cfda:	e856 3f00 	ldrex	r3, [r6]
   2cfde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   2cfe2:	e846 3200 	strex	r2, r3, [r6]
   2cfe6:	2a00      	cmp	r2, #0
   2cfe8:	d1f7      	bne.n	2cfda <att_mtu_req+0x52>
   2cfea:	f3bf 8f5b 	dmb	ish
	att_chan_mtu_updated(chan);
   2cfee:	4628      	mov	r0, r5
   2cff0:	f7ff fc35 	bl	2c85e <att_chan_mtu_updated>
	return 0;
   2cff4:	4620      	mov	r0, r4
}
   2cff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2cffa:	2006      	movs	r0, #6
   2cffc:	e7fb      	b.n	2cff6 <att_mtu_req+0x6e>
		return BT_ATT_ERR_INVALID_PDU;
   2cffe:	2004      	movs	r0, #4
   2d000:	e7f9      	b.n	2cff6 <att_mtu_req+0x6e>
		return BT_ATT_ERR_UNLIKELY;
   2d002:	200e      	movs	r0, #14
   2d004:	e7f7      	b.n	2cff6 <att_mtu_req+0x6e>

0002d006 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2d006:	8a0a      	ldrh	r2, [r1, #16]
   2d008:	68c9      	ldr	r1, [r1, #12]
   2d00a:	2300      	movs	r3, #0
   2d00c:	f7ee bc08 	b.w	1b820 <att_handle_rsp>

0002d010 <att_handle_find_type_rsp>:
static uint8_t att_handle_find_type_rsp(struct bt_att_chan *chan,
   2d010:	f7ff bff9 	b.w	2d006 <att_handle_find_info_rsp>

0002d014 <att_handle_read_type_rsp>:
static uint8_t att_handle_read_type_rsp(struct bt_att_chan *chan,
   2d014:	f7ff bff7 	b.w	2d006 <att_handle_find_info_rsp>

0002d018 <att_handle_read_rsp>:
static uint8_t att_handle_read_rsp(struct bt_att_chan *chan,
   2d018:	f7ff bff5 	b.w	2d006 <att_handle_find_info_rsp>

0002d01c <att_handle_read_blob_rsp>:
static uint8_t att_handle_read_blob_rsp(struct bt_att_chan *chan,
   2d01c:	f7ff bff3 	b.w	2d006 <att_handle_find_info_rsp>

0002d020 <att_handle_read_mult_rsp>:
static uint8_t att_handle_read_mult_rsp(struct bt_att_chan *chan,
   2d020:	f7ff bff1 	b.w	2d006 <att_handle_find_info_rsp>

0002d024 <att_handle_read_mult_vl_rsp>:
static uint8_t att_handle_read_mult_vl_rsp(struct bt_att_chan *chan,
   2d024:	f7ff bfef 	b.w	2d006 <att_handle_find_info_rsp>

0002d028 <att_handle_read_group_rsp>:
static uint8_t att_handle_read_group_rsp(struct bt_att_chan *chan,
   2d028:	f7ff bfed 	b.w	2d006 <att_handle_find_info_rsp>

0002d02c <att_handle_write_rsp>:
static uint8_t att_handle_write_rsp(struct bt_att_chan *chan,
   2d02c:	f7ff bfeb 	b.w	2d006 <att_handle_find_info_rsp>

0002d030 <att_handle_prepare_write_rsp>:
static uint8_t att_handle_prepare_write_rsp(struct bt_att_chan *chan,
   2d030:	f7ff bfe9 	b.w	2d006 <att_handle_find_info_rsp>

0002d034 <att_handle_exec_write_rsp>:
static uint8_t att_handle_exec_write_rsp(struct bt_att_chan *chan,
   2d034:	f7ff bfe7 	b.w	2d006 <att_handle_find_info_rsp>

0002d038 <att_confirm>:
static uint8_t att_confirm(struct bt_att_chan *chan, struct net_buf *buf)
   2d038:	f7ff bfe5 	b.w	2d006 <att_handle_find_info_rsp>

0002d03c <att_mtu_rsp>:
{
   2d03c:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   2d03e:	68ce      	ldr	r6, [r1, #12]
	mtu = sys_le16_to_cpu(rsp->mtu);
   2d040:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2d042:	2b16      	cmp	r3, #22
{
   2d044:	4604      	mov	r4, r0
   2d046:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2d048:	d806      	bhi.n	2d058 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   2d04a:	2200      	movs	r2, #0
   2d04c:	2304      	movs	r3, #4
   2d04e:	4611      	mov	r1, r2
}
   2d050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2d054:	f7ee bbe4 	b.w	1b820 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   2d058:	2b41      	cmp	r3, #65	; 0x41
   2d05a:	bf28      	it	cs
   2d05c:	2341      	movcs	r3, #65	; 0x41
   2d05e:	8343      	strh	r3, [r0, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2d060:	8543      	strh	r3, [r0, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2d062:	f7ff fbfc 	bl	2c85e <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2d066:	8a2a      	ldrh	r2, [r5, #16]
   2d068:	2300      	movs	r3, #0
   2d06a:	4631      	mov	r1, r6
   2d06c:	4620      	mov	r0, r4
   2d06e:	e7ef      	b.n	2d050 <att_mtu_rsp+0x14>

0002d070 <bt_att_encrypt_change>:
{
   2d070:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2d072:	4606      	mov	r6, r0
	if (!att_chan->att) {
   2d074:	f850 3c04 	ldr.w	r3, [r0, #-4]
	struct bt_conn *conn = le_chan->chan.conn;
   2d078:	f856 5904 	ldr.w	r5, [r6], #-4
{
   2d07c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   2d07e:	2b00      	cmp	r3, #0
   2d080:	d036      	beq.n	2d0f0 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   2d082:	b139      	cbz	r1, 2d094 <bt_att_encrypt_change+0x24>
		if (att_chan->req && att_chan->req->retrying) {
   2d084:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2d086:	2b00      	cmp	r3, #0
   2d088:	d032      	beq.n	2d0f0 <bt_att_encrypt_change+0x80>
   2d08a:	7c1b      	ldrb	r3, [r3, #16]
   2d08c:	07da      	lsls	r2, r3, #31
   2d08e:	d52f      	bpl.n	2d0f0 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   2d090:	2305      	movs	r3, #5
   2d092:	e020      	b.n	2d0d6 <bt_att_encrypt_change+0x66>
	bt_gatt_encrypt_change(conn);
   2d094:	4628      	mov	r0, r5
   2d096:	f7f0 ff95 	bl	1dfc4 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2d09a:	7a6b      	ldrb	r3, [r5, #9]
   2d09c:	2b01      	cmp	r3, #1
   2d09e:	d027      	beq.n	2d0f0 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2d0a0:	6b65      	ldr	r5, [r4, #52]	; 0x34
   2d0a2:	b32d      	cbz	r5, 2d0f0 <bt_att_encrypt_change+0x80>
   2d0a4:	7c2b      	ldrb	r3, [r5, #16]
   2d0a6:	07db      	lsls	r3, r3, #31
   2d0a8:	d522      	bpl.n	2d0f0 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   2d0aa:	68eb      	ldr	r3, [r5, #12]
   2d0ac:	2b00      	cmp	r3, #0
   2d0ae:	d0ef      	beq.n	2d090 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2d0b0:	696a      	ldr	r2, [r5, #20]
   2d0b2:	7c69      	ldrb	r1, [r5, #17]
   2d0b4:	4630      	mov	r0, r6
   2d0b6:	f7ed feb5 	bl	1ae24 <bt_att_chan_create_pdu>
	if (!buf) {
   2d0ba:	4604      	mov	r4, r0
   2d0bc:	b150      	cbz	r0, 2d0d4 <bt_att_encrypt_change+0x64>
	if (req->encode(buf, req->len, req->user_data)) {
   2d0be:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   2d0c2:	68eb      	ldr	r3, [r5, #12]
   2d0c4:	4798      	blx	r3
   2d0c6:	b168      	cbz	r0, 2d0e4 <bt_att_encrypt_change+0x74>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2d0c8:	69a0      	ldr	r0, [r4, #24]
   2d0ca:	f7ed fbad 	bl	1a828 <tx_meta_data_free>
		net_buf_unref(buf);
   2d0ce:	4620      	mov	r0, r4
   2d0d0:	f7f3 fca6 	bl	20a20 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2d0d4:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   2d0d6:	2200      	movs	r2, #0
   2d0d8:	4630      	mov	r0, r6
   2d0da:	4611      	mov	r1, r2
}
   2d0dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2d0e0:	f7ee bb9e 	b.w	1b820 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   2d0e4:	4621      	mov	r1, r4
   2d0e6:	4630      	mov	r0, r6
   2d0e8:	f7ed fc72 	bl	1a9d0 <chan_send>
   2d0ec:	2800      	cmp	r0, #0
   2d0ee:	d1eb      	bne.n	2d0c8 <bt_att_encrypt_change+0x58>
}
   2d0f0:	bd70      	pop	{r4, r5, r6, pc}

0002d0f2 <bt_att_send>:
{
   2d0f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d0f4:	460d      	mov	r5, r1
	att = att_get(conn);
   2d0f6:	f7ed fcf7 	bl	1aae8 <att_get>
	if (!att) {
   2d0fa:	4604      	mov	r4, r0
   2d0fc:	b940      	cbnz	r0, 2d110 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2d0fe:	69a8      	ldr	r0, [r5, #24]
   2d100:	f7ed fb92 	bl	1a828 <tx_meta_data_free>
		net_buf_unref(buf);
   2d104:	4628      	mov	r0, r5
   2d106:	f7f3 fc8b 	bl	20a20 <net_buf_unref>
		return -ENOTCONN;
   2d10a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2d10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   2d110:	f100 060c 	add.w	r6, r0, #12
   2d114:	4629      	mov	r1, r5
   2d116:	4630      	mov	r0, r6
   2d118:	f001 f959 	bl	2e3ce <net_buf_put>
	return list->head;
   2d11c:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d11e:	b14d      	cbz	r5, 2d134 <bt_att_send+0x42>
	return node->next;
   2d120:	f855 4988 	ldr.w	r4, [r5], #-136
   2d124:	b104      	cbz	r4, 2d128 <bt_att_send+0x36>
   2d126:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   2d128:	4631      	mov	r1, r6
   2d12a:	4628      	mov	r0, r5
   2d12c:	f7ff fc7d 	bl	2ca2a <process_queue>
		if (!err) {
   2d130:	4603      	mov	r3, r0
   2d132:	b980      	cbnz	r0, 2d156 <bt_att_send+0x64>
	return 0;
   2d134:	2000      	movs	r0, #0
   2d136:	e7ea      	b.n	2d10e <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2d138:	2103      	movs	r1, #3
   2d13a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   2d13e:	f7ff fb6c 	bl	2c81a <atomic_test_bit>
   2d142:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2d144:	f105 0034 	add.w	r0, r5, #52	; 0x34
   2d148:	f7ff fb67 	bl	2c81a <atomic_test_bit>
		if (err == -ENOENT && prev &&
   2d14c:	4287      	cmp	r7, r0
   2d14e:	f06f 0301 	mvn.w	r3, #1
   2d152:	d107      	bne.n	2d164 <bt_att_send+0x72>
   2d154:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d156:	2c00      	cmp	r4, #0
   2d158:	d0ec      	beq.n	2d134 <bt_att_send+0x42>
   2d15a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   2d15e:	b922      	cbnz	r2, 2d16a <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   2d160:	3302      	adds	r3, #2
   2d162:	d0e9      	beq.n	2d138 <bt_att_send+0x46>
{
   2d164:	4625      	mov	r5, r4
   2d166:	4614      	mov	r4, r2
   2d168:	e7de      	b.n	2d128 <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2d16a:	3a88      	subs	r2, #136	; 0x88
   2d16c:	e7f8      	b.n	2d160 <bt_att_send+0x6e>

0002d16e <bt_att_req_send>:
{
   2d16e:	b510      	push	{r4, lr}
   2d170:	460c      	mov	r4, r1
	att = att_get(conn);
   2d172:	f7ed fcb9 	bl	1aae8 <att_get>
	if (!att) {
   2d176:	b160      	cbz	r0, 2d192 <bt_att_req_send+0x24>
	parent->next = child;
   2d178:	2300      	movs	r3, #0
   2d17a:	6023      	str	r3, [r4, #0]
	return list->tail;
   2d17c:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2d17e:	b92b      	cbnz	r3, 2d18c <bt_att_req_send+0x1e>
	list->head = node;
   2d180:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   2d184:	f7ff fdc6 	bl	2cd14 <att_req_send_process>
	return 0;
   2d188:	2000      	movs	r0, #0
}
   2d18a:	bd10      	pop	{r4, pc}
	parent->next = child;
   2d18c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2d18e:	6084      	str	r4, [r0, #8]
}
   2d190:	e7f8      	b.n	2d184 <bt_att_req_send+0x16>
		return -ENOTCONN;
   2d192:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2d196:	e7f8      	b.n	2d18a <bt_att_req_send+0x1c>

0002d198 <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   2d198:	b510      	push	{r4, lr}
   2d19a:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   2d19c:	f7ed fca4 	bl	1aae8 <att_get>
	if (!att) {
   2d1a0:	b198      	cbz	r0, 2d1ca <bt_att_find_req_by_user_data+0x32>
	return list->head;
   2d1a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2d1a4:	b14b      	cbz	r3, 2d1ba <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   2d1a6:	f853 2c50 	ldr.w	r2, [r3, #-80]
   2d1aa:	6991      	ldr	r1, [r2, #24]
   2d1ac:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2d1ae:	f1a3 0388 	sub.w	r3, r3, #136	; 0x88
		if (chan->req->user_data == user_data) {
   2d1b2:	d009      	beq.n	2d1c8 <bt_att_find_req_by_user_data+0x30>
	return node->next;
   2d1b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   2d1b8:	e7f4      	b.n	2d1a4 <bt_att_find_req_by_user_data+0xc>
	return list->head;
   2d1ba:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   2d1bc:	b128      	cbz	r0, 2d1ca <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   2d1be:	6983      	ldr	r3, [r0, #24]
   2d1c0:	42a3      	cmp	r3, r4
   2d1c2:	d002      	beq.n	2d1ca <bt_att_find_req_by_user_data+0x32>
	return node->next;
   2d1c4:	6800      	ldr	r0, [r0, #0]
   2d1c6:	e7f9      	b.n	2d1bc <bt_att_find_req_by_user_data+0x24>
		if (chan->req->user_data == user_data) {
   2d1c8:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   2d1ca:	bd10      	pop	{r4, pc}

0002d1cc <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2d1cc:	2001      	movs	r0, #1
   2d1ce:	4770      	bx	lr

0002d1d0 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2d1d0:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   2d1d2:	f7ed fc89 	bl	1aae8 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2d1d6:	b150      	cbz	r0, 2d1ee <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   2d1d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2d1da:	b144      	cbz	r4, 2d1ee <bt_att_clear_out_of_sync_sent+0x1e>
   2d1dc:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   2d1de:	f104 0034 	add.w	r0, r4, #52	; 0x34
   2d1e2:	2105      	movs	r1, #5
   2d1e4:	f7ff fcec 	bl	2cbc0 <atomic_clear_bit>
	return node->next;
   2d1e8:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   2d1ec:	e7f5      	b.n	2d1da <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   2d1ee:	bd10      	pop	{r4, pc}

0002d1f0 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2d1f0:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2d1f2:	2104      	movs	r1, #4
   2d1f4:	f7ff fae2 	bl	2c7bc <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2d1f8:	b128      	cbz	r0, 2d206 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2d1fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2d1fe:	2105      	movs	r1, #5
   2d200:	3030      	adds	r0, #48	; 0x30
   2d202:	f7ff bb0a 	b.w	2c81a <atomic_test_bit>
}
   2d206:	bd08      	pop	{r3, pc}

0002d208 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2d208:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   2d20a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2d20e:	2201      	movs	r2, #1
   2d210:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   2d212:	7403      	strb	r3, [r0, #16]
}
   2d214:	4770      	bx	lr

0002d216 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2d216:	6010      	str	r0, [r2, #0]
}
   2d218:	2000      	movs	r0, #0
   2d21a:	4770      	bx	lr

0002d21c <gatt_ccc_changed>:
{
   2d21c:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2d21e:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2d220:	895a      	ldrh	r2, [r3, #10]
   2d222:	428a      	cmp	r2, r1
   2d224:	d003      	beq.n	2d22e <gatt_ccc_changed+0x12>
		ccc->value = value;
   2d226:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2d228:	68db      	ldr	r3, [r3, #12]
   2d22a:	b103      	cbz	r3, 2d22e <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2d22c:	4718      	bx	r3
}
   2d22e:	4770      	bx	lr

0002d230 <gatt_indicate_rsp>:
{
   2d230:	b510      	push	{r4, lr}
   2d232:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2d234:	68a3      	ldr	r3, [r4, #8]
{
   2d236:	460a      	mov	r2, r1
	if (params->func) {
   2d238:	b10b      	cbz	r3, 2d23e <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2d23a:	4621      	mov	r1, r4
   2d23c:	4798      	blx	r3
	params->_ref--;
   2d23e:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2d240:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2d242:	3b01      	subs	r3, #1
   2d244:	b2db      	uxtb	r3, r3
   2d246:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2d248:	b122      	cbz	r2, 2d254 <gatt_indicate_rsp+0x24>
   2d24a:	b91b      	cbnz	r3, 2d254 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2d24c:	4620      	mov	r0, r4
}
   2d24e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2d252:	4710      	bx	r2
}
   2d254:	bd10      	pop	{r4, pc}

0002d256 <match_uuid>:
	data->attr = attr;
   2d256:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2d258:	8091      	strh	r1, [r2, #4]
}
   2d25a:	2000      	movs	r0, #0
   2d25c:	4770      	bx	lr

0002d25e <ccc_set_cb>:
}
   2d25e:	2000      	movs	r0, #0
   2d260:	4770      	bx	lr

0002d262 <gen_hash_m>:
{
   2d262:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2d264:	6807      	ldr	r7, [r0, #0]
   2d266:	783d      	ldrb	r5, [r7, #0]
{
   2d268:	b089      	sub	sp, #36	; 0x24
   2d26a:	4606      	mov	r6, r0
   2d26c:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2d26e:	b9dd      	cbnz	r5, 2d2a8 <gen_hash_m+0x46>
	switch (u16->val) {
   2d270:	887b      	ldrh	r3, [r7, #2]
   2d272:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2d276:	d004      	beq.n	2d282 <gen_hash_m+0x20>
   2d278:	d810      	bhi.n	2d29c <gen_hash_m+0x3a>
   2d27a:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2d27e:	2b03      	cmp	r3, #3
   2d280:	d812      	bhi.n	2d2a8 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   2d282:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d286:	2202      	movs	r2, #2
   2d288:	f10d 010a 	add.w	r1, sp, #10
   2d28c:	4620      	mov	r0, r4
   2d28e:	f7fe fb5a 	bl	2b946 <tc_cmac_update>
   2d292:	b968      	cbnz	r0, 2d2b0 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   2d294:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   2d298:	65a2      	str	r2, [r4, #88]	; 0x58
   2d29a:	e006      	b.n	2d2aa <gen_hash_m+0x48>
	switch (u16->val) {
   2d29c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2d2a0:	33ff      	adds	r3, #255	; 0xff
   2d2a2:	b29b      	uxth	r3, r3
   2d2a4:	2b04      	cmp	r3, #4
   2d2a6:	d91e      	bls.n	2d2e6 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2d2a8:	2501      	movs	r5, #1
}
   2d2aa:	4628      	mov	r0, r5
   2d2ac:	b009      	add	sp, #36	; 0x24
   2d2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   2d2b0:	887b      	ldrh	r3, [r7, #2]
   2d2b2:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d2b6:	2202      	movs	r2, #2
   2d2b8:	f10d 010a 	add.w	r1, sp, #10
   2d2bc:	4620      	mov	r0, r4
   2d2be:	f7fe fb42 	bl	2b946 <tc_cmac_update>
   2d2c2:	2800      	cmp	r0, #0
   2d2c4:	d0e6      	beq.n	2d294 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2d2c6:	2000      	movs	r0, #0
   2d2c8:	9000      	str	r0, [sp, #0]
   2d2ca:	aa03      	add	r2, sp, #12
   2d2cc:	6877      	ldr	r7, [r6, #4]
   2d2ce:	2313      	movs	r3, #19
   2d2d0:	4631      	mov	r1, r6
   2d2d2:	47b8      	blx	r7
		if (len < 0) {
   2d2d4:	1e02      	subs	r2, r0, #0
   2d2d6:	dbdf      	blt.n	2d298 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2d2d8:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d2da:	4620      	mov	r0, r4
   2d2dc:	f7fe fb33 	bl	2b946 <tc_cmac_update>
   2d2e0:	2800      	cmp	r0, #0
   2d2e2:	d1e1      	bne.n	2d2a8 <gen_hash_m+0x46>
   2d2e4:	e7d6      	b.n	2d294 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2d2e6:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d2ea:	2202      	movs	r2, #2
   2d2ec:	f10d 010a 	add.w	r1, sp, #10
   2d2f0:	4620      	mov	r0, r4
   2d2f2:	f7fe fb28 	bl	2b946 <tc_cmac_update>
   2d2f6:	2800      	cmp	r0, #0
   2d2f8:	d0cc      	beq.n	2d294 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2d2fa:	887b      	ldrh	r3, [r7, #2]
   2d2fc:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d300:	2202      	movs	r2, #2
   2d302:	f10d 010a 	add.w	r1, sp, #10
   2d306:	e7e8      	b.n	2d2da <gen_hash_m+0x78>

0002d308 <bt_addr_le_eq>:
{
   2d308:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2d30a:	2207      	movs	r2, #7
   2d30c:	f7fe fca1 	bl	2bc52 <memcmp>
}
   2d310:	fab0 f080 	clz	r0, r0
   2d314:	0940      	lsrs	r0, r0, #5
   2d316:	bd08      	pop	{r3, pc}

0002d318 <ccc_find_cfg>:
{
   2d318:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2d31a:	7803      	ldrb	r3, [r0, #0]
   2d31c:	4293      	cmp	r3, r2
{
   2d31e:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2d320:	d105      	bne.n	2d32e <ccc_find_cfg+0x16>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   2d322:	3001      	adds	r0, #1
   2d324:	f7ff fff0 	bl	2d308 <bt_addr_le_eq>
		if (id == ccc->cfg[i].id &&
   2d328:	b108      	cbz	r0, 2d32e <ccc_find_cfg+0x16>
			return &ccc->cfg[i];
   2d32a:	4620      	mov	r0, r4
}
   2d32c:	bd10      	pop	{r4, pc}
	return NULL;
   2d32e:	2000      	movs	r0, #0
   2d330:	e7fc      	b.n	2d32c <ccc_find_cfg+0x14>

0002d332 <atomic_or>:
{
   2d332:	b510      	push	{r4, lr}
   2d334:	4603      	mov	r3, r0
}
   2d336:	f3bf 8f5b 	dmb	ish
   2d33a:	e853 0f00 	ldrex	r0, [r3]
   2d33e:	ea40 0201 	orr.w	r2, r0, r1
   2d342:	e843 2400 	strex	r4, r2, [r3]
   2d346:	2c00      	cmp	r4, #0
   2d348:	d1f7      	bne.n	2d33a <atomic_or+0x8>
   2d34a:	f3bf 8f5b 	dmb	ish
   2d34e:	bd10      	pop	{r4, pc}

0002d350 <atomic_and>:
{
   2d350:	b510      	push	{r4, lr}
   2d352:	4603      	mov	r3, r0
}
   2d354:	f3bf 8f5b 	dmb	ish
   2d358:	e853 0f00 	ldrex	r0, [r3]
   2d35c:	ea00 0201 	and.w	r2, r0, r1
   2d360:	e843 2400 	strex	r4, r2, [r3]
   2d364:	2c00      	cmp	r4, #0
   2d366:	d1f7      	bne.n	2d358 <atomic_and+0x8>
   2d368:	f3bf 8f5b 	dmb	ish
   2d36c:	bd10      	pop	{r4, pc}

0002d36e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2d36e:	2207      	movs	r2, #7
   2d370:	f7fe bc96 	b.w	2bca0 <memcpy>

0002d374 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d374:	f3bf 8f5b 	dmb	ish
   2d378:	6800      	ldr	r0, [r0, #0]
   2d37a:	f3bf 8f5b 	dmb	ish
}
   2d37e:	4770      	bx	lr

0002d380 <read_included_uuid_encode>:
{
   2d380:	b510      	push	{r4, lr}
   2d382:	2102      	movs	r1, #2
   2d384:	300c      	adds	r0, #12
   2d386:	4614      	mov	r4, r2
   2d388:	f001 f853 	bl	2e432 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   2d38c:	8963      	ldrh	r3, [r4, #10]
   2d38e:	8003      	strh	r3, [r0, #0]
}
   2d390:	2000      	movs	r0, #0
   2d392:	bd10      	pop	{r4, pc}

0002d394 <gatt_find_info_encode>:
{
   2d394:	b510      	push	{r4, lr}
   2d396:	2104      	movs	r1, #4
   2d398:	300c      	adds	r0, #12
   2d39a:	4614      	mov	r4, r2
   2d39c:	f001 f849 	bl	2e432 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2d3a0:	8923      	ldrh	r3, [r4, #8]
   2d3a2:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2d3a4:	89e3      	ldrh	r3, [r4, #14]
   2d3a6:	8043      	strh	r3, [r0, #2]
}
   2d3a8:	2000      	movs	r0, #0
   2d3aa:	bd10      	pop	{r4, pc}

0002d3ac <gatt_read_group_encode>:
{
   2d3ac:	b538      	push	{r3, r4, r5, lr}
   2d3ae:	f100 040c 	add.w	r4, r0, #12
   2d3b2:	2104      	movs	r1, #4
   2d3b4:	4620      	mov	r0, r4
   2d3b6:	4615      	mov	r5, r2
   2d3b8:	f001 f83b 	bl	2e432 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2d3bc:	892b      	ldrh	r3, [r5, #8]
   2d3be:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2d3c0:	89eb      	ldrh	r3, [r5, #14]
   2d3c2:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2d3c4:	7c2b      	ldrb	r3, [r5, #16]
   2d3c6:	b933      	cbnz	r3, 2d3d6 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   2d3c8:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   2d3cc:	4620      	mov	r0, r4
   2d3ce:	f001 f847 	bl	2e460 <net_buf_simple_add_le16>
}
   2d3d2:	2000      	movs	r0, #0
   2d3d4:	bd38      	pop	{r3, r4, r5, pc}
   2d3d6:	f642 0101 	movw	r1, #10241	; 0x2801
   2d3da:	e7f7      	b.n	2d3cc <gatt_read_group_encode+0x20>

0002d3dc <gatt_read_type_encode>:
{
   2d3dc:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2d3de:	f100 040c 	add.w	r4, r0, #12
   2d3e2:	2104      	movs	r1, #4
   2d3e4:	4620      	mov	r0, r4
   2d3e6:	4615      	mov	r5, r2
   2d3e8:	f001 f823 	bl	2e432 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2d3ec:	892b      	ldrh	r3, [r5, #8]
   2d3ee:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2d3f0:	89eb      	ldrh	r3, [r5, #14]
   2d3f2:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   2d3f4:	7c2b      	ldrb	r3, [r5, #16]
   2d3f6:	2b02      	cmp	r3, #2
   2d3f8:	d004      	beq.n	2d404 <gatt_read_type_encode+0x28>
   2d3fa:	2b03      	cmp	r3, #3
   2d3fc:	d009      	beq.n	2d412 <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   2d3fe:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2d400:	8859      	ldrh	r1, [r3, #2]
   2d402:	e001      	b.n	2d408 <gatt_read_type_encode+0x2c>
   2d404:	f642 0102 	movw	r1, #10242	; 0x2802
   2d408:	4620      	mov	r0, r4
   2d40a:	f001 f829 	bl	2e460 <net_buf_simple_add_le16>
}
   2d40e:	2000      	movs	r0, #0
   2d410:	bd38      	pop	{r3, r4, r5, pc}
   2d412:	f642 0103 	movw	r1, #10243	; 0x2803
   2d416:	e7f7      	b.n	2d408 <gatt_read_type_encode+0x2c>

0002d418 <z_log_msg_static_create.constprop.0>:
   2d418:	2300      	movs	r3, #0
   2d41a:	f7e6 be09 	b.w	14030 <z_impl_z_log_msg_static_create>

0002d41e <gatt_find_type_encode>:
{
   2d41e:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2d420:	f100 050c 	add.w	r5, r0, #12
   2d424:	2106      	movs	r1, #6
   2d426:	4628      	mov	r0, r5
   2d428:	4614      	mov	r4, r2
   2d42a:	f001 f802 	bl	2e432 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2d42e:	8923      	ldrh	r3, [r4, #8]
   2d430:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2d432:	89e3      	ldrh	r3, [r4, #14]
   2d434:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2d436:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_PRIMARY_VAL;
   2d438:	2b00      	cmp	r3, #0
   2d43a:	f642 0301 	movw	r3, #10241	; 0x2801
   2d43e:	bf08      	it	eq
   2d440:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   2d444:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   2d446:	6821      	ldr	r1, [r4, #0]
   2d448:	780b      	ldrb	r3, [r1, #0]
   2d44a:	b11b      	cbz	r3, 2d454 <gatt_find_type_encode+0x36>
   2d44c:	2b02      	cmp	r3, #2
   2d44e:	d006      	beq.n	2d45e <gatt_find_type_encode+0x40>
}
   2d450:	2000      	movs	r0, #0
   2d452:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   2d454:	8849      	ldrh	r1, [r1, #2]
   2d456:	4628      	mov	r0, r5
   2d458:	f001 f802 	bl	2e460 <net_buf_simple_add_le16>
}
   2d45c:	e7f8      	b.n	2d450 <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2d45e:	2210      	movs	r2, #16
   2d460:	3101      	adds	r1, #1
   2d462:	4628      	mov	r0, r5
   2d464:	f000 ffeb 	bl	2e43e <net_buf_simple_add_mem>
   2d468:	e7f2      	b.n	2d450 <gatt_find_type_encode+0x32>

0002d46a <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2d46a:	2a02      	cmp	r2, #2
{
   2d46c:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2d46e:	d108      	bne.n	2d482 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2d470:	2300      	movs	r3, #0
   2d472:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2d476:	461a      	mov	r2, r3
   2d478:	7a00      	ldrb	r0, [r0, #8]
   2d47a:	f7ee fde5 	bl	1c048 <sc_save>
}
   2d47e:	2002      	movs	r0, #2
   2d480:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2d482:	f7ee ff37 	bl	1c2f4 <sc_clear>
   2d486:	e7fa      	b.n	2d47e <sc_ccc_cfg_write+0x14>

0002d488 <read_appearance>:
{
   2d488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d48a:	4615      	mov	r5, r2
   2d48c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2d490:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2d492:	f7fe fe27 	bl	2c0e4 <bt_get_appearance>
	if (offset > value_len) {
   2d496:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2d498:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2d49c:	d80e      	bhi.n	2d4bc <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   2d49e:	f1c6 0402 	rsb	r4, r6, #2
   2d4a2:	42bc      	cmp	r4, r7
   2d4a4:	bfa8      	it	ge
   2d4a6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2d4a8:	f10d 0306 	add.w	r3, sp, #6
   2d4ac:	4622      	mov	r2, r4
   2d4ae:	1999      	adds	r1, r3, r6
   2d4b0:	4628      	mov	r0, r5
   2d4b2:	f7fe fbf5 	bl	2bca0 <memcpy>
}
   2d4b6:	4620      	mov	r0, r4
   2d4b8:	b003      	add	sp, #12
   2d4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d4bc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2d4c0:	e7f9      	b.n	2d4b6 <read_appearance+0x2e>

0002d4c2 <read_name>:
{
   2d4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d4c6:	4698      	mov	r8, r3
   2d4c8:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2d4cc:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2d4ce:	f7ea ff8b 	bl	183e8 <bt_get_name>
   2d4d2:	4607      	mov	r7, r0
				 strlen(name));
   2d4d4:	f7fe fb8d 	bl	2bbf2 <strlen>
	if (offset > value_len) {
   2d4d8:	b283      	uxth	r3, r0
   2d4da:	42b3      	cmp	r3, r6
   2d4dc:	d30c      	bcc.n	2d4f8 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2d4de:	1b9c      	subs	r4, r3, r6
   2d4e0:	4544      	cmp	r4, r8
   2d4e2:	bfa8      	it	ge
   2d4e4:	4644      	movge	r4, r8
   2d4e6:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2d4e8:	4622      	mov	r2, r4
   2d4ea:	19b9      	adds	r1, r7, r6
   2d4ec:	4628      	mov	r0, r5
   2d4ee:	f7fe fbd7 	bl	2bca0 <memcpy>
}
   2d4f2:	4620      	mov	r0, r4
   2d4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d4f8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2d4fc:	e7f9      	b.n	2d4f2 <read_name+0x30>

0002d4fe <cf_read>:
{
   2d4fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d500:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2d502:	2300      	movs	r3, #0
{
   2d504:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2d508:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2d50c:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2d50e:	f7ee fb8d 	bl	1bc2c <find_cf_cfg>
	if (cfg) {
   2d512:	b128      	cbz	r0, 2d520 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2d514:	f100 0108 	add.w	r1, r0, #8
   2d518:	2201      	movs	r2, #1
   2d51a:	a801      	add	r0, sp, #4
   2d51c:	f7fe fbc0 	bl	2bca0 <memcpy>
	if (offset > value_len) {
   2d520:	2e01      	cmp	r6, #1
   2d522:	d80d      	bhi.n	2d540 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2d524:	f1c6 0401 	rsb	r4, r6, #1
   2d528:	42bc      	cmp	r4, r7
   2d52a:	bfa8      	it	ge
   2d52c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2d52e:	ab01      	add	r3, sp, #4
   2d530:	4622      	mov	r2, r4
   2d532:	1999      	adds	r1, r3, r6
   2d534:	4628      	mov	r0, r5
   2d536:	f7fe fbb3 	bl	2bca0 <memcpy>
}
   2d53a:	4620      	mov	r0, r4
   2d53c:	b003      	add	sp, #12
   2d53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d540:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2d544:	e7f9      	b.n	2d53a <cf_read+0x3c>

0002d546 <bt_gatt_attr_read_service>:
{
   2d546:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   2d548:	68c9      	ldr	r1, [r1, #12]
{
   2d54a:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2d54c:	780a      	ldrb	r2, [r1, #0]
{
   2d54e:	461c      	mov	r4, r3
   2d550:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   2d554:	b992      	cbnz	r2, 2d57c <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2d556:	884a      	ldrh	r2, [r1, #2]
   2d558:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2d55c:	2b02      	cmp	r3, #2
   2d55e:	d818      	bhi.n	2d592 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   2d560:	f1c3 0202 	rsb	r2, r3, #2
   2d564:	4294      	cmp	r4, r2
   2d566:	bfa8      	it	ge
   2d568:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2d56a:	4622      	mov	r2, r4
   2d56c:	f10d 0106 	add.w	r1, sp, #6
   2d570:	4419      	add	r1, r3
   2d572:	f7fe fb95 	bl	2bca0 <memcpy>
}
   2d576:	4620      	mov	r0, r4
   2d578:	b002      	add	sp, #8
   2d57a:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   2d57c:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   2d57e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2d582:	d806      	bhi.n	2d592 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   2d584:	f1c3 0210 	rsb	r2, r3, #16
   2d588:	4294      	cmp	r4, r2
   2d58a:	bfa8      	it	ge
   2d58c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2d58e:	4622      	mov	r2, r4
   2d590:	e7ee      	b.n	2d570 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d592:	f06f 0406 	mvn.w	r4, #6
   2d596:	e7ee      	b.n	2d576 <bt_gatt_attr_read_service+0x30>

0002d598 <bt_gatt_attr_read_ccc>:
{
   2d598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2d59a:	68c9      	ldr	r1, [r1, #12]
{
   2d59c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2d5a0:	4615      	mov	r5, r2
   2d5a2:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2d5a4:	f7ee fb70 	bl	1bc88 <find_ccc_cfg>
	if (cfg) {
   2d5a8:	b100      	cbz	r0, 2d5ac <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2d5aa:	8900      	ldrh	r0, [r0, #8]
   2d5ac:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2d5b0:	2e02      	cmp	r6, #2
   2d5b2:	d80e      	bhi.n	2d5d2 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   2d5b4:	f1c6 0402 	rsb	r4, r6, #2
   2d5b8:	42bc      	cmp	r4, r7
   2d5ba:	bfa8      	it	ge
   2d5bc:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2d5be:	f10d 0306 	add.w	r3, sp, #6
   2d5c2:	4622      	mov	r2, r4
   2d5c4:	1999      	adds	r1, r3, r6
   2d5c6:	4628      	mov	r0, r5
   2d5c8:	f7fe fb6a 	bl	2bca0 <memcpy>
}
   2d5cc:	4620      	mov	r0, r4
   2d5ce:	b003      	add	sp, #12
   2d5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d5d2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2d5d6:	e7f9      	b.n	2d5cc <bt_gatt_attr_read_ccc+0x34>

0002d5d8 <gatt_req_send.constprop.0>:
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   2d5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d5dc:	4606      	mov	r6, r0
   2d5de:	460d      	mov	r5, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2d5e0:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2d5e4:	2100      	movs	r1, #0
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   2d5e6:	f89d a020 	ldrb.w	sl, [sp, #32]
   2d5ea:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   2d5ee:	4690      	mov	r8, r2
   2d5f0:	461f      	mov	r7, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2d5f2:	f7ee f8db 	bl	1b7ac <bt_att_req_alloc>
	if (!req) {
   2d5f6:	4604      	mov	r4, r0
   2d5f8:	b188      	cbz	r0, 2d61e <gatt_req_send.constprop.0+0x46>
	req->func = func;
   2d5fa:	6045      	str	r5, [r0, #4]
	req->att_op = op;
   2d5fc:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   2d600:	f8c0 9014 	str.w	r9, [r0, #20]
	req->encode = encode;
   2d604:	60c7      	str	r7, [r0, #12]
	req->user_data = params;
   2d606:	f8c0 8018 	str.w	r8, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   2d60a:	464a      	mov	r2, r9
   2d60c:	4651      	mov	r1, sl
   2d60e:	4630      	mov	r0, r6
   2d610:	f7ed fdf4 	bl	1b1fc <bt_att_create_pdu>
   2d614:	4605      	mov	r5, r0
	if (!buf) {
   2d616:	b938      	cbnz	r0, 2d628 <gatt_req_send.constprop.0+0x50>
		bt_att_req_free(req);
   2d618:	4620      	mov	r0, r4
   2d61a:	f7ee f8e9 	bl	1b7f0 <bt_att_req_free>
		return -ENOMEM;
   2d61e:	f06f 050b 	mvn.w	r5, #11
}
   2d622:	4628      	mov	r0, r5
   2d624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_att_set_tx_meta_data(buf, NULL, NULL, chan_opt);
   2d628:	2200      	movs	r2, #0
   2d62a:	4611      	mov	r1, r2
   2d62c:	2301      	movs	r3, #1
   2d62e:	f7ff fdeb 	bl	2d208 <bt_att_set_tx_meta_data>
	req->buf = buf;
   2d632:	60a5      	str	r5, [r4, #8]
	err = encode(buf, len, params);
   2d634:	4628      	mov	r0, r5
   2d636:	4642      	mov	r2, r8
   2d638:	4649      	mov	r1, r9
   2d63a:	47b8      	blx	r7
	if (err) {
   2d63c:	4605      	mov	r5, r0
   2d63e:	b118      	cbz	r0, 2d648 <gatt_req_send.constprop.0+0x70>
		bt_att_req_free(req);
   2d640:	4620      	mov	r0, r4
   2d642:	f7ee f8d5 	bl	1b7f0 <bt_att_req_free>
   2d646:	e7ec      	b.n	2d622 <gatt_req_send.constprop.0+0x4a>
	err = bt_att_req_send(conn, req);
   2d648:	4621      	mov	r1, r4
   2d64a:	4630      	mov	r0, r6
   2d64c:	f7ff fd8f 	bl	2d16e <bt_att_req_send>
	if (err) {
   2d650:	4605      	mov	r5, r0
   2d652:	2800      	cmp	r0, #0
   2d654:	d0e5      	beq.n	2d622 <gatt_req_send.constprop.0+0x4a>
   2d656:	e7f3      	b.n	2d640 <gatt_req_send.constprop.0+0x68>

0002d658 <gatt_write_ccc_buf>:
{
   2d658:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2d65a:	f100 050c 	add.w	r5, r0, #12
   2d65e:	2102      	movs	r1, #2
   2d660:	4628      	mov	r0, r5
   2d662:	4614      	mov	r4, r2
   2d664:	f000 fee5 	bl	2e432 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   2d668:	89e3      	ldrh	r3, [r4, #14]
   2d66a:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2d66c:	8a21      	ldrh	r1, [r4, #16]
   2d66e:	4628      	mov	r0, r5
   2d670:	f000 fef6 	bl	2e460 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d674:	2104      	movs	r1, #4
   2d676:	f104 0014 	add.w	r0, r4, #20
   2d67a:	f7ff fe5a 	bl	2d332 <atomic_or>
}
   2d67e:	2000      	movs	r0, #0
   2d680:	bd38      	pop	{r3, r4, r5, pc}

0002d682 <set_change_aware_no_store>:
{
   2d682:	b508      	push	{r3, lr}
		changed = !atomic_test_and_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2d684:	300c      	adds	r0, #12
	if (aware) {
   2d686:	b129      	cbz	r1, 2d694 <set_change_aware_no_store+0x12>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d688:	2101      	movs	r1, #1
   2d68a:	f7ff fe52 	bl	2d332 <atomic_or>
		changed = !atomic_test_and_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2d68e:	43c0      	mvns	r0, r0
   2d690:	4008      	ands	r0, r1
}
   2d692:	bd08      	pop	{r3, pc}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d694:	f06f 0101 	mvn.w	r1, #1
   2d698:	f7ff fe5a 	bl	2d350 <atomic_and>
	return (old & mask) != 0;
   2d69c:	f000 0001 	and.w	r0, r0, #1
   2d6a0:	e7f7      	b.n	2d692 <set_change_aware_no_store+0x10>

0002d6a2 <set_change_aware>:
{
   2d6a2:	b510      	push	{r4, lr}
   2d6a4:	4604      	mov	r4, r0
	bool changed = set_change_aware_no_store(cfg, aware);
   2d6a6:	f7ff ffec 	bl	2d682 <set_change_aware_no_store>
	if (changed) {
   2d6aa:	b138      	cbz	r0, 2d6bc <set_change_aware+0x1a>
		gatt_delayed_store_enqueue(cfg->id, &cfg->peer, DELAYED_STORE_CF);
   2d6ac:	4621      	mov	r1, r4
   2d6ae:	2201      	movs	r2, #1
}
   2d6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		gatt_delayed_store_enqueue(cfg->id, &cfg->peer, DELAYED_STORE_CF);
   2d6b4:	f811 0b01 	ldrb.w	r0, [r1], #1
   2d6b8:	f7ee bb28 	b.w	1bd0c <gatt_delayed_store_enqueue>
}
   2d6bc:	bd10      	pop	{r4, pc}

0002d6be <sc_restore_rsp>:
{
   2d6be:	b538      	push	{r3, r4, r5, lr}
   2d6c0:	4604      	mov	r4, r0
   2d6c2:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2d6c4:	f7ff fd82 	bl	2d1cc <bt_att_fixed_chan_only>
   2d6c8:	b148      	cbz	r0, 2d6de <sc_restore_rsp+0x20>
		cfg = find_cf_cfg(conn);
   2d6ca:	4620      	mov	r0, r4
   2d6cc:	f7ee faae 	bl	1bc2c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2d6d0:	b128      	cbz	r0, 2d6de <sc_restore_rsp+0x20>
   2d6d2:	7a03      	ldrb	r3, [r0, #8]
   2d6d4:	07db      	lsls	r3, r3, #31
   2d6d6:	d502      	bpl.n	2d6de <sc_restore_rsp+0x20>
			set_change_aware(cfg, true);
   2d6d8:	2101      	movs	r1, #1
   2d6da:	f7ff ffe2 	bl	2d6a2 <set_change_aware>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2d6de:	b985      	cbnz	r5, 2d702 <sc_restore_rsp+0x44>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2d6e0:	7a20      	ldrb	r0, [r4, #8]
   2d6e2:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2d6e6:	f7ee fa15 	bl	1bb14 <find_sc_cfg>
		if (sc_cfg) {
   2d6ea:	4604      	mov	r4, r0
   2d6ec:	b148      	cbz	r0, 2d702 <sc_restore_rsp+0x44>
	memset(&cfg->data, 0, sizeof(cfg->data));
   2d6ee:	4629      	mov	r1, r5
   2d6f0:	2204      	movs	r2, #4
   2d6f2:	3008      	adds	r0, #8
   2d6f4:	f7fe fadf 	bl	2bcb6 <memset>
		sc_store(cfg);
   2d6f8:	4620      	mov	r0, r4
}
   2d6fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   2d6fe:	f7ee bc6b 	b.w	1bfd8 <sc_store>
}
   2d702:	bd38      	pop	{r3, r4, r5, pc}

0002d704 <bt_gatt_attr_value_handle>:
{
   2d704:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2d706:	4604      	mov	r4, r0
   2d708:	b910      	cbnz	r0, 2d710 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2d70a:	2000      	movs	r0, #0
}
   2d70c:	b002      	add	sp, #8
   2d70e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2d710:	2300      	movs	r3, #0
   2d712:	f88d 3004 	strb.w	r3, [sp, #4]
   2d716:	6800      	ldr	r0, [r0, #0]
   2d718:	f642 0303 	movw	r3, #10243	; 0x2803
   2d71c:	a901      	add	r1, sp, #4
   2d71e:	f8ad 3006 	strh.w	r3, [sp, #6]
   2d722:	f7fe fb7c 	bl	2be1e <bt_uuid_cmp>
   2d726:	2800      	cmp	r0, #0
   2d728:	d1ef      	bne.n	2d70a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2d72a:	68e3      	ldr	r3, [r4, #12]
   2d72c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2d72e:	2800      	cmp	r0, #0
   2d730:	d1ec      	bne.n	2d70c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2d732:	4620      	mov	r0, r4
   2d734:	f7ef f95e 	bl	1c9f4 <bt_gatt_attr_get_handle>
   2d738:	3001      	adds	r0, #1
   2d73a:	b280      	uxth	r0, r0
	return handle;
   2d73c:	e7e6      	b.n	2d70c <bt_gatt_attr_value_handle+0x8>

0002d73e <bt_gatt_attr_read_chrc>:
{
   2d73e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2d740:	68cc      	ldr	r4, [r1, #12]
{
   2d742:	b087      	sub	sp, #28
   2d744:	4608      	mov	r0, r1
   2d746:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   2d748:	79a3      	ldrb	r3, [r4, #6]
   2d74a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2d74e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2d752:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2d754:	f7ff ffd6 	bl	2d704 <bt_gatt_attr_value_handle>
   2d758:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2d75c:	6821      	ldr	r1, [r4, #0]
   2d75e:	780b      	ldrb	r3, [r1, #0]
   2d760:	b99b      	cbnz	r3, 2d78a <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2d762:	884b      	ldrh	r3, [r1, #2]
   2d764:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2d768:	2405      	movs	r4, #5
	if (offset > value_len) {
   2d76a:	42b4      	cmp	r4, r6
   2d76c:	d315      	bcc.n	2d79a <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   2d76e:	1ba4      	subs	r4, r4, r6
   2d770:	42bc      	cmp	r4, r7
   2d772:	bfa8      	it	ge
   2d774:	463c      	movge	r4, r7
   2d776:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2d778:	ab01      	add	r3, sp, #4
   2d77a:	4622      	mov	r2, r4
   2d77c:	1999      	adds	r1, r3, r6
   2d77e:	4628      	mov	r0, r5
   2d780:	f7fe fa8e 	bl	2bca0 <memcpy>
}
   2d784:	4620      	mov	r0, r4
   2d786:	b007      	add	sp, #28
   2d788:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2d78a:	2210      	movs	r2, #16
   2d78c:	3101      	adds	r1, #1
   2d78e:	f10d 0007 	add.w	r0, sp, #7
   2d792:	f7fe fa85 	bl	2bca0 <memcpy>
		value_len += 16U;
   2d796:	2413      	movs	r4, #19
   2d798:	e7e7      	b.n	2d76a <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d79a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2d79e:	e7f1      	b.n	2d784 <bt_gatt_attr_read_chrc+0x46>

0002d7a0 <bt_gatt_foreach_attr>:
{
   2d7a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2d7a2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2d7a6:	2300      	movs	r3, #0
   2d7a8:	9300      	str	r3, [sp, #0]
   2d7aa:	461a      	mov	r2, r3
   2d7ac:	f7ef f952 	bl	1ca54 <bt_gatt_foreach_attr_type>
}
   2d7b0:	b005      	add	sp, #20
   2d7b2:	f85d fb04 	ldr.w	pc, [sp], #4

0002d7b6 <db_hash_process>:
	do_db_hash();
   2d7b6:	f7ef ba3d 	b.w	1cc34 <do_db_hash>

0002d7ba <bt_gatt_check_perm>:
{
   2d7ba:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2d7bc:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2d7be:	8a4b      	ldrh	r3, [r1, #18]
{
   2d7c0:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   2d7c2:	d504      	bpl.n	2d7ce <bt_gatt_check_perm+0x14>
   2d7c4:	f013 0f95 	tst.w	r3, #149	; 0x95
   2d7c8:	d02b      	beq.n	2d822 <bt_gatt_check_perm+0x68>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2d7ca:	6848      	ldr	r0, [r1, #4]
   2d7cc:	b348      	cbz	r0, 2d822 <bt_gatt_check_perm+0x68>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2d7ce:	0790      	lsls	r0, r2, #30
   2d7d0:	d504      	bpl.n	2d7dc <bt_gatt_check_perm+0x22>
   2d7d2:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2d7d6:	d026      	beq.n	2d826 <bt_gatt_check_perm+0x6c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2d7d8:	6889      	ldr	r1, [r1, #8]
   2d7da:	b321      	cbz	r1, 2d826 <bt_gatt_check_perm+0x6c>
	mask &= attr->perm;
   2d7dc:	ea02 0403 	and.w	r4, r2, r3
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   2d7e0:	f014 0f3c 	tst.w	r4, #60	; 0x3c
   2d7e4:	d00d      	beq.n	2d802 <bt_gatt_check_perm+0x48>
		if (!conn->encrypt) {
   2d7e6:	7aeb      	ldrb	r3, [r5, #11]
   2d7e8:	b92b      	cbnz	r3, 2d7f6 <bt_gatt_check_perm+0x3c>
			if (bt_conn_ltk_present(conn)) {
   2d7ea:	4628      	mov	r0, r5
   2d7ec:	f7fe fe0e 	bl	2c40c <bt_conn_ltk_present>
   2d7f0:	b9d8      	cbnz	r0, 2d82a <bt_gatt_check_perm+0x70>
				return BT_ATT_ERR_AUTHENTICATION;
   2d7f2:	2005      	movs	r0, #5
}
   2d7f4:	bd38      	pop	{r3, r4, r5, pc}
		if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2d7f6:	f014 0f30 	tst.w	r4, #48	; 0x30
   2d7fa:	d104      	bne.n	2d806 <bt_gatt_check_perm+0x4c>
		if (mask & BT_GATT_PERM_LESC_MASK) {
   2d7fc:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2d800:	d107      	bne.n	2d812 <bt_gatt_check_perm+0x58>
	return 0;
   2d802:	2000      	movs	r0, #0
   2d804:	e7f6      	b.n	2d7f4 <bt_gatt_check_perm+0x3a>
			if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2d806:	4628      	mov	r0, r5
   2d808:	f7fe fe82 	bl	2c510 <bt_conn_get_security>
   2d80c:	2802      	cmp	r0, #2
   2d80e:	d8f5      	bhi.n	2d7fc <bt_gatt_check_perm+0x42>
   2d810:	e7ef      	b.n	2d7f2 <bt_gatt_check_perm+0x38>
			const struct bt_keys *keys = conn->le.keys;
   2d812:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
			if (!keys || (keys->flags & BT_KEYS_SC) == 0) {
   2d816:	2b00      	cmp	r3, #0
   2d818:	d0eb      	beq.n	2d7f2 <bt_gatt_check_perm+0x38>
   2d81a:	7b5b      	ldrb	r3, [r3, #13]
   2d81c:	06db      	lsls	r3, r3, #27
   2d81e:	d5e8      	bpl.n	2d7f2 <bt_gatt_check_perm+0x38>
   2d820:	e7ef      	b.n	2d802 <bt_gatt_check_perm+0x48>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2d822:	2002      	movs	r0, #2
   2d824:	e7e6      	b.n	2d7f4 <bt_gatt_check_perm+0x3a>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2d826:	2003      	movs	r0, #3
   2d828:	e7e4      	b.n	2d7f4 <bt_gatt_check_perm+0x3a>
				return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2d82a:	200f      	movs	r0, #15
   2d82c:	e7e2      	b.n	2d7f4 <bt_gatt_check_perm+0x3a>

0002d82e <bt_gatt_is_subscribed>:
{
   2d82e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2d832:	7b43      	ldrb	r3, [r0, #13]
   2d834:	2b07      	cmp	r3, #7
{
   2d836:	4605      	mov	r5, r0
   2d838:	460c      	mov	r4, r1
   2d83a:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2d83c:	d110      	bne.n	2d860 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   2d83e:	2300      	movs	r3, #0
   2d840:	f88d 300c 	strb.w	r3, [sp, #12]
   2d844:	6820      	ldr	r0, [r4, #0]
   2d846:	f642 0303 	movw	r3, #10243	; 0x2803
   2d84a:	a903      	add	r1, sp, #12
   2d84c:	f8ad 300e 	strh.w	r3, [sp, #14]
   2d850:	f7fe fae5 	bl	2be1e <bt_uuid_cmp>
   2d854:	b960      	cbnz	r0, 2d870 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   2d856:	68e3      	ldr	r3, [r4, #12]
   2d858:	799b      	ldrb	r3, [r3, #6]
   2d85a:	f013 0f30 	tst.w	r3, #48	; 0x30
   2d85e:	d103      	bne.n	2d868 <bt_gatt_is_subscribed+0x3a>
		return false;
   2d860:	2000      	movs	r0, #0
}
   2d862:	b004      	add	sp, #16
   2d864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   2d868:	4620      	mov	r0, r4
   2d86a:	f7ef facb 	bl	1ce04 <bt_gatt_attr_next>
   2d86e:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2d870:	2300      	movs	r3, #0
   2d872:	6820      	ldr	r0, [r4, #0]
   2d874:	f88d 300c 	strb.w	r3, [sp, #12]
   2d878:	a903      	add	r1, sp, #12
   2d87a:	f642 1302 	movw	r3, #10498	; 0x2902
   2d87e:	f8ad 300e 	strh.w	r3, [sp, #14]
   2d882:	f7fe facc 	bl	2be1e <bt_uuid_cmp>
   2d886:	b118      	cbz	r0, 2d890 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   2d888:	4620      	mov	r0, r4
   2d88a:	f7ef fabb 	bl	1ce04 <bt_gatt_attr_next>
   2d88e:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2d890:	2600      	movs	r6, #0
   2d892:	f642 1802 	movw	r8, #10498	; 0x2902
   2d896:	6820      	ldr	r0, [r4, #0]
   2d898:	f88d 6000 	strb.w	r6, [sp]
   2d89c:	4669      	mov	r1, sp
   2d89e:	f8ad 8002 	strh.w	r8, [sp, #2]
   2d8a2:	f7fe fabc 	bl	2be1e <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d8a6:	b9d8      	cbnz	r0, 2d8e0 <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2d8a8:	2300      	movs	r3, #0
   2d8aa:	6820      	ldr	r0, [r4, #0]
   2d8ac:	f88d 300c 	strb.w	r3, [sp, #12]
   2d8b0:	a903      	add	r1, sp, #12
   2d8b2:	f642 1302 	movw	r3, #10498	; 0x2902
   2d8b6:	f8ad 300e 	strh.w	r3, [sp, #14]
   2d8ba:	f7fe fab0 	bl	2be1e <bt_uuid_cmp>
   2d8be:	2800      	cmp	r0, #0
   2d8c0:	d1ce      	bne.n	2d860 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   2d8c2:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2d8c4:	4622      	mov	r2, r4
   2d8c6:	4628      	mov	r0, r5
   2d8c8:	f812 1b01 	ldrb.w	r1, [r2], #1
   2d8cc:	f7fe fe47 	bl	2c55e <bt_conn_is_peer_addr_le>
   2d8d0:	2800      	cmp	r0, #0
   2d8d2:	d0c5      	beq.n	2d860 <bt_gatt_is_subscribed+0x32>
   2d8d4:	8923      	ldrh	r3, [r4, #8]
   2d8d6:	421f      	tst	r7, r3
   2d8d8:	bf14      	ite	ne
   2d8da:	2001      	movne	r0, #1
   2d8dc:	2000      	moveq	r0, #0
   2d8de:	e7c0      	b.n	2d862 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2d8e0:	6820      	ldr	r0, [r4, #0]
   2d8e2:	f88d 6004 	strb.w	r6, [sp, #4]
   2d8e6:	f642 0303 	movw	r3, #10243	; 0x2803
   2d8ea:	a901      	add	r1, sp, #4
   2d8ec:	f8ad 3006 	strh.w	r3, [sp, #6]
   2d8f0:	f7fe fa95 	bl	2be1e <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2d8f4:	2800      	cmp	r0, #0
   2d8f6:	d0d7      	beq.n	2d8a8 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d8f8:	6820      	ldr	r0, [r4, #0]
   2d8fa:	f88d 6008 	strb.w	r6, [sp, #8]
   2d8fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2d902:	a902      	add	r1, sp, #8
   2d904:	f8ad 300a 	strh.w	r3, [sp, #10]
   2d908:	f7fe fa89 	bl	2be1e <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2d90c:	2800      	cmp	r0, #0
   2d90e:	d0cb      	beq.n	2d8a8 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2d910:	6820      	ldr	r0, [r4, #0]
   2d912:	f88d 600c 	strb.w	r6, [sp, #12]
   2d916:	f642 0301 	movw	r3, #10241	; 0x2801
   2d91a:	a903      	add	r1, sp, #12
   2d91c:	f8ad 300e 	strh.w	r3, [sp, #14]
   2d920:	f7fe fa7d 	bl	2be1e <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d924:	2800      	cmp	r0, #0
   2d926:	d0bf      	beq.n	2d8a8 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   2d928:	4620      	mov	r0, r4
   2d92a:	f7ef fa6b 	bl	1ce04 <bt_gatt_attr_next>
		if (!attr) {
   2d92e:	4604      	mov	r4, r0
   2d930:	2800      	cmp	r0, #0
   2d932:	d1b0      	bne.n	2d896 <bt_gatt_is_subscribed+0x68>
   2d934:	e794      	b.n	2d860 <bt_gatt_is_subscribed+0x32>

0002d936 <gatt_discover_next>:
{
   2d936:	b570      	push	{r4, r5, r6, lr}
	if (!last_handle)
   2d938:	460b      	mov	r3, r1
{
   2d93a:	4605      	mov	r5, r0
   2d93c:	4614      	mov	r4, r2
	if (!last_handle)
   2d93e:	b929      	cbnz	r1, 2d94c <gatt_discover_next+0x16>
	if (!bt_gatt_discover(conn, params)) {
   2d940:	4621      	mov	r1, r4
   2d942:	4628      	mov	r0, r5
   2d944:	f7ef fd62 	bl	1d40c <bt_gatt_discover>
   2d948:	b928      	cbnz	r0, 2d956 <gatt_discover_next+0x20>
}
   2d94a:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   2d94c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2d950:	4291      	cmp	r1, r2
   2d952:	d107      	bne.n	2d964 <gatt_discover_next+0x2e>
	params->start_handle = last_handle;
   2d954:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   2d956:	6863      	ldr	r3, [r4, #4]
   2d958:	4622      	mov	r2, r4
   2d95a:	4628      	mov	r0, r5
   2d95c:	2100      	movs	r1, #0
}
   2d95e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   2d962:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   2d964:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   2d966:	3301      	adds	r3, #1
   2d968:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   2d96a:	429a      	cmp	r2, r3
		params->start_handle++;
   2d96c:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   2d96e:	d2e7      	bcs.n	2d940 <gatt_discover_next+0xa>
   2d970:	e7f1      	b.n	2d956 <gatt_discover_next+0x20>

0002d972 <gatt_find_type_rsp>:
{
   2d972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d976:	b089      	sub	sp, #36	; 0x24
   2d978:	4606      	mov	r6, r0
   2d97a:	9f12      	ldr	r7, [sp, #72]	; 0x48
   2d97c:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   2d97e:	b911      	cbnz	r1, 2d986 <gatt_find_type_rsp+0x14>
   2d980:	f013 0803 	ands.w	r8, r3, #3
   2d984:	d007      	beq.n	2d996 <gatt_find_type_rsp+0x24>
	params->func(conn, NULL, params);
   2d986:	687b      	ldr	r3, [r7, #4]
   2d988:	463a      	mov	r2, r7
   2d98a:	2100      	movs	r1, #0
   2d98c:	4630      	mov	r0, r6
}
   2d98e:	b009      	add	sp, #36	; 0x24
   2d990:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   2d994:	4718      	bx	r3
	for (uint8_t i = 0U; i < count; i++) {
   2d996:	f3c3 0387 	ubfx	r3, r3, #2, #8
   2d99a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2d99e:	46c1      	mov	r9, r8
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   2d9a0:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   2d9a4:	42ac      	cmp	r4, r5
   2d9a6:	d107      	bne.n	2d9b8 <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   2d9a8:	463a      	mov	r2, r7
   2d9aa:	4641      	mov	r1, r8
   2d9ac:	4630      	mov	r0, r6
}
   2d9ae:	b009      	add	sp, #36	; 0x24
   2d9b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, end_handle, params);
   2d9b4:	f7ff bfbf 	b.w	2d936 <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2d9b8:	7c3a      	ldrb	r2, [r7, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2d9ba:	8863      	ldrh	r3, [r4, #2]
		value.end_handle = end_handle;
   2d9bc:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   2d9c0:	2a00      	cmp	r2, #0
   2d9c2:	bf14      	ite	ne
   2d9c4:	4652      	movne	r2, sl
   2d9c6:	f44f 5220 	moveq.w	r2, #10240	; 0x2800
   2d9ca:	f8ad 2002 	strh.w	r2, [sp, #2]
		attr = (struct bt_gatt_attr) {
   2d9ce:	2210      	movs	r2, #16
   2d9d0:	2100      	movs	r1, #0
   2d9d2:	eb0d 0002 	add.w	r0, sp, r2
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2d9d6:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   2d9da:	683b      	ldr	r3, [r7, #0]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   2d9dc:	f8b4 b000 	ldrh.w	fp, [r4]
		value.uuid = params->uuid;
   2d9e0:	9301      	str	r3, [sp, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2d9e2:	f88d 9000 	strb.w	r9, [sp]
		attr = (struct bt_gatt_attr) {
   2d9e6:	f7fe f966 	bl	2bcb6 <memset>
   2d9ea:	ab01      	add	r3, sp, #4
   2d9ec:	9306      	str	r3, [sp, #24]
   2d9ee:	f8cd d00c 	str.w	sp, [sp, #12]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2d9f2:	687b      	ldr	r3, [r7, #4]
		attr = (struct bt_gatt_attr) {
   2d9f4:	f8ad b01c 	strh.w	fp, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2d9f8:	463a      	mov	r2, r7
   2d9fa:	a903      	add	r1, sp, #12
   2d9fc:	4630      	mov	r0, r6
   2d9fe:	4798      	blx	r3
   2da00:	3404      	adds	r4, #4
   2da02:	2800      	cmp	r0, #0
   2da04:	d1ce      	bne.n	2d9a4 <gatt_find_type_rsp+0x32>
}
   2da06:	b009      	add	sp, #36	; 0x24
   2da08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002da0c <bt_gatt_cancel>:
{
   2da0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2da0e:	4604      	mov	r4, r0
   2da10:	460d      	mov	r5, r1
	k_sched_lock();
   2da12:	f7f8 f8f1 	bl	25bf8 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   2da16:	4629      	mov	r1, r5
   2da18:	4620      	mov	r0, r4
   2da1a:	f7ff fbbd 	bl	2d198 <bt_att_find_req_by_user_data>
	if (req) {
   2da1e:	4601      	mov	r1, r0
   2da20:	b920      	cbnz	r0, 2da2c <bt_gatt_cancel+0x20>
}
   2da22:	b002      	add	sp, #8
   2da24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   2da28:	f7f8 b8fa 	b.w	25c20 <k_sched_unlock>
		func = req->func;
   2da2c:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   2da2e:	4620      	mov	r0, r4
   2da30:	f7ee f800 	bl	1ba34 <bt_att_req_cancel>
	k_sched_unlock();
   2da34:	f7f8 f8f4 	bl	25c20 <k_sched_unlock>
	if (func) {
   2da38:	b12e      	cbz	r6, 2da46 <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   2da3a:	2300      	movs	r3, #0
   2da3c:	9500      	str	r5, [sp, #0]
   2da3e:	461a      	mov	r2, r3
   2da40:	210e      	movs	r1, #14
   2da42:	4620      	mov	r0, r4
   2da44:	47b0      	blx	r6
}
   2da46:	b002      	add	sp, #8
   2da48:	bd70      	pop	{r4, r5, r6, pc}

0002da4a <bt_gatt_notification>:
{
   2da4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2da4e:	4606      	mov	r6, r0
   2da50:	4688      	mov	r8, r1
   2da52:	4691      	mov	r9, r2
   2da54:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   2da56:	f7ee f92b 	bl	1bcb0 <gatt_sub_find>
	if (!sub) {
   2da5a:	b320      	cbz	r0, 2daa6 <bt_gatt_notification+0x5c>
	return list->head;
   2da5c:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2da5e:	b314      	cbz	r4, 2daa6 <bt_gatt_notification+0x5c>
	return node->next;
   2da60:	6825      	ldr	r5, [r4, #0]
   2da62:	b105      	cbz	r5, 2da66 <bt_gatt_notification+0x1c>
   2da64:	3d18      	subs	r5, #24
		if (handle != params->value_handle) {
   2da66:	f834 3c0c 	ldrh.w	r3, [r4, #-12]
   2da6a:	4543      	cmp	r3, r8
   2da6c:	d118      	bne.n	2daa0 <bt_gatt_notification+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2da6e:	3c18      	subs	r4, #24
   2da70:	e007      	b.n	2da82 <bt_gatt_notification+0x38>
   2da72:	462c      	mov	r4, r5
   2da74:	69ad      	ldr	r5, [r5, #24]
   2da76:	89a3      	ldrh	r3, [r4, #12]
   2da78:	b1bd      	cbz	r5, 2daaa <bt_gatt_notification+0x60>
		if (handle != params->value_handle) {
   2da7a:	4543      	cmp	r3, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2da7c:	f1a5 0518 	sub.w	r5, r5, #24
		if (handle != params->value_handle) {
   2da80:	d1f7      	bne.n	2da72 <bt_gatt_notification+0x28>
		if (check_subscribe_security_level(conn, params)) {
   2da82:	7a72      	ldrb	r2, [r6, #9]
   2da84:	7ca3      	ldrb	r3, [r4, #18]
   2da86:	429a      	cmp	r2, r3
   2da88:	d30a      	bcc.n	2daa0 <bt_gatt_notification+0x56>
			if (params->notify(conn, params, data, length) ==
   2da8a:	6827      	ldr	r7, [r4, #0]
   2da8c:	4653      	mov	r3, sl
   2da8e:	464a      	mov	r2, r9
   2da90:	4621      	mov	r1, r4
   2da92:	4630      	mov	r0, r6
   2da94:	47b8      	blx	r7
   2da96:	b918      	cbnz	r0, 2daa0 <bt_gatt_notification+0x56>
				bt_gatt_unsubscribe(conn, params);
   2da98:	4621      	mov	r1, r4
   2da9a:	4630      	mov	r0, r6
   2da9c:	f7f0 f94c 	bl	1dd38 <bt_gatt_unsubscribe>
   2daa0:	462c      	mov	r4, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2daa2:	2d00      	cmp	r5, #0
   2daa4:	d1e6      	bne.n	2da74 <bt_gatt_notification+0x2a>
}
   2daa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (handle != params->value_handle) {
   2daaa:	4543      	cmp	r3, r8
   2daac:	d0e9      	beq.n	2da82 <bt_gatt_notification+0x38>
   2daae:	e7fa      	b.n	2daa6 <bt_gatt_notification+0x5c>

0002dab0 <bt_gatt_change_aware>:
{
   2dab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dab4:	4605      	mov	r5, r0
   2dab6:	4688      	mov	r8, r1
	cfg = find_cf_cfg(conn);
   2dab8:	f7ee f8b8 	bl	1bc2c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2dabc:	4604      	mov	r4, r0
   2dabe:	b1e0      	cbz	r0, 2dafa <bt_gatt_change_aware+0x4a>
   2dac0:	7a03      	ldrb	r3, [r0, #8]
   2dac2:	07db      	lsls	r3, r3, #31
   2dac4:	d519      	bpl.n	2dafa <bt_gatt_change_aware+0x4a>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2dac6:	f100 070c 	add.w	r7, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2daca:	4638      	mov	r0, r7
   2dacc:	f7ff fc52 	bl	2d374 <atomic_get>
   2dad0:	f010 0601 	ands.w	r6, r0, #1
   2dad4:	d111      	bne.n	2dafa <bt_gatt_change_aware+0x4a>
	if (!req) {
   2dad6:	f1b8 0f00 	cmp.w	r8, #0
   2dada:	d00f      	beq.n	2dafc <bt_gatt_change_aware+0x4c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2dadc:	f06f 0102 	mvn.w	r1, #2
   2dae0:	4638      	mov	r0, r7
   2dae2:	f7ff fc35 	bl	2d350 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2dae6:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2daea:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2daec:	d009      	beq.n	2db02 <bt_gatt_change_aware+0x52>
		bt_att_clear_out_of_sync_sent(conn);
   2daee:	f7ff fb6f 	bl	2d1d0 <bt_att_clear_out_of_sync_sent>
		set_change_aware(cfg, true);
   2daf2:	2101      	movs	r1, #1
   2daf4:	4620      	mov	r0, r4
   2daf6:	f7ff fdd4 	bl	2d6a2 <set_change_aware>
		return true;
   2dafa:	2601      	movs	r6, #1
}
   2dafc:	4630      	mov	r0, r6
   2dafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2db02:	f7ff fb63 	bl	2d1cc <bt_att_fixed_chan_only>
   2db06:	2800      	cmp	r0, #0
   2db08:	d0f8      	beq.n	2dafc <bt_gatt_change_aware+0x4c>
   2db0a:	4628      	mov	r0, r5
   2db0c:	f7ff fb70 	bl	2d1f0 <bt_att_out_of_sync_sent_on_fixed>
   2db10:	2800      	cmp	r0, #0
   2db12:	d0f3      	beq.n	2dafc <bt_gatt_change_aware+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2db14:	f06f 0102 	mvn.w	r1, #2
   2db18:	4638      	mov	r0, r7
   2db1a:	f7ff fc19 	bl	2d350 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2db1e:	4628      	mov	r0, r5
   2db20:	e7e5      	b.n	2daee <bt_gatt_change_aware+0x3e>

0002db22 <delayed_store>:
{
   2db22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2db24:	f1a0 0417 	sub.w	r4, r0, #23
   2db28:	1c47      	adds	r7, r0, #1
		if (bt_addr_le_is_bonded(el->id, &el->peer)) {
   2db2a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2db2e:	4621      	mov	r1, r4
   2db30:	f7fe fada 	bl	2c0e8 <bt_addr_le_is_bonded>
   2db34:	b380      	cbz	r0, 2db98 <delayed_store+0x76>
			    atomic_test_and_clear_bit(el->flags, DELAYED_STORE_CCC)) {
   2db36:	1de6      	adds	r6, r4, #7
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2db38:	f06f 0101 	mvn.w	r1, #1
   2db3c:	4630      	mov	r0, r6
   2db3e:	f7ff fc07 	bl	2d350 <atomic_and>
			if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE) &&
   2db42:	07c2      	lsls	r2, r0, #31
   2db44:	d504      	bpl.n	2db50 <delayed_store+0x2e>
				bt_gatt_store_ccc(el->id, &el->peer);
   2db46:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2db4a:	4621      	mov	r1, r4
   2db4c:	f7f0 fa74 	bl	1e038 <bt_gatt_store_ccc>
   2db50:	f06f 0102 	mvn.w	r1, #2
   2db54:	4630      	mov	r0, r6
   2db56:	f7ff fbfb 	bl	2d350 <atomic_and>
			if (IS_ENABLED(CONFIG_BT_SETTINGS_CF_STORE_ON_WRITE) &&
   2db5a:	0783      	lsls	r3, r0, #30
   2db5c:	d504      	bpl.n	2db68 <delayed_store+0x46>
				bt_gatt_store_cf(el->id, &el->peer);
   2db5e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2db62:	4621      	mov	r1, r4
   2db64:	f7ee fe66 	bl	1c834 <bt_gatt_store_cf.isra.0>
			if (atomic_get(el->flags) == 0) {
   2db68:	4630      	mov	r0, r6
   2db6a:	f7ff fc03 	bl	2d374 <atomic_get>
   2db6e:	4605      	mov	r5, r0
   2db70:	b990      	cbnz	r0, 2db98 <delayed_store+0x76>
	if (el) {
   2db72:	2c01      	cmp	r4, #1
   2db74:	d010      	beq.n	2db98 <delayed_store+0x76>
		el->id = 0;
   2db76:	f804 0c01 	strb.w	r0, [r4, #-1]
		memset(&el->peer, 0, sizeof(el->peer));
   2db7a:	4601      	mov	r1, r0
   2db7c:	2207      	movs	r2, #7
   2db7e:	4620      	mov	r0, r4
   2db80:	f7fe f899 	bl	2bcb6 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2db84:	f3bf 8f5b 	dmb	ish
   2db88:	e856 3f00 	ldrex	r3, [r6]
   2db8c:	e846 5200 	strex	r2, r5, [r6]
   2db90:	2a00      	cmp	r2, #0
   2db92:	d1f9      	bne.n	2db88 <delayed_store+0x66>
   2db94:	f3bf 8f5b 	dmb	ish
	for (size_t i = 0; i < ARRAY_SIZE(gatt_delayed_store.peer_list); i++) {
   2db98:	340c      	adds	r4, #12
   2db9a:	42bc      	cmp	r4, r7
   2db9c:	d1c5      	bne.n	2db2a <delayed_store+0x8>
}
   2db9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002dba0 <bt_gatt_pairing_complete>:
{
   2dba0:	b538      	push	{r3, r4, r5, lr}
   2dba2:	4604      	mov	r4, r0
	if (bonded) {
   2dba4:	b159      	cbz	r1, 2dbbe <bt_gatt_pairing_complete+0x1e>
		bt_gatt_store_ccc(conn->id, &(conn->le.dst));
   2dba6:	f100 0588 	add.w	r5, r0, #136	; 0x88
   2dbaa:	4629      	mov	r1, r5
   2dbac:	7a00      	ldrb	r0, [r0, #8]
   2dbae:	f7f0 fa43 	bl	1e038 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn->id, &conn->le.dst);
   2dbb2:	7a20      	ldrb	r0, [r4, #8]
   2dbb4:	4629      	mov	r1, r5
}
   2dbb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_store_cf(conn->id, &conn->le.dst);
   2dbba:	f7ee be3b 	b.w	1c834 <bt_gatt_store_cf.isra.0>
}
   2dbbe:	bd38      	pop	{r3, r4, r5, pc}

0002dbc0 <sys_mem_swap>:
{
   2dbc0:	b510      	push	{r4, lr}
   2dbc2:	1843      	adds	r3, r0, r1
   2dbc4:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2dbc8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   2dbcc:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2dbce:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   2dbd2:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2dbd4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2dbd6:	d1f7      	bne.n	2dbc8 <sys_mem_swap+0x8>
	}
}
   2dbd8:	bd10      	pop	{r4, pc}

0002dbda <smp_pairing_req>:
}
   2dbda:	2007      	movs	r0, #7
   2dbdc:	4770      	bx	lr

0002dbde <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2dbde:	f3bf 8f5b 	dmb	ish
   2dbe2:	6800      	ldr	r0, [r0, #0]
   2dbe4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2dbe8:	4108      	asrs	r0, r1
}
   2dbea:	f000 0001 	and.w	r0, r0, #1
   2dbee:	4770      	bx	lr

0002dbf0 <update_keys_check>:
{
   2dbf0:	b510      	push	{r4, lr}
   2dbf2:	4603      	mov	r3, r0
	if (!keys ||
   2dbf4:	b1d9      	cbz	r1, 2dc2e <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2dbf6:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2dbf8:	f010 0f24 	tst.w	r0, #36	; 0x24
   2dbfc:	d017      	beq.n	2dc2e <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2dbfe:	7d1a      	ldrb	r2, [r3, #20]
   2dc00:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2dc02:	7b09      	ldrb	r1, [r1, #12]
   2dc04:	42a2      	cmp	r2, r4
   2dc06:	bf28      	it	cs
   2dc08:	4622      	movcs	r2, r4
   2dc0a:	4291      	cmp	r1, r2
   2dc0c:	d901      	bls.n	2dc12 <update_keys_check+0x22>
			return false;
   2dc0e:	2000      	movs	r0, #0
}
   2dc10:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2dc12:	0682      	lsls	r2, r0, #26
   2dc14:	d404      	bmi.n	2dc20 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2dc16:	7a18      	ldrb	r0, [r3, #8]
   2dc18:	3800      	subs	r0, #0
   2dc1a:	bf18      	it	ne
   2dc1c:	2001      	movne	r0, #1
   2dc1e:	e7f7      	b.n	2dc10 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2dc20:	2105      	movs	r1, #5
   2dc22:	1d18      	adds	r0, r3, #4
   2dc24:	f7ff ffdb 	bl	2dbde <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2dc28:	2800      	cmp	r0, #0
   2dc2a:	d1f4      	bne.n	2dc16 <update_keys_check+0x26>
   2dc2c:	e7ef      	b.n	2dc0e <update_keys_check+0x1e>
	return true;
   2dc2e:	2001      	movs	r0, #1
   2dc30:	e7ee      	b.n	2dc10 <update_keys_check+0x20>

0002dc32 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2dc32:	2301      	movs	r3, #1
   2dc34:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2dc36:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2dc38:	f3bf 8f5b 	dmb	ish
   2dc3c:	e850 2f00 	ldrex	r2, [r0]
   2dc40:	401a      	ands	r2, r3
   2dc42:	e840 2100 	strex	r1, r2, [r0]
   2dc46:	2900      	cmp	r1, #0
   2dc48:	d1f8      	bne.n	2dc3c <atomic_clear_bit+0xa>
   2dc4a:	f3bf 8f5b 	dmb	ish
}
   2dc4e:	4770      	bx	lr

0002dc50 <z_log_msg_static_create.constprop.0>:
   2dc50:	2300      	movs	r3, #0
   2dc52:	f7e6 b9ed 	b.w	14030 <z_impl_z_log_msg_static_create>

0002dc56 <smp_chan_get>:
{
   2dc56:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   2dc58:	2106      	movs	r1, #6
   2dc5a:	f7fe fdaf 	bl	2c7bc <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2dc5e:	b918      	cbnz	r0, 2dc68 <smp_chan_get+0x12>
}
   2dc60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2dc64:	f7f0 bbc0 	b.w	1e3e8 <smp_chan_get.part.0>
   2dc68:	38ec      	subs	r0, #236	; 0xec
   2dc6a:	bd08      	pop	{r3, pc}

0002dc6c <atomic_test_and_clear_bit>:
{
   2dc6c:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2dc6e:	2301      	movs	r3, #1
   2dc70:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2dc74:	43ca      	mvns	r2, r1
   2dc76:	f3bf 8f5b 	dmb	ish
   2dc7a:	e850 3f00 	ldrex	r3, [r0]
   2dc7e:	ea03 0402 	and.w	r4, r3, r2
   2dc82:	e840 4500 	strex	r5, r4, [r0]
   2dc86:	2d00      	cmp	r5, #0
   2dc88:	d1f7      	bne.n	2dc7a <atomic_test_and_clear_bit+0xe>
   2dc8a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2dc8e:	4219      	tst	r1, r3
}
   2dc90:	bf14      	ite	ne
   2dc92:	2001      	movne	r0, #1
   2dc94:	2000      	moveq	r0, #0
   2dc96:	bd30      	pop	{r4, r5, pc}

0002dc98 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2dc98:	2301      	movs	r3, #1
   2dc9a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2dc9c:	f3bf 8f5b 	dmb	ish
   2dca0:	e850 2f00 	ldrex	r2, [r0]
   2dca4:	431a      	orrs	r2, r3
   2dca6:	e840 2100 	strex	r1, r2, [r0]
   2dcaa:	2900      	cmp	r1, #0
   2dcac:	d1f8      	bne.n	2dca0 <atomic_set_bit+0x8>
   2dcae:	f3bf 8f5b 	dmb	ish
}
   2dcb2:	4770      	bx	lr

0002dcb4 <smp_keypress_notif>:
{
   2dcb4:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2dcb6:	210e      	movs	r1, #14
   2dcb8:	f7ff ffee 	bl	2dc98 <atomic_set_bit>
}
   2dcbc:	2000      	movs	r0, #0
   2dcbe:	bd08      	pop	{r3, pc}

0002dcc0 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2dcc0:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2dcc2:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2dcc4:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2dcc6:	4628      	mov	r0, r5
   2dcc8:	2104      	movs	r1, #4
   2dcca:	f7ff ff88 	bl	2dbde <atomic_test_bit>
   2dcce:	b168      	cbz	r0, 2dcec <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   2dcd0:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2dcd2:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2dcd4:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2dcd6:	4608      	mov	r0, r1
   2dcd8:	f7fe fd2c 	bl	2c734 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2dcdc:	4604      	mov	r4, r0
   2dcde:	b940      	cbnz	r0, 2dcf2 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2dce0:	2104      	movs	r1, #4
   2dce2:	4628      	mov	r0, r5
   2dce4:	f7ff ffd8 	bl	2dc98 <atomic_set_bit>
}
   2dce8:	4620      	mov	r0, r4
   2dcea:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2dcec:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2dcf0:	e7ef      	b.n	2dcd2 <smp_create_pdu.constprop.0+0x12>
	return net_buf_simple_add(&buf->b, len);
   2dcf2:	2101      	movs	r1, #1
   2dcf4:	300c      	adds	r0, #12
   2dcf6:	f000 fb9c 	bl	2e432 <net_buf_simple_add>
	hdr->code = op;
   2dcfa:	7006      	strb	r6, [r0, #0]
	return buf;
   2dcfc:	e7f4      	b.n	2dce8 <smp_create_pdu.constprop.0+0x28>

0002dcfe <smp_send_pairing_random>:
{
   2dcfe:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2dd00:	2104      	movs	r1, #4
{
   2dd02:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2dd04:	f7ff ffdc 	bl	2dcc0 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2dd08:	4604      	mov	r4, r0
   2dd0a:	b178      	cbz	r0, 2dd2c <smp_send_pairing_random+0x2e>
   2dd0c:	2110      	movs	r1, #16
   2dd0e:	300c      	adds	r0, #12
   2dd10:	f000 fb8f 	bl	2e432 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2dd14:	2210      	movs	r2, #16
   2dd16:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2dd1a:	f7fd ffc1 	bl	2bca0 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2dd1e:	4628      	mov	r0, r5
   2dd20:	2200      	movs	r2, #0
   2dd22:	4621      	mov	r1, r4
   2dd24:	f7f0 fafe 	bl	1e324 <smp_send.constprop.0>
	return 0;
   2dd28:	2000      	movs	r0, #0
}
   2dd2a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2dd2c:	2008      	movs	r0, #8
   2dd2e:	e7fc      	b.n	2dd2a <smp_send_pairing_random+0x2c>

0002dd30 <smp_pairing_confirm>:
{
   2dd30:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   2dd32:	68cd      	ldr	r5, [r1, #12]
{
   2dd34:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   2dd36:	210b      	movs	r1, #11
   2dd38:	3004      	adds	r0, #4
   2dd3a:	f7ff ff7a 	bl	2dc32 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   2dd3e:	2210      	movs	r2, #16
   2dd40:	4629      	mov	r1, r5
   2dd42:	f104 0017 	add.w	r0, r4, #23
   2dd46:	f7fd ffab 	bl	2bca0 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2dd4a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2dd4e:	78db      	ldrb	r3, [r3, #3]
   2dd50:	b93b      	cbnz	r3, 2dd62 <smp_pairing_confirm+0x32>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2dd52:	4620      	mov	r0, r4
   2dd54:	2104      	movs	r1, #4
   2dd56:	f7ff ff9f 	bl	2dc98 <atomic_set_bit>
}
   2dd5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return smp_send_pairing_random(smp);
   2dd5e:	f7ff bfce 	b.w	2dcfe <smp_send_pairing_random>
}
   2dd62:	2000      	movs	r0, #0
   2dd64:	bd38      	pop	{r3, r4, r5, pc}

0002dd66 <smp_reset>:
{
   2dd66:	b570      	push	{r4, r5, r6, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2dd68:	1d03      	adds	r3, r0, #4
   2dd6a:	4604      	mov	r4, r0
   2dd6c:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   2dd6e:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
   2dd72:	f3bf 8f5b 	dmb	ish
   2dd76:	e853 2f00 	ldrex	r2, [r3]
   2dd7a:	e843 5100 	strex	r1, r5, [r3]
   2dd7e:	2900      	cmp	r1, #0
   2dd80:	d1f9      	bne.n	2dd76 <smp_reset+0x10>
   2dd82:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2dd86:	f504 7090 	add.w	r0, r4, #288	; 0x120
   2dd8a:	f001 f9f7 	bl	2f17c <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2dd8e:	7225      	strb	r5, [r4, #8]
   2dd90:	f3bf 8f5b 	dmb	ish
   2dd94:	e854 3f00 	ldrex	r3, [r4]
   2dd98:	e844 5200 	strex	r2, r5, [r4]
   2dd9c:	2a00      	cmp	r2, #0
   2dd9e:	d1f9      	bne.n	2dd94 <smp_reset+0x2e>
   2dda0:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2dda4:	78f3      	ldrb	r3, [r6, #3]
   2dda6:	b92b      	cbnz	r3, 2ddb4 <smp_reset+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2dda8:	4620      	mov	r0, r4
   2ddaa:	210b      	movs	r1, #11
}
   2ddac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2ddb0:	f7ff bf72 	b.w	2dc98 <atomic_set_bit>
}
   2ddb4:	bd70      	pop	{r4, r5, r6, pc}

0002ddb6 <smp_c1>:
{
   2ddb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ddba:	b089      	sub	sp, #36	; 0x24
   2ddbc:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2ddc0:	4699      	mov	r9, r3
	p1[0] = ia->type;
   2ddc2:	783b      	ldrb	r3, [r7, #0]
{
   2ddc4:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2ddc6:	f88d 3000 	strb.w	r3, [sp]
{
   2ddca:	460c      	mov	r4, r1
	p1[1] = ra->type;
   2ddcc:	f898 3000 	ldrb.w	r3, [r8]
   2ddd0:	f88d 3001 	strb.w	r3, [sp, #1]
{
   2ddd4:	4611      	mov	r1, r2
   2ddd6:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2ddd8:	2207      	movs	r2, #7
   2ddda:	f10d 0002 	add.w	r0, sp, #2
   2ddde:	f7fd ff5f 	bl	2bca0 <memcpy>
	memcpy(p1 + 9, pres, 7);
   2dde2:	2207      	movs	r2, #7
   2dde4:	4649      	mov	r1, r9
   2dde6:	f10d 0009 	add.w	r0, sp, #9
   2ddea:	f7fd ff59 	bl	2bca0 <memcpy>
	while (len--) {
   2ddee:	f104 0010 	add.w	r0, r4, #16
	memcpy(p1 + 9, pres, 7);
   2ddf2:	462a      	mov	r2, r5
   2ddf4:	4669      	mov	r1, sp
		*r++ = *p++ ^ *q++;
   2ddf6:	f814 3b01 	ldrb.w	r3, [r4], #1
   2ddfa:	f811 cb01 	ldrb.w	ip, [r1], #1
	while (len--) {
   2ddfe:	4284      	cmp	r4, r0
		*r++ = *p++ ^ *q++;
   2de00:	ea83 030c 	eor.w	r3, r3, ip
   2de04:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   2de08:	d1f5      	bne.n	2ddf6 <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2de0a:	462a      	mov	r2, r5
   2de0c:	4629      	mov	r1, r5
   2de0e:	4630      	mov	r0, r6
   2de10:	f000 fe31 	bl	2ea76 <bt_encrypt_le>
	if (err) {
   2de14:	4604      	mov	r4, r0
   2de16:	bb20      	cbnz	r0, 2de62 <smp_c1+0xac>
	memcpy(p2, ra->a.val, 6);
   2de18:	2206      	movs	r2, #6
   2de1a:	f108 0101 	add.w	r1, r8, #1
   2de1e:	a804      	add	r0, sp, #16
   2de20:	f7fd ff3e 	bl	2bca0 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   2de24:	2206      	movs	r2, #6
   2de26:	1c79      	adds	r1, r7, #1
   2de28:	f10d 0016 	add.w	r0, sp, #22
   2de2c:	f7fd ff38 	bl	2bca0 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2de30:	2204      	movs	r2, #4
   2de32:	4621      	mov	r1, r4
   2de34:	a807      	add	r0, sp, #28
   2de36:	f7fd ff3e 	bl	2bcb6 <memset>
	while (len--) {
   2de3a:	f105 0010 	add.w	r0, r5, #16
	(void)memset(p2 + 12, 0, 4);
   2de3e:	462a      	mov	r2, r5
   2de40:	ab04      	add	r3, sp, #16
		*r++ = *p++ ^ *q++;
   2de42:	f812 1b01 	ldrb.w	r1, [r2], #1
   2de46:	f813 4b01 	ldrb.w	r4, [r3], #1
	while (len--) {
   2de4a:	4282      	cmp	r2, r0
		*r++ = *p++ ^ *q++;
   2de4c:	ea81 0104 	eor.w	r1, r1, r4
   2de50:	f802 1c01 	strb.w	r1, [r2, #-1]
	while (len--) {
   2de54:	d1f5      	bne.n	2de42 <smp_c1+0x8c>
	return bt_encrypt_le(k, enc_data, enc_data);
   2de56:	462a      	mov	r2, r5
   2de58:	4629      	mov	r1, r5
   2de5a:	4630      	mov	r0, r6
   2de5c:	f000 fe0b 	bl	2ea76 <bt_encrypt_le>
   2de60:	4604      	mov	r4, r0
}
   2de62:	4620      	mov	r0, r4
   2de64:	b009      	add	sp, #36	; 0x24
   2de66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002de6a <legacy_send_pairing_confirm>:
{
   2de6a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2de6c:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2de6e:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
{
   2de72:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2de74:	f7ff ff24 	bl	2dcc0 <smp_create_pdu.constprop.0>
	if (!buf) {
   2de78:	4606      	mov	r6, r0
   2de7a:	b1c0      	cbz	r0, 2deae <legacy_send_pairing_confirm+0x44>
   2de7c:	2110      	movs	r1, #16
   2de7e:	300c      	adds	r0, #12
   2de80:	f000 fad7 	bl	2e432 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2de84:	f104 0396 	add.w	r3, r4, #150	; 0x96
   2de88:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2de8a:	9002      	str	r0, [sp, #8]
   2de8c:	9301      	str	r3, [sp, #4]
   2de8e:	9400      	str	r4, [sp, #0]
   2de90:	f105 0310 	add.w	r3, r5, #16
   2de94:	f105 0209 	add.w	r2, r5, #9
   2de98:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2de9c:	f105 0047 	add.w	r0, r5, #71	; 0x47
   2dea0:	f7ff ff89 	bl	2ddb6 <smp_c1>
   2dea4:	4604      	mov	r4, r0
   2dea6:	b128      	cbz	r0, 2deb4 <legacy_send_pairing_confirm+0x4a>
		net_buf_unref(buf);
   2dea8:	4630      	mov	r0, r6
   2deaa:	f7f2 fdb9 	bl	20a20 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2deae:	2008      	movs	r0, #8
}
   2deb0:	b004      	add	sp, #16
   2deb2:	bd70      	pop	{r4, r5, r6, pc}
	smp_send(smp, buf, NULL, NULL);
   2deb4:	4602      	mov	r2, r0
   2deb6:	4631      	mov	r1, r6
   2deb8:	4628      	mov	r0, r5
   2deba:	f7f0 fa33 	bl	1e324 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2debe:	1d28      	adds	r0, r5, #4
   2dec0:	4621      	mov	r1, r4
   2dec2:	f7ff feb6 	bl	2dc32 <atomic_clear_bit>
	return 0;
   2dec6:	4620      	mov	r0, r4
   2dec8:	e7f2      	b.n	2deb0 <legacy_send_pairing_confirm+0x46>

0002deca <bt_smp_request_ltk>:
{
   2deca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2dece:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2ded0:	e9cd 2300 	strd	r2, r3, [sp]
   2ded4:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2ded6:	f7ff febe 	bl	2dc56 <smp_chan_get>
	if (!smp) {
   2deda:	4605      	mov	r5, r0
   2dedc:	2800      	cmp	r0, #0
   2dede:	d07c      	beq.n	2dfda <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   2dee0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2dee4:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   2dee6:	f1b8 0f00 	cmp.w	r8, #0
   2deea:	d128      	bne.n	2df3e <bt_smp_request_ltk+0x74>
   2deec:	e9dd 3200 	ldrd	r3, r2, [sp]
   2def0:	4313      	orrs	r3, r2
   2def2:	d124      	bne.n	2df3e <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2def4:	2103      	movs	r1, #3
   2def6:	4630      	mov	r0, r6
   2def8:	f7ff fe71 	bl	2dbde <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2defc:	b1f8      	cbz	r0, 2df3e <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2defe:	2101      	movs	r1, #1
   2df00:	4630      	mov	r0, r6
   2df02:	f7ff fe6c 	bl	2dbde <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2df06:	b1d0      	cbz	r0, 2df3e <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   2df08:	7d2c      	ldrb	r4, [r5, #20]
   2df0a:	7b6b      	ldrb	r3, [r5, #13]
   2df0c:	429c      	cmp	r4, r3
   2df0e:	bf28      	it	cs
   2df10:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   2df12:	4622      	mov	r2, r4
   2df14:	f105 0147 	add.w	r1, r5, #71	; 0x47
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2df18:	4638      	mov	r0, r7
   2df1a:	f7fd fec1 	bl	2bca0 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2df1e:	2c0f      	cmp	r4, #15
   2df20:	d805      	bhi.n	2df2e <bt_smp_request_ltk+0x64>
			(void)memset(ltk + enc_size, 0,
   2df22:	f1c4 0210 	rsb	r2, r4, #16
   2df26:	4641      	mov	r1, r8
   2df28:	1938      	adds	r0, r7, r4
   2df2a:	f7fd fec4 	bl	2bcb6 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2df2e:	4630      	mov	r0, r6
   2df30:	2101      	movs	r1, #1
   2df32:	f7ff feb1 	bl	2dc98 <atomic_set_bit>
		return true;
   2df36:	2001      	movs	r0, #1
}
   2df38:	b002      	add	sp, #8
   2df3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2df3e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2df42:	b983      	cbnz	r3, 2df66 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   2df44:	f104 0888 	add.w	r8, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2df48:	7a21      	ldrb	r1, [r4, #8]
   2df4a:	4642      	mov	r2, r8
   2df4c:	2020      	movs	r0, #32
   2df4e:	f7f2 fa43 	bl	203d8 <bt_keys_find>
   2df52:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2df56:	b930      	cbnz	r0, 2df66 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2df58:	7a21      	ldrb	r1, [r4, #8]
   2df5a:	4642      	mov	r2, r8
   2df5c:	2001      	movs	r0, #1
   2df5e:	f7f2 fa3b 	bl	203d8 <bt_keys_find>
   2df62:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2df66:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2df6a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2df6e:	f1b8 0f00 	cmp.w	r8, #0
   2df72:	d10c      	bne.n	2df8e <bt_smp_request_ltk+0xc4>
   2df74:	e9dd 3200 	ldrd	r3, r2, [sp]
   2df78:	4313      	orrs	r3, r2
   2df7a:	d108      	bne.n	2df8e <bt_smp_request_ltk+0xc4>
   2df7c:	b300      	cbz	r0, 2dfc0 <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2df7e:	89c3      	ldrh	r3, [r0, #14]
   2df80:	069a      	lsls	r2, r3, #26
   2df82:	d505      	bpl.n	2df90 <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   2df84:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2df86:	f100 011a 	add.w	r1, r0, #26
   2df8a:	4622      	mov	r2, r4
   2df8c:	e7c4      	b.n	2df18 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2df8e:	b1b8      	cbz	r0, 2dfc0 <bt_smp_request_ltk+0xf6>
   2df90:	89c3      	ldrh	r3, [r0, #14]
   2df92:	07db      	lsls	r3, r3, #31
   2df94:	d514      	bpl.n	2dfc0 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2df96:	2208      	movs	r2, #8
   2df98:	4669      	mov	r1, sp
   2df9a:	3068      	adds	r0, #104	; 0x68
   2df9c:	f7fd fe59 	bl	2bc52 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2dfa0:	b970      	cbnz	r0, 2dfc0 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2dfa2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2dfa6:	2202      	movs	r2, #2
   2dfa8:	a908      	add	r1, sp, #32
   2dfaa:	3070      	adds	r0, #112	; 0x70
   2dfac:	f7fd fe51 	bl	2bc52 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2dfb0:	4680      	mov	r8, r0
   2dfb2:	b928      	cbnz	r0, 2dfc0 <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   2dfb4:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   2dfb8:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   2dfba:	3172      	adds	r1, #114	; 0x72
   2dfbc:	4622      	mov	r2, r4
   2dfbe:	e7ab      	b.n	2df18 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2dfc0:	210f      	movs	r1, #15
   2dfc2:	4630      	mov	r0, r6
   2dfc4:	f7ff fe0b 	bl	2dbde <atomic_test_bit>
   2dfc8:	b120      	cbz	r0, 2dfd4 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2dfca:	2202      	movs	r2, #2
   2dfcc:	2106      	movs	r1, #6
   2dfce:	4620      	mov	r0, r4
   2dfd0:	f7eb feca 	bl	19d68 <bt_conn_security_changed>
	smp_reset(smp);
   2dfd4:	4628      	mov	r0, r5
   2dfd6:	f7ff fec6 	bl	2dd66 <smp_reset>
		return false;
   2dfda:	2000      	movs	r0, #0
   2dfdc:	e7ac      	b.n	2df38 <bt_smp_request_ltk+0x6e>

0002dfde <bt_smp_start_security>:
{
   2dfde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (conn->role) {
   2dfe0:	78c3      	ldrb	r3, [r0, #3]
{
   2dfe2:	4604      	mov	r4, r0
	switch (conn->role) {
   2dfe4:	2b00      	cmp	r3, #0
   2dfe6:	d15f      	bne.n	2e0a8 <bt_smp_start_security+0xca>
		smp = smp_chan_get(conn);
   2dfe8:	f7ff fe35 	bl	2dc56 <smp_chan_get>
		if (!smp) {
   2dfec:	4605      	mov	r5, r0
   2dfee:	2800      	cmp	r0, #0
   2dff0:	d05d      	beq.n	2e0ae <bt_smp_start_security+0xd0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2dff2:	1d06      	adds	r6, r0, #4
   2dff4:	2103      	movs	r1, #3
   2dff6:	4630      	mov	r0, r6
   2dff8:	f7ff fdf1 	bl	2dbde <atomic_test_bit>
   2dffc:	b120      	cbz	r0, 2e008 <bt_smp_start_security+0x2a>
			return -EBUSY;
   2dffe:	f06f 040f 	mvn.w	r4, #15
}
   2e002:	4620      	mov	r0, r4
   2e004:	b003      	add	sp, #12
   2e006:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2e008:	2101      	movs	r1, #1
   2e00a:	4630      	mov	r0, r6
   2e00c:	f7ff fde7 	bl	2dbde <atomic_test_bit>
   2e010:	2800      	cmp	r0, #0
   2e012:	d1f4      	bne.n	2dffe <bt_smp_start_security+0x20>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2e014:	210b      	movs	r1, #11
   2e016:	1d20      	adds	r0, r4, #4
   2e018:	f7ff fde1 	bl	2dbde <atomic_test_bit>
   2e01c:	b128      	cbz	r0, 2e02a <bt_smp_start_security+0x4c>
			return smp_send_pairing_req(conn);
   2e01e:	4620      	mov	r0, r4
}
   2e020:	b003      	add	sp, #12
   2e022:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return smp_send_pairing_req(conn);
   2e026:	f7f0 bc9b 	b.w	1e960 <smp_send_pairing_req>
	if (!conn->le.keys) {
   2e02a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2e02e:	b983      	cbnz	r3, 2e052 <bt_smp_start_security+0x74>
						     conn->id, &conn->le.dst);
   2e030:	f104 0788 	add.w	r7, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   2e034:	7a21      	ldrb	r1, [r4, #8]
   2e036:	463a      	mov	r2, r7
   2e038:	2020      	movs	r0, #32
   2e03a:	f7f2 f9cd 	bl	203d8 <bt_keys_find>
   2e03e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2e042:	b930      	cbnz	r0, 2e052 <bt_smp_start_security+0x74>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   2e044:	7a21      	ldrb	r1, [r4, #8]
   2e046:	463a      	mov	r2, r7
   2e048:	2004      	movs	r0, #4
   2e04a:	f7f2 f9c5 	bl	203d8 <bt_keys_find>
   2e04e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   2e052:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   2e056:	2900      	cmp	r1, #0
   2e058:	d0e1      	beq.n	2e01e <bt_smp_start_security+0x40>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   2e05a:	89cb      	ldrh	r3, [r1, #14]
	if (!conn->le.keys ||
   2e05c:	f013 0f24 	tst.w	r3, #36	; 0x24
   2e060:	d0dd      	beq.n	2e01e <bt_smp_start_security+0x40>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   2e062:	7aa2      	ldrb	r2, [r4, #10]
   2e064:	2a02      	cmp	r2, #2
   2e066:	d909      	bls.n	2e07c <bt_smp_start_security+0x9e>
   2e068:	7b48      	ldrb	r0, [r1, #13]
   2e06a:	07c0      	lsls	r0, r0, #31
   2e06c:	d5d7      	bpl.n	2e01e <bt_smp_start_security+0x40>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   2e06e:	2a03      	cmp	r2, #3
   2e070:	d004      	beq.n	2e07c <bt_smp_start_security+0x9e>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   2e072:	069b      	lsls	r3, r3, #26
   2e074:	d5d3      	bpl.n	2e01e <bt_smp_start_security+0x40>
   2e076:	7b0b      	ldrb	r3, [r1, #12]
   2e078:	2b10      	cmp	r3, #16
   2e07a:	d1d0      	bne.n	2e01e <bt_smp_start_security+0x40>
		err = bt_conn_le_start_encryption(conn,
   2e07c:	7b0b      	ldrb	r3, [r1, #12]
   2e07e:	9300      	str	r3, [sp, #0]
   2e080:	f101 0218 	add.w	r2, r1, #24
   2e084:	f101 031a 	add.w	r3, r1, #26
   2e088:	4620      	mov	r0, r4
   2e08a:	3110      	adds	r1, #16
   2e08c:	f7fe f9d5 	bl	2c43a <bt_conn_le_start_encryption>
		if (err) {
   2e090:	4604      	mov	r4, r0
   2e092:	2800      	cmp	r0, #0
   2e094:	d1b5      	bne.n	2e002 <bt_smp_start_security+0x24>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2e096:	4628      	mov	r0, r5
   2e098:	210b      	movs	r1, #11
   2e09a:	f7ff fdfd 	bl	2dc98 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2e09e:	2101      	movs	r1, #1
   2e0a0:	4630      	mov	r0, r6
   2e0a2:	f7ff fdf9 	bl	2dc98 <atomic_set_bit>
		return 0;
   2e0a6:	e7ac      	b.n	2e002 <bt_smp_start_security+0x24>
		return -EINVAL;
   2e0a8:	f06f 0415 	mvn.w	r4, #21
   2e0ac:	e7a9      	b.n	2e002 <bt_smp_start_security+0x24>
			return -ENOTCONN;
   2e0ae:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2e0b2:	e7a6      	b.n	2e002 <bt_smp_start_security+0x24>

0002e0b4 <bt_smp_dhkey_ready>:
{
   2e0b4:	b570      	push	{r4, r5, r6, lr}
   2e0b6:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2e0b8:	2008      	movs	r0, #8
   2e0ba:	f7f0 f8e1 	bl	1e280 <smp_find>
	if (smp) {
   2e0be:	4604      	mov	r4, r0
   2e0c0:	b1b8      	cbz	r0, 2e0f2 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2e0c2:	1d05      	adds	r5, r0, #4
   2e0c4:	2108      	movs	r1, #8
   2e0c6:	4628      	mov	r0, r5
   2e0c8:	f7ff fdb3 	bl	2dc32 <atomic_clear_bit>
	if (!dhkey) {
   2e0cc:	b3b6      	cbz	r6, 2e13c <bt_smp_dhkey_ready+0x88>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2e0ce:	2107      	movs	r1, #7
   2e0d0:	f7ff fdaf 	bl	2dc32 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   2e0d4:	4631      	mov	r1, r6
   2e0d6:	2220      	movs	r2, #32
   2e0d8:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2e0dc:	f7fd fde0 	bl	2bca0 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2e0e0:	210a      	movs	r1, #10
   2e0e2:	4628      	mov	r0, r5
   2e0e4:	f7ff fd7b 	bl	2dbde <atomic_test_bit>
   2e0e8:	b168      	cbz	r0, 2e106 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2e0ea:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2e0ec:	4628      	mov	r0, r5
   2e0ee:	f7ff fdd3 	bl	2dc98 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2e0f2:	2007      	movs	r0, #7
   2e0f4:	f7f0 f8c4 	bl	1e280 <smp_find>
		if (smp) {
   2e0f8:	4604      	mov	r4, r0
   2e0fa:	b118      	cbz	r0, 2e104 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   2e0fc:	f7f0 fa7e 	bl	1e5fc <smp_dhkey_generate>
			if (err) {
   2e100:	4601      	mov	r1, r0
   2e102:	b9b8      	cbnz	r0, 2e134 <bt_smp_dhkey_ready+0x80>
}
   2e104:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2e106:	2110      	movs	r1, #16
   2e108:	4628      	mov	r0, r5
   2e10a:	f7ff fd68 	bl	2dbde <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2e10e:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2e110:	2800      	cmp	r0, #0
   2e112:	d1eb      	bne.n	2e0ec <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2e114:	4628      	mov	r0, r5
   2e116:	f7ff fd62 	bl	2dbde <atomic_test_bit>
   2e11a:	2800      	cmp	r0, #0
   2e11c:	d0e9      	beq.n	2e0f2 <bt_smp_dhkey_ready+0x3e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2e11e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   2e122:	78db      	ldrb	r3, [r3, #3]
   2e124:	2b00      	cmp	r3, #0
   2e126:	d1e4      	bne.n	2e0f2 <bt_smp_dhkey_ready+0x3e>
			return compute_and_send_central_dhcheck(smp);
   2e128:	4620      	mov	r0, r4
   2e12a:	f7f0 ff37 	bl	1ef9c <compute_and_send_central_dhcheck>
		if (err) {
   2e12e:	4601      	mov	r1, r0
   2e130:	2800      	cmp	r0, #0
   2e132:	d0de      	beq.n	2e0f2 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   2e134:	4620      	mov	r0, r4
   2e136:	f7f1 fc5b 	bl	1f9f0 <smp_error>
   2e13a:	e7da      	b.n	2e0f2 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2e13c:	210b      	movs	r1, #11
   2e13e:	e7f9      	b.n	2e134 <bt_smp_dhkey_ready+0x80>

0002e140 <smp_check_complete.part.0>:
static void smp_check_complete(struct bt_conn *conn, uint8_t dist_complete)
   2e140:	b510      	push	{r4, lr}
   2e142:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   2e144:	2106      	movs	r1, #6
   2e146:	f7fe fb2f 	bl	2c7a8 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   2e14a:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   2e14e:	ea23 0104 	bic.w	r1, r3, r4
   2e152:	f800 1c04 	strb.w	r1, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   2e156:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   2e15a:	b921      	cbnz	r1, 2e166 <smp_check_complete.part.0+0x26>
}
   2e15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   2e160:	38ec      	subs	r0, #236	; 0xec
   2e162:	f7f1 bb9d 	b.w	1f8a0 <smp_pairing_complete>
}
   2e166:	bd10      	pop	{r4, pc}

0002e168 <smp_ident_sent>:
	if (!err) {
   2e168:	b922      	cbnz	r2, 2e174 <smp_ident_sent+0xc>
	if (conn->type == BT_CONN_TYPE_LE) {
   2e16a:	7881      	ldrb	r1, [r0, #2]
   2e16c:	2901      	cmp	r1, #1
   2e16e:	d101      	bne.n	2e174 <smp_ident_sent+0xc>
   2e170:	f7ff bfe6 	b.w	2e140 <smp_check_complete.part.0>
}
   2e174:	4770      	bx	lr

0002e176 <smp_sign_info_sent>:
	if (!err) {
   2e176:	b92a      	cbnz	r2, 2e184 <smp_sign_info_sent+0xe>
	if (conn->type == BT_CONN_TYPE_LE) {
   2e178:	7883      	ldrb	r3, [r0, #2]
   2e17a:	2b01      	cmp	r3, #1
   2e17c:	d102      	bne.n	2e184 <smp_sign_info_sent+0xe>
   2e17e:	2104      	movs	r1, #4
   2e180:	f7ff bfde 	b.w	2e140 <smp_check_complete.part.0>
}
   2e184:	4770      	bx	lr

0002e186 <bt_smp_disconnected>:
{
   2e186:	b570      	push	{r4, r5, r6, lr}
   2e188:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2e18a:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2e18e:	f850 3b34 	ldr.w	r3, [r0], #52
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2e192:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2e194:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   2e198:	f000 fff0 	bl	2f17c <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2e19c:	2103      	movs	r1, #3
   2e19e:	4620      	mov	r0, r4
   2e1a0:	f7ff fd1d 	bl	2dbde <atomic_test_bit>
   2e1a4:	b1a0      	cbz	r0, 2e1d0 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2e1a6:	2108      	movs	r1, #8
   2e1a8:	4630      	mov	r0, r6
   2e1aa:	f7f1 fb79 	bl	1f8a0 <smp_pairing_complete>
	if (keys) {
   2e1ae:	b13d      	cbz	r5, 2e1c0 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2e1b0:	89eb      	ldrh	r3, [r5, #14]
   2e1b2:	b113      	cbz	r3, 2e1ba <bt_smp_disconnected+0x34>
   2e1b4:	7b6b      	ldrb	r3, [r5, #13]
   2e1b6:	079b      	lsls	r3, r3, #30
   2e1b8:	d502      	bpl.n	2e1c0 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2e1ba:	4628      	mov	r0, r5
   2e1bc:	f7f2 f984 	bl	204c8 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2e1c0:	4630      	mov	r0, r6
   2e1c2:	f44f 72ac 	mov.w	r2, #344	; 0x158
}
   2e1c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2e1ca:	2100      	movs	r1, #0
   2e1cc:	f7fd bd73 	b.w	2bcb6 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2e1d0:	2101      	movs	r1, #1
   2e1d2:	4620      	mov	r0, r4
   2e1d4:	f7ff fd03 	bl	2dbde <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2e1d8:	2800      	cmp	r0, #0
   2e1da:	d1e4      	bne.n	2e1a6 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2e1dc:	210f      	movs	r1, #15
   2e1de:	4620      	mov	r0, r4
   2e1e0:	f7ff fcfd 	bl	2dbde <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2e1e4:	2800      	cmp	r0, #0
   2e1e6:	d1de      	bne.n	2e1a6 <bt_smp_disconnected+0x20>
   2e1e8:	e7e1      	b.n	2e1ae <bt_smp_disconnected+0x28>

0002e1ea <id_add>:
	bt_id_add(keys);
   2e1ea:	f7ea bb31 	b.w	18850 <bt_id_add>

0002e1ee <bt_keys_get_type>:
{
   2e1ee:	b570      	push	{r4, r5, r6, lr}
   2e1f0:	4604      	mov	r4, r0
   2e1f2:	460d      	mov	r5, r1
   2e1f4:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2e1f6:	f7f2 f8ef 	bl	203d8 <bt_keys_find>
	if (keys) {
   2e1fa:	b938      	cbnz	r0, 2e20c <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2e1fc:	4631      	mov	r1, r6
   2e1fe:	4628      	mov	r0, r5
   2e200:	f7f2 f8ac 	bl	2035c <bt_keys_get_addr>
	if (!keys) {
   2e204:	b110      	cbz	r0, 2e20c <bt_keys_get_type+0x1e>
	keys->keys |= type;
   2e206:	89c3      	ldrh	r3, [r0, #14]
   2e208:	431c      	orrs	r4, r3
   2e20a:	81c4      	strh	r4, [r0, #14]
}
   2e20c:	bd70      	pop	{r4, r5, r6, pc}

0002e20e <bt_keys_add_type>:
	keys->keys |= type;
   2e20e:	89c3      	ldrh	r3, [r0, #14]
   2e210:	4319      	orrs	r1, r3
   2e212:	81c1      	strh	r1, [r0, #14]
}
   2e214:	4770      	bx	lr

0002e216 <sys_memcpy_swap>:
	psrc += length - 1;
   2e216:	1e53      	subs	r3, r2, #1
   2e218:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2e21a:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2e21c:	f811 3901 	ldrb.w	r3, [r1], #-1
   2e220:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   2e224:	4290      	cmp	r0, r2
   2e226:	d1f9      	bne.n	2e21c <sys_memcpy_swap+0x6>
}
   2e228:	4770      	bx	lr

0002e22a <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2e22a:	b510      	push	{r4, lr}
   2e22c:	1e43      	subs	r3, r0, #1
   2e22e:	f100 0210 	add.w	r2, r0, #16
   2e232:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2e234:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2e238:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2e23c:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2e23e:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2e240:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2e242:	d1f7      	bne.n	2e234 <sys_mem_swap.constprop.0+0xa>
}
   2e244:	bd10      	pop	{r4, pc}

0002e246 <bt_crypto_aes_cmac>:
{
   2e246:	b570      	push	{r4, r5, r6, lr}
   2e248:	b0c2      	sub	sp, #264	; 0x108
   2e24a:	460d      	mov	r5, r1
   2e24c:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2e24e:	4601      	mov	r1, r0
   2e250:	aa16      	add	r2, sp, #88	; 0x58
   2e252:	4668      	mov	r0, sp
{
   2e254:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2e256:	f7fd fb4b 	bl	2b8f0 <tc_cmac_setup>
   2e25a:	b918      	cbnz	r0, 2e264 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   2e25c:	f06f 0004 	mvn.w	r0, #4
}
   2e260:	b042      	add	sp, #264	; 0x108
   2e262:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2e264:	4632      	mov	r2, r6
   2e266:	4629      	mov	r1, r5
   2e268:	4668      	mov	r0, sp
   2e26a:	f7fd fb6c 	bl	2b946 <tc_cmac_update>
   2e26e:	2800      	cmp	r0, #0
   2e270:	d0f4      	beq.n	2e25c <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2e272:	4669      	mov	r1, sp
   2e274:	4620      	mov	r0, r4
   2e276:	f7fd fbd0 	bl	2ba1a <tc_cmac_final>
   2e27a:	2800      	cmp	r0, #0
   2e27c:	d0ee      	beq.n	2e25c <bt_crypto_aes_cmac+0x16>
	return 0;
   2e27e:	2000      	movs	r0, #0
   2e280:	e7ee      	b.n	2e260 <bt_crypto_aes_cmac+0x1a>

0002e282 <bt_crypto_f4>:
{
   2e282:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e284:	b097      	sub	sp, #92	; 0x5c
   2e286:	4614      	mov	r4, r2
   2e288:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2e28a:	2220      	movs	r2, #32
   2e28c:	4601      	mov	r1, r0
   2e28e:	a805      	add	r0, sp, #20
{
   2e290:	461d      	mov	r5, r3
   2e292:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2e294:	f7ff ffbf 	bl	2e216 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2e298:	2220      	movs	r2, #32
   2e29a:	4631      	mov	r1, r6
   2e29c:	a80d      	add	r0, sp, #52	; 0x34
   2e29e:	f7ff ffba 	bl	2e216 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2e2a2:	4621      	mov	r1, r4
   2e2a4:	2210      	movs	r2, #16
   2e2a6:	a801      	add	r0, sp, #4
	m[64] = z;
   2e2a8:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2e2ac:	f7ff ffb3 	bl	2e216 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   2e2b0:	463b      	mov	r3, r7
   2e2b2:	2241      	movs	r2, #65	; 0x41
   2e2b4:	a905      	add	r1, sp, #20
   2e2b6:	a801      	add	r0, sp, #4
   2e2b8:	f7ff ffc5 	bl	2e246 <bt_crypto_aes_cmac>
	if (err) {
   2e2bc:	4604      	mov	r4, r0
   2e2be:	b910      	cbnz	r0, 2e2c6 <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   2e2c0:	4638      	mov	r0, r7
   2e2c2:	f7ff ffb2 	bl	2e22a <sys_mem_swap.constprop.0>
}
   2e2c6:	4620      	mov	r0, r4
   2e2c8:	b017      	add	sp, #92	; 0x5c
   2e2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002e2cc <bt_crypto_f6>:
{
   2e2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e2ce:	b097      	sub	sp, #92	; 0x5c
   2e2d0:	4605      	mov	r5, r0
   2e2d2:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2e2d4:	a805      	add	r0, sp, #20
   2e2d6:	2210      	movs	r2, #16
{
   2e2d8:	461c      	mov	r4, r3
   2e2da:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2e2dc:	f7ff ff9b 	bl	2e216 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2e2e0:	2210      	movs	r2, #16
   2e2e2:	4631      	mov	r1, r6
   2e2e4:	a809      	add	r0, sp, #36	; 0x24
   2e2e6:	f7ff ff96 	bl	2e216 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2e2ea:	4621      	mov	r1, r4
   2e2ec:	2210      	movs	r2, #16
   2e2ee:	a80d      	add	r0, sp, #52	; 0x34
   2e2f0:	f7ff ff91 	bl	2e216 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2e2f4:	991c      	ldr	r1, [sp, #112]	; 0x70
   2e2f6:	2203      	movs	r2, #3
   2e2f8:	a811      	add	r0, sp, #68	; 0x44
   2e2fa:	f7ff ff8c 	bl	2e216 <sys_memcpy_swap>
	m[51] = a1->type;
   2e2fe:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2e300:	f814 3b01 	ldrb.w	r3, [r4], #1
   2e304:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2e308:	4621      	mov	r1, r4
   2e30a:	2206      	movs	r2, #6
   2e30c:	a812      	add	r0, sp, #72	; 0x48
   2e30e:	f7fd fcc7 	bl	2bca0 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2e312:	4621      	mov	r1, r4
   2e314:	2206      	movs	r2, #6
   2e316:	a812      	add	r0, sp, #72	; 0x48
   2e318:	f7ff ff7d 	bl	2e216 <sys_memcpy_swap>
	m[58] = a2->type;
   2e31c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   2e31e:	f814 3b01 	ldrb.w	r3, [r4], #1
   2e322:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2e326:	4621      	mov	r1, r4
   2e328:	2206      	movs	r2, #6
   2e32a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2e32e:	f7fd fcb7 	bl	2bca0 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2e332:	4621      	mov	r1, r4
   2e334:	2206      	movs	r2, #6
   2e336:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2e33a:	f7ff ff6c 	bl	2e216 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2e33e:	2210      	movs	r2, #16
   2e340:	4629      	mov	r1, r5
   2e342:	a801      	add	r0, sp, #4
   2e344:	f7ff ff67 	bl	2e216 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   2e348:	463b      	mov	r3, r7
   2e34a:	2241      	movs	r2, #65	; 0x41
   2e34c:	a905      	add	r1, sp, #20
   2e34e:	a801      	add	r0, sp, #4
   2e350:	f7ff ff79 	bl	2e246 <bt_crypto_aes_cmac>
	if (err) {
   2e354:	4604      	mov	r4, r0
   2e356:	b910      	cbnz	r0, 2e35e <bt_crypto_f6+0x92>
	sys_mem_swap(check, 16);
   2e358:	4638      	mov	r0, r7
   2e35a:	f7ff ff66 	bl	2e22a <sys_mem_swap.constprop.0>
}
   2e35e:	4620      	mov	r0, r4
   2e360:	b017      	add	sp, #92	; 0x5c
   2e362:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002e364 <fixed_data_unref>:
}
   2e364:	4770      	bx	lr

0002e366 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2e366:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2e368:	6849      	ldr	r1, [r1, #4]
   2e36a:	6809      	ldr	r1, [r1, #0]
   2e36c:	f7f2 bac6 	b.w	208fc <net_buf_alloc_len>

0002e370 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   2e370:	f7f6 bfc6 	b.w	25300 <z_impl_k_queue_get>

0002e374 <net_buf_slist_put>:
	__asm__ volatile(
   2e374:	f04f 0340 	mov.w	r3, #64	; 0x40
   2e378:	f3ef 8211 	mrs	r2, BASEPRI
   2e37c:	f383 8812 	msr	BASEPRI_MAX, r3
   2e380:	f3bf 8f6f 	isb	sy
	parent->next = child;
   2e384:	2300      	movs	r3, #0
   2e386:	600b      	str	r3, [r1, #0]
	return list->tail;
   2e388:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   2e38a:	b933      	cbnz	r3, 2e39a <net_buf_slist_put+0x26>
	list->head = node;
   2e38c:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   2e390:	f382 8811 	msr	BASEPRI, r2
   2e394:	f3bf 8f6f 	isb	sy
}
   2e398:	4770      	bx	lr
	parent->next = child;
   2e39a:	6019      	str	r1, [r3, #0]
	list->tail = node;
   2e39c:	6041      	str	r1, [r0, #4]
}
   2e39e:	e7f7      	b.n	2e390 <net_buf_slist_put+0x1c>

0002e3a0 <net_buf_slist_get>:
{
   2e3a0:	b510      	push	{r4, lr}
   2e3a2:	4603      	mov	r3, r0
	__asm__ volatile(
   2e3a4:	f04f 0240 	mov.w	r2, #64	; 0x40
   2e3a8:	f3ef 8111 	mrs	r1, BASEPRI
   2e3ac:	f382 8812 	msr	BASEPRI_MAX, r2
   2e3b0:	f3bf 8f6f 	isb	sy
	return list->head;
   2e3b4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2e3b6:	b128      	cbz	r0, 2e3c4 <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2e3b8:	685c      	ldr	r4, [r3, #4]
	return node->next;
   2e3ba:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2e3bc:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2e3be:	42a0      	cmp	r0, r4
	list->tail = node;
   2e3c0:	bf08      	it	eq
   2e3c2:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   2e3c4:	f381 8811 	msr	BASEPRI, r1
   2e3c8:	f3bf 8f6f 	isb	sy
}
   2e3cc:	bd10      	pop	{r4, pc}

0002e3ce <net_buf_put>:
	k_fifo_put(fifo, buf);
   2e3ce:	f000 bde7 	b.w	2efa0 <k_queue_append>

0002e3d2 <net_buf_ref>:
	buf->ref++;
   2e3d2:	7a02      	ldrb	r2, [r0, #8]
   2e3d4:	3201      	adds	r2, #1
   2e3d6:	7202      	strb	r2, [r0, #8]
}
   2e3d8:	4770      	bx	lr

0002e3da <net_buf_frag_last>:
{
   2e3da:	4603      	mov	r3, r0
	while (buf->frags) {
   2e3dc:	4618      	mov	r0, r3
   2e3de:	685b      	ldr	r3, [r3, #4]
   2e3e0:	2b00      	cmp	r3, #0
   2e3e2:	d1fb      	bne.n	2e3dc <net_buf_frag_last+0x2>
}
   2e3e4:	4770      	bx	lr

0002e3e6 <net_buf_frag_insert>:
	if (parent->frags) {
   2e3e6:	6842      	ldr	r2, [r0, #4]
{
   2e3e8:	b510      	push	{r4, lr}
	if (parent->frags) {
   2e3ea:	b12a      	cbz	r2, 2e3f8 <net_buf_frag_insert+0x12>
   2e3ec:	460b      	mov	r3, r1
	while (buf->frags) {
   2e3ee:	461c      	mov	r4, r3
   2e3f0:	685b      	ldr	r3, [r3, #4]
   2e3f2:	2b00      	cmp	r3, #0
   2e3f4:	d1fb      	bne.n	2e3ee <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2e3f6:	6062      	str	r2, [r4, #4]
	parent->frags = frag;
   2e3f8:	6041      	str	r1, [r0, #4]
}
   2e3fa:	bd10      	pop	{r4, pc}

0002e3fc <net_buf_frag_add>:
{
   2e3fc:	b510      	push	{r4, lr}
	if (!head) {
   2e3fe:	4604      	mov	r4, r0
   2e400:	b920      	cbnz	r0, 2e40c <net_buf_frag_add+0x10>
	buf->ref++;
   2e402:	7a0b      	ldrb	r3, [r1, #8]
   2e404:	3301      	adds	r3, #1
   2e406:	720b      	strb	r3, [r1, #8]
		return net_buf_ref(frag);
   2e408:	4608      	mov	r0, r1
}
   2e40a:	bd10      	pop	{r4, pc}
   2e40c:	4603      	mov	r3, r0
	while (buf->frags) {
   2e40e:	4618      	mov	r0, r3
   2e410:	685b      	ldr	r3, [r3, #4]
   2e412:	2b00      	cmp	r3, #0
   2e414:	d1fb      	bne.n	2e40e <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2e416:	f7ff ffe6 	bl	2e3e6 <net_buf_frag_insert>
   2e41a:	4620      	mov	r0, r4
   2e41c:	e7f5      	b.n	2e40a <net_buf_frag_add+0xe>

0002e41e <net_buf_simple_init_with_data>:
void net_buf_simple_init_with_data(struct net_buf_simple *buf,
				   void *data, size_t size)
{
	buf->__buf = data;
	buf->data  = data;
	buf->size  = size;
   2e41e:	b292      	uxth	r2, r2
	buf->__buf = data;
   2e420:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2e422:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2e424:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2e426:	8082      	strh	r2, [r0, #4]
}
   2e428:	4770      	bx	lr

0002e42a <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   2e42a:	6883      	ldr	r3, [r0, #8]
   2e42c:	440b      	add	r3, r1
   2e42e:	6003      	str	r3, [r0, #0]
}
   2e430:	4770      	bx	lr

0002e432 <net_buf_simple_add>:
	return buf->data + buf->len;
   2e432:	8883      	ldrh	r3, [r0, #4]
   2e434:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2e436:	4419      	add	r1, r3
   2e438:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2e43a:	18d0      	adds	r0, r2, r3
   2e43c:	4770      	bx	lr

0002e43e <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2e43e:	b430      	push	{r4, r5}
   2e440:	8884      	ldrh	r4, [r0, #4]
   2e442:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2e444:	18a3      	adds	r3, r4, r2
   2e446:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2e448:	1928      	adds	r0, r5, r4
}
   2e44a:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2e44c:	f7fd bc28 	b.w	2bca0 <memcpy>

0002e450 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2e450:	b510      	push	{r4, lr}
   2e452:	8883      	ldrh	r3, [r0, #4]
   2e454:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   2e456:	1c5c      	adds	r4, r3, #1
   2e458:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2e45a:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2e45c:	18d0      	adds	r0, r2, r3
   2e45e:	bd10      	pop	{r4, pc}

0002e460 <net_buf_simple_add_le16>:
   2e460:	8883      	ldrh	r3, [r0, #4]
   2e462:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   2e464:	b530      	push	{r4, r5, lr}
   2e466:	18d4      	adds	r4, r2, r3
	buf->len += len;
   2e468:	1c9d      	adds	r5, r3, #2
   2e46a:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   2e46c:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   2e46e:	0a09      	lsrs	r1, r1, #8
   2e470:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   2e472:	bd30      	pop	{r4, r5, pc}

0002e474 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2e474:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2e476:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2e478:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2e47a:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2e47c:	4411      	add	r1, r2
	buf->data -= len;
   2e47e:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2e480:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2e482:	4770      	bx	lr

0002e484 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2e484:	8882      	ldrh	r2, [r0, #4]
   2e486:	1a52      	subs	r2, r2, r1
{
   2e488:	4603      	mov	r3, r0
	buf->len -= len;
   2e48a:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2e48c:	6800      	ldr	r0, [r0, #0]
   2e48e:	4408      	add	r0, r1
   2e490:	6018      	str	r0, [r3, #0]
}
   2e492:	4770      	bx	lr

0002e494 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2e494:	4603      	mov	r3, r0
	void *data = buf->data;
   2e496:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2e498:	889a      	ldrh	r2, [r3, #4]
   2e49a:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2e49c:	4401      	add	r1, r0
	buf->len -= len;
   2e49e:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2e4a0:	6019      	str	r1, [r3, #0]

	return data;
}
   2e4a2:	4770      	bx	lr

0002e4a4 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   2e4a4:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   2e4a6:	6803      	ldr	r3, [r0, #0]
   2e4a8:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2e4aa:	2101      	movs	r1, #1
   2e4ac:	f7ff ffea 	bl	2e484 <net_buf_simple_pull>

	return val;
}
   2e4b0:	4620      	mov	r0, r4
   2e4b2:	bd10      	pop	{r4, pc}

0002e4b4 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2e4b4:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2e4b6:	6803      	ldr	r3, [r0, #0]
   2e4b8:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2e4ba:	2102      	movs	r1, #2
   2e4bc:	f7ff ffe2 	bl	2e484 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2e4c0:	4620      	mov	r0, r4
   2e4c2:	bd10      	pop	{r4, pc}

0002e4c4 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2e4c4:	6802      	ldr	r2, [r0, #0]
   2e4c6:	6880      	ldr	r0, [r0, #8]
}
   2e4c8:	1a10      	subs	r0, r2, r0
   2e4ca:	4770      	bx	lr

0002e4cc <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2e4cc:	8883      	ldrh	r3, [r0, #4]
   2e4ce:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2e4d0:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2e4d2:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2e4d4:	6803      	ldr	r3, [r0, #0]
   2e4d6:	1a5b      	subs	r3, r3, r1
}
   2e4d8:	1ad0      	subs	r0, r2, r3
   2e4da:	4770      	bx	lr

0002e4dc <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2e4dc:	6903      	ldr	r3, [r0, #16]
   2e4de:	b2c9      	uxtb	r1, r1
   2e4e0:	220c      	movs	r2, #12
   2e4e2:	fb01 3302 	mla	r3, r1, r2, r3
   2e4e6:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   2e4e8:	f000 0007 	and.w	r0, r0, #7
   2e4ec:	4770      	bx	lr

0002e4ee <set_on_state>:
	__asm__ volatile(
   2e4ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   2e4f2:	f3ef 8211 	mrs	r2, BASEPRI
   2e4f6:	f383 8812 	msr	BASEPRI_MAX, r3
   2e4fa:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2e4fe:	6803      	ldr	r3, [r0, #0]
   2e500:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2e504:	f043 0302 	orr.w	r3, r3, #2
   2e508:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2e50a:	f382 8811 	msr	BASEPRI, r2
   2e50e:	f3bf 8f6f 	isb	sy
}
   2e512:	4770      	bx	lr

0002e514 <stop>:
{
   2e514:	b570      	push	{r4, r5, r6, lr}
   2e516:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   2e518:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   2e51a:	f04f 0440 	mov.w	r4, #64	; 0x40
   2e51e:	f3ef 8511 	mrs	r5, BASEPRI
   2e522:	f384 8812 	msr	BASEPRI_MAX, r4
   2e526:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2e52a:	260c      	movs	r6, #12
   2e52c:	fb06 3401 	mla	r4, r6, r1, r3
   2e530:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2e532:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2e536:	d008      	beq.n	2e54a <stop+0x36>
   2e538:	42a2      	cmp	r2, r4
   2e53a:	d006      	beq.n	2e54a <stop+0x36>
	__asm__ volatile(
   2e53c:	f385 8811 	msr	BASEPRI, r5
   2e540:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   2e544:	f04f 30ff 	mov.w	r0, #4294967295
}
   2e548:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2e54a:	4371      	muls	r1, r6
   2e54c:	440b      	add	r3, r1
   2e54e:	2201      	movs	r2, #1
   2e550:	641a      	str	r2, [r3, #64]	; 0x40
   2e552:	f385 8811 	msr	BASEPRI, r5
   2e556:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   2e55a:	6843      	ldr	r3, [r0, #4]
   2e55c:	440b      	add	r3, r1
   2e55e:	685b      	ldr	r3, [r3, #4]
   2e560:	4798      	blx	r3
	return 0;
   2e562:	2000      	movs	r0, #0
   2e564:	e7f0      	b.n	2e548 <stop+0x34>

0002e566 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2e566:	2280      	movs	r2, #128	; 0x80
   2e568:	f7ff bfd4 	b.w	2e514 <stop>

0002e56c <async_start>:
{
   2e56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e56e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2e570:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2e572:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2e574:	f04f 0540 	mov.w	r5, #64	; 0x40
   2e578:	f3ef 8611 	mrs	r6, BASEPRI
   2e57c:	f385 8812 	msr	BASEPRI_MAX, r5
   2e580:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2e584:	250c      	movs	r5, #12
   2e586:	4369      	muls	r1, r5
   2e588:	440c      	add	r4, r1
   2e58a:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2e58c:	f005 0c07 	and.w	ip, r5, #7
   2e590:	f1bc 0f01 	cmp.w	ip, #1
   2e594:	d10b      	bne.n	2e5ae <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2e596:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   2e598:	f386 8811 	msr	BASEPRI, r6
   2e59c:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2e5a0:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2e5a4:	6843      	ldr	r3, [r0, #4]
   2e5a6:	585b      	ldr	r3, [r3, r1]
   2e5a8:	4798      	blx	r3
	return 0;
   2e5aa:	2000      	movs	r0, #0
}
   2e5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2e5ae:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2e5b2:	42af      	cmp	r7, r5
   2e5b4:	f386 8811 	msr	BASEPRI, r6
   2e5b8:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2e5bc:	bf0c      	ite	eq
   2e5be:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2e5c2:	f04f 30ff 	movne.w	r0, #4294967295
   2e5c6:	e7f1      	b.n	2e5ac <async_start+0x40>

0002e5c8 <api_start>:
{
   2e5c8:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2e5ca:	2480      	movs	r4, #128	; 0x80
   2e5cc:	9400      	str	r4, [sp, #0]
   2e5ce:	f7ff ffcd 	bl	2e56c <async_start>
}
   2e5d2:	b002      	add	sp, #8
   2e5d4:	bd10      	pop	{r4, pc}

0002e5d6 <onoff_started_callback>:
{
   2e5d6:	b410      	push	{r4}
	return &data->mgr[type];
   2e5d8:	6900      	ldr	r0, [r0, #16]
   2e5da:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2e5dc:	241c      	movs	r4, #28
   2e5de:	fb03 0004 	mla	r0, r3, r4, r0
   2e5e2:	2100      	movs	r1, #0
}
   2e5e4:	bc10      	pop	{r4}
	notify(mgr, 0);
   2e5e6:	4710      	bx	r2

0002e5e8 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2e5e8:	2000      	movs	r0, #0
   2e5ea:	f7f5 b983 	b.w	238f4 <nrfx_clock_start>

0002e5ee <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2e5ee:	2000      	movs	r0, #0
   2e5f0:	f000 bac8 	b.w	2eb84 <nrfx_clock_stop>

0002e5f4 <blocking_start_callback>:
{
   2e5f4:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2e5f6:	f7f6 beb7 	b.w	25368 <z_impl_k_sem_give>

0002e5fa <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2e5fa:	2000      	movs	r0, #0
   2e5fc:	4770      	bx	lr

0002e5fe <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2e5fe:	b538      	push	{r3, r4, r5, lr}
   2e600:	460c      	mov	r4, r1
   2e602:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2e604:	f7e9 fee4 	bl	183d0 <bt_is_ready>
   2e608:	b128      	cbz	r0, 2e616 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2e60a:	4629      	mov	r1, r5
   2e60c:	4620      	mov	r0, r4
}
   2e60e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2e612:	f7e9 b989 	b.w	17928 <bt_hci_le_rand>
}
   2e616:	f06f 000a 	mvn.w	r0, #10
   2e61a:	bd38      	pop	{r3, r4, r5, pc}

0002e61c <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   2e61c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2e61e:	460f      	mov	r7, r1
   2e620:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
	int err = EINVAL;

	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   2e622:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   2e626:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   2e628:	42a6      	cmp	r6, r4
   2e62a:	d803      	bhi.n	2e634 <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   2e62c:	d016      	beq.n	2e65c <entropy_cc3xx_rng_get_entropy+0x40>
	int err = EINVAL;
   2e62e:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
   2e630:	b003      	add	sp, #12
   2e632:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2e634:	1b33      	subs	r3, r6, r4
   2e636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2e63a:	bf38      	it	cc
   2e63c:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   2e63e:	462a      	mov	r2, r5
   2e640:	ab01      	add	r3, sp, #4
   2e642:	1939      	adds	r1, r7, r4
   2e644:	2000      	movs	r0, #0
   2e646:	f7f8 fab3 	bl	26bb0 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   2e64a:	b920      	cbnz	r0, 2e656 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   2e64c:	9b01      	ldr	r3, [sp, #4]
   2e64e:	42ab      	cmp	r3, r5
   2e650:	d101      	bne.n	2e656 <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   2e652:	442c      	add	r4, r5
   2e654:	e7e8      	b.n	2e628 <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   2e656:	f06f 0015 	mvn.w	r0, #21
   2e65a:	e7e9      	b.n	2e630 <entropy_cc3xx_rng_get_entropy+0x14>
		err = 0;
   2e65c:	2000      	movs	r0, #0
   2e65e:	e7e7      	b.n	2e630 <entropy_cc3xx_rng_get_entropy+0x14>

0002e660 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2e660:	2200      	movs	r2, #0
{
   2e662:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2e664:	4611      	mov	r1, r2
   2e666:	4610      	mov	r0, r2
   2e668:	f7f8 fa72 	bl	26b50 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   2e66c:	2800      	cmp	r0, #0
	}

	return 0;
}
   2e66e:	bf18      	it	ne
   2e670:	f06f 0015 	mvnne.w	r0, #21
   2e674:	bd08      	pop	{r3, pc}

0002e676 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2e676:	b918      	cbnz	r0, 2e680 <qspi_handler+0xa>
   2e678:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2e67c:	f7f6 be74 	b.w	25368 <z_impl_k_sem_give>
}
   2e680:	4770      	bx	lr

0002e682 <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2e682:	f04f 32ff 	mov.w	r2, #4294967295
   2e686:	f04f 33ff 	mov.w	r3, #4294967295
   2e68a:	3018      	adds	r0, #24
   2e68c:	f7f6 be92 	b.w	253b4 <z_impl_k_sem_take>

0002e690 <qspi_trans_lock.isra.0>:
   2e690:	f04f 32ff 	mov.w	r2, #4294967295
   2e694:	f04f 33ff 	mov.w	r3, #4294967295
   2e698:	f7f6 be8c 	b.w	253b4 <z_impl_k_sem_take>

0002e69c <qspi_unlock.isra.0>:
	z_impl_k_sem_give(sem);
   2e69c:	3018      	adds	r0, #24
   2e69e:	f7f6 be63 	b.w	25368 <z_impl_k_sem_give>

0002e6a2 <qspi_nor_write_protection_set>:
{
   2e6a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   2e6a4:	2200      	movs	r2, #0
   2e6a6:	4291      	cmp	r1, r2
   2e6a8:	bf0c      	ite	eq
   2e6aa:	2306      	moveq	r3, #6
   2e6ac:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2e6ae:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   2e6b0:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2e6b4:	9203      	str	r2, [sp, #12]
   2e6b6:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2e6ba:	f7f2 fd61 	bl	21180 <qspi_send_cmd>
		ret = -EIO;
   2e6be:	2800      	cmp	r0, #0
}
   2e6c0:	bf18      	it	ne
   2e6c2:	f06f 0004 	mvnne.w	r0, #4
   2e6c6:	b005      	add	sp, #20
   2e6c8:	f85d fb04 	ldr.w	pc, [sp], #4

0002e6cc <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   2e6cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2e6ce:	23ff      	movs	r3, #255	; 0xff
   2e6d0:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   2e6d4:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   2e6d8:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   2e6da:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   2e6dc:	2301      	movs	r3, #1
   2e6de:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2e6e2:	2305      	movs	r3, #5
   2e6e4:	f88d 300c 	strb.w	r3, [sp, #12]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2e6e8:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   2e6ea:	ab01      	add	r3, sp, #4
   2e6ec:	9204      	str	r2, [sp, #16]
   2e6ee:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2e6f0:	f7f2 fd46 	bl	21180 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   2e6f4:	2800      	cmp	r0, #0
   2e6f6:	bfa8      	it	ge
   2e6f8:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   2e6fc:	b007      	add	sp, #28
   2e6fe:	f85d fb04 	ldr.w	pc, [sp], #4

0002e702 <is_regular_addr_valid>:
{
   2e702:	b538      	push	{r3, r4, r5, lr}
   2e704:	4605      	mov	r5, r0
   2e706:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2e708:	f000 faad 	bl	2ec66 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2e70c:	2d00      	cmp	r5, #0
   2e70e:	db07      	blt.n	2e720 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2e710:	42a8      	cmp	r0, r5
   2e712:	d905      	bls.n	2e720 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2e714:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2e716:	4284      	cmp	r4, r0
   2e718:	bf8c      	ite	hi
   2e71a:	2000      	movhi	r0, #0
   2e71c:	2001      	movls	r0, #1
}
   2e71e:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2e720:	2000      	movs	r0, #0
   2e722:	e7fc      	b.n	2e71e <is_regular_addr_valid+0x1c>

0002e724 <flash_nrf_read>:
{
   2e724:	b570      	push	{r4, r5, r6, lr}
   2e726:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   2e728:	4628      	mov	r0, r5
   2e72a:	4619      	mov	r1, r3
{
   2e72c:	4616      	mov	r6, r2
   2e72e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2e730:	f7ff ffe7 	bl	2e702 <is_regular_addr_valid>
   2e734:	b928      	cbnz	r0, 2e742 <flash_nrf_read+0x1e>
   2e736:	4621      	mov	r1, r4
   2e738:	4628      	mov	r0, r5
}
   2e73a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2e73e:	f7f3 b8ed 	b.w	2191c <flash_nrf_read.part.0>
	if (!len) {
   2e742:	b124      	cbz	r4, 2e74e <flash_nrf_read+0x2a>
	memcpy(data, (void *)addr, len);
   2e744:	4622      	mov	r2, r4
   2e746:	4629      	mov	r1, r5
   2e748:	4630      	mov	r0, r6
   2e74a:	f7fd faa9 	bl	2bca0 <memcpy>
}
   2e74e:	2000      	movs	r0, #0
   2e750:	bd70      	pop	{r4, r5, r6, pc}

0002e752 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2e752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2e754:	461c      	mov	r4, r3
   2e756:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2e758:	2300      	movs	r3, #0
	const struct flash_driver_api *api = dev->api;
   2e75a:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2e75c:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2e75e:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   2e760:	6913      	ldr	r3, [r2, #16]
{
   2e762:	460d      	mov	r5, r1
	api->page_layout(dev, &layout, &layout_size);
   2e764:	aa01      	add	r2, sp, #4
   2e766:	4669      	mov	r1, sp
   2e768:	4798      	blx	r3

	while (layout_size--) {
   2e76a:	9b01      	ldr	r3, [sp, #4]
   2e76c:	1e5a      	subs	r2, r3, #1
   2e76e:	9201      	str	r2, [sp, #4]
   2e770:	b91b      	cbnz	r3, 2e77a <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2e772:	f06f 0015 	mvn.w	r0, #21
}
   2e776:	b003      	add	sp, #12
   2e778:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   2e77a:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2e77c:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2e77e:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2e780:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   2e782:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   2e784:	b985      	cbnz	r5, 2e7a8 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   2e786:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2e788:	f8d0 c000 	ldr.w	ip, [r0]
   2e78c:	4563      	cmp	r3, ip
   2e78e:	bf28      	it	cs
   2e790:	4663      	movcs	r3, ip
		info->index += index_jmp;
   2e792:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   2e794:	fb03 1107 	mla	r1, r3, r7, r1
   2e798:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   2e79a:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2e79c:	6802      	ldr	r2, [r0, #0]
   2e79e:	429a      	cmp	r2, r3
   2e7a0:	d806      	bhi.n	2e7b0 <flash_get_page_info+0x5e>
		layout++;
   2e7a2:	3008      	adds	r0, #8
   2e7a4:	9000      	str	r0, [sp, #0]
   2e7a6:	e7e0      	b.n	2e76a <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   2e7a8:	1a6b      	subs	r3, r5, r1
   2e7aa:	fbb3 f3f7 	udiv	r3, r3, r7
   2e7ae:	e7eb      	b.n	2e788 <flash_get_page_info+0x36>
			return 0;
   2e7b0:	2000      	movs	r0, #0
   2e7b2:	e7e0      	b.n	2e776 <flash_get_page_info+0x24>

0002e7b4 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2e7b4:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2e7b6:	2200      	movs	r2, #0
   2e7b8:	f7ff bfcb 	b.w	2e752 <flash_get_page_info>

0002e7bc <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2e7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2e7c0:	6883      	ldr	r3, [r0, #8]
{
   2e7c2:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   2e7c4:	691b      	ldr	r3, [r3, #16]
{
   2e7c6:	4688      	mov	r8, r1
   2e7c8:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2e7ca:	a901      	add	r1, sp, #4
   2e7cc:	aa02      	add	r2, sp, #8
   2e7ce:	4798      	blx	r3
	off_t off = 0;
   2e7d0:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2e7d2:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2e7d4:	4625      	mov	r5, r4
   2e7d6:	9b02      	ldr	r3, [sp, #8]
   2e7d8:	42ab      	cmp	r3, r5
   2e7da:	d802      	bhi.n	2e7e2 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2e7dc:	b006      	add	sp, #24
   2e7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   2e7e2:	9f01      	ldr	r7, [sp, #4]
   2e7e4:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2e7e8:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   2e7ea:	687b      	ldr	r3, [r7, #4]
   2e7ec:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2e7ee:	683a      	ldr	r2, [r7, #0]
   2e7f0:	42b2      	cmp	r2, r6
   2e7f2:	eb0a 0306 	add.w	r3, sl, r6
   2e7f6:	d802      	bhi.n	2e7fe <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2e7f8:	3501      	adds	r5, #1
   2e7fa:	469a      	mov	sl, r3
   2e7fc:	e7eb      	b.n	2e7d6 <flash_page_foreach+0x1a>
			page_info.start_offset = off;
   2e7fe:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2e800:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2e802:	4649      	mov	r1, r9
   2e804:	a803      	add	r0, sp, #12
   2e806:	47c0      	blx	r8
   2e808:	2800      	cmp	r0, #0
   2e80a:	d0e7      	beq.n	2e7dc <flash_page_foreach+0x20>
			off += page_info.size;
   2e80c:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2e80e:	3601      	adds	r6, #1
			off += page_info.size;
   2e810:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2e812:	e7ec      	b.n	2e7ee <flash_page_foreach+0x32>

0002e814 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e814:	6843      	ldr	r3, [r0, #4]
   2e816:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2e818:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2e81c:	600b      	str	r3, [r1, #0]
}
   2e81e:	2000      	movs	r0, #0
   2e820:	4770      	bx	lr

0002e822 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e822:	6843      	ldr	r3, [r0, #4]
   2e824:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2e826:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2e82a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2e82e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2e832:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2e836:	2000      	movs	r0, #0
   2e838:	4770      	bx	lr

0002e83a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e83a:	6843      	ldr	r3, [r0, #4]
   2e83c:	685b      	ldr	r3, [r3, #4]
}
   2e83e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2e840:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2e844:	4770      	bx	lr

0002e846 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e846:	6843      	ldr	r3, [r0, #4]
   2e848:	685b      	ldr	r3, [r3, #4]
}
   2e84a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2e84c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2e850:	4770      	bx	lr

0002e852 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e852:	6843      	ldr	r3, [r0, #4]
   2e854:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2e856:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2e85a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2e85e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2e860:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2e864:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2e868:	2000      	movs	r0, #0
   2e86a:	4770      	bx	lr

0002e86c <gpio_nrfx_manage_callback>:
{
   2e86c:	b510      	push	{r4, lr}
	return port->data;
   2e86e:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2e870:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   2e872:	b1f8      	cbz	r0, 2e8b4 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e874:	4288      	cmp	r0, r1
   2e876:	d119      	bne.n	2e8ac <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   2e878:	689c      	ldr	r4, [r3, #8]
	return node->next;
   2e87a:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   2e87c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2e87e:	42a1      	cmp	r1, r4
   2e880:	d100      	bne.n	2e884 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2e882:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2e884:	2000      	movs	r0, #0
   2e886:	6008      	str	r0, [r1, #0]
	if (set) {
   2e888:	b12a      	cbz	r2, 2e896 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   2e88a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2e88c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2e88e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2e890:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2e892:	b902      	cbnz	r2, 2e896 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   2e894:	6099      	str	r1, [r3, #8]
	return 0;
   2e896:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2e898:	e010      	b.n	2e8bc <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e89a:	4281      	cmp	r1, r0
   2e89c:	d106      	bne.n	2e8ac <gpio_nrfx_manage_callback+0x40>
	return node->next;
   2e89e:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   2e8a0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e8a2:	6898      	ldr	r0, [r3, #8]
   2e8a4:	4281      	cmp	r1, r0
   2e8a6:	d1ed      	bne.n	2e884 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2e8a8:	609c      	str	r4, [r3, #8]
}
   2e8aa:	e7eb      	b.n	2e884 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   2e8ac:	4604      	mov	r4, r0
   2e8ae:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e8b0:	2800      	cmp	r0, #0
   2e8b2:	d1f2      	bne.n	2e89a <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   2e8b4:	2a00      	cmp	r2, #0
   2e8b6:	d1e8      	bne.n	2e88a <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   2e8b8:	f06f 0015 	mvn.w	r0, #21
}
   2e8bc:	bd10      	pop	{r4, pc}

0002e8be <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2e8be:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2e8c0:	6843      	ldr	r3, [r0, #4]
   2e8c2:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2e8c4:	7a05      	ldrb	r5, [r0, #8]
   2e8c6:	6844      	ldr	r4, [r0, #4]
   2e8c8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2e8cc:	42a3      	cmp	r3, r4
   2e8ce:	d302      	bcc.n	2e8d6 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2e8d0:	f06f 0001 	mvn.w	r0, #1
}
   2e8d4:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2e8d6:	795c      	ldrb	r4, [r3, #5]
   2e8d8:	428c      	cmp	r4, r1
   2e8da:	d001      	beq.n	2e8e0 <pinctrl_lookup_state+0x22>
		(*state)++;
   2e8dc:	3308      	adds	r3, #8
   2e8de:	e7f0      	b.n	2e8c2 <pinctrl_lookup_state+0x4>
			return 0;
   2e8e0:	2000      	movs	r0, #0
   2e8e2:	e7f7      	b.n	2e8d4 <pinctrl_lookup_state+0x16>

0002e8e4 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   2e8e4:	6902      	ldr	r2, [r0, #16]
{
   2e8e6:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2e8e8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2e8ec:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2e8f0:	2000      	movs	r0, #0
   2e8f2:	4770      	bx	lr

0002e8f4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2e8f4:	6843      	ldr	r3, [r0, #4]
   2e8f6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2e8f8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2e8fc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2e900:	4770      	bx	lr

0002e902 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2e902:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2e904:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2e906:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e908:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e90c:	b150      	cbz	r0, 2e924 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   2e90e:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e910:	2000      	movs	r0, #0
   2e912:	7812      	ldrb	r2, [r2, #0]
   2e914:	700a      	strb	r2, [r1, #0]
   2e916:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2e91a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e91e:	2201      	movs	r2, #1
   2e920:	601a      	str	r2, [r3, #0]
	return 0;
   2e922:	4770      	bx	lr
		return -1;
   2e924:	f04f 30ff 	mov.w	r0, #4294967295
}
   2e928:	4770      	bx	lr

0002e92a <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2e92a:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2e92c:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e92e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e932:	b940      	cbnz	r0, 2e946 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2e934:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e936:	079b      	lsls	r3, r3, #30
   2e938:	d406      	bmi.n	2e948 <is_tx_ready.isra.0+0x1e>
   2e93a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2e93e:	3800      	subs	r0, #0
   2e940:	bf18      	it	ne
   2e942:	2001      	movne	r0, #1
   2e944:	4770      	bx	lr
   2e946:	2001      	movs	r0, #1
}
   2e948:	4770      	bx	lr

0002e94a <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   2e94a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2e94c:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2e94e:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2e952:	05c9      	lsls	r1, r1, #23
   2e954:	d518      	bpl.n	2e988 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e956:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2e95a:	b1a9      	cbz	r1, 2e988 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   2e95c:	f04f 0040 	mov.w	r0, #64	; 0x40
   2e960:	f3ef 8111 	mrs	r1, BASEPRI
   2e964:	f380 8812 	msr	BASEPRI_MAX, r0
   2e968:	f3bf 8f6f 	isb	sy
   2e96c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2e970:	b130      	cbz	r0, 2e980 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e972:	2000      	movs	r0, #0
   2e974:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   2e978:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e97c:	2001      	movs	r0, #1
   2e97e:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   2e980:	f381 8811 	msr	BASEPRI, r1
   2e984:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2e988:	6852      	ldr	r2, [r2, #4]
   2e98a:	06d2      	lsls	r2, r2, #27
   2e98c:	d515      	bpl.n	2e9ba <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   2e98e:	f04f 0140 	mov.w	r1, #64	; 0x40
   2e992:	f3ef 8211 	mrs	r2, BASEPRI
   2e996:	f381 8812 	msr	BASEPRI_MAX, r1
   2e99a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e99e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2e9a2:	b111      	cbz	r1, 2e9aa <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2e9a4:	2100      	movs	r1, #0
   2e9a6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2e9aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2e9ae:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   2e9b2:	f382 8811 	msr	BASEPRI, r2
   2e9b6:	f3bf 8f6f 	isb	sy
}
   2e9ba:	4770      	bx	lr

0002e9bc <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2e9bc:	4770      	bx	lr

0002e9be <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2e9be:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2e9c2:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2e9c4:	b29b      	uxth	r3, r3
   2e9c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2e9ca:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2e9ce:	2200      	movs	r2, #0
   2e9d0:	601a      	str	r2, [r3, #0]
   2e9d2:	681b      	ldr	r3, [r3, #0]
}
   2e9d4:	4770      	bx	lr

0002e9d6 <sys_clock_cycle_get_32>:
{
   2e9d6:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2e9d8:	f7f3 fd94 	bl	22504 <z_nrf_rtc_timer_read>
}
   2e9dc:	bd08      	pop	{r3, pc}

0002e9de <hci_driver_close>:
{
   2e9de:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   2e9e0:	f7f4 feac 	bl	2373c <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2e9e4:	f04f 30ff 	mov.w	r0, #4294967295
   2e9e8:	f04f 31ff 	mov.w	r1, #4294967295
   2e9ec:	f7f3 ff36 	bl	2285c <multithreading_lock_acquire>
	if (err) {
   2e9f0:	4604      	mov	r4, r0
   2e9f2:	b920      	cbnz	r0, 2e9fe <hci_driver_close+0x20>
	err = sdc_disable();
   2e9f4:	f7d1 ff8e 	bl	914 <sdc_disable>
	if (err) {
   2e9f8:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   2e9fa:	f7f3 ff37 	bl	2286c <multithreading_lock_release>
}
   2e9fe:	4620      	mov	r0, r4
   2ea00:	bd10      	pop	{r4, pc}

0002ea02 <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   2ea02:	f7f3 bf7f 	b.w	22904 <rand_prio_low_vector_get>

0002ea06 <hci_driver_send>:
{
   2ea06:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2ea08:	8a03      	ldrh	r3, [r0, #16]
{
   2ea0a:	4605      	mov	r5, r0
	if (!buf->len) {
   2ea0c:	b373      	cbz	r3, 2ea6c <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2ea0e:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   2ea10:	b1a3      	cbz	r3, 2ea3c <hci_driver_send+0x36>
   2ea12:	2b02      	cmp	r3, #2
   2ea14:	d12a      	bne.n	2ea6c <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2ea16:	f04f 30ff 	mov.w	r0, #4294967295
   2ea1a:	f04f 31ff 	mov.w	r1, #4294967295
   2ea1e:	f7f3 ff1d 	bl	2285c <multithreading_lock_acquire>
	if (!errcode) {
   2ea22:	4604      	mov	r4, r0
   2ea24:	b940      	cbnz	r0, 2ea38 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   2ea26:	68e8      	ldr	r0, [r5, #12]
   2ea28:	f7de fe05 	bl	d636 <sdc_hci_data_put>
   2ea2c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2ea2e:	f7f3 ff1d 	bl	2286c <multithreading_lock_release>
		if (errcode) {
   2ea32:	b1b4      	cbz	r4, 2ea62 <hci_driver_send+0x5c>
			receive_signal_raise();
   2ea34:	f7f3 ff7a 	bl	2292c <receive_signal_raise>
}
   2ea38:	4620      	mov	r0, r4
   2ea3a:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2ea3c:	f04f 30ff 	mov.w	r0, #4294967295
   2ea40:	f04f 31ff 	mov.w	r1, #4294967295
   2ea44:	f7f3 ff0a 	bl	2285c <multithreading_lock_acquire>
	if (!errcode) {
   2ea48:	4604      	mov	r4, r0
   2ea4a:	2800      	cmp	r0, #0
   2ea4c:	d1f4      	bne.n	2ea38 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   2ea4e:	68e8      	ldr	r0, [r5, #12]
   2ea50:	f7f4 f906 	bl	22c60 <hci_internal_cmd_put>
   2ea54:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2ea56:	f7f3 ff09 	bl	2286c <multithreading_lock_release>
	if (errcode) {
   2ea5a:	2c00      	cmp	r4, #0
   2ea5c:	d1ec      	bne.n	2ea38 <hci_driver_send+0x32>
	receive_signal_raise();
   2ea5e:	f7f3 ff65 	bl	2292c <receive_signal_raise>
		net_buf_unref(buf);
   2ea62:	4628      	mov	r0, r5
   2ea64:	f7f1 ffdc 	bl	20a20 <net_buf_unref>
   2ea68:	2400      	movs	r4, #0
   2ea6a:	e7e5      	b.n	2ea38 <hci_driver_send+0x32>
	switch (type) {
   2ea6c:	f06f 0415 	mvn.w	r4, #21
   2ea70:	e7e2      	b.n	2ea38 <hci_driver_send+0x32>

0002ea72 <receive_work_handler>:
	hci_driver_receive_process();
   2ea72:	f7f4 b86b 	b.w	22b4c <hci_driver_receive_process>

0002ea76 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   2ea76:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ea78:	b08d      	sub	sp, #52	; 0x34
   2ea7a:	4615      	mov	r5, r2
   2ea7c:	466a      	mov	r2, sp
   2ea7e:	f100 0310 	add.w	r3, r0, #16
   2ea82:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   2ea84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2ea88:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   2ea8c:	4283      	cmp	r3, r0
   2ea8e:	d1f9      	bne.n	2ea84 <bt_encrypt_le+0xe>
   2ea90:	aa04      	add	r2, sp, #16
   2ea92:	f101 0310 	add.w	r3, r1, #16
   2ea96:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   2ea98:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2ea9c:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   2eaa0:	4299      	cmp	r1, r3
   2eaa2:	d1f9      	bne.n	2ea98 <bt_encrypt_le+0x22>
	LOG_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2eaa4:	f04f 30ff 	mov.w	r0, #4294967295
   2eaa8:	f04f 31ff 	mov.w	r1, #4294967295
   2eaac:	f7f3 fed6 	bl	2285c <multithreading_lock_acquire>

	if (!errcode) {
   2eab0:	4604      	mov	r4, r0
   2eab2:	b990      	cbnz	r0, 2eada <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   2eab4:	aa08      	add	r2, sp, #32
   2eab6:	4639      	mov	r1, r7
   2eab8:	4630      	mov	r0, r6
   2eaba:	f7de fa7c 	bl	cfb6 <sdc_soc_ecb_block_encrypt>
   2eabe:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2eac0:	f7f3 fed4 	bl	2286c <multithreading_lock_release>
	}

	if (!errcode) {
   2eac4:	b94c      	cbnz	r4, 2eada <bt_encrypt_le+0x64>
   2eac6:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   2eac8:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   2eacc:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   2eace:	f812 1901 	ldrb.w	r1, [r2], #-1
   2ead2:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   2ead6:	429d      	cmp	r5, r3
   2ead8:	d1f9      	bne.n	2eace <bt_encrypt_le+0x58>

		LOG_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   2eada:	4620      	mov	r0, r4
   2eadc:	b00d      	add	sp, #52	; 0x34
   2eade:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002eae0 <sys_memcpy_swap.constprop.0>:
   2eae0:	f101 0320 	add.w	r3, r1, #32
   2eae4:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   2eae6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2eaea:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2eaee:	428b      	cmp	r3, r1
   2eaf0:	d1f9      	bne.n	2eae6 <sys_memcpy_swap.constprop.0+0x6>
}
   2eaf2:	4770      	bx	lr

0002eaf4 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   2eaf4:	2100      	movs	r1, #0
   2eaf6:	f7f4 be43 	b.w	23780 <cmd_le_generate_dhkey>

0002eafa <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2eafa:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2eafe:	2901      	cmp	r1, #1
   2eb00:	d801      	bhi.n	2eb06 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2eb02:	f7f4 be3d 	b.w	23780 <cmd_le_generate_dhkey>
}
   2eb06:	2012      	movs	r0, #18
   2eb08:	4770      	bx	lr

0002eb0a <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2eb0a:	4668      	mov	r0, sp
   2eb0c:	f020 0107 	bic.w	r1, r0, #7
   2eb10:	468d      	mov	sp, r1
   2eb12:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2eb14:	f7dc fed4 	bl	b8c0 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2eb18:	f7e6 fca2 	bl	15460 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2eb1c:	f7e6 fd8a 	bl	15634 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2eb20:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2eb24:	4685      	mov	sp, r0
   2eb26:	4770      	bx	lr

0002eb28 <mpsl_low_prio_work_handler>:
{
   2eb28:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2eb2a:	f04f 31ff 	mov.w	r1, #4294967295
   2eb2e:	f04f 30ff 	mov.w	r0, #4294967295
   2eb32:	f7f3 fe93 	bl	2285c <multithreading_lock_acquire>
	mpsl_low_priority_process();
   2eb36:	f7e2 f97f 	bl	10e38 <mpsl_low_priority_process>
}
   2eb3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   2eb3e:	f7f3 be95 	b.w	2286c <multithreading_lock_release>

0002eb42 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2eb42:	4668      	mov	r0, sp
   2eb44:	f020 0107 	bic.w	r1, r0, #7
   2eb48:	468d      	mov	sp, r1
   2eb4a:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2eb4c:	f7dc fe6e 	bl	b82c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2eb50:	f7e6 fc86 	bl	15460 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2eb54:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2eb58:	4685      	mov	sp, r0
   2eb5a:	4770      	bx	lr

0002eb5c <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2eb5c:	4668      	mov	r0, sp
   2eb5e:	f020 0107 	bic.w	r1, r0, #7
   2eb62:	468d      	mov	sp, r1
   2eb64:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2eb66:	f7da fb1d 	bl	91a4 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2eb6a:	f7e6 fc79 	bl	15460 <_arch_isr_direct_pm>
   2eb6e:	f7e6 fd61 	bl	15634 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2eb72:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2eb76:	4685      	mov	sp, r0
   2eb78:	4770      	bx	lr

0002eb7a <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   2eb7a:	b508      	push	{r3, lr}

	mpsl_fem_init();
   2eb7c:	f7e2 fb44 	bl	11208 <mpsl_fem_init>

	return 0;
}
   2eb80:	2000      	movs	r0, #0
   2eb82:	bd08      	pop	{r3, pc}

0002eb84 <nrfx_clock_stop>:
	switch (domain) {
   2eb84:	2801      	cmp	r0, #1
   2eb86:	d101      	bne.n	2eb8c <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   2eb88:	f7dd bd48 	b.w	c61c <mpsl_clock_hfclk_release>
}
   2eb8c:	4770      	bx	lr

0002eb8e <nrfx_clock_enable>:
}
   2eb8e:	4770      	bx	lr

0002eb90 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2eb90:	f7dd bb4e 	b.w	c230 <MPSL_IRQ_CLOCK_Handler>

0002eb94 <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   2eb94:	f7dd bf08 	b.w	c9a8 <mpsl_is_initialized>

0002eb98 <nrf_flash_sync_get_timestamp_begin>:
}
   2eb98:	4770      	bx	lr

0002eb9a <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   2eb9a:	f7f7 bf83 	b.w	26aa4 <nrf_cc3xx_platform_init>

0002eb9e <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
   2eb9e:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2eba0:	f7e6 fa9a 	bl	150d8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2eba4:	f7e6 fb6e 	bl	15284 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
   2eba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   2ebac:	f7f7 bf7a 	b.w	26aa4 <nrf_cc3xx_platform_init>

0002ebb0 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2ebb0:	4700      	bx	r0

0002ebb2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2ebb2:	f000 bc73 	b.w	2f49c <z_impl_k_busy_wait>

0002ebb6 <nrf_gpio_reconfigure>:
{
   2ebb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ebb8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ebba:	a801      	add	r0, sp, #4
{
   2ebbc:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   2ebc0:	4616      	mov	r6, r2
   2ebc2:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ebc4:	f7f5 f8e8 	bl	23d98 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2ebc8:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2ebca:	f1b6 0c00 	subs.w	ip, r6, #0
   2ebce:	bf18      	it	ne
   2ebd0:	f04f 0c01 	movne.w	ip, #1
   2ebd4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2ebd8:	1e0b      	subs	r3, r1, #0
   2ebda:	bf18      	it	ne
   2ebdc:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2ebde:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2ebe0:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2ebe4:	bf14      	ite	ne
   2ebe6:	f04f 0c0c 	movne.w	ip, #12
   2ebea:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2ebee:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2ebf0:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2ebf4:	bf14      	ite	ne
   2ebf6:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   2ebfa:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2ebfe:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2ec00:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2ec04:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2ec08:	bf14      	ite	ne
   2ec0a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   2ec0e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2ec12:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   2ec16:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2ec1a:	b101      	cbz	r1, 2ec1e <nrf_gpio_reconfigure+0x68>
   2ec1c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2ec1e:	b10e      	cbz	r6, 2ec24 <nrf_gpio_reconfigure+0x6e>
   2ec20:	7836      	ldrb	r6, [r6, #0]
   2ec22:	0076      	lsls	r6, r6, #1
   2ec24:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2ec26:	b10d      	cbz	r5, 2ec2c <nrf_gpio_reconfigure+0x76>
   2ec28:	782d      	ldrb	r5, [r5, #0]
   2ec2a:	00ad      	lsls	r5, r5, #2
   2ec2c:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2ec2e:	b10c      	cbz	r4, 2ec34 <nrf_gpio_reconfigure+0x7e>
   2ec30:	7824      	ldrb	r4, [r4, #0]
   2ec32:	0224      	lsls	r4, r4, #8
   2ec34:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2ec36:	b10f      	cbz	r7, 2ec3c <nrf_gpio_reconfigure+0x86>
   2ec38:	783f      	ldrb	r7, [r7, #0]
   2ec3a:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2ec3c:	430c      	orrs	r4, r1
   2ec3e:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   2ec40:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2ec44:	b003      	add	sp, #12
   2ec46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ec48 <nrf_gpio_cfg_sense_set>:
{
   2ec48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2ec4a:	f10d 030f 	add.w	r3, sp, #15
   2ec4e:	9301      	str	r3, [sp, #4]
   2ec50:	2300      	movs	r3, #0
{
   2ec52:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2ec56:	9300      	str	r3, [sp, #0]
   2ec58:	461a      	mov	r2, r3
   2ec5a:	4619      	mov	r1, r3
   2ec5c:	f7ff ffab 	bl	2ebb6 <nrf_gpio_reconfigure>
}
   2ec60:	b005      	add	sp, #20
   2ec62:	f85d fb04 	ldr.w	pc, [sp], #4

0002ec66 <nrfx_nvmc_flash_size_get>:
   2ec66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ec6a:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   2ec6c:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2ec6e:	4350      	muls	r0, r2
   2ec70:	4770      	bx	lr

0002ec72 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2ec72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ec76:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2ec78:	4770      	bx	lr

0002ec7a <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2ec7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ec7e:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2ec80:	4770      	bx	lr

0002ec82 <nrf_gpio_cfg_default>:
{
   2ec82:	b507      	push	{r0, r1, r2, lr}
   2ec84:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ec86:	a801      	add	r0, sp, #4
   2ec88:	f7f5 fc2e 	bl	244e8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2ec8c:	9b01      	ldr	r3, [sp, #4]
   2ec8e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2ec92:	2202      	movs	r2, #2
   2ec94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   2ec98:	b003      	add	sp, #12
   2ec9a:	f85d fb04 	ldr.w	pc, [sp], #4

0002ec9e <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   2ec9e:	2302      	movs	r3, #2
   2eca0:	f7f5 bc30 	b.w	24504 <qspi_xfer>

0002eca4 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   2eca4:	2303      	movs	r3, #3
   2eca6:	f7f5 bc2d 	b.w	24504 <qspi_xfer>

0002ecaa <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   2ecaa:	2100      	movs	r1, #0
   2ecac:	2002      	movs	r0, #2
   2ecae:	f7f5 bed3 	b.w	24a58 <nrfx_qspi_erase>

0002ecb2 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2ecb2:	f7f5 bf37 	b.w	24b24 <_DoInit>

0002ecb6 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
   2ecb6:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
   2ecb8:	f7ff fffb 	bl	2ecb2 <SEGGER_RTT_Init>

	return 0;
}
   2ecbc:	2000      	movs	r0, #0
   2ecbe:	bd08      	pop	{r3, pc}

0002ecc0 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2ecc0:	4770      	bx	lr

0002ecc2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2ecc2:	b140      	cbz	r0, 2ecd6 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2ecc4:	68c3      	ldr	r3, [r0, #12]
   2ecc6:	7858      	ldrb	r0, [r3, #1]
   2ecc8:	f010 0001 	ands.w	r0, r0, #1
   2eccc:	bf1e      	ittt	ne
   2ecce:	7818      	ldrbne	r0, [r3, #0]
   2ecd0:	fab0 f080 	clzne	r0, r0
   2ecd4:	0940      	lsrne	r0, r0, #5
}
   2ecd6:	4770      	bx	lr

0002ecd8 <z_early_memset>:
	(void) memset(dst, c, n);
   2ecd8:	f7fc bfed 	b.w	2bcb6 <memset>

0002ecdc <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   2ecdc:	f7fc bfe0 	b.w	2bca0 <memcpy>

0002ece0 <k_heap_init>:
{
   2ece0:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2ece2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2ece6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2ecea:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2ecec:	f7fa bdc1 	b.w	29872 <sys_heap_init>

0002ecf0 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2ecf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ecf4:	b085      	sub	sp, #20
   2ecf6:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   2ecfa:	4607      	mov	r7, r0
   2ecfc:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2ecfe:	4650      	mov	r0, sl
   2ed00:	4621      	mov	r1, r4
{
   2ed02:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2ed04:	f000 fbce 	bl	2f4a4 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2ed08:	f1b4 3fff 	cmp.w	r4, #4294967295
   2ed0c:	bf08      	it	eq
   2ed0e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2ed12:	4605      	mov	r5, r0
   2ed14:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2ed16:	bf04      	itt	eq
   2ed18:	f04f 35ff 	moveq.w	r5, #4294967295
   2ed1c:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2ed20:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   2ed24:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ed28:	f3ef 8411 	mrs	r4, BASEPRI
   2ed2c:	f383 8812 	msr	BASEPRI_MAX, r3
   2ed30:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2ed34:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2ed38:	464a      	mov	r2, r9
   2ed3a:	4641      	mov	r1, r8
   2ed3c:	4638      	mov	r0, r7
   2ed3e:	f7fa fd31 	bl	297a4 <sys_heap_aligned_alloc>
   2ed42:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2ed44:	f7f7 f9e4 	bl	26110 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2ed48:	9b03      	ldr	r3, [sp, #12]
   2ed4a:	b13b      	cbz	r3, 2ed5c <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   2ed4c:	f384 8811 	msr	BASEPRI, r4
   2ed50:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2ed54:	4618      	mov	r0, r3
   2ed56:	b005      	add	sp, #20
   2ed58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2ed5c:	1a28      	subs	r0, r5, r0
   2ed5e:	eb66 0101 	sbc.w	r1, r6, r1
   2ed62:	2801      	cmp	r0, #1
   2ed64:	f171 0200 	sbcs.w	r2, r1, #0
   2ed68:	dbf0      	blt.n	2ed4c <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2ed6a:	e9cd 0100 	strd	r0, r1, [sp]
   2ed6e:	465a      	mov	r2, fp
   2ed70:	4621      	mov	r1, r4
   2ed72:	4650      	mov	r0, sl
   2ed74:	f7f6 fe7a 	bl	25a6c <z_pend_curr>
	__asm__ volatile(
   2ed78:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ed7c:	f3ef 8411 	mrs	r4, BASEPRI
   2ed80:	f383 8812 	msr	BASEPRI_MAX, r3
   2ed84:	f3bf 8f6f 	isb	sy
	return k;
   2ed88:	e7d6      	b.n	2ed38 <k_heap_aligned_alloc+0x48>

0002ed8a <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2ed8a:	b538      	push	{r3, r4, r5, lr}
   2ed8c:	4604      	mov	r4, r0
   2ed8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ed92:	f3ef 8511 	mrs	r5, BASEPRI
   2ed96:	f383 8812 	msr	BASEPRI_MAX, r3
   2ed9a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2ed9e:	f7fa fcc9 	bl	29734 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2eda2:	f104 000c 	add.w	r0, r4, #12
   2eda6:	f000 fb1a 	bl	2f3de <z_unpend_all>
   2edaa:	b130      	cbz	r0, 2edba <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2edac:	4629      	mov	r1, r5
   2edae:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2edb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2edb6:	f7f6 bebd 	b.w	25b34 <z_reschedule>
	__asm__ volatile(
   2edba:	f385 8811 	msr	BASEPRI, r5
   2edbe:	f3bf 8f6f 	isb	sy
}
   2edc2:	bd38      	pop	{r3, r4, r5, pc}

0002edc4 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2edc4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   2edc8:	4313      	orrs	r3, r2
   2edca:	f013 0303 	ands.w	r3, r3, #3
   2edce:	d10c      	bne.n	2edea <create_free_list+0x26>
	slab->free_list = NULL;
   2edd0:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2edd2:	6881      	ldr	r1, [r0, #8]
   2edd4:	4299      	cmp	r1, r3
   2edd6:	d801      	bhi.n	2eddc <create_free_list+0x18>
	return 0;
   2edd8:	2000      	movs	r0, #0
   2edda:	4770      	bx	lr
		*(char **)p = slab->free_list;
   2eddc:	6941      	ldr	r1, [r0, #20]
   2edde:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   2ede0:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   2ede2:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2ede4:	3301      	adds	r3, #1
		p += slab->block_size;
   2ede6:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2ede8:	e7f3      	b.n	2edd2 <create_free_list+0xe>
		return -EINVAL;
   2edea:	f06f 0015 	mvn.w	r0, #21
}
   2edee:	4770      	bx	lr

0002edf0 <k_mem_slab_init>:
{
   2edf0:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   2edf2:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
   2edf6:	2300      	movs	r3, #0
	slab->buffer = buffer;
   2edf8:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   2edfa:	6183      	str	r3, [r0, #24]
{
   2edfc:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   2edfe:	f7ff ffe1 	bl	2edc4 <create_free_list>
	if (rc < 0) {
   2ee02:	2800      	cmp	r0, #0
   2ee04:	bfa8      	it	ge
   2ee06:	e9c4 4400 	strdge	r4, r4, [r4]
}
   2ee0a:	bd10      	pop	{r4, pc}

0002ee0c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2ee0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ee0e:	4604      	mov	r4, r0
   2ee10:	460d      	mov	r5, r1
	__asm__ volatile(
   2ee12:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ee16:	f3ef 8611 	mrs	r6, BASEPRI
   2ee1a:	f383 8812 	msr	BASEPRI_MAX, r3
   2ee1e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2ee22:	6947      	ldr	r7, [r0, #20]
   2ee24:	b977      	cbnz	r7, 2ee44 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2ee26:	f000 fa90 	bl	2f34a <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2ee2a:	b158      	cbz	r0, 2ee44 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2ee2c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2ee2e:	6142      	str	r2, [r0, #20]
   2ee30:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2ee32:	f000 fa2b 	bl	2f28c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2ee36:	4631      	mov	r1, r6
   2ee38:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2ee3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2ee40:	f7f6 be78 	b.w	25b34 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2ee44:	682b      	ldr	r3, [r5, #0]
   2ee46:	6962      	ldr	r2, [r4, #20]
   2ee48:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2ee4a:	682b      	ldr	r3, [r5, #0]
   2ee4c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2ee4e:	69a3      	ldr	r3, [r4, #24]
   2ee50:	3b01      	subs	r3, #1
   2ee52:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2ee54:	f386 8811 	msr	BASEPRI, r6
   2ee58:	f3bf 8f6f 	isb	sy
}
   2ee5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ee5e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2ee5e:	f3ef 8005 	mrs	r0, IPSR
}
   2ee62:	3800      	subs	r0, #0
   2ee64:	bf18      	it	ne
   2ee66:	2001      	movne	r0, #1
   2ee68:	4770      	bx	lr

0002ee6a <z_impl_k_thread_name_set>:
}
   2ee6a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2ee6e:	4770      	bx	lr

0002ee70 <k_thread_name_get>:
}
   2ee70:	2000      	movs	r0, #0
   2ee72:	4770      	bx	lr

0002ee74 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2ee74:	f7f6 be70 	b.w	25b58 <z_sched_start>

0002ee78 <z_pm_save_idle_exit>:
{
   2ee78:	b508      	push	{r3, lr}
	pm_system_resume();
   2ee7a:	f7e5 fc7d 	bl	14778 <pm_system_resume>
}
   2ee7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2ee82:	f7ff bd9b 	b.w	2e9bc <sys_clock_idle_exit>

0002ee86 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2ee86:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2ee8a:	428b      	cmp	r3, r1
   2ee8c:	d001      	beq.n	2ee92 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2ee8e:	f7f6 be0b 	b.w	25aa8 <z_set_prio>
}
   2ee92:	2000      	movs	r0, #0
   2ee94:	4770      	bx	lr

0002ee96 <z_impl_k_mutex_init>:
{
   2ee96:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2ee98:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2ee9a:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2ee9e:	e9c3 3300 	strd	r3, r3, [r3]
}
   2eea2:	4770      	bx	lr

0002eea4 <queue_insert>:
{
   2eea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2eea8:	4699      	mov	r9, r3
   2eeaa:	4604      	mov	r4, r0
   2eeac:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2eeb0:	460d      	mov	r5, r1
   2eeb2:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2eeb4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2eeb8:	f04f 0240 	mov.w	r2, #64	; 0x40
   2eebc:	f3ef 8711 	mrs	r7, BASEPRI
   2eec0:	f382 8812 	msr	BASEPRI_MAX, r2
   2eec4:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2eec8:	b103      	cbz	r3, 2eecc <queue_insert+0x28>
	return list->tail;
   2eeca:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2eecc:	4630      	mov	r0, r6
   2eece:	f000 fa3c 	bl	2f34a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2eed2:	b158      	cbz	r0, 2eeec <queue_insert+0x48>
   2eed4:	2300      	movs	r3, #0
   2eed6:	67c3      	str	r3, [r0, #124]	; 0x7c
   2eed8:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2eedc:	f000 f9d6 	bl	2f28c <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2eee0:	4630      	mov	r0, r6
   2eee2:	4639      	mov	r1, r7
   2eee4:	f7f6 fe26 	bl	25b34 <z_reschedule>
		return 0;
   2eee8:	2000      	movs	r0, #0
   2eeea:	e00c      	b.n	2ef06 <queue_insert+0x62>
	if (alloc) {
   2eeec:	f1b9 0f00 	cmp.w	r9, #0
   2eef0:	d01b      	beq.n	2ef2a <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   2eef2:	2108      	movs	r1, #8
   2eef4:	f7f7 fa52 	bl	2639c <z_thread_aligned_alloc>
		if (anode == NULL) {
   2eef8:	b938      	cbnz	r0, 2ef0a <queue_insert+0x66>
	__asm__ volatile(
   2eefa:	f387 8811 	msr	BASEPRI, r7
   2eefe:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2ef02:	f06f 000b 	mvn.w	r0, #11
}
   2ef06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2ef0a:	2201      	movs	r2, #1
		anode->data = data;
   2ef0c:	f8c0 8004 	str.w	r8, [r0, #4]
   2ef10:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ef12:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ef14:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2ef18:	b95d      	cbnz	r5, 2ef32 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ef1a:	6822      	ldr	r2, [r4, #0]
   2ef1c:	430a      	orrs	r2, r1
   2ef1e:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2ef20:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2ef22:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2ef24:	b96a      	cbnz	r2, 2ef42 <queue_insert+0x9e>
	list->tail = node;
   2ef26:	6060      	str	r0, [r4, #4]
}
   2ef28:	e00b      	b.n	2ef42 <queue_insert+0x9e>
	node->next_and_flags = flags;
   2ef2a:	f8c8 9000 	str.w	r9, [r8]
}
   2ef2e:	4640      	mov	r0, r8
   2ef30:	e7ef      	b.n	2ef12 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2ef32:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2ef34:	2a03      	cmp	r2, #3
   2ef36:	d810      	bhi.n	2ef5a <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ef38:	6001      	str	r1, [r0, #0]
	return list->tail;
   2ef3a:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2ef3c:	b939      	cbnz	r1, 2ef4e <queue_insert+0xaa>
	list->head = node;
   2ef3e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2ef42:	2104      	movs	r1, #4
   2ef44:	f104 0010 	add.w	r0, r4, #16
   2ef48:	f000 fc37 	bl	2f7ba <z_handle_obj_poll_events>
   2ef4c:	e7c8      	b.n	2eee0 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ef4e:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ef50:	f002 0203 	and.w	r2, r2, #3
   2ef54:	4302      	orrs	r2, r0
   2ef56:	600a      	str	r2, [r1, #0]
   2ef58:	e7e5      	b.n	2ef26 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2ef5a:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ef5e:	430a      	orrs	r2, r1
   2ef60:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ef62:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ef64:	f002 0203 	and.w	r2, r2, #3
   2ef68:	ea40 0302 	orr.w	r3, r0, r2
   2ef6c:	602b      	str	r3, [r5, #0]
}
   2ef6e:	e7e8      	b.n	2ef42 <queue_insert+0x9e>

0002ef70 <z_queue_node_peek>:
{
   2ef70:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2ef72:	4604      	mov	r4, r0
   2ef74:	b130      	cbz	r0, 2ef84 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ef76:	6802      	ldr	r2, [r0, #0]
   2ef78:	0793      	lsls	r3, r2, #30
   2ef7a:	d003      	beq.n	2ef84 <z_queue_node_peek+0x14>
		ret = anode->data;
   2ef7c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2ef7e:	b109      	cbz	r1, 2ef84 <z_queue_node_peek+0x14>
			k_free(anode);
   2ef80:	f000 fc44 	bl	2f80c <k_free>
}
   2ef84:	4620      	mov	r0, r4
   2ef86:	bd10      	pop	{r4, pc}

0002ef88 <z_impl_k_queue_init>:
	list->head = NULL;
   2ef88:	2300      	movs	r3, #0
	list->tail = NULL;
   2ef8a:	e9c0 3300 	strd	r3, r3, [r0]
   2ef8e:	f100 0308 	add.w	r3, r0, #8
   2ef92:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2ef96:	f100 0310 	add.w	r3, r0, #16
   2ef9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2ef9e:	4770      	bx	lr

0002efa0 <k_queue_append>:
{
   2efa0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2efa2:	2301      	movs	r3, #1
   2efa4:	9300      	str	r3, [sp, #0]
   2efa6:	2300      	movs	r3, #0
{
   2efa8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2efaa:	4619      	mov	r1, r3
   2efac:	f7ff ff7a 	bl	2eea4 <queue_insert>
}
   2efb0:	b003      	add	sp, #12
   2efb2:	f85d fb04 	ldr.w	pc, [sp], #4

0002efb6 <k_queue_prepend>:
{
   2efb6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2efb8:	2300      	movs	r3, #0
{
   2efba:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2efbc:	9300      	str	r3, [sp, #0]
   2efbe:	4619      	mov	r1, r3
   2efc0:	f7ff ff70 	bl	2eea4 <queue_insert>
}
   2efc4:	b003      	add	sp, #12
   2efc6:	f85d fb04 	ldr.w	pc, [sp], #4

0002efca <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   2efca:	6800      	ldr	r0, [r0, #0]
   2efcc:	2100      	movs	r1, #0
   2efce:	f7ff bfcf 	b.w	2ef70 <z_queue_node_peek>

0002efd2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2efd2:	b15a      	cbz	r2, 2efec <z_impl_k_sem_init+0x1a>
   2efd4:	428a      	cmp	r2, r1
   2efd6:	d309      	bcc.n	2efec <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2efd8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2efdc:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2efe0:	e9c0 0000 	strd	r0, r0, [r0]
   2efe4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2efe8:	2000      	movs	r0, #0
   2efea:	4770      	bx	lr
		return -EINVAL;
   2efec:	f06f 0015 	mvn.w	r0, #21
}
   2eff0:	4770      	bx	lr

0002eff2 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2eff2:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2eff4:	2301      	movs	r3, #1
   2eff6:	408b      	lsls	r3, r1
   2eff8:	ea22 0303 	bic.w	r3, r2, r3
   2effc:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2effe:	fa22 f001 	lsr.w	r0, r2, r1
}
   2f002:	f000 0001 	and.w	r0, r0, #1
   2f006:	4770      	bx	lr

0002f008 <unschedule_locked>:
{
   2f008:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2f00a:	2103      	movs	r1, #3
{
   2f00c:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2f00e:	300c      	adds	r0, #12
   2f010:	f7ff ffef 	bl	2eff2 <flag_test_and_clear>
   2f014:	b130      	cbz	r0, 2f024 <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   2f016:	f104 0010 	add.w	r0, r4, #16
   2f01a:	f000 fa13 	bl	2f444 <z_abort_timeout>
   2f01e:	fab0 f080 	clz	r0, r0
   2f022:	0940      	lsrs	r0, r0, #5
}
   2f024:	bd10      	pop	{r4, pc}

0002f026 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2f026:	b120      	cbz	r0, 2f032 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2f028:	2200      	movs	r2, #0
   2f02a:	4611      	mov	r1, r2
   2f02c:	3088      	adds	r0, #136	; 0x88
   2f02e:	f000 b9e6 	b.w	2f3fe <z_sched_wake>
}
   2f032:	4770      	bx	lr

0002f034 <cancel_async_locked>:
{
   2f034:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2f036:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2f038:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2f03c:	079b      	lsls	r3, r3, #30
{
   2f03e:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2f040:	d416      	bmi.n	2f070 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2f042:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2f044:	2102      	movs	r1, #2
   2f046:	300c      	adds	r0, #12
   2f048:	f7ff ffd3 	bl	2eff2 <flag_test_and_clear>
   2f04c:	b180      	cbz	r0, 2f070 <cancel_async_locked+0x3c>
	return list->head;
   2f04e:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f052:	b16a      	cbz	r2, 2f070 <cancel_async_locked+0x3c>
   2f054:	4294      	cmp	r4, r2
   2f056:	d11d      	bne.n	2f094 <cancel_async_locked+0x60>
	return node->next;
   2f058:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f05a:	b99e      	cbnz	r6, 2f084 <cancel_async_locked+0x50>
   2f05c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   2f060:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2f064:	429c      	cmp	r4, r3
   2f066:	d101      	bne.n	2f06c <cancel_async_locked+0x38>
	list->tail = node;
   2f068:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   2f06c:	2300      	movs	r3, #0
   2f06e:	6023      	str	r3, [r4, #0]
	return *flagp;
   2f070:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2f072:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2f076:	bf1e      	ittt	ne
   2f078:	f043 0302 	orrne.w	r3, r3, #2
   2f07c:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2f07e:	f040 0002 	orrne.w	r0, r0, #2
}
   2f082:	bd70      	pop	{r4, r5, r6, pc}
   2f084:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f086:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   2f08a:	4294      	cmp	r4, r2
	list->tail = node;
   2f08c:	bf08      	it	eq
   2f08e:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   2f092:	e7eb      	b.n	2f06c <cancel_async_locked+0x38>
	return node->next;
   2f094:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f096:	6812      	ldr	r2, [r2, #0]
   2f098:	e7db      	b.n	2f052 <cancel_async_locked+0x1e>

0002f09a <work_timeout>:
{
   2f09a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2f09c:	4604      	mov	r4, r0
	__asm__ volatile(
   2f09e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f0a2:	f3ef 8511 	mrs	r5, BASEPRI
   2f0a6:	f383 8812 	msr	BASEPRI_MAX, r3
   2f0aa:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2f0ae:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2f0b0:	f1a0 0610 	sub.w	r6, r0, #16
   2f0b4:	2103      	movs	r1, #3
   2f0b6:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2f0b8:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2f0ba:	f7ff ff9a 	bl	2eff2 <flag_test_and_clear>
   2f0be:	b128      	cbz	r0, 2f0cc <work_timeout+0x32>
		queue = dw->queue;
   2f0c0:	69a3      	ldr	r3, [r4, #24]
   2f0c2:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2f0c4:	a901      	add	r1, sp, #4
   2f0c6:	4630      	mov	r0, r6
   2f0c8:	f7f6 fa92 	bl	255f0 <submit_to_queue_locked>
	__asm__ volatile(
   2f0cc:	f385 8811 	msr	BASEPRI, r5
   2f0d0:	f3bf 8f6f 	isb	sy
}
   2f0d4:	b002      	add	sp, #8
   2f0d6:	bd70      	pop	{r4, r5, r6, pc}

0002f0d8 <k_work_init>:
{
   2f0d8:	b538      	push	{r3, r4, r5, lr}
   2f0da:	4604      	mov	r4, r0
   2f0dc:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2f0de:	2210      	movs	r2, #16
   2f0e0:	2100      	movs	r1, #0
   2f0e2:	f7fc fde8 	bl	2bcb6 <memset>
   2f0e6:	6065      	str	r5, [r4, #4]
}
   2f0e8:	bd38      	pop	{r3, r4, r5, pc}

0002f0ea <k_work_busy_get>:
	__asm__ volatile(
   2f0ea:	f04f 0240 	mov.w	r2, #64	; 0x40
   2f0ee:	f3ef 8311 	mrs	r3, BASEPRI
   2f0f2:	f382 8812 	msr	BASEPRI_MAX, r2
   2f0f6:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   2f0fa:	68c0      	ldr	r0, [r0, #12]
   2f0fc:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   2f100:	f383 8811 	msr	BASEPRI, r3
   2f104:	f3bf 8f6f 	isb	sy
}
   2f108:	4770      	bx	lr

0002f10a <z_work_submit_to_queue>:
{
   2f10a:	b513      	push	{r0, r1, r4, lr}
   2f10c:	9001      	str	r0, [sp, #4]
   2f10e:	4608      	mov	r0, r1
	__asm__ volatile(
   2f110:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f114:	f3ef 8411 	mrs	r4, BASEPRI
   2f118:	f383 8812 	msr	BASEPRI_MAX, r3
   2f11c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2f120:	a901      	add	r1, sp, #4
   2f122:	f7f6 fa65 	bl	255f0 <submit_to_queue_locked>
	__asm__ volatile(
   2f126:	f384 8811 	msr	BASEPRI, r4
   2f12a:	f3bf 8f6f 	isb	sy
}
   2f12e:	b002      	add	sp, #8
   2f130:	bd10      	pop	{r4, pc}

0002f132 <k_work_submit_to_queue>:
{
   2f132:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2f134:	f7ff ffe9 	bl	2f10a <z_work_submit_to_queue>
	if (ret > 0) {
   2f138:	1e04      	subs	r4, r0, #0
   2f13a:	dd09      	ble.n	2f150 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2f13c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f140:	f3ef 8011 	mrs	r0, BASEPRI
   2f144:	f383 8812 	msr	BASEPRI_MAX, r3
   2f148:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2f14c:	f000 f931 	bl	2f3b2 <z_reschedule_irqlock>
}
   2f150:	4620      	mov	r0, r4
   2f152:	bd10      	pop	{r4, pc}

0002f154 <k_work_queue_init>:
{
   2f154:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   2f156:	22a0      	movs	r2, #160	; 0xa0
   2f158:	2100      	movs	r1, #0
   2f15a:	f7fc fdac 	bl	2bcb6 <memset>
}
   2f15e:	bd08      	pop	{r3, pc}

0002f160 <k_work_init_delayable>:
{
   2f160:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2f162:	2230      	movs	r2, #48	; 0x30
{
   2f164:	4604      	mov	r4, r0
   2f166:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2f168:	2100      	movs	r1, #0
   2f16a:	f7fc fda4 	bl	2bcb6 <memset>
   2f16e:	f44f 7380 	mov.w	r3, #256	; 0x100
   2f172:	6065      	str	r5, [r4, #4]
   2f174:	60e3      	str	r3, [r4, #12]
}
   2f176:	bd38      	pop	{r3, r4, r5, pc}

0002f178 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   2f178:	f7ff bfb7 	b.w	2f0ea <k_work_busy_get>

0002f17c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2f17c:	b538      	push	{r3, r4, r5, lr}
   2f17e:	4604      	mov	r4, r0
   2f180:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f184:	f3ef 8511 	mrs	r5, BASEPRI
   2f188:	f383 8812 	msr	BASEPRI_MAX, r3
   2f18c:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2f190:	f7ff ff3a 	bl	2f008 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2f194:	4620      	mov	r0, r4
   2f196:	f7ff ff4d 	bl	2f034 <cancel_async_locked>
	__asm__ volatile(
   2f19a:	f385 8811 	msr	BASEPRI, r5
   2f19e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2f1a2:	bd38      	pop	{r3, r4, r5, pc}

0002f1a4 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2f1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f1a6:	4604      	mov	r4, r0
   2f1a8:	460d      	mov	r5, r1
	__asm__ volatile(
   2f1aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f1ae:	f3ef 8611 	mrs	r6, BASEPRI
   2f1b2:	f383 8812 	msr	BASEPRI_MAX, r3
   2f1b6:	f3bf 8f6f 	isb	sy
	return *flagp;
   2f1ba:	68c3      	ldr	r3, [r0, #12]
   2f1bc:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2f1c0:	2b00      	cmp	r3, #0
   2f1c2:	bf14      	ite	ne
   2f1c4:	2701      	movne	r7, #1
   2f1c6:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2f1c8:	d105      	bne.n	2f1d6 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   2f1ca:	f386 8811 	msr	BASEPRI, r6
   2f1ce:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2f1d2:	4638      	mov	r0, r7
   2f1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   2f1d6:	f7ff ff17 	bl	2f008 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2f1da:	4620      	mov	r0, r4
   2f1dc:	f7ff ff2a 	bl	2f034 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2f1e0:	4629      	mov	r1, r5
   2f1e2:	4620      	mov	r0, r4
   2f1e4:	f7f6 f9e6 	bl	255b4 <cancel_sync_locked>
   2f1e8:	f386 8811 	msr	BASEPRI, r6
   2f1ec:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   2f1f0:	2800      	cmp	r0, #0
   2f1f2:	d0ee      	beq.n	2f1d2 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   2f1f4:	f04f 32ff 	mov.w	r2, #4294967295
   2f1f8:	f04f 33ff 	mov.w	r3, #4294967295
   2f1fc:	f105 0008 	add.w	r0, r5, #8
   2f200:	f7f6 f8d8 	bl	253b4 <z_impl_k_sem_take>
   2f204:	e7e5      	b.n	2f1d2 <k_work_cancel_delayable_sync+0x2e>

0002f206 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2f206:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2f20a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2f20c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2f20e:	2300      	movs	r3, #0
	node->prev = NULL;
   2f210:	e9c0 3300 	strd	r3, r3, [r0]
}
   2f214:	4770      	bx	lr

0002f216 <unpend_thread_no_timeout>:
{
   2f216:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2f218:	f7ff fff5 	bl	2f206 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2f21c:	7b43      	ldrb	r3, [r0, #13]
   2f21e:	f023 0302 	bic.w	r3, r3, #2
   2f222:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2f224:	2300      	movs	r3, #0
   2f226:	6083      	str	r3, [r0, #8]
}
   2f228:	bd08      	pop	{r3, pc}

0002f22a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2f22a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2f22e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2f232:	4283      	cmp	r3, r0
		return b2 - b1;
   2f234:	bf14      	ite	ne
   2f236:	1ac0      	subne	r0, r0, r3
	return 0;
   2f238:	2000      	moveq	r0, #0
}
   2f23a:	4770      	bx	lr

0002f23c <add_to_waitq_locked>:
{
   2f23c:	b538      	push	{r3, r4, r5, lr}
   2f23e:	4604      	mov	r4, r0
   2f240:	460d      	mov	r5, r1
	unready_thread(thread);
   2f242:	f7f6 fbb3 	bl	259ac <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2f246:	7b63      	ldrb	r3, [r4, #13]
   2f248:	f043 0302 	orr.w	r3, r3, #2
   2f24c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2f24e:	b1e5      	cbz	r5, 2f28a <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   2f250:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   2f252:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f254:	429d      	cmp	r5, r3
   2f256:	d109      	bne.n	2f26c <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   2f258:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2f25a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2f25e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2f260:	606c      	str	r4, [r5, #4]
}
   2f262:	e012      	b.n	2f28a <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   2f264:	686a      	ldr	r2, [r5, #4]
   2f266:	4293      	cmp	r3, r2
   2f268:	d0f6      	beq.n	2f258 <add_to_waitq_locked+0x1c>
   2f26a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2f26c:	2b00      	cmp	r3, #0
   2f26e:	d0f3      	beq.n	2f258 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   2f270:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2f274:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2f278:	428a      	cmp	r2, r1
   2f27a:	d0f3      	beq.n	2f264 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2f27c:	4291      	cmp	r1, r2
   2f27e:	ddf1      	ble.n	2f264 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   2f280:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2f282:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2f286:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2f288:	605c      	str	r4, [r3, #4]
}
   2f28a:	bd38      	pop	{r3, r4, r5, pc}

0002f28c <z_ready_thread>:
{
   2f28c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2f28e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f292:	f3ef 8411 	mrs	r4, BASEPRI
   2f296:	f383 8812 	msr	BASEPRI_MAX, r3
   2f29a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2f29e:	f7f6 fb51 	bl	25944 <ready_thread>
	__asm__ volatile(
   2f2a2:	f384 8811 	msr	BASEPRI, r4
   2f2a6:	f3bf 8f6f 	isb	sy
}
   2f2aa:	bd10      	pop	{r4, pc}

0002f2ac <z_unpend_thread_no_timeout>:
{
   2f2ac:	b508      	push	{r3, lr}
	__asm__ volatile(
   2f2ae:	f04f 0240 	mov.w	r2, #64	; 0x40
   2f2b2:	f3ef 8111 	mrs	r1, BASEPRI
   2f2b6:	f382 8812 	msr	BASEPRI_MAX, r2
   2f2ba:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2f2be:	6883      	ldr	r3, [r0, #8]
   2f2c0:	b10b      	cbz	r3, 2f2c6 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   2f2c2:	f7ff ffa8 	bl	2f216 <unpend_thread_no_timeout>
	__asm__ volatile(
   2f2c6:	f381 8811 	msr	BASEPRI, r1
   2f2ca:	f3bf 8f6f 	isb	sy
}
   2f2ce:	bd08      	pop	{r3, pc}

0002f2d0 <z_sched_wake_thread>:
{
   2f2d0:	b538      	push	{r3, r4, r5, lr}
   2f2d2:	4604      	mov	r4, r0
	__asm__ volatile(
   2f2d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f2d8:	f3ef 8511 	mrs	r5, BASEPRI
   2f2dc:	f383 8812 	msr	BASEPRI_MAX, r3
   2f2e0:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2f2e4:	7b43      	ldrb	r3, [r0, #13]
   2f2e6:	f013 0f28 	tst.w	r3, #40	; 0x28
   2f2ea:	d10b      	bne.n	2f304 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   2f2ec:	6883      	ldr	r3, [r0, #8]
   2f2ee:	b10b      	cbz	r3, 2f2f4 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   2f2f0:	f7ff ff91 	bl	2f216 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2f2f4:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   2f2f6:	b951      	cbnz	r1, 2f30e <z_sched_wake_thread+0x3e>
   2f2f8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2f2fc:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   2f2fe:	4620      	mov	r0, r4
   2f300:	f7f6 fb20 	bl	25944 <ready_thread>
	__asm__ volatile(
   2f304:	f385 8811 	msr	BASEPRI, r5
   2f308:	f3bf 8f6f 	isb	sy
}
   2f30c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2f30e:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   2f312:	e7f3      	b.n	2f2fc <z_sched_wake_thread+0x2c>

0002f314 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   2f314:	2101      	movs	r1, #1
   2f316:	3818      	subs	r0, #24
   2f318:	f7ff bfda 	b.w	2f2d0 <z_sched_wake_thread>

0002f31c <z_unpend1_no_timeout>:
{
   2f31c:	b508      	push	{r3, lr}
   2f31e:	4603      	mov	r3, r0
	__asm__ volatile(
   2f320:	f04f 0240 	mov.w	r2, #64	; 0x40
   2f324:	f3ef 8111 	mrs	r1, BASEPRI
   2f328:	f382 8812 	msr	BASEPRI_MAX, r2
   2f32c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2f330:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f332:	4283      	cmp	r3, r0
   2f334:	d007      	beq.n	2f346 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   2f336:	b108      	cbz	r0, 2f33c <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   2f338:	f7ff ff6d 	bl	2f216 <unpend_thread_no_timeout>
	__asm__ volatile(
   2f33c:	f381 8811 	msr	BASEPRI, r1
   2f340:	f3bf 8f6f 	isb	sy
}
   2f344:	bd08      	pop	{r3, pc}
   2f346:	2000      	movs	r0, #0
   2f348:	e7f8      	b.n	2f33c <z_unpend1_no_timeout+0x20>

0002f34a <z_unpend_first_thread>:
{
   2f34a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2f34c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f350:	f3ef 8511 	mrs	r5, BASEPRI
   2f354:	f383 8812 	msr	BASEPRI_MAX, r3
   2f358:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2f35c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f35e:	42a0      	cmp	r0, r4
   2f360:	d00d      	beq.n	2f37e <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   2f362:	b134      	cbz	r4, 2f372 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   2f364:	4620      	mov	r0, r4
   2f366:	f7ff ff56 	bl	2f216 <unpend_thread_no_timeout>
   2f36a:	f104 0018 	add.w	r0, r4, #24
   2f36e:	f000 f869 	bl	2f444 <z_abort_timeout>
	__asm__ volatile(
   2f372:	f385 8811 	msr	BASEPRI, r5
   2f376:	f3bf 8f6f 	isb	sy
}
   2f37a:	4620      	mov	r0, r4
   2f37c:	bd38      	pop	{r3, r4, r5, pc}
   2f37e:	2400      	movs	r4, #0
   2f380:	e7f7      	b.n	2f372 <z_unpend_first_thread+0x28>

0002f382 <z_unpend_thread>:
{
   2f382:	b510      	push	{r4, lr}
   2f384:	4601      	mov	r1, r0
	__asm__ volatile(
   2f386:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f38a:	f3ef 8411 	mrs	r4, BASEPRI
   2f38e:	f383 8812 	msr	BASEPRI_MAX, r3
   2f392:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2f396:	6883      	ldr	r3, [r0, #8]
   2f398:	b10b      	cbz	r3, 2f39e <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   2f39a:	f7ff ff3c 	bl	2f216 <unpend_thread_no_timeout>
	__asm__ volatile(
   2f39e:	f384 8811 	msr	BASEPRI, r4
   2f3a2:	f3bf 8f6f 	isb	sy
}
   2f3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f3aa:	f101 0018 	add.w	r0, r1, #24
   2f3ae:	f000 b849 	b.w	2f444 <z_abort_timeout>

0002f3b2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2f3b2:	4603      	mov	r3, r0
   2f3b4:	b920      	cbnz	r0, 2f3c0 <z_reschedule_irqlock+0xe>
   2f3b6:	f3ef 8205 	mrs	r2, IPSR
   2f3ba:	b90a      	cbnz	r2, 2f3c0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2f3bc:	f7e6 b87e 	b.w	154bc <arch_swap>
   2f3c0:	f383 8811 	msr	BASEPRI, r3
   2f3c4:	f3bf 8f6f 	isb	sy
}
   2f3c8:	4770      	bx	lr

0002f3ca <z_reschedule_unlocked>:
	__asm__ volatile(
   2f3ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f3ce:	f3ef 8011 	mrs	r0, BASEPRI
   2f3d2:	f383 8812 	msr	BASEPRI_MAX, r3
   2f3d6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2f3da:	f7ff bfea 	b.w	2f3b2 <z_reschedule_irqlock>

0002f3de <z_unpend_all>:
{
   2f3de:	b538      	push	{r3, r4, r5, lr}
   2f3e0:	4605      	mov	r5, r0
	int need_sched = 0;
   2f3e2:	2000      	movs	r0, #0
	return list->head == list;
   2f3e4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f3e6:	42a5      	cmp	r5, r4
   2f3e8:	d000      	beq.n	2f3ec <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2f3ea:	b904      	cbnz	r4, 2f3ee <z_unpend_all+0x10>
}
   2f3ec:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2f3ee:	4620      	mov	r0, r4
   2f3f0:	f7ff ffc7 	bl	2f382 <z_unpend_thread>
		z_ready_thread(thread);
   2f3f4:	4620      	mov	r0, r4
   2f3f6:	f7ff ff49 	bl	2f28c <z_ready_thread>
		need_sched = 1;
   2f3fa:	2001      	movs	r0, #1
   2f3fc:	e7f2      	b.n	2f3e4 <z_unpend_all+0x6>

0002f3fe <z_sched_wake>:
{
   2f3fe:	b538      	push	{r3, r4, r5, lr}
   2f400:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f404:	f3ef 8511 	mrs	r5, BASEPRI
   2f408:	f383 8812 	msr	BASEPRI_MAX, r3
   2f40c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2f410:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f412:	42a0      	cmp	r0, r4
   2f414:	d012      	beq.n	2f43c <z_sched_wake+0x3e>
		if (thread != NULL) {
   2f416:	b19c      	cbz	r4, 2f440 <z_sched_wake+0x42>
   2f418:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   2f41a:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   2f41c:	4620      	mov	r0, r4
   2f41e:	f7ff fefa 	bl	2f216 <unpend_thread_no_timeout>
   2f422:	f104 0018 	add.w	r0, r4, #24
   2f426:	f000 f80d 	bl	2f444 <z_abort_timeout>
			ready_thread(thread);
   2f42a:	4620      	mov	r0, r4
   2f42c:	f7f6 fa8a 	bl	25944 <ready_thread>
			ret = true;
   2f430:	2001      	movs	r0, #1
	__asm__ volatile(
   2f432:	f385 8811 	msr	BASEPRI, r5
   2f436:	f3bf 8f6f 	isb	sy
}
   2f43a:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   2f43c:	2000      	movs	r0, #0
   2f43e:	e7f8      	b.n	2f432 <z_sched_wake+0x34>
   2f440:	4620      	mov	r0, r4
   2f442:	e7f6      	b.n	2f432 <z_sched_wake+0x34>

0002f444 <z_abort_timeout>:
{
   2f444:	b510      	push	{r4, lr}
	__asm__ volatile(
   2f446:	f04f 0240 	mov.w	r2, #64	; 0x40
   2f44a:	f3ef 8411 	mrs	r4, BASEPRI
   2f44e:	f382 8812 	msr	BASEPRI_MAX, r2
   2f452:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2f456:	6803      	ldr	r3, [r0, #0]
   2f458:	b13b      	cbz	r3, 2f46a <z_abort_timeout+0x26>
			remove_timeout(to);
   2f45a:	f7f6 fd5d 	bl	25f18 <remove_timeout>
			ret = 0;
   2f45e:	2000      	movs	r0, #0
	__asm__ volatile(
   2f460:	f384 8811 	msr	BASEPRI, r4
   2f464:	f3bf 8f6f 	isb	sy
}
   2f468:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2f46a:	f06f 0015 	mvn.w	r0, #21
   2f46e:	e7f7      	b.n	2f460 <z_abort_timeout+0x1c>

0002f470 <z_get_next_timeout_expiry>:
{
   2f470:	b510      	push	{r4, lr}
	__asm__ volatile(
   2f472:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f476:	f3ef 8411 	mrs	r4, BASEPRI
   2f47a:	f383 8812 	msr	BASEPRI_MAX, r3
   2f47e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2f482:	f7f6 fd29 	bl	25ed8 <next_timeout>
	__asm__ volatile(
   2f486:	f384 8811 	msr	BASEPRI, r4
   2f48a:	f3bf 8f6f 	isb	sy
}
   2f48e:	bd10      	pop	{r4, pc}

0002f490 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2f490:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2f492:	f7f6 fe3d 	bl	26110 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2f496:	bd08      	pop	{r3, pc}

0002f498 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2f498:	f7f6 be3a 	b.w	26110 <sys_clock_tick_get>

0002f49c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2f49c:	b108      	cbz	r0, 2f4a2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2f49e:	f7e6 be31 	b.w	16104 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2f4a2:	4770      	bx	lr

0002f4a4 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2f4a4:	f1b1 3fff 	cmp.w	r1, #4294967295
   2f4a8:	bf08      	it	eq
   2f4aa:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2f4ae:	b538      	push	{r3, r4, r5, lr}
   2f4b0:	460c      	mov	r4, r1
   2f4b2:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2f4b4:	d014      	beq.n	2f4e0 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2f4b6:	4308      	orrs	r0, r1
   2f4b8:	d103      	bne.n	2f4c2 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2f4ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2f4be:	f7f6 be27 	b.w	26110 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2f4c2:	f06f 0001 	mvn.w	r0, #1
   2f4c6:	1b40      	subs	r0, r0, r5
   2f4c8:	f04f 33ff 	mov.w	r3, #4294967295
   2f4cc:	eb63 0101 	sbc.w	r1, r3, r1
   2f4d0:	2900      	cmp	r1, #0
   2f4d2:	da04      	bge.n	2f4de <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   2f4d4:	f7f6 fe1c 	bl	26110 <sys_clock_tick_get>
   2f4d8:	1940      	adds	r0, r0, r5
   2f4da:	eb41 0104 	adc.w	r1, r1, r4
}
   2f4de:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2f4e0:	f04f 30ff 	mov.w	r0, #4294967295
   2f4e4:	4601      	mov	r1, r0
   2f4e6:	e7fa      	b.n	2f4de <sys_clock_timeout_end_calc+0x3a>

0002f4e8 <k_timer_init>:
	timer->status = 0U;
   2f4e8:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2f4ea:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2f4ee:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2f4f2:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2f4f6:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2f4fa:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2f4fc:	6343      	str	r3, [r0, #52]	; 0x34
}
   2f4fe:	4770      	bx	lr

0002f500 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2f500:	b510      	push	{r4, lr}
   2f502:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2f504:	f7ff ff9e 	bl	2f444 <z_abort_timeout>

	if (inactive) {
   2f508:	b9b0      	cbnz	r0, 2f538 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2f50a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2f50c:	b10b      	cbz	r3, 2f512 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2f50e:	4620      	mov	r0, r4
   2f510:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2f512:	f104 0018 	add.w	r0, r4, #24
   2f516:	f7ff ff01 	bl	2f31c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2f51a:	b168      	cbz	r0, 2f538 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2f51c:	f7ff feb6 	bl	2f28c <z_ready_thread>
	__asm__ volatile(
   2f520:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f524:	f3ef 8011 	mrs	r0, BASEPRI
   2f528:	f383 8812 	msr	BASEPRI_MAX, r3
   2f52c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2f530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f534:	f7ff bf3d 	b.w	2f3b2 <z_reschedule_irqlock>
   2f538:	bd10      	pop	{r4, pc}

0002f53a <add_event>:
{
   2f53a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f53c:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2f53e:	e9d0 1300 	ldrd	r1, r3, [r0]
   2f542:	4288      	cmp	r0, r1
   2f544:	4604      	mov	r4, r0
   2f546:	d105      	bne.n	2f554 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2f548:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2f54a:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2f54e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2f550:	6065      	str	r5, [r4, #4]
   2f552:	e01d      	b.n	2f590 <add_event+0x56>
	if ((pending == NULL) ||
   2f554:	2b00      	cmp	r3, #0
   2f556:	d0f7      	beq.n	2f548 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2f558:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2f55a:	b100      	cbz	r0, 2f55e <add_event+0x24>
   2f55c:	3860      	subs	r0, #96	; 0x60
   2f55e:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2f562:	4639      	mov	r1, r7
   2f564:	f7ff fe61 	bl	2f22a <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2f568:	2800      	cmp	r0, #0
   2f56a:	dced      	bgt.n	2f548 <add_event+0xe>
	return list->head == list;
   2f56c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f56e:	42b4      	cmp	r4, r6
   2f570:	d0ea      	beq.n	2f548 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2f572:	2e00      	cmp	r6, #0
   2f574:	d0e8      	beq.n	2f548 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2f576:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2f578:	b101      	cbz	r1, 2f57c <add_event+0x42>
   2f57a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2f57c:	4638      	mov	r0, r7
   2f57e:	f7ff fe54 	bl	2f22a <z_sched_prio_cmp>
   2f582:	2800      	cmp	r0, #0
   2f584:	dd05      	ble.n	2f592 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2f586:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2f588:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2f58c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2f58e:	6075      	str	r5, [r6, #4]
}
   2f590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2f592:	6863      	ldr	r3, [r4, #4]
   2f594:	429e      	cmp	r6, r3
   2f596:	d0d7      	beq.n	2f548 <add_event+0xe>
   2f598:	6836      	ldr	r6, [r6, #0]
   2f59a:	e7ea      	b.n	2f572 <add_event+0x38>

0002f59c <register_events>:
{
   2f59c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2f5a0:	2500      	movs	r5, #0
{
   2f5a2:	468b      	mov	fp, r1
   2f5a4:	4614      	mov	r4, r2
   2f5a6:	461f      	mov	r7, r3
   2f5a8:	4682      	mov	sl, r0
	int events_registered = 0;
   2f5aa:	462e      	mov	r6, r5
	event->poller = NULL;
   2f5ac:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2f5ae:	455d      	cmp	r5, fp
   2f5b0:	db02      	blt.n	2f5b8 <register_events+0x1c>
}
   2f5b2:	4630      	mov	r0, r6
   2f5b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f5b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f5bc:	f3ef 8911 	mrs	r9, BASEPRI
   2f5c0:	f383 8812 	msr	BASEPRI_MAX, r3
   2f5c4:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2f5c8:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2f5cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2f5d0:	3b01      	subs	r3, #1
   2f5d2:	2b07      	cmp	r3, #7
   2f5d4:	d80f      	bhi.n	2f5f6 <register_events+0x5a>
   2f5d6:	e8df f003 	tbb	[pc, r3]
   2f5da:	041e      	.short	0x041e
   2f5dc:	0e0e0a0e 	.word	0x0e0e0a0e
   2f5e0:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   2f5e2:	f8da 3010 	ldr.w	r3, [sl, #16]
   2f5e6:	689b      	ldr	r3, [r3, #8]
   2f5e8:	b12b      	cbz	r3, 2f5f6 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2f5ea:	2302      	movs	r3, #2
   2f5ec:	e020      	b.n	2f630 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2f5ee:	f8da 3010 	ldr.w	r3, [sl, #16]
   2f5f2:	681b      	ldr	r3, [r3, #0]
   2f5f4:	bb8b      	cbnz	r3, 2f65a <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2f5f6:	bb47      	cbnz	r7, 2f64a <register_events+0xae>
   2f5f8:	7823      	ldrb	r3, [r4, #0]
   2f5fa:	b333      	cbz	r3, 2f64a <register_events+0xae>
	switch (event->type) {
   2f5fc:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2f600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2f604:	3b01      	subs	r3, #1
   2f606:	2b07      	cmp	r3, #7
   2f608:	d830      	bhi.n	2f66c <register_events+0xd0>
   2f60a:	e8df f003 	tbb	[pc, r3]
   2f60e:	2833      	.short	0x2833
   2f610:	2f2f282f 	.word	0x2f2f282f
   2f614:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   2f616:	f8da 3010 	ldr.w	r3, [sl, #16]
   2f61a:	689b      	ldr	r3, [r3, #8]
   2f61c:	2b00      	cmp	r3, #0
   2f61e:	d0ea      	beq.n	2f5f6 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2f620:	2301      	movs	r3, #1
   2f622:	e005      	b.n	2f630 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2f624:	f8da 3010 	ldr.w	r3, [sl, #16]
   2f628:	6a1b      	ldr	r3, [r3, #32]
   2f62a:	2b00      	cmp	r3, #0
   2f62c:	d0e3      	beq.n	2f5f6 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2f62e:	2310      	movs	r3, #16
	event->state |= state;
   2f630:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2f634:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2f638:	f3c2 3186 	ubfx	r1, r2, #14, #7
   2f63c:	430b      	orrs	r3, r1
   2f63e:	f363 3294 	bfi	r2, r3, #14, #7
   2f642:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2f646:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2f64a:	f389 8811 	msr	BASEPRI, r9
   2f64e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2f652:	3501      	adds	r5, #1
   2f654:	f10a 0a14 	add.w	sl, sl, #20
   2f658:	e7a9      	b.n	2f5ae <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2f65a:	2304      	movs	r3, #4
   2f65c:	e7e8      	b.n	2f630 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2f65e:	f8da 0010 	ldr.w	r0, [sl, #16]
   2f662:	4622      	mov	r2, r4
   2f664:	4651      	mov	r1, sl
   2f666:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2f668:	f7ff ff67 	bl	2f53a <add_event>
	event->poller = poller;
   2f66c:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2f670:	3601      	adds	r6, #1
   2f672:	e7ea      	b.n	2f64a <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2f674:	f8da 0010 	ldr.w	r0, [sl, #16]
   2f678:	4622      	mov	r2, r4
   2f67a:	4651      	mov	r1, sl
   2f67c:	e7f4      	b.n	2f668 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2f67e:	f8da 0010 	ldr.w	r0, [sl, #16]
   2f682:	4622      	mov	r2, r4
   2f684:	4651      	mov	r1, sl
   2f686:	3024      	adds	r0, #36	; 0x24
   2f688:	e7ee      	b.n	2f668 <register_events+0xcc>

0002f68a <signal_poll_event>:
{
   2f68a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2f68e:	6884      	ldr	r4, [r0, #8]
{
   2f690:	4605      	mov	r5, r0
   2f692:	460e      	mov	r6, r1
	if (poller != NULL) {
   2f694:	b144      	cbz	r4, 2f6a8 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2f696:	7863      	ldrb	r3, [r4, #1]
   2f698:	2b01      	cmp	r3, #1
   2f69a:	d12e      	bne.n	2f6fa <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2f69c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2f6a0:	f013 0302 	ands.w	r3, r3, #2
   2f6a4:	d10a      	bne.n	2f6bc <signal_poll_event+0x32>
		poller->is_polling = false;
   2f6a6:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2f6a8:	68eb      	ldr	r3, [r5, #12]
   2f6aa:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2f6ae:	4316      	orrs	r6, r2
	event->poller = NULL;
   2f6b0:	2000      	movs	r0, #0
	event->state |= state;
   2f6b2:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   2f6b6:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2f6b8:	60eb      	str	r3, [r5, #12]
	return retcode;
   2f6ba:	e03e      	b.n	2f73a <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2f6bc:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2f6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
   2f6c4:	bf08      	it	eq
   2f6c6:	f112 0f02 	cmneq.w	r2, #2
   2f6ca:	d032      	beq.n	2f732 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2f6cc:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2f6d0:	4640      	mov	r0, r8
   2f6d2:	f7ff fe56 	bl	2f382 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2f6d6:	2e08      	cmp	r6, #8
   2f6d8:	bf0c      	ite	eq
   2f6da:	f06f 0303 	mvneq.w	r3, #3
   2f6de:	2300      	movne	r3, #0
   2f6e0:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2f6e2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2f6e6:	06db      	lsls	r3, r3, #27
   2f6e8:	d109      	bne.n	2f6fe <signal_poll_event+0x74>
   2f6ea:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2f6ee:	b937      	cbnz	r7, 2f6fe <signal_poll_event+0x74>
	z_ready_thread(thread);
   2f6f0:	4640      	mov	r0, r8
   2f6f2:	f7ff fdcb 	bl	2f28c <z_ready_thread>
		poller->is_polling = false;
   2f6f6:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2f6f8:	e7d6      	b.n	2f6a8 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2f6fa:	2b02      	cmp	r3, #2
   2f6fc:	d001      	beq.n	2f702 <signal_poll_event+0x78>
		poller->is_polling = false;
   2f6fe:	2300      	movs	r3, #0
   2f700:	e7d1      	b.n	2f6a6 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2f702:	7823      	ldrb	r3, [r4, #0]
   2f704:	2b00      	cmp	r3, #0
   2f706:	d0cf      	beq.n	2f6a8 <signal_poll_event+0x1e>
   2f708:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2f70c:	2f00      	cmp	r7, #0
   2f70e:	d0f2      	beq.n	2f6f6 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2f710:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2f714:	f1a4 0914 	sub.w	r9, r4, #20
   2f718:	f104 0014 	add.w	r0, r4, #20
   2f71c:	f7ff fe92 	bl	2f444 <z_abort_timeout>
		twork->poll_result = 0;
   2f720:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2f724:	4649      	mov	r1, r9
   2f726:	4638      	mov	r0, r7
   2f728:	f7ff fcef 	bl	2f10a <z_work_submit_to_queue>
		poller->is_polling = false;
   2f72c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2f730:	e7ba      	b.n	2f6a8 <signal_poll_event+0x1e>
		poller->is_polling = false;
   2f732:	2300      	movs	r3, #0
   2f734:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2f736:	f06f 000a 	mvn.w	r0, #10
}
   2f73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002f73e <clear_event_registrations>:
	while (num_events--) {
   2f73e:	2314      	movs	r3, #20
{
   2f740:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f742:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2f746:	2400      	movs	r4, #0
	switch (event->type) {
   2f748:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   2f74c:	b901      	cbnz	r1, 2f750 <clear_event_registrations+0x12>
}
   2f74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2f750:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2f754:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2f758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2f75c:	2b08      	cmp	r3, #8
   2f75e:	f1a0 0714 	sub.w	r7, r0, #20
   2f762:	d80c      	bhi.n	2f77e <clear_event_registrations+0x40>
   2f764:	fa26 f303 	lsr.w	r3, r6, r3
   2f768:	07db      	lsls	r3, r3, #31
   2f76a:	d508      	bpl.n	2f77e <clear_event_registrations+0x40>
	return node->next != NULL;
   2f76c:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2f770:	b12b      	cbz	r3, 2f77e <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2f772:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2f776:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2f778:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2f77a:	e940 4405 	strd	r4, r4, [r0, #-20]
   2f77e:	f382 8811 	msr	BASEPRI, r2
   2f782:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2f786:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f78a:	f3ef 8211 	mrs	r2, BASEPRI
   2f78e:	f383 8812 	msr	BASEPRI_MAX, r3
   2f792:	f3bf 8f6f 	isb	sy
   2f796:	3901      	subs	r1, #1
   2f798:	4638      	mov	r0, r7
   2f79a:	e7d7      	b.n	2f74c <clear_event_registrations+0xe>

0002f79c <k_poll_event_init>:
{
   2f79c:	b510      	push	{r4, lr}
	event->type = type;
   2f79e:	0552      	lsls	r2, r2, #21
   2f7a0:	0209      	lsls	r1, r1, #8
   2f7a2:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   2f7a6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   2f7aa:	430a      	orrs	r2, r1
   2f7ac:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2f7ae:	2400      	movs	r4, #0
	event->type = type;
   2f7b0:	430a      	orrs	r2, r1
	event->obj = obj;
   2f7b2:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2f7b6:	6084      	str	r4, [r0, #8]
}
   2f7b8:	bd10      	pop	{r4, pc}

0002f7ba <z_handle_obj_poll_events>:
{
   2f7ba:	4603      	mov	r3, r0
	return list->head == list;
   2f7bc:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2f7be:	4283      	cmp	r3, r0
   2f7c0:	d008      	beq.n	2f7d4 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2f7c2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2f7c6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2f7c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2f7ca:	2300      	movs	r3, #0
	node->prev = NULL;
   2f7cc:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2f7d0:	f7ff bf5b 	b.w	2f68a <signal_poll_event>
}
   2f7d4:	4770      	bx	lr

0002f7d6 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2f7d6:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2f7d8:	e9c0 0000 	strd	r0, r0, [r0]
   2f7dc:	6083      	str	r3, [r0, #8]
}
   2f7de:	4770      	bx	lr

0002f7e0 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2f7e0:	2300      	movs	r3, #0
   2f7e2:	6083      	str	r3, [r0, #8]
}
   2f7e4:	4770      	bx	lr

0002f7e6 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2f7e6:	3204      	adds	r2, #4
{
   2f7e8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   2f7ea:	4604      	mov	r4, r0
   2f7ec:	d208      	bcs.n	2f800 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2f7ee:	2600      	movs	r6, #0
   2f7f0:	2700      	movs	r7, #0
   2f7f2:	e9cd 6700 	strd	r6, r7, [sp]
   2f7f6:	f041 0104 	orr.w	r1, r1, #4
   2f7fa:	f7ff fa79 	bl	2ecf0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2f7fe:	b910      	cbnz	r0, 2f806 <z_heap_aligned_alloc+0x20>
		return NULL;
   2f800:	2000      	movs	r0, #0
}
   2f802:	b002      	add	sp, #8
   2f804:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   2f806:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   2f80a:	e7fa      	b.n	2f802 <z_heap_aligned_alloc+0x1c>

0002f80c <k_free>:
	if (ptr != NULL) {
   2f80c:	b120      	cbz	r0, 2f818 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2f80e:	1f01      	subs	r1, r0, #4
   2f810:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2f814:	f7ff bab9 	b.w	2ed8a <k_heap_free>
}
   2f818:	4770      	bx	lr

0002f81a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2f81a:	4770      	bx	lr
